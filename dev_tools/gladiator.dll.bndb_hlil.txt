/*
Type: PE
Platform: windows-x86
Architecture: x86

Libraries: 
  KERNEL32.dll

Compiler(s) Used: 
  Imported Functions (93 objects)
  VS2003 v7.1 SP1 .NET build 6030 and MASM 6.13.7299 (4 objects)
  MASM 6.13.7299 (29 objects)
  VS97 v5.0 SP3 link 5.10.7303 and VS98 v6.0 RTM/SP1/SP2 build 8168 (3 objects)
  VS98 v6.0 RTM/SP1/SP2 build 8168 (180 objects)

Segments:
r--  0x10000000-0x10001000 
r-x  0x10001000-0x10057abe  {Code}
r--  0x10058000-0x100597e8  {Data}
rw-  0x1005a000-0x10063000  {Data}
rw-  0x10063000-0x1006b3d8  {Data}
rw-  0x1006c000-0x1006cc25  {Data}
r--  0x1006d000-0x10070de9  {Data}
---  0x10070df0-0x10070f64 
---  0x10070f70-0x10070f84 

Sections:
0x10001000-0x10057abe  .text  {Code}
0x10058000-0x100597e8  .rdata  {Read-only data}
0x1005a000-0x1006b3d8  .data  {Writable data}
0x1006c000-0x1006cc25  .idata  {Writable data}
0x1006d000-0x10070de9  .reloc  {Read-only data}
0x10070df0-0x10070f64  .extern  {External}
0x10070f70-0x10070f84  .synthetic_builtins  {External}
*/
10000000  struct DOS_Header __dos_header = 
10000000  {
10000000      char e_magic[0x2] = "MZ"
10000002      uint16_t e_cblp = 0x90
10000004      uint16_t e_cp = 0x3
10000006      uint16_t e_crlc = 0x0
10000008      uint16_t e_cparhdr = 0x4
1000000a      uint16_t e_minalloc = 0x0
1000000c      uint16_t e_maxalloc = 0xffff
1000000e      uint16_t e_ss = 0x0
10000010      uint16_t e_sp = 0xb8
10000012      uint16_t e_csum = 0x0
10000014      uint16_t e_ip = 0x0
10000016      uint16_t e_cs = 0x0
10000018      uint16_t e_lfarlc = 0x40
1000001a      uint16_t e_ovno = 0x0
1000001c      char e_res1[0x8] = "\x00\x00\x00\x00\x00\x00\x00", 0
10000024      uint16_t e_oemid = 0x0
10000026      uint16_t e_oeminfo = 0x0
10000028      char e_res2[0x14] = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 0
1000003c      uint32_t e_lfanew = 0xd8
10000040  }

10000040  __dos_stub:
10000040  0e 1f ba 0e 00 b4 09 cd 21 b8 01 4c cd 21 54 68 69 73 20 70 72 6f 67 72 61 6d 20 63 61 6e 6e 6f  ........!..L.!This program canno
10000060  74 20 62 65 20 72 75 6e 20 69 6e 20 44 4f 53 20 6d 6f 64 65 2e 0d 0d 0a 24 00 00 00 00 00 00 00  t be run in DOS mode....$.......

10000080  struct Rich_Header __rich_header = 
10000080  {
10000080      uint32_t e_magic__DanS = 0x3a043b7d
10000084      uint32_t e_align[0x3] = 
10000084      {
10000084          [0x0] =  0x696a5a39
10000088          [0x1] =  0x696a5a39
1000008c          [0x2] =  0x696a5a39
10000090      }
10000090      uint32_t e_entry_id0__000c1c7b = 0x69664642
10000094      uint32_t e_entry_count0__4 = 0x696a5a3d
10000098      uint32_t e_entry_id1__000b1fe8 = 0x696145d1
1000009c      uint32_t e_entry_count1__1 = 0x696a5a38
100000a0      uint32_t e_entry_id2__000e1c83 = 0x696446ba
100000a4      uint32_t e_entry_count2__29 = 0x696a5a24
100000a8      uint32_t e_entry_id3__00131f62 = 0x6979455b
100000ac      uint32_t e_entry_count3__3 = 0x696a5a3a
100000b0      uint32_t e_entry_id4__00010000 = 0x696b5a39
100000b4      uint32_t e_entry_count4__93 = 0x696a5a64
100000b8      uint32_t e_entry_id5__000a1fe8 = 0x696045d1
100000bc      uint32_t e_entry_count5__178 = 0x696a5a8b
100000c0      uint32_t e_entry_id6__00041fe8 = 0x696e45d1
100000c4      uint32_t e_entry_count6__1 = 0x696a5a38
100000c8      char e_magic[0x4] = "Rich"
100000cc      uint32_t e_checksum = 0x696a5a39
100000d0  }

100000d0                                                  00 00 00 00 00 00 00 00                                          ........

100000d8  struct COFF_Header __coff_header = 
100000d8  {
100000d8      char magic[0x4] = "PE\x00", 0
100000dc      enum coff_machine machine = IMAGE_FILE_MACHINE_I386
100000de      uint16_t numberOfSections = 0x5
100000e0      uint32_t timeDateStamp = 0x37922af5
100000e4      uint32_t pointerToSymbolTable = 0x0
100000e8      uint32_t numberOfSymbols = 0x0
100000ec      uint16_t sizeOfOptionalHeader = 0xe0
100000ee      enum coff_characteristics characteristics = IMAGE_FILE_EXECUTABLE_IMAGE | IMAGE_FILE_LINE_NUMS_STRIPPED | IMAGE_FILE_LOCAL_SYMS_STRIPPED | IMAGE_FILE_32BIT_MACHINE | IMAGE_FILE_DLL
100000f0  }
100000f0  struct PE32_Optional_Header __pe32_optional_header = 
100000f0  {
100000f0      enum pe_magic magic = PE_32BIT
100000f2      uint8_t majorLinkerVersion = 0x6
100000f3      uint8_t minorLinkerVersion = 0x0
100000f4      uint32_t sizeOfCode = 0x57000
100000f8      uint32_t sizeOfInitializedData = 0x19000
100000fc      uint32_t sizeOfUninitializedData = 0x0
10000100      uint32_t addressOfEntryPoint = 0x45e59
10000104      uint32_t baseOfCode = 0x1000
10000108      uint32_t baseOfData = 0x58000
1000010c      uint32_t imageBase = 0x10000000
10000110      uint32_t sectionAlignment = 0x1000
10000114      uint32_t fileAlignment = 0x1000
10000118      uint16_t majorOperatingSystemVersion = 0x4
1000011a      uint16_t minorOperatingSystemVersion = 0x0
1000011c      uint16_t majorImageVersion = 0x0
1000011e      uint16_t minorImageVersion = 0x0
10000120      uint16_t majorSubsystemVersion = 0x4
10000122      uint16_t minorSubsystemVersion = 0x0
10000124      uint32_t win32VersionValue = 0x0
10000128      uint32_t sizeOfImage = 0x71000
1000012c      uint32_t sizeOfHeaders = 0x1000
10000130      uint32_t checkSum = 0x0
10000134      enum pe_subsystem subsystem = IMAGE_SUBSYSTEM_WINDOWS_GUI
10000136      enum pe_dll_characteristics dllCharacteristics = 0
10000138      uint32_t sizeOfStackReserve = 0x100000
1000013c      uint32_t sizeOfStackCommit = 0x1000
10000140      uint32_t sizeOfHeapReserve = 0x100000
10000144      uint32_t sizeOfHeapCommit = 0x1000
10000148      uint32_t loaderFlags = 0x0
1000014c      uint32_t numberOfRvaAndSizes = 0x10
10000150      struct PE_Data_Directory_Entry exportTableEntry = 
10000150      {
10000150          uint32_t virtualAddress = 0x59690
10000154          uint32_t size = 0x158
10000158      }
10000158      struct PE_Data_Directory_Entry importTableEntry = 
10000158      {
10000158          uint32_t virtualAddress = 0x6c000
1000015c          uint32_t size = 0x28
10000160      }
10000160      struct PE_Data_Directory_Entry resourceTableEntry = 
10000160      {
10000160          uint32_t virtualAddress = 0x0
10000164          uint32_t size = 0x0
10000168      }
10000168      struct PE_Data_Directory_Entry exceptionTableEntry = 
10000168      {
10000168          uint32_t virtualAddress = 0x0
1000016c          uint32_t size = 0x0
10000170      }
10000170      struct PE_Data_Directory_Entry certificateTableEntry = 
10000170      {
10000170          uint32_t virtualAddress = 0x0
10000174          uint32_t size = 0x0
10000178      }
10000178      struct PE_Data_Directory_Entry baseRelocationTableEntry = 
10000178      {
10000178          uint32_t virtualAddress = 0x6d000
1000017c          uint32_t size = 0x36bc
10000180      }
10000180      struct PE_Data_Directory_Entry debugEntry = 
10000180      {
10000180          uint32_t virtualAddress = 0x0
10000184          uint32_t size = 0x0
10000188      }
10000188      struct PE_Data_Directory_Entry architectureEntry = 
10000188      {
10000188          uint32_t virtualAddress = 0x0
1000018c          uint32_t size = 0x0
10000190      }
10000190      struct PE_Data_Directory_Entry globalPtrEntry = 
10000190      {
10000190          uint32_t virtualAddress = 0x0
10000194          uint32_t size = 0x0
10000198      }
10000198      struct PE_Data_Directory_Entry tlsTableEntry = 
10000198      {
10000198          uint32_t virtualAddress = 0x0
1000019c          uint32_t size = 0x0
100001a0      }
100001a0      struct PE_Data_Directory_Entry loadConfigTableEntry = 
100001a0      {
100001a0          uint32_t virtualAddress = 0x0
100001a4          uint32_t size = 0x0
100001a8      }
100001a8      struct PE_Data_Directory_Entry boundImportEntry = 
100001a8      {
100001a8          uint32_t virtualAddress = 0x0
100001ac          uint32_t size = 0x0
100001b0      }
100001b0      struct PE_Data_Directory_Entry iatEntry = 
100001b0      {
100001b0          uint32_t virtualAddress = 0x6c210
100001b4          uint32_t size = 0x1e8
100001b8      }
100001b8      struct PE_Data_Directory_Entry delayImportDescriptorEntry = 
100001b8      {
100001b8          uint32_t virtualAddress = 0x0
100001bc          uint32_t size = 0x0
100001c0      }
100001c0      struct PE_Data_Directory_Entry clrRuntimeHeaderEntry = 
100001c0      {
100001c0          uint32_t virtualAddress = 0x0
100001c4          uint32_t size = 0x0
100001c8      }
100001c8      struct PE_Data_Directory_Entry reservedEntry = 
100001c8      {
100001c8          uint32_t virtualAddress = 0x0
100001cc          uint32_t size = 0x0
100001d0      }
100001d0  }
100001d0  struct Section_Header __section_headers[0x5] = 
100001d0  {
100001d0      [0x0] = 
100001d0      {
100001d0          char name[0x8] = ".text\x00\x00", 0
100001d8          uint32_t virtualSize = 0x56abe
100001dc          uint32_t virtualAddress = 0x1000
100001e0          uint32_t sizeOfRawData = 0x57000
100001e4          uint32_t pointerToRawData = 0x1000
100001e8          uint32_t pointerToRelocations = 0x0
100001ec          uint32_t pointerToLineNumbers = 0x0
100001f0          uint16_t numberOfRelocations = 0x0
100001f2          uint16_t numberOfLineNumbers = 0x0
100001f4          enum pe_section_flags characteristics = IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ
100001f8      }
100001f8      [0x1] = 
100001f8      {
100001f8          char name[0x8] = ".rdata\x00", 0
10000200          uint32_t virtualSize = 0x17e8
10000204          uint32_t virtualAddress = 0x58000
10000208          uint32_t sizeOfRawData = 0x2000
1000020c          uint32_t pointerToRawData = 0x58000
10000210          uint32_t pointerToRelocations = 0x0
10000214          uint32_t pointerToLineNumbers = 0x0
10000218          uint16_t numberOfRelocations = 0x0
1000021a          uint16_t numberOfLineNumbers = 0x0
1000021c          enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ
10000220      }
10000220      [0x2] = 
10000220      {
10000220          char name[0x8] = ".data\x00\x00", 0
10000228          uint32_t virtualSize = 0x113d8
1000022c          uint32_t virtualAddress = 0x5a000
10000230          uint32_t sizeOfRawData = 0x9000
10000234          uint32_t pointerToRawData = 0x5a000
10000238          uint32_t pointerToRelocations = 0x0
1000023c          uint32_t pointerToLineNumbers = 0x0
10000240          uint16_t numberOfRelocations = 0x0
10000242          uint16_t numberOfLineNumbers = 0x0
10000244          enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE
10000248      }
10000248      [0x3] = 
10000248      {
10000248          char name[0x8] = ".idata\x00", 0
10000250          uint32_t virtualSize = 0xc25
10000254          uint32_t virtualAddress = 0x6c000
10000258          uint32_t sizeOfRawData = 0x1000
1000025c          uint32_t pointerToRawData = 0x63000
10000260          uint32_t pointerToRelocations = 0x0
10000264          uint32_t pointerToLineNumbers = 0x0
10000268          uint16_t numberOfRelocations = 0x0
1000026a          uint16_t numberOfLineNumbers = 0x0
1000026c          enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE
10000270      }
10000270      [0x4] = 
10000270      {
10000270          char name[0x8] = ".reloc\x00", 0
10000278          uint32_t virtualSize = 0x3de9
1000027c          uint32_t virtualAddress = 0x6d000
10000280          uint32_t sizeOfRawData = 0x4000
10000284          uint32_t pointerToRawData = 0x64000
10000288          uint32_t pointerToRelocations = 0x0
1000028c          uint32_t pointerToLineNumbers = 0x0
10000290          uint16_t numberOfRelocations = 0x0
10000292          uint16_t numberOfLineNumbers = 0x0
10000294          enum pe_section_flags characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_DISCARDABLE | IMAGE_SCN_MEM_READ
10000298      }
10000298  }

10000298                                                                          00 00 00 00 00 00 00 00                          ........
100002a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100002c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100002e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100003a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100003c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100003e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100004a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100004c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100004e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100005a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100005c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100005e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100006a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100006c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100006e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100007a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100007c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100007e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100008a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100008c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100008e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100009a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100009c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100009e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10000fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

.text section started  {0x10001000-0x10057abe}
10001000  cc cc cc cc cc                                                                                   .....

10001005    float* j_sub_1002feb0(float arg1, int32_t* arg2, int32_t arg3, float arg4)

10001005  return sub_1002feb0(arg1, arg2, arg3, arg4) __tailcall


1000100a    void j_sub_1002bfb0(int32_t* arg1)

1000100a  return sub_1002bfb0(arg1) __tailcall


1000100f    int32_t j_sub_10028e80()

1000100f  return sub_10028e80() __tailcall


10001014    int32_t j_sub_1003dd40(void* arg1)

10001014  return sub_1003dd40(arg1) __tailcall


10001019    int32_t j_sub_1000ad40(int32_t arg1)

10001019  return sub_1000ad40(arg1) __tailcall


1000101e    int32_t j_sub_1003f9b0(void* arg1, char* arg2)

1000101e  return sub_1003f9b0(arg1, arg2) __tailcall


10001023    void* j_sub_10024590(void* arg1)

10001023  return sub_10024590(arg1) __tailcall


10001028    int32_t j_sub_1000df30(int32_t arg1)

10001028  return sub_1000df30(arg1) __tailcall


1000102d    void* j_sub_1002f2b0(void* arg1)

1000102d  return sub_1002f2b0(arg1) __tailcall


10001032    int32_t j_sub_1000efc0(int32_t* arg1)

10001032  return sub_1000efc0(arg1) __tailcall


10001037    void* j_sub_1001cd80(void* arg1)

10001037  return sub_1001cd80(arg1) __tailcall


1000103c    void j_sub_10035500(int32_t* arg1)

1000103c  return sub_10035500(arg1) __tailcall


10001041    int32_t j_sub_10042d80(float* arg1, int32_t arg2, float* arg3)

10001041  return sub_10042d80(arg1, arg2, arg3) __tailcall


10001046    int32_t j_sub_10037dd0(int32_t arg1)

10001046  return sub_10037dd0(arg1) __tailcall


1000104b    void* j_sub_1002a590(void* arg1)

1000104b  return sub_1002a590(arg1) __tailcall


10001050    int32_t j_sub_10028a40(void* arg1, int32_t arg2)

10001050  return sub_10028a40(arg1, arg2) __tailcall


10001055    char* j_sub_100217c0(char* arg1, char* arg2)

10001055  return sub_100217c0(arg1, arg2) __tailcall


1000105a    long double j_sub_10042cd0(float arg1, float arg2, float arg3)

1000105a  return sub_10042cd0(arg1, arg2, arg3) __tailcall


1000105f    int32_t j_sub_10018d00()

1000105f  return sub_10018d00() __tailcall


10001064    int32_t j_sub_10043cc0(char* arg1, char* arg2)

10001064  return sub_10043cc0(arg1, arg2) __tailcall


10001069    int32_t j_sub_10041650()

10001069  return sub_10041650() __tailcall


1000106e    int32_t j_sub_100370c0(int32_t arg1, int32_t arg2)

1000106e  return sub_100370c0(arg1, arg2) __tailcall


10001073    void* j_sub_100404b0(int32_t* arg1, char* arg2)

10001073  return sub_100404b0(arg1, arg2) __tailcall


10001078    void* j_sub_10035300(void* arg1)

10001078  return sub_10035300(arg1) __tailcall


1000107d    void* j_sub_10037320(int32_t arg1)

1000107d  return sub_10037320(arg1) __tailcall


10001082    char* j_sub_1002ca20(int32_t arg1, int32_t arg2, char* arg3)

10001082  return sub_1002ca20(arg1, arg2, arg3) __tailcall


10001087    int32_t j_sub_10017ca0(int32_t arg1, int32_t arg2)

10001087  return sub_10017ca0(arg1, arg2) __tailcall


1000108c    int32_t j_sub_10043fc0(char* arg1)

1000108c  return sub_10043fc0(arg1) __tailcall


10001091    int32_t* j_sub_10035fa0(char* arg1)

10001091  return sub_10035fa0(arg1) __tailcall


10001096    int32_t j_sub_100116a0(int32_t arg1)

10001096  return sub_100116a0(arg1) __tailcall


1000109b    void* j_sub_10010f60()

1000109b  return sub_10010f60() __tailcall


100010a0    int32_t j_sub_10043890(int32_t arg1)

100010a0  return sub_10043890(arg1) __tailcall


100010a5    int32_t j_sub_1003d580(void* arg1, char* arg2)

100010a5  return sub_1003d580(arg1, arg2) __tailcall


100010aa    int32_t j_sub_1003b880(void* arg1)

100010aa  return sub_1003b880(arg1) __tailcall


100010af    int32_t j_sub_10043870(int32_t arg1)

100010af  return sub_10043870(arg1) __tailcall


100010b4    int32_t j_sub_10030d00(float* arg1, int32_t arg2, void* arg3)

100010b4  return sub_10030d00(arg1, arg2, arg3) __tailcall


100010b9    int32_t j_sub_100056d0(int32_t* arg1, float* arg2)

100010b9  return sub_100056d0(arg1, arg2) __tailcall


100010be    int32_t j_sub_10041ff0(int32_t arg1, PSTR arg2)

100010be  return sub_10041ff0(arg1, arg2) __tailcall


100010c3    int32_t j_sub_1002e5d0(int32_t* arg1)

100010c3  return sub_1002e5d0(arg1) __tailcall


100010c8    int32_t j_sub_1002f7b0(void* arg1, int32_t arg2, float arg3)

100010c8  return sub_1002f7b0(arg1, arg2, arg3) __tailcall


100010cd    int32_t j_sub_10021f80(int32_t arg1)

100010cd  return sub_10021f80(arg1) __tailcall


100010d2    void j_sub_100431f0(int32_t arg1, float* arg2, int32_t arg3)

100010d2  return sub_100431f0(arg1, arg2, arg3) __tailcall


100010d7    void* j_sub_1002f270()

100010d7  return sub_1002f270() __tailcall


100010dc    char* j_sub_100067e0(int32_t* arg1, char* arg2, float* arg3)

100010dc  return sub_100067e0(arg1, arg2, arg3) __tailcall


100010e1    int32_t j_sub_100116d0()

100010e1  return sub_100116d0() __tailcall


100010e6    int32_t j_sub_10009570()

100010e6  return sub_10009570() __tailcall


100010eb    int32_t* j_sub_1002c020(void* arg1, char* arg2)

100010eb  return sub_1002c020(arg1, arg2) __tailcall


100010f0    int32_t* j_sub_1001c6f0()

100010f0  return sub_1001c6f0() __tailcall


100010f5    int32_t j_sub_1003cd00(void* arg1)

100010f5  return sub_1003cd00(arg1) __tailcall


100010fa    int32_t j_sub_1003a000(void* arg1, void* arg2, int16_t** arg3, int16_t** arg4)

100010fa  return sub_1003a000(arg1, arg2, arg3, arg4) __tailcall


100010ff    int32_t j_sub_1002bdd0(int32_t arg1)

100010ff  return sub_1002bdd0(arg1) __tailcall


10001104    void* j_sub_1003b320(int32_t arg1)

10001104  return sub_1003b320(arg1) __tailcall


10001109    int32_t j_sub_10038460()

10001109  return sub_10038460() __tailcall


1000110e    void* j_sub_1001ccc0(void* arg1)

1000110e  return sub_1001ccc0(arg1) __tailcall


10001113    int32_t j_sub_10018dc0(int32_t arg1)

10001113  return sub_10018dc0(arg1) __tailcall


10001118    int32_t __fastcall j_sub_1003b7f0(int32_t arg1)

10001118  return sub_1003b7f0(arg1) __tailcall


1000111d    int32_t j_sub_100343a0(int32_t arg1, int32_t* arg2, float arg3, int32_t arg4)

1000111d  return sub_100343a0(arg1, arg2, arg3, arg4) __tailcall


10001122    int32_t j_sub_1003cc10(void* arg1)

10001122  return sub_1003cc10(arg1) __tailcall


10001127    uint32_t j_sub_100115d0(int32_t arg1)

10001127  return sub_100115d0(arg1) __tailcall


1000112c    int32_t j_sub_1003b7b0(void* arg1)

1000112c  return sub_1003b7b0(arg1) __tailcall


10001131    int32_t j_sub_1003ac30(void* arg1)

10001131  return sub_1003ac30(arg1) __tailcall


10001136    char* j_sub_1002eb30(void* arg1, char* arg2)

10001136  return sub_1002eb30(arg1, arg2) __tailcall


1000113b    uint32_t j_sub_10011640(int32_t arg1)

1000113b  return sub_10011640(arg1) __tailcall


10001140    int32_t j_sub_1003fcb0(char* arg1)

10001140  return sub_1003fcb0(arg1) __tailcall


10001145    void j_sub_10031fe0(int32_t arg1, float* arg2, void* arg3)

10001145  return sub_10031fe0(arg1, arg2, arg3) __tailcall


1000114a    float* j_sub_10019a90(int32_t arg1, int32_t arg2, int32_t arg3)

1000114a  return sub_10019a90(arg1, arg2, arg3) __tailcall


1000114f    void* j_sub_1000d450()

1000114f  return sub_1000d450() __tailcall


10001154    int32_t j_sub_100385d0(int16_t* arg1, char arg2)

10001154  return sub_100385d0(arg1, arg2) __tailcall


10001159    int32_t j_sub_100320c0(int32_t arg1, float* arg2, void* arg3)

10001159  return sub_100320c0(arg1, arg2, arg3) __tailcall


1000115e    int32_t j_sub_100330e0(int32_t arg1, float arg2, void* arg3)

1000115e  return sub_100330e0(arg1, arg2, arg3) __tailcall


10001163    char* j_sub_1003df30(int32_t arg1, int32_t arg2, char* arg3)

10001163  return sub_1003df30(arg1, arg2, arg3) __tailcall


10001168    int32_t j_sub_1001a650(int32_t arg1)

10001168  return sub_1001a650(arg1) __tailcall


1000116d    int32_t j_sub_1003dc80(void* arg1, char* arg2)

1000116d  return sub_1003dc80(arg1, arg2) __tailcall


10001172    float* j_sub_10043440(float* arg1, float* arg2, float* arg3)

10001172  return sub_10043440(arg1, arg2, arg3) __tailcall


10001177    int32_t j_sub_10032fc0(int32_t arg1, float* arg2, void* arg3)

10001177  return sub_10032fc0(arg1, arg2, arg3) __tailcall


1000117c    long double j_sub_100226c0(void* arg1)

1000117c  return sub_100226c0(arg1) __tailcall


10001181    void j_sub_10029150(float arg1)

10001181  return sub_10029150(arg1) __tailcall


10001186    void j_sub_100181d0(int32_t arg1)

10001186  return sub_100181d0(arg1) __tailcall


1000118b    void j_sub_1001cfa0(float arg1)

1000118b  return sub_1001cfa0(arg1) __tailcall


10001190    void* j_sub_10029da0()

10001190  return sub_10029da0() __tailcall


10001195    int32_t j_sub_1000ee30()

10001195  return sub_1000ee30() __tailcall


1000119a    int32_t j_sub_1002acf0(int32_t arg1, char* arg2, uint32_t arg3)

1000119a  return sub_1002acf0(arg1, arg2, arg3) __tailcall


1000119f    void j_sub_1001bd40(void* arg1, float* arg2, float arg3, float arg4)

1000119f  return sub_1001bd40(arg1, arg2, arg3, arg4) __tailcall


100011a4    float* j_sub_10024fd0(float* arg1, float* arg2)

100011a4  return sub_10024fd0(arg1, arg2) __tailcall


100011a9    void j_sub_10026f10(void* arg1, char* arg2)

100011a9  return sub_10026f10(arg1, arg2) __tailcall


100011ae    int32_t j_sub_10023970(void* arg1)

100011ae  return sub_10023970(arg1) __tailcall


100011b3    int32_t j_sub_10038ee0()

100011b3  return sub_10038ee0() __tailcall


100011b8    int32_t j_sub_1003a690(void* arg1, char* arg2)

100011b8  return sub_1003a690(arg1, arg2) __tailcall


100011bd    int32_t* j_sub_1000da80(int32_t arg1, int32_t arg2)

100011bd  return sub_1000da80(arg1, arg2) __tailcall


100011c2    int32_t j_sub_1000c730(PSTR arg1, void* arg2)

100011c2  return sub_1000c730(arg1, arg2) __tailcall


100011c7    void* j_sub_10035430(char* arg1)

100011c7  return sub_10035430(arg1) __tailcall


100011cc    int32_t j_sub_10018c70()

100011cc  return sub_10018c70() __tailcall


100011d1    long double j_sub_10011220(float arg1)

100011d1  return sub_10011220(arg1) __tailcall


100011d6    int32_t j_sub_1003d1d0(void* arg1)

100011d6  return sub_1003d1d0(arg1) __tailcall


100011db    char* j_sub_10044000(void* arg1, char* arg2, char* arg3)

100011db  return sub_10044000(arg1, arg2, arg3) __tailcall


100011e0    void* j_sub_10010d50(int32_t* arg1)

100011e0  return sub_10010d50(arg1) __tailcall


100011e5    void* j_sub_100374f0(int32_t arg1)

100011e5  return sub_100374f0(arg1) __tailcall


100011ea    int32_t j_sub_1003d090(void* arg1)

100011ea  return sub_1003d090(arg1) __tailcall


100011ef    int32_t* j_sub_1002ed20(char* arg1)

100011ef  return sub_1002ed20(arg1) __tailcall


100011f4    void* j_sub_1002a9e0(void* arg1)

100011f4  return sub_1002a9e0(arg1) __tailcall


100011f9    void* j_sub_1002fe30(void* arg1)

100011f9  return sub_1002fe30(arg1) __tailcall


100011fe    int32_t j_sub_10023510(void* arg1)

100011fe  return sub_10023510(arg1) __tailcall


10001203    int32_t j_sub_1000a920(int32_t arg1, int32_t* arg2)

10001203  return sub_1000a920(arg1, arg2) __tailcall


10001208    int32_t j_sub_1002a7a0(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

10001208  return sub_1002a7a0(arg1, arg2, arg3, arg4) __tailcall


1000120d    int32_t j_sub_10038ec0()

1000120d  return sub_10038ec0() __tailcall


10001212    void j_sub_10036df0(int32_t* arg1)

10001212  return sub_10036df0(arg1) __tailcall


10001217    int32_t j_sub_10043970(int32_t arg1)

10001217  return sub_10043970(arg1) __tailcall


1000121c    int32_t j_sub_10019010()

1000121c  return sub_10019010() __tailcall


10001221    int32_t j_sub_10032190(int32_t arg1, float* arg2, float arg3)

10001221  return sub_10032190(arg1, arg2, arg3) __tailcall


10001226    int32_t j_sub_10010e90()

10001226  return sub_10010e90() __tailcall


1000122b    void* j_sub_1003b520()

1000122b  return sub_1003b520() __tailcall


10001230    int32_t j_sub_1002a5b0(int32_t* arg1, int32_t arg2)

10001230  return sub_1002a5b0(arg1, arg2) __tailcall


10001235    int32_t j_sub_1001ce20(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, float arg7)

10001235  return sub_1001ce20(arg1, arg2, arg3, arg4, arg5, arg6, arg7) __tailcall


1000123a    int32_t j_sub_1000ade0(int32_t arg1)

1000123a  return sub_1000ade0(arg1) __tailcall


1000123f    int32_t j_sub_1002ab90(void* arg1)

1000123f  return sub_1002ab90(arg1) __tailcall


10001244    void* j_sub_1001cbe0()

10001244  return sub_1001cbe0() __tailcall


10001249    int32_t j_sub_1002ebb0()

10001249  return sub_1002ebb0() __tailcall


1000124e    int32_t j_sub_10039a70(char* arg1, char* arg2)

1000124e  return sub_10039a70(arg1, arg2) __tailcall


10001253    int32_t* j_sub_10036ca0(int32_t arg1, void* arg2)

10001253  return sub_10036ca0(arg1, arg2) __tailcall


10001258    int32_t j_sub_10040990(void* arg1, void* arg2, char* arg3)

10001258  return sub_10040990(arg1, arg2, arg3) __tailcall


1000125d    int32_t j_sub_1000baa0(int32_t arg1, float* arg2, float arg3, float arg4, int32_t arg5, int32_t* arg6)

1000125d  return sub_1000baa0(arg1, arg2, arg3, arg4, arg5, arg6) __tailcall


10001262    int32_t j_sub_1003a2d0(void* arg1, int32_t* arg2, char** arg3, void** arg4)

10001262  return sub_1003a2d0(arg1, arg2, arg3, arg4) __tailcall


10001267    int32_t j_sub_1002c930(char* arg1, char* arg2, int32_t arg3)

10001267  return sub_1002c930(arg1, arg2, arg3) __tailcall


1000126c    void j_sub_100327f0(int32_t arg1, float* arg2, float arg3)

1000126c  return sub_100327f0(arg1, arg2, arg3) __tailcall


10001271    int32_t j_sub_10036f90(void* arg1, void* arg2)

10001271  return sub_10036f90(arg1, arg2) __tailcall


10001276    void j_sub_1002b7c0(char* arg1, int32_t arg2)

10001276  return sub_1002b7c0(arg1, arg2) __tailcall


1000127b    int32_t j_sub_1003f2d0(void* arg1, char* arg2)

1000127b  return sub_1003f2d0(arg1, arg2) __tailcall


10001280    void* j_sub_1002aab0(void* arg1, int32_t arg2, char* arg3)

10001280  return sub_1002aab0(arg1, arg2, arg3) __tailcall


10001285    int32_t j_sub_1000abe0(int32_t arg1, int32_t arg2)

10001285  return sub_1000abe0(arg1, arg2) __tailcall


1000128a    void* j_sub_10039120(void* arg1)

1000128a  return sub_10039120(arg1) __tailcall


1000128f    int32_t j_sub_10009a10(int32_t* arg1, int32_t arg2, float arg3, float arg4, int32_t arg5)

1000128f  return sub_10009a10(arg1, arg2, arg3, arg4, arg5) __tailcall


10001294    void* j_sub_1002a9a0()

10001294  return sub_1002a9a0() __tailcall


10001299    int32_t j_sub_100222e0(int32_t arg1)

10001299  return sub_100222e0(arg1) __tailcall


1000129e    int32_t j_sub_1001d260()

1000129e  return sub_1001d260() __tailcall


100012a3    void j_sub_10006920(int32_t* arg1)

100012a3  return sub_10006920(arg1) __tailcall


100012a8    int32_t j_DBI1::DeleteMod()

100012a8  return DBI1::DeleteMod() __tailcall


100012ad    int32_t j_sub_1003e7f0(void* arg1, char* arg2, int32_t arg3)

100012ad  return sub_1003e7f0(arg1, arg2, arg3) __tailcall


100012b2    char* j_sub_10020fe0(void* arg1, int32_t* arg2)

100012b2  return sub_10020fe0(arg1, arg2) __tailcall


100012b7    int32_t* j_sub_1000acb0(int32_t arg1, int32_t* arg2)

100012b7  return sub_1000acb0(arg1, arg2) __tailcall


100012bc    int32_t j_sub_1001ae60(float* arg1)

100012bc  return sub_1001ae60(arg1) __tailcall


100012c1    int32_t j_sub_1000d8d0(int32_t arg1, int32_t* arg2, char* arg3)

100012c1  return sub_1000d8d0(arg1, arg2, arg3) __tailcall


100012c6    void* j_sub_10039350(void* arg1, int32_t* arg2, int32_t* arg3)

100012c6  return sub_10039350(arg1, arg2, arg3) __tailcall


100012cb    float* j_sub_10031380(void* arg1, float* arg2)

100012cb  return sub_10031380(arg1, arg2) __tailcall


100012d0    int32_t j_sub_10021860(int32_t arg1, int32_t arg2)

100012d0  return sub_10021860(arg1, arg2) __tailcall


100012d5    int32_t j_sub_10041740()

100012d5  return sub_10041740() __tailcall


100012da    int32_t j_sub_1003ffd0(void* arg1)

100012da  return sub_1003ffd0(arg1) __tailcall


100012df    int32_t j_sub_10034070(int32_t arg1)

100012df  return sub_10034070(arg1) __tailcall


100012e4    int32_t* j_sub_1003b460(void* arg1, int32_t arg2)

100012e4  return sub_1003b460(arg1, arg2) __tailcall


100012e9    int32_t j_sub_10006d10(int32_t arg1, void* arg2, float* arg3, int32_t* arg4, int32_t* arg5)

100012e9  return sub_10006d10(arg1, arg2, arg3, arg4, arg5) __tailcall


100012ee    int32_t j_sub_10037820(char* arg1, int32_t arg2, int32_t arg3)

100012ee  return sub_10037820(arg1, arg2, arg3) __tailcall


100012f3    int32_t* j_sub_1001d140()

100012f3  return sub_1001d140() __tailcall


100012f8    int32_t j_sub_1001d070(void* arg1)

100012f8  return sub_1001d070(arg1) __tailcall


100012fd    int32_t j_sub_1003ecd0(void* arg1, char* arg2)

100012fd  return sub_1003ecd0(arg1, arg2) __tailcall


10001302    int32_t j_sub_100370f0(int32_t arg1, int32_t arg2)

10001302  return sub_100370f0(arg1, arg2) __tailcall


10001307    int32_t j_sub_1003fc70(void* arg1)

10001307  return sub_1003fc70(arg1) __tailcall


1000130c    int32_t j_sub_100400c0(void* arg1, char* arg2)

1000130c  return sub_100400c0(arg1, arg2) __tailcall


10001311    int32_t j_sub_10037950(int32_t arg1, int32_t arg2)

10001311  return sub_10037950(arg1, arg2) __tailcall


10001316    int32_t j_sub_10030600(float* arg1, float* arg2)

10001316  return sub_10030600(arg1, arg2) __tailcall


1000131b    int32_t j_sub_1000db40(void* arg1, int32_t arg2, int32_t arg3)

1000131b  return sub_1000db40(arg1, arg2, arg3) __tailcall


10001320    int32_t j_sub_1003f230(void* arg1, int32_t arg2)

10001320  return sub_1003f230(arg1, arg2) __tailcall


10001325    void* j_sub_10038f10(void* arg1)

10001325  return sub_10038f10(arg1) __tailcall


1000132a    char* j_sub_100386e0(int16_t* arg1, int32_t arg2, int32_t arg3)

1000132a  return sub_100386e0(arg1, arg2, arg3) __tailcall


1000132f    int32_t j_sub_100369c0(int32_t* arg1, char* arg2)

1000132f  return sub_100369c0(arg1, arg2) __tailcall


10001334    int32_t* j_sub_1002eaf0(int32_t* arg1, int32_t arg2)

10001334  return sub_1002eaf0(arg1, arg2) __tailcall


10001339    int32_t j_sub_1002f6f0(int32_t arg1)

10001339  return sub_1002f6f0(arg1) __tailcall


1000133e    uint32_t j_sub_100109e0(void* arg1)

1000133e  return sub_100109e0(arg1) __tailcall


10001343    int32_t j_sub_10043640(char* arg1)

10001343  return sub_10043640(arg1) __tailcall


10001348    int32_t j_sub_10022470(int32_t arg1)

10001348  return sub_10022470(arg1) __tailcall


1000134d    float* j_sub_10019eb0(int32_t arg1, int32_t arg2, int32_t arg3)

1000134d  return sub_10019eb0(arg1, arg2, arg3) __tailcall


10001352    int32_t j_sub_10021500(void* arg1)

10001352  return sub_10021500(arg1) __tailcall


10001357    int32_t j_sub_100068e0(int32_t* arg1, char* arg2)

10001357  return sub_100068e0(arg1, arg2) __tailcall


1000135c    void j_sub_10003680(float* arg1 @ ebp, int32_t arg2 @ esi, int32_t arg3 @ edi, int32_t arg4, float* arg5, float arg6, float arg7, float* arg8, float arg9, int32_t* arg10)

1000135c  return sub_10003680(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
1000135c      __tailcall


10001361    PSTR __stdcall j_sub_10041680(int32_t arg1, int32_t arg2, int16_t arg3)

10001361  return sub_10041680(arg1, arg2, arg3) __tailcall


10001366    long double j_sub_10011090(float arg1)

10001366  return sub_10011090(arg1) __tailcall


1000136b    int32_t j_sub_10036eb0(int32_t* arg1, char* arg2, float arg3)

1000136b  return sub_10036eb0(arg1, arg2, arg3) __tailcall


10001370    int32_t* j_sub_10034af0(void* arg1)

10001370  return sub_10034af0(arg1) __tailcall


10001375    int32_t j_sub_10010860()

10001375  return sub_10010860() __tailcall


1000137a    int32_t* j_sub_1002e510(void* arg1, int32_t arg2)

1000137a  return sub_1002e510(arg1, arg2) __tailcall


1000137f    int32_t j_sub_1001c2e0(float* arg1, int32_t arg2, float* arg3)

1000137f  return sub_1001c2e0(arg1, arg2, arg3) __tailcall


10001384    void* j_sub_1000d4a0(void* arg1)

10001384  return sub_1000d4a0(arg1) __tailcall


10001389    int32_t j_sub_1000da50(char* arg1)

10001389  return sub_1000da50(arg1) __tailcall


1000138e    uint32_t j_sub_10011610(int32_t arg1)

1000138e  return sub_10011610(arg1) __tailcall


10001393    int32_t j_sub_1003fab0(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

10001393  return sub_1003fab0(arg1, arg2, arg3, arg4) __tailcall


10001398    void j_sub_1000b1f0(float* arg1, int32_t arg2)

10001398  return sub_1000b1f0(arg1, arg2) __tailcall


1000139d    int32_t j_sub_1000d990(char* arg1)

1000139d  return sub_1000d990(arg1) __tailcall


100013a2    int32_t j_sub_10038380(int32_t arg1, float arg2)

100013a2  return sub_10038380(arg1, arg2) __tailcall


100013a7    void* j_sub_10021b90(void* arg1)

100013a7  return sub_10021b90(arg1) __tailcall


100013ac    int32_t j_sub_100423d0(int32_t arg1)

100013ac  return sub_100423d0(arg1) __tailcall


100013b1    void* j_sub_10039040(void* arg1, int32_t arg2)

100013b1  return sub_10039040(arg1, arg2) __tailcall


100013b6    int32_t* j_sub_10038bb0(char* arg1)

100013b6  return sub_10038bb0(arg1) __tailcall


100013bb    int32_t j_sub_10038a60(char* arg1, int32_t arg2)

100013bb  return sub_10038a60(arg1, arg2) __tailcall


100013c0    void* j_sub_1002d1b0(void* arg1)

100013c0  return sub_1002d1b0(arg1) __tailcall


100013c5    int32_t j_sub_1002a880()

100013c5  return sub_1002a880() __tailcall


100013ca    int32_t j_sub_10039cb0(int32_t* arg1, int32_t arg2)

100013ca  return sub_10039cb0(arg1, arg2) __tailcall


100013cf    int32_t __convention("regparm") j_sub_10039c30(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4)

100013cf  return sub_10039c30(arg1, arg2, arg3, arg4) __tailcall


100013d4    char* j_sub_10043ea0(void* arg1, char* arg2)

100013d4  return sub_10043ea0(arg1, arg2) __tailcall


100013d9    int32_t j_sub_10035640(void* arg1)

100013d9  return sub_10035640(arg1) __tailcall


100013de    void j_sub_10034210(int32_t arg1, float* arg2, float arg3)

100013de  return sub_10034210(arg1, arg2, arg3) __tailcall


100013e3    int32_t j_sub_10041210(int32_t* arg1, void* arg2, int32_t arg3)

100013e3  return sub_10041210(arg1, arg2, arg3) __tailcall


100013e8    void j_sub_10032e80(int32_t arg1, float arg2, void* arg3)

100013e8  return sub_10032e80(arg1, arg2, arg3) __tailcall


100013ed    int32_t* j_sub_1002b990(char* arg1)

100013ed  return sub_1002b990(arg1) __tailcall


100013f2    int32_t j_sub_10043c40(char* arg1, char* arg2, int32_t arg3)

100013f2  return sub_10043c40(arg1, arg2, arg3) __tailcall


100013f7    int32_t j_sub_1002fd90(void* arg1, int32_t arg2)

100013f7  return sub_1002fd90(arg1, arg2) __tailcall


100013fc    int32_t j_sub_1003cdf0(void* arg1)

100013fc  return sub_1003cdf0(arg1) __tailcall


10001401    int32_t* j_sub_10021a90(int32_t arg1, int32_t* arg2, int32_t arg3)

10001401  return sub_10021a90(arg1, arg2, arg3) __tailcall


10001406    int32_t* j_sub_10029a40(int32_t* arg1)

10001406  return sub_10029a40(arg1) __tailcall


1000140b    void* j_sub_10039460(int32_t arg1)

1000140b  return sub_10039460(arg1) __tailcall


10001410    void* j_sub_100372f0(int32_t arg1)

10001410  return sub_100372f0(arg1) __tailcall


10001415    int32_t* j_sub_1002c410(char* arg1)

10001415  return sub_1002c410(arg1) __tailcall


1000141a    int32_t j_sub_10026440(int32_t arg1)

1000141a  return sub_10026440(arg1) __tailcall


1000141f    int32_t* j_sub_10035280(int32_t* arg1, int32_t* arg2)

1000141f  return sub_10035280(arg1, arg2) __tailcall


10001424    int32_t j_sub_10008eb0(int32_t* arg1, int32_t arg2, int32_t arg3)

10001424  return sub_10008eb0(arg1, arg2, arg3) __tailcall


10001429    int32_t j_sub_10037350(int32_t arg1)

10001429  return sub_10037350(arg1) __tailcall


1000142e    long double j_sub_1002a620(int32_t* arg1, int32_t arg2)

1000142e  return sub_1002a620(arg1, arg2) __tailcall


10001433    int32_t j_sub_1001f760(int32_t* arg1)

10001433  return sub_1001f760(arg1) __tailcall


10001438    int32_t j_sub_100375e0(int32_t arg1, int32_t arg2)

10001438  return sub_100375e0(arg1, arg2) __tailcall


1000143d    int32_t j_sub_100353c0(char* arg1)

1000143d  return sub_100353c0(arg1) __tailcall


10001442    int32_t j_sub_10026770(void* arg1, char* arg2, int32_t* arg3)

10001442  return sub_10026770(arg1, arg2, arg3) __tailcall


10001447    int32_t j_sub_1001c1c0(int32_t arg1, int32_t* arg2, int32_t* arg3)

10001447  return sub_1001c1c0(arg1, arg2, arg3) __tailcall


1000144c    int32_t j_sub_10011670(int32_t arg1)

1000144c  return sub_10011670(arg1) __tailcall


10001451    int32_t j_sub_10019350()

10001451  return sub_10019350() __tailcall


10001456    int32_t j_sub_10015bb0()

10001456  return sub_10015bb0() __tailcall


1000145b    int32_t j_sub_100383f0(int32_t arg1, int32_t arg2, char* arg3)

1000145b  return sub_100383f0(arg1, arg2, arg3) __tailcall


10001460    void j_sub_1003e340(void* arg1, void* arg2)

10001460  return sub_1003e340(arg1, arg2) __tailcall


10001465    int32_t j_sub_100324c0(int32_t arg1, float* arg2, int32_t arg3)

10001465  return sub_100324c0(arg1, arg2, arg3) __tailcall


1000146a    uint32_t j_sub_10010a00(int32_t* arg1, int32_t arg2)

1000146a  return sub_10010a00(arg1, arg2) __tailcall


1000146f    int32_t j_sub_1001ade0()

1000146f  return sub_1001ade0() __tailcall


10001474    int32_t j_sub_10020b10(int32_t* arg1)

10001474  return sub_10020b10(arg1) __tailcall


10001479    int32_t j_sub_10039000(int32_t arg1)

10001479  return sub_10039000(arg1) __tailcall


1000147e    float* j_sub_10043540(float* arg1)

1000147e  return sub_10043540(arg1) __tailcall


10001483    int32_t __stdcall j_sub_100044f0(float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9, float arg10, int32_t arg11, int32_t arg12, float* arg13, float* arg14, int32_t* arg15, int32_t* arg16, float arg17, int32_t* arg18, int32_t arg19, float arg20)

10001483  return sub_100044f0(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, 
10001483      arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20) __tailcall


10001488    int32_t j_sub_10037090(int32_t arg1, int32_t arg2)

10001488  return sub_10037090(arg1, arg2) __tailcall


1000148d    int32_t j_sub_10003280()

1000148d  return sub_10003280() __tailcall


10001492    int32_t j_sub_10040090(void* arg1)

10001492  return sub_10040090(arg1) __tailcall


10001497    void j_sub_1000d4e0(float arg1)

10001497  return sub_1000d4e0(arg1) __tailcall


1000149c    int32_t j_sub_1001f290(void* arg1)

1000149c  return sub_1001f290(arg1) __tailcall


100014a1    int32_t j_sub_1001eb50(float arg1)

100014a1  return sub_1001eb50(arg1) __tailcall


100014a6    int32_t j_sub_100423b0()

100014a6  return sub_100423b0() __tailcall


100014ab    int32_t j_sub_10018df0()

100014ab  return sub_10018df0() __tailcall


100014b0    void j_sub_10030aa0(int32_t* arg1, int32_t arg2)

100014b0  return sub_10030aa0(arg1, arg2) __tailcall


100014b5    int32_t j_sub_10034170(void* arg1)

100014b5  return sub_10034170(arg1) __tailcall


100014ba    int32_t j_sub_10042920(float* arg1, float arg2)

100014ba  return sub_10042920(arg1, arg2) __tailcall


100014bf    int32_t j_sub_1003dbe0(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

100014bf  return sub_1003dbe0(arg1, arg2, arg3, arg4) __tailcall


100014c4    int32_t j_sub_100435b0(int32_t arg1)

100014c4  return sub_100435b0(arg1) __tailcall


100014c9    int32_t j_sub_10039150()

100014c9  return sub_10039150() __tailcall


100014ce    void* j_sub_10010b40(int32_t* arg1, void* arg2)

100014ce  return sub_10010b40(arg1, arg2) __tailcall


100014d3    int32_t j_sub_10043480(int32_t* arg1, int32_t* arg2)

100014d3  return sub_10043480(arg1, arg2) __tailcall


100014d8    void* j_sub_100388d0()

100014d8  return sub_100388d0() __tailcall


100014dd    int32_t j_sub_1002f1a0()

100014dd  return sub_1002f1a0() __tailcall


100014e2    int32_t j_sub_100160e0()

100014e2  return sub_100160e0() __tailcall


100014e7    int32_t j_sub_10010880(int32_t* arg1, int32_t arg2)

100014e7  return sub_10010880(arg1, arg2) __tailcall


100014ec    int32_t j_sub_1000f7b0(float* arg1, float arg2, float arg3, float arg4)

100014ec  return sub_1000f7b0(arg1, arg2, arg3, arg4) __tailcall


100014f1    int32_t j_sub_10009950(int32_t* arg1, float arg2, int32_t arg3)

100014f1  return sub_10009950(arg1, arg2, arg3) __tailcall


100014f6    int32_t j_sub_10019230(int32_t arg1)

100014f6  return sub_10019230(arg1) __tailcall


100014fb    int32_t j_sub_10040060(void* arg1)

100014fb  return sub_10040060(arg1) __tailcall


10001500    int32_t j_sub_10040f20(int32_t* arg1, void* arg2, int32_t arg3, int32_t arg4)

10001500  return sub_10040f20(arg1, arg2, arg3, arg4) __tailcall


10001505    int32_t j_sub_1003b6c0(void* arg1, int32_t arg2)

10001505  return sub_1003b6c0(arg1, arg2) __tailcall


1000150a    int32_t j_sub_1003ade0(void* arg1)

1000150a  return sub_1003ade0(arg1) __tailcall


1000150f    int32_t j_sub_10010780(float arg1, float* arg2, float* arg3, float* arg4)

1000150f  return sub_10010780(arg1, arg2, arg3, arg4) __tailcall


10001514    int32_t j_sub_1003ab10(void* arg1, char* arg2)

10001514  return sub_1003ab10(arg1, arg2) __tailcall


10001519    int32_t j_sub_1003f160(void* arg1, char* arg2)

10001519  return sub_1003f160(arg1, arg2) __tailcall


1000151e    int32_t j_sub_1003b7d0(void* arg1)

1000151e  return sub_1003b7d0(arg1) __tailcall


10001523    int32_t j_sub_100368b0(PSTR arg1, int32_t* arg2)

10001523  return sub_100368b0(arg1, arg2) __tailcall


10001528    int32_t j_sub_10008660(int32_t arg1, int32_t arg2)

10001528  return sub_10008660(arg1, arg2) __tailcall


1000152d    float* j_sub_10030260(float arg1, int32_t* arg2, int32_t arg3, float arg4, void* arg5, float arg6)

1000152d  return sub_10030260(arg1, arg2, arg3, arg4, arg5, arg6) __tailcall


10001532    long double j_sub_10029040(float arg1, float arg2, float arg3)

10001532  return sub_10029040(arg1, arg2, arg3) __tailcall


10001537    int32_t j_sub_1003ce90(void* arg1)

10001537  return sub_1003ce90(arg1) __tailcall


1000153c    int32_t j_sub_100205c0(void* arg1)

1000153c  return sub_100205c0(arg1) __tailcall


10001541    void* j_sub_1003ac00(void* arg1)

10001541  return sub_1003ac00(arg1) __tailcall


10001546    int32_t j_sub_10010c10(int32_t* arg1)

10001546  return sub_10010c10(arg1) __tailcall


1000154b    int32_t* j_sub_10038cf0()

1000154b  return sub_10038cf0() __tailcall


10001550    int32_t j_sub_10033a70(void* arg1)

10001550  return sub_10033a70(arg1) __tailcall


10001555    int32_t* j_sub_10038d80(void* arg1)

10001555  return sub_10038d80(arg1) __tailcall


1000155a    int32_t j_sub_10036570(int32_t* arg1, void* arg2)

1000155a  return sub_10036570(arg1, arg2) __tailcall


1000155f    int32_t j_sub_1001cab0()

1000155f  return sub_1001cab0() __tailcall


10001564    int32_t j_sub_100194a0()

10001564  return sub_100194a0() __tailcall


10001569    void j_sub_100340b0(int32_t arg1, float* arg2, void* arg3)

10001569  return sub_100340b0(arg1, arg2, arg3) __tailcall


1000156e    int32_t j_sub_100200a0(int32_t* arg1)

1000156e  return sub_100200a0(arg1) __tailcall


10001573    int32_t j_sub_1003b8d0(int32_t arg1)

10001573  return sub_1003b8d0(arg1) __tailcall


10001578    int32_t j_sub_100216f0(void* arg1)

10001578  return sub_100216f0(arg1) __tailcall


1000157d    int32_t j_sub_10037da0(char* arg1, int32_t arg2)

1000157d  return sub_10037da0(arg1, arg2) __tailcall


10001582    int32_t j_sub_1003dae0(void* arg1, char* arg2)

10001582  return sub_1003dae0(arg1, arg2) __tailcall


10001587    int32_t j_sub_10031270(void* arg1, void* arg2, int32_t arg3, float* arg4)

10001587  return sub_10031270(arg1, arg2, arg3, arg4) __tailcall


1000158c    int32_t j_sub_1002ea80(void* arg1, int32_t arg2, int32_t arg3)

1000158c  return sub_1002ea80(arg1, arg2, arg3) __tailcall


10001591    long double j_sub_100068a0(int32_t* arg1, char* arg2)

10001591  return sub_100068a0(arg1, arg2) __tailcall


10001596    void j_sub_1001a720(char* arg1, float* arg2, float* arg3, void* arg4, int32_t arg5)

10001596  return sub_1001a720(arg1, arg2, arg3, arg4, arg5) __tailcall


1000159b    void j_sub_10032620(int32_t arg1, int32_t arg2, void* arg3)

1000159b  return sub_10032620(arg1, arg2, arg3) __tailcall


100015a0    void* j_sub_10040380(int32_t arg1, int32_t arg2, int32_t arg3)

100015a0  return sub_10040380(arg1, arg2, arg3) __tailcall


100015a5    int32_t* j_sub_1002ccf0(void* arg1)

100015a5  return sub_1002ccf0(arg1) __tailcall


100015aa    void j_sub_1002e7d0(int32_t* arg1, int32_t arg2)

100015aa  return sub_1002e7d0(arg1, arg2) __tailcall


100015af    int32_t j_sub_10037200(int32_t arg1, int32_t arg2)

100015af  return sub_10037200(arg1, arg2) __tailcall


100015b4    int32_t j_sub_100309d0()

100015b4  return sub_100309d0() __tailcall


100015b9    void* j_sub_10037400(int32_t arg1)

100015b9  return sub_10037400(arg1) __tailcall


100015be    int32_t* j_sub_1002bea0(int32_t* arg1)

100015be  return sub_1002bea0(arg1) __tailcall


100015c3    int16_t* j_sub_100385b0(int16_t* arg1)

100015c3  return sub_100385b0(arg1) __tailcall


100015c8    int32_t* j_sub_1001c460(float* arg1, int32_t arg2, int32_t arg3)

100015c8  return sub_1001c460(arg1, arg2, arg3) __tailcall


100015cd    int32_t j_sub_10042e90()

100015cd  return sub_10042e90() __tailcall


100015d2    void* j_sub_1002df70(void* arg1)

100015d2  return sub_1002df70(arg1) __tailcall


100015d7    void* j_sub_10028c30()

100015d7  return sub_10028c30() __tailcall


100015dc    void* j_sub_1001ada0(void* arg1)

100015dc  return sub_1001ada0(arg1) __tailcall


100015e1    void* j_sub_100289a0(void* arg1, float arg2)

100015e1  return sub_100289a0(arg1, arg2) __tailcall


100015e6    int32_t j_sub_10021650(void* arg1)

100015e6  return sub_10021650(arg1) __tailcall


100015eb    int32_t j_sub_10031e20(int32_t arg1)

100015eb  return sub_10031e20(arg1) __tailcall


100015f0    int32_t j_sub_10043830(int32_t arg1)

100015f0  return sub_10043830(arg1) __tailcall


100015f5    long double j_sub_10042c80(float arg1)

100015f5  return sub_10042c80(arg1) __tailcall


100015fa    int32_t j_sub_1001bf00(int32_t arg1, float arg2, float arg3)

100015fa  return sub_1001bf00(arg1, arg2, arg3) __tailcall


100015ff    void j_sub_1000f840(int32_t arg1, float* arg2, int32_t* arg3, int32_t arg4, int32_t arg5, float* arg6, void* arg7, int32_t arg8, int32_t arg9, float arg10, char arg11, int32_t arg12)

100015ff  return sub_1000f840(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, 
100015ff      arg12) __tailcall


10001604    int32_t j_sub_100418d0(char* arg1)

10001604  return sub_100418d0(arg1) __tailcall


10001609    void j_sub_10011ae0(int32_t arg1, int32_t arg2)

10001609  return sub_10011ae0(arg1, arg2) __tailcall


1000160e    int32_t j_sub_1000a5e0(int32_t* arg1)

1000160e  return sub_1000a5e0(arg1) __tailcall


10001613    int32_t j_sub_10031c30(int32_t arg1, float arg2, float* arg3, float* arg4, float* arg5)

10001613  return sub_10031c30(arg1, arg2, arg3, arg4, arg5) __tailcall


10001618    int32_t j_sub_10037f70(int32_t arg1)

10001618  return sub_10037f70(arg1) __tailcall


1000161d    int32_t j_sub_10010690(float* arg1, int32_t* arg2, float* arg3)

1000161d  return sub_10010690(arg1, arg2, arg3) __tailcall


10001622    int32_t j_sub_10011040(int32_t arg1)

10001622  return sub_10011040(arg1) __tailcall


10001627    float* j_sub_100434b0(float* arg1, float* arg2, float* arg3)

10001627  return sub_100434b0(arg1, arg2, arg3) __tailcall


1000162c    int32_t* j_sub_10029e10(int32_t* arg1)

1000162c  return sub_10029e10(arg1) __tailcall


10001631    int32_t j_sub_100395f0(void* arg1, int32_t arg2)

10001631  return sub_100395f0(arg1, arg2) __tailcall


10001636    int32_t j_sub_10026be0(void* arg1, void* arg2)

10001636  return sub_10026be0(arg1, arg2) __tailcall


1000163b    void* j_sub_1001ad10()

1000163b  return sub_1001ad10() __tailcall


10001640    int32_t j_sub_10037f00(int32_t arg1, void* arg2)

10001640  return sub_10037f00(arg1, arg2) __tailcall


10001645    void j_sub_10004310(int32_t* arg1, float* arg2, float* arg3, float* arg4, int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8, int32_t* arg9)

10001645  return sub_10004310(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) __tailcall


1000164a    void* j_sub_1000dbd0(int32_t* arg1)

1000164a  return sub_1000dbd0(arg1) __tailcall


1000164f    int32_t j_sub_10029880(int32_t arg1, int32_t arg2)

1000164f  return sub_10029880(arg1, arg2) __tailcall


10001654    long double j_sub_10043300(float* arg1, float* arg2)

10001654  return sub_10043300(arg1, arg2) __tailcall


10001659    void* j_sub_10010fd0()

10001659  return sub_10010fd0() __tailcall


1000165e    int32_t j_sub_10042cb0(float arg1)

1000165e  return sub_10042cb0(arg1) __tailcall


10001663    int32_t j_sub_10038960(char* arg1)

10001663  return sub_10038960(arg1) __tailcall


10001668    char* j_sub_1000d960(int32_t arg1)

10001668  return sub_1000d960(arg1) __tailcall


1000166d    void j_sub_1002eb70()

1000166d  return sub_1002eb70() __tailcall


10001672    int32_t j_sub_10007460()

10001672  return sub_10007460() __tailcall


10001677    int32_t j_sub_1003ffb0(void* arg1, int32_t arg2)

10001677  return sub_1003ffb0(arg1, arg2) __tailcall


1000167c    void j_sub_1003b680(void* arg1)

1000167c  return sub_1003b680(arg1) __tailcall


10001681    void j_sub_1001cd10(float* arg1)

10001681  return sub_1001cd10(arg1) __tailcall


10001686    int32_t j_sub_10008b40()

10001686  return sub_10008b40() __tailcall


1000168b    int32_t j_sub_100377e0(char* arg1, int16_t arg2)

1000168b  return sub_100377e0(arg1, arg2) __tailcall


10001690    char* j_sub_1000da20(int32_t arg1)

10001690  return sub_1000da20(arg1) __tailcall


10001695    int32_t* j_sub_1002cd60(int32_t* arg1)

10001695  return sub_1002cd60(arg1) __tailcall


1000169a    int32_t j_sub_10006600(int32_t* arg1, char* arg2, int32_t arg3)

1000169a  return sub_10006600(arg1, arg2, arg3) __tailcall


1000169f    int32_t j_sub_10039630(void* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

1000169f  return sub_10039630(arg1, arg2, arg3, arg4) __tailcall


100016a4    void* j_sub_10040150(int32_t* arg1)

100016a4  return sub_10040150(arg1) __tailcall


100016a9    int32_t j_sub_100095c0()

100016a9  return sub_100095c0() __tailcall


100016ae    int32_t j_sub_10037850(char* arg1, int32_t arg2, int32_t arg3)

100016ae  return sub_10037850(arg1, arg2, arg3) __tailcall


100016b3    int32_t j_sub_1003cd80(void* arg1)

100016b3  return sub_1003cd80(arg1) __tailcall


100016b8    void j_sub_1002fd40(void* arg1)

100016b8  return sub_1002fd40(arg1) __tailcall


100016bd    int32_t j_sub_1000f130(int32_t* arg1)

100016bd  return sub_1000f130(arg1) __tailcall


100016c2    void* j_sub_10003240(void* arg1)

100016c2  return sub_10003240(arg1) __tailcall


100016c7    int32_t j_sub_10037390(int32_t arg1)

100016c7  return sub_10037390(arg1) __tailcall


100016cc    int32_t j_sub_1001c760(char* arg1)

100016cc  return sub_1001c760(arg1) __tailcall


100016d1    int32_t j_sub_10005a10(float* arg1)

100016d1  return sub_10005a10(arg1) __tailcall


100016d6    int32_t j_sub_10043d80(char* arg1, void* arg2)

100016d6  return sub_10043d80(arg1, arg2) __tailcall


100016db    long double j_sub_1000f4d0(int32_t* arg1, float arg2)

100016db  return sub_1000f4d0(arg1, arg2) __tailcall


100016e0    int32_t j_sub_1003dda0(void* arg1, char* arg2)

100016e0  return sub_1003dda0(arg1, arg2) __tailcall


100016e5    int32_t j_sub_10038620(int16_t arg1)

100016e5  return sub_10038620(arg1) __tailcall


100016ea    int32_t j_sub_10022990(void* arg1)

100016ea  return sub_10022990(arg1) __tailcall


100016ef    int32_t j_sub_1002f6a0(int32_t arg1)

100016ef  return sub_1002f6a0(arg1) __tailcall


100016f4    int32_t j_sub_1003e120(void* arg1, int32_t* arg2)

100016f4  return sub_1003e120(arg1, arg2) __tailcall


100016f9    int32_t j_sub_10031650(int32_t* arg1, int32_t* arg2, float arg3)

100016f9  return sub_10031650(arg1, arg2, arg3) __tailcall


100016fe    int32_t j_sub_1003fff0(void* arg1)

100016fe  return sub_1003fff0(arg1) __tailcall


10001703    int32_t GetBotAPI(int32_t arg1)

10001703  return sub_10038480(arg1) __tailcall


10001708    int32_t j_sub_10036e30()

10001708  return sub_10036e30() __tailcall


1000170d    int32_t j_sub_100297b0(int32_t arg1, int32_t arg2)

1000170d  return sub_100297b0(arg1, arg2) __tailcall


10001712    int32_t j_sub_10021710(void* arg1)

10001712  return sub_10021710(arg1) __tailcall


10001717    int32_t j_sub_10037e10(char* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

10001717  return sub_10037e10(arg1, arg2, arg3, arg4, arg5, arg6, arg7) __tailcall


1000171c    void j_sub_1002ac50(char* arg1)

1000171c  return sub_1002ac50(arg1) __tailcall


10001721    int32_t j_sub_1001a370(int32_t arg1, int32_t arg2)

10001721  return sub_1001a370(arg1, arg2) __tailcall


10001726    void* j_sub_1002f2e0(void* arg1)

10001726  return sub_1002f2e0(arg1) __tailcall


1000172b    int32_t j_sub_1002f890(int32_t arg1, char* arg2, int32_t* arg3)

1000172b  return sub_1002f890(arg1, arg2, arg3) __tailcall


10001730    int32_t j_sub_1000bb30(int32_t arg1)

10001730  return sub_1000bb30(arg1) __tailcall


10001735    void j_sub_10033210(int32_t arg1, float arg2, int32_t arg3)

10001735  return sub_10033210(arg1, arg2, arg3) __tailcall


1000173a    void* j_sub_1001ad50()

1000173a  return sub_1001ad50() __tailcall


1000173f    int32_t* j_sub_1002cac0(int32_t* arg1, char* arg2)

1000173f  return sub_1002cac0(arg1, arg2) __tailcall


10001744    int32_t* j_sub_1002b110(char* arg1)

10001744  return sub_1002b110(arg1) __tailcall


10001749    int32_t j_sub_10020050(void* arg1)

10001749  return sub_10020050(arg1) __tailcall


1000174e    void j_sub_10005e60(int32_t arg1, float arg2, float* arg3, int32_t* arg4, int32_t* arg5)

1000174e  return sub_10005e60(arg1, arg2, arg3, arg4, arg5) __tailcall


10001753    int32_t* j_sub_1000dc20(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6)

10001753  return sub_1000dc20(arg1, arg2, arg3, arg4, arg5, arg6) __tailcall


10001758    int32_t j_sub_100031b0(int32_t arg1)

10001758  return sub_100031b0(arg1) __tailcall


1000175d    void* j_sub_1002dfb0(void* arg1)

1000175d  return sub_1002dfb0(arg1) __tailcall


10001762    float* j_sub_10019fa0(float* arg1, float* arg2, int32_t arg3)

10001762  return sub_10019fa0(arg1, arg2, arg3) __tailcall


10001767    long double j_sub_1001d0a0(float* arg1, void* arg2)

10001767  return sub_1001d0a0(arg1, arg2) __tailcall


1000176c    int32_t j_sub_100354b0(void* arg1)

1000176c  return sub_100354b0(arg1) __tailcall


10001771    int32_t __stdcall j_sub_10041760(int32_t arg1, int32_t arg2)

10001771  return sub_10041760(arg1, arg2) __tailcall


10001776    int32_t* j_sub_1002cf40(int32_t* arg1)

10001776  return sub_1002cf40(arg1) __tailcall


1000177b    int32_t j_sub_10006760(int32_t* arg1, char* arg2)

1000177b  return sub_10006760(arg1, arg2) __tailcall


10001780    void* j_sub_100394a0(void* arg1)

10001780  return sub_100394a0(arg1) __tailcall


10001785    int32_t* j_sub_1002d7e0(int32_t* arg1)

10001785  return sub_1002d7e0(arg1) __tailcall


1000178a    int32_t j_sub_10037cf0()

1000178a  return sub_10037cf0() __tailcall


1000178f    int32_t j_sub_10040a50(void* arg1, char* arg2)

1000178f  return sub_10040a50(arg1, arg2) __tailcall


10001794    char* j_sub_1000d9c0(int32_t arg1)

10001794  return sub_1000d9c0(arg1) __tailcall


10001799    int32_t j_sub_1001ef40(int32_t* arg1)

10001799  return sub_1001ef40(arg1) __tailcall


1000179e    int32_t j_sub_10008d40(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

1000179e  return sub_10008d40(arg1, arg2, arg3, arg4) __tailcall


100017a3    int32_t j_sub_1001d2d0(int32_t arg1 @ esi, int32_t arg2 @ edi, void* arg3)

100017a3  return sub_1001d2d0(arg1, arg2, arg3) __tailcall


100017a8    long double j_sub_1001aff0(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

100017a8  return sub_1001aff0(arg1, arg2, arg3, arg4) __tailcall


100017ad    void* j_sub_10040470(void* arg1)

100017ad  return sub_10040470(arg1) __tailcall


100017b2    int32_t j_sub_10029480(int32_t arg1, void* arg2)

100017b2  return sub_10029480(arg1, arg2) __tailcall


100017b7    int32_t* j_sub_10020ed0(void* arg1, int32_t* arg2)

100017b7  return sub_10020ed0(arg1, arg2) __tailcall


100017bc    int32_t* j_sub_1002f730(int32_t* arg1)

100017bc  return sub_1002f730(arg1) __tailcall


100017c1    int32_t j_sub_100376b0(char* arg1, int16_t arg2)

100017c1  return sub_100376b0(arg1, arg2) __tailcall


100017c6    int32_t j_sub_10030770(int32_t arg1, int32_t arg2, float* arg3)

100017c6  return sub_10030770(arg1, arg2, arg3) __tailcall


100017cb    int32_t j_sub_1000ae30(int32_t arg1, int32_t* arg2)

100017cb  return sub_1000ae30(arg1, arg2) __tailcall


100017d0    int32_t* j_sub_1002b070(int32_t* arg1)

100017d0  return sub_1002b070(arg1) __tailcall


100017d5    int32_t j_sub_10021290(void* arg1, int32_t arg2)

100017d5  return sub_10021290(arg1, arg2) __tailcall


100017da    int32_t* j_sub_10036b10(int32_t arg1, int32_t arg2)

100017da  return sub_10036b10(arg1, arg2) __tailcall


100017df    int32_t j_sub_10032a00(int32_t arg1, float* arg2, void* arg3)

100017df  return sub_10032a00(arg1, arg2, arg3) __tailcall


100017e4    int32_t j_sub_10005c60(float* arg1, float* arg2)

100017e4  return sub_10005c60(arg1, arg2) __tailcall


100017e9    long double j_sub_10030a50(float arg1, float arg2)

100017e9  return sub_10030a50(arg1, arg2) __tailcall


100017ee    int32_t j_sub_10018920()

100017ee  return sub_10018920() __tailcall


100017f3    int32_t j_sub_1001af00(int32_t arg1)

100017f3  return sub_1001af00(arg1) __tailcall


100017f8    int32_t j_sub_10037bb0()

100017f8  return sub_10037bb0() __tailcall


100017fd    int32_t j_sub_1000afd0(int32_t* arg1, int32_t arg2, int32_t arg3)

100017fd  return sub_1000afd0(arg1, arg2, arg3) __tailcall


10001802    int32_t j_sub_10035340(void* arg1, char* arg2)

10001802  return sub_10035340(arg1, arg2) __tailcall


10001807    int32_t j_sub_10008c80()

10001807  return sub_10008c80() __tailcall


1000180c    void* j_sub_100390b0(void* arg1)

1000180c  return sub_100390b0(arg1) __tailcall


10001811    int32_t j_sub_10043900(int16_t arg1)

10001811  return sub_10043900(arg1) __tailcall


10001816    void j_sub_10040540(void* arg1, void* arg2, float* arg3)

10001816  return sub_10040540(arg1, arg2, arg3) __tailcall


1000181b    void j_sub_1002c3d0(void* arg1)

1000181b  return sub_1002c3d0(arg1) __tailcall


10001820    int32_t j_sub_10028f30(int32_t arg1)

10001820  return sub_10028f30(arg1) __tailcall


10001825    int32_t j_sub_1000af30(int32_t arg1, int32_t* arg2)

10001825  return sub_1000af30(arg1, arg2) __tailcall


1000182a    int32_t j_sub_100268d0(char* arg1)

1000182a  return sub_100268d0(arg1) __tailcall


1000182f    void* j_sub_10030950(int32_t* arg1)

1000182f  return sub_10030950(arg1) __tailcall


10001834    int32_t j_sub_1000d9f0(char* arg1)

10001834  return sub_1000d9f0(arg1) __tailcall


10001839    void j_sub_10003c90(int32_t* arg1, float* arg2, float* arg3, int32_t* arg4, int32_t* arg5, int32_t arg6, int32_t* arg7, float* arg8, int32_t* arg9, float* arg10, float* arg11)

10001839  return sub_10003c90(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
10001839      __tailcall


1000183e    int32_t j_sub_1002c800(int32_t* arg1, int32_t arg2)

1000183e  return sub_1002c800(arg1, arg2) __tailcall


10001843    int32_t j_sub_1001ed80(float arg1)

10001843  return sub_1001ed80(arg1) __tailcall


10001848    int32_t j_sub_10008ff0(int32_t arg1)

10001848  return sub_10008ff0(arg1) __tailcall


1000184d    int32_t j_sub_1000d550(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)

1000184d  return sub_1000d550(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) __tailcall


10001852    int32_t __stdcall j_sub_10043cf0(char* arg1, int32_t arg2, void* arg3)

10001852  return sub_10043cf0(arg1, arg2, arg3) __tailcall


10001857    void* j_sub_100215e0(void* arg1)

10001857  return sub_100215e0(arg1) __tailcall


1000185c    void* j_sub_10039190()

1000185c  return sub_10039190() __tailcall


10001861    int32_t j_sub_1001b260(int32_t arg1, int32_t* arg2, int32_t* arg3, int32_t arg4, float* arg5)

10001861  return sub_1001b260(arg1, arg2, arg3, arg4, arg5) __tailcall


10001866    int32_t j_sub_10037150(int32_t arg1, int32_t arg2)

10001866  return sub_10037150(arg1, arg2) __tailcall


1000186b    int32_t j_sub_1001a610()

1000186b  return sub_1001a610() __tailcall


10001870    int32_t j_sub_10028fd0()

10001870  return sub_10028fd0() __tailcall


10001875    int32_t* j_sub_1002f360()

10001875  return sub_1002f360() __tailcall


1000187a    int32_t j_sub_1000dda0(int32_t arg1, int32_t* arg2, int32_t* arg3)

1000187a  return sub_1000dda0(arg1, arg2, arg3) __tailcall


1000187f    int32_t j_sub_10037180(int32_t arg1, int32_t arg2)

1000187f  return sub_10037180(arg1, arg2) __tailcall


10001884    int32_t j_sub_10003420(float* arg1, int32_t arg2)

10001884  return sub_10003420(arg1, arg2) __tailcall


10001889    int32_t j_sub_10011520()

10001889  return sub_10011520() __tailcall


1000188e    void* j_sub_10039e70(void* arg1)

1000188e  return sub_10039e70(arg1) __tailcall


10001893    int32_t j_sub_10028f80(int32_t arg1)

10001893  return sub_10028f80(arg1) __tailcall


10001898    int32_t j_sub_100085f0()

10001898  return sub_100085f0() __tailcall


1000189d    int32_t j_sub_1003abd0(void* arg1)

1000189d  return sub_1003abd0(arg1) __tailcall


100018a2    int32_t j_sub_10011740(float* arg1, float* arg2)

100018a2  return sub_10011740(arg1, arg2) __tailcall


100018a7    int32_t j_sub_10029c10()

100018a7  return sub_10029c10() __tailcall


100018ac    int32_t* j_sub_1001ebd0(int32_t* arg1)

100018ac  return sub_1001ebd0(arg1) __tailcall


100018b1    int32_t j_sub_100338a0(void* arg1)

100018b1  return sub_100338a0(arg1) __tailcall


100018b6    int32_t j_sub_1000e880(char* arg1)

100018b6  return sub_1000e880(arg1) __tailcall


100018bb    int32_t j_sub_10037520(int32_t arg1, int32_t* arg2, float arg3)

100018bb  return sub_10037520(arg1, arg2, arg3) __tailcall


100018c0    int32_t j_sub_10019550()

100018c0  return sub_10019550() __tailcall


100018c5    int32_t j_sub_10011860(int32_t arg1, float arg2)

100018c5  return sub_10011860(arg1, arg2) __tailcall


100018ca    int32_t j_sub_1000ad90(int32_t arg1)

100018ca  return sub_1000ad90(arg1) __tailcall


100018cf    int32_t j_sub_10008620()

100018cf  return sub_10008620() __tailcall


100018d4    int32_t j_sub_10036690(int32_t* arg1, int32_t* arg2, int32_t arg3)

100018d4  return sub_10036690(arg1, arg2, arg3) __tailcall


100018d9    int32_t j_sub_10021780(void* arg1)

100018d9  return sub_10021780(arg1) __tailcall


100018de    long double j_sub_10043290(float* arg1)

100018de  return sub_10043290(arg1) __tailcall


100018e3    int32_t j_sub_10026700(char* arg1, int32_t* arg2)

100018e3  return sub_10026700(arg1, arg2) __tailcall


100018e8    int32_t j_sub_1001ec50(void* arg1)

100018e8  return sub_1001ec50(arg1) __tailcall


100018ed    int32_t j_sub_10033790(int32_t arg1, float* arg2, void* arg3)

100018ed  return sub_10033790(arg1, arg2, arg3) __tailcall


100018f2    long double j_sub_10038750(char* arg1)

100018f2  return sub_10038750(arg1) __tailcall


100018f7    int32_t j_sub_1000bba0()

100018f7  return sub_1000bba0() __tailcall


100018fc    int32_t j_sub_10037900(int32_t arg1, int32_t arg2)

100018fc  return sub_10037900(arg1, arg2) __tailcall


10001901    int32_t j_sub_100263d0(void* arg1)

10001901  return sub_100263d0(arg1) __tailcall


10001906    int32_t j_sub_1003d420(void* arg1)

10001906  return sub_1003d420(arg1) __tailcall


1000190b    int32_t j_sub_100382f0(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)

1000190b  return sub_100382f0(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) __tailcall


10001910    long double j_sub_10043990(float arg1)

10001910  return sub_10043990(arg1) __tailcall


10001915    int32_t j_sub_10022970()

10001915  return sub_10022970() __tailcall


1000191a    int32_t* j_sub_10039d70(int32_t* arg1, char* arg2)

1000191a  return sub_10039d70(arg1, arg2) __tailcall


1000191f    int32_t j_sub_10038070(int32_t arg1, int32_t arg2)

1000191f  return sub_10038070(arg1, arg2) __tailcall


10001924    int32_t j_sub_1002e3b0(int32_t* arg1, int32_t arg2)

10001924  return sub_1002e3b0(arg1, arg2) __tailcall


10001929    int32_t j_sub_1003f9f0(void* arg1, char* arg2)

10001929  return sub_1003f9f0(arg1, arg2) __tailcall


1000192e    char* j_sub_10039ee0(void* arg1)

1000192e  return sub_10039ee0(arg1) __tailcall


10001933    int32_t* j_sub_10008ac0(int32_t arg1)

10001933  return sub_10008ac0(arg1) __tailcall


10001938    int32_t j_sub_100322c0(int32_t arg1, float arg2, void* arg3)

10001938  return sub_100322c0(arg1, arg2, arg3) __tailcall


1000193d    void* j_sub_100375a0(int32_t arg1, int32_t* arg2)

1000193d  return sub_100375a0(arg1, arg2) __tailcall


10001942    void* j_sub_100373d0(int32_t arg1)

10001942  return sub_100373d0(arg1) __tailcall


10001947    void j_sub_10025070()

10001947  return sub_10025070() __tailcall


1000194c    int32_t j_sub_10038270(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, float arg7)

1000194c  return sub_10038270(arg1, arg2, arg3, arg4, arg5, arg6, arg7) __tailcall


10001951    long double j_sub_10031450(float arg1, float* arg2)

10001951  return sub_10031450(arg1, arg2) __tailcall


10001956    int32_t j_sub_100089e0(int32_t arg1)

10001956  return sub_100089e0(arg1) __tailcall


1000195b    void j_sub_1002b830(int32_t arg1, int32_t arg2)

1000195b  return sub_1002b830(arg1, arg2) __tailcall


10001960    long double j_sub_10011560(float arg1)

10001960  return sub_10011560(arg1) __tailcall


10001965    int32_t j_sub_1001fd30(int32_t* arg1)

10001965  return sub_1001fd30(arg1) __tailcall


1000196a    int32_t j_sub_10022160(int32_t arg1)

1000196a  return sub_10022160(arg1) __tailcall


1000196f    int32_t j_sub_10013bf0(float* arg1, float* arg2, float* arg3)

1000196f  return sub_10013bf0(arg1, arg2, arg3) __tailcall


10001974    int32_t j_sub_10043850(int32_t arg1)

10001974  return sub_10043850(arg1) __tailcall


10001979    int32_t* j_sub_100389c0(char* arg1, int32_t arg2)

10001979  return sub_100389c0(arg1, arg2) __tailcall


1000197e    long double j_sub_100433d0(float* arg1, float* arg2)

1000197e  return sub_100433d0(arg1, arg2) __tailcall


10001983    int32_t j_sub_10028ea0(char* arg1)

10001983  return sub_10028ea0(arg1) __tailcall


10001988    float* j_sub_100113f0(int32_t arg1, int32_t* arg2)

10001988  return sub_100113f0(arg1, arg2) __tailcall


1000198d    float* j_sub_10003460(float* arg1, float* arg2)

1000198d  return sub_10003460(arg1, arg2) __tailcall


10001992    void* j_sub_100372c0(int32_t arg1)

10001992  return sub_100372c0(arg1) __tailcall


10001997    char* j_sub_1003de60(char* arg1, void* arg2, void* arg3)

10001997  return sub_1003de60(arg1, arg2, arg3) __tailcall


1000199c    int32_t __convention("regparm") j_sub_10038640(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)

1000199c  return sub_10038640(arg1, arg2, arg3, arg4, arg5) __tailcall


100019a1    int32_t j_sub_10037020(int32_t* arg1, int32_t* arg2)

100019a1  return sub_10037020(arg1, arg2) __tailcall


100019a6    void* j_sub_10006090(void* arg1)

100019a6  return sub_10006090(arg1) __tailcall


100019ab    int32_t j_sub_10042410()

100019ab  return sub_10042410() __tailcall


100019b0    int32_t j_sub_10021d80(int32_t arg1)

100019b0  return sub_10021d80(arg1) __tailcall


100019b5    int32_t j_sub_100310e0(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, float* arg7, int32_t arg8, void* arg9, int32_t arg10)

100019b5  return sub_100310e0(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
100019b5      __tailcall


100019ba    int32_t j_sub_1001d2b0()

100019ba  return sub_1001d2b0() __tailcall


100019bf    int32_t j_sub_10020600(int32_t* arg1)

100019bf  return sub_10020600(arg1) __tailcall


100019c4    int32_t j_sub_1002abb0(void* arg1)

100019c4  return sub_1002abb0(arg1) __tailcall


100019c9    int32_t j_sub_10035680()

100019c9  return sub_10035680() __tailcall


100019ce    int32_t j_sub_10026e40(int32_t arg1, int32_t arg2)

100019ce  return sub_10026e40(arg1, arg2) __tailcall


100019d3    int32_t j_sub_10022070(int32_t arg1)

100019d3  return sub_10022070(arg1) __tailcall


100019d8    void j_sub_10031e50(int32_t arg1, float* arg2, float arg3)

100019d8  return sub_10031e50(arg1, arg2, arg3) __tailcall


100019dd    int32_t j_sub_1000df00()

100019dd  return sub_1000df00() __tailcall


100019e2    int32_t j_sub_1000dee0()

100019e2  return j_sub_1000dee0() __tailcall


100019e7    int32_t j_sub_10041f60(char* arg1, int32_t* arg2)

100019e7  return sub_10041f60(arg1, arg2) __tailcall


100019ec    int32_t j_sub_1002fe00(void* arg1)

100019ec  return sub_1002fe00(arg1) __tailcall


100019f1    int32_t j_sub_1001fcf0(void* arg1)

100019f1  return sub_1001fcf0(arg1) __tailcall


100019f6    int32_t j_sub_1001ec90(float arg1)

100019f6  return sub_1001ec90(arg1) __tailcall


100019fb    int32_t j_sub_10009860()

100019fb  return sub_10009860() __tailcall


10001a00    int32_t j_sub_10037fe0(int32_t arg1, int32_t arg2)

10001a00  return sub_10037fe0(arg1, arg2) __tailcall


10001a05    int32_t j_sub_10035700(void* arg1, float* arg2)

10001a05  return sub_10035700(arg1, arg2) __tailcall


10001a0a    void j_sub_10012200(int32_t arg1, int32_t arg2)

10001a0a  return sub_10012200(arg1, arg2) __tailcall


10001a0f    int32_t j_sub_10029320(int32_t arg1, float arg2)

10001a0f  return sub_10029320(arg1, arg2) __tailcall


10001a14    char* j_sub_10043bd0(int32_t arg1, int32_t arg2)

10001a14  return sub_10043bd0(arg1, arg2) __tailcall


10001a19    int32_t j_sub_100380e0(int32_t arg1, int32_t arg2)

10001a19  return sub_100380e0(arg1, arg2) __tailcall


10001a1e    void* j_sub_10031d10(float* arg1, float* arg2, void* arg3)

10001a1e  return sub_10031d10(arg1, arg2, arg3) __tailcall


10001a23    void j_sub_1003e2c0(void* arg1, void* arg2)

10001a23  return sub_1003e2c0(arg1, arg2) __tailcall


10001a28    int32_t j_sub_100032d0()

10001a28  return sub_100032d0() __tailcall


10001a2d    int32_t j_sub_10018f50(int32_t arg1, float arg2, float* arg3)

10001a2d  return sub_10018f50(arg1, arg2, arg3) __tailcall


10001a32    long double j_sub_100267e0(void* arg1)

10001a32  return sub_100267e0(arg1) __tailcall


10001a37    int32_t j_sub_100438b0(int32_t arg1)

10001a37  return sub_100438b0(arg1) __tailcall


10001a3c    int32_t j_sub_100379e0()

10001a3c  return sub_100379e0() __tailcall


10001a41    int32_t j_sub_100293a0(void* arg1)

10001a41  return sub_100293a0(arg1) __tailcall


10001a46    void j_sub_1001cdd0(int32_t arg1, int32_t arg2)

10001a46  return sub_1001cdd0(arg1, arg2) __tailcall


10001a4b    int32_t j_sub_10006100(float* arg1, int32_t arg2, float* arg3)

10001a4b  return sub_10006100(arg1, arg2, arg3) __tailcall


10001a50    int32_t j_sub_100216d0(void* arg1)

10001a50  return sub_100216d0(arg1) __tailcall


10001a55    int32_t j_sub_1000f750(int32_t* arg1)

10001a55  return sub_1000f750(arg1) __tailcall


10001a5a    int32_t* j_sub_1003b560(int32_t* arg1)

10001a5a  return sub_1003b560(arg1) __tailcall


10001a5f    int32_t j_sub_1002dff0(void* arg1, char* arg2, char* arg3)

10001a5f  return sub_1002dff0(arg1, arg2, arg3) __tailcall


10001a64    int32_t j_sub_1001a410(float* arg1, int32_t arg2, int32_t* arg3, float* arg4)

10001a64  return sub_1001a410(arg1, arg2, arg3, arg4) __tailcall


10001a69    long double j_sub_10011590(float arg1)

10001a69  return sub_10011590(arg1) __tailcall


10001a6e    int32_t* j_sub_10021b50(int32_t* arg1, char* arg2)

10001a6e  return sub_10021b50(arg1, arg2) __tailcall


10001a73    long double j_sub_10036a40(float arg1, int32_t arg2)

10001a73  return sub_10036a40(arg1, arg2) __tailcall


10001a78    void* j_sub_1001d420(void* arg1)

10001a78  return sub_1001d420(arg1) __tailcall


10001a7d    void* j_sub_1003fc30(void* arg1, int32_t arg2)

10001a7d  return sub_1003fc30(arg1, arg2) __tailcall


10001a82    int32_t j_sub_10005640(int32_t arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7)

10001a82  return sub_10005640(arg1, arg2, arg3, arg4, arg5, arg6, arg7) __tailcall


10001a87    int32_t j_sub_10032ae0(int32_t arg1, float* arg2, void* arg3)

10001a87  return sub_10032ae0(arg1, arg2, arg3) __tailcall


10001a8c    float* j_sub_100429c0(float* arg1, float* arg2, float* arg3)

10001a8c  return sub_100429c0(arg1, arg2, arg3) __tailcall


10001a91    void j_sub_100071e0()

10001a91  return sub_100071e0() __tailcall


10001a96    void* j_sub_1001c210(int32_t* arg1)

10001a96  return sub_1001c210(arg1) __tailcall


10001a9b    char* j_sub_1002af30(char* arg1, char* arg2, char* arg3)

10001a9b  return sub_1002af30(arg1, arg2, arg3) __tailcall


10001aa0    void* j_sub_100388a0(void* arg1)

10001aa0  return sub_100388a0(arg1) __tailcall


10001aa5    int32_t j_sub_10019570()

10001aa5  return sub_10019570() __tailcall


10001aaa    int32_t j_sub_1001d290()

10001aaa  return sub_1001d290() __tailcall


10001aaf    long double j_sub_10038a90(char* arg1, int32_t arg2)

10001aaf  return sub_10038a90(arg1, arg2) __tailcall


10001ab4    int32_t j_sub_10038f90(int32_t arg1)

10001ab4  return sub_10038f90(arg1) __tailcall


10001ab9    int32_t j_sub_100238f0(void* arg1)

10001ab9  return sub_100238f0(arg1) __tailcall


10001abe    void* j_sub_1001c3f0(void* arg1)

10001abe  return sub_1001c3f0(arg1) __tailcall


10001ac3    int32_t j_sub_10040e30(int32_t* arg1, int32_t arg2)

10001ac3  return sub_10040e30(arg1, arg2) __tailcall


10001ac8    int32_t j_sub_100057a0(float* arg1, int32_t arg2, float* arg3, float* arg4)

10001ac8  return sub_100057a0(arg1, arg2, arg3, arg4) __tailcall


10001acd    int32_t j_sub_1000b0e0()

10001acd  return sub_1000b0e0() __tailcall


10001ad2    int32_t j_sub_100371b0(int32_t arg1, int32_t arg2)

10001ad2  return sub_100371b0(arg1, arg2) __tailcall


10001ad7    void* j_sub_1002fe50(void* arg1)

10001ad7  return sub_1002fe50(arg1) __tailcall


10001adc    int32_t j_sub_100439f0()

10001adc  return sub_100439f0() __tailcall


10001ae1    int32_t* j_sub_1002d270(char* arg1)

10001ae1  return sub_1002d270(arg1) __tailcall


10001ae6    int32_t j_sub_1000d770(int32_t* arg1, int32_t* arg2, int32_t* arg3, void** arg4)

10001ae6  return sub_1000d770(arg1, arg2, arg3, arg4) __tailcall


10001aeb    int32_t j_sub_10003010(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

10001aeb  return sub_10003010(arg1, arg2, arg3, arg4, arg5, arg6, arg7) __tailcall


10001af0    int32_t j_sub_10038d60()

10001af0  return sub_10038d60() __tailcall


10001af5    int32_t j_sub_10026990(void* arg1, int32_t arg2)

10001af5  return sub_10026990(arg1, arg2) __tailcall


10001afa    int32_t* j_sub_100431b0(int32_t* arg1, int32_t* arg2)

10001afa  return sub_100431b0(arg1, arg2) __tailcall


10001aff    int32_t j_sub_10043af0(int32_t* arg1)

10001aff  return sub_10043af0(arg1) __tailcall


10001b04    void* j_sub_10019260(void* arg1)

10001b04  return sub_10019260(arg1) __tailcall


10001b09    void* j_sub_100435d0(char* arg1)

10001b09  return sub_100435d0(arg1) __tailcall


10001b0e    int32_t j_sub_1003d2f0(void* arg1)

10001b0e  return sub_1003d2f0(arg1) __tailcall


10001b13    int32_t j_sub_10040ad0(void* arg1, void* arg2, int32_t arg3)

10001b13  return sub_10040ad0(arg1, arg2, arg3) __tailcall


10001b18    int32_t j_sub_1002cdd0(void* arg1, char* arg2)

10001b18  return sub_1002cdd0(arg1, arg2) __tailcall


10001b1d    void j_sub_1001b130(int32_t arg1, float* arg2, float* arg3, int32_t arg4, float* arg5, int32_t* arg6)

10001b1d  return sub_1001b130(arg1, arg2, arg3, arg4, arg5, arg6) __tailcall


10001b22    int32_t j_sub_100308d0(int32_t** arg1, char* arg2)

10001b22  return sub_100308d0(arg1, arg2) __tailcall


10001b27    void* j_sub_10010ff0()

10001b27  return sub_10010ff0() __tailcall


10001b2c    int32_t j_sub_1000d7e0(void* arg1)

10001b2c  return sub_1000d7e0(arg1) __tailcall


10001b31    int32_t j_sub_1000edc0(int32_t arg1, int32_t arg2)

10001b31  return sub_1000edc0(arg1, arg2) __tailcall


10001b36    int32_t* j_sub_1001c620(float* arg1, float* arg2, int32_t arg3, int32_t arg4)

10001b36  return sub_1001c620(arg1, arg2, arg3, arg4) __tailcall


10001b3b    int32_t j_sub_100087e0(int32_t arg1, int32_t arg2)

10001b3b  return sub_100087e0(arg1, arg2) __tailcall


10001b40    void* j_sub_10043790(int32_t arg1, int32_t arg2)

10001b40  return sub_10043790(arg1, arg2) __tailcall


10001b45    int32_t j_sub_100438d0(int32_t arg1)

10001b45  return sub_100438d0(arg1) __tailcall


10001b4a    int32_t j_sub_10019520()

10001b4a  return sub_10019520() __tailcall


10001b4f    int32_t j_sub_1000dee0()

10001b4f  return sub_1000dee0() __tailcall


10001b54    int32_t* j_sub_10024a10(int32_t arg1)

10001b54  return sub_10024a10(arg1) __tailcall


10001b59    int32_t j_sub_10030f10(void* arg1)

10001b59  return sub_10030f10(arg1) __tailcall


10001b5e    long double j_sub_1002f820(void* arg1, int32_t arg2)

10001b5e  return sub_1002f820(arg1, arg2) __tailcall


10001b63    void j_sub_10022e10(int32_t arg1, void* arg2, int32_t arg3)

10001b63  return sub_10022e10(arg1, arg2, arg3) __tailcall


10001b68    int32_t j_sub_10039200(void* arg1, void* arg2)

10001b68  return sub_10039200(arg1, arg2) __tailcall


10001b6d    float* j_sub_10042430(float* arg1, float arg2, float* arg3, float arg4)

10001b6d  return sub_10042430(arg1, arg2, arg3, arg4) __tailcall


10001b72    int32_t j_sub_100187e0()

10001b72  return sub_100187e0() __tailcall


10001b77    void* j_sub_1003b4a0(int32_t arg1)

10001b77  return sub_1003b4a0(arg1) __tailcall


10001b7c    int32_t j_sub_1003b9e0(void* arg1, int32_t arg2, int32_t* arg3, int32_t* arg4, int32_t arg5)

10001b7c  return sub_1003b9e0(arg1, arg2, arg3, arg4, arg5) __tailcall


10001b81    int32_t j_sub_10041ba0(char* arg1, char* arg2, char* arg3, int32_t* arg4)

10001b81  return sub_10041ba0(arg1, arg2, arg3, arg4) __tailcall


10001b86    int32_t j_sub_1000d340()

10001b86  return sub_1000d340() __tailcall


10001b8b    int32_t j_sub_10039270(void* arg1, void* arg2)

10001b8b  return sub_10039270(arg1, arg2) __tailcall


10001b90    int32_t j_sub_10021e90(int32_t arg1)

10001b90  return sub_10021e90(arg1) __tailcall


10001b95    int32_t j_sub_10036c70(float arg1, void* arg2)

10001b95  return sub_10036c70(arg1, arg2) __tailcall


10001b9a    long double j_sub_1003fdd0(void* arg1)

10001b9a  return sub_1003fdd0(arg1) __tailcall


10001b9f    float* j_sub_100426b0(float* arg1, float* arg2, float* arg3, float* arg4)

10001b9f  return sub_100426b0(arg1, arg2, arg3, arg4) __tailcall


10001ba4    int32_t j_sub_1002a730(int32_t* arg1, int32_t arg2)

10001ba4  return sub_1002a730(arg1, arg2) __tailcall


10001ba9    void* j_sub_1002ec80()

10001ba9  return sub_1002ec80() __tailcall


10001bae    int32_t j_sub_1003d740(void* arg1, int32_t arg2, int32_t arg3, char* arg4)

10001bae  return sub_1003d740(arg1, arg2, arg3, arg4) __tailcall


10001bb3    long double j_sub_10028ff0(float arg1, float arg2)

10001bb3  return sub_10028ff0(arg1, arg2) __tailcall


10001bb8    int32_t j_sub_1001ee40(void* arg1)

10001bb8  return sub_1001ee40(arg1) __tailcall


10001bbd    int32_t j_sub_100394c0(void* arg1, char* arg2)

10001bbd  return sub_100394c0(arg1, arg2) __tailcall


10001bc2    int32_t j_sub_10038200(int32_t arg1, int32_t* arg2)

10001bc2  return sub_10038200(arg1, arg2) __tailcall


10001bc7    int32_t j_sub_100096e0()

10001bc7  return sub_100096e0() __tailcall


10001bcc    int32_t j_sub_1003eab0(char* arg1, char* arg2, int32_t* arg3, int32_t* arg4)

10001bcc  return sub_1003eab0(arg1, arg2, arg3, arg4) __tailcall


10001bd1    int32_t j_sub_10038150(float arg1)

10001bd1  return sub_10038150(arg1) __tailcall


10001bd6    int32_t j_sub_1001af50(int32_t arg1)

10001bd6  return sub_1001af50(arg1) __tailcall


10001bdb    int32_t* j_sub_1002cb40(char* arg1, int32_t* arg2)

10001bdb  return sub_1002cb40(arg1, arg2) __tailcall


10001be0    long double j_sub_10011360(int32_t arg1)

10001be0  return sub_10011360(arg1) __tailcall


10001be5    int32_t j_sub_100063d0(float* arg1, float* arg2, int32_t* arg3, int32_t arg4)

10001be5  return sub_100063d0(arg1, arg2, arg3, arg4) __tailcall


10001bea    void* j_sub_10037490(int32_t arg1)

10001bea  return sub_10037490(arg1) __tailcall


10001bef    void* j_sub_10030a20()

10001bef  return sub_10030a20() __tailcall


10001bf4    int32_t* j_sub_100401a0(char* arg1, void* arg2, void* arg3)

10001bf4  return sub_100401a0(arg1, arg2, arg3) __tailcall


10001bf9    void j_sub_1001cc50(void* arg1)

10001bf9  return sub_1001cc50(arg1) __tailcall


10001bfe    int32_t j_sub_1003dd70(void* arg1, int32_t arg2)

10001bfe  return sub_1003dd70(arg1, arg2) __tailcall


10001c03    void* j_sub_10037430(int32_t arg1)

10001c03  return sub_10037430(arg1) __tailcall


10001c08    int32_t j_sub_1000e010(float arg1)

10001c08  return sub_1000e010(arg1) __tailcall


10001c0d    void j_sub_10033b00(int32_t arg1, float* arg2, float arg3)

10001c0d  return sub_10033b00(arg1, arg2, arg3) __tailcall


10001c12    int32_t* j_sub_1001c0b0(int32_t arg1, float arg2)

10001c12  return sub_1001c0b0(arg1, arg2) __tailcall


10001c17    int32_t j_sub_1003db20(void* arg1, char* arg2)

10001c17  return sub_1003db20(arg1, arg2) __tailcall


10001c1c    int32_t j_sub_1000b750(int32_t arg1, float* arg2, float arg3, float arg4, int32_t arg5)

10001c1c  return sub_1000b750(arg1, arg2, arg3, arg4, arg5) __tailcall


10001c21    int32_t j_sub_10035820(void* arg1, void* arg2)

10001c21  return sub_10035820(arg1, arg2) __tailcall


10001c26    void* j_sub_100374c0(int32_t arg1)

10001c26  return sub_100374c0(arg1) __tailcall


10001c2b    int32_t j_sub_10043240(float* arg1, float* arg2)

10001c2b  return sub_10043240(arg1, arg2) __tailcall


10001c30    int32_t j_sub_1003f5c0(void* arg1, int32_t arg2, int32_t arg3, char* arg4)

10001c30  return sub_1003f5c0(arg1, arg2, arg3, arg4) __tailcall


10001c35    int32_t j_sub_100214e0(void* arg1)

10001c35  return sub_100214e0(arg1) __tailcall


10001c3a    void* j_sub_100193e0()

10001c3a  return sub_100193e0() __tailcall


10001c3f    int32_t j_sub_10013cc0(int32_t arg1, int32_t arg2)

10001c3f  return sub_10013cc0(arg1, arg2) __tailcall


10001c44    float* j_sub_10028650(int32_t arg1)

10001c44  return sub_10028650(arg1) __tailcall


10001c49    int32_t j_sub_1003cf80(void* arg1)

10001c49  return sub_1003cf80(arg1) __tailcall


10001c4e    int32_t j_sub_10038b80(char* arg1)

10001c4e  return sub_10038b80(arg1) __tailcall


10001c53    int32_t j_sub_10041970(PSTR arg1, int32_t arg2, int32_t* arg3)

10001c53  return sub_10041970(arg1, arg2, arg3) __tailcall


10001c58    int32_t* j_sub_10038810(int32_t arg1)

10001c58  return sub_10038810(arg1) __tailcall


10001c5d    int32_t j_sub_10005b30(float* arg1, float* arg2, int32_t arg3)

10001c5d  return sub_10005b30(arg1, arg2, arg3) __tailcall


10001c62    float* j_sub_10043570(float* arg1, float arg2, float* arg3)

10001c62  return sub_10043570(arg1, arg2, arg3) __tailcall


10001c67    void* j_sub_100391c0()

10001c67  return sub_100391c0() __tailcall


10001c6c    int32_t* j_sub_10034bb0(char* arg1)

10001c6c  return sub_10034bb0(arg1) __tailcall


10001c71    int32_t* j_sub_10038910(char* arg1)

10001c71  return sub_10038910(arg1) __tailcall


10001c76    int32_t j_sub_10016ba0(int32_t arg1, int32_t arg2)

10001c76  return sub_10016ba0(arg1, arg2) __tailcall


10001c7b    void* j_sub_10023ce0(float arg1)

10001c7b  return sub_10023ce0(arg1) __tailcall


10001c80    int32_t j_sub_1003b4e0(char* arg1)

10001c80  return sub_1003b4e0(arg1) __tailcall


10001c85    int32_t j_sub_10005cc0(int32_t arg1, int32_t arg2)

10001c85  return sub_10005cc0(arg1, arg2) __tailcall


10001c8a    void* j_sub_100262c0(void* arg1, void* arg2)

10001c8a  return sub_100262c0(arg1, arg2) __tailcall


10001c8f    void j_sub_1001ba00(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

10001c8f  return sub_1001ba00(arg1, arg2, arg3, arg4) __tailcall


10001c94    int32_t j_sub_10019470()

10001c94  return sub_10019470() __tailcall


10001c99    int32_t j_sub_1003e520(void* arg1, char* arg2)

10001c99  return sub_1003e520(arg1, arg2) __tailcall


10001c9e    int32_t* j_sub_1002f100(int32_t* arg1, int32_t* arg2)

10001c9e  return sub_1002f100(arg1, arg2) __tailcall


10001ca3    int32_t j_sub_10038190(int32_t arg1, int32_t arg2)

10001ca3  return sub_10038190(arg1, arg2) __tailcall


10001ca8    void j_sub_10035960(void* arg1)

10001ca8  return sub_10035960(arg1) __tailcall


10001cad    float* j_sub_100034d0(float arg1, float* arg2)

10001cad  return sub_100034d0(arg1, arg2) __tailcall


10001cb2    void j_sub_10033ec0(int32_t arg1, float* arg2, void* arg3)

10001cb2  return sub_10033ec0(arg1, arg2, arg3) __tailcall


10001cb7    void* j_sub_10041900(int32_t arg1, int32_t arg2)

10001cb7  return sub_10041900(arg1, arg2) __tailcall


10001cbc    int32_t j_sub_10038be0(PSTR arg1)

10001cbc  return sub_10038be0(arg1) __tailcall


10001cc1    HGLOBAL j_sub_10042380()

10001cc1  return sub_10042380() __tailcall


10001cc6    void j_sub_1000d5f0(void* arg1, int32_t arg2, int32_t arg3, int32_t* arg4, int32_t* arg5, void** arg6)

10001cc6  return sub_1000d5f0(arg1, arg2, arg3, arg4, arg5, arg6) __tailcall


10001ccb    HGLOBAL j_sub_10041600()

10001ccb  return sub_10041600() __tailcall


10001cd0    long double j_sub_10022650(int32_t arg1)

10001cd0  return sub_10022650(arg1) __tailcall


10001cd5    int32_t j_sub_10011700(int32_t arg1, int32_t arg2)

10001cd5  return sub_10011700(arg1, arg2) __tailcall


10001cda    uint32_t j_sub_10043920(int32_t arg1)

10001cda  return sub_10043920(arg1) __tailcall


10001cdf    int32_t j_sub_10043810(int32_t arg1)

10001cdf  return sub_10043810(arg1) __tailcall


10001ce4    int32_t j_sub_10039df0(void* arg1, char* arg2)

10001ce4  return sub_10039df0(arg1, arg2) __tailcall


10001ce9    void* j_sub_1001cc10(void* arg1)

10001ce9  return sub_1001cc10(arg1) __tailcall


10001cee    int32_t j_sub_10003080(int32_t arg1)

10001cee  return sub_10003080(arg1) __tailcall


10001cf3    int32_t j_sub_1003fb50(void* arg1, char* arg2)

10001cf3  return sub_1003fb50(arg1, arg2) __tailcall


10001cf8    void j_sub_10034b20(void* arg1)

10001cf8  return sub_10034b20(arg1) __tailcall


10001cfd    float* j_sub_10013c70(float* arg1, float* arg2, float* arg3)

10001cfd  return sub_10013c70(arg1, arg2, arg3) __tailcall


10001d02    int32_t j_sub_10020ad0(void* arg1)

10001d02  return sub_10020ad0(arg1) __tailcall


10001d07    int32_t j_sub_10030990(void* arg1)

10001d07  return sub_10030990(arg1) __tailcall


10001d0c    int32_t j_sub_10017350()

10001d0c  return sub_10017350() __tailcall


10001d11    int32_t* j_sub_1002b900(int32_t* arg1)

10001d11  return sub_1002b900(arg1) __tailcall


10001d16    int32_t j_sub_10029c90()

10001d16  return sub_10029c90() __tailcall


10001d1b    int32_t j_sub_1003e9f0(void* arg1, char* arg2)

10001d1b  return sub_1003e9f0(arg1, arg2) __tailcall


10001d20    int32_t j_sub_1003fd40(char* arg1)

10001d20  return sub_1003fd40(arg1) __tailcall


10001d25    int32_t j_sub_1003a7a0(void* arg1)

10001d25  return sub_1003a7a0(arg1) __tailcall


10001d2a    int32_t* j_sub_10035a20(void* arg1)

10001d2a  return sub_10035a20(arg1) __tailcall


10001d2f    int32_t j_sub_1001d040(void* arg1)

10001d2f  return sub_1001d040(arg1) __tailcall


10001d34    int32_t j_sub_1000ce40(int32_t* arg1, int32_t arg2, int32_t arg3, char* arg4, int32_t arg5)

10001d34  return sub_1000ce40(arg1, arg2, arg3, arg4, arg5) __tailcall


10001d39    void* j_sub_1000b1b0(int32_t arg1)

10001d39  return sub_1000b1b0(arg1) __tailcall


10001d3e    int32_t j_sub_1000a370(int32_t* arg1, float arg2, int32_t arg3)

10001d3e  return sub_1000a370(arg1, arg2, arg3) __tailcall


10001d43    int32_t j_sub_10028a70(int32_t* arg1, float arg2)

10001d43  return sub_10028a70(arg1, arg2) __tailcall


10001d48    char* j_sub_1002ae00(char* arg1, char* arg2, uint32_t arg3)

10001d48  return sub_1002ae00(arg1, arg2, arg3) __tailcall


10001d4d    int32_t j_sub_1001ec10(void* arg1)

10001d4d  return sub_1001ec10(arg1) __tailcall


10001d52    int32_t j_sub_1000a420(float* arg1, float* arg2, int32_t arg3, int32_t arg4)

10001d52  return sub_1000a420(arg1, arg2, arg3, arg4) __tailcall


10001d57    int32_t j_sub_1003f4d0(void* arg1, char* arg2)

10001d57  return sub_1003f4d0(arg1, arg2) __tailcall


10001d5c    int32_t j_sub_10036cd0(int32_t arg1)

10001d5c  return sub_10036cd0(arg1) __tailcall


10001d61    int32_t j_sub_1001f6e0(void* arg1)

10001d61  return sub_1001f6e0(arg1) __tailcall


10001d66    int32_t j_sub_1000e430(char* arg1)

10001d66  return sub_1000e430(arg1) __tailcall


10001d6b    int32_t* j_sub_10029eb0(char* arg1, char* arg2)

10001d6b  return sub_10029eb0(arg1, arg2) __tailcall


10001d70    void j_sub_10014e60(int32_t arg1, int32_t arg2)

10001d70  return sub_10014e60(arg1, arg2) __tailcall


10001d75    long double j_sub_10043500(float* arg1)

10001d75  return sub_10043500(arg1) __tailcall


10001d7a    void* j_sub_10038f50(void* arg1)

10001d7a  return sub_10038f50(arg1) __tailcall


10001d7f    int32_t* j_sub_100392e0(void* arg1, int32_t arg2, int32_t arg3)

10001d7f  return sub_100392e0(arg1, arg2, arg3) __tailcall


10001d84    void* j_sub_10037690()

10001d84  return sub_10037690() __tailcall


10001d89    float* j_sub_10042af0(float* arg1, float* arg2, float* arg3)

10001d89  return sub_10042af0(arg1, arg2, arg3) __tailcall


10001d8e    int32_t j_sub_10039b50(void* arg1, void* arg2)

10001d8e  return sub_10039b50(arg1, arg2) __tailcall


10001d93    int32_t j_sub_100393e0(void* arg1, char* arg2)

10001d93  return sub_100393e0(arg1, arg2) __tailcall


10001d98    int32_t j_sub_1002a810(int32_t* arg1, int32_t arg2)

10001d98  return sub_1002a810(arg1, arg2) __tailcall


10001d9d    void* j_sub_10019280()

10001d9d  return sub_10019280() __tailcall


10001da2    int32_t j_sub_1000ecd0(char* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

10001da2  return sub_1000ecd0(arg1, arg2, arg3, arg4, arg5, arg6, arg7) __tailcall


10001da7    int32_t j_sub_10023550(void* arg1, int32_t arg2)

10001da7  return sub_10023550(arg1, arg2) __tailcall


10001dac    int32_t j_sub_10043c10(char* arg1, char* arg2)

10001dac  return sub_10043c10(arg1, arg2) __tailcall


10001db1    float* j_sub_10043380(float* arg1, float arg2, float* arg3, float* arg4)

10001db1  return sub_10043380(arg1, arg2, arg3, arg4) __tailcall


10001db6    int32_t j_sub_10008e20(int32_t* arg1, int32_t arg2)

10001db6  return sub_10008e20(arg1, arg2) __tailcall


10001dbb    void* j_sub_1002fe80(void* arg1)

10001dbb  return sub_1002fe80(arg1) __tailcall


10001dc0    int32_t j_sub_1003e3c0(void* arg1, int32_t* arg2)

10001dc0  return sub_1003e3c0(arg1, arg2) __tailcall


10001dc5    void* j_sub_100359b0(int32_t* arg1)

10001dc5  return sub_100359b0(arg1) __tailcall


10001dca    int32_t j_sub_1003c900(void* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

10001dca  return sub_1003c900(arg1, arg2, arg3, arg4) __tailcall


10001dcf    long double j_sub_1002a690(int32_t* arg1, int32_t arg2, float arg3, float arg4)

10001dcf  return sub_1002a690(arg1, arg2, arg3, arg4) __tailcall


10001dd4    int32_t j_sub_1000b640(float arg1, float arg2, float arg3)

10001dd4  return sub_1000b640(arg1, arg2, arg3) __tailcall


10001dd9    int32_t j_sub_10040e80(int32_t arg1, float arg2)

10001dd9  return sub_10040e80(arg1, arg2) __tailcall


10001dde    int32_t j_sub_100299d0(int32_t arg1, int32_t arg2)

10001dde  return sub_100299d0(arg1, arg2) __tailcall


10001de3    int32_t j_sub_1000aea0(int32_t arg1, int32_t* arg2, int32_t* arg3)

10001de3  return sub_1000aea0(arg1, arg2, arg3) __tailcall


10001de8    int32_t* j_sub_1000dcc0(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6)

10001de8  return sub_1000dcc0(arg1, arg2, arg3, arg4, arg5, arg6) __tailcall


10001ded    int32_t j_sub_1001a2e0(int32_t arg1, int32_t arg2)

10001ded  return sub_1001a2e0(arg1, arg2) __tailcall


10001df2    int32_t j_sub_1003fec0(void* arg1)

10001df2  return sub_1003fec0(arg1) __tailcall


10001df7    void* j_sub_10025560(void* arg1, void* arg2, int32_t arg3)

10001df7  return sub_10025560(arg1, arg2, arg3) __tailcall


10001dfc    int32_t j_sub_1003e410(void* arg1)

10001dfc  return sub_1003e410(arg1) __tailcall


10001e01    char* j_sub_1000d830(int32_t arg1, int32_t* arg2, int32_t arg3)

10001e01  return sub_1000d830(arg1, arg2, arg3) __tailcall


10001e06    int32_t j_sub_100098b0(int32_t arg1, int32_t arg2, int32_t arg3)

10001e06  return sub_100098b0(arg1, arg2, arg3) __tailcall


10001e0b    int32_t j_sub_10043ac0(void* arg1)

10001e0b  return sub_10043ac0(arg1) __tailcall


10001e10    void j_sub_10037880()

10001e10  return sub_10037880() __tailcall


10001e15    void* j_sub_1000c490()

10001e15  return sub_1000c490() __tailcall


10001e1a    void* j_sub_1002f320(void* arg1)

10001e1a  return sub_1002f320(arg1) __tailcall


10001e1f    int32_t j_sub_1000f780(int32_t* arg1)

10001e1f  return sub_1000f780(arg1) __tailcall


10001e24    int32_t* j_sub_10006210(float* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

10001e24  return sub_10006210(arg1, arg2, arg3, arg4) __tailcall


10001e29    int32_t j_sub_10019c00(void* arg1)

10001e29  return sub_10019c00(arg1) __tailcall


10001e2e    void j_sub_10038dd0(void* arg1)

10001e2e  return sub_10038dd0(arg1) __tailcall


10001e33    long double j_sub_10022a60(void* arg1, float* arg2)

10001e33  return sub_10022a60(arg1, arg2) __tailcall


10001e38    int32_t j_sub_1001d3a0(void* arg1, int32_t arg2, int32_t arg3)

10001e38  return sub_1001d3a0(arg1, arg2, arg3) __tailcall


10001e3d    int32_t j_sub_10029960(int32_t arg1, int32_t arg2, char* arg3)

10001e3d  return sub_10029960(arg1, arg2, arg3) __tailcall


10001e42    char* j_sub_100436b0(int32_t arg1, char* arg2)

10001e42  return sub_100436b0(arg1, arg2) __tailcall


10001e47    int32_t j_sub_10031be0(int32_t* arg1, int32_t* arg2, float arg3, int32_t arg4)

10001e47  return sub_10031be0(arg1, arg2, arg3, arg4) __tailcall


10001e4c    int32_t j_sub_10034b90(int32_t arg1)

10001e4c  return sub_10034b90(arg1) __tailcall


10001e51    long double j_sub_10038990(char* arg1)

10001e51  return sub_10038990(arg1) __tailcall


10001e56    int32_t j_sub_10007d30(PSTR arg1, void* arg2)

10001e56  return sub_10007d30(arg1, arg2) __tailcall


10001e5b    int32_t* j_sub_10039ce0(int32_t arg1, char* arg2)

10001e5b  return sub_10039ce0(arg1, arg2) __tailcall


10001e60    int32_t j_sub_10026690()

10001e60  return sub_10026690() __tailcall


10001e65    int32_t j_sub_1002aa20(void* arg1, void* arg2)

10001e65  return sub_1002aa20(arg1, arg2) __tailcall


10001e6a    int32_t j_sub_1001afa0(float* arg1)

10001e6a  return sub_1001afa0(arg1) __tailcall


10001e6f    int32_t* j_sub_1002d8a0(char* arg1, char* arg2)

10001e6f  return sub_1002d8a0(arg1, arg2) __tailcall


10001e74    int32_t j_sub_1001c6c0(int32_t arg1)

10001e74  return sub_1001c6c0(arg1) __tailcall


10001e79    char* j_sub_10043740(char* arg1, char* arg2)

10001e79  return sub_10043740(arg1, arg2) __tailcall


10001e7e    int32_t j_sub_1000f010(void* arg1, int32_t* arg2)

10001e7e  return sub_1000f010(arg1, arg2) __tailcall


10001e83    float* j_sub_10043400(float* arg1, float* arg2, float* arg3)

10001e83  return sub_10043400(arg1, arg2, arg3) __tailcall


10001e88    int32_t* j_sub_100069a0()

10001e88  return sub_100069a0() __tailcall


10001e8d    int32_t j_sub_100379a0(int32_t arg1)

10001e8d  return sub_100379a0(arg1) __tailcall


10001e92    int32_t* j_sub_1002fa20()

10001e92  return sub_1002fa20() __tailcall


10001e97    int32_t j_sub_10021bc0(void* arg1)

10001e97  return sub_10021bc0(arg1) __tailcall


10001e9c    float* j_sub_10041790(int32_t arg1, float* arg2)

10001e9c  return sub_10041790(arg1, arg2) __tailcall


10001ea1    int32_t j_sub_10041240(int32_t arg1, int32_t arg2, int32_t arg3)

10001ea1  return sub_10041240(arg1, arg2, arg3) __tailcall


10001ea6    int32_t j_sub_100378c0()

10001ea6  return sub_100378c0() __tailcall


10001eab    int32_t j_sub_1001ac00()

10001eab  return sub_1001ac00() __tailcall


10001eb0    int32_t j_sub_1003d650(void* arg1, char* arg2)

10001eb0  return sub_1003d650(arg1, arg2) __tailcall


10001eb5    int32_t j_sub_10005a60(int32_t arg1, int32_t arg2)

10001eb5  return sub_10005a60(arg1, arg2) __tailcall


10001eba    void* j_sub_10037460(int32_t arg1)

10001eba  return sub_10037460(arg1) __tailcall


10001ebf    int32_t j_sub_10031940(float arg1, int32_t* arg2, float arg3, int32_t arg4)

10001ebf  return sub_10031940(arg1, arg2, arg3, arg4) __tailcall


10001ec4    int32_t j_sub_1001eae0(int32_t arg1)

10001ec4  return sub_1001eae0(arg1) __tailcall


10001ec9    int32_t j_sub_10029920(int32_t arg1, int32_t arg2)

10001ec9  return sub_10029920(arg1, arg2) __tailcall


10001ece    int32_t j_sub_10029690(int32_t arg1)

10001ece  return sub_10029690(arg1) __tailcall


10001ed3    int32_t j_sub_10030fe0(void* arg1, int32_t arg2)

10001ed3  return sub_10030fe0(arg1, arg2) __tailcall


10001ed8    int32_t j_sub_100323e0(int32_t arg1, float* arg2, void* arg3)

10001ed8  return sub_100323e0(arg1, arg2, arg3) __tailcall


10001edd    void* j_sub_1003e000(void* arg1)

10001edd  return sub_1003e000(arg1) __tailcall


10001ee2    int32_t j_sub_1000eeb0(int32_t* arg1, int32_t arg2, float* arg3)

10001ee2  return sub_1000eeb0(arg1, arg2, arg3) __tailcall


10001ee7    int32_t j_sub_10009cb0(float arg1, float* arg2, float arg3)

10001ee7  return sub_10009cb0(arg1, arg2, arg3) __tailcall


10001eec    long double j_sub_100439d0(float arg1)

10001eec  return sub_100439d0(arg1) __tailcall


10001ef1    void* j_sub_1001ae30()

10001ef1  return sub_1001ae30() __tailcall


10001ef6    void* j_sub_100356d0()

10001ef6  return sub_100356d0() __tailcall


10001efb    int32_t j_sub_1003de40(void* arg1, int32_t arg2)

10001efb  return sub_1003de40(arg1, arg2) __tailcall


10001f00    int32_t j_sub_1003e250(void* arg1, int32_t arg2)

10001f00  return sub_1003e250(arg1, arg2) __tailcall


10001f05    void* j_sub_1001d760(void* arg1, float arg2, int32_t arg3)

10001f05  return sub_1001d760(arg1, arg2, arg3) __tailcall


10001f0a    long double j_sub_1000e120()

10001f0a  return sub_1000e120() __tailcall


10001f0f    int32_t j_sub_10007150(void* arg1, float* arg2, int32_t* arg3, int32_t* arg4, int32_t* arg5, int32_t* arg6)

10001f0f  return sub_10007150(arg1, arg2, arg3, arg4, arg5, arg6) __tailcall


10001f14    void* j_sub_1000c670(int32_t* arg1, void* arg2, uint32_t arg3)

10001f14  return sub_1000c670(arg1, arg2, arg3) __tailcall


10001f19    int32_t j_sub_1003c650(void* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

10001f19  return sub_1003c650(arg1, arg2, arg3, arg4) __tailcall


10001f1e    long double j_sub_10042d40(float arg1)

10001f1e  return sub_10042d40(arg1) __tailcall


10001f23    void* j_sub_1003fc10(void* arg1)

10001f23  return sub_1003fc10(arg1) __tailcall


10001f28    int32_t j_sub_1000cee0(PSTR arg1)

10001f28  return sub_1000cee0(arg1) __tailcall


10001f2d    int32_t j_sub_1003f020(void* arg1, char* arg2)

10001f2d  return sub_1003f020(arg1, arg2) __tailcall


10001f32    int32_t* j_sub_10037a00()

10001f32  return sub_10037a00() __tailcall


10001f37    int32_t j_sub_10021020(int32_t arg1)

10001f37  return sub_10021020(arg1) __tailcall


10001f3c    int32_t j_sub_10005cf0(int32_t arg1, int32_t arg2)

10001f3c  return sub_10005cf0(arg1, arg2) __tailcall


10001f41    int32_t j_sub_1003ccb0(void* arg1)

10001f41  return sub_1003ccb0(arg1) __tailcall


10001f46    char* j_sub_10043600(char* arg1, char* arg2)

10001f46  return sub_10043600(arg1, arg2) __tailcall


10001f4b    void* j_sub_10007c40(int32_t* arg1, void* arg2, int32_t arg3, int32_t arg4, int32_t arg5)

10001f4b  return sub_10007c40(arg1, arg2, arg3, arg4, arg5) __tailcall


10001f50    int32_t j_sub_1000a0a0(int32_t arg1, int32_t arg2)

10001f50  return sub_1000a0a0(arg1, arg2) __tailcall


10001f55    char* __stdcall j_sub_100423f0(char* arg1)

10001f55  return sub_100423f0(arg1) __tailcall


10001f5a    int32_t j_sub_10009ed0(int32_t arg1)

10001f5a  return sub_10009ed0(arg1) __tailcall


10001f5f    int32_t j_sub_1001f210(void* arg1)

10001f5f  return sub_1001f210(arg1) __tailcall


10001f64    char* j_sub_1000e140(char* arg1)

10001f64  return sub_1000e140(arg1) __tailcall


10001f69    int32_t j_sub_10037660()

10001f69  return sub_10037660() __tailcall


10001f6e    void* j_sub_1000b130(void* arg1)

10001f6e  return sub_1000b130(arg1) __tailcall


10001f73    int32_t j_sub_10022930(void* arg1)

10001f73  return sub_10022930(arg1) __tailcall


10001f78    void* j_sub_10007980()

10001f78  return sub_10007980() __tailcall


10001f7d    int32_t j_sub_1000a400()

10001f7d  return sub_1000a400() __tailcall


10001f82    void j_sub_10003bf0(int32_t arg1, float* arg2, float arg3, float arg4, float* arg5, int32_t arg6, float arg7, int32_t* arg8)

10001f82  return sub_10003bf0(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) __tailcall


10001f87    int32_t j_sub_1000a810(int32_t arg1)

10001f87  return sub_1000a810(arg1) __tailcall


10001f8c    int32_t j_sub_1001ab80()

10001f8c  return sub_1001ab80() __tailcall


10001f91    int32_t j_sub_100030a0()

10001f91  return sub_100030a0() __tailcall


10001f96    int32_t j_sub_100228c0(void* arg1)

10001f96  return sub_100228c0(arg1) __tailcall


10001f9b    int32_t* j_sub_10019700(void* arg1)

10001f9b  return sub_10019700(arg1) __tailcall


10001fa0    int32_t j_sub_10003360(float* arg1, int32_t arg2)

10001fa0  return sub_10003360(arg1, arg2) __tailcall


10001fa5    char* j_sub_1003a710(char* arg1)

10001fa5  return sub_1003a710(arg1) __tailcall


10001faa    int32_t j_sub_1002abd0(char arg1)

10001faa  return sub_1002abd0(arg1) __tailcall


10001faf    int32_t j_sub_100292e0()

10001faf  return sub_100292e0() __tailcall


10001fb4    int32_t j_sub_100216a0(void* arg1)

10001fb4  return sub_100216a0(arg1) __tailcall


10001fb9    int32_t j_sub_100318d0(void* arg1, int32_t* arg2, float arg3)

10001fb9  return sub_100318d0(arg1, arg2, arg3) __tailcall


10001fbe    int32_t j_sub_1002e060(int32_t arg1, char* arg2, int32_t arg3, int32_t arg4, int32_t arg5)

10001fbe  return sub_1002e060(arg1, arg2, arg3, arg4, arg5) __tailcall


10001fc3    int32_t j_sub_1003cd30(void* arg1)

10001fc3  return sub_1003cd30(arg1) __tailcall


10001fc8    int32_t j_sub_10005c90(float* arg1, float* arg2)

10001fc8  return sub_10005c90(arg1, arg2) __tailcall


10001fcd    int32_t* j_sub_10031010(void* arg1, int32_t arg2, float arg3)

10001fcd  return sub_10031010(arg1, arg2, arg3) __tailcall


10001fd2    int32_t j_sub_1002ea50(int32_t arg1)

10001fd2  return sub_1002ea50(arg1) __tailcall


10001fd7    int32_t j_sub_1000f2c0(int32_t* arg1)

10001fd7  return sub_1000f2c0(arg1) __tailcall


10001fdc    int32_t j_sub_1000b090()

10001fdc  return sub_1000b090() __tailcall


10001fe1    float* j_sub_10042860(float* arg1, float* arg2, float arg3)

10001fe1  return sub_10042860(arg1, arg2, arg3) __tailcall


10001fe6    int32_t j_sub_10038ac0(char* arg1, int32_t arg2)

10001fe6  return sub_10038ac0(arg1, arg2) __tailcall


10001feb    int32_t j_sub_10013ba0(float* arg1, float* arg2)

10001feb  return sub_10013ba0(arg1, arg2) __tailcall


10001ff0    int32_t j_sub_1001ef00(void* arg1)

10001ff0  return sub_1001ef00(arg1) __tailcall


10001ff5    void* j_sub_100031f0()

10001ff5  return sub_100031f0() __tailcall


10001ffa    void j_sub_1000b300(int32_t* arg1, float* arg2, float* arg3, float* arg4)

10001ffa  return sub_1000b300(arg1, arg2, arg3, arg4) __tailcall


10001fff    int32_t j_sub_10009610()

10001fff  return sub_10009610() __tailcall


10002004    int32_t j_sub_10037120(int32_t arg1, int32_t arg2)

10002004  return sub_10037120(arg1, arg2) __tailcall

10002009                             cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
10002020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100020a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100020c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100020e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100021a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100021c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100021e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100022a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100022c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100022e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100023a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100023c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100023e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100024a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100024c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100024e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100025a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100025c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100025e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100026a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100026c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100026e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100027a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100027c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100027e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100028a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100028c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100028e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100029a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100029c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100029e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10002fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10003010    int32_t sub_10003010(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

1000304e  void var_54
1000304e  __builtin_memcpy(dest: arg1, 
1000304e      src: data_10063fec(&var_54, arg2, arg3, arg4, arg5, arg6, arg7), n: 0x54)
10003055  return arg1

10003056                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10003060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10003080    int32_t sub_10003080(int32_t arg1)

1000308e  return data_10063ff0(arg1)

1000308f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

100030a0    int32_t sub_100030a0()

100030a0  void* eax_3 = data_10069578
100030a6  int32_t esi = data_1006957c
100030a6  
100030ae  if (eax_3 == 0)
100030c7      int16_t x87control
100030c7      esi = __ftol(x87control, j_sub_10038a90("max_bsplinks", "4096"))
100030c7      
100030cb      if (esi s< 0)
100030cd          esi = 0
100030cd      
100030d2      data_1006957c = esi
100030dc      eax_3 = j_sub_10038f90(esi * 0x18)
100030e4      data_10069578 = eax_3
100030e4  
100030e9  *(eax_3 + 0xc) = 0
100030f0  void* eax_4 = data_10069578
100030f8  *(eax_4 + 8) = eax_4 + 0x18
100030f8  
10003101  if (esi - 1 s> 1)
10003104      int32_t eax_5 = 0x18
10003109      int32_t i_1 = esi - 2
1000312c      int32_t i
1000312c      
1000312c      do
1000310c          int32_t ecx_2 = data_10069578
10003116          *(eax_5 + ecx_2 + 0xc) = eax_5 + ecx_2 - 0x18
1000311a          int32_t ecx_3 = data_10069578
10003124          *(eax_5 + ecx_3 + 8) = eax_5 + ecx_3 + 0x18
10003128          eax_5 += 0x18
1000312b          i = i_1
1000312b          i_1 -= 1
1000312c      while (i != 1)
1000312c  
1000312f  int32_t ecx_4 = data_10069578
1000313d  int32_t result = esi * 0x18
10003143  *(result + ecx_4 - 0xc) = ecx_4 + ((esi * 3 - 6) << 3)
1000314d  *(result + data_10069578 - 0x10) = 0
1000315b  data_10069580 = data_10069578
10003161  return result

10003162        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10003180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100031a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100031b0    int32_t sub_100031b0(int32_t arg1)

100031b0  void* i = data_10069580
100031b5  int32_t ecx = 0
100031b5  
100031b9  while (i != 0)
100031bb      i = *(i + 8)
100031be      ecx += 1
100031be  
100031d9  return data_10063fe8(1, "%d free bsp links, %s\n", ecx, arg1)

100031da                                                                                90 90 90 90 90 90                            ......
100031e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100031f0    void* sub_100031f0()

100031f0  void* result = data_10069580
100031f0  
100031f7  if (result == 0)
10003200      data_10063fe8(4, "empty bsp link heap\n")
1000320b      return 0
1000320b  
1000320c  void* ecx = *(result + 8)
10003211  data_10069580 = ecx
10003211  
10003217  if (ecx != 0)
10003219      *(ecx + 0xc) = 0
10003219  
10003220  return result

10003221     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

10003240    void* sub_10003240(void* arg1)

10003240  void* ecx_1 = data_10069580
10003240  
1000324e  if (ecx_1 != 0)
10003250      *(ecx_1 + 0xc) = arg1
10003250  
10003253  *(arg1 + 0xc) = 0
1000325c  *(arg1 + 8) = data_10069580
1000325f  *(arg1 + 0x14) = 0
10003262  *(arg1 + 0x10) = 0
10003265  data_10069580 = arg1
1000326a  return arg1

1000326b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

10003280    int32_t sub_10003280()

10003280  int32_t result = data_100674c0
10003280  
10003287  if (result != 0)
10003289      void* eax = data_10069584
10003289      
10003290      if (eax != 0)
10003293          j_sub_100390b0(eax)
10003293      
100032a8      result = j_sub_10039000(data_100674e8 << 2)
100032b0      data_10069584 = result
100032b0  
100032b5  return result

100032b6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
100032c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100032d0    int32_t sub_100032d0()

100032d0  int32_t result = data_100674c0
100032d0  
100032d7  if (result != 0)
100032d9      void* eax = data_1006755c
100032d9      
100032e0      if (eax != 0)
100032e3          j_sub_100390b0(eax)
100032e3      
100032fd      data_1006755c = j_sub_10039000(data_10067550 << 2)
10003302      void* eax_3 = data_10067560
10003302      
1000330c      if (eax_3 != 0)
1000330f          j_sub_100390b0(eax_3)
1000330f      
10003317      int32_t eax_4 = data_10067548
10003325      result = j_sub_10039000((eax_4 * eax_4) << 2)
1000332d      data_10067560 = result
1000332d  
10003332  return result

10003333                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10003340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10003360    int32_t sub_10003360(float* arg1, int32_t arg2)

10003367  if (data_100674c0 == 0)
1000336b      return 0
1000336b  
1000337c  int32_t i = *(arg2 * 0x30 + data_100674c8 + 0x24)
1000337c  
10003382  if (i s>= 0)
10003389      int32_t esi_1 = data_100674f4
10003390      int32_t edi_1 = data_10067504
10003390      
100033db      do
1000339d          int32_t eax_5 = i * 7
1000339f          void* ecx_1 = edi_1 + (eax_5 << 2)
100033a5          int32_t eax_7 = *(edi_1 + (eax_5 << 2)) * 5
100033b3          float* eax_8 = esi_1 + (eax_7 << 2)
100033bf          long double x87_r7_4 =
100033bf              fconvert.t(*(esi_1 + (eax_7 << 2) + 4)) * fconvert.t(arg1[1])
100033bf              + fconvert.t(*(esi_1 + (eax_7 << 2) + 8)) * fconvert.t(arg1[2])
100033bf              + fconvert.t(*eax_8) * fconvert.t(*arg1)
100033c1          long double x87_r7_5 = x87_r7_4 - fconvert.t(eax_8[3])
100033c4          long double temp0_1 = fconvert.t(0f)
100033c4          x87_r7_5 - temp0_1
100033ca          eax_8.w = (x87_r7_5 < temp0_1 ? 1 : 0) << 8
100033ca              | (is_unordered.t(x87_r7_5, temp0_1) ? 1 : 0) << 0xa
100033ca              | (x87_r7_5 == temp0_1 ? 1 : 0) << 0xe
100033ca          
100033cf          if ((eax_8:1.b & 0x41) != 0)
100033d6              i = *(ecx_1 + 8)
100033cf          else
100033d1              i = *(ecx_1 + 4)
100033db      while (i s>= 0)
100033db  
100033e4  return 0xffffffff - i

100033e5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
10003400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10003420    int32_t sub_10003420(float* arg1, int32_t arg2)

10003427  if (data_100674c0 == 0)
1000342b      return 0
1000342b  
10003436  int32_t eax_2 = j_sub_10003360(arg1, arg2)
1000344f  return data_100674ec + eax_2 * 0x1c

10003450                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

10003460    float* sub_10003460(float* arg1, float* arg2)

10003468  long double x87_r7 = fconvert.t(*arg1)
1000346a  long double x87_r6 = fconvert.t(arg1[1])
1000346d  long double x87_r5 = fconvert.t(arg1[2])
10003482  *arg1 = fconvert.s(x87_r5 * fconvert.t(arg2[2]) + x87_r6 * fconvert.t(arg2[1])
10003482      + x87_r7 * fconvert.t(*arg2))
10003497  arg1[1] = fconvert.s(x87_r5 * fconvert.t(arg2[5]) + x87_r6 * fconvert.t(arg2[4])
10003497      + x87_r7 * fconvert.t(arg2[3]))
100034ab  arg1[2] = fconvert.s(x87_r5 * fconvert.t(arg2[8]) + x87_r6 * fconvert.t(arg2[7])
100034ab      + x87_r7 * fconvert.t(arg2[6]))
100034ae  return arg2

100034af                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
100034c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100034d0    float* sub_100034d0(float arg1, float* arg2)

100034d4  float* esi = arg1
100034dc  int32_t var_64 = 0
100034e7  long double x87_r7_1 = fconvert.t(esi[1]) * fconvert.t(0.017453292519943295)
100034ee  int32_t var_58 = 0
100034f6  int32_t var_54 = 0
100034fe  int32_t var_50 = 0
10003508  long double st0
10003508  bool c2
10003508  st0, c2 = __fsin(x87_r7_1)
1000350a  int32_t var_4c = 0x3f800000
10003512  int32_t var_44 = 0
1000351a  int32_t var_3c = 0
10003522  int32_t var_38 = 0x3f800000
1000352a  int32_t var_34 = 0
10003532  int32_t var_2c = 0
1000353a  arg1 = fconvert.s(st0)
10003542  long double st0_1
10003542  bool c2_1
10003542  st0_1, c2_1 = __fcos(x87_r7_1)
10003544  float var_68 = arg1
1000354d  float var_6c = fconvert.s(st0_1)
10003557  float var_60 = fconvert.s(fneg(fconvert.t(arg1)))
1000355b  float var_5c = fconvert.s(st0_1)
10003561  long double x87_r7_4 = fconvert.t(*esi) * fconvert.t(0.017453292519943295)
1000356b  long double st0_2
1000356b  bool c2_2
1000356b  st0_2, c2_2 = __fsin(x87_r7_4)
10003571  long double st0_3
10003571  bool c2_3
10003571  st0_3, c2_3 = __fcos(fconvert.t(fconvert.s(x87_r7_4)))
10003577  float var_48 = fconvert.s(st0_3)
10003583  float var_40 = fconvert.s(fneg(st0_2))
10003587  float var_28 = fconvert.s(st0_3)
1000358f  float var_30 = fconvert.s(st0_2)
10003594  float var_24[0x9]
10003594  j_sub_100429c0(&var_48, &var_6c, &var_24)
1000359c  long double x87_r7_7 = fconvert.t(esi[2]) * fconvert.t(0.017453292519943295)
100035b1  long double st0_4
100035b1  bool c2_4
100035b1  st0_4, c2_4 = __fsin(x87_r7_7)
100035b3  var_6c = 1f
100035bb  int32_t var_68_1 = 0
100035c3  int32_t var_64_1 = 0
100035cb  int32_t var_60_1 = 0
100035d3  int32_t var_54_1 = 0
100035db  arg1 = fconvert.s(st0_4)
100035e9  long double st0_5
100035e9  bool c2_5
100035e9  st0_5, c2_5 = __fcos(x87_r7_7)
100035eb  float var_58_1 = arg1
100035f4  float var_5c_1 = fconvert.s(st0_5)
10003601  float var_50_1 = fconvert.s(fneg(fconvert.t(arg1)))
10003605  float var_4c_1 = fconvert.s(st0_5)
10003615  return j_sub_100429c0(&var_6c, &var_24, arg2)

10003616                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10003620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10003680    void sub_10003680(float* arg1 @ ebp, int32_t arg2 @ esi, int32_t arg3 @ edi, int32_t arg4, float* arg5, float arg6, float arg7, float* arg8, float arg9, int32_t* arg10)

10003691  if (data_100674c0 != 0)
100036a4      void var_b4
100036a4      j_sub_1000af30(arg4, &var_b4)
100036b8      int32_t var_84
100036b8      
100036b8      if (var_84 == 2 || var_84 == 3)
100036be          float* eax_1 = arg7
100036c7          float var_cc
100036c7          float var_c8_1
100036c7          float var_9c
100036c7          float var_98
100036c7          float var_94
100036c7          
100036c7          if (eax_1 == 0)
100036f7              var_cc = var_9c
100036fb              var_c8_1 = var_98
100036ff              float var_c4_2 = var_94
100036c7          else
100036cf              var_cc = fconvert.s(fconvert.t(var_9c) - fconvert.t(*eax_1))
100036da              var_c8_1 = fconvert.s(fconvert.t(var_98) - fconvert.t(eax_1[1]))
100036e5              float var_c4_1 = fconvert.s(fconvert.t(var_94) - fconvert.t(eax_1[2]))
10003703          float* eax_3 = arg6
1000370c          float var_c0
1000370c          float var_90
1000370c          float var_8c
1000370c          float var_88
1000370c          
1000370c          if (eax_3 == 0)
1000373c              var_c0 = var_90
10003740              float* var_bc_2 = var_8c
10003744              float var_b8_2 = var_88
1000370c          else
10003714              var_c0 = fconvert.s(fconvert.t(var_90) - fconvert.t(*eax_3))
1000371f              float var_bc_1 = fconvert.s(fconvert.t(var_8c) - fconvert.t(eax_3[1]))
1000372a              float var_b8_1 = fconvert.s(fconvert.t(var_88) - fconvert.t(eax_3[2]))
1000375e          int32_t i = 0
10003760          void* ebx_1 = &var_cc - arg5
10003762          float* edx_4 = arg8 - arg5
10003764          float* ecx_4 = arg5
10003766          void* ebp = &var_c0 - arg5
10003766          
100037a1          do
10003768              long double x87_r7_13 = fconvert.t(*ecx_4)
1000376a              long double temp2_1 = fconvert.t(*(ebx_1 + ecx_4))
1000376a              x87_r7_13 - temp2_1
1000376d              eax_3.w = (x87_r7_13 < temp2_1 ? 1 : 0) << 8
1000376d                  | (is_unordered.t(x87_r7_13, temp2_1) ? 1 : 0) << 0xa
1000376d                  | (x87_r7_13 == temp2_1 ? 1 : 0) << 0xe
1000376d              
10003772              if ((eax_3:1.b & 1) != 0)
10003774                  long double x87_r7_14 = fconvert.t(*(edx_4 + ecx_4))
10003777                  long double temp4_1 = fconvert.t(*(ebx_1 + ecx_4))
10003777                  x87_r7_14 - temp4_1
1000377a                  eax_3.w = (x87_r7_14 < temp4_1 ? 1 : 0) << 8
1000377a                      | (is_unordered.t(x87_r7_14, temp4_1) ? 1 : 0) << 0xa
1000377a                      | (x87_r7_14 == temp4_1 ? 1 : 0) << 0xe
1000377a                  
1000377f                  if ((eax_3:1.b & 1) != 0)
1000377f                      break
1000377f              
10003781              long double x87_r7_15 = fconvert.t(*ecx_4)
10003783              long double temp3_1 = fconvert.t(*(ecx_4 + ebp))
10003783              x87_r7_15 - temp3_1
10003786              eax_3.w = (x87_r7_15 < temp3_1 ? 1 : 0) << 8
10003786                  | (is_unordered.t(x87_r7_15, temp3_1) ? 1 : 0) << 0xa
10003786                  | (x87_r7_15 == temp3_1 ? 1 : 0) << 0xe
10003786              
1000378b              if ((eax_3:1.b & 0x41) == 0)
1000378d                  long double x87_r7_16 = fconvert.t(*(edx_4 + ecx_4))
10003790                  long double temp5_1 = fconvert.t(*(ecx_4 + ebp))
10003790                  x87_r7_16 - temp5_1
10003793                  eax_3.w = (x87_r7_16 < temp5_1 ? 1 : 0) << 8
10003793                      | (is_unordered.t(x87_r7_16, temp5_1) ? 1 : 0) << 0xa
10003793                      | (x87_r7_16 == temp5_1 ? 1 : 0) << 0xe
10003793                  
10003798                  if ((eax_3:1.b & 0x41) == 0)
10003798                      break
10003798              
1000379a              i += 1
1000379b              ecx_4 = &ecx_4[1]
100037a1          while (i s< 3)
100037a1          
100037a6          if (i == 3)
100037b1              if (var_84 == 2)
100037b9                  int32_t edx_5 = 0
100037bb                  float* ecx_5 = arg5
100037bb                  
100037bd                  while (true)
100037bd                      long double x87_r7_17 = fconvert.t(*ecx_5)
100037c2                      long double x87_r6_2 = fconvert.t(*(ecx_5 + ebx_1)) + fconvert.t(0.5)
100037c8                      x87_r6_2 - x87_r7_17
100037ca                      eax_3.w = (x87_r6_2 < x87_r7_17 ? 1 : 0) << 8
100037ca                          | (is_unordered.t(x87_r6_2, x87_r7_17) ? 1 : 0) << 0xa
100037ca                          | (x87_r6_2 == x87_r7_17 ? 1 : 0) << 0xe
100037ca                      
100037cf                      if ((eax_3:1.b & 1) == 0)
100037f0                          label_100037f0:
100037f0                          
100037f3                          if (edx_5 s< 3)
100037f3                              break
100037cf                      else
100037d1                          long double x87_r7_18 = fconvert.t(*ecx_5)
100037d6                          long double x87_r6_4 =
100037d6                              fconvert.t(*(ecx_5 + ebp)) - fconvert.t(0.5)
100037dc                          x87_r6_4 - x87_r7_18
100037de                          eax_3.w = (x87_r6_4 < x87_r7_18 ? 1 : 0) << 8
100037de                              | (is_unordered.t(x87_r6_4, x87_r7_18) ? 1 : 0) << 0xa
100037de                              | (x87_r6_4 == x87_r7_18 ? 1 : 0) << 0xe
100037de                          
100037e3                          if ((eax_3:1.b & 0x41) != 0)
100037e3                              goto label_100037f0
100037e3                          
100037e5                          edx_5 += 1
100037e6                          ecx_5 = &ecx_5[1]
100037e6                          
100037ec                          if (edx_5 s< 3)
100037ec                              continue
100037ec                      
10003805                      arg10[0x14] = arg4
1000380b                      arg10[1] = 1
10003812                      *arg10 = 1
10003818                      arg10[2] = 0
1000381b                      arg10[0x13] = 0
1000381e                      arg10[0xc] = 0xffffffff
10003825                      __builtin_memset(s: &arg10[6], c: 0, n: 0x14)
10003836                      arg10[3] = *arg5
1000383c                      arg10[4] = arg5[1]
10003843                      arg10[5] = arg5[2]
10003853                      return 
10003853              
1000385b              int32_t i_1 = 0
10003862              int32_t* var_d8 = fconvert.s(fconvert.t(*arg8) - fconvert.t(*arg5))
1000386c              float var_d4_1 = fconvert.s(fconvert.t(arg8[1]) - fconvert.t(arg5[1]))
10003876              int32_t* var_d0_1 = fconvert.s(fconvert.t(arg8[2]) - fconvert.t(arg5[2]))
10003919              int32_t* var_dc_1
10003919              
10003919              do
1000387a                  long double x87_r7_25 = fconvert.t((&var_d8)[i_1])
1000387e                  long double temp6_1 = fconvert.t(0f)
1000387e                  x87_r7_25 - temp6_1
10003884                  eax_3.w = (x87_r7_25 < temp6_1 ? 1 : 0) << 8
10003884                      | (is_unordered.t(x87_r7_25, temp6_1) ? 1 : 0) << 0xa
10003884                      | (x87_r7_25 == temp6_1 ? 1 : 0) << 0xe
10003889                  long double x87_r7_26
10003889                  
10003889                  if ((eax_3:1.b & 0x41) != 0)
10003891                      x87_r7_26 = fconvert.t((&var_c0)[i_1])
10003889                  else
1000388b                      x87_r7_26 = fconvert.t((&var_cc)[i_1])
1000388b                  
10003898                  long double x87_r6_6 = fconvert.t(arg5[i_1]) - x87_r7_26
100038a6                  int32_t edx_9 = i_1 + 1
100038ac                  var_dc_1 = fconvert.s(x87_r6_6
100038ac                      / (x87_r6_6 - (fconvert.t(arg8[i_1]) - x87_r7_26)))
100038ac                  
100038b2                  if (i_1 s> 1)
100038b4                      edx_9 = 0
100038b4                  
100038be                  long double x87_r6_9 = fconvert.t(var_dc_1) * fconvert.t((&var_d8)[edx_9])
100038be                      + fconvert.t(arg5[edx_9])
100038c1                  long double temp7_1 = fconvert.t((&var_cc)[edx_9])
100038c1                  x87_r6_9 - temp7_1
100038c5                  int32_t var_60[0x3]
100038c5                  var_60[edx_9] = fconvert.s(x87_r6_9)
100038c5                  bool c1_1 = unimplemented  {fst dword [esp+edx*4+0x8c], st0}
100038cc                  eax_3.w = (x87_r6_9 < temp7_1 ? 1 : 0) << 8 | (c1_1 ? 1 : 0) << 9
100038cc                      | (is_unordered.t(x87_r6_9, temp7_1) ? 1 : 0) << 0xa
100038cc                      | (x87_r6_9 == temp7_1 ? 1 : 0) << 0xe | 0x3000
100038cc                  
100038d1                  if ((eax_3:1.b & 0x41) == 0)
100038d3                      long double temp8_1 = fconvert.t((&var_c0)[edx_9])
100038d3                      x87_r6_9 - temp8_1
100038d7                      eax_3.w = (x87_r6_9 < temp8_1 ? 1 : 0) << 8
100038d7                          | (is_unordered.t(x87_r6_9, temp8_1) ? 1 : 0) << 0xa
100038d7                          | (x87_r6_9 == temp8_1 ? 1 : 0) << 0xe | 0x3800
100038d7                      
100038dc                      if ((eax_3:1.b & 1) != 0)
100038de                          int32_t edx_10 = edx_9 + 1
100038de                          
100038e2                          if (edx_10 s> 2)
100038e4                              edx_10 = 0
100038e4                          
100038ee                          x87_r6_9 = fconvert.t(var_dc_1) * fconvert.t((&var_d8)[edx_10])
100038ee                              + fconvert.t(arg5[edx_10])
100038f1                          long double temp9_1 = fconvert.t((&var_cc)[edx_10])
100038f1                          x87_r6_9 - temp9_1
100038f5                          var_60[edx_10] = fconvert.s(x87_r6_9)
100038f5                          bool c1_2 = unimplemented  {fst dword [esp+edx*4+0x8c], st0}
100038fc                          eax_3.w = (x87_r6_9 < temp9_1 ? 1 : 0) << 8 | (c1_2 ? 1 : 0) << 9
100038fc                              | (is_unordered.t(x87_r6_9, temp9_1) ? 1 : 0) << 0xa
100038fc                              | (x87_r6_9 == temp9_1 ? 1 : 0) << 0xe | 0x3000
100038fc                          
10003901                          if ((eax_3:1.b & 0x41) == 0)
10003903                              long double temp10_1 = fconvert.t((&var_c0)[edx_10])
10003903                              x87_r6_9 - temp10_1
10003907                              eax_3.w = (x87_r6_9 < temp10_1 ? 1 : 0) << 8
10003907                                  | (is_unordered.t(x87_r6_9, temp10_1) ? 1 : 0) << 0xa
10003907                                  | (x87_r6_9 == temp10_1 ? 1 : 0) << 0xe | 0x3800
10003907                              
1000390c                              if ((eax_3:1.b & 1) != 0)
10003921                                  var_60[i_1] = fconvert.s(x87_r6_6)
10003921                                  break
10003921                  
10003912                  i_1 += 1
10003919              while (i_1 s< 3)
10003919              
1000392b              if (i_1 != 3)
10003938                  long double x87_r7_28 = fconvert.t(var_dc_1)
1000393c                  long double temp11_1 = fconvert.t(arg10[2])
1000393c                  x87_r7_28 - temp11_1
1000393f                  eax_3.w = (x87_r7_28 < temp11_1 ? 1 : 0) << 8
1000393f                      | (is_unordered.t(x87_r7_28, temp11_1) ? 1 : 0) << 0xa
1000393f                      | (x87_r7_28 == temp11_1 ? 1 : 0) << 0xe
1000393f                  
10003944                  if ((eax_3:1.b & 1) != 0)
10003951                      if (var_84 == 2)
10003962                          arg10[2] = var_dc_1
1000396e                          arg10[0xc] = 0xffffffff
10003977                          arg10[1] = 0
1000397a                          *arg10 = 0
1000397c                          arg10[0x14] = arg4
1000397c                          
1000398a                          if (arg6 != 0 && arg7 != 0)
1000398c                              long double x87_r7_29 = fconvert.t((&var_d8)[i_1])
10003990                              long double temp13_1 = fconvert.t(0f)
10003990                              x87_r7_29 - temp13_1
10003996                              int32_t eax_7
10003996                              eax_7.w = (x87_r7_29 < temp13_1 ? 1 : 0) << 8
10003996                                  | (is_unordered.t(x87_r7_29, temp13_1) ? 1 : 0) << 0xa
10003996                                  | (x87_r7_29 == temp13_1 ? 1 : 0) << 0xe
10003996                              
1000399b                              if ((eax_7:1.b & 0x41) != 0)
100039aa                                  arg10[0xb] =
100039aa                                      fconvert.s(fneg(fconvert.t(*(arg6 i+ (i_1 << 2)))))
1000399b                              else
100039a0                                  arg10[0xb] = *(arg7 i+ (i_1 << 2))
100039a0                          
100039b1                          void* eax_8 = arg5
100039b5                          void* edx_14 = &arg10[3]
100039b8                          int32_t i_3 = 3
100039d1                          int32_t i_2
100039d1                          
100039d1                          do
100039c1                              long double x87_r7_33 = fconvert.t(var_dc_1)
100039c1                                  * fconvert.t(*(&var_d8 - arg5 + eax_8))
100039c4                              eax_8 += 4
100039c7                              edx_14 += 4
100039ca                              i_2 = i_3
100039ca                              i_3 -= 1
100039ce                              *(edx_14 - 4) =
100039ce                                  fconvert.s(x87_r7_33 + fconvert.t(*(eax_8 - 4)))
100039d1                          while (i_2 != 1)
100039dc                          long double x87_r7_35 = fconvert.t((&var_d8)[i_1])
100039e2                          long double temp15 = fconvert.t(0f)
100039e2                          x87_r7_35 - temp15
100039eb                          arg10[mods.dp.d(sx.q(i_1 + 1), 3) + 6] = 0
100039f7                          arg10[mods.dp.d(sx.q(i_1 + 2), 3) + 6] = 0
100039f7                          
100039fb                          if ((((x87_r7_35 < temp15 ? 1 : 0) << 8
100039fb                                  | (is_unordered.t(x87_r7_35, temp15) ? 1 : 0) << 0xa
100039fb                                  | (x87_r7_35 == temp15 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10003a07                              arg10[i_1 + 6] = 0x3f800000
100039fb                          else
100039fd                              arg10[i_1 + 6] = 0xbf800000
100039fd                          
10003a0f                          long double x87_r7_36 = fconvert.t((&var_d8)[i_1])
10003a13                          long double temp16 = fconvert.t(0f)
10003a13                          x87_r7_36 - temp16
10003a19                          long double x87_r7_37 = fconvert.t(arg10[i_1 + 3])
10003a19                          
10003a22                          if ((((x87_r7_36 < temp16 ? 1 : 0) << 8
10003a22                                  | (is_unordered.t(x87_r7_36, temp16) ? 1 : 0) << 0xa
10003a22                                  | (x87_r7_36 == temp16 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41)
10003a22                                  == 0)
10003a24                              x87_r7_37 = fneg(x87_r7_37)
10003a24                          
10003a2b                          arg10[0xa].b = i_1.b
10003a34                          arg10[9] = fconvert.s(x87_r7_37 - fconvert.t(arg10[0xb]))
10003a3e                          return 
10003a3e                      
10003a42                      if (var_84 == 3)
10003a5a                          float var_f4_2 = 0f
10003a5c                          float var_f8_1 = arg8
10003a6a                          float var_104_1 = arg5
10003a6f                          void var_a8
10003a6f                          float var_108 = &var_a8
10003a8d                          float var_80
10003a8d                          void var_54
10003a8d                          float* ebx
10003a8d                          __builtin_memcpy(dest: &var_b4, 
10003a8d                              src: j_sub_100044f0(&var_54, var_80, &var_b4, var_108, 
10003a8d                                  var_104_1, arg6, arg7, var_f8_1, var_f4_2, arg9, arg3, 
10003a8d                                  arg2, arg1, ebx, var_dc_1, var_d8, var_d4_1, var_d0_1, 
10003a8d                                  var_cc, var_c8_1), 
10003a8d                              n: 0x54)
10003a8f                          float var_ac
10003a8f                          long double x87_r7_39 = fconvert.t(var_ac)
10003a93                          long double temp14_1 = fconvert.t(arg10[2])
10003a93                          x87_r7_39 - temp14_1
10003a96                          int32_t eax_16
10003a96                          eax_16.w = (x87_r7_39 < temp14_1 ? 1 : 0) << 8
10003a96                              | (is_unordered.t(x87_r7_39, temp14_1) ? 1 : 0) << 0xa
10003a96                              | (x87_r7_39 == temp14_1 ? 1 : 0) << 0xe
10003a96                          
10003a9b                          if ((eax_16:1.b & 1) != 0)
10003aad                              __builtin_memcpy(dest: arg10, src: &var_b4, n: 0x54)

10003ac7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10003ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10003be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10003bf0    void sub_10003bf0(int32_t arg1, float* arg2, float arg3, float arg4, float* arg5, int32_t arg6, float arg7, int32_t* arg8)

10003bf8  if (data_100674c0 == 0)
10003bfd      return 
10003bfd  
10003c09  int32_t __saved_ecx = 0
10003c09  
10003c16  for (int32_t* i = *(data_10069584 + (arg1 << 2)); i != 0; i = i[2])
10003c27      int32_t eax_3 = *i
10003c27      
10003c2f      if (eax_3 != arg6)
10003c44          int32_t eax_4
10003c44          int80_t st0_1
10003c44          eax_4, st0_1 =
10003c44              j_sub_10003680(arg5, i, arg8, eax_3, arg2, arg3, arg4, arg5, arg7, arg8)
10003c44          
10003c4e          if (eax_4 != 0)
10003c50              __saved_ecx = 1

10003c69                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
10003c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10003c90    void sub_10003c90(int32_t* arg1, float* arg2, float* arg3, int32_t* arg4, int32_t* arg5, int32_t arg6, int32_t* arg7, float* arg8, int32_t* arg9, float* arg10, float* arg11)

10003c97  long double x87_r7 = fconvert.t(*arg3)
10003c99  long double temp0 = fconvert.t(0f)
10003c99  x87_r7 - temp0
10003ca8  int32_t var_70
10003ca8  float var_24[0x9]
10003ca8  int32_t i
10003ca8  
10003ca8  if ((((x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10003ca8          | (x87_r7 == temp0 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10003cd6      label_10003cd6:
10003cd6      var_70 = 1
10003ce0      j_sub_100034d0(arg3, &var_24)
10003ce8      i = 0
10003ca8  else
10003caa      long double x87_r7_1 = fconvert.t(arg3[1])
10003cad      long double temp1_1 = fconvert.t(0f)
10003cad      x87_r7_1 - temp1_1
10003cad      
10003cb8      if ((((x87_r7_1 < temp1_1 ? 1 : 0) << 8
10003cb8              | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
10003cb8              | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10003cb8          goto label_10003cd6
10003cb8      
10003cba      long double x87_r7_2 = fconvert.t(arg3[2])
10003cbd      long double temp3_1 = fconvert.t(0f)
10003cbd      x87_r7_2 - temp3_1
10003cbd      
10003cc8      if ((((x87_r7_2 < temp3_1 ? 1 : 0) << 8
10003cc8              | (is_unordered.t(x87_r7_2, temp3_1) ? 1 : 0) << 0xa
10003cc8              | (x87_r7_2 == temp3_1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10003cc8          goto label_10003cd6
10003cc8      
10003cca      i = 0
10003ccc      var_70 = 0
10003ccc  
10003cea  float* edx = arg2
10003cf1  long double x87_r7_3 = fconvert.t(*edx)
10003cf3  long double temp2 = fconvert.t(0f)
10003cf3  x87_r7_3 - temp2
10003cfe  float var_6c_1
10003cfe  
10003cfe  if ((((x87_r7_3 < temp2 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_3, temp2) ? 1 : 0) << 0xa
10003cfe          | (x87_r7_3 == temp2 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10003d24      var_6c_1 = 1.40129846e-45f
10003cfe  else
10003d00      long double x87_r7_4 = fconvert.t(edx[1])
10003d03      long double temp4_1 = fconvert.t(0f)
10003d03      x87_r7_4 - temp4_1
10003d03      
10003d0e      if ((((x87_r7_4 < temp4_1 ? 1 : 0) << 8
10003d0e              | (is_unordered.t(x87_r7_4, temp4_1) ? 1 : 0) << 0xa
10003d0e              | (x87_r7_4 == temp4_1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10003d24          var_6c_1 = 1.40129846e-45f
10003d0e      else
10003d10          long double x87_r7_5 = fconvert.t(edx[2])
10003d13          long double temp5_1 = fconvert.t(0f)
10003d13          x87_r7_5 - temp5_1
10003d19          var_6c_1 = 0f
10003d19          
10003d22          if ((((x87_r7_5 < temp5_1 ? 1 : 0) << 8
10003d22                  | (is_unordered.t(x87_r7_5, temp5_1) ? 1 : 0) << 0xa
10003d22                  | (x87_r7_5 == temp5_1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10003d24              var_6c_1 = 1.40129846e-45f
10003d24  
10003d2c  int32_t* eax_11 = arg4
10003d33  int32_t* ebx = arg1
10003d3a  float var_68 = 0f
10003d3e  int32_t i_1 = 0
10003d44  float var_60 = *eax_11
10003d4b  float var_5c = eax_11[1]
10003d52  float var_58 = eax_11[2]
10003d56  int32_t* ecx_3 = arg7
10003d5f  float var_48 = *ecx_3
10003d66  float var_44 = ecx_3[1]
10003d6d  float var_40 = ecx_3[2]
10003d76  float var_64
10003d76  float var_3c
10003d76  float var_30
10003d76  long double x87_r7_30
10003d76  
10003d76  if (ebx[1] s> 0)
100040eb      do
10003d8f          int32_t eax_1
10003d8f          eax_1.w = *(data_10067544 + ((*ebx + i) << 2))
10003d9c          int32_t* esi_5 = data_100674f4 + eax_1 * 0x14
10003da5          float var_54
10003da5          float var_50_1
10003da5          float var_4c_1
10003da5          int32_t ecx_8
10003da5          
10003da5          if (var_70 == 0)
10003ddd              ecx_8 = esi_5[4]
10003de0              var_54 = *esi_5
10003de7              var_50_1 = esi_5[1]
10003dee              var_4c_1 = esi_5[2]
10003da5          else
10003da9              var_54 = *esi_5
10003db0              var_50_1 = esi_5[1]
10003dc1              var_4c_1 = esi_5[2]
10003dc5              j_sub_10003460(&var_54, &var_24)
10003dca              edx = arg2
10003dd4              ecx_8 = 4
10003dd4          
10003df8          float var_74_1
10003df8          float eax_8
10003df8          
10003df8          if (var_6c_1 == 0)
10003e4c              var_74_1 = esi_5[3]
10003df8          else if (ecx_8 s>= 3)
10003e43              var_74_1 = fconvert.s(fconvert.t(var_4c_1) * fconvert.t(edx[2])
10003e43                  + fconvert.t(var_50_1) * fconvert.t(edx[1])
10003e43                  + fconvert.t(var_54) * fconvert.t(*edx) + fconvert.t(esi_5[3]))
10003dfd          else
10003dff              long double x87_r7_6 = fconvert.t((&var_54)[ecx_8])
10003e03              long double temp7_1 = fconvert.t(0f)
10003e03              x87_r7_6 - temp7_1
10003e09              eax_8.w = (x87_r7_6 < temp7_1 ? 1 : 0) << 8
10003e09                  | (is_unordered.t(x87_r7_6, temp7_1) ? 1 : 0) << 0xa
10003e09                  | (x87_r7_6 == temp7_1 ? 1 : 0) << 0xe
10003e09              
10003e0e              if ((eax_8:1.b & 0x41) != 0)
10003e22                  var_74_1 = fconvert.s(fconvert.t(esi_5[3]) - fconvert.t(edx[ecx_8]))
10003e0e              else
10003e16                  var_74_1 = fconvert.s(fconvert.t(edx[ecx_8]) + fconvert.t(esi_5[3]))
10003e16          
10003e53          float var_7c_1
10003e53          long double x87_r5_4
10003e53          long double x87_r6_6
10003e53          
10003e53          if (ecx_8 s>= 3)
10003eef              long double x87_r7_29
10003eef              
10003eef              if (arg5 == 0 || arg6 == 0)
10003f78                  x87_r7_29 = fconvert.t(0f)
10003eef              else
10003f01                  int32_t* ecx_9 = arg5
10003f05                  int32_t j_1 = 3
10003f28                  int32_t j
10003f28                  
10003f28                  do
10003f0a                      long double x87_r7_19 = fconvert.t(*(&var_54 - arg5 + ecx_9))
10003f0d                      long double temp11_1 = fconvert.t(0f)
10003f0d                      x87_r7_19 - temp11_1
10003f13                      eax_8.w = (x87_r7_19 < temp11_1 ? 1 : 0) << 8
10003f13                          | (is_unordered.t(x87_r7_19, temp11_1) ? 1 : 0) << 0xa
10003f13                          | (x87_r7_19 == temp11_1 ? 1 : 0) << 0xe
10003f13                      
10003f18                      if ((eax_8:1.b & 0x41) != 0)
10003f1e                          eax_8 = *(arg6 - arg5 + ecx_9)
10003f18                      else
10003f1a                          eax_8 = *ecx_9
10003f1a                      
10003f21                      *(&var_30 - arg5 + ecx_9) = eax_8
10003f24                      ecx_9 = &ecx_9[1]
10003f27                      j = j_1
10003f27                      j_1 -= 1
10003f28                  while (j != 1)
10003f30                  var_3c = fconvert.s(fneg(fconvert.t(var_54)))
10003f58                  i = i_1
10003f5c                  ebx = arg1
10003f63                  edx = arg2
10003f74                  float var_2c
10003f74                  float var_28
10003f74                  x87_r7_29 = fconvert.t(var_28)
10003f74                      * fconvert.t(fconvert.s(fneg(fconvert.t(var_4c_1)))) + fconvert.t(var_2c)
10003f74                      * fconvert.t(fconvert.s(fneg(fconvert.t(var_50_1))))
10003f74                      + fconvert.t(var_30) * fconvert.t(var_3c)
10003f74              
10003f80              x87_r6_6 = x87_r7_29 + fconvert.t(var_74_1)
10003fa2              var_7c_1 = fconvert.s(fconvert.t(var_4c_1) * fconvert.t(var_58)
10003fa2                  + fconvert.t(var_50_1) * fconvert.t(var_5c)
10003fa2                  + fconvert.t(var_54) * fconvert.t(var_60) - x87_r6_6)
10003fc0              x87_r5_4 = fconvert.t(var_4c_1) * fconvert.t(var_40)
10003fc0                  + fconvert.t(var_50_1) * fconvert.t(var_44)
10003fc0                  + fconvert.t(var_54) * fconvert.t(var_48)
10003e53          else
10003e5b              long double x87_r7_18
10003e5b              
10003e5b              if (arg5 == 0)
10003e9b                  x87_r7_18 = fconvert.t(0f)
10003e5b              else if (arg6 == 0)
10003e94                  edx = arg2
10003e9b                  x87_r7_18 = fconvert.t(0f)
10003e66              else
10003e68                  long double x87_r7_16 = fconvert.t((&var_54)[ecx_8])
10003e6c                  long double temp9_1 = fconvert.t(0f)
10003e6c                  x87_r7_16 - temp9_1
10003e72                  eax_8.w = (x87_r7_16 < temp9_1 ? 1 : 0) << 8
10003e72                      | (is_unordered.t(x87_r7_16, temp9_1) ? 1 : 0) << 0xa
10003e72                      | (x87_r7_16 == temp9_1 ? 1 : 0) << 0xe
10003e72                  
10003e77                  if ((eax_8:1.b & 0x41) != 0)
10003e88                      x87_r7_18 = fconvert.t(*(arg6 + (ecx_8 << 2)))
10003e8b                      edx = arg2
10003e77                  else
10003e7d                      edx = arg2
10003e84                      x87_r7_18 = fneg(fconvert.t(arg5[ecx_8]))
10003e84              
10003ea3              x87_r6_6 = x87_r7_18 + fconvert.t(var_74_1)
10003ea7              long double x87_r5_1 = fconvert.t((&var_54)[ecx_8])
10003eab              long double temp8_1 = fconvert.t(0f)
10003eab              x87_r5_1 - temp8_1
10003eb1              long double x87_r5_2 = fconvert.t((&var_60)[ecx_8])
10003eb5              eax_8.w = (x87_r5_1 < temp8_1 ? 1 : 0) << 8
10003eb5                  | (is_unordered.t(x87_r5_1, temp8_1) ? 1 : 0) << 0xa
10003eb5                  | (x87_r5_1 == temp8_1 ? 1 : 0) << 0xe | 0x2800
10003eb5              
10003eba              if ((eax_8:1.b & 0x41) != 0)
10003ecf                  var_7c_1 = fconvert.s(fneg(x87_r5_2) - x87_r6_6)
10003ed7                  x87_r5_4 = fneg(fconvert.t((&var_48)[ecx_8]))
10003eba              else
10003ebe                  var_7c_1 = fconvert.s(x87_r5_2 - x87_r6_6)
10003ec2                  x87_r5_4 = fconvert.t((&var_48)[ecx_8])
10003ec2          
10003fc4          float var_78 = fconvert.s(x87_r5_4 - x87_r6_6)
10003fca          long double x87_r6_12 = fconvert.t(var_7c_1)
10003fce          long double temp10_1 = fconvert.t(-0.0050000000000000001)
10003fce          x87_r6_12 - temp10_1
10003fd4          eax_8.w = (x87_r6_12 < temp10_1 ? 1 : 0) << 8
10003fd4              | (is_unordered.t(x87_r6_12, temp10_1) ? 1 : 0) << 0xa
10003fd4              | (x87_r6_12 == temp10_1 ? 1 : 0) << 0xe | 0x3800
10003fd4          
10003fd9          if ((eax_8:1.b & 0x41) == 0)
10003fdb              long double x87_r6_13 = fconvert.t(var_78)
10003fdf              long double temp13_1 = fconvert.t(-0.0050000000000000001)
10003fdf              x87_r6_13 - temp13_1
10003fe5              eax_8.w = (x87_r6_13 < temp13_1 ? 1 : 0) << 8
10003fe5                  | (is_unordered.t(x87_r6_13, temp13_1) ? 1 : 0) << 0xa
10003fe5                  | (x87_r6_13 == temp13_1 ? 1 : 0) << 0xe | 0x3800
10003fe5              
10003fea              if ((eax_8:1.b & 0x41) == 0)
100041bb                  return 
100041bb          
10003ff0          long double x87_r6_14 = fconvert.t(var_7c_1)
10003ff4          long double temp12_1 = fconvert.t(0.0050000000000000001)
10003ff4          x87_r6_14 - temp12_1
10003ffa          eax_8.w = (x87_r6_14 < temp12_1 ? 1 : 0) << 8
10003ffa              | (is_unordered.t(x87_r6_14, temp12_1) ? 1 : 0) << 0xa
10003ffa              | (x87_r6_14 == temp12_1 ? 1 : 0) << 0xe | 0x3800
10003ffa          
10003fff          if ((eax_8:1.b & 1) == 0)
10004016              label_10004016:
10004016              long double x87_r6_16 = fconvert.t(var_7c_1)
1000401a              long double temp14_1 = fconvert.t(-0.0050000000000000001)
1000401a              x87_r6_16 - temp14_1
10004020              eax_8.w = (x87_r6_16 < temp14_1 ? 1 : 0) << 8
10004020                  | (is_unordered.t(x87_r6_16, temp14_1) ? 1 : 0) << 0xa
10004020                  | (x87_r6_16 == temp14_1 ? 1 : 0) << 0xe | 0x3800
10004020              
10004025              if ((eax_8:1.b & 0x41) == 0)
10004029                  var_64 = fconvert.s(x87_r6_6)
1000402f                  var_68 = *ebx + i
1000402f              
10004037              long double x87_r7_31 = fconvert.t(var_7c_1)
1000403b              long double temp17_1 = fconvert.t(0.0050000000000000001)
1000403b              x87_r7_31 - temp17_1
10004041              eax_8.w = (x87_r7_31 < temp17_1 ? 1 : 0) << 8
10004041                  | (is_unordered.t(x87_r7_31, temp17_1) ? 1 : 0) << 0xa
10004041                  | (x87_r7_31 == temp17_1 ? 1 : 0) << 0xe
10004041              
10004046              if ((eax_8:1.b & 0x41) != 0)
1000408c                  long double x87_r7_34 = fconvert.t(var_78)
10004090                  long double temp18_1 = fconvert.t(0.0050000000000000001)
10004090                  x87_r7_34 - temp18_1
10004096                  eax_8.w = (x87_r7_34 < temp18_1 ? 1 : 0) << 8
10004096                      | (is_unordered.t(x87_r7_34, temp18_1) ? 1 : 0) << 0xa
10004096                      | (x87_r7_34 == temp18_1 ? 1 : 0) << 0xe
10004096                  
1000409b                  if ((eax_8:1.b & 0x41) == 0)
100040a5                      x87_r7_30 =
100040a5                          fconvert.t(var_7c_1) / (fconvert.t(var_7c_1) - fconvert.t(var_78))
100040b7                      var_48 = fconvert.s(
100040b7                          (fconvert.t(var_48) - fconvert.t(var_60)) * x87_r7_30
100040b7                          + fconvert.t(var_60))
100040c9                      var_44 = fconvert.s(
100040c9                          (fconvert.t(var_44) - fconvert.t(var_5c)) * x87_r7_30
100040c9                          + fconvert.t(var_5c))
100040db                      var_40 = fconvert.s(
100040db                          (fconvert.t(var_40) - fconvert.t(var_58)) * x87_r7_30
100040db                          + fconvert.t(var_58))
10004046              else
10004050                  x87_r7_30 =
10004050                      fconvert.t(var_7c_1) / (fconvert.t(var_7c_1) - fconvert.t(var_78))
10004062                  var_60 = fconvert.s((fconvert.t(var_48) - fconvert.t(var_60)) * x87_r7_30
10004062                      + fconvert.t(var_60))
10004074                  var_5c = fconvert.s((fconvert.t(var_44) - fconvert.t(var_5c)) * x87_r7_30
10004074                      + fconvert.t(var_5c))
10004086                  var_58 = fconvert.s((fconvert.t(var_40) - fconvert.t(var_58)) * x87_r7_30
10004086                      + fconvert.t(var_58))
10003fff          else
10004001              long double x87_r6_15 = fconvert.t(var_78)
10004005              long double temp15_1 = fconvert.t(0.0050000000000000001)
10004005              x87_r6_15 - temp15_1
1000400b              eax_8.w = (x87_r6_15 < temp15_1 ? 1 : 0) << 8
1000400b                  | (is_unordered.t(x87_r6_15, temp15_1) ? 1 : 0) << 0xa
1000400b                  | (x87_r6_15 == temp15_1 ? 1 : 0) << 0xe | 0x3800
1000400b              
10004010              if ((eax_8:1.b & 1) == 0)
10004010                  goto label_10004016
10004010          
100040e4          i += 1
100040e7          i_1 = i
100040eb      while (i s< ebx[1])
100040eb      
100040f1      ecx_3 = arg7
100040f8      eax_11 = arg4
100040f8  
10004103  var_30 = fconvert.s(fconvert.t(*ecx_3) - fconvert.t(*eax_11))
1000410d  float var_2c_1 = fconvert.s(fconvert.t(ecx_3[1]) - fconvert.t(eax_11[1]))
1000411c  float var_28_1 = fconvert.s(fconvert.t(ecx_3[2]) - fconvert.t(eax_11[2]))
10004126  var_3c = fconvert.s(fconvert.t(var_60) - fconvert.t(*eax_11))
10004131  float var_38_2 = fconvert.s(fconvert.t(var_5c) - fconvert.t(eax_11[1]))
1000413c  float var_34_2 = fconvert.s(fconvert.t(var_58) - fconvert.t(eax_11[2]))
10004153  x87_r7_30 = fconvert.t(fconvert.s(j_sub_10043500(&var_3c))) / j_sub_10043500(&var_30)
10004163  long double temp6_1 = fconvert.t(*arg8)
10004163  x87_r7_30 - temp6_1
10004163  
1000416a  if ((((x87_r7_30 < temp6_1 ? 1 : 0) << 8
1000416a          | (is_unordered.t(x87_r7_30, temp6_1) ? 1 : 0) << 0xa
1000416a          | (x87_r7_30 == temp6_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) == 0)
100041bb      return 
100041bb  
1000416c  *arg8 = fconvert.s(x87_r7_30)
10004184  *arg9 = var_68
10004191  *arg10 = fconvert.s(fconvert.t(var_64))
1000419c  *arg11 = fconvert.s(fconvert.t(var_60))
1000419f  arg11[1] = var_5c
100041a2  arg11[2] = var_58

100041bc                                                                                      90 90 90 90                              ....
100041c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100041e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10004200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10004220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10004240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10004260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10004280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100042a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100042c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100042e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10004300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10004310    void sub_10004310(int32_t* arg1, float* arg2, float* arg3, float* arg4, int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8, int32_t* arg9)

10004317  int32_t edx = data_100674ec
10004326  int32_t ebp = 0
10004328  void* ecx_1 = arg1 * 7
10004331  void* ebx = edx + (ecx_1 << 2)
10004334  arg1 = nullptr
10004334  
10004338  if (*(edx + (ecx_1 << 2) + 0x1a) u> 0)
1000433e      int32_t* esi_1 = arg9
100043bb      float var_10
100043bb      float var_c
100043bb      int32_t eax_4
100043bb      int32_t ecx_7
100043bb      
100043bb      do
1000434a          int32_t eax_1
1000434a          eax_1.w = *(ebx + 0x18)
10004354          int32_t eax_2
10004354          eax_2.w = *(data_1006752c + ((eax_1 + ebp) << 1))
10004358          int32_t ecx_4 = data_1006753c
10004362          int32_t eax_3 = eax_2 * 3
10004365          int32_t* edi_1 = ecx_4 + (eax_3 << 2)
10004365          
1000436e          if ((arg8 & *(ecx_4 + (eax_3 << 2) + 8)) != 0)
100043a2              int80_t st0_1
100043a2              eax_4, st0_1 = j_sub_10003c90(edi_1, arg2, arg3, arg4, arg5, arg6, arg7, 
100043a2                  &esi_1[2], &arg9, &var_10, &var_c)
100043a2              
100043ac              if (eax_4 != 0)
100043ae                  arg1 = edi_1
100043ae          
100043b4          ebp += 1
100043b5          ecx_7.w = *(ebx + 0x1a)
100043bb      while (ebp s< ecx_7)
100043bb      
100043c3      if (arg1 != 0)
100043cd          long double x87_r7 = fconvert.t(var_c)
100043d1          long double temp0 = fconvert.t(*arg4)
100043d1          x87_r7 - temp0
100043d3          eax_4.w = (x87_r7 < temp0 ? 1 : 0) << 8
100043d3              | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100043d3              | (x87_r7 == temp0 ? 1 : 0) << 0xe
100043d8          float var_8
100043d8          float var_4
100043d8          
100043d8          if ((eax_4:1.b & 0x40) == 0)
1000440c              *esi_1 = 0
10004412              esi_1[1] = 0
100043d8          else
100043da              long double x87_r7_1 = fconvert.t(var_8)
100043de              long double temp1_1 = fconvert.t(arg4[1])
100043de              x87_r7_1 - temp1_1
100043e1              eax_4.w = (x87_r7_1 < temp1_1 ? 1 : 0) << 8
100043e1                  | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
100043e1                  | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe
100043e1              
100043e6              if ((eax_4:1.b & 0x40) == 0)
1000440c                  *esi_1 = 0
10004412                  esi_1[1] = 0
100043e6              else
100043e8                  long double x87_r7_2 = fconvert.t(var_4)
100043ec                  long double temp2_1 = fconvert.t(arg4[2])
100043ec                  x87_r7_2 - temp2_1
100043ef                  eax_4.w = (x87_r7_2 < temp2_1 ? 1 : 0) << 8
100043ef                      | (is_unordered.t(x87_r7_2, temp2_1) ? 1 : 0) << 0xa
100043ef                      | (x87_r7_2 == temp2_1 ? 1 : 0) << 0xe
100043ef                  
100043f4                  if ((eax_4:1.b & 0x40) == 0)
1000440c                      *esi_1 = 0
10004412                      esi_1[1] = 0
100043f4                  else
100043f6                      *esi_1 = 1
100043fc                      esi_1[1] = 1
10004403                      esi_1[2] = 0
10004403          
10004421          esi_1[3] = var_c
10004428          esi_1[4] = var_8
1000442b          int32_t* ecx_10 = arg9
1000442f          esi_1[5] = var_4
10004432          esi_1[0xc] = ecx_10
1000443d          int32_t eax_10
1000443d          eax_10.w = *(data_10067544 + (ecx_10 << 2))
1000444a          int32_t* eax_12 = data_100674f4 + eax_10 * 0x14
1000444f          esi_1[6] = *eax_12
10004455          esi_1[7] = eax_12[1]
1000445b          esi_1[8] = eax_12[2]
10004461          esi_1[9] = eax_12[3]
10004464          eax_12.b = eax_12[4].b
1000446b          esi_1[0xa].b = eax_12.b
1000446e          esi_1[0xb] = var_10
10004474          esi_1[0x13] = arg1[2]

1000448d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
100044a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100044c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100044e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100044f0    void __stdcall sub_100044f0(float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9, float arg10, int32_t arg11, int32_t arg12, float* arg13, float* arg14, int32_t* arg15, int32_t* arg16, float arg17, int32_t* arg18, int32_t arg19, float arg20)
// This function has unresolved stack usage. View graph of stack usage to resolve.

100044f5  sub_10044310(0x1548)
1000450a  int32_t edx = arg18[2]
10004518  int32_t s
10004518  __builtin_memset(&s, c: 0, n: 0x54)
1000451f  int32_t arg_dc = *arg18
1000452b  bool cond:0 = data_100674c0 == 0
1000452d  int32_t arg_e0 = arg18[1]
10004534  int32_t arg_e4 = edx
1000453b  s = 0
10004542  int32_t arg_d4 = 0
10004549  int32_t arg_d8 = 0x3f800000
10004549  
10004554  if (not(cond:0))
1000456a      float arg_58 = fconvert.s(fconvert.t(*arg18) - fconvert.t(*arg15))
10004574      float arg_5c = fconvert.s(fconvert.t(arg18[1]) - fconvert.t(arg15[1]))
1000457e      float arg_60 = fconvert.s(fconvert.t(arg18[2]) - fconvert.t(arg15[2]))
10004582      long double x87_r7_7 = fconvert.t(arg_58)
10004586      long double temp0_1 = fconvert.t(arg_5c)
10004586      x87_r7_7 - temp0_1
1000458a      int32_t eax_1
1000458a      eax_1.w = (x87_r7_7 < temp0_1 ? 1 : 0) << 8
1000458a          | (is_unordered.t(x87_r7_7, temp0_1) ? 1 : 0) << 0xa
1000458a          | (x87_r7_7 == temp0_1 ? 1 : 0) << 0xe
1000458f      int32_t eax_2
1000458f      
1000458f      if ((eax_1:1.b & 0x41) != 0)
100045a4          long double x87_r7_9 = fconvert.t(arg_5c)
100045a8          long double temp1_1 = fconvert.t(arg_60)
100045a8          x87_r7_9 - temp1_1
100045ac          eax_1.w = (x87_r7_9 < temp1_1 ? 1 : 0) << 8
100045ac              | (is_unordered.t(x87_r7_9, temp1_1) ? 1 : 0) << 0xa
100045ac              | (x87_r7_9 == temp1_1 ? 1 : 0) << 0xe
100045b1          eax_2 = 1
100045b1          
100045b3          if ((eax_1:1.b & 0x41) != 0)
100045b5              eax_2 = 2
1000458f      else
10004591          long double x87_r7_8 = fconvert.t(arg_58)
10004595          long double temp2_1 = fconvert.t(arg_60)
10004595          x87_r7_8 - temp2_1
10004599          eax_1.w = (x87_r7_8 < temp2_1 ? 1 : 0) << 8
10004599              | (is_unordered.t(x87_r7_8, temp2_1) ? 1 : 0) << 0xa
10004599              | (x87_r7_8 == temp2_1 ? 1 : 0) << 0xe
10004599          
1000459e          if ((eax_1:1.b & 0x41) != 0)
100045b5              eax_2 = 2
1000459e          else
100045a0              eax_2 = 0
100045a0      
100045ba      long double x87_r7_10 = fconvert.t((&arg_58)[eax_2])
100045be      long double temp3_1 = fconvert.t(0f)
100045be      x87_r7_10 - temp3_1
100045c4      int32_t arg_50 = eax_2
100045c8      int32_t arg_7c = 1
100045cf      eax_2.w = (x87_r7_10 < temp3_1 ? 1 : 0) << 8
100045cf          | (is_unordered.t(x87_r7_10, temp3_1) ? 1 : 0) << 0xa
100045cf          | (x87_r7_10 == temp3_1 ? 1 : 0) << 0xe
100045cf      
100045d4      if ((eax_2:1.b & 0x41) != 0)
100045d6          arg_7c = 0
100045d6      
100045e4      long double x87_r7_11 = fconvert.t(*arg14)
100045e6      long double temp4_1 = fconvert.t(0f)
100045e6      x87_r7_11 - temp4_1
100045ec      eax_2.w = (x87_r7_11 < temp4_1 ? 1 : 0) << 8
100045ec          | (is_unordered.t(x87_r7_11, temp4_1) ? 1 : 0) << 0xa
100045ec          | (x87_r7_11 == temp4_1 ? 1 : 0) << 0xe
100045f1      int32_t arg_a0
100045f1      float arg_124[0x9]
100045f1      
100045f1      if ((eax_2:1.b & 0x40) == 0)
10004623          arg_a0 = 1
1000462c          j_sub_100034d0(arg14, &arg_124)
100045f1      else
100045f3          long double x87_r7_12 = fconvert.t(arg14[1])
100045f6          long double temp5_1 = fconvert.t(0f)
100045f6          x87_r7_12 - temp5_1
100045fc          eax_2.w = (x87_r7_12 < temp5_1 ? 1 : 0) << 8
100045fc              | (is_unordered.t(x87_r7_12, temp5_1) ? 1 : 0) << 0xa
100045fc              | (x87_r7_12 == temp5_1 ? 1 : 0) << 0xe
100045fc          
10004601          if ((eax_2:1.b & 0x40) == 0)
10004623              arg_a0 = 1
1000462c              j_sub_100034d0(arg14, &arg_124)
10004601          else
10004603              long double x87_r7_13 = fconvert.t(arg14[2])
10004606              long double temp7_1 = fconvert.t(0f)
10004606              x87_r7_13 - temp7_1
1000460c              eax_2.w = (x87_r7_13 < temp7_1 ? 1 : 0) << 8
1000460c                  | (is_unordered.t(x87_r7_13, temp7_1) ? 1 : 0) << 0xa
1000460c                  | (x87_r7_13 == temp7_1 ? 1 : 0) << 0xe
1000460c              
10004611              if ((eax_2:1.b & 0x40) == 0)
10004623                  arg_a0 = 1
1000462c                  j_sub_100034d0(arg14, &arg_124)
10004611              else
10004613                  arg_a0 = 0
10004613      
1000464e      void* ecx_4 = arg12 * 0x30 + data_100674c8
10004653      long double x87_r7_15 = fconvert.t(*(ecx_4 + 0x18)) + fconvert.t(*arg13)
10004655      float arg_80 = fconvert.s(x87_r7_15)
10004662      float arg_84 = fconvert.s(fconvert.t(*(ecx_4 + 0x1c)) + fconvert.t(arg13[1]))
1000466f      float arg_88 = fconvert.s(fconvert.t(*(ecx_4 + 0x20)) + fconvert.t(arg13[2]))
10004676      long double temp6_1 = fconvert.t(0f)
10004676      x87_r7_15 - temp6_1
1000467c      float* eax_4
1000467c      eax_4.w = (x87_r7_15 < temp6_1 ? 1 : 0) << 8
1000467c          | (is_unordered.t(x87_r7_15, temp6_1) ? 1 : 0) << 0xa
1000467c          | (x87_r7_15 == temp6_1 ? 1 : 0) << 0xe
10004681      int32_t arg_98
10004681      
10004681      if ((eax_4:1.b & 0x40) == 0)
100046b2          arg_98 = 1
10004681      else
10004683          long double x87_r7_16 = fconvert.t(arg_84)
1000468a          long double temp8_1 = fconvert.t(0f)
1000468a          x87_r7_16 - temp8_1
10004690          eax_4.w = (x87_r7_16 < temp8_1 ? 1 : 0) << 8
10004690              | (is_unordered.t(x87_r7_16, temp8_1) ? 1 : 0) << 0xa
10004690              | (x87_r7_16 == temp8_1 ? 1 : 0) << 0xe
10004690          
10004695          if ((eax_4:1.b & 0x40) == 0)
100046b2              arg_98 = 1
10004695          else
10004697              long double x87_r7_17 = fconvert.t(arg_88)
1000469e              long double temp9_1 = fconvert.t(0f)
1000469e              x87_r7_17 - temp9_1
100046a4              arg_98 = 0
100046ab              eax_4.w = (x87_r7_17 < temp9_1 ? 1 : 0) << 8
100046ab                  | (is_unordered.t(x87_r7_17, temp9_1) ? 1 : 0) << 0xa
100046ab                  | (x87_r7_17 == temp9_1 ? 1 : 0) << 0xe
100046ab              
100046b0              if ((eax_4:1.b & 0x40) == 0)
100046b2                  arg_98 = 1
100046b2      
100046b9      int32_t* i_13
100046b9      int32_t* eax_5 = &i_13
100046c0      int32_t i_4 = 0x7f
100046ce      int32_t i
100046ce      
100046ce      do
100046c8          *eax_5 = &eax_5[1]
100046ca          eax_5 = &eax_5[0xa]
100046cd          i = i_4
100046cd          i_4 -= 1
100046ce      while (i != 1)
100046d7      int32_t arg_1544 = 0
100046e0      int32_t arg_148
100046e0      
100046e0      if (&arg_148 != 0)
100046e8          int32_t eax_6 = arg15[1]
100046eb          int32_t* i_12 = i_13
100046f2          arg_148 = *arg15
100046fc          int32_t arg_14c = eax_6
10004705          int32_t arg_150 = arg15[2]
1000470f          int32_t arg_154 = *arg18
10004719          int32_t arg_158 = arg18[1]
10004720          int32_t arg_15c = arg18[2]
1000472a          int32_t arg_160 = *(ecx_4 + 0x24)
10004731          int32_t arg_164 = 0
10004738          int32_t arg_168 = 0
10004743          i_13 = nullptr
1000474a          int32_t* i_5 = &arg_148
1000474a          
10004757          while (true)
10004757              int32_t* i_11 = i_5
10004757              
10004759              if (i_5 == 0)
10004759                  goto label_100052a7
10004759              
1000475f              int32_t eax_9 = i_11[7]
10004762              void* ebp_1 = &i_5[9]
10004767              i_5 = *ebp_1
10004767              
1000476e              if (eax_9 s< 0)
1000476e                  goto label_100052a7
1000476e              
10004774              int32_t eax_10 = i_11[6]
10004774              
10004779              if (eax_10 s>= 0)
10004844                  int32_t edx_12 = data_10067504
10004855                  __return_addr = *i_11
10004859                  float eax_18 = i_11[2]
1000485c                  int32_t* edx_13 = edx_12 + eax_10 * 0x1c
1000485f                  float ecx_14 = i_11[1]
10004866                  float eax_19 = i_11[4]
10004874                  int32_t eax_20 = i_11[8]
10004877                  float arg_14 = i_11[3]
1000487b                  float ecx_16 = i_11[5]
10004882                  *ebp_1 = i_12
1000488b                  int32_t* arg_38 = edx_13
1000488f                  i_12 = i_11
10004899                  int32_t* eax_23 = data_100674f4 + *edx_13 * 0x14
100048a9                  float arg_20
100048a9                  float arg_24
100048a9                  float arg_28
100048a9                  void* ecx_20
100048a9                  
100048a9                  if (arg_a0 == 0)
100048e3                      void* ecx_21 = eax_23[4]
100048ec                      arg_20 = *eax_23
100048f3                      arg_24 = eax_23[1]
100048fa                      arg_28 = eax_23[2]
100048fe                      ecx_20 = ecx_21
100048a9                  else
100048ad                      arg_20 = *eax_23
100048b4                      arg_24 = eax_23[1]
100048c8                      arg_28 = eax_23[2]
100048cc                      j_sub_10003460(&arg_20, &arg_124)
100048d1                      edx_13 = arg_38
100048dc                      ecx_20 = 4
100048dc                  
1000490a                  long double x87_r7_20
1000490a                  
1000490a                  if (arg_98 == 0)
10004947                      x87_r7_20 = fconvert.t(eax_23[3])
1000490a                  else if (ecx_20 s>= 3)
10004942                      x87_r7_20 = fconvert.t(arg_28) * fconvert.t(arg_88)
10004942                          + fconvert.t(arg_24) * fconvert.t(arg_84)
10004942                          + fconvert.t(arg_20) * fconvert.t(arg_80) + fconvert.t(eax_23[3])
1000490f                  else
10004918                      x87_r7_20 = fconvert.t((&arg_80)[ecx_20]) + fconvert.t(eax_23[3])
10004918                  
10004962                  float arg_c
10004962                  int32_t* arg_10
10004962                  int32_t* eax_25
10004962                  
10004962                  if (arg16 != 0 && arg17 != 0)
1000496b                      void* i_3
1000496b                      int32_t arg_3c
1000496b                      void* arg_40
1000496b                      float arg_74
1000496b                      long double x87_r7_25
1000496b                      float arg_78
1000496b                      
1000496b                      if (ecx_20 s>= 3)
100049d7                          arg_3c = 1
100049ed                          arg_c = fconvert.s(fconvert.t(arg_28) * fconvert.t(eax_18)
100049ed                              + fconvert.t(arg_24) * fconvert.t(ecx_14)
100049ed                              + fconvert.t(arg_20) * fconvert.t(__return_addr) - x87_r7_20)
10004a29                          long double x87_r6_28 = fconvert.t(arg_28) * fconvert.t(arg_60)
10004a29                              + fconvert.t(arg_24) * fconvert.t(arg_5c)
10004a29                              + fconvert.t(arg_20) * fconvert.t(arg_58)
10004a2b                          long double temp12_1 = fconvert.t(0f)
10004a2b                          x87_r6_28 - temp12_1
10004a31                          eax_25.w = (x87_r6_28 < temp12_1 ? 1 : 0) << 8
10004a31                              | (is_unordered.t(x87_r6_28, temp12_1) ? 1 : 0) << 0xa
10004a31                              | (x87_r6_28 == temp12_1 ? 1 : 0) << 0xe | 0x3800
10004a31                          
10004a36                          if ((eax_25:1.b & 1) == 0)
10004a38                              arg_3c = 0
10004a38                          
10004a40                          float ecx_25 = arg17
10004a4b                          void* eax_28 = &arg_20 i- ecx_25
10004a4d                          i_3 = 3
10004a65                          float arg_b8
10004a65                          arg_10 = &arg_b8 i- ecx_25
10004a70                          void* eax_31 = arg16 i- ecx_25
10004a82                          float arg_c4
10004a82                          arg_40 = &arg_c4 i- ecx_25
10004adf                          bool cond:7_1
10004adf                          
10004adf                          do
10004a8d                              long double x87_r6_29 = fconvert.t(*(eax_28 i+ ecx_25))
10004a90                              long double temp18_1 = fconvert.t(0f)
10004a90                              x87_r6_29 - temp18_1
10004a96                              void* eax_32
10004a96                              eax_32.w = (x87_r6_29 < temp18_1 ? 1 : 0) << 8
10004a96                                  | (is_unordered.t(x87_r6_29, temp18_1) ? 1 : 0) << 0xa
10004a96                                  | (x87_r6_29 == temp18_1 ? 1 : 0) << 0xe | 0x3800
10004a96                              
10004a9b                              if ((eax_32:1.b & 0x41) != 0)
10004abf                                  *(arg_10 i+ ecx_25) = *ecx_25
10004ad0                                  *(arg_40 i+ ecx_25) = *(eax_31 i+ ecx_25)
10004a9b                              else
10004aab                                  *(arg_10 i+ ecx_25) = *(eax_31 i+ ecx_25)
10004ab4                                  *(arg_40 i+ ecx_25) = *ecx_25
10004ab4                              
10004ad7                              ecx_25 += 4
10004ada                              cond:7_1 = i_3 != 1
10004adb                              i_3 -= 1
10004adf                          while (cond:7_1)
10004ae5                          long double x87_r6_31 = fneg(fconvert.t(arg_20))
10004aeb                          long double x87_r5_14 = fneg(fconvert.t(arg_24))
10004af1                          long double x87_r4_2 = fneg(fconvert.t(arg_28))
10004b05                          edx_13 = arg_38
10004b16                          arg_74 = fconvert.s(fconvert.t(arg8) * x87_r4_2
10004b16                              + fconvert.t(arg7) * x87_r5_14
10004b16                              + fconvert.t(arg_b8) * x87_r6_31)
10004b3c                          arg_78 = fconvert.s(fconvert.t(arg10) * x87_r4_2
10004b3c                              + fconvert.t(arg9) * x87_r5_14
10004b3c                              + fconvert.t(arg_c4) * x87_r6_31)
10004b47                          x87_r7_25 = x87_r4_2
1000496b                      else
10004973                          arg_3c = 1
1000497b                          arg_c =
1000497b                              fconvert.s(fconvert.t((&__return_addr)[ecx_20]) - x87_r7_20)
1000497f                          x87_r7_25 = fconvert.t((&arg_14)[ecx_20]) - x87_r7_20
10004983                          long double x87_r6_11 = fconvert.t((&arg_58)[ecx_20])
10004987                          long double temp13_1 = fconvert.t(0f)
10004987                          x87_r6_11 - temp13_1
1000498d                          eax_25.w = (x87_r6_11 < temp13_1 ? 1 : 0) << 8
1000498d                              | (is_unordered.t(x87_r6_11, temp13_1) ? 1 : 0) << 0xa
1000498d                              | (x87_r6_11 == temp13_1 ? 1 : 0) << 0xe | 0x3800
1000498d                          
10004992                          if ((eax_25:1.b & 1) == 0)
10004994                              arg_3c = 0
10004994                          
100049af                          arg_74 = fconvert.s(fneg(fconvert.t(arg16[ecx_20])))
100049bb                          arg_78 = fconvert.s(fneg(fconvert.t(*(arg17 i+ (ecx_20 << 2)))))
10004b4d                      void arg_68
10004b4d                      arg_40 = &arg_68
10004b51                      void* i_1 = nullptr
10004b53                      i_3 = nullptr
10004be9                      int32_t arg_a4[0x2]
10004be9                      int32_t arg_b0[0x2]
10004be9                      
10004be9                      do
10004b5b                          long double x87_r6_34 =
10004b5b                              fconvert.t(arg_c) - fconvert.t(*(&arg_74 + i_1))
10004b62                          *(&arg_a4 + i_1) = fconvert.s(x87_r6_34)
10004b6b                          long double x87_r5_17 = x87_r7_25 - fconvert.t(*(&arg_74 + i_1))
10004b72                          arg_10 = fconvert.s(x87_r5_17)
10004b76                          *(&arg_b0 + i_1) = fconvert.s(x87_r5_17)
10004b7d                          long double temp19_1 = fconvert.t(-0.0050000000000000001)
10004b7d                          x87_r6_34 - temp19_1
10004b83                          i_1.w = (x87_r6_34 < temp19_1 ? 1 : 0) << 8
10004b83                              | (is_unordered.t(x87_r6_34, temp19_1) ? 1 : 0) << 0xa
10004b83                              | (x87_r6_34 == temp19_1 ? 1 : 0) << 0xe | 0x3000
10004b88                          int32_t eax_39
10004b88                          
10004b88                          if ((i_1:1.b & 0x41) != 0)
10004ba2                              eax_39 = 0
10004b88                          else
10004b8a                              long double x87_r5_18 = fconvert.t(arg_10)
10004b8e                              long double temp21_1 = fconvert.t(-0.0050000000000000001)
10004b8e                              x87_r5_18 - temp21_1
10004b94                              i_1.w = (x87_r5_18 < temp21_1 ? 1 : 0) << 8
10004b94                                  | (is_unordered.t(x87_r5_18, temp21_1) ? 1 : 0) << 0xa
10004b94                                  | (x87_r5_18 == temp21_1 ? 1 : 0) << 0xe | 0x3000
10004b94                              
10004b99                              if ((i_1:1.b & 0x41) != 0)
10004ba2                                  eax_39 = 0
10004b99                              else
10004b9b                                  eax_39 = 1
10004b9b                          
10004ba4                          long double temp22_1 = fconvert.t(0.0050000000000000001)
10004ba4                          x87_r6_34 - temp22_1
10004bae                          *(arg_40 - 4) = eax_39
10004bb1                          eax_39.w = (x87_r6_34 < temp22_1 ? 1 : 0) << 8
10004bb1                              | (is_unordered.t(x87_r6_34, temp22_1) ? 1 : 0) << 0xa
10004bb1                              | (x87_r6_34 == temp22_1 ? 1 : 0) << 0xe | 0x3800
10004bb6                          int32_t eax_40
10004bb6                          
10004bb6                          if ((eax_39:1.b & 1) == 0)
10004bd0                              eax_40 = 0
10004bb6                          else
10004bb8                              long double x87_r6_35 = fconvert.t(arg_10)
10004bbc                              long double temp23_1 = fconvert.t(0.0050000000000000001)
10004bbc                              x87_r6_35 - temp23_1
10004bc2                              eax_39.w = (x87_r6_35 < temp23_1 ? 1 : 0) << 8
10004bc2                                  | (is_unordered.t(x87_r6_35, temp23_1) ? 1 : 0) << 0xa
10004bc2                                  | (x87_r6_35 == temp23_1 ? 1 : 0) << 0xe | 0x3800
10004bc2                              
10004bc7                              if ((eax_39:1.b & 1) == 0)
10004bd0                                  eax_40 = 0
10004bc7                              else
10004bc9                                  eax_40 = 1
10004bc9                          
10004bd2                          *arg_40 = eax_40
10004bd8                          i_1 = i_3 + 4
10004be1                          i_3 = i_1
10004be5                          arg_40 += 8
10004be9                      while (i_1 s< 8)
10004be9                      
10004c03                      void arg_64
10004c03                      void arg_6c
10004c03                      
10004c03                      if (*(&arg_64 + (arg_3c << 2)) != 0
10004c03                              || *(&arg_6c + (arg_3c << 2)) != 0)
10004c09                          i_12 = *ebp_1
10004c0c                          *i_11 = __return_addr
10004c12                          i_11[1] = ecx_14
10004c19                          i_11[2] = eax_18
10004c20                          i_11[3] = arg_14
10004c27                          i_11[4] = eax_19
10004c2e                          i_11[5] = ecx_16
10004c35                          i_11[7] = eax_9
10004c3c                          i_11[8] = eax_20
10004c43                          i_11[6] = edx_13[arg_3c + 1]
10004c46                          int32_t eax_53 = *(&arg_64 + (arg_3c << 2))
10004c4a                          *ebp_1 = i_5
10004c4d                          i_5 = i_11
10004c4d                          
10004c59                          if (eax_53 != 0 && *(&arg_6c + (arg_3c << 2)) != 0)
10004c59                              continue
10004c59                      
10004c63                      float eax_55
10004c63                      eax_55.b = arg_3c == 0
10004c78                      float ebp_10
10004c78                      
10004c78                      if (*(&arg_64 + (eax_55 << 2)) != 0
10004c78                              || *(&arg_6c + (eax_55 << 2)) != 0)
10004c7c                          if (i_12 == 0)
10004c7c                              break
10004c7c                          
10004c86                          void** i_7 = i_12
10004c88                          void* esi_4 = &i_12[9]
10004c8b                          *i_7 = __return_addr
10004c91                          i_7[1] = ecx_14
10004c98                          i_7[2] = eax_18
10004c9f                          i_7[3] = arg_14
10004ca6                          i_7[4] = eax_19
10004cad                          i_7[5] = ecx_16
10004cb4                          i_12 = *esi_4
10004cb6                          i_7[7] = eax_9
10004cbd                          i_7[8] = eax_20
10004cc0                          ebp_10 = eax_55
10004cc4                          int32_t edx_21 = edx_13[ebp_10 i+ 1]
10004cc8                          *esi_4 = i_5
10004cca                          i_7[6] = edx_21
10004ccd                          i_5 = i_7
10004ccd                          
10004cdd                          if (*(&arg_64 + (ebp_10 << 2)) != 0
10004cdd                                  && *(&arg_6c + (ebp_10 << 2)) != 0)
10004cdd                              continue
10004c78                      else
10004ce5                          ebp_10 = eax_55
10004ce5                      
10004cf7                      float arg_30
10004cf7                      
10004cf7                      if (*(&arg_64 + (ebp_10 << 3)) != 0
10004cf7                              || *(&arg_68 + (ebp_10 << 3)) != 0)
10004d52                          arg_30 = -1f
10004cf7                      else
10004d10                          int32_t __saved_edi
10004d10                          arg_30 = fconvert.s(fconvert.t((&__saved_edi)[ebp_10 i+ 0x2d])
10004d10                              / (fconvert.t(arg_a4[ebp_10]) - fconvert.t(arg_b0[ebp_10])))
10004d24                          arg1 = fconvert.s((fconvert.t(arg_14) - fconvert.t(__return_addr))
10004d24                              * fconvert.t(arg_30) + fconvert.t(__return_addr))
10004d38                          arg2 = fconvert.s(
10004d38                              (fconvert.t(eax_19) - fconvert.t(ecx_14)) * fconvert.t(arg_30)
10004d38                              + fconvert.t(ecx_14))
10004d4c                          arg3 = fconvert.s(
10004d4c                              (fconvert.t(ecx_16) - fconvert.t(eax_18)) * fconvert.t(arg_30)
10004d4c                              + fconvert.t(eax_18))
10004d4c                      
10004d68                      long double x87_r7_18
10004d68                      
10004d68                      if (*(&arg_64 + (arg_3c << 3)) != 0
10004d68                              || *(&arg_68 + (arg_3c << 3)) != 0)
10004dc0                          x87_r7_18 = fconvert.t(-1f)
10004d68                      else
10004d78                          x87_r7_18 = fconvert.t(arg_a4[arg_3c])
10004d78                              / (fconvert.t(arg_a4[arg_3c]) - fconvert.t(arg_b0[arg_3c]))
10004d8d                          arg4 = fconvert.s(
10004d8d                              (fconvert.t(arg_14) - fconvert.t(__return_addr)) * x87_r7_18
10004d8d                              + fconvert.t(__return_addr))
10004da2                          arg5 = fconvert.s(
10004da2                              (fconvert.t(eax_19) - fconvert.t(ecx_14)) * x87_r7_18
10004da2                              + fconvert.t(ecx_14))
10004db7                          arg6 = fconvert.s(
10004db7                              (fconvert.t(ecx_16) - fconvert.t(eax_18)) * x87_r7_18
10004db7                              + fconvert.t(eax_18))
10004db7                      
10004dc6                      long double x87_r6_48 = fconvert.t(arg_30)
10004dca                      long double temp24_1 = fconvert.t(0f)
10004dca                      x87_r6_48 - temp24_1
10004dd0                      int32_t eax_61
10004dd0                      eax_61.w = (x87_r6_48 < temp24_1 ? 1 : 0) << 8
10004dd0                          | (is_unordered.t(x87_r6_48, temp24_1) ? 1 : 0) << 0xa
10004dd0                          | (x87_r6_48 == temp24_1 ? 1 : 0) << 0xe | 0x3800
10004dd0                      
10004dd5                      if ((eax_61:1.b & 1) != 0)
10004dd7                          long double temp25_1 = fconvert.t(0f)
10004dd7                          x87_r7_18 - temp25_1
10004ddd                          eax_61.w = (x87_r7_18 < temp25_1 ? 1 : 0) << 8
10004ddd                              | (is_unordered.t(x87_r7_18, temp25_1) ? 1 : 0) << 0xa
10004ddd                              | (x87_r7_18 == temp25_1 ? 1 : 0) << 0xe | 0x3800
10004ddd                          
10004de2                          if ((eax_61:1.b & 1) != 0)
10004de2                              continue
10004de2                      
10004dfa                      if (*(&arg_64 + (arg_3c << 2)) == 0
10004dfa                              && *(&arg_6c + (arg_3c << 2)) == 0)
10004e00                          long double x87_r6_49 = fconvert.t(arg_30)
10004e04                          long double temp26_1 = fconvert.t(0f)
10004e04                          x87_r6_49 - temp26_1
10004e0a                          int32_t eax_63
10004e0a                          eax_63.w = (x87_r6_49 < temp26_1 ? 1 : 0) << 8
10004e0a                              | (is_unordered.t(x87_r6_49, temp26_1) ? 1 : 0) << 0xa
10004e0a                              | (x87_r6_49 == temp26_1 ? 1 : 0) << 0xe | 0x3800
10004e0f                          int32_t* i_10
10004e0f                          int32_t* i_2
10004e0f                          void* ebp_11
10004e0f                          int32_t* i_6
10004e0f                          
10004e0f                          if ((eax_63:1.b & 1) != 0)
10004eb1                              long double temp28_1 = fconvert.t(0f)
10004eb1                              x87_r7_18 - temp28_1
10004eb7                              eax_63.w = (x87_r7_18 < temp28_1 ? 1 : 0) << 8
10004eb7                                  | (is_unordered.t(x87_r7_18, temp28_1) ? 1 : 0) << 0xa
10004eb7                                  | (x87_r7_18 == temp28_1 ? 1 : 0) << 0xe | 0x3800
10004eb7                              
10004ebc                              if ((eax_63:1.b & 1) == 0)
10004ec4                                  if (i_12 == 0)
10004ec4                                      break
10004ec4                                  
10004ed8                                  i_10 = i_12
10004eda                                  ebp_11 = &i_12[9]
10004edd                                  *i_10 = arg4
10004ee6                                  i_10[1] = arg5
10004ee9                                  float eax_72 = arg_14
10004eed                                  i_10[2] = arg6
10004ef4                                  i_10[3] = eax_72
10004efb                                  i_10[4] = eax_19
10004f02                                  i_10[5] = ecx_16
10004f05                                  i_12 = *ebp_11
10004f0a                                  i_10[7] = *arg_38
10004f18                                  i_10[8] = (&arg_74)[arg_3c]
10004f1f                                  i_6 = nullptr
10004f21                                  i_10[6] = arg_38[arg_3c + 1]
10004f26                                  i_2 = i_5
10004f26                                  
10004f28                                  if (i_5 == 0)
10004f73                                      i_5 = i_10
10004f75                                      *ebp_11 = 0
10004f28                                  else
10004f54                                      do
10004f2e                                          long double x87_r6_51 = fconvert.t(i_10[arg_50])
10004f31                                          long double temp31_1 = fconvert.t(i_2[arg_50])
10004f31                                          x87_r6_51 - temp31_1
10004f34                                          int32_t eax_76
10004f34                                          eax_76.w = (x87_r6_51 < temp31_1 ? 1 : 0) << 8 | (
10004f34                                              is_unordered.t(x87_r6_51, temp31_1) ? 1 : 0)
10004f34                                              << 0xa | (x87_r6_51 == temp31_1 ? 1 : 0) << 0xe
10004f34                                              | 0x3800
10004f39                                          int32_t eax_77
10004f39                                          
10004f39                                          if ((eax_76:1.b & 1) == 0)
10004f42                                              eax_77 = 0
10004f39                                          else
10004f3b                                              eax_77 = 1
10004f3b                                          
10004f4b                                          if (eax_77 == arg_7c)
10004f4b                                              goto label_10004f5a
10004f4b                                          
10004f4d                                          i_6 = i_2
10004f4f                                          i_2 = i_2[9]
10004f54                                      while (i_2 != 0)
10004f54                                      
10004f6a                                      label_10004f6a:
10004f6a                                      
10004f6c                                      if (i_6 == 0)
10004f73                                          i_5 = i_10
10004f75                                          *ebp_11 = 0
10004f6c                                      else
10004f6e                                          i_6[9] = i_10
10004f75                                          *ebp_11 = 0
10004e0f                          else
10004e17                              if (i_12 == 0)
10004e17                                  break
10004e17                              
10004e25                              i_10 = i_12
10004e27                              ebp_11 = &i_12[9]
10004e2a                              i_6 = nullptr
10004e2c                              *i_10 = arg1
10004e32                              i_10[1] = arg2
10004e35                              float edx_23 = arg_14
10004e39                              i_10[2] = arg3
10004e40                              i_10[3] = edx_23
10004e47                              i_10[4] = eax_19
10004e4e                              i_10[5] = ecx_16
10004e51                              i_12 = *ebp_11
10004e56                              i_10[7] = *arg_38
10004e66                              i_10[8] = (&arg_74)[eax_55]
10004e71                              i_2 = i_5
10004e73                              i_10[6] = arg_38[arg_3c + 1]
10004e73                              
10004e76                              if (i_5 != 0)
10004eaa                                  do
10004e80                                      long double x87_r6_50 = fconvert.t(i_10[arg_50])
10004e83                                      long double temp30_1 = fconvert.t(i_2[arg_50])
10004e83                                      x87_r6_50 - temp30_1
10004e86                                      int32_t eax_69
10004e86                                      eax_69.w = (x87_r6_50 < temp30_1 ? 1 : 0) << 8
10004e86                                          | (is_unordered.t(x87_r6_50, temp30_1) ? 1 : 0)
10004e86                                          << 0xa | (x87_r6_50 == temp30_1 ? 1 : 0) << 0xe
10004e86                                          | 0x3800
10004e8b                                      int32_t eax_70
10004e8b                                      
10004e8b                                      if ((eax_69:1.b & 1) == 0)
10004e94                                          eax_70 = 0
10004e8b                                      else
10004e8d                                          eax_70 = 1
10004e8d                                      
10004e9d                                      if (eax_70 == arg_7c)
10004f5a                                          label_10004f5a:
10004f5a                                          *ebp_11 = i_2
10004f5a                                          
10004f5d                                          if (i_6 == 0)
10004f64                                              i_5 = i_10
10004f5d                                          else
10004f5f                                              i_6[9] = i_10
10004f5f                                          
10004f68                                          if (i_2 != 0)
10004f68                                              goto label_10004f84
10004f68                                          
10004f68                                          goto label_10004f6a
10004f68                                      
10004ea3                                      i_6 = i_2
10004ea5                                      i_2 = i_2[9]
10004eaa                                  while (i_2 != 0)
10004eaa                                  
10004e9d                                  goto label_10004f6a
10004e9d                              
10004f73                              i_5 = i_10
10004f75                              *ebp_11 = 0
10004f75                      
10004f84                      label_10004f84:
10004f84                      
10004f86                      if (*(&arg_64 + (eax_55 << 2)) != 0)
10004f86                          continue
10004f86                      else if (*(&arg_6c + (eax_55 << 2)) != 0)
10004f92                          continue
10004f92                      else
10004f98                          long double temp27_1 = fconvert.t(0f)
10004f98                          x87_r7_18 - temp27_1
10004f9e                          int32_t eax_79
10004f9e                          eax_79.w = (x87_r7_18 < temp27_1 ? 1 : 0) << 8
10004f9e                              | (is_unordered.t(x87_r7_18, temp27_1) ? 1 : 0) << 0xa
10004f9e                              | (x87_r7_18 == temp27_1 ? 1 : 0) << 0xe
10004fa3                          int32_t* i_8
10004fa3                          int32_t** ecx_29
10004fa3                          float esi_11
10004fa3                          
10004fa3                          if ((eax_79:1.b & 1) != 0)
10004fe5                              long double x87_r7_44 = fconvert.t(arg_30)
10004fe9                              long double temp29_1 = fconvert.t(0f)
10004fe9                              x87_r7_44 - temp29_1
10004fef                              eax_79.w = (x87_r7_44 < temp29_1 ? 1 : 0) << 8
10004fef                                  | (is_unordered.t(x87_r7_44, temp29_1) ? 1 : 0) << 0xa
10004fef                                  | (x87_r7_44 == temp29_1 ? 1 : 0) << 0xe
10004fef                              
10004ff4                              if ((eax_79:1.b & 1) != 0)
10004ff4                                  continue
10004ff4                              else
10004ffc                                  if (i_12 == 0)
10004ffc                                      break
10004ffc                                  
10005006                                  i_8 = i_12
10005008                                  ecx_29 = &i_12[9]
1000500b                                  *i_8 = __return_addr
10005011                                  i_8[1] = ecx_14
10005018                                  i_12 = *ecx_29
1000501a                                  i_8[2] = eax_18
10005021                                  i_8[3] = arg1
10005028                                  i_8[4] = arg2
1000502b                                  esi_11 = arg3
10004fa3                          else
10004fa7                              if (i_12 == 0)
10004fa7                                  break
10004fa7                              
10004fb1                              i_8 = i_12
10004fb3                              ecx_29 = &i_12[9]
10004fb6                              *i_8 = __return_addr
10004fbc                              i_8[1] = ecx_14
10004fc3                              i_12 = *ecx_29
10004fc5                              i_8[2] = eax_18
10004fcf                              i_8[3] = arg4
10004fd9                              i_8[4] = arg5
10004fdc                              esi_11 = arg6
10004fdc                          
1000502f                          i_8[5] = esi_11
10005036                          i_8[7] = eax_9
1000503d                          i_8[8] = eax_20
10005044                          int32_t edx_35 = arg_38[eax_55 i+ 1]
10005048                          *ecx_29 = i_5
1000504a                          i_8[6] = edx_35
1000504d                          i_5 = i_8
1000504f                          continue
1000504f                  
10005057                  long double x87_r7_45
10005057                  
10005057                  if (ecx_20 s>= 3)
10005087                      arg_c = fconvert.s(fconvert.t(arg_28) * fconvert.t(eax_18)
10005087                          + fconvert.t(arg_24) * fconvert.t(ecx_14)
10005087                          + fconvert.t(arg_20) * fconvert.t(__return_addr) - x87_r7_20)
100050a7                      x87_r7_45 = fconvert.t(arg_28) * fconvert.t(ecx_16)
100050a7                          + fconvert.t(arg_24) * fconvert.t(eax_19)
100050a7                          + fconvert.t(arg_20) * fconvert.t(arg_14) - x87_r7_20
10005057                  else
1000505f                      arg_c = fconvert.s(fconvert.t((&__return_addr)[ecx_20]) - x87_r7_20)
10005063                      x87_r7_45 = fconvert.t((&arg_14)[ecx_20]) - x87_r7_20
10005063                  
100050a9                  long double x87_r6_63 = fconvert.t(arg_c)
100050ad                  long double temp11_1 = fconvert.t(-0.0050000000000000001)
100050ad                  x87_r6_63 - temp11_1
100050b3                  eax_25.w = (x87_r6_63 < temp11_1 ? 1 : 0) << 8
100050b3                      | (is_unordered.t(x87_r6_63, temp11_1) ? 1 : 0) << 0xa
100050b3                      | (x87_r6_63 == temp11_1 ? 1 : 0) << 0xe | 0x3800
100050b3                  
100050b8                  if ((eax_25:1.b & 0x41) == 0)
100050ba                      long double temp15_1 = fconvert.t(-0.0050000000000000001)
100050ba                      x87_r7_45 - temp15_1
100050c0                      eax_25.w = (x87_r7_45 < temp15_1 ? 1 : 0) << 8
100050c0                          | (is_unordered.t(x87_r7_45, temp15_1) ? 1 : 0) << 0xa
100050c0                          | (x87_r7_45 == temp15_1 ? 1 : 0) << 0xe | 0x3800
100050c0                      
100050c5                      if ((eax_25:1.b & 0x41) == 0)
100050cf                          *i_11 = __return_addr
100050d5                          i_12 = *ebp_1
100050d8                          i_11[1] = ecx_14
100050db                          float ecx_31 = arg_14
100050df                          i_11[2] = eax_18
100050e6                          i_11[3] = ecx_31
100050ed                          i_11[4] = eax_19
100050f4                          i_11[5] = ecx_16
100050f7                          i_11[7] = eax_9
100050fa                          i_11[8] = 0
10005101                          int32_t ecx_33 = edx_13[1]
10005104                          *ebp_1 = i_5
10005109                          i_11[6] = ecx_33
1000510c                          i_5 = i_11
1000510e                          continue
1000510e                  
10005113                  long double x87_r6_64 = fconvert.t(arg_c)
10005117                  long double temp14_1 = fconvert.t(0.0050000000000000001)
10005117                  x87_r6_64 - temp14_1
1000511d                  eax_25.w = (x87_r6_64 < temp14_1 ? 1 : 0) << 8
1000511d                      | (is_unordered.t(x87_r6_64, temp14_1) ? 1 : 0) << 0xa
1000511d                      | (x87_r6_64 == temp14_1 ? 1 : 0) << 0xe | 0x3800
1000511d                  
10005122                  if ((eax_25:1.b & 1) != 0)
10005124                      long double temp17_1 = fconvert.t(0.0050000000000000001)
10005124                      x87_r7_45 - temp17_1
1000512a                      eax_25.w = (x87_r7_45 < temp17_1 ? 1 : 0) << 8
1000512a                          | (is_unordered.t(x87_r7_45, temp17_1) ? 1 : 0) << 0xa
1000512a                          | (x87_r7_45 == temp17_1 ? 1 : 0) << 0xe | 0x3800
1000512a                      
1000512f                      if ((eax_25:1.b & 1) != 0)
10005139                          *i_11 = __return_addr
1000513f                          i_12 = *ebp_1
10005142                          i_11[1] = ecx_14
10005145                          float ecx_35 = arg_14
10005149                          i_11[2] = eax_18
10005150                          i_11[3] = ecx_35
10005157                          i_11[4] = eax_19
1000515e                          i_11[5] = ecx_16
10005161                          i_11[7] = eax_9
10005164                          i_11[8] = 0
1000516b                          int32_t ecx_37 = edx_13[2]
1000516e                          *ebp_1 = i_5
10005173                          i_11[6] = ecx_37
10005176                          i_5 = i_11
10005178                          continue
10005178                  
10005181                  arg_10 = 1
10005189                  long double x87_r7_47 =
10005189                      fconvert.t(arg_c) / (fconvert.t(arg_c) - x87_r7_45)
1000519b                  arg1 = fconvert.s(
1000519b                      (fconvert.t(arg_14) - fconvert.t(__return_addr)) * x87_r7_47
1000519b                      + fconvert.t(__return_addr))
100051ad                  arg2 = fconvert.s((fconvert.t(eax_19) - fconvert.t(ecx_14)) * x87_r7_47
100051ad                      + fconvert.t(ecx_14))
100051bf                  arg3 = fconvert.s((fconvert.t(ecx_16) - fconvert.t(eax_18)) * x87_r7_47
100051bf                      + fconvert.t(eax_18))
100051c5                  long double x87_r7_48 = fconvert.t(arg_c)
100051c9                  long double temp16_1 = fconvert.t(0f)
100051c9                  x87_r7_48 - temp16_1
100051cf                  eax_25.w = (x87_r7_48 < temp16_1 ? 1 : 0) << 8
100051cf                      | (is_unordered.t(x87_r7_48, temp16_1) ? 1 : 0) << 0xa
100051cf                      | (x87_r7_48 == temp16_1 ? 1 : 0) << 0xe
100051cf                  
100051d4                  if ((eax_25:1.b & 1) == 0)
100051d6                      arg_10 = nullptr
100051d6                  
100051e6                  *i_11 = arg1
100051ec                  i_11[1] = arg2
100051f3                  i_11[2] = arg3
100051fa                  i_11[3] = arg_14
10005201                  i_11[4] = eax_19
10005208                  i_11[5] = ecx_16
1000520d                  int32_t* i_9 = *ebp_1
10005210                  i_11[7] = *edx_13
10005215                  i_11[8] = 0
1000521e                  int32_t ecx_45
1000521e                  ecx_45.b = arg_10 == 0
10005223                  int32_t ecx_46 = edx_13[ecx_45 + 1]
10005227                  *ebp_1 = i_5
1000522a                  i_11[6] = ecx_46
1000522a                  
1000522d                  if (i_9 == 0)
1000522d                      break
1000522d                  
10005233                  i_12 = i_9[9]
10005236                  *i_9 = __return_addr
1000523c                  i_9[1] = ecx_14
10005243                  i_9[2] = eax_18
1000524a                  i_9[3] = arg1
10005251                  i_9[4] = arg2
10005258                  i_9[5] = arg3
1000525f                  i_9[7] = eax_9
10005269                  i_9[8] = 0
10005274                  i_5 = i_9
10005276                  i_9[6] = edx_13[arg_10 + 1]
10005279                  i_9[9] = i_11
10004779              else
10004784                  int32_t eax_11 = data_100674ec
10004790                  void* edx_6 = (0xffffffff - eax_10) * 7
10004790                  
100047a8                  if (*(eax_11 + (edx_6 << 2) + 0x1a) != 0
100047a8                          && (arg20 & *(eax_11 + (edx_6 << 2))) != 0)
100047e6                      j_sub_10004310(0xffffffff - eax_10, &arg_80, arg14, arg15, arg16, 
100047e6                          arg17, arg18, arg20, &s)
100047e6                  
100047f8                  if (*(data_10069584 + ((0xffffffff - eax_10) << 2)) != 0)
10004837                      j_sub_10003bf0(0xffffffff - eax_10, arg15, arg16, arg17, arg18, 
10004837                          arg19, arg20, &s)
10004837      
10005289      data_10063fe8(3, "AAS_TraceBSPModel: out of trace …")
10005289  
100052a7  label_100052a7:
100052a7  __builtin_memcpy(dest: arg11, src: &s, n: 0x54)

100052b4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
100052c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100052e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100053a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100053c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100053e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100054a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100054c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100054e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100055a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100055c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100055e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10005640    int32_t sub_10005640(int32_t arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7)

10005674  int32_t var_60 = 0
1000567c  int32_t var_5c = 0
10005684  int32_t var_58 = 0
100056a4  void var_54
100056a4  __builtin_memcpy(dest: arg1, 
100056a4      src: j_sub_100044f0(&var_54, 0f, &var_60, &var_60, arg2, arg3, arg4, arg5, arg6, 
100056a4          arg7), 
100056a4      n: 0x54)
100056ab  return arg1

100056ac                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
100056c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100056d0    int32_t sub_100056d0(int32_t* arg1, float* arg2)

100056d6  int32_t ebx = 0
100056d8  int32_t* ecx = arg1[1]
100056d8  
100056e3  if (ecx s> 0)
100056f1      int32_t ebp_1 = data_100674f4
100056f7      int16_t* edi_1 = data_10067544 + (*arg1 << 2)
100056f7      
10005754      do
100056fc          int32_t eax_1
100056fc          eax_1.w = *edi_1
100056ff          int32_t edx_1 = eax_1 * 5
10005702          float* ecx_2 = ebp_1 + (edx_1 << 2)
10005706          int32_t edx_2 = *(ebp_1 + (edx_1 << 2) + 0x10)
1000570d          long double x87_r7_2
1000570d          
1000570d          if (edx_2 s>= 3)
10005738              x87_r7_2 = fconvert.t(ecx_2[2]) * fconvert.t(arg2[2])
10005738                  + fconvert.t(ecx_2[1]) * fconvert.t(arg2[1])
10005738                  + fconvert.t(*ecx_2) * fconvert.t(*arg2)
1000570d          else
1000570f              long double x87_r7_1 = fconvert.t(ecx_2[edx_2])
10005712              long double temp0_1 = fconvert.t(0f)
10005712              x87_r7_1 - temp0_1
10005718              x87_r7_2 = fconvert.t(arg2[edx_2])
1000571b              eax_1.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
1000571b                  | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1000571b                  | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe | 0x3800
1000571b              
10005720              if ((eax_1:1.b & 0x41) != 0)
10005722                  x87_r7_2 = fneg(x87_r7_2)
10005722          
1000573a          long double x87_r7_6 = x87_r7_2 - fconvert.t(ecx_2[3])
1000573d          long double temp1_1 = fconvert.t(0.0050000000000000001)
1000573d          x87_r7_6 - temp1_1
10005743          eax_1.w = (x87_r7_6 < temp1_1 ? 1 : 0) << 8
10005743              | (is_unordered.t(x87_r7_6, temp1_1) ? 1 : 0) << 0xa
10005743              | (x87_r7_6 == temp1_1 ? 1 : 0) << 0xe
10005743          
10005748          if ((eax_1:1.b & 0x41) == 0)
10005766              return 0
10005766          
1000574e          ebx += 1
1000574f          edi_1 = &edi_1[2]
10005754      while (ebx s< ecx)
10005754  
1000575f  return 1

10005767                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10005780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100057a0    int32_t sub_100057a0(float* arg1, int32_t arg2, float* arg3, float* arg4)

100057ac  int32_t edi = 0
100057ac  
100057b0  if (data_100674c0 == 0)
100057bb      return 0
100057bb  
100057ce  int32_t result = 0
100057d6  float var_74 = fconvert.s(fconvert.t(*arg1) - fconvert.t(*arg3))
100057e0  float var_70 = fconvert.s(fconvert.t(arg1[1]) - fconvert.t(arg3[1]))
100057f1  float var_6c = fconvert.s(fconvert.t(arg1[2]) - fconvert.t(arg3[2]))
100057f9  float var_68 = fconvert.s(fneg(fconvert.t(*arg4)))
10005802  float var_64 = fconvert.s(fneg(fconvert.t(arg4[1])))
1000580f  float var_60 = fconvert.s(fneg(fconvert.t(arg4[2])))
10005815  float var_5c[0x9]
10005815  j_sub_100034d0(&var_68, &var_5c)
10005824  j_sub_10003460(&var_74, &var_5c)
10005836  int32_t eax_3 = j_sub_10003360(&var_74, arg2)
1000583b  int32_t ecx_1 = data_100674ec
1000584d  int32_t eax_5 = eax_3 * 7
10005855  void* esi = ecx_1 + (eax_5 << 2)
10005855  
10005858  if (*(ecx_1 + (eax_5 << 2) + 0x1a) u> 0)
1000589c      int32_t edx_4
1000589c      
1000589c      do
10005862          int32_t edx_1
10005862          edx_1.w = *(esi + 0x18)
1000586a          int32_t eax_6
1000586a          eax_6.w = *(data_1006752c + ((edx_1 + edi) << 1))
1000587b          int32_t* eax_8 = data_1006753c + eax_6 * 0xc
1000587b          
1000588d          if (j_sub_100056d0(eax_8, &var_74) != 0)
10005941              return eax_8[2]
10005941          
10005895          edi += 1
10005896          edx_4.w = *(esi + 0x1a)
1000589c      while (edi s< edx_4)
1000589c  
100058a9  for (int32_t* i = *(data_10069584 + (eax_3 << 2)); i != 0; i = i[2])
100058b8      void var_38
100058b8      j_sub_1000af30(*i, &var_38)
100058bd      long double x87_r7_12 = fconvert.t(*arg1)
100058bf      float var_20
100058bf      long double temp0_1 = fconvert.t(var_20)
100058bf      x87_r7_12 - temp0_1
100058bf      
100058cb      if ((((x87_r7_12 < temp0_1 ? 1 : 0) << 8
100058cb              | (is_unordered.t(x87_r7_12, temp0_1) ? 1 : 0) << 0xa
100058cb              | (x87_r7_12 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
100058d1          long double x87_r7_13 = fconvert.t(*arg1)
100058d3          float var_14
100058d3          long double temp1_1 = fconvert.t(var_14)
100058d3          x87_r7_13 - temp1_1
100058d3          
100058dc          if ((((x87_r7_13 < temp1_1 ? 1 : 0) << 8
100058dc                  | (is_unordered.t(x87_r7_13, temp1_1) ? 1 : 0) << 0xa
100058dc                  | (x87_r7_13 == temp1_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
100058e2              long double x87_r7_14 = fconvert.t(arg1[1])
100058e5              float var_1c
100058e5              long double temp2_1 = fconvert.t(var_1c)
100058e5              x87_r7_14 - temp2_1
100058e5              
100058ee              if ((((x87_r7_14 < temp2_1 ? 1 : 0) << 8
100058ee                      | (is_unordered.t(x87_r7_14, temp2_1) ? 1 : 0) << 0xa
100058ee                      | (x87_r7_14 == temp2_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
100058f0                  long double x87_r7_15 = fconvert.t(arg1[1])
100058f3                  float var_10
100058f3                  long double temp3_1 = fconvert.t(var_10)
100058f3                  x87_r7_15 - temp3_1
100058f3                  
100058fc                  if ((((x87_r7_15 < temp3_1 ? 1 : 0) << 8
100058fc                          | (is_unordered.t(x87_r7_15, temp3_1) ? 1 : 0) << 0xa
100058fc                          | (x87_r7_15 == temp3_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
100058fe                      long double x87_r7_16 = fconvert.t(arg1[2])
10005901                      float var_18
10005901                      long double temp4_1 = fconvert.t(var_18)
10005901                      x87_r7_16 - temp4_1
10005901                      
1000590a                      if ((((x87_r7_16 < temp4_1 ? 1 : 0) << 8
1000590a                              | (is_unordered.t(x87_r7_16, temp4_1) ? 1 : 0) << 0xa
1000590a                              | (x87_r7_16 == temp4_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1000590c                          long double x87_r7_17 = fconvert.t(arg1[2])
1000590f                          float var_c
1000590f                          long double temp5_1 = fconvert.t(var_c)
1000590f                          x87_r7_17 - temp5_1
1000591b                          int32_t var_8
1000591b                          
1000591b                          if ((((x87_r7_17 < temp5_1 ? 1 : 0) << 8
1000591b                                  | (is_unordered.t(x87_r7_17, temp5_1) ? 1 : 0) << 0xa
1000591b                                  | (x87_r7_17 == temp5_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10005927                              if (var_8 == 2)
10005929                                  result |= 0x2000000
10005927                              else
10005945                                  float var_2c
10005945                                  int32_t var_4
10005945                                  
10005945                                  if (var_8 == 3)
10005968                                      result |=
10005968                                          j_sub_100057a0(arg1, var_4, &var_38, &var_2c)
10005968  
10005982  return result

10005983           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
100059a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100059c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100059e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10005a10    int32_t sub_10005a10(float* arg1)

10005a24  float var_c = 0f
10005a2c  int32_t var_8 = 0
10005a34  int32_t var_4 = 0
10005a44  return j_sub_100057a0(arg1, 0, &var_c, &var_c)

10005a45                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10005a60    int32_t sub_10005a60(int32_t arg1, int32_t arg2)

10005a60  int32_t i = arg1
10005a60  
10005a70  if (i != data_10069564)
10005a80      void* s = &data_10067564
10005a88      int32_t* eax = data_100674d4
10005a96      char* edx_3 = eax[arg2 + (i << 1) + 1] + data_100674d0
10005a98      i = (*eax + 7) s>> 3
10005a9b      arg2 = i
10005a9b      
10005adb      do
10005a9f          int32_t ecx_1
10005a9f          ecx_1.b = *edx_3
10005a9f          
10005aa3          if (ecx_1.b == 0)
10005aad              int32_t ebx_1
10005aad              ebx_1.b = edx_3[1]
10005aad              
10005ab2              if (ebx_1 == 0)
10005af0                  return j_sub_1000d7e0("AAS_DecompressVis: 0 repeat")
10005af0              
10005abf              int32_t s_1 = __builtin_memset(s, c: 0, n: ebx_1 u>> 2 << 2)
10005ac3              edx_3 = &edx_3[2]
10005ac9              s += ebx_1
10005acb              __builtin_memset(s: s_1, c: 0, n: ebx_1 & 3)
10005acd              i = arg2
10005aa3          else
10005aa5              *s = ecx_1.b
10005aa7              s += 1
10005aa8              edx_3 = &edx_3[1]
10005adb      while (s - &data_10067564 s< i)
10005adb      
10005af5      data_10069564 = arg1
10005af5  
10005aff  return i

10005b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10005b30    int32_t sub_10005b30(float* arg1, float* arg2, int32_t arg3)

10005b39  if (data_100674c0 == 0)
10005b42      return 1
10005b42  
10005b4a  if (data_100674cc == 0)
10005b53      return 1
10005b53  
10005b58  long double x87_r7 = fconvert.t(data_1006956c)
10005b5e  long double temp0 = fconvert.t(*arg1)
10005b5e  x87_r7 - temp0
10005b60  int32_t eax_1
10005b60  eax_1.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10005b60      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10005b65  int32_t edi
10005b65  
10005b65  if ((eax_1:1.b & 0x40) == 0)
10005b92      label_10005b92:
10005b92      void* eax_3 = j_sub_10003420(arg1, 0)
10005b97      int16_t ecx_1 = *(eax_3 + 4)
10005b97      
10005ba2      if (ecx_1 == 0xffff)
10005ba8          return 0
10005ba8      
10005ba9      edi = sx.d(ecx_1)
10005bae      data_1006956c = *arg1
10005bb7      data_10069570 = arg1[1]
10005bc0      data_10069574 = arg1[2]
10005bca      data_10069568 = sx.d(*(eax_3 + 6))
10005b65  else
10005b67      long double x87_r7_1 = fconvert.t(data_10069570)
10005b6d      long double temp1_1 = fconvert.t(arg1[1])
10005b6d      x87_r7_1 - temp1_1
10005b70      eax_1.w = (x87_r7_1 < temp1_1 ? 1 : 0) << 8
10005b70          | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
10005b70          | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe
10005b70      
10005b75      if ((eax_1:1.b & 0x40) == 0)
10005b75          goto label_10005b92
10005b75      
10005b77      long double x87_r7_2 = fconvert.t(data_10069574)
10005b7d      long double temp2_1 = fconvert.t(arg1[2])
10005b7d      x87_r7_2 - temp2_1
10005b80      eax_1.w = (x87_r7_2 < temp2_1 ? 1 : 0) << 8
10005b80          | (is_unordered.t(x87_r7_2, temp2_1) ? 1 : 0) << 0xa
10005b80          | (x87_r7_2 == temp2_1 ? 1 : 0) << 0xe
10005b80      
10005b85      if ((eax_1:1.b & 0x40) == 0)
10005b85          goto label_10005b92
10005b85      
10005b87      edi = data_10069564
10005b87  
10005bd7  void* eax_6 = j_sub_10003420(arg2, 0)
10005bd7  
10005be6  if (*(eax_6 + 4) == 0xffff)
10005bec      return 0
10005bec  
10005bf3  j_sub_10005a60(edi, arg3)
10005bf8  int32_t eax_8 = sx.d(*(eax_6 + 4))
10005bfe  int32_t edx_3
10005bfe  edx_3.b = 1
10005c06  edx_3.b = 1 << (eax_8.b & 7)
10005c0d  edx_3.b &= *((eax_8 s>> 3) + &data_10067564)
10005c13  char temp3 = edx_3.b
10005c13  edx_3.b = neg.b(edx_3.b)
10005c1b  return neg.d(sbb.d(edx_3, edx_3, temp3 != 0))

10005c1c                                                                                      90 90 90 90                              ....
10005c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10005c60    int32_t sub_10005c60(float* arg1, float* arg2)

10005c74  return j_sub_10005b30(arg1, arg2, 0)

10005c75                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10005c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10005c90    int32_t sub_10005c90(float* arg1, float* arg2)

10005ca4  return j_sub_10005b30(arg1, arg2, 1)

10005ca5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10005cc0    int32_t sub_10005cc0(int32_t arg1, int32_t arg2)

10005cd4  return *(*(data_10067560 + (arg1 << 2)) + (arg2 << 2))

10005cd5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10005ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10005cf0    int32_t sub_10005cf0(int32_t arg1, int32_t arg2)

10005d00  *(data_1006755c + (arg1 << 2)) = arg2
10005d03  int32_t i_2 = data_10067548
10005d09  int32_t result = 0
10005d09  
10005d0e  if (i_2 s> 0)
10005da7      do
10005d14          int32_t i = 0
10005d14          
10005d18          if (i_2 s> 0)
10005d34              do
10005d20                  i += 1
10005d24                  *(*(data_10067560 + (result << 2)) + (i << 2) - 4) = 0
10005d34              while (i s< data_10067548)
10005d34          
10005d3c          int32_t i_1 = 0
10005d41          *(*(data_10067560 + (result << 2)) + (result << 2)) = 1
10005d48          int32_t ecx_1 = data_1006754c
10005d4e          int32_t* edx_5 = ecx_1 + (result << 3)
10005d4e          
10005d56          if (*(ecx_1 + (result << 3)) s> 0)
10005d9c              do
10005d61                  int32_t ecx_4 = edx_5[1] + i_1
10005d61                  
10005d67                  if (*(data_1006755c + (ecx_4 << 2)) != 0)
10005d78                      int32_t* ecx_5 = data_10067554 + (ecx_4 << 3) + 4
10005d7e                      *(*(data_10067560 + (result << 2)) + (*ecx_5 << 2)) = 1
10005d90                      *(*(data_10067560 + (*ecx_5 << 2)) + (result << 2)) = 1
10005d90                  
10005d99                  i_1 += 1
10005d9c              while (i_1 s< *edx_5)
10005d9c          
10005d9e          i_2 = data_10067548
10005da4          result += 1
10005da7      while (result s< i_2)
10005da7  
10005dad  int32_t edi_5 = 0
10005dad  
10005db1  if (i_2 s> 0)
10005db3      int32_t edx_6 = data_10067560
10005db9      int32_t* ecx_9 = nullptr
10005db9      
10005e0a      do
10005dbb          result = 0
10005dbb          
10005dbf          if (i_2 s> 0)
10005e02              do
10005dc3                  while (i_2 s> 0)
10005dd4                      if (*(*(ecx_9 + edx_6) + (result << 2)) != 0
10005dd4                              && **(edx_6 + (result << 2)) != 0)
10005dd9                          **(ecx_9 + edx_6) = 1
10005de7                          *(*data_10067560 + ecx_9) = 1
10005dee                          edx_6 = data_10067560
10005df4                          i_2 = data_10067548
10005df4                      
10005dfa                      result += 1
10005dfa                  
10005dff                  result += 1
10005e02              while (result s< i_2)
10005e02          
10005e04          edi_5 += 1
10005e05          ecx_9 = &ecx_9[1]
10005e0a      while (edi_5 s< i_2)
10005e0a  
10005e0f  return result

10005e10                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
10005e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10005e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10005e60    void sub_10005e60(int32_t arg1, float arg2, float* arg3, int32_t* arg4, int32_t* arg5)

10005e6e  if (data_100674c0 != 0)
10005e78      int32_t ecx_1 = data_100674c4
10005e78      
10005e88      if (arg1 s< 0 || arg1 s>= ecx_1)
10005fd8          data_10063fe8(4, "AAS_BSPModelMinsMaxs: modelnum %…", arg1, ecx_1)
10005fd8          
10005fea          if (arg3 != 0)
10005fec              arg3[2] = 0
10005fef              arg3[1] = 0
10005ff2              *arg3 = 0f
10005ff2          
10005ffa          if (arg4 != 0)
10005ffc              arg4[2] = 0
10005fff              arg4[1] = 0
10006002              *arg4 = 0
10006002          
1000600a          if (arg5 != 0)
1000600c              arg5[2] = 0
1000600f              arg5[1] = 0
10006012              *arg5 = 0
10005e88      else
10005e91          int32_t eax_1 = data_100674c8
10005e96          int32_t esi_2 = arg1 * 0x30
10005ea1          float var_48_1 = fconvert.s(fconvert.t(*(esi_2 + eax_1)))
10005ea9          float var_44_1 = fconvert.s(fconvert.t(*(esi_2 + eax_1 + 4)))
10005eb1          float var_40_1 = fconvert.s(fconvert.t(*(esi_2 + eax_1 + 8)))
10005eb9          float var_54_1 = fconvert.s(fconvert.t(*(esi_2 + eax_1 + 0xc)))
10005ec1          float var_50_1 = fconvert.s(fconvert.t(*(esi_2 + eax_1 + 0x10)))
10005ecd          float var_4c_1 = fconvert.s(fconvert.t(*(esi_2 + eax_1 + 0x14)))
10005ed3          float var_24[0x9]
10005ed3          j_sub_100034d0(arg2, &var_24)
10005ee2          float var_3c
10005ee2          int32_t var_30
10005ee2          j_sub_100431b0(&var_3c, &var_30)
10005ee2          
10005f60          for (int32_t i = 0; i s< 8; i += 1)
10005eef              float var_60
10005eef              
10005eef              if (i s>= 4)
10005eff                  var_60 = var_54_1
10005eef              else
10005ef5                  var_60 = var_48_1
10005ef5              
10005f06              if ((i.b & 1) == 0)
10005f16                  float var_5c_2 = var_50_1
10005f06              else
10005f0c                  float var_5c_1 = var_44_1
10005f0c              
10005f22              if (i s< 2 || i s> 6)
10005f32                  float var_58_2 = var_40_1
10005f22              else
10005f28                  float var_58_1 = var_4c_1
10005f28              
10005f40              j_sub_10003460(&var_60, &var_24)
10005f54              j_sub_100431f0(&var_60, &var_3c, &var_30)
10005f54          
10005f69          if (arg3 != 0)
10005f73              *arg3 = var_3c
10005f79              int32_t var_38
10005f79              arg3[1] = var_38
10005f7c              int32_t var_34
10005f7c              arg3[2] = var_34
10005f7c          
10005f85          if (arg4 != 0)
10005f8f              *arg4 = var_30
10005f95              int32_t var_2c
10005f95              arg4[1] = var_2c
10005f98              int32_t var_28
10005f98              arg4[2] = var_28
10005f98          
10005fa1          if (arg5 != 0)
10005fae              *arg5 = *(esi_2 + data_100674c8 + 0x18)
10005fba              arg5[1] = *(esi_2 + data_100674c8 + 0x1c)
10005fc8              arg5[2] = *(esi_2 + data_100674c8 + 0x20)

1000601a                                                                                90 90 90 90 90 90                            ......
10006020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10006090    void* sub_10006090(void* arg1)

10006090  void* result = arg1
10006090  
10006096  if (result != 0)
100060d5      void* i
100060d5      
100060d5      do
1000609a          void* ecx_1 = *(result + 0xc)
1000609d          i = *(result + 0x10)
1000609d          
100060a2          if (ecx_1 == 0)
100060b8              *(data_10069584 + (*(result + 4) << 2)) = *(result + 8)
100060a2          else
100060a7              *(ecx_1 + 8) = *(result + 8)
100060a7          
100060bb          void* ecx_3 = *(result + 8)
100060bb          
100060c0          if (ecx_3 != 0)
100060c5              *(ecx_3 + 0xc) = *(result + 0xc)
100060c5          
100060c9          j_sub_10003240(result)
100060d1          result = i
100060d5      while (i != 0)
100060d5  
100060d9  return result

100060da                                                                                90 90 90 90 90 90                            ......
100060e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10006100    int32_t sub_10006100(float* arg1, int32_t arg2, float* arg3)

10006103  float* ecx = arg1
1000611d  void* ebp_1 = arg3 - ecx
1000611f  float var_c
1000611f  void* edx = &var_c - ecx
10006121  int32_t* esi_1 = arg2 - ecx
10006123  float var_18
10006123  void* edi = &var_18 - ecx
10006125  arg1 = 3
1000615f  void* eax
1000615f  bool cond:1_1
1000615f  
1000615f  do
1000612d      long double x87_r7_1 = fconvert.t(*(ecx + ebp_1))
10006130      long double temp0_1 = fconvert.t(0f)
10006130      x87_r7_1 - temp0_1
10006136      eax.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
10006136          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
10006136          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
1000613b      float eax_1 = *ecx
1000613b      
1000613d      if ((eax:1.b & 1) == 0)
1000614a          *(edx + ecx) = eax_1
10006150          *(edi + ecx) = *(esi_1 + ecx)
1000613d      else
1000613f          *(edi + ecx) = eax_1
10006145          *(edx + ecx) = *(esi_1 + ecx)
10006145      
10006157      ecx = &ecx[1]
1000615a      cond:1_1 = arg1 != 1
1000615b      arg1 -= 1
1000615f  while (cond:1_1)
10006170  int32_t result = 0
1000617e  float var_8
1000617e  float var_4
1000617e  long double x87_r7_6 = fconvert.t(var_4) * fconvert.t(arg3[2])
1000617e      + fconvert.t(var_8) * fconvert.t(arg3[1]) + fconvert.t(var_c) * fconvert.t(*arg3)
1000617e      - fconvert.t(arg3[3])
10006199  float var_14
10006199  float var_10
10006199  long double x87_r6_8 = fconvert.t(var_10) * fconvert.t(arg3[2])
10006199      + fconvert.t(var_14) * fconvert.t(arg3[1]) + fconvert.t(var_18) * fconvert.t(*arg3)
10006199      - fconvert.t(arg3[3])
1000619d  long double temp2 = fconvert.t(0f)
1000619d  x87_r6_8 - temp2
100061a3  eax.w = (x87_r6_8 < temp2 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_8, temp2) ? 1 : 0) << 0xa
100061a3      | (x87_r6_8 == temp2 ? 1 : 0) << 0xe | 0x3800
100061a3  
100061a8  if ((eax:1.b & 1) == 0)
100061aa      result = 1
100061aa  
100061af  long double temp3 = fconvert.t(0f)
100061af  x87_r7_6 - temp3
100061b5  eax.w = (x87_r7_6 < temp3 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_6, temp3) ? 1 : 0) << 0xa
100061b5      | (x87_r7_6 == temp3 ? 1 : 0) << 0xe
100061b5  
100061ba  if ((eax:1.b & 1) == 0)
100061c4      return result
100061c4  
100061bc  return result | 2

100061c5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
100061e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10006210    int32_t* sub_10006210(float* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

10006223  if (data_100674c0 == 0)
10006231      return 0
10006231  
1000623f  int32_t* result = nullptr
10006241  void var_fc
10006241  void* ebx = &var_fc
1000624f  int32_t var_100 = *(arg4 * 0x30 + data_100674c8 + 0x24)
1000624f  
10006253  while (true)
10006253      ebx -= 4
10006253      
1000625c      if (ebx u< &var_100)
1000625c          break
1000625c      
10006262      int32_t eax_4 = *ebx
10006262      
10006266      if (eax_4 s>= 0)
100062d0          int32_t* esi_2 = data_10067504 + eax_4 * 0x1c
100062de          float* ecx_6 = data_100674f4 + *esi_2 * 0x14
100062e1          int32_t edx_6 = ecx_6[4]
100062e7          char eax_8
100062e7          
100062e7          if (edx_6 s>= 3)
10006337              eax_8 = j_sub_10006100(arg1, arg2, ecx_6)
100062e7          else
100062f0              long double x87_r7_1 = fconvert.t(ecx_6[3])
100062f3              long double temp0_1 = fconvert.t(arg1[edx_6])
100062f3              x87_r7_1 - temp0_1
100062f6              float* eax_7
100062f6              eax_7.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
100062f6                  | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
100062f6                  | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
100062f6              
100062fb              if ((eax_7:1.b & 0x41) == 0)
10006304                  long double x87_r7_2 = fconvert.t(ecx_6[3])
1000630e                  long double temp1_1 = fconvert.t(*(arg2 + (edx_6 << 2)))
1000630e                  x87_r7_2 - temp1_1
10006311                  eax_7.w = (x87_r7_2 < temp1_1 ? 1 : 0) << 8
10006311                      | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
10006311                      | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe
10006311                  
10006316                  if ((eax_7:1.b & 1) != 0)
1000631f                      eax_8 = 3
10006316                  else
10006318                      eax_8 = 2
100062fb              else
100062fd                  eax_8 = 1
100062fd          
10006341          if ((eax_8 & 1) != 0)
10006346              *ebx = esi_2[1]
10006348              ebx += 4
10006348          
1000634d          if ((eax_8 & 2) != 0)
10006356              *ebx = esi_2[2]
10006358              ebx += 4
10006266      else
1000626d          int32_t* result_1 = j_sub_100031f0()
1000626d          
10006274          if (result_1 == 0)
10006274              break
10006274          
10006283          *result_1 = arg3
10006285          result_1[1] = 0xffffffff - eax_4
10006288          result_1[5] = 0
1000628b          result_1[4] = result
1000628b          
1000628e          if (result != 0)
10006290              result[5] = result_1
10006290          
10006293          result_1[3] = 0
10006296          result_1[2] = 0
1000629f          result = result_1
100062a4          result_1[2] = *(data_10069584 + ((0xffffffff - eax_4) << 2))
100062ad          void* ecx_3 = *(data_10069584 + ((0xffffffff - eax_4) << 2))
100062ad          
100062b2          if (ecx_3 != 0)
100062b4              *(ecx_3 + 0xc) = result_1
100062b4          
100062bd          *(data_10069584 + ((0xffffffff - eax_4) << 2)) = result_1
100062bd  
1000636c  return result

1000636d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10006380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100063a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100063c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100063d0    int32_t sub_100063d0(float* arg1, float* arg2, int32_t* arg3, int32_t arg4)

100063d5  float* ebp = arg1
100063da  float* esi = arg2
100063df  int32_t result = 0
100063e5  int32_t* eax = j_sub_10006210(ebp, esi, 0, 0)
100063f3  int32_t* var_40 = eax
100063f3  
100063f7  if (eax != 0)
10006401      while (result s< arg4)
10006414          int32_t* ebx_1 = *(data_10069584 + (var_40[1] << 2))
10006414          
10006419          if (ebx_1 != 0)
10006426              void* var_44_1 = &arg3[result]
10006426              
1000642e              while (result s< arg4)
10006434                  int32_t eax_3 = 0
10006434                  
10006438                  if (result s> 0)
1000643c                      int32_t* ecx_3 = arg3
1000643c                      
10006442                      while (*ecx_3 != *ebx_1)
10006444                          eax_3 += 1
10006445                          ecx_3 = &ecx_3[1]
10006445                          
1000644a                          if (eax_3 s>= result)
1000644a                              break
1000644a                  
1000644e                  if (eax_3 == result)
1000645c                      void var_38
1000645c                      j_sub_1000af30(*ebx_1, &var_38)
10006461                      float var_20
10006461                      long double x87_r7_1 = fconvert.t(var_20)
10006465                      long double temp0_1 = fconvert.t(*esi)
10006465                      x87_r7_1 - temp0_1
10006465                      
1000646f                      if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
1000646f                              | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1000646f                              | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10006475                          float var_14
10006475                          long double x87_r7_2 = fconvert.t(var_14)
10006479                          long double temp1_1 = fconvert.t(*ebp)
10006479                          x87_r7_2 - temp1_1
10006479                          
10006481                          if ((((x87_r7_2 < temp1_1 ? 1 : 0) << 8
10006481                                  | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
10006481                                  | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
10006487                              float var_1c
10006487                              long double x87_r7_3 = fconvert.t(var_1c)
1000648b                              long double temp2_1 = fconvert.t(esi[1])
1000648b                              x87_r7_3 - temp2_1
1000648b                              
10006493                              if ((((x87_r7_3 < temp2_1 ? 1 : 0) << 8
10006493                                      | (is_unordered.t(x87_r7_3, temp2_1) ? 1 : 0) << 0xa
10006493                                      | (x87_r7_3 == temp2_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10006499                                  float var_10
10006499                                  long double x87_r7_4 = fconvert.t(var_10)
1000649d                                  long double temp3_1 = fconvert.t(ebp[1])
1000649d                                  x87_r7_4 - temp3_1
1000649d                                  
100064a5                                  if ((((x87_r7_4 < temp3_1 ? 1 : 0) << 8
100064a5                                          | (is_unordered.t(x87_r7_4, temp3_1) ? 1 : 0)
100064a5                                          << 0xa | (x87_r7_4 == temp3_1 ? 1 : 0) << 0xe):1.b & 1)
100064a5                                          == 0)
100064ab                                      float var_18
100064ab                                      long double x87_r7_5 = fconvert.t(var_18)
100064af                                      long double temp4_1 = fconvert.t(esi[2])
100064af                                      x87_r7_5 - temp4_1
100064af                                      
100064b7                                      if ((((x87_r7_5 < temp4_1 ? 1 : 0) << 8
100064b7                                              | (is_unordered.t(x87_r7_5, temp4_1) ? 1 : 0)
100064b7                                              << 0xa | (x87_r7_5 == temp4_1 ? 1 : 0) << 0xe):1.b
100064b7                                              & 0x41) != 0)
100064bd                                          float var_c
100064bd                                          long double x87_r7_6 = fconvert.t(var_c)
100064c1                                          long double temp5_1 = fconvert.t(ebp[2])
100064c1                                          x87_r7_6 - temp5_1
100064c9                                          int32_t var_8
100064c9                                          
100064c9                                          if ((((x87_r7_6 < temp5_1 ? 1 : 0) << 8 | (
100064c9                                                  is_unordered.t(x87_r7_6, temp5_1) ? 1 : 0) << 0xa
100064c9                                                  | (x87_r7_6 == temp5_1 ? 1 : 0) << 0xe):1.b & 1)
100064c9                                                  == 0)
100064db                                              if (var_8 == 1 || var_8 == 2)
10006549                                                  result += 1
1000654a                                                  *var_44_1 = *ebx_1
1000654f                                                  var_44_1 += 4
100064db                                              else if (var_8 == 3)
100064eb                                                  int32_t var_4
100064eb                                                  int32_t* i_1 =
100064eb                                                      j_sub_10006210(ebp, esi, 0, var_4)
100064f3                                                  int32_t* i = i_1
100064f3                                                  
100064f7                                                  if (i_1 != 0)
10006518                                                      do
10006511                                                          if (
10006511                                                                  *(data_100674ec + i[1] * 0x1c + 0x1a)
10006511                                                                  != 0)
1000651e                                                              if (i != 0)
10006526                                                                  result += 1
10006527                                                                  *var_44_1 = *ebx_1
1000652c                                                                  var_44_1 += 4
1000652c                                                              
1000651e                                                              break
1000651e                                                          
10006513                                                          i = i[4]
10006518                                                      while (i != 0)
10006518                                                      
10006530                                                      esi = arg2
10006534                                                      ebp = arg1
10006534                                                  
10006539                                                  j_sub_10006090(i_1)
10006539                  
10006553                  ebx_1 = ebx_1[2]
10006553                  
10006558                  if (ebx_1 == 0)
10006558                      break
10006558          
10006562          int32_t* eax_9 = var_40[4]
10006567          var_40 = eax_9
10006567          
1000656b          if (eax_9 == 0)
1000656b              break
1000656b  
10006576  j_sub_10006090(eax)
10006587  return result

10006588                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
100065a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100065c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100065e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10006600    int32_t sub_10006600(int32_t* arg1, char* arg2, int32_t arg3)

10006600  int32_t ebx
10006600  int32_t var_4 = ebx
10006608  int32_t* ebp = *arg1
1000660c  int32_t edx_2
1000660c  int32_t esi_4
1000660c  
1000660c  if (ebp == 0)
10006653      label_10006653:
10006653      int32_t* eax_4 = j_sub_10039000(0xc)
1000665e      eax_4[2] = *arg1
10006661      *arg1 = eax_4
10006663      char* edi_1 = arg2
10006667      int32_t i = 0xffffffff
10006667      
1000666a      while (i != 0)
1000666a          bool cond:0_1 = 0 != *edi_1
1000666a          edi_1 = &edi_1[1]
1000666a          i -= 1
1000666a          
1000666a          if (not(cond:0_1))
1000666a              break
1000666a      
1000666f      int32_t eax_5 = j_sub_10038f90(not.d(i))
10006674      char* edi_2 = arg2
1000667a      int32_t i_1 = 0xffffffff
1000667f      *eax_4 = eax_5
1000667f      
10006681      while (i_1 != 0)
10006681          bool cond:1_1 = 0 != *edi_2
10006681          edi_2 = &edi_2[1]
10006681          i_1 -= 1
10006681          
10006681          if (not(cond:1_1))
10006681              break
10006681      
10006683      int32_t ecx_3 = not.d(i_1)
10006690      int32_t esi_3
10006690      int32_t edi_5
10006690      edi_5, esi_3 = __builtin_memcpy(dest: eax_5, src: edi_2 - ecx_3, n: ecx_3 u>> 2 << 2)
10006699      __builtin_memcpy(dest: edi_5, src: esi_3, n: ecx_3 & 3)
1000669b      esi_4 = arg3
1000669f      int32_t i_2 = 0xffffffff
100066a2      int32_t edi_6 = esi_4
100066a2      
100066a4      while (i_2 != 0)
100066a4          bool cond:2_1 = 0 != *edi_6
100066a4          edi_6 += 1
100066a4          i_2 -= 1
100066a4          
100066a4          if (not(cond:2_1))
100066a4              break
100066a4      
100066ae      edx_2 = j_sub_10038f90(not.d(i_2))
100066b3      eax_4[1] = edx_2
1000660c  else
1000660e      while (true)
1000660e          char* esi_1 = arg2
10006612          char* eax_1 = *ebp
10006615          int32_t eax_3
10006615          
10006615          while (true)
10006615              char edx = *eax_1
10006617              ebx.b = *esi_1
1000661b              bool c_1 = edx u< ebx.b
1000661b              
1000661d              if (edx == ebx.b)
10006621                  if (edx == 0)
10006639                      eax_3 = 0
1000663b                      break
1000663b                  
10006623                  edx = eax_1[1]
10006626                  ebx.b = esi_1[1]
1000662b                  c_1 = edx u< ebx.b
1000662b                  
1000662d                  if (edx == ebx.b)
1000662f                      eax_1 = &eax_1[2]
10006632                      esi_1 = &esi_1[2]
10006632                      
10006637                      if (edx != 0)
10006637                          continue
10006637                      
10006639                      eax_3 = 0
1000663b                      break
1000663b              
1000663d              bool c_2 = unimplemented  {sbb eax, eax}
1000663f              eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1000663f              break
1000663f          
10006644          if (eax_3 == 0)
100066de              j_sub_100390b0(ebp[1])
100066e3              esi_4 = arg3
100066e7              int32_t i_3 = 0xffffffff
100066ea              int32_t edi_11 = esi_4
100066ea              
100066ee              while (i_3 != 0)
100066ee                  bool cond:3_1 = 0 != *edi_11
100066ee                  edi_11 += 1
100066ee                  i_3 -= 1
100066ee                  
100066ee                  if (not(cond:3_1))
100066ee                      break
100066ee              
100066fb              edx_2 = j_sub_10038f90(not.d(i_3))
100066fd              ebp[1] = edx_2
10006700              break
10006700          
1000664a          ebp = ebp[2]
1000664a          
1000664f          if (ebp == 0)
1000664f              goto label_10006653
1000664f  
100066b6  int32_t edi_7 = esi_4
100066b8  int32_t i_4 = 0xffffffff
100066b8  
100066bd  while (i_4 != 0)
100066bd      bool cond:4_1 = 0 != *edi_7
100066bd      edi_7 += 1
100066bd      i_4 -= 1
100066bd      
100066bd      if (not(cond:4_1))
100066bd          break
100066bd  
100066bf  int32_t result = not.d(i_4)
100066cc  int32_t esi_6
100066cc  int32_t edi_10
100066cc  edi_10, esi_6 = __builtin_memcpy(dest: edx_2, src: edi_7 - result, n: result u>> 2 << 2)
100066d3  __builtin_memcpy(dest: edi_10, src: esi_6, n: result & 3)
100066d9  return result

10006702        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10006720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10006760    int32_t sub_10006760(int32_t* arg1, char* arg2)

10006764  int32_t ebx
10006764  int32_t var_4 = ebx
10006768  int32_t* edi = *arg1
10006768  
1000676c  if (edi != 0)
10006772      while (true)
10006772          char* eax = *edi
10006774          char* esi_1 = arg2
10006776          int32_t eax_2
10006776          
10006776          while (true)
10006776              char edx = *eax
10006778              ebx.b = *esi_1
1000677c              bool c_1 = edx u< ebx.b
1000677c              
1000677e              if (edx == ebx.b)
10006782                  if (edx == 0)
1000679a                      eax_2 = 0
1000679c                      break
1000679c                  
10006784                  edx = eax[1]
10006787                  ebx.b = esi_1[1]
1000678c                  c_1 = edx u< ebx.b
1000678c                  
1000678e                  if (edx == ebx.b)
10006790                      eax = &eax[2]
10006793                      esi_1 = &esi_1[2]
10006793                      
10006798                      if (edx != 0)
10006798                          continue
10006798                      
1000679a                      eax_2 = 0
1000679c                      break
1000679c              
1000679e              bool c_2 = unimplemented  {sbb eax, eax}
100067a0              eax_2 = sbb.d(sbb.d(eax, eax, c_1), 0xffffffff, c_2)
100067a0              break
100067a0          
100067a5          if (eax_2 == 0)
100067bc              return edi[1]
100067bc          
100067a7          edi = edi[2]
100067a7          
100067ac          if (edi == 0)
100067ac              break
100067ac  
100067b4  return 0

100067bd                                                                                         90 90 90                               ...
100067c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100067e0    char* sub_100067e0(int32_t* arg1, char* arg2, float* arg3)

100067f1  char* result = j_sub_10006760(arg1, arg2)
100067f1  
100067fb  if (result == 0)
10006800      return result
10006800  
10006809  int32_t var_10
10006809  int32_t* var_24_1 = &var_10
1000680e  int32_t var_18
1000680e  int32_t* var_28_1 = &var_18
1000680f  int32_t s
1000680f  int32_t* var_2c = &s
10006836  __builtin_memset(&s, c: 0, n: 0x18)
10006846  sub_1004433f(result, "%lf %lf %lf")
10006855  *arg3 = fconvert.s(fconvert.t(s.q))
1000685b  arg3[1] = fconvert.s(fconvert.t(var_18.q))
10006862  arg3[2] = fconvert.s(fconvert.t(var_10.q))
1000686d  return 1

1000686e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10006880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100068a0    long double sub_100068a0(int32_t* arg1, char* arg2)

100068aa  char* eax = j_sub_10006760(arg1, arg2)
100068aa  
100068b4  if (eax != 0)
100068c4      return sub_10044373(eax)
100068c4  
100068bc  return fconvert.t(0f)

100068c5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

100068e0    int32_t sub_100068e0(int32_t* arg1, char* arg2)

100068ea  char* result = j_sub_10006760(arg1, arg2)
100068ea  
100068f4  if (result != 0)
10006900      return sub_10044455(result)
10006900  
100068f6  return result

10006901     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

10006920    void sub_10006920(int32_t* arg1)

10006921  int32_t* i_1 = arg1
10006921  
10006927  if (i_1 != 0)
10006973      int32_t* i
10006973      
10006973      do
1000692c          int32_t* j_1 = *i_1
1000692e          i = i_1[1]
1000692e          
10006933          if (j_1 != 0)
10006964              int32_t* j
10006964              
10006964              do
10006935                  void* eax_1 = *j_1
10006937                  j = j_1[2]
10006937                  
1000693c                  if (eax_1 != 0)
1000693f                      j_sub_100390b0(eax_1)
1000693f                  
10006947                  void* eax_2 = j_1[1]
10006947                  
1000694c                  if (eax_2 != 0)
1000694f                      j_sub_100390b0(eax_2)
1000694f                  
10006958                  j_sub_100390b0(j_1)
10006960                  j_1 = j
10006964              while (j != 0)
10006964          
10006967          j_sub_100390b0(i_1)
1000696f          i_1 = i
10006973      while (i != 0)

1000697a                                                                                90 90 90 90 90 90                            ......
10006980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100069a0    int32_t* sub_100069a0()

100069b1  int32_t* ebx
100069b1  int32_t* var_43c = ebx
100069bc  void* eax = j_sub_10040380(data_100674e4, data_100674e0, "entdata")
100069c6  j_sub_1003ffb0(eax, 0xc)
100069cf  int32_t* result = nullptr
100069dd  char var_430[0x400]
100069dd  
100069dd  if (j_sub_1003f2d0(eax, &var_430) != 0)
100069e3      while (true)
100069e3          void* esi_1 = &data_1005ab58
100069e8          char (* eax_2)[0x400] = &var_430
100069ec          int32_t eax_4
100069ec          
100069ec          while (true)
100069ec              char edx_1 = *eax_2
100069ee              ebx.b = *esi_1
100069f2              bool c_1 = edx_1 u< ebx.b
100069f2              
100069f4              if (edx_1 == ebx.b)
100069f8                  if (edx_1 == 0)
10006a10                      eax_4 = 0
10006a12                      break
10006a12                  
100069fa                  edx_1 = (*eax_2)[1]
100069fd                  ebx.b = *(esi_1 + 1)
10006a02                  c_1 = edx_1 u< ebx.b
10006a02                  
10006a04                  if (edx_1 == ebx.b)
10006a06                      eax_2 = &(*eax_2)[2]
10006a09                      esi_1 += 2
10006a09                      
10006a0e                      if (edx_1 != 0)
10006a0e                          continue
10006a0e                      
10006a10                      eax_4 = 0
10006a12                      break
10006a12              
10006a14              bool c_2 = unimplemented  {sbb eax, eax}
10006a16              eax_4 = sbb.d(sbb.d(eax_2, eax_2, c_1), 0xffffffff, c_2)
10006a16              break
10006a16          
10006a1b          int32_t* result_1
10006a1b          
10006a1b          if (eax_4 != 0)
10006bd3              char (* var_44c_5)[0x400] = &var_430
10006bda              j_sub_1003e2c0(eax, "invalid %s\n")
10006bdf              result_1 = result
10006bf3              label_10006bf3:
10006bf3              j_sub_10006920(result_1)
10006bf9              j_sub_10040470(eax)
10006c0d              return 0
10006c0d          
10006a23          int32_t* result_2 = j_sub_10039000(8)
10006a2c          result_2[1] = result
10006a43          char edx_2
10006a43          
10006a43          if (j_sub_1003f2d0(eax, &var_430) != 0)
10006a49              while (true)
10006a49                  void* esi_2 = &data_1005ab54
10006a4e                  char (* eax_6)[0x400] = &var_430
10006a52                  int32_t eax_8
10006a52                  
10006a52                  while (true)
10006a52                      edx_2 = *eax_6
10006a54                      ebx.b = *esi_2
10006a58                      bool c_3 = edx_2 u< ebx.b
10006a58                      
10006a5a                      if (edx_2 == ebx.b)
10006a5e                          if (edx_2 == 0)
10006a76                              eax_8 = 0
10006a78                              break
10006a78                          
10006a60                          edx_2 = (*eax_6)[1]
10006a63                          ebx.b = *(esi_2 + 1)
10006a68                          c_3 = edx_2 u< ebx.b
10006a68                          
10006a6a                          if (edx_2 == ebx.b)
10006a6c                              eax_6 = &(*eax_6)[2]
10006a6f                              esi_2 += 2
10006a6f                              
10006a74                              if (edx_2 != 0)
10006a74                                  continue
10006a74                              
10006a76                              eax_8 = 0
10006a78                              break
10006a78                      
10006a7a                      bool c_4 = unimplemented  {sbb eax, eax}
10006a7c                      eax_8 = sbb.d(sbb.d(eax_6, eax_6, c_3), 0xffffffff, c_4)
10006a7c                      break
10006a7c                  
10006a81                  if (eax_8 == 0)
10006a81                      break
10006a81                  
10006a89                  int32_t* eax_9 = j_sub_10039000(0xc)
10006a99                  eax_9[2] = *result_2
10006a9c                  *result_2 = eax_9
10006aa6                  int32_t var_30
10006aa6                  
10006aa6                  if (var_30 != 1)
10006be6                      char (* var_44c_6)[0x400] = &var_430
10006bed                      j_sub_1003e2c0(eax, "invalid %s\n")
10006bf2                      result_1 = result_2
10006bf2                      goto label_10006bf3
10006bf2                  
10006ab1                  j_sub_1003fcb0(&var_430)
10006ab6                  char (* edi)[0x400] = &var_430
10006aba                  int32_t i = 0xffffffff
10006aba                  
10006abf                  while (i != 0)
10006abf                      bool cond:0_1 = 0 != *edi
10006abf                      edi = &(*edi)[1]
10006abf                      i -= 1
10006abf                      
10006abf                      if (not(cond:0_1))
10006abf                          break
10006abf                  
10006ac4                  int32_t eax_11 = j_sub_10038f90(not.d(i))
10006acb                  char (* edi_1)[0x400] = &var_430
10006acf                  int32_t i_1 = 0xffffffff
10006ad4                  *eax_9 = eax_11
10006ad4                  
10006ad6                  while (i_1 != 0)
10006ad6                      bool cond:1_1 = 0 != *edi_1
10006ad6                      edi_1 = &(*edi_1)[1]
10006ad6                      i_1 -= 1
10006ad6                      
10006ad6                      if (not(cond:1_1))
10006ad6                          break
10006ad6                  
10006ad8                  int32_t ecx_4 = not.d(i_1)
10006ae5                  int32_t esi_5
10006ae5                  int32_t edi_4
10006ae5                  edi_4, esi_5 = __builtin_memcpy(dest: eax_11, src: edi_1 - ecx_4, 
10006ae5                      n: ecx_4 u>> 2 << 2)
10006aec                  __builtin_memcpy(dest: edi_4, src: esi_5, n: ecx_4 & 3)
10006aec                  
10006b02                  if (j_sub_1003f5c0(eax, 1, 0, &var_430) == 0)
10006c13                      j_sub_10006920(result_2)
10006c19                      j_sub_10040470(eax)
10006c2d                      return 0
10006c2d                  
10006b0d                  j_sub_1003fcb0(&var_430)
10006b12                  char (* edi_5)[0x400] = &var_430
10006b16                  int32_t i_2 = 0xffffffff
10006b16                  
10006b1b                  while (i_2 != 0)
10006b1b                      bool cond:2_1 = 0 != *edi_5
10006b1b                      edi_5 = &(*edi_5)[1]
10006b1b                      i_2 -= 1
10006b1b                      
10006b1b                      if (not(cond:2_1))
10006b1b                          break
10006b1b                  
10006b20                  int32_t eax_14 = j_sub_10038f90(not.d(i_2))
10006b27                  char (* edi_6)[0x400] = &var_430
10006b2b                  int32_t i_3 = 0xffffffff
10006b30                  eax_9[1] = eax_14
10006b30                  
10006b33                  while (i_3 != 0)
10006b33                      bool cond:3_1 = 0 != *edi_6
10006b33                      edi_6 = &(*edi_6)[1]
10006b33                      i_3 -= 1
10006b33                      
10006b33                      if (not(cond:3_1))
10006b33                          break
10006b33                  
10006b35                  int32_t ecx_9 = not.d(i_3)
10006b42                  int32_t esi_7
10006b42                  int32_t edi_9
10006b42                  edi_9, esi_7 = __builtin_memcpy(dest: eax_14, src: edi_6 - ecx_9, 
10006b42                      n: ecx_9 u>> 2 << 2)
10006b49                  __builtin_memcpy(dest: edi_9, src: esi_7, n: ecx_9 & 3)
10006b49                  
10006b5b                  if (j_sub_1003f2d0(eax, &var_430) == 0)
10006b5b                      break
10006b5b          
10006b61          void* esi_8 = &data_1005ab54
10006b66          char (* eax_17)[0x400] = &var_430
10006b6a          int32_t eax_19
10006b6a          
10006b6a          while (true)
10006b6a              edx_2 = *eax_17
10006b6c              ebx.b = *esi_8
10006b70              bool c_5 = edx_2 u< ebx.b
10006b70              
10006b72              if (edx_2 == ebx.b)
10006b76                  if (edx_2 == 0)
10006b8e                      eax_19 = 0
10006b90                      break
10006b90                  
10006b78                  edx_2 = (*eax_17)[1]
10006b7b                  ebx.b = *(esi_8 + 1)
10006b80                  c_5 = edx_2 u< ebx.b
10006b80                  
10006b82                  if (edx_2 == ebx.b)
10006b84                      eax_17 = &(*eax_17)[2]
10006b87                      esi_8 += 2
10006b87                      
10006b8c                      if (edx_2 != 0)
10006b8c                          continue
10006b8c                      
10006b8e                      eax_19 = 0
10006b90                      break
10006b90              
10006b92              bool c_6 = unimplemented  {sbb eax, eax}
10006b94              eax_19 = sbb.d(sbb.d(eax_17, eax_17, c_5), 0xffffffff, c_6)
10006b94              break
10006b94          
10006b99          if (eax_19 != 0)
10006c34              j_sub_1003e2c0(eax, "missing }\n")
10006c3e              j_sub_10006920(result_2)
10006c44              j_sub_10040470(eax)
10006c58              return 0
10006c58          
10006baa          result = result_2
10006baa          
10006bb3          if (j_sub_1003f2d0(eax, &var_430) == 0)
10006bb3              break
10006bb3  
10006bba  j_sub_10040470(eax)
10006bce  return result

10006c59                                                                             90 90 90 90 90 90 90                           .......
10006c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10006d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10006d10    int32_t sub_10006d10(int32_t arg1, void* arg2, float* arg3, int32_t* arg4, int32_t* arg5)

10006d1f  if (arg1 s< 0)
10006d2a      return 0
10006d2a  
10006d2b  int32_t edx = data_10067504
10006d38  int32_t ecx_1 = arg1 * 7
10006d3d  void* esi = edx + (ecx_1 << 2)
10006d40  int32_t ecx_2 = data_100674f4
10006d46  int32_t eax_2 = *(edx + (ecx_1 << 2)) * 5
10006d4d  int32_t edx_1 = *(ecx_2 + (eax_2 << 2) + 0x10)
10006d51  float* eax_3 = ecx_2 + (eax_2 << 2)
10006d5b  float* ebp
10006d5b  long double x87_r6_1
10006d5b  long double x87_r7_1
10006d5b  
10006d5b  if (edx_1 s>= 3)
10006d80      ebp = arg3
10006d8a      x87_r7_1 = fconvert.t(*(arg2 + 8)) * fconvert.t(eax_3[2])
10006d8a          + fconvert.t(*(arg2 + 4)) * fconvert.t(eax_3[1])
10006d8a          + fconvert.t(*eax_3) * fconvert.t(*arg2) - fconvert.t(eax_3[3])
10006da1      x87_r6_1 = fconvert.t(arg3[2]) * fconvert.t(eax_3[2])
10006da1          + fconvert.t(arg3[1]) * fconvert.t(eax_3[1])
10006da1          + fconvert.t(*eax_3) * fconvert.t(*arg3) - fconvert.t(eax_3[3])
10006d5b  else
10006d60      ebp = arg3
10006d64      x87_r7_1 = fconvert.t(*(arg2 + (edx_1 << 2))) - fconvert.t(eax_3[3])
10006d6b      x87_r6_1 = fconvert.t(ebp[edx_1]) - fconvert.t(eax_3[3])
10006d6b  
10006da6  long double temp0 = fconvert.t(0f)
10006da6  x87_r7_1 - temp0
10006dac  eax_3.w = (x87_r7_1 < temp0 ? 1 : 0) << 8
10006dac      | (is_unordered.t(x87_r7_1, temp0) ? 1 : 0) << 0xa
10006dac      | (x87_r7_1 == temp0 ? 1 : 0) << 0xe | 0x3000
10006db1  int32_t edx_3
10006db1  
10006db1  if ((eax_3:1.b & 1) == 0)
10006dbe      arg1 = 0
10006dc2      edx_3 = 0
10006db1  else
10006db3      edx_3 = 1
10006db8      arg1 = 1
10006db8  
10006dc4  long double temp1 = fconvert.t(0f)
10006dc4  x87_r6_1 - temp1
10006dca  eax_3.w = (x87_r6_1 < temp1 ? 1 : 0) << 8
10006dca      | (is_unordered.t(x87_r6_1, temp1) ? 1 : 0) << 0xa
10006dca      | (x87_r6_1 == temp1 ? 1 : 0) << 0xe | 0x3000
10006dcf  int32_t eax_4
10006dcf  
10006dcf  if ((eax_3:1.b & 1) == 0)
10006dd8      eax_4 = 0
10006dcf  else
10006dd1      eax_4 = 1
10006dd1  
10006ddc  if (edx_3 == eax_4)
10006e02      return j_sub_10006d10(*(esi + (edx_3 << 2) + 4), arg2, ebp, arg4, arg5)
10006e02  
10006e24  float var_c =
10006e24      fconvert.s((fconvert.t(*ebp) - fconvert.t(*arg2)) * x87_r6_1 + fconvert.t(*arg2))
10006e33  float var_8 = fconvert.s((fconvert.t(ebp[1]) - fconvert.t(*(arg2 + 4))) * x87_r6_1
10006e33      + fconvert.t(*(arg2 + 4)))
10006e42  float var_4 = fconvert.s((fconvert.t(ebp[2]) - fconvert.t(*(arg2 + 8))) * x87_r6_1
10006e42      + fconvert.t(*(arg2 + 8)))
10006e4d  int32_t eax_10
10006e4d  int16_t x87control
10006e4d  eax_10, x87control = j_sub_10006d10(*(esi + (edx_3 << 2) + 4), arg2, &var_c, arg4, arg5)
10006e4d  
10006e57  if (eax_10 != 0)
10006e65      return 1
10006e65  
10006e6e  int32_t eax_12
10006e6e  eax_12.w = *(esi + 0x18)
10006e72  int32_t var_14 = 0
10006e78  int32_t ebx
10006e78  ebx.w = *(esi + 0x1a)
10006e8a  arg2 = data_10067514 + eax_12 * 0x14
10006e8e  int16_t* edi = data_10067558 + (eax_12 << 3)
10006e8e  
10006e91  if (ebx s> 0)
10006f30      bool cond:2_1
10006f30      
10006f30      do
10006ea6          int32_t edx_7 = sx.d(*(arg2 + 0xa)) * 0x13
10006ea9          int32_t eax_14 = data_1006750c
10006eba          float* esi_1 = eax_14 + (edx_7 << 2)
10006ec7          long double x87_r7_13 =
10006ec7              fconvert.t(var_4) * fconvert.t(*(eax_14 + (edx_7 << 2) + 8))
10006ec7              + fconvert.t(var_8) * fconvert.t(*(eax_14 + (edx_7 << 2) + 4))
10006ec7              + fconvert.t(var_c) * fconvert.t(*esi_1) + fconvert.t(esi_1[3])
10006eca          int32_t eax_15
10006eca          int16_t x87control_1
10006eca          eax_15, x87control_1 = __ftol(x87control, x87_r7_13)
10006eed          int32_t eax_16
10006eed          eax_16, x87control = __ftol(x87control_1, 
10006eed              fconvert.t(var_4) * fconvert.t(esi_1[6])
10006eed                  + fconvert.t(var_8) * fconvert.t(esi_1[5])
10006eed                  + fconvert.t(var_c) * fconvert.t(esi_1[4]) + fconvert.t(esi_1[7]))
10006ef2          int32_t ecx_9 = sx.d(*edi)
10006ef2          
10006ef7          if (eax_15 s>= ecx_9)
10006ef9              int32_t edx_8 = sx.d(edi[1])
10006ef9              
10006eff              if (eax_16 s>= edx_8)
10006f01                  int32_t eax_17 = eax_16 - edx_8
10006f03                  int32_t ebp_2 = eax_15 - ecx_9
10006f03                  
10006f15                  if (ebp_2 s<= sx.d(edi[2]) && eax_17 s<= sx.d(edi[3]))
10006f72                      int32_t esi_4 = 0
10006f74                      int32_t edx_12 = *(arg2 + 0x10)
10006f74                      
10006f79                      if (edx_12 s< 0)
10006f7f                          float ecx_13 = var_c
10006f88                          *arg5 = 0
10006f8a                          arg5[1] = 0
10006f8d                          arg5[2] = 0
10006f96                          *arg4 = ecx_13
10006f9c                          arg4[1] = var_8
10006f9f                          arg4[2] = var_4
10006fab                          return 1
10006fab                      
10006fb3                      int32_t ebx_3 = (sx.d(edi[2]) s>> 4) + 1
10006fb4                      int32_t ebp_3 = 0
10006fcf                      int32_t edx_15 = 0
10006fd1                      char* ecx_19 = ((ebp_2 s>> 4) * ebx_3 + (eax_17 s>> 4)) * 3 + edx_12
10006fd1                          + data_100674dc
10006fd3                      void* eax_28 = nullptr
10006fd5                      arg3 = nullptr
10006fd5                      
10006fe2                      while (*(arg2 + eax_28 + 0xc) != 0xff)
10006fe6                          int32_t eax_29
10006fe6                          eax_29.b = *ecx_19
10006ff1                          int32_t eax_30
10006ff1                          eax_30.b = ecx_19[1]
10006ff4                          edx_15 += eax_29 * 0x108
10007000                          int32_t eax_31
10007000                          eax_31.b = ecx_19[2]
10007003                          esi_4 += eax_30 * 0x108
10007015                          ebp_3 += eax_31 * 0x108
10007020                          ecx_19 = &ecx_19[((sx.d(edi[3]) s>> 4) + 1) * ebx_3 * 3]
10007027                          eax_28 = arg3 + 1
1000702b                          arg3 = eax_28
1000702b                          
1000702f                          if (eax_28 s>= 4)
1000702f                              break
1000702f                      
10007042                      *arg5 = edx_15 s>> 8
10007044                      float edx_17 = var_c
10007048                      arg5[1] = esi_4 s>> 8
1000704b                      arg5[2] = ebp_3 s>> 8
10007055                      *arg4 = edx_17
1000705b                      arg4[1] = var_8
1000705e                      arg4[2] = var_4
1000706a                      return 1
1000706a          
10006f23          edi = &edi[4]
10006f26          cond:2_1 = var_14 + 1 s< ebx
10006f28          var_14 += 1
10006f2c          arg2 += 0x14
10006f30      while (cond:2_1)
10006f3a      ebp = arg3
10006f3a  
10006f50  int32_t eax_21
10006f50  eax_21.b = arg1 == 0
10006f6d  return j_sub_10006d10(*(esi + (eax_21 << 2) + 4), &var_c, ebp, arg4, arg5)

1000706b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10007080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100070a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100070c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100070e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10007150    int32_t sub_10007150(void* arg1, float* arg2, int32_t* arg3, int32_t* arg4, int32_t* arg5, int32_t* arg6)

10007163  int32_t var_c
10007163  
10007163  if (data_100674c0 != 0 && data_100674dc != 0
10007163          && j_sub_10006d10(*(data_100674c8 + 0x24), arg1, arg2, arg3, &var_c) != 0)
1000719b      *arg4 = var_c
100071a5      int32_t var_8
100071a5      *arg5 = var_8
100071b0      int32_t var_4
100071b0      *arg6 = var_4
100071b5      return 1
100071b5  
100071bb  return 0

100071bc                                                                                      90 90 90 90                              ....
100071c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100071e0    void sub_100071e0()

100071e0  int32_t ebp
100071e0  int32_t var_4 = ebp
100071e9  int32_t eax = data_10067558
100071ee  int32_t __saved_ebx_1
100071ee  int32_t __saved_ebx = __saved_ebx_1
100071f0  int32_t __saved_esi_1
100071f0  int32_t __saved_esi = __saved_esi_1
100071f3  int32_t __saved_edi_1
100071f3  int32_t __saved_edi = __saved_edi_1
100071f3  
100071f4  if (eax != 0)
100071f6      int32_t var_54_1 = eax
100071f7      j_sub_100390b0()
100071f7  
1000720b  int32_t var_54_2 = data_10067510 << 3
10007211  data_10067558 = j_sub_10039000()
1000721e  int32_t var_30 = 0
1000721e  
10007228  if (data_10067510 s> 0)
1000722e      int32_t edx_1 = 0
10007230      int32_t var_38_1 = 4
10007238      int32_t var_3c_1 = 0
10007238      
10007242      while (true)
10007242          int32_t ecx_1 = data_10067514
10007248          int32_t var_24_1 = 0x47c34f80
10007250          int32_t var_28 = 0x47c34f80
10007258          int32_t var_1c_1 = 0xc7c34f80
10007260          int32_t eax_4 = sx.d(*(edx_1 + ecx_1 + 0xa))
10007265          int32_t var_20 = 0xc7c34f80
10007279          void* eax_6 = data_1006750c + eax_4 * 0x4c
10007280          int32_t eax_7 = sx.d(*(edx_1 + ecx_1 + 8))
10007280          
10007287          if (eax_7 s> 0)
10007297              int32_t edi = data_1006751c
1000729d              int32_t ebx = data_100674fc
100072a3              int32_t* ebp_1 = data_10067534 + (*(edx_1 + ecx_1 + 4) << 2)
100072a6              int32_t var_34_1 = eax_7
10007325              bool cond:2_1
10007325              
10007325              do
100072aa                  int32_t ecx_3 = *ebp_1
100072af                  int32_t eax_8
100072af                  
100072af                  if (ecx_3 s< 0)
100072c2                      eax_8.w = *(edi - (ecx_3 << 2) + 2)
100072af                  else
100072b3                      eax_8.w = *(edi + (ecx_3 << 2))
100072b3                  
100072cd                  void* ecx_6 = eax_6 + 4
100072d0                  int32_t i = 0
100072d2                  float* esi_2 = ebx + eax_8 * 0xc
100072d2                  
10007317                  do
100072e9                      long double x87_r7_5 = fconvert.t(*(ecx_6 + 4)) * fconvert.t(esi_2[2])
100072e9                          + fconvert.t(*(ecx_6 - 4)) * fconvert.t(*esi_2)
100072e9                          + fconvert.t(*ecx_6) * fconvert.t(esi_2[1])
100072e9                          + fconvert.t(*(ecx_6 + 8))
100072ec                      long double temp0_1 = fconvert.t(*(&var_28 + i))
100072ec                      x87_r7_5 - temp0_1
100072f0                      int32_t eax_9
100072f0                      eax_9.w = (x87_r7_5 < temp0_1 ? 1 : 0) << 8
100072f0                          | (is_unordered.t(x87_r7_5, temp0_1) ? 1 : 0) << 0xa
100072f0                          | (x87_r7_5 == temp0_1 ? 1 : 0) << 0xe | 0x3800
100072f0                      
100072f5                      if ((eax_9:1.b & 1) != 0)
100072f7                          *(&var_28 + i) = fconvert.s(x87_r7_5)
100072f7                      
100072fb                      long double temp1_1 = fconvert.t(*(&var_20 + i))
100072fb                      x87_r7_5 - temp1_1
100072ff                      eax_9.w = (x87_r7_5 < temp1_1 ? 1 : 0) << 8
100072ff                          | (is_unordered.t(x87_r7_5, temp1_1) ? 1 : 0) << 0xa
100072ff                          | (x87_r7_5 == temp1_1 ? 1 : 0) << 0xe | 0x3800
100072ff                      
10007304                      if ((eax_9:1.b & 0x41) == 0)
10007306                          *(&var_20 + i) = fconvert.s(x87_r7_5)
10007306                      
1000730e                      i += 4
10007311                      ecx_6 += 0x10
10007317                  while (i s< 8)
10007317                  
1000731d                  ebp_1 = &ebp_1[1]
10007320                  cond:2_1 = var_34_1 != 1
10007321                  var_34_1 -= 1
10007325              while (cond:2_1)
10007325          
10007327          int32_t edi_1 = var_38_1
10007327          
1000739c          for (int32_t i_1 = 0; i_1 s< 8; )
1000733d              int16_t x87control_1
1000733d              long double st0_1
1000733d              st0_1, x87control_1 = sub_100445e9(fconvert.d(fconvert.t(*(&var_28 + i_1))
1000733d                  * fconvert.t(0.0625f)))
10007342              int32_t eax_12 = __ftol(x87control_1, st0_1)
1000734b              long double x87_r7_10 = fconvert.t(*(&var_20 + i_1)) * fconvert.t(0.0625f)
10007351              void var_18
10007351              *(&var_18 + i_1) = eax_12
10007358              int16_t x87control_2
10007358              long double st0_2
10007358              st0_2, x87control_2 = sub_1004451a(fconvert.d(x87_r7_10))
10007360              int32_t eax_13 = __ftol(x87control_2, st0_2)
10007365              int32_t ecx_7 = data_10067558
1000736b              void var_10
1000736b              *(&var_10 + i_1) = eax_13
1000736f              eax_13.w = *(&var_18 + i_1)
10007374              i_1 += 4
10007379              edi_1 += 2
1000737f              *(edi_1 + ecx_7 - 6) = (eax_13 << 4).w
10007384              void var_14
10007384              int32_t edx_6
10007384              edx_6.w = *(&var_14 + i_1)
10007389              edx_6.w -= eax_13.w
10007394              *(edi_1 + data_10067558 - 2) = (edx_6 << 4).w
10007394          
100073b7          bool cond:1_1 = var_30 + 1 s< data_10067510
100073b9          var_30 += 1
100073bd          var_3c_1 += 0x14
100073c1          var_38_1 += 8
100073c1          
100073c5          if (not(cond:1_1))
100073c5              break
100073c5          
1000723e          edx_1 = var_3c_1
1000723e  
100071ef  var_4

100073d3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
100073e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10007460    int32_t sub_10007460()

10007460  int32_t* ecx
10007460  int32_t* var_4_4 = ecx
10007468  int32_t ebp = 0
1000746e  int32_t var_4 = 0
10007472  int16_t top
10007472  
10007472  if (data_10067508 s> 0)
100074d1      bool cond:1_1
100074d1      
100074d1      do
10007479          int32_t i_8 = 8
1000747e          int32_t* esi_1 = data_1006750c + ebp
10007481          int32_t* edi_1 = esi_1
10007494          int32_t i
10007494          
10007494          do
10007486              j_sub_100438b0(*edi_1)
1000748b              *edi_1 = fconvert.s(unimplemented  {fstp dword [edi], st0})
1000748b              unimplemented  {fstp dword [edi], st0}
1000748b              top += 1
10007490              edi_1 = &edi_1[1]
10007493              i = i_8
10007493              i_8 -= 1
10007494          while (i != 1)
1000749f          esi_1[8] = j_sub_10043870(esi_1[8])
100074a6          int32_t eax_4 = j_sub_10043870(esi_1[9])
100074ab          int32_t ecx_2 = esi_1[0x12]
100074ae          esi_1[9] = eax_4
100074b7          esi_1[0x12] = j_sub_10043870(ecx_2)
100074c8          ebp += 0x4c
100074cb          cond:1_1 = var_4 + 1 s< data_10067508
100074cd          var_4 += 1
100074d1      while (cond:1_1)
100074d1  
100074d3  int32_t* eax_9 = data_100674d4
100074d8  int32_t ebp_1 = 0
100074da  int32_t edi_2 = 0
100074da  
100074de  if (eax_9 != 0)
100074f1      *data_100674d4 = j_sub_10043870(*eax_9)
100074f3      eax_9 = data_100674d4
100074f8      edi_2 = *eax_9
100074f8  
100074fa  int32_t esi_2 = 0
100074fa  
100074fe  if (edi_2 s> 0)
10007517      while (true)
10007517          *(data_100674d4 + (esi_2 << 3) + 4) = j_sub_10043870(eax_9[esi_2 * 2 + 1])
10007534          data_100674d4[esi_2 * 2 + 2] = j_sub_10043870(*(data_100674d4 + (esi_2 << 3) + 8))
10007538          esi_2 += 1
10007538          
1000753b          if (esi_2 s>= edi_2)
1000753b              break
1000753b          
10007502          eax_9 = data_100674d4
10007502  
10007542  int32_t var_4_1 = 0
10007542  
10007548  if (data_100674f0 s> 0)
1000759c      bool cond:4_1
1000759c      
1000759c      do
10007550          int32_t i_9 = 3
10007555          int32_t* esi_3 = data_100674f4 + ebp_1
10007558          int32_t* edi_3 = esi_3
1000756b          int32_t i_1
1000756b          
1000756b          do
1000755d              j_sub_100438b0(*edi_3)
10007562              *edi_3 = fconvert.s(unimplemented  {fstp dword [edi], st0})
10007562              unimplemented  {fstp dword [edi], st0}
10007562              top += 1
10007567              edi_3 = &edi_3[1]
1000756a              i_1 = i_9
1000756a              i_9 -= 1
1000756b          while (i_1 != 1)
10007571          j_sub_100438b0(esi_3[3])
10007576          int32_t edx_6 = esi_3[4]
10007579          esi_3[3] = fconvert.s(unimplemented  {fstp dword [esi+0xc], st0})
10007579          unimplemented  {fstp dword [esi+0xc], st0}
10007579          top += 1
10007582          esi_3[4] = j_sub_10043870(edx_6)
10007593          ebp_1 += 0x14
10007596          cond:4_1 = var_4_1 + 1 s< data_100674f0
10007598          var_4_1 += 1
1000759c      while (cond:4_1)
1000759c  
100075a3  int32_t ebp_2 = 0
100075a7  int32_t var_4_2 = 0
100075a7  
100075ab  if (data_10067500 s> 0)
1000763d      bool cond:5_1
1000763d      
1000763d      do
100075b1          int32_t* eax_19 = data_10067504
100075b9          void* esi_4 = eax_19 + ebp_2
100075bd          int32_t eax_20 = j_sub_10043870(*(eax_19 + ebp_2))
100075c2          int32_t edx_7 = *(esi_4 + 4)
100075c5          *esi_4 = eax_20
100075cd          *(esi_4 + 4) = j_sub_10043870(edx_7)
100075d4          int32_t eax_23
100075d4          int32_t ecx_6
100075d4          eax_23, ecx_6 = j_sub_10043870(*(esi_4 + 8))
100075dc          *(esi_4 + 8) = eax_23
100075df          void* edi_4 = esi_4 + 0x12
100075e2          int32_t i_10 = 3
10007608          int32_t eax_25
10007608          int32_t i_2
10007608          
10007608          do
100075e7              ecx_6.w = *(edi_4 - 6)
100075ec              int16_t eax_24
100075ec              int32_t edx_8
100075ec              eax_24, edx_8 = j_sub_10043830(ecx_6)
100075f1              *(edi_4 - 6) = eax_24
100075f5              edx_8.w = *edi_4
100075f9              eax_25, ecx_6 = j_sub_10043830(edx_8)
100075fe              *edi_4 = eax_25.w
10007604              edi_4 += 2
10007607              i_2 = i_10
10007607              i_10 -= 1
10007608          while (i_2 != 1)
1000760a          eax_25.w = *(esi_4 + 0x18)
1000760f          int16_t eax_26
1000760f          int32_t ecx_7
1000760f          eax_26, ecx_7 = j_sub_10043830(eax_25)
10007614          ecx_7.w = *(esi_4 + 0x1a)
10007618          *(esi_4 + 0x18) = eax_26
10007622          *(esi_4 + 0x1a) = j_sub_10043830(ecx_7)
10007634          ebp_2 += 0x1c
10007637          cond:5_1 = var_4_2 + 1 s< data_10067500
10007639          var_4_2 += 1
1000763d      while (cond:5_1)
1000763d  
10007648  int32_t ebp_3 = 0
1000764c  int32_t var_4_3 = 0
1000764c  
10007650  if (data_100674e8 s> 0)
10007703      bool cond:6_1
10007703      
10007703      do
10007656          int32_t* edx_9 = data_100674ec
1000765f          void* esi_5 = edx_9 + ebp_3
10007663          int32_t eax_32
10007663          int32_t ecx_8
10007663          eax_32, ecx_8 = j_sub_10043870(*(edx_9 + ebp_3))
10007668          ecx_8.w = *(esi_5 + 4)
1000766c          *esi_5 = eax_32
1000766f          int16_t eax_33
1000766f          int32_t edx_10
1000766f          eax_33, edx_10 = j_sub_10043830(ecx_8)
10007674          edx_10.w = *(esi_5 + 6)
10007678          *(esi_5 + 4) = eax_33
10007685          *(esi_5 + 6) = j_sub_10043830(edx_10).w
10007689          void* edi_5 = esi_5 + 0xe
1000768c          int32_t i_11 = 3
100076b2          int32_t edx_11
100076b2          int32_t i_3
100076b2          
100076b2          do
10007691              int32_t eax_34
10007691              eax_34.w = *(edi_5 - 6)
10007696              int16_t eax_35
10007696              int32_t ecx_9
10007696              eax_35, ecx_9 = j_sub_10043830(eax_34)
1000769b              *(edi_5 - 6) = eax_35
1000769f              ecx_9.w = *edi_5
100076a3              eax_34, edx_11 = j_sub_10043830(ecx_9)
100076a8              *edi_5 = eax_34.w
100076ae              edi_5 += 2
100076b1              i_3 = i_11
100076b1              i_11 -= 1
100076b2          while (i_3 != 1)
100076b4          edx_11.w = *(esi_5 + 0x14)
100076be          *(esi_5 + 0x14) = j_sub_10043830(edx_11).w
100076c2          int32_t eax_36
100076c2          eax_36.w = *(esi_5 + 0x16)
100076c7          int16_t eax_37
100076c7          int32_t ecx_10
100076c7          eax_37, ecx_10 = j_sub_10043830(eax_36)
100076cc          ecx_10.w = *(esi_5 + 0x18)
100076d0          *(esi_5 + 0x16) = eax_37
100076d5          int16_t eax_38
100076d5          int32_t edx_12
100076d5          eax_38, edx_12 = j_sub_10043830(ecx_10)
100076da          edx_12.w = *(esi_5 + 0x1a)
100076de          *(esi_5 + 0x18) = eax_38
100076e8          *(esi_5 + 0x1a) = j_sub_10043830(edx_12)
100076fa          ebp_3 += 0x1c
100076fd          cond:6_1 = var_4_3 + 1 s< data_100674e8
100076ff          var_4_3 += 1
10007703      while (cond:6_1)
10007703  
1000770e  int32_t i_4 = 0
1000770e  
10007712  if (data_10067528 s> 0)
10007738      do
10007719          ecx.w = *(data_1006752c + (i_4 << 1))
1000771e          int16_t eax_44
1000771e          eax_44, ecx = j_sub_10043830(ecx)
1000772c          *(data_1006752c + (i_4 << 1)) = eax_44
10007735          i_4 += 1
10007738      while (i_4 s< data_10067528)
10007738  
1000773f  int32_t i_5 = 0
1000773f  
10007743  if (data_10067540 s> 0)
10007784      do
1000774a          ecx.w = *(data_10067544 + (i_5 << 2))
1000774f          int16_t eax_48
1000774f          int32_t ecx_11
1000774f          eax_48, ecx_11 = j_sub_10043830(ecx)
1000775a          *(data_10067544 + (i_5 << 2)) = eax_48
10007763          ecx_11.w = *(data_10067544 + (i_5 << 2) + 2)
10007769          int16_t eax_50
10007769          eax_50, ecx = j_sub_10043830(ecx_11)
10007777          *(data_10067544 + (i_5 << 2) + 2) = eax_50
10007781          i_5 += 1
10007784      while (i_5 s< data_10067540)
10007784  
1000778b  int32_t i_6 = 0
1000778b  
1000778f  if (data_10067538 s> 0)
10007791      int32_t* esi_6 = nullptr
10007791      
100077ea      do
100077a7          *(esi_6 + data_1006753c) = j_sub_10043870(*(esi_6 + data_1006753c))
100077bf          *(esi_6 + data_1006753c + 4) = j_sub_10043870(*(esi_6 + data_1006753c + 4))
100077db          i_6 += 1
100077dc          *(esi_6 + data_1006753c + 8) = j_sub_10043870(*(esi_6 + data_1006753c + 8))
100077e5          esi_6 = &esi_6[3]
100077ea      while (i_6 s< data_10067538)
100077ea  
100077ec  int32_t result = data_100674c4
100077f1  int32_t ebp_4 = 0
100077f1  
100077f5  if (result s> 0)
100077f7      int32_t ebx_1 = 0
100077f7      
10007867      do
100077f9          void* eax_60 = data_100674c8
10007802          void* esi_7 = eax_60 + ebx_1
10007806          int32_t eax_61 = j_sub_10043870(*(eax_60 + ebx_1 + 0x28))
1000780b          int32_t edx_19 = *(esi_7 + 0x2c)
1000780e          *(esi_7 + 0x28) = eax_61
10007817          *(esi_7 + 0x2c) = j_sub_10043870(edx_19)
10007826          *(esi_7 + 0x24) = j_sub_10043870(*(esi_7 + 0x24))
10007829          void* esi_8 = esi_7 + 0x18
1000782c          int32_t i_12 = 3
1000785a          int32_t i_7
1000785a          
1000785a          do
10007835              j_sub_100438b0(*(esi_8 - 0x18))
1000783a              *(esi_8 - 0x18) = fconvert.s(unimplemented  {fstp dword [esi-0x18], st0})
1000783a              unimplemented  {fstp dword [esi-0x18], st0}
10007841              j_sub_100438b0(*(esi_8 - 0xc))
10007846              *(esi_8 - 0xc) = fconvert.s(unimplemented  {fstp dword [esi-0xc], st0})
10007846              unimplemented  {fstp dword [esi-0xc], st0}
1000784c              j_sub_100438b0(*esi_8)
10007851              *esi_8 = fconvert.s(unimplemented  {fstp dword [esi], st0})
10007851              unimplemented  {fstp dword [esi], st0}
10007851              top += 3
10007856              esi_8 += 4
10007859              i_7 = i_12
10007859              i_12 -= 1
1000785a          while (i_7 != 1)
1000785c          result = data_100674c4
10007861          ebp_4 += 1
10007862          ebx_1 += 0x30
10007867      while (ebp_4 s< result)
10007867  
1000786e  return result

1000786f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10007880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100078a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100078c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100078e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10007980    void* sub_10007980()

10007980  void* eax_16 = data_100674c8
1000798a  data_100674c4 = 0
1000798a  
10007990  if (eax_16 != 0)
10007993      j_sub_100390b0(eax_16)
10007993  
1000799b  void* eax = data_100674d0
100079a0  data_100674c8 = 0
100079a8  data_100674cc = 0
100079a8  
100079ae  if (eax != 0)
100079b1      j_sub_100390b0(eax)
100079b1  
100079b9  void* eax_1 = data_100674dc
100079be  data_100674d0 = 0
100079c6  data_100674d4 = 0
100079cc  data_100674d8 = 0
100079cc  
100079d2  if (eax_1 != 0)
100079d5      j_sub_100390b0(eax_1)
100079d5  
100079dd  void* eax_2 = data_100674e4
100079e2  data_100674dc = 0
100079ea  data_100674e0 = 0
100079ea  
100079f0  if (eax_2 != 0)
100079f3      j_sub_100390b0(eax_2)
100079f3  
100079fb  void* eax_3 = data_100674ec
10007a00  data_100674e4 = 0
10007a08  data_100674e8 = 0
10007a08  
10007a0e  if (eax_3 != 0)
10007a11      j_sub_100390b0(eax_3)
10007a11  
10007a19  void* eax_4 = data_100674f4
10007a1e  data_100674ec = 0
10007a26  data_100674f0 = 0
10007a26  
10007a2c  if (eax_4 != 0)
10007a2f      j_sub_100390b0(eax_4)
10007a2f  
10007a37  void* eax_5 = data_100674fc
10007a3c  data_100674f4 = 0
10007a44  data_100674f8 = 0
10007a44  
10007a4a  if (eax_5 != 0)
10007a4d      j_sub_100390b0(eax_5)
10007a4d  
10007a55  void* eax_6 = data_10067504
10007a5a  data_100674fc = 0
10007a62  data_10067500 = 0
10007a62  
10007a68  if (eax_6 != 0)
10007a6b      j_sub_100390b0(eax_6)
10007a6b  
10007a73  void* eax_7 = data_1006750c
10007a78  data_10067504 = 0
10007a80  data_10067508 = 0
10007a80  
10007a86  if (eax_7 != 0)
10007a89      j_sub_100390b0(eax_7)
10007a89  
10007a91  void* eax_8 = data_10067514
10007a96  data_1006750c = 0
10007a9e  data_10067510 = 0
10007a9e  
10007aa4  if (eax_8 != 0)
10007aa7      j_sub_100390b0(eax_8)
10007aa7  
10007aaf  void* eax_9 = data_1006751c
10007ab4  data_10067514 = 0
10007abc  data_10067518 = 0
10007abc  
10007ac2  if (eax_9 != 0)
10007ac5      j_sub_100390b0(eax_9)
10007ac5  
10007acd  void* eax_10 = data_10067524
10007ad2  data_1006751c = 0
10007ada  data_10067520 = 0
10007ada  
10007ae0  if (eax_10 != 0)
10007ae3      j_sub_100390b0(eax_10)
10007ae3  
10007aeb  void* eax_11 = data_1006752c
10007af0  data_10067524 = 0
10007af8  data_10067528 = 0
10007af8  
10007afe  if (eax_11 != 0)
10007b01      j_sub_100390b0(eax_11)
10007b01  
10007b09  void* eax_12 = data_10067534
10007b0e  data_1006752c = 0
10007b16  data_10067530 = 0
10007b16  
10007b1c  if (eax_12 != 0)
10007b1f      j_sub_100390b0(eax_12)
10007b1f  
10007b27  void* eax_13 = data_1006753c
10007b2c  data_10067534 = 0
10007b34  data_10067538 = 0
10007b34  
10007b3a  if (eax_13 != 0)
10007b3d      j_sub_100390b0(eax_13)
10007b3d  
10007b45  void* eax_14 = data_10067544
10007b4a  data_1006753c = 0
10007b52  data_10067540 = 0
10007b52  
10007b58  if (eax_14 != 0)
10007b5b      j_sub_100390b0(eax_14)
10007b5b  
10007b63  void* eax_15 = data_1006754c
10007b68  data_10067544 = 0
10007b70  data_10067548 = 0
10007b70  
10007b76  if (eax_15 != 0)
10007b79      j_sub_100390b0(eax_15)
10007b79  
10007b81  void* result = data_10067554
10007b86  data_1006754c = 0
10007b8e  data_10067550 = 0
10007b8e  
10007b94  if (result != 0)
10007b97      result = j_sub_100390b0(result)
10007b97  
10007b9f  data_10067554 = 0
10007ba5  data_100674c0 = 0
10007bac  return result

10007bad                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10007bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10007c40    void* sub_10007c40(int32_t* arg1, void* arg2, int32_t arg3, int32_t arg4, int32_t arg5)

10007c50  if (mods.dp.d(sx.q(arg3), arg4) != 0)
10007c56      int32_t var_10 = arg5
10007c5c      j_sub_1000d7e0("odd %s bsp lump size\n")
10007c61      j_sub_10007980()
10007c6b      sub_10044888(arg1)
10007c78      return 0
10007c78  
10007c8f  if (sub_100447cf(arg1, arg2, FILE_BEGIN) != 0)
10007c95      int32_t var_10_1 = arg5
10007c9b      j_sub_1000d7e0("can't seek to bsp lump %s\n")
10007ca0      j_sub_10007980()
10007ca6      sub_10044888(arg1)
10007cb3      return 0
10007cb3  
10007cb5  void* result = j_sub_10039000(arg3)
10007cb5  
10007ccc  if (sub_100446b8(result, arg3, 1, arg1) == 1)
10007cfc      return result
10007cfc  
10007cd2  int32_t var_10_3 = arg5
10007cd8  j_sub_1000d7e0("can't read bsp lump %s\n")
10007cde  j_sub_100390b0(result)
10007ce3  j_sub_10007980()
10007ce9  sub_10044888(arg1)
10007cf6  return 0

10007cfd                                                                                         90 90 90                               ...
10007d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10007d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10007d30    int32_t sub_10007d30(PSTR arg1, void* arg2)

10007d3a  j_sub_10007980()
10007d4c  int32_t* eax = sub_10044936(arg1, "rb")
10007d4c  
10007d58  if (eax == 0)
10007d5a      PSTR var_b4 = arg1
10007d60      j_sub_1000d7e0("can't open bsp file %s\n")
10007d77      return 0xd
10007d77  
10007d8d  if (sub_100447cf(eax, arg2, FILE_BEGIN) != 0)
10007d94      j_sub_1000d7e0("can't seek to bsp file %s\n")
10007d9a      sub_10044888(eax)
10007db1      return 0xe
10007db1  
10007dca  int32_t var_a0
10007dca  
10007dca  if (sub_100446b8(&var_a0, 0xa0, 1, eax) != 1)
10007dcc      PSTR var_b4_2 = arg1
10007dd2      j_sub_1000d7e0("can't read header of bsp file %s…")
10007dd8      sub_10044888(eax)
10007def      return 0xf
10007def  
10007df5  int32_t eax_6 = j_sub_10043870(var_a0)
10007e02  var_a0 = eax_6
10007e02  
10007e06  if (eax_6 != 0x50534249)
10007e08      PSTR var_b4_4 = arg1
10007e0e      j_sub_1000d7e0("%s is not an BSP file\n")
10007e14      sub_10044888(eax)
10007e2b      return 0x10
10007e2b  
10007e31  int32_t var_9c
10007e31  int32_t eax_8 = j_sub_10043870(var_9c)
10007e3c  int32_t var_9c_1 = eax_8
10007e3c  
10007e40  if (eax_8 != 0x26)
10007e42      int32_t var_b4_6 = 0x26
10007e44      int32_t var_b8_3 = eax_8
10007e45      PSTR var_bc_3 = arg1
10007e4b      j_sub_1000d7e0("bsp file %s is version %i, not %…")
10007e51      sub_10044888(eax)
10007e68      return 0x11
10007e68  
10007e7a  int32_t var_98
10007e7a  void* ebx_2 = j_sub_10043870(var_98) + arg2
10007e7c  int32_t var_94
10007e7c  int32_t eax_12 = j_sub_10043870(var_94)
10007e8d  void* eax_13 = j_sub_10007c40(eax, ebx_2, eax_12, 1, "entity")
10007e95  data_100674e4 = eax_13
10007e95  
10007e9c  if (eax_13 == 0)
10007ead      return 0x12
10007ead  
10007eb2  data_100674e0 = eax_12
10007ec5  int32_t var_90
10007ec5  void* ebx_4 = j_sub_10043870(var_90) + arg2
10007ec7  int32_t var_8c
10007ec7  int32_t eax_17 = j_sub_10043870(var_8c)
10007ed8  void* eax_18 = j_sub_10007c40(eax, ebx_4, eax_17, 0x14, "planes")
10007ee0  data_100674f4 = eax_18
10007ee0  
10007ee7  if (eax_18 == 0)
10007ef8      return 0x12
10007ef8  
10007f08  data_100674f0 = eax_17 u/ 0x14
10007f1a  int32_t var_88
10007f1a  void* ebx_6 = j_sub_10043870(var_88) + arg2
10007f1c  int32_t var_84
10007f1c  int32_t eax_22 = j_sub_10043870(var_84)
10007f2d  void* eax_23 = j_sub_10007c40(eax, ebx_6, eax_22, 0xc, "vertexes")
10007f35  data_100674fc = eax_23
10007f35  
10007f3c  if (eax_23 == 0)
10007f4d      return 0x12
10007f4d  
10007f5d  data_100674f8 = eax_22 u/ 0xc
10007f6f  int32_t var_80
10007f6f  void* ebp_4 = j_sub_10043870(var_80) + arg2
10007f71  int32_t var_7c
10007f71  int32_t eax_28 = j_sub_10043870(var_7c)
10007f7d  void* eax_29
10007f7d  
10007f7d  if (eax_28 == 0)
10007fb1      data_100674d0 = 0
10007fbb      data_10063fe8(1, "WARNGING: bsp has no visibility …")
10007fc1      eax_29 = data_100674d0
10007f7d  else
10007f89      eax_29 = j_sub_10007c40(eax, ebp_4, eax_28, 1, "visibility")
10007f91      data_100674d0 = eax_29
10007f91      
10007f98      if (eax_29 == 0)
10007fa9          return 0x12
10007fa9  
10007fcd  data_100674cc = eax_28
10007fd4  data_100674d4 = eax_29
10007fe5  int32_t var_78
10007fe5  void* ebp_6 = j_sub_10043870(var_78) + arg2
10007fe7  int32_t var_74
10007fe7  int32_t eax_33 = j_sub_10043870(var_74)
10007ff8  void* eax_34 = j_sub_10007c40(eax, ebp_6, eax_33, 0x1c, "nodes")
10008000  data_10067504 = eax_34
10008000  
10008007  if (eax_34 == 0)
10008018      return 0x12
10008018  
1000802e  data_10067500 = eax_33 u/ 0x1c
10008040  int32_t var_70
10008040  void* ebp_8 = j_sub_10043870(var_70) + arg2
10008042  int32_t var_6c
10008042  int32_t eax_38 = j_sub_10043870(var_6c)
10008053  void* eax_39 = j_sub_10007c40(eax, ebp_8, eax_38, 0x4c, "texinfo")
1000805b  data_1006750c = eax_39
1000805b  
10008062  if (eax_39 == 0)
10008073      return 0x12
10008073  
10008089  data_10067508 = eax_38 u/ 0x4c
1000809b  int32_t var_68
1000809b  void* ebx_19 = j_sub_10043870(var_68) + arg2
1000809d  int32_t var_64
1000809d  int32_t eax_44 = j_sub_10043870(var_64)
100080ae  void* eax_45 = j_sub_10007c40(eax, ebx_19, eax_44, 0x14, "faces")
100080b6  data_10067514 = eax_45
100080b6  
100080bd  if (eax_45 == 0)
100080ce      return 0x12
100080ce  
100080d9  data_10067510 = eax_44 u/ 0x14
100080f0  int32_t var_60
100080f0  void* ebp_11 = j_sub_10043870(var_60) + arg2
100080f2  int32_t var_5c
100080f2  int32_t eax_50 = j_sub_10043870(var_5c)
100080f2  
100080fe  if (eax_50 == 0)
10008132      data_100674dc = 0
1000813c      data_10063fe8(1, "WARNING: bsp has no light data\n")
100080fe  else
1000810a      void* eax_51 = j_sub_10007c40(eax, ebp_11, eax_50, 1, "lightning")
10008112      data_100674dc = eax_51
10008112      
10008119      if (eax_51 == 0)
1000812a          return 0x12
1000812a  
10008149  data_100674d8 = eax_50
1000815c  int32_t var_58
1000815c  void* ebp_13 = j_sub_10043870(var_58) + arg2
1000815e  int32_t var_54
1000815e  int32_t eax_54 = j_sub_10043870(var_54)
1000816f  void* eax_55 = j_sub_10007c40(eax, ebp_13, eax_54, 0x1c, "leafs")
10008177  data_100674ec = eax_55
10008177  
1000817e  if (eax_55 == 0)
1000818f      return 0x12
1000818f  
100081a5  data_100674e8 = eax_54 u/ 0x1c
100081b7  int32_t var_50
100081b7  void* ebp_15 = j_sub_10043870(var_50) + arg2
100081b9  int32_t var_4c
100081b9  int32_t eax_60 = j_sub_10043870(var_4c)
100081ca  void* eax_61 = j_sub_10007c40(eax, ebp_15, eax_60, 2, "leaf faces")
100081d2  data_10067524 = eax_61
100081d2  
100081d9  if (eax_61 == 0)
100081ea      return 0x12
100081ea  
100081f2  data_10067520 = eax_60 u>> 1
10008204  int32_t var_48
10008204  void* ebp_17 = j_sub_10043870(var_48) + arg2
10008206  int32_t var_44
10008206  int32_t eax_65 = j_sub_10043870(var_44)
10008217  void* eax_66 = j_sub_10007c40(eax, ebp_17, eax_65, 2, "leaf brushes")
1000821f  data_1006752c = eax_66
1000821f  
10008226  if (eax_66 == 0)
10008237      return 0x12
10008237  
1000823f  data_10067528 = eax_65 u>> 1
10008251  int32_t var_40
10008251  void* ebp_19 = j_sub_10043870(var_40) + arg2
10008253  int32_t var_3c
10008253  int32_t eax_69 = j_sub_10043870(var_3c)
10008264  void* eax_70 = j_sub_10007c40(eax, ebp_19, eax_69, 4, "edges")
1000826c  data_1006751c = eax_70
1000826c  
10008273  if (eax_70 == 0)
10008284      return 0x12
10008284  
1000828d  data_10067518 = eax_69 u>> 2
100082a2  int32_t var_38
100082a2  void* ebp_21 = j_sub_10043870(var_38) + arg2
100082a4  int32_t var_34
100082a4  int32_t eax_74 = j_sub_10043870(var_34)
100082b5  void* eax_75 = j_sub_10007c40(eax, ebp_21, eax_74, 4, "surfedges")
100082bd  data_10067534 = eax_75
100082bd  
100082c4  if (eax_75 == 0)
100082d5      return 0x12
100082d5  
100082e1  data_10067530 = eax_74 u>> 2
100082f6  int32_t var_30
100082f6  void* ebx_35 = j_sub_10043870(var_30) + arg2
100082f8  int32_t var_2c
100082f8  int32_t eax_79 = j_sub_10043870(var_2c)
10008309  void* eax_80 = j_sub_10007c40(eax, ebx_35, eax_79, 0x30, "models")
10008311  data_100674c8 = eax_80
10008311  
10008318  if (eax_80 == 0)
10008329      return 0x12
10008329  
1000833c  data_100674c4 = eax_79 u/ 0x30
10008351  int32_t var_28
10008351  void* ebx_37 = j_sub_10043870(var_28) + arg2
10008353  int32_t var_24
10008353  int32_t eax_84 = j_sub_10043870(var_24)
10008364  void* eax_85 = j_sub_10007c40(eax, ebx_37, eax_84, 0xc, "brushes")
1000836c  data_1006753c = eax_85
1000836c  
10008373  if (eax_85 == 0)
10008384      return 0x12
10008384  
10008397  data_10067538 = eax_84 u/ 0xc
100083ac  int32_t var_20
100083ac  void* ebx_39 = j_sub_10043870(var_20) + arg2
100083ae  int32_t var_1c
100083ae  int32_t eax_90 = j_sub_10043870(var_1c)
100083bf  void* eax_91 = j_sub_10007c40(eax, ebx_39, eax_90, 4, "brush sides")
100083c7  data_10067544 = eax_91
100083c7  
100083ce  if (eax_91 == 0)
100083df      return 0x12
100083df  
100083e3  data_10067540 = eax_90 u>> 2
100083e9  j_sub_10007460()
100083ef  data_100674c0 = 1
100083f9  sub_10044888(eax)
10008401  j_sub_100071e0()
10008406  j_sub_100030a0()
1000840b  j_sub_10003280()
10008410  j_sub_100032d0()
10008421  return 0

10008422        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10008440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100084a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100084c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100084e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100085a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100085c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100085e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100085f0    int32_t sub_100085f0()

10008602  j_sub_10037850(&data_10066880, data_100674e4, data_100674e0)
1000860a  return 0x100

1000860b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

10008620    int32_t sub_10008620()

10008620  int32_t result = data_10066948
10008625  int32_t i = 1
10008625  
1000862c  if (result s> 1)
1000862f      result = 0x1c
1000862f      
1000864c      do
1000863c          i += 1
1000863d          *(result + data_10066954 + 0xc) = 0
10008647          result += 0x1c
1000864c      while (i s< data_10066948)
1000864c  
1000864f  return result

10008650                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

10008660    int32_t sub_10008660(int32_t arg1, int32_t arg2)

10008660  int32_t edx_8 = data_10066968
10008667  int32_t eax = 1
10008672  void* edi = data_1006696c
10008672  
1000867a  if (edx_8 s> 1)
1000867c      int32_t* ecx_1 = edi + 0x14
1000867c      
10008681      while (*ecx_1 != arg1)
10008683          eax += 1
10008684          ecx_1 = &ecx_1[5]
10008684          
10008689          if (eax s>= edx_8)
10008689              break
10008689  
1000868d  if (eax == edx_8)
1000868f      int32_t var_10 = arg1
10008695      j_sub_1000d7e0("no portal of area %d")
100086a5      return 1
100086a5  
100086a9  void* edx = edi + eax * 0x14
100086b0  int32_t edi_1 = *(edx + 4)
100086b0  
100086b5  if (edi_1 == arg2)
100086bf      return 1
100086bf  
100086c0  int32_t ebx = *(edx + 8)
100086c0  
100086c5  if (ebx == arg2)
100086cf      return 1
100086cf  
100086d2  if (edi_1 != 0)
100086db      if (ebx != 0)
10008754          int32_t var_10_1 = arg1
1000875a          j_sub_10038d80("portal using area %d is seperati…")
10008771          int32_t* eax_10 = data_10066954 + arg1 * 0x1c
1000877c          *eax_10 &= 0xfffffff7
10008780          return 0
10008780      
100086dd      *(edx + 8) = arg2
100086d2  else
100086d4      *(edx + 4) = arg2
100086d4  
100086ea  if (data_10066970 s>= 0x10000)
100086f1      j_sub_1000d7e0("AAS_MAX_PORTALINDEXSIZE")
10008701      return 1
10008701  
10008715  *(data_10066954 + arg1 * 0x1c + 0xc) = neg.d(eax)
10008719  int32_t edx_3 = data_1006697c
1000871f  int32_t ecx_4 = arg2 * 3
10008727  void* ecx_5 = edx_3 + (ecx_4 << 2)
10008735  *(data_10066974 + ((*(ecx_5 + 8) + *(edx_3 + (ecx_4 << 2) + 4)) << 2)) = eax
10008740  data_10066970 += 1
1000874b  *(ecx_5 + 4) += 1
10008753  return 1

10008781     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
100087a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100087c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100087e0    int32_t sub_100087e0(int32_t arg1, int32_t arg2)

100087f6  if (arg1 s<= 0 || arg1 s>= data_10066948)
10008959      j_sub_1000d7e0("AAS_FloodClusterAreas_r: areanum…")
10008967      return 0
10008967  
100087fc  int32_t edx_1 = data_10066954
1000880b  int32_t edi_3 = arg1 * 0x1c
1000880e  int32_t ecx_1 = *(edi_3 + edx_1 + 0xc)
1000880e  
10008818  if (ecx_1 s<= 0)
10008841      if ((*(edi_3 + edx_1) & 8) != 0)
10008855          return j_sub_10008660(arg1, arg2)
10008855      
10008856      int32_t edx_2 = arg2
1000885a      int32_t i = 0
1000885c      *(edi_3 + edx_1 + 0xc) = edx_2
1000886d      int32_t eax_7 = edx_2 * 0xc
10008873      *(edi_3 + data_10066954 + 0x10) = *(eax_7 + data_1006697c)
10008877      int32_t ecx_4 = data_1006697c
10008881      *(eax_7 + ecx_4) += 1
10008890      void* esi_6 = arg1 * 0x30 + data_1006694c
10008890      
10008897      if (*(esi_6 + 4) s> 0)
100088fa          do
100088a6              int32_t eax_11
100088a6              int32_t edx_5
100088a6              edx_5:eax_11 = sx.q(*(data_10066944 + ((*(esi_6 + 8) + i) << 2)))
100088ab              int32_t edx_6 = data_1006693c
100088b1              int32_t ecx_6 = ((eax_11 ^ edx_5) - edx_5) * 3
100088b4              int32_t eax_14 = *(edx_6 + (ecx_6 << 3) + 0x10)
100088b4              
100088bd              if (eax_14 == arg1)
100088bf                  int32_t ecx_8 = *(edx_6 + (ecx_6 << 3) + 0x14)
100088bf                  
100088c4                  if (ecx_8 != 0 && j_sub_100087e0(ecx_8, arg2) == 0)
10008967                      return 0
100088bd              else if (eax_14 != 0 && j_sub_100087e0(eax_14, arg2) == 0)
10008967                  return 0
10008967              
100088f7              i += 1
100088fa          while (i s< *(esi_6 + 4))
100088fa          
100088fc          edx_2 = arg2
100088fc      
10008900      int32_t ecx_10 = data_10066954
10008906      int32_t esi_7 = 0
10008906      
1000890e      if (*(edi_3 + ecx_10 + 0x14) s> 0)
10008914          while (true)
10008922              int32_t eax_23 = *(data_1006695c + (*(edi_3 + ecx_10 + 0x18) + esi_7) * 0x2c)
10008922              
10008927              if (eax_23 != 0)
10008935                  if (j_sub_100087e0(eax_23, edx_2) == 0)
10008967                      return 0
10008967                  
10008937                  ecx_10 = data_10066954
1000893d                  edx_2 = arg2
1000893d              
10008945              esi_7 += 1
10008945              
10008948              if (esi_7 s>= *(edi_3 + ecx_10 + 0x14))
10008953                  return 1
10008818  else if (ecx_1 != arg2)
10008826      int32_t var_14_1 = arg1
10008827      int32_t var_18_1 = ecx_1
10008828      int32_t var_1c = arg2
1000882e      j_sub_10038d80("cluster %d touched cluster %d at…")
1000883c      return 0
1000883c  
10008953  return 1

10008968                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
10008980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100089a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100089c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100089e0    int32_t sub_100089e0(int32_t arg1)

100089e9  int32_t i = 1
100089e9  
100089f0  if (data_10066948 s> 1)
100089f6      int32_t ebx_1 = data_10066954
100089f6      
10008a77      do
10008a03          int32_t eax_1 = i * 7
10008a09          char* eax_2 = ebx_1 + (eax_1 << 2)
10008a09          
10008a13          if (*(ebx_1 + (eax_1 << 2) + 0xc) == 0 && (*eax_2 & 8) == 0)
10008a15              int32_t esi_1 = *(eax_2 + 0x14)
10008a18              int32_t edx_1 = 0
10008a18              
10008a1c              if (esi_1 s> 0)
10008a2d                  int32_t* ecx_4 = data_1006695c + *(eax_2 + 0x18) * 0x2c
10008a2d                  
10008a51                  do
10008a39                      int32_t ebp_2 = *ecx_4 * 7
10008a39                      
10008a49                      if ((*(ebx_1 + (ebp_2 << 2)) & 8) == 0
10008a49                              && *(ebx_1 + (ebp_2 << 2) + 0xc) != 0)
10008a65                          if (j_sub_100087e0(i, arg1) == 0)
10008a89                              return 0
10008a89                          
10008a67                          ebx_1 = data_10066954
10008a6d                          i = 0
10008a65                          break
10008a65                      
10008a4b                      edx_1 += 1
10008a4c                      ecx_4 = &ecx_4[0xb]
10008a51                  while (edx_1 s< esi_1)
10008a51          
10008a74          i += 1
10008a77      while (i s< data_10066948)
10008a77  
10008a82  return 1

10008a8a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10008aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10008ac0    int32_t* sub_10008ac0(int32_t arg1)

10008acb  int32_t i = 0
10008ad0  int32_t* result = data_1006697c + arg1 * 0xc
10008ad0  
10008ad8  if (result[1] s> 0)
10008b11      do
10008af2          void* ecx_5 = data_1006696c + *(data_10066974 + ((result[2] + i) << 2)) * 0x14
10008afa          int32_t edi_4 = *result
10008afa          
10008afc          if (*(ecx_5 + 4) != arg1)
10008b03              *(ecx_5 + 0x10) = edi_4
10008afc          else
10008afe              *(ecx_5 + 0xc) = edi_4
10008afe          
10008b09          i += 1
10008b0a          *result += 1
10008b11      while (i s< result[1])
10008b11  
10008b15  return result

10008b16                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10008b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10008b40    int32_t sub_10008b40()

10008b43  j_sub_10008620()
10008b4d  int32_t i = 1
10008b4d  
10008b54  if (data_10066948 s> 1)
10008b5a      int32_t eax_1 = data_10066978
10008b5f      int32_t ecx_1 = data_10066954
10008b65      char* ebx_1 = 0x1c
10008b65      
10008c13      do
10008b7a          if (*(ebx_1 + ecx_1 + 0xc) == 0 && (ebx_1[ecx_1] & 8) == 0)
10008b85              if (eax_1 s>= 0x10000)
10008c27                  j_sub_1000d7e0("AAS_MAX_CLUSTERS")
10008c34                  return 0
10008c34              
10008b94              int32_t* esi_1 = data_1006697c + eax_1 * 0xc
10008b97              *esi_1 = 0
10008ba3              esi_1[2] = data_10066970
10008ba6              esi_1[1] = 0
10008ba6              
10008bbe              if (j_sub_100087e0(i, data_10066978) == 0)
10008c34                  return 0
10008c34              
10008bd1              if (j_sub_100089e0(data_10066978) == 0)
10008c34                  return 0
10008c34              
10008bda              j_sub_10008ac0(data_10066978)
10008be7              int32_t var_14_2 = *esi_1
10008be8              int32_t var_18_1 = data_10066978
10008bee              j_sub_10038d80("cluster %d has %d areas")
10008bf8              ecx_1 = data_10066954
10008c01              eax_1 = data_10066978 + 1
10008c02              data_10066978 = eax_1
10008c02          
10008c0d          i += 1
10008c0e          ebx_1 = &ebx_1[0x1c]
10008c13      while (i s< data_10066948)
10008c13  
10008c21  return 1

10008c35                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10008c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10008c80    int32_t sub_10008c80()

10008c80  int32_t eax_4 = data_10066948
10008c87  int32_t i = 1
10008c87  
10008c8f  if (eax_4 s<= 1)
10008d05      return eax_4
10008d05  
10008c91  int32_t eax = data_10066968
10008c96  char* ebx_1 = 0x1c
10008c96  
10008cef  do
10008ca7      if ((ebx_1[data_10066954] & 8) != 0)
10008cae          if (eax s>= 0x10000)
10008cfa              return j_sub_1000d7e0("AAS_MAX_PORTALS")
10008cfa          
10008cb8          int32_t i_1 = i
10008cb9          int32_t* eax_2 = data_1006696c + eax * 0x14
10008cbc          *eax_2 = i
10008cbe          eax_2[1] = 0
10008cc1          eax_2[2] = 0
10008cca          int32_t var_14_1 = data_10066968
10008cd0          j_sub_10038d80("portal %d: area %d")
10008cdd          eax = data_10066968 + 1
10008cde          data_10066968 = eax
10008cde      
10008ce9      i += 1
10008cea      ebx_1 = &ebx_1[0x1c]
10008cef  while (i s< data_10066948)
10008cef  
10008cf4  return eax

10008d06                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10008d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10008d40    int32_t sub_10008d40(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

10008d4e  *(arg3 + (arg4 << 2)) = 1
10008d60  int32_t ebx = 0
10008d68  void* esi_2 = arg1[arg4] * 0x30 + data_1006694c
10008d6a  int32_t result = *(esi_2 + 4)
10008d6a  
10008d6f  if (result s> 0)
10008de7      do
10008d85          int32_t eax_5
10008d85          int32_t edx_3
10008d85          edx_3:eax_5 = sx.q(*(data_10066944 + ((ebx + *(esi_2 + 8)) << 2)))
10008d8a          int32_t edx_4 = data_1006693c
10008d90          int32_t ecx_1 = ((eax_5 ^ edx_3) - edx_3) * 3
10008d93          void* eax_8 = edx_4 + (ecx_1 << 3)
10008d96          ecx_1.b = *(edx_4 + (ecx_1 << 3) + 4)
10008d96          
10008d9d          if ((ecx_1.b & 1) == 0)
10008da3              int32_t i_1 = *(eax_8 + 0x10)
10008daa              int32_t i = i_1
10008daa              
10008dac              if (i_1 == arg1[arg4])
10008dae                  i = *(eax_8 + 0x14)
10008dae              
10008db1              int32_t eax_9 = 0
10008db1              
10008db5              if (arg2 s> 0)
10008db7                  int32_t* ecx_2 = arg1
10008db7                  
10008dbb                  while (*ecx_2 != i)
10008dbd                      eax_9 += 1
10008dbe                      ecx_2 = &ecx_2[1]
10008dbe                      
10008dc3                      if (eax_9 s>= arg2)
10008dc3                          break
10008dc3              
10008dd1              if (eax_9 != arg2 && *(arg3 + (eax_9 << 2)) == 0)
10008dd9                  j_sub_10008d40(arg1, arg2, arg3, eax_9)
10008dd9          
10008de1          result = *(esi_2 + 4)
10008de4          ebx += 1
10008de7      while (ebx s< result)
10008de7  
10008ded  return result

10008dee                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10008e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10008e20    int32_t sub_10008e20(int32_t* arg1, int32_t arg2)

10008e3d  void s
10008e3d  __builtin_memset(&s, c: 0, n: 0x200)
10008e3d  
10008e3f  if (arg2 s< 1)
10008e4b      return 0
10008e4b  
10008e4c  if (arg2 != 1)
10008e5e      j_sub_10008d40(arg1, arg2, &s, 0)
10008e66      int32_t eax_2 = 0
10008e66      
10008e6a      if (arg2 s> 0)
10008e6c          void* ecx_2 = &s
10008e6c          
10008e73          while (true)
10008e73              if (*ecx_2 == 0)
10008e4b                  return 0
10008e4b              
10008e75              eax_2 += 1
10008e76              ecx_2 += 4
10008e76              
10008e7b              if (eax_2 s>= arg2)
10008e8a                  return 1
10008e8a  
10008e8a  return 1

10008e8b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10008ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10008eb0    int32_t sub_10008eb0(int32_t* arg1, int32_t arg2, int32_t arg3)

10008eb6  int32_t ebp = arg3
10008ec4  arg1[arg2] = ebp
10008edf  void* edi_2 = ebp * 0x30 + data_1006694c
10008ee1  int32_t result = arg2 + 1
10008ee2  int32_t eax = 0
10008ee4  int32_t ebx_1 = *(data_10066954 + ebp * 0x1c + 8)
10008eed  arg3 = 0
10008eed  
10008ef1  if (*(edi_2 + 4) s> 0)
10008f0b      while (true)
10008f0b          int32_t eax_2
10008f0b          int32_t edx_2
10008f0b          edx_2:eax_2 = sx.q(*(data_10066944 + ((*(edi_2 + 8) + eax) << 2)))
10008f13          void* eax_6 = data_1006693c + ((eax_2 ^ edx_2) - edx_2) * 0x18
10008f13          
10008f1a          if ((*(eax_6 + 4) & 1) == 0)
10008f1c              int32_t i_1 = *(eax_6 + 0x10)
10008f21              int32_t i
10008f21              
10008f21              if (i_1 == ebp)
10008f27                  i = *(eax_6 + 0x14)
10008f21              else
10008f23                  i = i_1
10008f23              
10008f39              int32_t ecx_7 = *(data_10066954 + i * 0x1c + 8)
10008f39              
10008f4b              if ((ebx_1 & not.d(ecx_7)) != 0 && (ecx_7 & not.d(ebx_1)) == 0)
10008f4d                  int32_t ecx_8 = 0
10008f4d                  
10008f51                  if (result s> 0)
10008f53                      int32_t* edx_9 = arg1
10008f53                      
10008f59                      while (i != *edx_9)
10008f5b                          ecx_8 += 1
10008f5c                          edx_9 = &edx_9[1]
10008f5c                          
10008f61                          if (ecx_8 s>= result)
10008f61                              break
10008f61                  
10008f65                  if (ecx_8 == result)
10008f6d                      if (result s>= 0x80)
10008f6d                          break
10008f6d                      
10008f7e                      result = j_sub_10008eb0(arg1, result, i)
10008f7e          
10008f87          eax = arg3 + 1
10008f8a          arg3 = eax
10008f8a          
10008f8e          if (eax s>= *(edi_2 + 4))
10008f9a              return result
10008f9a      
10008fa0      j_sub_1000d7e0("MAX_PORTALAREAS")
10008fa0  
10008fae  return result

10008faf                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10008fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10008fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10008ff0    int32_t sub_10008ff0(int32_t arg1)

1000900c  char* eax_2 = data_10066954 + arg1 * 0x1c
1000900c  
10009013  if ((*eax_2 & 8) != 0)
10009021      return 0
10009021  
10009026  if ((eax_2[4] & 1) == 0)
10009034      return 0
10009034  
10009043  int32_t ebx = 0
10009045  int32_t s[0x80]
10009045  __builtin_memset(&s, c: 0, n: 0x200)
10009058  int32_t s_1[0x80]
10009058  __builtin_memset(s: &s_1, c: 0, n: 0x200)
1000905f  int32_t var_e28 = 0
10009063  int32_t var_e2c = 0
10009067  int32_t ebp = 0
10009069  int32_t var_e20 = 0xffffffff
1000906d  int32_t var_e10 = 0xffffffff
10009076  int32_t var_e00[0x80]
10009076  int32_t i_5 = j_sub_10008eb0(&var_e00, 0, arg1)
1000907b  int32_t ecx_1 = 0
1000907f  int32_t i_4 = i_5
10009083  int32_t var_e34 = 0
10009087  int32_t var_a00[0x80]
10009087  int32_t var_600[0x80]
10009087  
10009087  if (i_5 s> 0)
10009255      do
1000908d          int32_t esi_1 = var_e00[ecx_1]
100090a0          void* esi_4 = esi_1 * 0x30 + data_1006694c
100090a2          int32_t i = 0
100090a4          void* var_e30_1 = esi_4
100090a8          int32_t i_2 = 0
100090a8          
100090b1          if (*(esi_4 + 4) s> 0)
100090c2              int32_t __saved_edi
100090c2              void* var_e18_1 = &(&__saved_edi)[ebp + 0x211]
100090d4              void* var_e04_1 = &(&__saved_edi)[var_e2c + 0x291]
100090dc              void* var_e0c_1 = &(&__saved_edi)[ebx + 0x111]
100090e7              void* var_e08_1 = &(&__saved_edi)[var_e28 + 0x311]
100090e7              
10009240              do
100090f9                  int32_t eax_8
100090f9                  int32_t edx_5
100090f9                  edx_5:eax_8 = sx.q(*(data_10066944 + ((*(esi_4 + 8) + i) << 2)))
100090fc                  int32_t eax_10 = (eax_8 ^ edx_5) - edx_5
10009107                  int32_t* ecx_8 = data_1006693c + eax_10 * 0x18
10009107                  
1000910e                  if ((ecx_8[1].b & 1) == 0)
10009114                      int32_t edx_7 = 0
10009116                      int32_t (* edi)[0x80] = &var_e00
10009116                      
10009136                      do
1000911e                          if (edx_7 != var_e34)
10009120                              int32_t esi_5 = *edi
10009120                              
10009125                              if (ecx_8[4] == esi_5)
10009125                                  break
10009125                              
1000912a                              if (ecx_8[5] == esi_5)
1000912a                                  break
1000912a                          
10009130                          edx_7 += 1
10009131                          edi = &(*edi)[1]
10009136                      while (edx_7 s< i_4)
10009136                      
1000913c                      if (edx_7 == i_4)
10009142                          int32_t j = ecx_8[4]
10009142                          
1000914b                          if (j == esi_1)
1000914d                              j = ecx_8[5]
1000914d                          
10009163                          if ((*(data_10066954 + j * 0x1c) & 8) != 0)
100093e5                              return 0
100093e5                          
1000916f                          int32_t ecx_10 = *ecx_8 & 0xfffffffe
10009178                          void* eax_15
10009178                          
10009178                          if (var_e10 s< 0 || ecx_10 == var_e10)
100091e0                              var_e10 = ecx_10
100091e9                              var_e2c += 1
100091ed                              *var_e04_1 = eax_10
100091f2                              int32_t eax_16 = 0
100091f4                              var_e04_1 += 4
100091f4                              
100091fa                              if (ebp s> 0)
100091fc                                  int32_t (* ecx_16)[0x80] = &var_600
100091fc                                  
10009205                                  while (*ecx_16 != j)
10009207                                      eax_16 += 1
10009208                                      ecx_16 = &(*ecx_16)[1]
10009208                                      
1000920d                                      if (eax_16 s>= ebp)
1000920d                                          break
1000920d                              
10009211                              if (eax_16 == ebp)
10009217                                  ebp += 1
10009218                                  *var_e18_1 = j
1000921d                                  var_e18_1 += 4
1000921d                              
10009225                              eax_15 = &(&__saved_edi)[var_e34 + 0x91]
10009178                          else
10009184                              if (var_e20 s>= 0 && ecx_10 != var_e20)
100093e5                                  return 0
100093e5                              
1000918e                              var_e20 = ecx_10
10009197                              var_e28 += 1
1000919b                              *var_e08_1 = eax_10
100091a0                              int32_t eax_11 = 0
100091a2                              var_e08_1 += 4
100091a2                              
100091a8                              if (ebx s> 0)
100091aa                                  int32_t (* ecx_13)[0x80] = &var_a00
100091aa                                  
100091b3                                  while (*ecx_13 != j)
100091b5                                      eax_11 += 1
100091b6                                      ecx_13 = &(*ecx_13)[1]
100091b6                                      
100091bb                                      if (eax_11 s>= ebx)
100091bb                                          break
100091bb                              
100091bf                              if (eax_11 == ebx)
100091c5                                  ebx += 1
100091c6                                  *var_e0c_1 = j
100091cb                                  var_e0c_1 += 4
100091cb                              
100091d3                              eax_15 = &(&__saved_edi)[var_e34 + 0x191]
100091d3                          
1000922c                          *eax_15 += 1
1000922c                      
1000922e                      esi_4 = var_e30_1
1000922e                  
10009239                  i = i_2 + 1
1000923c                  i_2 = i
10009240              while (i s< *(esi_4 + 4))
10009240              
10009246              ecx_1 = var_e34
1000924a              i_5 = i_4
1000924a          
1000924e          ecx_1 += 1
10009251          var_e34 = ecx_1
10009255      while (ecx_1 s< i_5)
10009255  
1000925b  int32_t eax_20 = 0
1000925b  
1000925f  if (i_5 s> 0)
10009282      do
1000926a          if (s[eax_20] == 0)
100093e5              return 0
100093e5          
10009279          if (s_1[eax_20] == 0)
100093e5              return 0
100093e5          
1000927f          eax_20 += 1
10009282      while (eax_20 s< i_5)
10009282  
1000928d  int32_t eax_21 = j_sub_10008e20(&var_600, ebp)
1000928d  
10009297  if (eax_21 == 0)
100092a3      return eax_21
100092a3  
100092ad  int32_t eax_22 = j_sub_10008e20(&var_a00, ebx)
100092ad  
100092b7  if (eax_22 == 0)
100092c3      return eax_22
100092c3  
100092c8  int32_t edx_8 = 0
100092cc  int32_t var_e34_1 = 0
100092cc  
100092d0  if (var_e2c s> 0)
100092dd      void var_400
100092dd      void* var_e20_1 = &var_400
100092dd      
100093cd      do
100092e5          int32_t esi_12 = 0
100092e7          int32_t var_e18_2 = 0
100092f5          void* eax_27 = data_1006693c + *var_e20_1 * 0x18
100092f8          int32_t ecx_22 = *(eax_27 + 8)
100092fd          int32_t var_e14_2 = ecx_22
100092fd          
10009301          if (ecx_22 s> 0)
10009312              int32_t* var_e30_2 = data_10066934 + (*(eax_27 + 0xc) << 2)
10009312              
100093a5              do
1000931c                  int32_t eax_31
1000931c                  int32_t edx_11
1000931c                  edx_11:eax_31 = sx.q(*var_e30_2)
10009327                  int32_t edx_12 = 0
1000932b                  int32_t var_e1c_1 = 0
1000932b                  
1000932f                  if (var_e28 s> 0)
10009331                      void var_200
10009331                      void* ebx_1 = &var_200
10009331                      
10009383                      do
1000933a                          int32_t ecx_23 = *ebx_1 * 3
1000933d                          int32_t eax_34 = data_1006693c
10009342                          int32_t esi_13 = *(eax_34 + (ecx_23 << 3) + 8)
10009349                          int32_t ecx_24 = 0
10009349                          
1000934d                          if (esi_13 s> 0)
10009357                              int32_t* edi_6 =
10009357                                  data_10066934 + (*(eax_34 + (ecx_23 << 3) + 0xc) << 2)
10009357                              
1000936b                              do
1000935c                                  int32_t eax_38
1000935c                                  int32_t edx_14
1000935c                                  edx_14:eax_38 = sx.q(*edi_6)
1000935c                                  
10009363                                  if ((eax_31 ^ edx_11) - edx_11
10009363                                          == (eax_38 ^ edx_14) - edx_14)
10009363                                      break
10009363                                  
10009365                                  ecx_24 += 1
10009366                                  edi_6 = &edi_6[1]
1000936b                              while (ecx_24 s< esi_13)
1000936b                              
1000936d                              edx_12 = var_e1c_1
1000936d                          
10009373                          if (ecx_24 != esi_13)
10009373                              break
10009373                          
10009379                          edx_12 += 1
1000937a                          ebx_1 += 4
1000937f                          var_e1c_1 = edx_12
10009383                      while (edx_12 s< var_e28)
10009383                      
10009385                      ecx_22 = var_e14_2
10009389                      esi_12 = var_e18_2
10009389                  
10009391                  if (edx_12 != var_e28)
10009391                      break
10009391                  
10009397                  esi_12 += 1
1000939d                  var_e18_2 = esi_12
100093a1                  var_e30_2 = &var_e30_2[1]
100093a5              while (esi_12 s< ecx_22)
100093a5              
100093ab              i_5 = i_4
100093af              edx_8 = var_e34_1
100093af          
100093b5          if (esi_12 != ecx_22)
100093b5              break
100093b5          
100093bf          edx_8 += 1
100093c5          var_e34_1 = edx_8
100093c9          var_e20_1 += 4
100093cd      while (edx_8 s< var_e2c)
100093cd  
100093d7  if (edx_8 != var_e2c)
100093e5      return 0
100093e5  
100093e8  if (i_5 s> 0)
100093ea      int32_t i_3 = i_4
100093ee      int32_t (* esi_14)[0x80] = &var_e00
1000943e      int32_t i_1
1000943e      
1000943e      do
100093f4          int32_t edx_17 = data_10066954
10009401          int32_t ecx_28 = *esi_14 * 7
1000940c          *(edx_17 + (ecx_28 << 2)) |= 8
10009410          int32_t edx_18 = data_10066954
1000941d          int32_t ecx_30 = *esi_14 * 7
10009428          *(edx_18 + (ecx_30 << 2)) |= 0x20
1000942c          int32_t var_e48_3 = *esi_14
10009432          j_sub_10038d80("possible portal: %d")
1000943a          esi_14 = &(*esi_14)[1]
1000943d          i_1 = i_3
1000943d          i_3 -= 1
1000943e      while (i_1 != 1)
1000943e  
1000944e  return i_4

1000944f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10009460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100094a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100094c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100094e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10009570    int32_t sub_10009570()

10009577  int32_t i = 1
1000957c  int32_t edi = 0
1000957c  
10009580  if (data_10066948 s> 1)
10009595      do
1000958b          edi += j_sub_10008ff0(i)
10009592          i += 1
10009595      while (i s< data_10066948)
10009595  
100095aa  return data_10063fe8(1, "\r%6d possible portals\n", edi)

100095ab                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

100095c0    int32_t sub_100095c0()

100095c0  int32_t result = data_10066948
100095c5  int32_t i = 1
100095c5  
100095cc  if (result s> 1)
100095cf      result = 0x1c
100095cf      
100095f1      do
100095d4          int32_t edx_1 = data_10066954
100095da          result += 0x1c
100095e4          i += 1
100095e5          *(result + edx_1 - 0x1c) &= 0xfffffff7
100095f1      while (i s< data_10066948)
100095f1  
100095f4  return result

100095f5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10009600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10009610    int32_t sub_10009610()

10009610  int32_t edx_10 = data_10066968
10009616  int32_t ecx = 1
10009616  
1000961e  if (edx_10 s> 1)
10009625      void* eax_2 = data_1006696c + 0x1c
10009625      
1000963a      do
1000962d          if (*(eax_2 - 4) == 0)
10009655              int32_t* ecx_3 = data_10066954 + *(eax_2 - 8) * 0x1c
1000965d              *ecx_3 &= 0xfffffff7
10009662              int32_t var_8 = *(eax_2 - 8)
10009668              j_sub_10038d80("portal area %d has no front clus…")
10009673              return 0
10009673          
10009632          if (*eax_2 == 0)
10009686              int32_t* ecx_6 = data_10066954 + *(eax_2 - 8) * 0x1c
1000968e              *ecx_6 &= 0xfffffff7
10009693              int32_t var_8_1 = *(eax_2 - 8)
10009699              j_sub_10038d80("portal area %d has no back clust…")
100096a4              return 0
100096a4          
10009634          ecx += 1
10009635          eax_2 += 0x14
1000963a      while (ecx s< edx_10)
1000963a  
10009642  return 1

100096a5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
100096c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100096e0    int32_t sub_100096e0()

100096e0  int32_t result = data_100667e0
100096e0  
100096e8  if (result != 0)
100096fa      if (data_10066978 s< 1)
1000972c          label_1000972c:
1000972c          j_sub_100095c0()
10009731          j_sub_10008620()
10009736          j_sub_10009570()
1000973b          void* eax_2 = data_1006696c
1000973b          
10009742          if (eax_2 != 0)
10009745              j_sub_100390b0(eax_2)
10009745          
10009757          data_1006696c = j_sub_10039000(0x140000)
1000975c          void* eax_4 = data_10066974
1000975c          
10009766          if (eax_4 != 0)
10009769              j_sub_100390b0(eax_4)
10009769          
1000977b          data_10066974 = j_sub_10039000(0x40000)
10009780          void* eax_6 = data_1006697c
10009780          
1000978a          if (eax_6 != 0)
1000978d              j_sub_100390b0(eax_6)
1000978d          
100097a2          data_1006697c = j_sub_10039000(0xc0000)
100097a2          
100097a7          while (true)
100097a7              data_10066968 = 1
100097ad              data_10066970 = 0
100097b7              data_10066978 = 1
100097bd              j_sub_10008c80()
100097bd              
100097c9              if (j_sub_10008b40() != 0 && j_sub_10009610() != 0)
100097d2                  break
100097d2          
100097d4          int32_t eax_10 = data_10066968
100097d9          data_100667e8 = 1
100097e6          data_10063fe8(1, "\r%6d portals created\n", eax_10)
100097f9          return data_10063fe8(1, "\r%6d clusters created\n", data_10066978)
100097f9      
10009709      int32_t eax_1
10009709      int16_t x87control
10009709      int16_t x87control_1
10009709      eax_1, x87control_1 = __ftol(x87control, j_sub_10038990("forceclustering"))
10009709      
10009710      if (eax_1 != 0)
10009710          goto label_1000972c
10009710      
1000971f      result = __ftol(x87control_1, j_sub_10038990("forcereachability"))
1000971f      
10009726      if (result != 0)
10009726          goto label_1000972c
10009726  
10009803  return result

10009804              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10009820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10009860    int32_t sub_10009860()

10009890  int32_t result
10009890  
10009890  for (int32_t i = 0; i s< 0x400; i += 4)
10009863      result = *(i + &data_100670c0)
10009863      
1000986b      if (result != 0)
10009874          result = data_10064004(result, 0, 0, 0xffffffff)
1000987d          *(i + &data_10066cc0) = 0
1000987d  
10009893  return result

10009894                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
100098a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100098b0    int32_t sub_100098b0(int32_t arg1, int32_t arg2, int32_t arg3)

100098f3  int32_t eax_5
100098f3  
100098f3  for (int32_t i = 0; i s< 0x100; i += 1)
100098bc      if (*((i << 2) + &data_100670c0) == 0)
100098c4          *((i << 2) + &data_100670c0) = data_10063ffc()
100098d0          int32_t eax_4 = data_10066b14 + 1
100098d1          *((i << 2) + &data_10066cc0) = 0
100098dc          data_10066b14 = eax_4
100098dc      
100098e1      eax_5 = *((i << 2) + &data_10066cc0)
100098e1      
100098ea      if (eax_5 == 0)
1000990e          int32_t eax_8 = data_10064004(*((i << 2) + &data_100670c0), arg1, arg2, arg3)
10009917          *((i << 2) + &data_10066cc0) = 1
10009923          return eax_8
10009923  
100098f6  return eax_5

10009924              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10009940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10009950    int32_t sub_10009950(int32_t* arg1, float arg2, int32_t arg3)

100099c9  int32_t result
100099c9  
100099c9  for (int32_t i = 0; i s< 0xc; i += 4)
10009960      int32_t eax_1 = *arg1
10009962      int32_t ecx_1 = arg1[1]
10009965      int32_t edx_1 = arg1[2]
10009968      int32_t var_c = eax_1
10009970      int32_t var_8_1 = ecx_1
10009974      int32_t var_4_1 = edx_1
10009978      long double x87_r7_2 = fconvert.t(arg2) + fconvert.t(*(&var_c + i))
1000997c      int32_t var_18 = eax_1
10009980      int32_t var_14_1 = ecx_1
10009984      int32_t var_10_1 = edx_1
10009991      *(&var_c + i) = fconvert.s(x87_r7_2)
1000999f      *(&var_18 + i) = fconvert.s(fconvert.t(*(&var_18 + i)) - fconvert.t(arg2))
100099a3      j_sub_100098b0(&var_c, &var_18, arg3)
100099ba      result = data_10064004(data_10063ffc(), &var_c, &var_18, arg3)
100099ba  
100099d1  return result

100099d2                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
100099e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10009a10    int32_t sub_10009a10(int32_t* arg1, int32_t arg2, float arg3, float arg4, int32_t arg5)

10009a1c  int32_t edx = arg1[1]
10009a1f  int32_t var_24 = *arg1
10009a26  int32_t var_20 = edx
10009a2c  int32_t var_1c = arg1[2]
10009a30  int32_t ecx_2 = arg1[1]
10009a33  int32_t var_30 = *arg1
10009a3a  int32_t var_2c = ecx_2
10009a40  int32_t var_28 = arg1[2]
10009a44  int32_t edx_3 = arg1[1]
10009a47  int32_t var_18 = *arg1
10009a4e  int32_t var_14 = edx_3
10009a59  int32_t var_10 = arg1[2]
10009a5d  int32_t ecx_5 = arg1[1]
10009a60  int32_t var_c = *arg1
10009a69  int32_t var_4 = arg1[2]
10009a6d  int32_t var_8 = ecx_5
10009a77  int32_t temp1 = mods.dp.d(sx.q(arg4), 3)
10009a84  int32_t temp1_1 = mods.dp.d(sx.q(arg4 i+ 1), 3)
10009a95  int32_t temp1_2 = mods.dp.d(sx.q(arg4 i+ 2), 3)
10009a9d  (&var_24)[temp1_1] = fconvert.s(fconvert.t((&var_24)[temp1_1]) - fconvert.t(6f))
10009aad  long double x87_r7_3 = fconvert.t((&var_24)[temp1_2]) - fconvert.t(6f)
10009ab3  (&var_24)[temp1_2] = fconvert.s(x87_r7_3)
10009ac1  (&var_30)[temp1_1] = fconvert.s(fconvert.t((&var_30)[temp1_1]) + fconvert.t(6f))
10009ac9  long double x87_r6_3 = fconvert.t((&var_30)[temp1_2]) + fconvert.t(6f)
10009ad3  (&var_30)[temp1_2] = fconvert.s(x87_r6_3)
10009ae1  (&var_18)[temp1_1] = fconvert.s(fconvert.t((&var_18)[temp1_1]) + fconvert.t(6f))
10009ae9  long double x87_r6_7 = fconvert.t((&var_18)[temp1_2]) - fconvert.t(6f)
10009af3  (&var_18)[temp1_2] = fconvert.s(x87_r6_7)
10009aff  int32_t __saved_edi
10009aff  (&__saved_edi)[temp1_1 + 0xf] =
10009aff      fconvert.s(fconvert.t((&__saved_edi)[temp1_1 + 0xf]) - fconvert.t(6f))
10009b05  long double x87_r6_11 = fconvert.t((&var_c)[temp1_2]) + fconvert.t(6f)
10009b0b  float var_38 = fconvert.s(x87_r6_11)
10009b0f  (&var_c)[temp1_2] = fconvert.s(x87_r6_11)
10009b25  long double x87_r7_7 = (fconvert.t(arg3) - (
10009b25      fconvert.t(*(arg2 + (temp1_1 << 2))) * fconvert.t((&var_24)[temp1_1])
10009b25      + x87_r7_3 * fconvert.t(*(arg2 + (temp1_2 << 2))))) / fconvert.t(*(arg2 + (temp1 << 2)))
10009b28  int32_t ebx = 0
10009b2f  (&var_24)[temp1] = fconvert.s(x87_r7_7)
10009b47  long double x87_r7_12 = (fconvert.t(arg3) - (
10009b47      fconvert.t(fconvert.s(x87_r6_3)) * fconvert.t(*(arg2 + (temp1_2 << 2)))
10009b47      + fconvert.t(*(arg2 + (temp1_1 << 2))) * fconvert.t((&var_30)[temp1_1])))
10009b47      / fconvert.t(*(arg2 + (temp1 << 2)))
10009b4a  (&var_30)[temp1] = fconvert.s(x87_r7_12)
10009b62  long double x87_r7_17 = (fconvert.t(arg3) - (
10009b62      fconvert.t(fconvert.s(x87_r6_7)) * fconvert.t(*(arg2 + (temp1_2 << 2)))
10009b62      + fconvert.t(*(arg2 + (temp1_1 << 2))) * fconvert.t((&var_18)[temp1_1])))
10009b62      / fconvert.t(*(arg2 + (temp1 << 2)))
10009b65  (&var_18)[temp1] = fconvert.s(x87_r7_17)
10009b75  float* edi_2 = &var_38
10009b79  int32_t i = 0
10009b81  long double x87_r7_22 = (fconvert.t(arg3) - (
10009b81      fconvert.t(var_38) * fconvert.t(*(arg2 + (temp1_2 << 2)))
10009b81      + fconvert.t(*(arg2 + (temp1_1 << 2))) * fconvert.t((&__saved_edi)[temp1_1 + 0xf])))
10009b81      / fconvert.t(*(arg2 + (temp1 << 2)))
10009b84  (&var_c)[temp1] = fconvert.s(x87_r7_22)
10009b84  
10009b8e  while (i s< 0x400)
10009b90      float eax_8 = *(i + &data_100670c0)
10009b90      
10009b98      if (eax_8 == 0)
10009b9a          float eax_9 = data_10063ffc()
10009ba0          *(i + &data_100670c0) = eax_9
10009ba6          *edi_2 = eax_9
10009bad          ebx += 1
10009bae          edi_2 = &edi_2[1]
10009bb1          int32_t eax_11 = data_10066b14 + 1
10009bb2          *(i + &data_10066cc0) = 1
10009bb8          data_10066b14 = eax_11
10009b98      else if (*(i + &data_10066cc0) == 0)
10009bc9          *edi_2 = eax_8
10009bcb          ebx += 1
10009bcc          edi_2 = &edi_2[1]
10009bcf          *(i + &data_10066cc0) = 1
10009bcf      
10009bd5      i += 4
10009bd5      
10009bdb      if (ebx s>= 2)
10009bdb          break
10009bdb  
10009bf1  data_10064004(var_38, &var_24, &var_30, arg5)
10009c17  int32_t var_34
10009c17  return data_10064004(var_34, &var_18, &var_c, arg5)

10009c18                                                                          90 90 90 90 90 90 90 90                          ........
10009c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10009cb0    int32_t sub_10009cb0(float arg1, float* arg2, float arg3)

10009cb3  float* eax = arg1
10009cb7  float* ecx = arg3
10009cc2  long double x87_r7_1 = fconvert.t(*eax) + fconvert.t(*ecx)
10009ccf  float var_60 = fconvert.s(x87_r7_1)
10009cd6  long double x87_r6_1 = fconvert.t(ecx[1]) + fconvert.t(eax[1])
10009cd9  float var_5c = fconvert.s(x87_r6_1)
10009ce0  long double x87_r5_1 = fconvert.t(ecx[2]) + fconvert.t(eax[2])
10009ce3  arg1 = fconvert.s(x87_r5_1)
10009cea  float var_58 = fconvert.s(x87_r5_1)
10009cf0  long double x87_r5_3 = fconvert.t(*eax) + fconvert.t(*arg2)
10009cf9  float var_4c = arg1
10009d04  float var_54 = fconvert.s(x87_r5_3)
10009d0f  float var_50 = fconvert.s(x87_r6_1)
10009d16  long double x87_r6_3 = fconvert.t(arg2[1]) + fconvert.t(eax[1])
10009d19  float var_48 = fconvert.s(x87_r5_3)
10009d24  float var_40 = arg1
10009d36  float var_44 = fconvert.s(x87_r6_3)
10009d3a  float var_38 = fconvert.s(x87_r6_3)
10009d45  float var_3c = fconvert.s(x87_r7_1)
10009d4c  long double x87_r7_3 = fconvert.t(arg2[2]) + fconvert.t(eax[2])
10009d4f  float var_34 = arg1
10009d58  void var_30
10009d58  __builtin_memcpy(dest: &var_30, src: &var_60, n: 0x30)
10009d5a  void var_28
10009d5a  void* eax_1 = &var_28
10009d5e  int32_t i_2 = 4
10009d69  int32_t i
10009d69  
10009d69  do
10009d63      *eax_1 = fconvert.s(x87_r7_3)
10009d65      eax_1 += 0xc
10009d68      i = i_2
10009d68      i_2 -= 1
10009d69  while (i != 1)
10009d6d  arg1 = 1.40129846e-45f
10009d78  float* ebp = &var_60
10009e4b  float eax_11
10009e4b  
10009e4b  do
10009d7c      int32_t ebx_1 = 0
10009d7e      int32_t var_6c
10009d7e      int32_t* edi_1 = &var_6c
10009d82      int32_t i_1 = 0
10009d82      
10009d8a      while (i_1 s< 0x400)
10009d8c          int32_t eax_2 = *(i_1 + &data_100670c0)
10009d8c          
10009d94          if (eax_2 == 0)
10009d96              int32_t eax_3 = data_10063ffc()
10009d9c              *(i_1 + &data_100670c0) = eax_3
10009da2              *edi_1 = eax_3
10009da9              ebx_1 += 1
10009daa              edi_1 = &edi_1[1]
10009dad              int32_t eax_5 = data_10066b14 + 1
10009dae              *(i_1 + &data_10066cc0) = 1
10009db8              data_10066b14 = eax_5
10009d94          else if (*(i_1 + &data_10066cc0) == 0)
10009dc9              *edi_1 = eax_2
10009dcb              ebx_1 += 1
10009dcc              edi_1 = &edi_1[1]
10009dcf              *(i_1 + &data_10066cc0) = 1
10009dcf          
10009dd9          i_1 += 4
10009dd9          
10009ddf          if (ebx_1 s>= 3)
10009ddf              break
10009ddf      
10009de8      int32_t var_80 = 0xf2f2f0f0
10009e00      int32_t var_8c = var_6c
10009e01      data_10064004(var_8c, ebp, &(&var_80)[(arg1 & 3) * 3 + 8], var_80)
10009e12      int32_t var_90 = 0xf2f2f0f0
10009e1a      int32_t var_68
10009e1a      data_10064004(var_68, &ebp[0xc], &(&var_8c)[(arg1 & 3) * 3 + 0x17], var_90)
10009e2c      int32_t var_64
10009e2c      data_10064004(var_64, ebp, &ebp[0xc], 0xf2f2f0f0)
10009e3c      eax_11 = arg1 i+ 1
10009e3d      ebp = &ebp[3]
10009e40      arg1 = eax_11
10009e4b  while (eax_11 i- 1 s< 4)
10009e4b  
10009e58  return eax_11 i- 1

10009e59                                                                             90 90 90 90 90 90 90                           .......
10009e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10009ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10009ed0    int32_t sub_10009ed0(int32_t arg1)

10009ee2  int32_t edi = 0xdcdddedf
10009ee2  
10009ee7  if (arg1 s>= data_10066938)
10009ef1      data_10063fe8(3, "facenum %d out of range\n", arg1)
10009ef1  
10009efa  int32_t ecx = data_1006693c
10009f00  int32_t eax = arg1 * 3
10009f03  int32_t i = 0
10009f05  int32_t* ebx = ecx + (eax << 3)
10009f05  
10009f0e  if (*(ecx + (eax << 3) + 8) s> 0)
10009fa5      do
10009f21          int32_t eax_4
10009f21          int32_t edx_3
10009f21          edx_3:eax_4 = sx.q(*(data_10066934 + ((ebx[3] + i) << 2)))
10009f2b          int32_t esi_3 = (eax_4 ^ edx_3) - edx_3
10009f2b          
10009f2f          if (esi_3 s>= data_10066928)
10009f39              data_10063fe8(3, "edgenum %d out of range\n", esi_3)
10009f39          
10009f42          int32_t ecx_1 = data_1006692c
10009f42          
10009f4e          if (edi == 0xf2f2f0f0)
10009f50              edi = 0xd0d1d2d3
10009f4e          else if (edi != 0xd0d1d2d3)
10009f6c              int32_t edi_2 = neg.d(edi + 0xc0c0e0f)
10009f76              edi = (sbb.d(edi_2, edi_2, edi != 0xf3f3f1f1) & 0x16151211) - 0x23222121
10009f5d          else
10009f5f              edi = 0xf3f3f1f1
10009f5f          
10009f87          int32_t eax_7 = data_1006691c
10009f97          j_sub_100098b0(eax_7 + *(ecx_1 + (esi_3 << 3)) * 0xc, 
10009f97              eax_7 + *(ecx_1 + (esi_3 << 3) + 4) * 0xc, edi)
10009fa2          i += 1
10009fa5      while (i s< ebx[2])
10009fa5  
10009fb9  float* esi_5 = data_10066924 + *ebx * 0x14
10009fca  int32_t eax_13
10009fca  int32_t edx_8
10009fca  edx_8:eax_13 = sx.q(*(data_10066934 + (ebx[3] << 2)))
10009fcf  int32_t* eax_16 = data_1006692c + (((eax_13 ^ edx_8) - edx_8) << 3)
10009fd7  int32_t ecx_6 = data_1006691c
10009fe0  float var_18 = fconvert.s(fconvert.t(*(ecx_6 + *eax_16 * 0xc)))
10009ff1  float var_14 = fconvert.s(fconvert.t(*(ecx_6 + *eax_16 * 0xc + 4)))
1000a002  float var_10 = fconvert.s(fconvert.t(*(ecx_6 + *eax_16 * 0xc + 8)))
1000a00e  float var_c
1000a00e  j_sub_10043380(&var_18, 20f, esi_5, &var_c)
1000a031  return j_sub_100098b0(&var_18, &var_c, 0xf2f2f0f0)

1000a032                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1000a040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000a0a0    int32_t sub_1000a0a0(int32_t arg1, int32_t arg2)

1000a0a6  int32_t i = arg1
1000a0ad  int32_t ecx = data_10066948
1000a0b5  int32_t ebp = 0
1000a0bb  int32_t var_410 = 0
1000a0bb  
1000a0c7  if (i s< 0 || i s>= ecx)
1000a2c6      return data_10063fe8(3, "area %d out of range [0, %d]\n", i, ecx)
1000a2c6  
1000a0d9  void* ebx_3 = i * 0x30 + data_1006694c
1000a0db  int32_t i_1 = 0
1000a0df  void* var_404_1 = ebx_3
1000a0e6  void var_400
1000a0e6  
1000a0e6  if (*(ebx_3 + 4) s> 0)
1000a1c4      do
1000a0fe          int32_t eax_3
1000a0fe          int32_t edx_1
1000a0fe          edx_1:eax_3 = sx.q(*(data_10066944 + ((i_1 + *(ebx_3 + 8)) << 2)))
1000a108          int32_t esi_3 = (eax_3 ^ edx_1) - edx_1
1000a108          
1000a10c          if (esi_3 s>= data_10066938)
1000a116              data_10063fe8(3, "facenum %d out of range\n", esi_3)
1000a116          
1000a127          void* edi_1 = data_1006693c + esi_3 * 0x18
1000a127          
1000a139          if (arg2 == 0 || (*(edi_1 + 4) & 6) != 0)
1000a13e              int32_t j = 0
1000a13e              
1000a142              if (*(edi_1 + 8) s> 0)
1000a148                  int32_t __saved_edi
1000a148                  void* var_408_1 = &(&__saved_edi)[ebp + 8]
1000a148                  
1000a1b0                  do
1000a159                      int32_t eax_10
1000a159                      int32_t edx_5
1000a159                      edx_5:eax_10 = sx.q(*(data_10066934 + ((*(edi_1 + 0xc) + j) << 2)))
1000a163                      int32_t k = (eax_10 ^ edx_5) - edx_5
1000a163                      
1000a167                      if (k s>= data_10066928)
1000a171                          data_10063fe8(3, "edgenum %d out of range\n", k)
1000a171                      
1000a17a                      int32_t eax_12 = 0
1000a17a                      
1000a17e                      if (ebp s> 0)
1000a180                          void* ecx_5 = &var_400
1000a180                          
1000a186                          while (*ecx_5 != k)
1000a188                              eax_12 += 1
1000a189                              ecx_5 += 4
1000a189                              
1000a18e                              if (eax_12 s>= ebp)
1000a18e                                  break
1000a18e                      
1000a19a                      if (eax_12 == ebp && ebp s< 0x100)
1000a1a0                          ebp += 1
1000a1a1                          *var_408_1 = k
1000a1a6                          var_408_1 += 4
1000a1a6                      
1000a1ad                      j += 1
1000a1b0                  while (j s< *(edi_1 + 8))
1000a1b0              
1000a1b2              ebx_3 = var_404_1
1000a1b2          
1000a1bd          i = i_1 + 1
1000a1c0          i_1 = i
1000a1c4      while (i s< *(ebx_3 + 4))
1000a1c4  
1000a1ca  int32_t edi_2 = 0
1000a1ca  
1000a1ce  if (ebp s> 0)
1000a1d4      void* ebx_4 = &var_400
1000a1d4      
1000a2b6      do
1000a1d8          int32_t esi_6 = 0
1000a1d8          
1000a1e3          while (true)
1000a1e3              if (*((esi_6 << 2) + &data_100670c0) == 0)
1000a1eb                  *((esi_6 << 2) + &data_100670c0) = data_10063ffc()
1000a1f7                  int32_t eax_20 = data_10066b14 + 1
1000a1f8                  *((esi_6 << 2) + &data_10066cc0) = 0
1000a203                  data_10066b14 = eax_20
1000a203              
1000a208              i = *((esi_6 << 2) + &data_10066cc0)
1000a208              
1000a211              if (i == 0)
1000a211                  break
1000a211              
1000a213              esi_6 += 1
1000a213              
1000a21a              if (esi_6 s>= 0x100)
1000a2d9                  return i
1000a2d9          
1000a228          if (esi_6 s>= 0x100)
1000a228              break
1000a228          
1000a23f          int32_t* edx_7 = data_1006692c + (*ebx_4 << 3)
1000a23f          
1000a242          if (var_410 == 0xf2f2f0f0)
1000a244              var_410 = 0xf3f3f1f1
1000a242          else if (var_410 != 0xf3f3f1f1)
1000a264              int32_t eax_23 = neg.d(var_410 + 0x2f2e2d2d)
1000a272              var_410 =
1000a272                  (sbb.d(eax_23, eax_23, var_410 != 0xd0d1d2d3) & 0x16151211) - 0x23222121
1000a253          else
1000a255              var_410 = 0xd0d1d2d3
1000a255          
1000a27a          int32_t ecx_8 = data_1006691c
1000a29c          i = data_10064004(*((esi_6 << 2) + &data_100670c0), ecx_8 + *edx_7 * 0xc, 
1000a29c              ecx_8 + edx_7[1] * 0xc, var_410)
1000a2a5          edi_2 += 1
1000a2a6          ebx_4 += 4
1000a2ab          *((esi_6 << 2) + &data_10066cc0) = 1
1000a2b6      while (edi_2 s< ebp)
1000a2b6  
1000a2d9  return i

1000a2da                                                                                90 90 90 90 90 90                            ......
1000a2e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000a370    int32_t sub_1000a370(int32_t* arg1, float arg2, int32_t arg3)

1000a3d1  int32_t result
1000a3d1  
1000a3d1  for (int32_t i = 0; i s< 0xc; i += 4)
1000a380      int32_t eax_1 = *arg1
1000a382      int32_t ecx_1 = arg1[1]
1000a385      int32_t edx_1 = arg1[2]
1000a388      int32_t var_c = eax_1
1000a390      int32_t var_8_1 = ecx_1
1000a394      int32_t var_4_1 = edx_1
1000a398      long double x87_r7_2 = fconvert.t(arg2) + fconvert.t(*(&var_c + i))
1000a39c      int32_t var_18 = eax_1
1000a3a0      int32_t var_14_1 = ecx_1
1000a3a4      int32_t var_10_1 = edx_1
1000a3b1      *(&var_c + i) = fconvert.s(x87_r7_2)
1000a3bf      *(&var_18 + i) = fconvert.s(fconvert.t(*(&var_18 + i)) - fconvert.t(arg2))
1000a3c3      result = j_sub_100098b0(&var_c, &var_18, arg3)
1000a3c3  
1000a3d9  return result

1000a3da                                                                                90 90 90 90 90 90                            ......
1000a3e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000a400    int32_t sub_1000a400() __pure

1000a400  return 

1000a401     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

1000a420    int32_t sub_1000a420(float* arg1, float* arg2, int32_t arg3, int32_t arg4)

1000a42f  long double x87_r7_1 = fconvert.t(*arg2) - fconvert.t(*arg1)
1000a435  float var_30 = 0f
1000a43e  float var_2c = 0f
1000a446  float var_28 = 1f
1000a44e  float var_3c = fconvert.s(x87_r7_1)
1000a458  float var_38 = fconvert.s(fconvert.t(arg2[1]) - fconvert.t(arg1[1]))
1000a462  float var_34 = fconvert.s(fconvert.t(arg2[2]) - fconvert.t(arg1[2]))
1000a466  j_sub_10043290(&var_3c)
1000a48a  long double x87_r7_10 = fconvert.t(var_34) * fconvert.t(var_28)
1000a48a      + fconvert.t(var_38) * fconvert.t(var_2c) + fconvert.t(var_3c) * fconvert.t(var_30)
1000a48c  long double temp0 = fconvert.t(0.98999999999999999)
1000a48c  x87_r7_10 - temp0
1000a497  long double temp1_1
1000a497  
1000a497  if ((((x87_r7_10 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_10, temp0) ? 1 : 0) << 0xa
1000a497          | (x87_r7_10 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
1000a499      temp1_1 = fconvert.t(-0.98999999999999999)
1000a499      x87_r7_10 - temp1_1
1000a499  
1000a4a4  float var_18
1000a4a4  
1000a4a4  if ((((x87_r7_10 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_10, temp0) ? 1 : 0) << 0xa
1000a4a4          | (x87_r7_10 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0 || ((
1000a4a4          (x87_r7_10 < temp1_1 ? 1 : 0) << 8
1000a4a4          | (is_unordered.t(x87_r7_10, temp1_1) ? 1 : 0) << 0xa
1000a4a4          | (x87_r7_10 == temp1_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1000a4c1      var_18 = 1f
1000a4c9      int32_t var_14_1 = 0
1000a4d1      int32_t var_10_1 = 0
1000a4a4  else
1000a4b5      j_sub_100434b0(&var_3c, &var_30, &var_18)
1000a4b5  
1000a4e9  float var_24
1000a4e9  j_sub_10043380(arg2, -6f, &var_3c, &var_24)
1000a4fa  float var_c = var_24
1000a4fe  int32_t var_20
1000a4fe  int32_t var_8 = var_20
1000a50a  int32_t var_1c
1000a50a  int32_t var_4 = var_1c
1000a51a  j_sub_10043380(&var_24, 6f, &var_18, &var_24)
1000a533  j_sub_10043380(&var_c, -6f, &var_18, &var_c)
1000a542  j_sub_100098b0(arg1, arg2, arg3)
1000a555  j_sub_100098b0(&var_24, arg2, arg4)
1000a571  return j_sub_100098b0(&var_c, arg2, arg4)

1000a572                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1000a580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a5a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a5c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000a5e0    int32_t sub_1000a5e0(int32_t* arg1)

1000a5f2  j_sub_1000a0a0(*arg1, 1)
1000a609  j_sub_1000a420(&arg1[3], &arg1[6], 0xf3f3f1f1, 0xdcdddedf)
1000a60e  int32_t eax_1 = arg1[9]
1000a620  float var_7c
1000a620  float var_74
1000a620  float var_68
1000a620  void var_50
1000a620  
1000a620  if (eax_1 == 5 || eax_1 == 7)
1000a6e7      j_sub_10010780(*(data_10064068 + 0x10), &arg1[3], &arg1[6], &var_7c)
1000a6f4      int32_t var_6c_2 = 0
1000a6fd      var_74 = fconvert.s(fconvert.t(arg1[6]) - fconvert.t(arg1[3]))
1000a707      float var_70_2 = fconvert.s(fconvert.t(arg1[7]) - fconvert.t(arg1[4]))
1000a70b      j_sub_10043290(&var_74)
1000a721      j_sub_10043570(&var_74, var_7c, &var_68)
1000a754      int32_t var_60_1 = *(data_10064068 + 0x10)
1000a758      j_sub_1000f840(&var_50, 0xffffffff, &arg1[3], 2, 1, &data_100631cc, &var_68, 3, 0x1e, 
1000a758          0.100000001f, 0x3d, 1)
1000a75d      eax_1 = arg1[9]
1000a75d      
1000a766      if (eax_1 == 5)
1000a76e          j_sub_1000f010(arg1, &var_74)
1000a782          return j_sub_1000a370(&var_74, 4f, 0xf3f3f1f1)
1000a620  else if (eax_1 == 0xc)
1000a635      float var_78 = fconvert.s(j_sub_1000f750(&arg1[3]))
1000a645      j_sub_10010780(var_78, &arg1[3], &arg1[6], &var_7c)
1000a652      int32_t var_6c_1 = 0
1000a65b      var_74 = fconvert.s(fconvert.t(arg1[6]) - fconvert.t(arg1[3]))
1000a665      float var_70_1 = fconvert.s(fconvert.t(arg1[7]) - fconvert.t(arg1[4]))
1000a669      j_sub_10043290(&var_74)
1000a67f      j_sub_10043570(&var_74, var_7c, &var_68)
1000a6a1      float var_54 = var_78
1000a6b2      float var_5c = 0f
1000a6bd      int32_t var_58 = 0
1000a6c8      int32_t eax_2
1000a6c8      int80_t st0_3
1000a6c8      eax_2, st0_3 = j_sub_1000f840(&var_50, 0xffffffff, &arg1[3], 2, 1, &var_5c, &var_68, 
1000a6c8          3, 0x1e, 0.100000001f, 0x3d, 1)
1000a6d6      return eax_2
1000a790  return eax_1

1000a791                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1000a7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a7e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000a810    int32_t sub_1000a810(int32_t arg1)

1000a81e  if (arg1 != data_10062938)
1000a820      data_1006293c = 0
1000a826      data_10062938 = arg1
1000a826  
1000a833  int32_t edx_2 = arg1 * 7
1000a835  int32_t eax = data_10066954
1000a83d  int32_t result = *(eax + (edx_2 << 2) + 0x14)
1000a83d  
1000a843  if (result == 0)
1000a8d3      return result
1000a8d3  
1000a84f  if (data_1006293c s>= result)
1000a851      data_1006293c = 0
1000a851  
1000a85c  long double x87_r7_2 = j_sub_1000e120() - fconvert.t(data_10062934)
1000a862  long double temp0_1 = fconvert.t(1.5)
1000a862  x87_r7_2 - temp0_1
1000a868  result.w = (x87_r7_2 < temp0_1 ? 1 : 0) << 8
1000a868      | (is_unordered.t(x87_r7_2, temp0_1) ? 1 : 0) << 0xa
1000a868      | (x87_r7_2 == temp0_1 ? 1 : 0) << 0xe
1000a868  
1000a86d  if ((result:1.b & 0x41) == 0)
1000a872      int32_t edx_3 = data_1006293c
1000a895      __builtin_memcpy(dest: &data_10062908, 
1000a895          src: data_1006695c + (*(eax + (edx_2 << 2) + 0x18) + edx_3) * 0x2c, n: 0x2c)
1000a897      data_1006293c = edx_3 + 1
1000a89d      long double st0_2 = j_sub_1000e120()
1000a8a2      int32_t edx_5 = data_1006292c
1000a8a8      data_10062934 = fconvert.s(st0_2)
1000a8af      j_sub_1000a400()
1000a8bb      data_10063fe8(1, &data_1005b02c, edx_5)
1000a8bb  
1000a8ca  return j_sub_1000a5e0(&data_10062908)

1000a8d4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1000a8e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000a900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000a920    int32_t sub_1000a920(int32_t arg1, int32_t* arg2)

1000a92a  if (data_100667e0 == 0)
1000a933      data_10063fe8(1, "AAS_UpdateEntity: not loaded\n")
1000a944      return 5
1000a944  
1000a94c  int32_t ebx = arg1
1000a95a  int32_t* esi = data_100669a0 + ebx * 0x84
1000a965  esi[2] = fconvert.s(j_sub_1000e120() - fconvert.t(esi[1]))
1000a968  long double st0_1 = j_sub_1000e120()
1000a96d  int32_t edx = esi[4]
1000a970  int32_t eax_4 = esi[5]
1000a973  int32_t ecx_1 = esi[6]
1000a97a  esi[1] = fconvert.s(st0_1)
1000a980  esi[0xd] = edx
1000a983  esi[0xe] = eax_4
1000a986  esi[0xf] = ecx_1
1000a98c  arg1 = 0
1000a994  esi[0xa] = arg2[6]
1000a99a  esi[0xb] = arg2[7]
1000a9a0  esi[0xc] = arg2[8]
1000a9a6  esi[0x16] = arg2[0xf]
1000a9ac  esi[0x17] = arg2[0x10]
1000a9b2  esi[0x18] = arg2[0x11]
1000a9b8  esi[0x19] = arg2[0x12]
1000a9be  esi[0x1a] = arg2[0x13]
1000a9c4  esi[0x1b] = arg2[0x14]
1000a9ca  esi[0x1d] = arg2[0x16]
1000a9d0  esi[0x1e] = arg2[0x17]
1000a9d3  int32_t eax_9 = esi[0x16]
1000a9d9  esi[3] = ebx
1000a9dc  *esi = 1
1000a9dc  
1000a9e2  if (eax_9 == 3)
1000a9f6      if (j_sub_10043240(&arg2[3], &esi[7]) == 0)
1000a9fb          arg1 = 1
1000aa03          esi[7] = arg2[3]
1000aa09          esi[8] = arg2[4]
1000aa0f          esi[9] = arg2[5]
1000aa0f      
1000aa25      j_sub_10005e60(esi[0x17] - 1, &esi[7], &esi[0x10], &esi[0x13], nullptr)
1000a9e2  else if (eax_9 == 2)
1000aa3c      int32_t eax_17 = j_sub_10043240(&arg2[9], &esi[0x10])
1000aa46      int32_t eax_18
1000aa46      
1000aa46      if (eax_17 != 0)
1000aa50          eax_18 = j_sub_10043240(&arg2[0xc], &esi[0x13])
1000aa50      
1000aa5a      if (eax_17 == 0 || eax_18 == 0)
1000aa5f          arg1 = 1
1000aa67          esi[0x10] = arg2[9]
1000aa6d          esi[0x11] = arg2[0xa]
1000aa73          esi[0x12] = arg2[0xb]
1000aa79          esi[0x13] = arg2[0xc]
1000aa7f          esi[0x14] = arg2[0xd]
1000aa85          esi[0x15] = arg2[0xe]
1000aa85  
1000aa94  if (j_sub_10043240(arg2, &esi[4]) == 0)
1000aa98      esi[4] = *arg2
1000aa9e      esi[5] = arg2[1]
1000aaa4      esi[6] = arg2[2]
1000aab5      label_1000aab5:
1000aab5      
1000aab7      if (ebx s> 0)
1000aabd          unimplemented  {fld st0, dword [esi+0x40]}
1000aac0          unimplemented  {fadd dword [ebp]}
1000aac3          float var_c = fconvert.s(unimplemented  {fstp dword [esp+0x1c], st0})
1000aac3          unimplemented  {fstp dword [esp+0x1c], st0}
1000aac7          unimplemented  {fld st0, dword [esi+0x44]}
1000aaca          unimplemented  {fadd dword [esi+0x14]}
1000aacd          float var_8_1 = fconvert.s(unimplemented  {fstp dword [esp+0x20], st0})
1000aacd          unimplemented  {fstp dword [esp+0x20], st0}
1000aad1          unimplemented  {fld st0, dword [esi+0x48]}
1000aad4          unimplemented  {fadd dword [esi+0x18]}
1000aad7          float var_4_1 = fconvert.s(unimplemented  {fstp dword [esp+0x24], st0})
1000aad7          unimplemented  {fstp dword [esp+0x24], st0}
1000aadb          unimplemented  {fld st0, dword [esi+0x4c]}
1000aade          unimplemented  {fadd dword [ebp]}
1000aae1          float var_18 = fconvert.s(unimplemented  {fstp dword [esp+0x10], st0})
1000aae1          unimplemented  {fstp dword [esp+0x10], st0}
1000aae5          unimplemented  {fld st0, dword [esi+0x50]}
1000aae8          unimplemented  {fadd dword [esi+0x14]}
1000aaeb          float var_14_1 = fconvert.s(unimplemented  {fstp dword [esp+0x14], st0})
1000aaeb          unimplemented  {fstp dword [esp+0x14], st0}
1000aaef          unimplemented  {fld st0, dword [esi+0x54]}
1000aaf2          unimplemented  {fadd dword [esi+0x18]}
1000aaf5          float var_10_1 = fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
1000aaf5          unimplemented  {fstp dword [esp+0x18], st0}
1000aafd          j_sub_1001c3f0(esi[0x1f])
1000ab14          esi[0x1f] = j_sub_1001c620(&var_c, &var_18, ebx, 2)
1000ab1e          j_sub_10006090(esi[0x20])
1000ab38          esi[0x20] = j_sub_10006210(&var_c, &var_18, ebx, 0)
1000aa94  else if (arg1 != 0)
1000aaaf      goto label_1000aab5
1000aaaf  
1000ab47  return 0

1000ab48                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1000ab60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ab80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000aba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000abc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000abe0    int32_t sub_1000abe0(int32_t arg1, int32_t arg2)

1000abec  if (data_100667e4 != 0)
1000ac11      if (arg2 s>= 0 && arg2 s< data_10066998)
1000ac31          __builtin_memcpy(dest: arg1, src: data_100669a0 + arg2 * 0x84, n: 0x7c)
1000ac38          return arg1
1000ac38      
1000ac41      data_10063fe8(4, "AAS_EntityInfo: entnum %d out of…", arg2)
1000abec  else
1000abf5      data_10063fe8(4, "AAS_EntityInfo: aasworld not ini…")
1000abf5  
1000ac59  void s
1000ac59  __builtin_memset(&s, c: 0, n: 0x7c)
1000ac69  __builtin_memcpy(dest: arg1, src: &s, n: 0x7c)
1000ac70  return arg1

1000ac71                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1000ac80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000aca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000acb0    int32_t* sub_1000acb0(int32_t arg1, int32_t* arg2)

1000acbe  if (arg1 s< 0 || arg1 s>= data_10066998)
1000acfd      data_10063fe8(4, "AAS_EntityOrigin: entnum %d out …", arg1)
1000ad0a      arg2[2] = 0
1000ad11      arg2[1] = 0
1000ad18      *arg2 = 0
1000ad1e      return arg2
1000ad1e  
1000accd  int32_t eax_3 = arg1 * 0x84
1000acd8  *arg2 = *(eax_3 + data_100669a0 + 0x10)
1000ace4  arg2[1] = *(eax_3 + data_100669a0 + 0x14)
1000aced  int32_t eax_4 = *(eax_3 + data_100669a0 + 0x18)
1000acf1  arg2[2] = eax_4
1000acf4  return eax_4

1000ad1f                                                                                               90                                 .
1000ad20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000ad40    int32_t sub_1000ad40(int32_t arg1)

1000ad4e  if (arg1 s>= 0 && arg1 s< data_10066998)
1000ad61      return *(data_100669a0 + arg1 * 0x84 + 0x5c)
1000ad61  
1000ad6a  data_10063fe8(4, "AAS_EntityModelindex: entnum %d …", arg1)
1000ad75  return 0

1000ad76                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1000ad80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000ad90    int32_t sub_1000ad90(int32_t arg1)

1000ad97  if (data_100667e4 != 0)
1000ada7      if (arg1 s>= 0 && arg1 s< data_10066998)
1000adba          return *(data_100669a0 + arg1 * 0x84 + 0x78)
1000adba      
1000adc3      data_10063fe8(4, "AAS_EntityRenderFX: entnum %d ou…", arg1)
1000adc3  
1000adce  return 0

1000adcf                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

1000ade0    int32_t sub_1000ade0(int32_t arg1)

1000ade7  if (data_100667e4 != 0)
1000adf7      if (arg1 s>= 0 && arg1 s< data_10066998)
1000ae0b          return *(data_100669a0 + arg1 * 0x84 + 0x5c) - 1
1000ae0b      
1000ae14      data_10063fe8(4, "AAS_EntityModelNum: entnum %d ou…", arg1)
1000ae14  
1000ae1f  return 0

1000ae20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000ae30    int32_t sub_1000ae30(int32_t arg1, int32_t* arg2)

1000ae30  int32_t edx_2 = data_10066998
1000ae36  int32_t ecx = 0
1000ae36  
1000ae3c  if (edx_2 s> 0)
1000ae3e      void* eax_1 = data_100669a0
1000ae3e      
1000ae57      do
1000ae4d          if (*(eax_1 + 0x5c) - 1 == arg1)
1000ae67              *arg2 = *(eax_1 + 0x10)
1000ae6c              arg2[1] = *(eax_1 + 0x14)
1000ae72              arg2[2] = *(eax_1 + 0x18)
1000ae7a              return 1
1000ae7a          
1000ae4f          ecx += 1
1000ae50          eax_1 += 0x84
1000ae57      while (ecx s< edx_2)
1000ae57  
1000ae5d  return 0

1000ae7b                                                                                   90 90 90 90 90                             .....
1000ae80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000aea0    int32_t sub_1000aea0(int32_t arg1, int32_t* arg2, int32_t* arg3)

1000aea0  int32_t eax_3 = data_100667e4
1000aea0  
1000aea7  if (eax_3 == 0)
1000af05      return eax_3
1000af05  
1000aeb7  if (arg1 s< 0 || arg1 s>= data_10066998)
1000aefc      return data_10063fe8(4, "AAS_EntitySize: entnum %d out of…", arg1)
1000aefc  
1000aec6  void* eax_1 = data_100669a0 + arg1 * 0x84
1000aed0  *arg2 = *(eax_1 + 0x40)
1000aed5  arg2[1] = *(eax_1 + 0x44)
1000aedb  arg2[2] = *(eax_1 + 0x48)
1000aee5  *arg3 = *(eax_1 + 0x4c)
1000aeea  arg3[1] = *(eax_1 + 0x50)
1000aeed  int32_t eax_2 = *(eax_1 + 0x54)
1000aef0  arg3[2] = eax_2
1000aef3  return eax_2

1000af06                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
1000af20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000af30    int32_t sub_1000af30(int32_t arg1, int32_t* arg2)

1000af41  void* eax = data_100669a0 + arg1 * 0x84
1000af4b  *arg2 = *(eax + 0x10)
1000af50  arg2[1] = *(eax + 0x14)
1000af56  arg2[2] = *(eax + 0x18)
1000af5c  arg2[3] = *(eax + 0x1c)
1000af62  arg2[4] = *(eax + 0x20)
1000af68  arg2[5] = *(eax + 0x24)
1000af71  arg2[6] = fconvert.s(fconvert.t(*(eax + 0x40)) + fconvert.t(*(eax + 0x10)))
1000af7a  arg2[7] = fconvert.s(fconvert.t(*(eax + 0x44)) + fconvert.t(*(eax + 0x14)))
1000af83  arg2[8] = fconvert.s(fconvert.t(*(eax + 0x48)) + fconvert.t(*(eax + 0x18)))
1000af8c  arg2[9] = fconvert.s(fconvert.t(*(eax + 0x4c)) + fconvert.t(*(eax + 0x10)))
1000af95  arg2[0xa] = fconvert.s(fconvert.t(*(eax + 0x50)) + fconvert.t(*(eax + 0x14)))
1000af9e  arg2[0xb] = fconvert.s(fconvert.t(*(eax + 0x54)) + fconvert.t(*(eax + 0x18)))
1000afa4  arg2[0xc] = *(eax + 0x58)
1000afaa  int32_t result = *(eax + 0x5c) - 1
1000afab  arg2[0xd] = result
1000afae  return result

1000afaf                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1000afc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000afd0    int32_t sub_1000afd0(int32_t* arg1, int32_t arg2, int32_t arg3)

1000afdc  int32_t ecx = arg1[1]
1000afdf  long double x87_r7 = fconvert.t(arg1[2])
1000afe2  int32_t var_60 = *arg1
1000aff0  int32_t var_5c = ecx
1000b008  float var_58 = fconvert.s(x87_r7 - fconvert.t(100f))
1000b020  void var_54
1000b020  __builtin_memcpy(dest: &var_54, 
1000b020      src: j_sub_10003010(&var_54, arg1, arg2, arg3, &var_60, 0, 3), n: 0x54)
1000b028  int32_t var_50
1000b028  
1000b028  if (var_50 != 0)
1000b032      return 0
1000b032  
1000b040  int32_t var_48
1000b040  *arg1 = var_48
1000b042  int32_t var_44
1000b042  arg1[1] = var_44
1000b045  int32_t var_40
1000b045  arg1[2] = var_40
1000b052  return 1

1000b053                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1000b060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000b080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000b090    int32_t sub_1000b090()

1000b090  int32_t result = data_10066998
1000b097  int32_t i = 0
1000b097  
1000b09b  if (result s> 0)
1000b09e      result = 0
1000b09e      
1000b0c5      do
1000b0a6          i += 1
1000b0a7          *(result + data_100669a0 + 0x7c) = 0
1000b0b1          *(result + data_100669a0 + 0x80) = 0
1000b0be          result += 0x84
1000b0c5      while (i s< data_10066998)
1000b0c5  
1000b0c8  return result

1000b0c9                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................

1000b0e0    int32_t sub_1000b0e0()

1000b0e0  int32_t result = data_10066998
1000b0e5  int32_t i = 0
1000b0e5  
1000b0e9  if (result s> 0)
1000b0eb      result = 0
1000b0eb      
1000b116      do
1000b0f3          result += 0x84
1000b0f8          *(result + data_100669a0 - 0x84) = 0
1000b109          *(result + data_100669a0 - 0x78) = i
1000b113          i += 1
1000b116      while (i s< data_10066998)
1000b116  
1000b118  return result

1000b119                                                                             90 90 90 90 90 90 90                           .......
1000b120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000b130    void* sub_1000b130(void* arg1)

1000b138  void* i = arg1
1000b138  
1000b13a  if (arg1 != 0)
1000b161      do
1000b140          int32_t eax_2 = j_sub_10011670(*(i + 4))
1000b14a          uint32_t eax_3
1000b14a          
1000b14a          if (eax_2 == 0)
1000b150              eax_3 = j_sub_10011610(*(i + 4))
1000b150          
1000b15a          if (eax_2 != 0 || eax_3 != 0)
1000b17f              return *(i + 4)
1000b17f          
1000b15c          i = *(i + 0x10)
1000b161      while (i != 0)
1000b161  
1000b165  void* i_1 = arg1
1000b165  
1000b167  if (arg1 == 0)
1000b18a      return 0
1000b18a  
1000b175  do
1000b16e      if (*(i_1 + 4) != 0)
1000b185          return *(i_1 + 4)
1000b185      
1000b170      i_1 = *(i_1 + 0x10)
1000b175  while (i_1 != 0)
1000b175  
1000b179  return i_1

1000b18b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
1000b1a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000b1b0    void* sub_1000b1b0(int32_t arg1)

1000b1d1  return j_sub_1000b130(*(data_100669a0 + arg1 * 0x84 + 0x7c))

1000b1d2                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1000b1e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000b1f0    void sub_1000b1f0(float* arg1, int32_t arg2)

1000b1fc  int32_t i = 0
1000b200  int32_t i_1 = 0
1000b204  float var_14 = 99999f
1000b204  
1000b20c  if (data_10066998 s> 0)
1000b219      int32_t edi_1 = data_100669a0
1000b21f      int32_t esi_1 = 0
1000b21f      
1000b2ac      do
1000b22b          if (*(esi_1 + edi_1 + 0x5c) == arg2)
1000b234              float var_c =
1000b234                  fconvert.s(fconvert.t(*(esi_1 + edi_1 + 0x10)) - fconvert.t(*arg1))
1000b23f              float var_8_1 =
1000b23f                  fconvert.s(fconvert.t(*(esi_1 + edi_1 + 0x14)) - fconvert.t(arg1[1]))
1000b24a              float var_4_1 =
1000b24a                  fconvert.s(fconvert.t(*(esi_1 + edi_1 + 0x18)) - fconvert.t(arg1[2]))
1000b252              int32_t eax_2
1000b252              int16_t x87control
1000b252              eax_2, x87control = __ftol(x87control, fconvert.t(var_c))
1000b257              int32_t eax_3
1000b257              int32_t edx_1
1000b257              edx_1:eax_3 = sx.q(eax_2)
1000b257              
1000b25f              if ((eax_3 ^ edx_1) - edx_1 s< 0x28)
1000b265                  int32_t eax_6
1000b265                  eax_6, x87control = __ftol(x87control, fconvert.t(var_8_1))
1000b26a                  int32_t eax_7
1000b26a                  int32_t edx_2
1000b26a                  edx_2:eax_7 = sx.q(eax_6)
1000b26a                  
1000b272                  if ((eax_7 ^ edx_2) - edx_2 s< 0x28)
1000b279                      long double st0_1 = j_sub_10043500(&var_c)
1000b27e                      long double temp0_1 = fconvert.t(var_14)
1000b27e                      st0_1 - temp0_1
1000b27e                      
1000b28a                      if ((((st0_1 < temp0_1 ? 1 : 0) << 8
1000b28a                              | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
1000b28a                              | (st0_1 == temp0_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
1000b28c                          var_14 = fconvert.s(st0_1)
1000b290                          i_1 = i
1000b290                      
1000b298                      edi_1 = data_100669a0
1000b298          
1000b2a3          i += 1
1000b2a4          esi_1 += 0x84
1000b2ac      while (i s< data_10066998)

1000b2be                                                                                            90 90                                ..
1000b2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000b2e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000b300    void sub_1000b300(int32_t* arg1, float* arg2, float* arg3, float* arg4)

1000b311  if (data_100667e0 == 0)
1000b31a      data_10063fe8(3, "AAS_BestReachableArea: aas not l…")
1000b32f      return 
1000b32f  
1000b339  float ecx = arg1[1]
1000b33c  float edx = arg1[2]
1000b33f  float var_8c = *arg1
1000b347  float var_88 = ecx
1000b34c  float var_84 = edx
1000b358  int32_t i = j_sub_1001ae60(&var_8c)
1000b35a  int32_t var_7c = 0
1000b364  float* ecx_3
1000b364  
1000b364  while (true)
1000b364      if (i == 0)
1000b36a          int32_t i_1 = i
1000b36a          
1000b370          while (i == 0)
1000b376              int32_t edi_1 = 0xffffffff
1000b379              int32_t var_74_1 = 0xffffffff
1000b379              
1000b37f              while (i == 0)
1000b385                  int32_t esi_1 = 0xffffffff
1000b388                  int32_t var_78_1 = 0xffffffff
1000b388                  
1000b38e                  while (i == 0)
1000b396                      float ecx_1 = arg1[1]
1000b399                      float edx_1 = arg1[2]
1000b3a4                      float var_70_1 = fconvert.s(float.t(i_1))
1000b3bd                      var_8c = fconvert.s(
1000b3bd                          float.t(var_74_1) * fconvert.t(var_70_1) * fconvert.t(4f)
1000b3bd                          + fconvert.t(*arg1))
1000b3d5                      var_88 = fconvert.s(
1000b3d5                          float.t(var_78_1) * fconvert.t(var_70_1) * fconvert.t(4f)
1000b3d5                          + fconvert.t(ecx_1))
1000b3e7                      var_84 =
1000b3e7                          fconvert.s(float.t(var_7c) * fconvert.t(4f) + fconvert.t(edx_1))
1000b3f3                      esi_1 += 1
1000b3f7                      i = j_sub_1001ae60(&var_8c)
1000b3f9                      var_78_1 = esi_1
1000b3f9                      
1000b3fd                      if (esi_1 s> 1)
1000b3fd                          break
1000b3fd                  
1000b3ff                  edi_1 += 1
1000b403                  var_74_1 = edi_1
1000b403                  
1000b407                  if (edi_1 s> 1)
1000b407                      break
1000b407              
1000b412              bool cond:3_1 = i_1 + 1 s< 5
1000b415              i_1 += 1
1000b415              
1000b419              if (not(cond:3_1))
1000b419                  break
1000b419          
1000b424          bool cond:2_1 = var_7c + 1 s< 5
1000b427          var_7c += 1
1000b427          
1000b42b          if (cond:2_1)
1000b42b              continue
1000b42b          else if (i == 0)
1000b4f7              ecx_3 = arg4
1000b4f7              break
1000b4f7      
1000b44f      float var_6c = var_8c
1000b459      float var_68_1 = var_88
1000b45d      float var_84_2 = fconvert.s(fconvert.t(var_84) + fconvert.t(0.25))
1000b477      float var_64_1 = fconvert.s(fconvert.t(var_84) - fconvert.t(50f))
1000b48e      int32_t var_48
1000b48e      void var_24
1000b48e      __builtin_memcpy(dest: &var_48, 
1000b48e          src: j_sub_1001b260(&var_24, &var_8c, &var_6c, 4, 0xffffffff), n: 0x24)
1000b48e      
1000b496      if (var_48 != 0)
1000b4e3          *arg4 = fconvert.s(fconvert.t(var_8c))
1000b4e5          arg4[1] = var_88
1000b4e8          arg4[2] = var_84_2
1000b4f6          return 
1000b4f6      
1000b49d      float var_40
1000b49d      int32_t eax_10 = j_sub_1001ae60(&var_40)
1000b4a2      ecx_3 = arg4
1000b4b0      *ecx_3 = var_40
1000b4b6      int32_t var_3c
1000b4b6      ecx_3[1] = var_3c
1000b4bf      int32_t var_38
1000b4bf      ecx_3[2] = var_38
1000b4bf      
1000b4c2      if (eax_10 != 0)
1000b4ce          return 
1000b4ce      
1000b496      break
1000b496  
1000b502  *ecx_3 = *arg1
1000b507  ecx_3[1] = arg1[1]
1000b50d  ecx_3[2] = arg1[2]
1000b525  float var_60 = fconvert.s(fconvert.t(*arg1) + fconvert.t(*arg2))
1000b52f  float var_5c = fconvert.s(fconvert.t(arg2[1]) + fconvert.t(arg1[1]))
1000b540  float var_58 = fconvert.s(fconvert.t(arg2[2]) + fconvert.t(arg1[2]))
1000b548  float var_54 = fconvert.s(fconvert.t(*arg1) + fconvert.t(*arg3))
1000b552  float var_50 = fconvert.s(fconvert.t(arg3[1]) + fconvert.t(arg1[1]))
1000b55c  float var_4c = fconvert.s(fconvert.t(arg3[2]) + fconvert.t(arg1[2]))
1000b560  int32_t* eax_17 = j_sub_1001c460(&var_60, &var_54, 0xffffffff)
1000b568  j_sub_1000b130(eax_17)
1000b570  j_sub_1001c3f0(eax_17)

1000b585                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1000b5a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000b5c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000b5e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000b600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000b620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000b640    int32_t sub_1000b640(float arg1, float arg2, float arg3)

1000b646  int32_t* esi = arg3
1000b64b  int32_t i = 0
1000b64d  int32_t* ebx_1 = arg1 i- esi
1000b64d  
1000b6ee  do
1000b65a      arg1 = fconvert.s(j_sub_10042d40(*(ebx_1 + esi)))
1000b664      arg3 = fconvert.s(j_sub_10042d40(*esi))
1000b66c      long double x87_r7_4 = fconvert.t(arg3) - fconvert.t(arg1)
1000b670      long double x87_r6_1 = fconvert.t(arg3)
1000b674      long double temp0_1 = fconvert.t(arg1)
1000b674      x87_r6_1 - temp0_1
1000b67f      *esi = arg3
1000b67f      
1000b686      if ((((x87_r6_1 < temp0_1 ? 1 : 0) << 8
1000b686              | (is_unordered.t(x87_r6_1, temp0_1) ? 1 : 0) << 0xa
1000b686              | (x87_r6_1 == temp0_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
1000b69d          long double temp1_1 = fconvert.t(-180.0)
1000b69d          x87_r7_4 - temp1_1
1000b69d          
1000b6a8          if ((((x87_r7_4 < temp1_1 ? 1 : 0) << 8
1000b6a8                  | (is_unordered.t(x87_r7_4, temp1_1) ? 1 : 0) << 0xa
1000b6a8                  | (x87_r7_4 == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
1000b6aa              x87_r7_4 = x87_r7_4 + fconvert.t(360.0)
1000b686      else
1000b688          long double temp2_1 = fconvert.t(180.0)
1000b688          x87_r7_4 - temp2_1
1000b688          
1000b693          if ((((x87_r7_4 < temp2_1 ? 1 : 0) << 8
1000b693                  | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
1000b693                  | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
1000b695              x87_r7_4 = x87_r7_4 - fconvert.t(360.0)
1000b695      
1000b6b0      long double temp3_1 = fconvert.t(0f)
1000b6b0      x87_r7_4 - temp3_1
1000b6b0      
1000b6bb      if ((((x87_r7_4 < temp3_1 ? 1 : 0) << 8
1000b6bb              | (is_unordered.t(x87_r7_4, temp3_1) ? 1 : 0) << 0xa
1000b6bb              | (x87_r7_4 == temp3_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
1000b6d8          long double x87_r6_6 = fneg(fconvert.t(arg2)) * fconvert.t(0.5)
1000b6de          x87_r6_6 - x87_r7_4
1000b6de          
1000b6e5          if ((((x87_r6_6 < x87_r7_4 ? 1 : 0) << 8
1000b6e5                  | (is_unordered.t(x87_r6_6, x87_r7_4) ? 1 : 0) << 0xa
1000b6e5                  | (x87_r6_6 == x87_r7_4 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1000b702              return 0
1000b6bb      else
1000b6c1          long double x87_r6_3 = fconvert.t(arg2) * fconvert.t(0.5)
1000b6c7          x87_r6_3 - x87_r7_4
1000b6c7          
1000b6ce          if ((((x87_r6_3 < x87_r7_4 ? 1 : 0) << 8
1000b6ce                  | (is_unordered.t(x87_r6_3, x87_r7_4) ? 1 : 0) << 0xa
1000b6ce                  | (x87_r6_3 == x87_r7_4 ? 1 : 0) << 0xe):1.b & 1) != 0)
1000b702              return 0
1000b702      
1000b6e7      i += 1
1000b6e8      esi = &esi[1]
1000b6ee  while (i s< 2)
1000b6ee  
1000b6fc  return 1

1000b703           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
1000b720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000b740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000b750    int32_t sub_1000b750(int32_t arg1, float* arg2, float arg3, float arg4, int32_t arg5)

1000b759  int32_t ecx = data_100669a0
1000b760  int32_t edi = arg5
1000b770  int32_t eax_2 = edi * 0x21
1000b780  void* esi = ecx + (eax_2 << 2)
1000b78c  float var_148 = fconvert.s(fconvert.t(*(ecx + (eax_2 << 2) + 0x4c))
1000b78c      + fconvert.t(*(ecx + (eax_2 << 2) + 0x40)))
1000b796  float var_144 = fconvert.s(fconvert.t(*(esi + 0x50)) + fconvert.t(*(esi + 0x44)))
1000b7a0  float var_140 = fconvert.s(fconvert.t(*(esi + 0x48)) + fconvert.t(*(esi + 0x54)))
1000b7a4  j_sub_10043570(&var_148, 0.5f, &var_148)
1000b7c1  var_148 = fconvert.s(fconvert.t(var_148) + fconvert.t(*(esi + 0x10)))
1000b7cc  float var_144_1 = fconvert.s(fconvert.t(var_144) + fconvert.t(*(esi + 0x14)))
1000b7d7  float var_140_1 = fconvert.s(fconvert.t(var_140) + fconvert.t(*(esi + 0x18)))
1000b7e2  float var_114 = fconvert.s(fconvert.t(var_148) - fconvert.t(*arg2))
1000b7ed  float var_110 = fconvert.s(fconvert.t(var_144_1) - fconvert.t(arg2[1]))
1000b7f8  float var_10c = fconvert.s(fconvert.t(var_140_1) - fconvert.t(arg2[2]))
1000b7fc  float var_108
1000b7fc  j_sub_10041790(&var_114, &var_108)
1000b7fc  
1000b820  if (j_sub_1000b640(arg3, arg4, &var_108) != 0)
1000b826      int32_t var_13c_1 = 0
1000b826      
1000b83d      while (true)
1000b847          if (j_sub_10005c60(arg2, &var_148) != 0)
1000b850              int32_t edx_1 = arg2[1]
1000b853              int32_t eax_5 = arg2[2]
1000b85d              float var_120 = *arg2
1000b865              float var_12c = var_148
1000b869              int32_t var_11c_1 = edx_1
1000b871              int32_t var_118_1 = eax_5
1000b87e              int32_t ebx_1 = 0x2030003
1000b883              int32_t var_138_1 = arg1
1000b887              int32_t var_134_1 = edi
1000b88b              float var_128_1 = var_144_1
1000b88f              float var_124_1 = var_140_1
1000b88f              
1000b89d              if ((j_sub_10003080(&var_148) & 0x38) != 0)
1000b89f                  ebx_1 = 0x203003b
1000b89f              
1000b8af              if ((j_sub_10003080(arg2) & 0x38) != 0)
1000b8b4                  if ((ebx_1.b & 0x38) == 0)
1000b8c2                      var_120 = var_148
1000b8c9                      float var_11c_2 = var_144_1
1000b8cd                      int32_t eax_10 = arg2[1]
1000b8d0                      float var_118_2 = var_140_1
1000b8d4                      int32_t ecx_5 = arg2[2]
1000b8d7                      var_138_1 = edi
1000b8db                      var_134_1 = arg1
1000b8df                      var_12c = *arg2
1000b8e3                      int32_t var_128_2 = eax_10
1000b8e7                      int32_t var_124_2 = ecx_5
1000b8e7                  
1000b8eb                  ebx_1 ^= 0x38
1000b8eb              
1000b91d              void var_fc
1000b91d              void var_a8
1000b91d              __builtin_memcpy(dest: &var_fc, 
1000b91d                  src: j_sub_10003010(&var_a8, &var_120, 0, 0, &var_12c, var_138_1, ebx_1), 
1000b91d                  n: 0x54)
1000b931              char var_b8
1000b931              char var_b0
1000b931              void var_f0
1000b931              void var_54
1000b931              
1000b931              if ((var_b0 & 0x38) != 0 && (var_b8 & 0x30) != 0)
1000b965                  __builtin_memcpy(dest: &var_fc, 
1000b965                      src: j_sub_10003010(&var_54, &var_f0, 0, 0, &var_12c, var_138_1, 
1000b965                          ebx_1 & 0xffffffc7), 
1000b965                      n: 0x54)
1000b967              float var_f4
1000b967              long double x87_r7_18 = fconvert.t(var_f4)
1000b96b              long double temp0_1 = fconvert.t(1f)
1000b96b              x87_r7_18 - temp0_1
1000b971              int32_t eax_11
1000b971              eax_11.w = (x87_r7_18 < temp0_1 ? 1 : 0) << 8
1000b971                  | (is_unordered.t(x87_r7_18, temp0_1) ? 1 : 0) << 0xa
1000b971                  | (x87_r7_18 == temp0_1 ? 1 : 0) << 0xe
1000b985              int32_t var_ac
1000b985              
1000b985              if ((eax_11:1.b & 1) == 0 || var_ac == var_134_1)
1000b9e1                  return 1
1000b9e1              
1000b98d              if (var_13c_1 == 0)
1000b9af                  var_140_1 = fconvert.s(fconvert.t(var_140_1) + fconvert.t(*(esi + 0x48)))
1000b98d              else if (var_13c_1 == 1)
1000b9af                  var_140_1 = fconvert.s(fconvert.t(*(esi + 0x54))
1000b9af                      - fconvert.t(*(esi + 0x48)) + fconvert.t(var_140_1))
1000b9af          
1000b9b8          bool cond:0_1 = var_13c_1 + 1 s< 3
1000b9bb          var_13c_1 += 1
1000b9bb          
1000b9bf          if (not(cond:0_1))
1000b9bf              break
1000b9bf          
1000b830          edi = arg5
1000b830  
1000b9d1  return 0

1000b9e2        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1000ba00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ba20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ba40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ba60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ba80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000baa0    int32_t sub_1000baa0(int32_t arg1, float* arg2, float arg3, float arg4, int32_t arg5, int32_t* arg6)

1000baa9  int32_t i = 1
1000baae  int32_t result = 0
1000baae  
1000bab2  if (data_1006699c s>= 1)
1000bab4      int32_t* ebx_1 = arg6
1000bab8      int32_t ebp_1 = 0x84
1000bab8      
1000bb05      do
1000bac6          if (*(data_100669a0 + ebp_1) != 0
1000bac6                  && j_sub_1000b750(arg1, arg2, arg3, arg4, i) != 0)
1000baed              *ebx_1 = i
1000baef              result += 1
1000baf0              ebx_1 = &ebx_1[1]
1000baf0              
1000baf5              if (result s>= arg5)
1000baf5                  break
1000baf5          
1000bafc          i += 1
1000bafd          ebp_1 += 0x84
1000bb05      while (i s<= data_1006699c)
1000bb05  
1000bb0d  return result

1000bb0e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1000bb20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000bb30    int32_t sub_1000bb30(int32_t arg1)

1000bb38  if (data_100667e0 != 0)
1000bb3a      int32_t eax = arg1
1000bb3a      
1000bb40      if (eax s< 0)
1000bb42          eax = 0xffffffff
1000bb42      
1000bb45      int32_t edx_1 = data_10066998
1000bb4b      int32_t result = eax + 1
1000bb4b      
1000bb4e      if (result s< edx_1)
1000bb5d          int32_t* ecx_4 = data_100669a0 + result * 0x84
1000bb5d          
1000bb6e          do
1000bb63              if (*ecx_4 != 0)
1000bb73                  return result
1000bb73              
1000bb65              result += 1
1000bb66              ecx_4 = &ecx_4[0x21]
1000bb6e          while (result s< edx_1)
1000bb6e  
1000bb70  return 0

1000bb74                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1000bb80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000bba0    int32_t sub_1000bba0()

1000bba0  int32_t ecx
1000bba0  int32_t var_4_1 = ecx
1000bba8  int32_t i = 0
1000bbae  int16_t top
1000bbae  
1000bbae  if (data_10066910 s> 0)
1000bbb4      int32_t* edi_1 = nullptr
1000bbb4      
1000bc50      do
1000bbca          *(edi_1 + data_10066914) = j_sub_10043870(*(edi_1 + data_10066914))
1000bbe5          void* esi_1 = &edi_1[5]
1000bbe8          int32_t j_5 = 3
1000bbed          *(edi_1 + data_10066914 + 4) = j_sub_10043870(*(edi_1 + data_10066914 + 4))
1000bc43          int32_t j
1000bc43          
1000bc43          do
1000bbfa              int32_t eax_6
1000bbfa              int16_t x87control
1000bbfa              int16_t x87control_1
1000bbfa              eax_6, x87control_1 =
1000bbfa                  __ftol(x87control, fconvert.t(*(esi_1 + data_10066914 - 0xc)))
1000bc13              *(esi_1 + data_10066914 - 0xc) = fconvert.s(float.t(j_sub_10043870(eax_6)))
1000bc20              int32_t eax_8
1000bc20              eax_8, x87control = __ftol(x87control_1, fconvert.t(*(esi_1 + data_10066914)))
1000bc3b              esi_1 += 4
1000bc3e              j = j_5
1000bc3e              j_5 -= 1
1000bc3f              *(esi_1 + data_10066914 - 4) = fconvert.s(float.t(j_sub_10043870(eax_8)))
1000bc3f              top = 0
1000bc43          while (j != 1)
1000bc4a          i += 1
1000bc4b          edi_1 = &edi_1[8]
1000bc50      while (i s< data_10066910)
1000bc50  
1000bc5b  int32_t i_1 = 0
1000bc5b  
1000bc5f  if (data_10066918 s> 0)
1000bc61      int32_t* esi_2 = nullptr
1000bc61      
1000bc90      do
1000bc63          int32_t j_9 = 3
1000bc86          int32_t j_1
1000bc86          
1000bc86          do
1000bc72              j_sub_100438b0(*(esi_2 + data_1006691c))
1000bc7f              *(esi_2 + data_1006691c) =
1000bc7f                  fconvert.s(unimplemented  {fstp dword [esi+eax], st0})
1000bc7f              unimplemented  {fstp dword [esi+eax], st0}
1000bc7f              top += 1
1000bc82              esi_2 = &esi_2[1]
1000bc85              j_1 = j_9
1000bc85              j_9 -= 1
1000bc86          while (j_1 != 1)
1000bc8d          i_1 += 1
1000bc90      while (i_1 s< data_10066918)
1000bc90  
1000bc97  int32_t i_2 = 0
1000bc97  
1000bc9b  if (data_10066920 s> 0)
1000bc9d      int32_t* edi_2 = nullptr
1000bc9d      
1000bd07      do
1000bc9f          int32_t* esi_3 = edi_2
1000bca1          int32_t j_6 = 3
1000bcc4          int32_t j_2
1000bcc4          
1000bcc4          do
1000bcb0              j_sub_100438b0(*(esi_3 + data_10066924))
1000bcbd              *(esi_3 + data_10066924) =
1000bcbd                  fconvert.s(unimplemented  {fstp dword [esi+eax], st0})
1000bcbd              unimplemented  {fstp dword [esi+eax], st0}
1000bcbd              top += 1
1000bcc0              esi_3 = &esi_3[1]
1000bcc3              j_2 = j_6
1000bcc3              j_6 -= 1
1000bcc4          while (j_2 != 1)
1000bcd1          j_sub_100438b0(*(edi_2 + data_10066924 + 0xc))
1000bcdb          *(edi_2 + data_10066924 + 0xc) =
1000bcdb              fconvert.s(unimplemented  {fstp dword [edi+eax+0xc], st0})
1000bcdb          unimplemented  {fstp dword [edi+eax+0xc], st0}
1000bcdb          top += 1
1000bcf8          i_2 += 1
1000bcf9          *(edi_2 + data_10066924 + 0x10) = j_sub_10043870(*(edi_2 + data_10066924 + 0x10))
1000bd02          edi_2 = &edi_2[5]
1000bd07      while (i_2 s< data_10066920)
1000bd07  
1000bd0e  int32_t i_3 = 0
1000bd0e  
1000bd12  if (data_10066928 s> 0)
1000bd51      do
1000bd29          *(data_1006692c + (i_3 << 3)) = j_sub_10043870(*(data_1006692c + (i_3 << 3)))
1000bd45          *(data_1006692c + (i_3 << 3) + 4) =
1000bd45              j_sub_10043870(*(data_1006692c + (i_3 << 3) + 4))
1000bd4e          i_3 += 1
1000bd51      while (i_3 s< data_10066928)
1000bd51  
1000bd58  int32_t i_4 = 0
1000bd58  
1000bd5c  if (data_10066930 s> 0)
1000bd81      do
1000bd76          *(data_10066934 + (i_4 << 2)) = j_sub_10043870(*(data_10066934 + (i_4 << 2)))
1000bd7e          i_4 += 1
1000bd81      while (i_4 s< data_10066930)
1000bd81  
1000bd88  int32_t i_5 = 0
1000bd88  
1000bd8c  if (data_10066938 s> 0)
1000bd92      int32_t* esi_4 = nullptr
1000bd92      
1000be3c      do
1000bda9          *(esi_4 + data_1006693c) = j_sub_10043870(*(esi_4 + data_1006693c))
1000bdc2          *(esi_4 + data_1006693c + 4) = j_sub_10043870(*(esi_4 + data_1006693c + 4))
1000bddc          *(esi_4 + data_1006693c + 8) = j_sub_10043870(*(esi_4 + data_1006693c + 8))
1000bdf6          *(esi_4 + data_1006693c + 0xc) = j_sub_10043870(*(esi_4 + data_1006693c + 0xc))
1000be10          *(esi_4 + data_1006693c + 0x10) = j_sub_10043870(*(esi_4 + data_1006693c + 0x10))
1000be2d          i_5 += 1
1000be2e          *(esi_4 + data_1006693c + 0x14) = j_sub_10043870(*(esi_4 + data_1006693c + 0x14))
1000be37          esi_4 = &esi_4[6]
1000be3c      while (i_5 s< data_10066938)
1000be3c  
1000be47  int32_t i_6 = 0
1000be47  
1000be4b  if (data_10066940 s> 0)
1000be70      do
1000be65          *(data_10066944 + (i_6 << 2)) = j_sub_10043870(*(data_10066944 + (i_6 << 2)))
1000be6d          i_6 += 1
1000be70      while (i_6 s< data_10066940)
1000be70  
1000be77  int32_t i_7 = 0
1000be77  
1000be7b  if (data_10066948 s> 0)
1000be81      int32_t* edi_3 = nullptr
1000be81      
1000bf3a      do
1000be98          *(edi_3 + data_1006694c) = j_sub_10043870(*(edi_3 + data_1006694c))
1000beb1          *(edi_3 + data_1006694c + 4) = j_sub_10043870(*(edi_3 + data_1006694c + 4))
1000bece          void* esi_5 = &edi_3[6]
1000bed1          int32_t j_7 = 3
1000bed6          *(edi_3 + data_1006694c + 8) = j_sub_10043870(*(edi_3 + data_1006694c + 8))
1000bf2d          int32_t j_3
1000bf2d          
1000bf2d          do
1000bee5              j_sub_100438b0(*(esi_5 + data_1006694c - 0xc))
1000bef0              *(esi_5 + data_1006694c - 0xc) =
1000bef0                  fconvert.s(unimplemented  {fstp dword [esi+ecx-0xc], st0})
1000bef0              unimplemented  {fstp dword [esi+ecx-0xc], st0}
1000befe              j_sub_100438b0(*(esi_5 + data_1006694c))
1000bf09              *(esi_5 + data_1006694c) =
1000bf09                  fconvert.s(unimplemented  {fstp dword [esi+ecx], st0})
1000bf09              unimplemented  {fstp dword [esi+ecx], st0}
1000bf17              j_sub_100438b0(*(esi_5 + data_1006694c + 0xc))
1000bf25              *(esi_5 + data_1006694c + 0xc) =
1000bf25                  fconvert.s(unimplemented  {fstp dword [esi+ecx+0xc], st0})
1000bf25              unimplemented  {fstp dword [esi+ecx+0xc], st0}
1000bf25              top += 3
1000bf29              esi_5 += 4
1000bf2c              j_3 = j_7
1000bf2c              j_7 -= 1
1000bf2d          while (j_3 != 1)
1000bf34          i_7 += 1
1000bf35          edi_3 = &edi_3[0xc]
1000bf3a      while (i_7 s< data_10066948)
1000bf3a  
1000bf45  int32_t i_8 = 0
1000bf45  
1000bf49  if (data_10066950 s> 0)
1000bf4f      int32_t* esi_6 = nullptr
1000bf4f      
1000c013      do
1000bf66          *(esi_6 + data_10066954) = j_sub_10043870(*(esi_6 + data_10066954))
1000bf7f          *(esi_6 + data_10066954 + 4) = j_sub_10043870(*(esi_6 + data_10066954 + 4))
1000bf99          *(esi_6 + data_10066954 + 8) = j_sub_10043870(*(esi_6 + data_10066954 + 8))
1000bfb3          *(esi_6 + data_10066954 + 0xc) = j_sub_10043870(*(esi_6 + data_10066954 + 0xc))
1000bfcd          *(esi_6 + data_10066954 + 0x10) = j_sub_10043870(*(esi_6 + data_10066954 + 0x10))
1000bfe7          *(esi_6 + data_10066954 + 0x14) = j_sub_10043870(*(esi_6 + data_10066954 + 0x14))
1000c004          i_8 += 1
1000c005          *(esi_6 + data_10066954 + 0x18) = j_sub_10043870(*(esi_6 + data_10066954 + 0x18))
1000c00e          esi_6 = &esi_6[7]
1000c013      while (i_8 s< data_10066950)
1000c013  
1000c01e  int32_t i_9 = 0
1000c01e  
1000c022  if (data_10066958 s> 0)
1000c028      int32_t* esi_7 = nullptr
1000c028      
1000c100      do
1000c03f          *(esi_7 + data_1006695c) = j_sub_10043870(*(esi_7 + data_1006695c))
1000c058          *(esi_7 + data_1006695c + 4) = j_sub_10043870(*(esi_7 + data_1006695c + 4))
1000c075          void* edi_4 = &esi_7[6]
1000c078          int32_t j_8 = 3
1000c07d          *(esi_7 + data_1006695c + 8) = j_sub_10043870(*(esi_7 + data_1006695c + 8))
1000c0ba          int32_t j_4
1000c0ba          
1000c0ba          do
1000c08c              j_sub_100438b0(*(edi_4 + data_1006695c - 0xc))
1000c097              *(edi_4 + data_1006695c - 0xc) =
1000c097                  fconvert.s(unimplemented  {fstp dword [edi+ecx-0xc], st0})
1000c097              unimplemented  {fstp dword [edi+ecx-0xc], st0}
1000c0a5              j_sub_100438b0(*(edi_4 + data_1006695c))
1000c0b3              *(edi_4 + data_1006695c) =
1000c0b3                  fconvert.s(unimplemented  {fstp dword [edi+ecx], st0})
1000c0b3              unimplemented  {fstp dword [edi+ecx], st0}
1000c0b3              top += 2
1000c0b6              edi_4 += 4
1000c0b9              j_4 = j_8
1000c0b9              j_8 -= 1
1000c0ba          while (j_4 != 1)
1000c0d2          *(esi_7 + data_1006695c + 0x24) = j_sub_10043870(*(esi_7 + data_1006695c + 0x24))
1000c0dc          int32_t eax_85
1000c0dc          eax_85.w = *(esi_7 + data_1006695c + 0x28)
1000c0f0          i_9 += 1
1000c0f1          *(esi_7 + data_1006695c + 0x28) = j_sub_10043830(eax_85)
1000c0fb          esi_7 = &esi_7[0xb]
1000c100      while (i_9 s< data_10066958)
1000c100  
1000c10b  int32_t i_10 = 0
1000c10b  
1000c10f  if (data_10066960 s> 0)
1000c111      int32_t* esi_8 = nullptr
1000c111      
1000c16d      do
1000c128          *(esi_8 + data_10066964) = j_sub_10043870(*(esi_8 + data_10066964))
1000c141          *(esi_8 + data_10066964 + 4) = j_sub_10043870(*(esi_8 + data_10066964 + 4))
1000c15e          i_10 += 1
1000c15f          *(esi_8 + data_10066964 + 8) = j_sub_10043870(*(esi_8 + data_10066964 + 8))
1000c168          esi_8 = &esi_8[3]
1000c16d      while (i_10 s< data_10066960)
1000c16d  
1000c174  int32_t i_11 = 0
1000c174  
1000c178  if (data_10066968 s> 0)
1000c17e      int32_t* esi_9 = nullptr
1000c17e      
1000c20e      do
1000c195          *(esi_9 + data_1006696c) = j_sub_10043870(*(esi_9 + data_1006696c))
1000c1ae          *(esi_9 + data_1006696c + 4) = j_sub_10043870(*(esi_9 + data_1006696c + 4))
1000c1c8          *(esi_9 + data_1006696c + 8) = j_sub_10043870(*(esi_9 + data_1006696c + 8))
1000c1e2          *(esi_9 + data_1006696c + 0xc) = j_sub_10043870(*(esi_9 + data_1006696c + 0xc))
1000c1ff          i_11 += 1
1000c200          *(esi_9 + data_1006696c + 0x10) = j_sub_10043870(*(esi_9 + data_1006696c + 0x10))
1000c209          esi_9 = &esi_9[5]
1000c20e      while (i_11 s< data_10066968)
1000c20e  
1000c219  int32_t i_12 = 0
1000c219  
1000c21d  if (data_10066970 s> 0)
1000c242      do
1000c237          *(data_10066974 + (i_12 << 2)) = j_sub_10043870(*(data_10066974 + (i_12 << 2)))
1000c23f          i_12 += 1
1000c242      while (i_12 s< data_10066970)
1000c242  
1000c244  int32_t result = data_10066978
1000c249  int32_t edi_5 = 0
1000c249  
1000c24d  if (result s> 0)
1000c24f      int32_t* esi_10 = nullptr
1000c24f      
1000c2ab      do
1000c266          *(esi_10 + data_1006697c) = j_sub_10043870(*(esi_10 + data_1006697c))
1000c27f          *(esi_10 + data_1006697c + 4) = j_sub_10043870(*(esi_10 + data_1006697c + 4))
1000c29c          edi_5 += 1
1000c29d          *(esi_10 + data_1006697c + 8) = j_sub_10043870(*(esi_10 + data_1006697c + 8))
1000c2a1          result = data_10066978
1000c2a6          esi_10 = &esi_10[3]
1000c2ab      while (edi_5 s< result)
1000c2ab  
1000c2b2  return result

1000c2b3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1000c2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c2e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c3a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c3c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c3e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000c490    void* sub_1000c490()

1000c490  void* eax_10 = data_1006691c
1000c49a  data_10066918 = 0
1000c49a  
1000c4a0  if (eax_10 != 0)
1000c4a3      j_sub_100390b0(eax_10)
1000c4a3  
1000c4ab  void* eax = data_10066924
1000c4b0  data_1006691c = 0
1000c4b8  data_10066920 = 0
1000c4b8  
1000c4be  if (eax != 0)
1000c4c1      j_sub_100390b0(eax)
1000c4c1  
1000c4c9  void* eax_1 = data_1006692c
1000c4ce  data_10066924 = 0
1000c4d6  data_10066928 = 0
1000c4d6  
1000c4dc  if (eax_1 != 0)
1000c4df      j_sub_100390b0(eax_1)
1000c4df  
1000c4e7  void* eax_2 = data_10066934
1000c4ec  data_1006692c = 0
1000c4f4  data_10066930 = 0
1000c4f4  
1000c4fa  if (eax_2 != 0)
1000c4fd      j_sub_100390b0(eax_2)
1000c4fd  
1000c505  void* eax_3 = data_1006693c
1000c50a  data_10066934 = 0
1000c512  data_10066938 = 0
1000c512  
1000c518  if (eax_3 != 0)
1000c51b      j_sub_100390b0(eax_3)
1000c51b  
1000c523  void* eax_4 = data_10066944
1000c528  data_1006693c = 0
1000c530  data_10066940 = 0
1000c530  
1000c536  if (eax_4 != 0)
1000c539      j_sub_100390b0(eax_4)
1000c539  
1000c541  void* eax_5 = data_1006694c
1000c546  data_10066944 = 0
1000c54e  data_10066948 = 0
1000c54e  
1000c554  if (eax_5 != 0)
1000c557      j_sub_100390b0(eax_5)
1000c557  
1000c55f  void* eax_6 = data_10066954
1000c564  data_1006694c = 0
1000c56c  data_10066950 = 0
1000c56c  
1000c572  if (eax_6 != 0)
1000c575      j_sub_100390b0(eax_6)
1000c575  
1000c57d  void* eax_7 = data_1006695c
1000c582  data_10066954 = 0
1000c58a  data_10066958 = 0
1000c58a  
1000c590  if (eax_7 != 0)
1000c593      j_sub_100390b0(eax_7)
1000c593  
1000c59b  void* eax_8 = data_1006696c
1000c5a0  data_1006695c = 0
1000c5a0  
1000c5a8  if (eax_8 != 0)
1000c5ab      j_sub_100390b0(eax_8)
1000c5ab  
1000c5b3  void* eax_9 = data_10066974
1000c5b8  data_1006696c = 0
1000c5c0  data_10066968 = 0
1000c5c0  
1000c5c6  if (eax_9 != 0)
1000c5c9      j_sub_100390b0(eax_9)
1000c5c9  
1000c5d1  void* result = data_1006697c
1000c5d6  data_10066974 = 0
1000c5de  data_10066970 = 0
1000c5de  
1000c5e4  if (result != 0)
1000c5e7      result = j_sub_100390b0(result)
1000c5e7  
1000c5ef  data_1006697c = 0
1000c5f5  data_10066978 = 0
1000c5fb  data_100667e0 = 0
1000c601  data_100667e4 = 0
1000c607  data_100667e8 = 0
1000c60e  return result

1000c60f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1000c620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000c670    void* sub_1000c670(int32_t* arg1, void* arg2, uint32_t arg3)

1000c679  if (arg3 == 0)
1000c680      return 0
1000c680  
1000c697  if (sub_100447cf(arg1, arg2, FILE_BEGIN) != 0)
1000c69e      j_sub_1000d7e0("can't seek to aas lump\n")
1000c6a3      j_sub_1000c490()
1000c6a9      sub_10044888(arg1)
1000c6b6      return 0
1000c6b6  
1000c6b8  void* result = j_sub_10039000(arg3)
1000c6b8  
1000c6ce  if (sub_100446b8(result, 1, arg3, arg1) == arg3)
1000c6f9      return result
1000c6f9  
1000c6d5  j_sub_1000d7e0("can't read aas lump\n")
1000c6db  j_sub_100390b0(result)
1000c6e0  j_sub_1000c490()
1000c6e6  sub_10044888(arg1)
1000c6f3  return 0

1000c6fa                                                                                90 90 90 90 90 90                            ......
1000c700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000c720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000c730    int32_t sub_1000c730(PSTR arg1, void* arg2)

1000c737  j_sub_1000c490()
1000c749  int32_t* eax = sub_10044936(arg1, "rb")
1000c749  
1000c755  if (eax == 0)
1000c757      PSTR var_8c = arg1
1000c75d      j_sub_1000d7e0("can't open %s\n")
1000c771      return 6
1000c771  
1000c787  if (sub_100447cf(eax, arg2, FILE_BEGIN) != 0)
1000c78e      j_sub_1000d7e0("can't seek to file %s\n")
1000c794      sub_10044888(eax)
1000c7a8      return 7
1000c7a8  
1000c7be  int32_t var_78
1000c7be  
1000c7be  if (sub_100446b8(&var_78, 0x78, 1, eax) != 1)
1000c7c0      PSTR var_8c_2 = arg1
1000c7c6      j_sub_1000d7e0("can't read header of file %s\n")
1000c7cc      sub_10044888(eax)
1000c7e0      return 8
1000c7e0  
1000c7e6  int32_t eax_6 = j_sub_10043870(var_78)
1000c7f3  var_78 = eax_6
1000c7f3  
1000c7f7  if (eax_6 != 0x53414145)
1000c7f9      PSTR var_8c_4 = arg1
1000c7ff      j_sub_1000d7e0("%s is not an AAS file\n")
1000c805      sub_10044888(eax)
1000c819      return 9
1000c819  
1000c81f  int32_t var_74
1000c81f  int32_t eax_8 = j_sub_10043870(var_74)
1000c82a  int32_t var_74_1 = eax_8
1000c82a  
1000c82e  if (eax_8 == 2)
1000c836      data_10063fe8(eax_8, "found an old AAS file, create a …")
1000c82e  else if (eax_8 != 3)
1000c88a      int32_t var_8c_7 = 3
1000c88c      int32_t var_90_5 = eax_8
1000c88d      PSTR var_94_4 = arg1
1000c893      j_sub_1000d7e0("aas file %s is version %i, not %…")
1000c899      sub_10044888(eax)
1000c8ad      return 0xa
1000c8ad  
1000c850  int32_t var_70
1000c850  void* ebp_1 = j_sub_10043870(var_70) + arg2
1000c852  int32_t var_6c
1000c852  uint32_t eax_11 = j_sub_10043870(var_6c)
1000c85c  void* eax_12 = j_sub_1000c670(eax, ebp_1, eax_11)
1000c864  data_10066914 = eax_12
1000c869  uint32_t ebx_2 = eax_11 u>> 5
1000c86c  data_10066910 = ebx_2
1000c86c  
1000c876  if (ebx_2 != 0 && eax_12 == 0)
1000c884      return 0xb
1000c884  
1000c8bf  int32_t var_68
1000c8bf  void* ebx_4 = j_sub_10043870(var_68) + arg2
1000c8c1  int32_t var_64
1000c8c1  uint32_t eax_17 = j_sub_10043870(var_64)
1000c8cb  void* eax_18 = j_sub_1000c670(eax, ebx_4, eax_17)
1000c8dc  data_1006691c = eax_18
1000c8e2  uint32_t edx_3 = eax_17 u/ 0xc
1000c8e5  data_10066918 = edx_3
1000c8e5  
1000c8ef  if (edx_3 != 0 && eax_18 == 0)
1000c8fd      return 0xb
1000c8fd  
1000c90f  int32_t var_60
1000c90f  void* ebx_6 = j_sub_10043870(var_60) + arg2
1000c911  int32_t var_5c
1000c911  uint32_t eax_22 = j_sub_10043870(var_5c)
1000c91b  void* eax_23 = j_sub_1000c670(eax, ebx_6, eax_22)
1000c92c  data_10066924 = eax_23
1000c932  uint32_t edx_6 = eax_22 u/ 0x14
1000c935  data_10066920 = edx_6
1000c935  
1000c93f  if (edx_6 != 0 && eax_23 == 0)
1000c94d      return 0xb
1000c94d  
1000c95f  int32_t var_58
1000c95f  void* ebp_5 = j_sub_10043870(var_58) + arg2
1000c961  int32_t var_54
1000c961  uint32_t eax_28 = j_sub_10043870(var_54)
1000c96b  void* eax_29 = j_sub_1000c670(eax, ebp_5, eax_28)
1000c973  data_1006692c = eax_29
1000c978  uint32_t ebx_8 = eax_28 u>> 3
1000c97b  data_10066928 = ebx_8
1000c97b  
1000c985  if (ebx_8 != 0 && eax_29 == 0)
1000c993      return 0xb
1000c993  
1000c9a5  int32_t var_50
1000c9a5  void* ebp_7 = j_sub_10043870(var_50) + arg2
1000c9a7  int32_t var_4c
1000c9a7  uint32_t eax_33 = j_sub_10043870(var_4c)
1000c9b1  void* eax_34 = j_sub_1000c670(eax, ebp_7, eax_33)
1000c9b9  data_10066934 = eax_34
1000c9be  uint32_t ebx_10 = eax_33 u>> 2
1000c9c1  data_10066930 = ebx_10
1000c9c1  
1000c9cb  if (ebx_10 != 0 && eax_34 == 0)
1000c9d9      return 0xb
1000c9d9  
1000c9eb  int32_t var_48
1000c9eb  void* ebx_12 = j_sub_10043870(var_48) + arg2
1000c9ed  int32_t var_44
1000c9ed  uint32_t eax_37 = j_sub_10043870(var_44)
1000c9f7  void* eax_38 = j_sub_1000c670(eax, ebx_12, eax_37)
1000ca08  data_1006693c = eax_38
1000ca0e  uint32_t edx_10 = eax_37 u/ 0x18
1000ca11  data_10066938 = edx_10
1000ca11  
1000ca1b  if (edx_10 != 0 && eax_38 == 0)
1000ca29      return 0xb
1000ca29  
1000ca3b  int32_t var_40
1000ca3b  void* ebp_10 = j_sub_10043870(var_40) + arg2
1000ca3d  int32_t var_3c
1000ca3d  uint32_t eax_43 = j_sub_10043870(var_3c)
1000ca47  void* eax_44 = j_sub_1000c670(eax, ebp_10, eax_43)
1000ca4f  data_10066944 = eax_44
1000ca54  uint32_t ebx_14 = eax_43 u>> 2
1000ca57  data_10066940 = ebx_14
1000ca57  
1000ca61  if (ebx_14 != 0 && eax_44 == 0)
1000ca6f      return 0xb
1000ca6f  
1000ca81  int32_t var_38
1000ca81  void* ebx_16 = j_sub_10043870(var_38) + arg2
1000ca83  int32_t var_34
1000ca83  uint32_t eax_48 = j_sub_10043870(var_34)
1000ca8d  void* eax_49 = j_sub_1000c670(eax, ebx_16, eax_48)
1000ca9e  data_1006694c = eax_49
1000caa4  uint32_t edx_13 = eax_48 u/ 0x30
1000caa7  data_10066948 = edx_13
1000caa7  
1000cab1  if (edx_13 != 0 && eax_49 == 0)
1000cabf      return 0xb
1000cabf  
1000cad1  int32_t var_30
1000cad1  void* ebp_13 = j_sub_10043870(var_30) + arg2
1000cad3  int32_t var_2c
1000cad3  uint32_t eax_53 = j_sub_10043870(var_2c)
1000cadd  void* eax_54 = j_sub_1000c670(eax, ebp_13, eax_53)
1000caf4  data_10066954 = eax_54
1000cafa  uint32_t ebx_21 = eax_53 u/ 0x1c
1000cafd  data_10066950 = ebx_21
1000cafd  
1000cb07  if (ebx_21 != 0 && eax_54 == 0)
1000cb15      return 0xb
1000cb15  
1000cb27  int32_t var_28
1000cb27  void* ebx_23 = j_sub_10043870(var_28) + arg2
1000cb29  int32_t var_24
1000cb29  uint32_t eax_59 = j_sub_10043870(var_24)
1000cb33  void* eax_60 = j_sub_1000c670(eax, ebx_23, eax_59)
1000cb44  data_1006695c = eax_60
1000cb4a  uint32_t edx_17 = eax_59 u/ 0x2c
1000cb4d  data_10066958 = edx_17
1000cb4d  
1000cb57  if (edx_17 != 0 && eax_60 == 0)
1000cb65      return 0xb
1000cb65  
1000cb77  int32_t var_20
1000cb77  void* ebx_25 = j_sub_10043870(var_20) + arg2
1000cb79  int32_t var_1c
1000cb79  uint32_t eax_65 = j_sub_10043870(var_1c)
1000cb83  void* eax_66 = j_sub_1000c670(eax, ebx_25, eax_65)
1000cb94  data_10066964 = eax_66
1000cb9a  uint32_t edx_20 = eax_65 u/ 0xc
1000cb9d  data_10066960 = edx_20
1000cb9d  
1000cba7  if (edx_20 != 0 && eax_66 == 0)
1000cbb5      return 0xb
1000cbb5  
1000cbc7  int32_t var_18
1000cbc7  void* ebx_27 = j_sub_10043870(var_18) + arg2
1000cbc9  int32_t var_14
1000cbc9  uint32_t eax_70 = j_sub_10043870(var_14)
1000cbd3  void* eax_71 = j_sub_1000c670(eax, ebx_27, eax_70)
1000cbe4  data_1006696c = eax_71
1000cbea  uint32_t edx_23 = eax_70 u/ 0x14
1000cbed  data_10066968 = edx_23
1000cbed  
1000cbf7  if (edx_23 != 0 && eax_71 == 0)
1000cc05      return 0xb
1000cc05  
1000cc1a  int32_t var_10
1000cc1a  void* ebp_18 = j_sub_10043870(var_10) + arg2
1000cc1c  int32_t var_c
1000cc1c  uint32_t eax_76 = j_sub_10043870(var_c)
1000cc26  void* eax_77 = j_sub_1000c670(eax, ebp_18, eax_76)
1000cc2e  data_10066974 = eax_77
1000cc33  uint32_t ebx_29 = eax_76 u>> 2
1000cc36  data_10066970 = ebx_29
1000cc36  
1000cc40  if (ebx_29 != 0 && eax_77 == 0)
1000cc4e      return 0xb
1000cc4e  
1000cc66  int32_t var_8
1000cc66  void* ebx_31 = j_sub_10043870(var_8) + arg2
1000cc68  int32_t var_4
1000cc68  uint32_t eax_81 = j_sub_10043870(var_4)
1000cc72  void* eax_82 = j_sub_1000c670(eax, ebx_31, eax_81)
1000cc83  data_1006697c = eax_82
1000cc89  uint32_t edx_26 = eax_81 u/ 0xc
1000cc8c  data_10066978 = edx_26
1000cc8c  
1000cc96  if (edx_26 != 0 && eax_82 == 0)
1000cca4      return 0xb
1000cca4  
1000cca5  j_sub_1000bba0()
1000ccab  data_100667e0 = 1
1000ccb5  sub_10044888(eax)
1000ccc6  return 0

1000ccc7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
1000cce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cd00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cd40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cd60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cd80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cda0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cdc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000cde0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ce00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ce20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000ce40    int32_t sub_1000ce40(int32_t* arg1, int32_t arg2, int32_t arg3, char* arg4, int32_t arg5)

1000ce60  *(arg2 + (arg3 << 3) + 8) = j_sub_10043870(sub_10044a82(arg1))
1000ce6d  *(arg2 + (arg3 << 3) + 0xc) = j_sub_10043870(arg5)
1000ce6d  
1000ce73  if (arg5 s> 0 && sub_10044949(arg4, arg5, 1, arg1) u< 1)
1000ce93      data_10063fe8(3, "error writing lump %s\n", arg3)
1000ce9a      sub_10044888(arg1)
1000cea8      return 0
1000cea8  
1000ceb2  return 1

1000ceb3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1000cec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000cee0    int32_t sub_1000cee0(PSTR arg1)

1000cef5  data_10063fe8(1, "writing %s\n", arg1)
1000cefb  j_sub_1000bba0()
1000cf0b  int32_t var_94
1000cf0b  __builtin_strncpy(dest: &var_94, src: "EAAS", n: 4)
1000cf10  int32_t s
1000cf10  __builtin_memset(&s, c: 0, n: 0x78)
1000cf17  int32_t var_98 = 3
1000cf19  s = j_sub_10043870(var_94)
1000cf22  void* var_9c = &data_1005b32c
1000cf28  int32_t var_74 = j_sub_10043870(var_98)
1000cf2c  int32_t* eax_2 = sub_10044936(arg1, var_9c)
1000cf2c  
1000cf38  if (eax_2 == 0)
1000cf42      data_10063fe8(3, "error opening %s\n", arg1)
1000cf53      return 0
1000cf53  
1000cf69  if (sub_10044949(&s, 0x78, 1, eax_2) u< 1)
1000cf6c      sub_10044888(eax_2)
1000cf7c      return 0
1000cf7c  
1000cf96  int32_t eax_6 = j_sub_1000ce40(eax_2, &s, 0, data_10066914, data_10066910 << 5)
1000cf96  
1000cfa0  if (eax_6 == 0)
1000cfa8      return eax_6
1000cfa8  
1000cfc4  int32_t eax_8 = j_sub_1000ce40(eax_2, &s, 1, data_1006691c, data_10066918 * 0xc)
1000cfc4  
1000cfce  if (eax_8 == 0)
1000cfd6      return eax_8
1000cfd6  
1000cff2  int32_t eax_10 = j_sub_1000ce40(eax_2, &s, 2, data_10066924, data_10066920 * 0x14)
1000cff2  
1000cffc  if (eax_10 == 0)
1000d004      return eax_10
1000d004  
1000d021  int32_t eax_12 = j_sub_1000ce40(eax_2, &s, 3, data_1006692c, data_10066928 << 3)
1000d021  
1000d02b  if (eax_12 == 0)
1000d033      return eax_12
1000d033  
1000d051  int32_t eax_14 = j_sub_1000ce40(eax_2, &s, 4, data_10066934, data_10066930 << 2)
1000d051  
1000d05b  if (eax_14 == 0)
1000d063      return eax_14
1000d063  
1000d07f  int32_t eax_18 = j_sub_1000ce40(eax_2, &s, 5, data_1006693c, data_10066938 * 0x18)
1000d07f  
1000d089  if (eax_18 == 0)
1000d091      return eax_18
1000d091  
1000d0ae  int32_t eax_20 = j_sub_1000ce40(eax_2, &s, 6, data_10066944, data_10066940 << 2)
1000d0ae  
1000d0b8  if (eax_20 == 0)
1000d0c0      return eax_20
1000d0c0  
1000d0dc  int32_t eax_22 = j_sub_1000ce40(eax_2, &s, 7, data_1006694c, data_10066948 * 0x30)
1000d0dc  
1000d0e6  if (eax_22 == 0)
1000d0ee      return eax_22
1000d0ee  
1000d110  int32_t eax_24 = j_sub_1000ce40(eax_2, &s, 8, data_10066954, data_10066950 * 0x1c)
1000d110  
1000d11a  if (eax_24 == 0)
1000d122      return eax_24
1000d122  
1000d140  int32_t eax_27 = j_sub_1000ce40(eax_2, &s, 9, data_1006695c, data_10066958 * 0x2c)
1000d140  
1000d14a  if (eax_27 == 0)
1000d152      return eax_27
1000d152  
1000d16d  int32_t eax_30 = j_sub_1000ce40(eax_2, &s, 0xa, data_10066964, data_10066960 * 0xc)
1000d16d  
1000d177  if (eax_30 == 0)
1000d17f      return eax_30
1000d17f  
1000d19a  int32_t eax_33 = j_sub_1000ce40(eax_2, &s, 0xb, data_1006696c, data_10066968 * 0x14)
1000d19a  
1000d1a4  if (eax_33 == 0)
1000d1ac      return eax_33
1000d1ac  
1000d1ca  int32_t eax_35 = j_sub_1000ce40(eax_2, &s, 0xc, data_10066974, data_10066970 << 2)
1000d1ca  
1000d1d4  if (eax_35 == 0)
1000d1dc      return eax_35
1000d1dc  
1000d1f8  int32_t eax_39 = j_sub_1000ce40(eax_2, &s, 0xd, data_1006697c, data_10066978 * 0xc)
1000d1f8  
1000d202  if (eax_39 == 0)
1000d20a      return eax_39
1000d20a  
1000d210  sub_100447cf(eax_2, nullptr, FILE_BEGIN)
1000d210  
1000d22b  if (sub_10044949(&s, 0x78, 1, eax_2) u< 1)
1000d22d      sub_10044888(eax_2)
1000d23d      return 0
1000d23d  
1000d23e  sub_10044888(eax_2)
1000d251  return 1

1000d252                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1000d260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d2e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000d340    int32_t sub_1000d340()

1000d359  int16_t x87control
1000d359  int32_t esi = __ftol(x87control, j_sub_10038a90("max_aaslights", &data_1005b380))
1000d359  
1000d365  if (esi s< 0 || esi s> 0x10000)
1000d36e      data_10063fe8(3, "max_aaslights out of range [0, 6…")
1000d377      esi = 0x80
1000d377  
1000d382  int32_t edi_1 = esi * 0x34
1000d386  void* eax_2 = j_sub_10038f90(edi_1)
1000d38b  data_100669dc = eax_2
1000d390  *(eax_2 + 0x30) = 0
1000d397  void* eax_3 = data_100669dc
1000d3a2  *(eax_3 + 0x2c) = eax_3 + 0x34
1000d3a2  
1000d3ab  if (esi - 1 s> 1)
1000d3ae      int32_t eax_4 = 0x34
1000d3b3      int32_t i_1 = esi - 2
1000d3d6      int32_t i
1000d3d6      
1000d3d6      do
1000d3b6          int32_t ecx_2 = data_100669dc
1000d3c0          *(eax_4 + ecx_2 + 0x30) = eax_4 + ecx_2 - 0x34
1000d3c4          int32_t ecx_3 = data_100669dc
1000d3ce          *(eax_4 + ecx_3 + 0x2c) = eax_4 + ecx_3 + 0x34
1000d3d2          eax_4 += 0x34
1000d3d5          i = i_1
1000d3d5          i_1 -= 1
1000d3d6      while (i != 1)
1000d3d6  
1000d3d9  int32_t eax_5 = data_100669dc
1000d3e9  *(edi_1 + eax_5 - 4) = eax_5 + ((esi + ((esi * 3 - 6) << 2) - 2) << 2)
1000d3ed  int32_t result = data_100669dc
1000d3f2  *(edi_1 + result - 8) = 0
1000d401  data_100669e0 = data_100669dc
1000d408  return result

1000d409                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1000d420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d450    void* sub_1000d450()

1000d450  void* result = data_100669e0
1000d450  
1000d45a  if (result != 0)
1000d45c      void* eax = *(result + 0x2c)
1000d461      data_100669e0 = eax
1000d461      
1000d466      if (eax != 0)
1000d468          *(eax + 0x30) = 0
1000d468  
1000d471  if (result == 0)
1000d47a      data_10063fe8(1, "WARNING: empty light heap\n")
1000d47a  
1000d486  return result

1000d487                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................

1000d4a0    void* sub_1000d4a0(void* arg1)

1000d4a0  void* ecx_1 = data_100669e0
1000d4a0  
1000d4ac  if (ecx_1 != 0)
1000d4ae      *(ecx_1 + 0x30) = arg1
1000d4ae  
1000d4b1  *(arg1 + 0x30) = 0
1000d4be  *(arg1 + 0x2c) = data_100669e0
1000d4c1  data_100669e0 = arg1
1000d4c6  return arg1

1000d4c7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................

1000d4e0    void sub_1000d4e0(float arg1)

1000d4e0  void* i_1 = data_100669e4
1000d4e0  
1000d4e8  if (i_1 != 0)
1000d52a      void* i
1000d52a      
1000d52a      do
1000d4eb          long double x87_r7_1 = fconvert.t(*(i_1 + 0x20))
1000d4ee          long double temp0_1 = fconvert.t(arg1)
1000d4ee          x87_r7_1 - temp0_1
1000d4f2          i = *(i_1 + 0x2c)
1000d4f2          
1000d4fa          if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
1000d4fa                  | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1000d4fa                  | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1000d4fe              if (i != 0)
1000d503                  *(i + 0x30) = *(i_1 + 0x30)
1000d503              
1000d506              void* eax_2 = *(i_1 + 0x30)
1000d506              
1000d50b              if (eax_2 == 0)
1000d518                  data_100669e4 = *(i_1 + 0x2c)
1000d50b              else
1000d510                  *(eax_2 + 0x2c) = *(i_1 + 0x2c)
1000d510              
1000d51e              j_sub_1000d4a0(i_1)
1000d51e          
1000d528          i_1 = i
1000d52a      while (i != 0)

1000d52e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1000d540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d550    int32_t sub_1000d550(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)

1000d551  int32_t* eax = j_sub_1000d450()
1000d551  
1000d55a  if (eax != 0)
1000d562      *arg1 = *eax
1000d567      arg1[1] = eax[1]
1000d571      arg1[2] = eax[2]
1000d57c      eax[3] = arg2
1000d583      eax[7] = arg3
1000d58a      eax[4] = arg4
1000d591      eax[5] = arg5
1000d598      eax[6] = arg6
1000d59b      eax[8] = arg7
1000d59e      eax[0xa] = arg8
1000d5a6      eax[9] = fconvert.s(j_sub_1000e120())
1000d5a9      eax[0xc] = 0
1000d5b5      eax[0xb] = data_100669e4
1000d5b8      void* eax_5 = data_100669e4
1000d5b8      
1000d5bf      if (eax_5 != 0)
1000d5c1          *(eax_5 + 0x30) = eax
1000d5c1      
1000d5c4      data_100669e4 = eax
1000d5c4  
1000d5cd  return 0

1000d5ce                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1000d5e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d5f0    void sub_1000d5f0(void* arg1, int32_t arg2, int32_t arg3, int32_t* arg4, int32_t* arg5, void** arg6)

1000d600  int32_t* ebx = arg3
1000d614  int32_t eax_1
1000d614  int16_t x87control
1000d614  eax_1, x87control = j_sub_10007150(arg1, arg2, ebx, &arg3, &arg2, &arg1)
1000d61e  int32_t edi_1
1000d61e  
1000d61e  if (eax_1 == 0)
1000d643      edi_1 = 0xff
1000d61e  else
1000d63f      edi_1 = (arg3 + arg2 + arg1) s/ 3
1000d63f  
1000d648  float* i = data_100669e4
1000d64e  int32_t var_10 = edi_1
1000d64e  
1000d654  for (; i != 0; i = i[0xb])
1000d663      float var_c = fconvert.s(fconvert.t(*ebx) - fconvert.t(*i))
1000d66d      float var_8_1 = fconvert.s(fconvert.t(ebx[1]) - fconvert.t(i[1]))
1000d677      float var_4_1 = fconvert.s(fconvert.t(ebx[2]) - fconvert.t(i[2]))
1000d67b      long double st0_1 = j_sub_10043500(&var_c)
1000d680      long double x87_r7_8 = fconvert.t(i[7]) - st0_1
1000d686      long double temp0_1 = fconvert.t(0f)
1000d686      x87_r7_8 - temp0_1
1000d686      
1000d691      if ((((x87_r7_8 < temp0_1 ? 1 : 0) << 8
1000d691              | (is_unordered.t(x87_r7_8, temp0_1) ? 1 : 0) << 0xa
1000d691              | (x87_r7_8 == temp0_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
1000d699          int32_t eax_5
1000d699          int16_t x87control_1
1000d699          eax_5, x87control_1 = __ftol(x87control, float.t(var_10) + x87_r7_8)
1000d6a6          var_10 = eax_5
1000d6ad          int32_t eax_6
1000d6ad          int16_t x87control_2
1000d6ad          eax_6, x87control_2 = __ftol(x87control_1, float.t(arg3) + fconvert.t(i[4]))
1000d6b2          long double x87_r7_11 = float.t(arg2)
1000d6b6          arg3 = eax_6
1000d6bd          int32_t eax_7
1000d6bd          int16_t x87control_3
1000d6bd          eax_7, x87control_3 = __ftol(x87control_2, x87_r7_11 + fconvert.t(i[5]))
1000d6c2          long double x87_r7_13 = float.t(arg1)
1000d6c6          arg2 = eax_7
1000d6cd          void* eax_8
1000d6cd          eax_8, x87control = __ftol(x87control_3, x87_r7_13 + fconvert.t(i[6]))
1000d6d2          arg1 = eax_8
1000d6d2  
1000d6eb  if (arg4 != 0)
1000d6f1      *arg4 = arg3
1000d6f1  
1000d6f9  if (arg5 != 0)
1000d6ff      *arg5 = arg2
1000d6ff  
1000d707  if (arg6 != 0)
1000d70d      *arg6 = arg1

1000d718                                                                          90 90 90 90 90 90 90 90                          ........
1000d720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000d760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d770    int80_t sub_1000d770(int32_t* arg1, int32_t* arg2, int32_t* arg3, void** arg4)

1000d779  int32_t edx = arg1[1]
1000d77f  long double x87_r7_1 = fconvert.t(arg1[2]) - fconvert.t(4096f)
1000d785  int32_t var_18 = *arg1
1000d78d  int32_t var_14 = edx
1000d79a  float var_10 = fconvert.s(x87_r7_1)
1000d7b3  void var_c
1000d7b3  return j_sub_1000d5f0(arg1, &var_18, &var_c, arg2, arg3, arg4)

1000d7b4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1000d7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000d7e0    int32_t sub_1000d7e0(void* arg1)

1000d7f8  void var_400
1000d7f8  void arg_8
1000d7f8  sub_10044c05(&var_400, arg1, &arg_8)
1000d810  return data_10063fe8(4, &var_400)

1000d811                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1000d820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d830    char* sub_1000d830(int32_t arg1, int32_t* arg2, int32_t arg3)

1000d837  if (data_100669b0 == 0)
1000d84a      data_10063fe8(3, "%s: index %d not setup\n", arg1, arg3)
1000d858      return &data_1006294c
1000d858  
1000d867  if (arg3 s< 0 || arg3 s>= *arg2)
1000d8a0      data_10063fe8(3, "%s: index %d out of range\n", arg1, arg3)
1000d867  else
1000d86c      char* result = *(arg2[1] + (arg3 << 2))
1000d86c      
1000d871      if (result != 0)
1000d8ae          return result
1000d8ae      
1000d875      if (arg3 != 0)
1000d884          data_10063fe8(3, "%s: reference to unused index %d…", arg1, arg3)
1000d884  
1000d8a9  return &data_1006294c

1000d8af                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1000d8c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d8d0    int32_t sub_1000d8d0(int32_t arg1, int32_t* arg2, char* arg3)

1000d8da  if (data_100669b0 != 0)
1000d900      int32_t i = 0
1000d900      
1000d905      if (*arg2 s> 0)
1000d928          do
1000d90b              int32_t edx_1 = arg2[1]
1000d90e              char* eax_2 = *(edx_1 + (i << 2))
1000d90e              
1000d913              if (eax_2 != 0)
1000d917                  int32_t eax_3
1000d917                  int32_t ecx
1000d917                  eax_3, ecx = sub_10045cb0(eax_2, edx_1, ecx, eax_2, arg3)
1000d917                  
1000d921                  if (eax_3 == 0)
1000d935                      return i
1000d935              
1000d925              i += 1
1000d928          while (i s< *arg2)
1000d8da  else
1000d8ed      data_10063fe8(3, "%s: index not setup "%s"\n", arg1, arg3)
1000d8ed  
1000d8fb  return 0

1000d936                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1000d940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000d960    char* sub_1000d960(int32_t arg1)

1000d979  return j_sub_1000d830("ModelFromIndex", data_100669a4, arg1)

1000d97a                                                                                90 90 90 90 90 90                            ......
1000d980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d990    int32_t sub_1000d990(char* arg1)

1000d9a9  return j_sub_1000d8d0("IndexFromModel", data_100669a4, arg1)

1000d9aa                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

1000d9c0    char* sub_1000d9c0(int32_t arg1)

1000d9d9  return j_sub_1000d830("SoundFromIndex", data_100669a8, arg1)

1000d9da                                                                                90 90 90 90 90 90                            ......
1000d9e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000d9f0    int32_t sub_1000d9f0(char* arg1)

1000da09  return j_sub_1000d8d0("IndexFromSound", data_100669a8, arg1)

1000da0a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

1000da20    char* sub_1000da20(int32_t arg1)

1000da39  return j_sub_1000d830("ImageFromIndex", data_100669ac, arg1)

1000da3a                                                                                90 90 90 90 90 90                            ......
1000da40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000da50    int32_t sub_1000da50(char* arg1)

1000da69  return j_sub_1000d8d0("IndexFromImage", data_100669ac, arg1)

1000da6a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

1000da80    int32_t* sub_1000da80(int32_t arg1, int32_t arg2)

1000da8f  int32_t* result = j_sub_10039000((arg1 << 2) + 8)
1000da99  int32_t ebx = 0
1000da9e  *result = arg1
1000daa3  result[1] = &result[2]
1000daa3  
1000daa6  if (arg1 s<= 0)
1000db05      return result
1000db05  
1000daf7  do
1000daad      int32_t edi_1 = *(arg2 + (ebx << 2))
1000daad      
1000dab2      if (edi_1 != 0)
1000dab4          int32_t i = 0xffffffff
1000dab4          
1000dab9          while (i != 0)
1000dab9              bool cond:1_1 = 0 != *edi_1
1000dab9              edi_1 += 1
1000dab9              i -= 1
1000dab9              
1000dab9              if (not(cond:1_1))
1000dab9                  break
1000dab9          
1000dac6          int32_t i_1 = 0xffffffff
1000dacc          *(result[1] + (ebx << 2)) = j_sub_10038f90(not.d(i))
1000dacf          int32_t edi_2 = *(arg2 + (ebx << 2))
1000dacf          
1000dad7          while (i_1 != 0)
1000dad7              bool cond:2_1 = 0 != *edi_2
1000dad7              edi_2 += 1
1000dad7              i_1 -= 1
1000dad7              
1000dad7              if (not(cond:2_1))
1000dad7                  break
1000dad7          
1000dad9          int32_t ecx_2 = not.d(i_1)
1000dae7          int32_t esi_3
1000dae7          int32_t edi_5
1000dae7          edi_5, esi_3 = __builtin_memcpy(dest: *(result[1] + (ebx << 2)), 
1000dae7              src: edi_2 - ecx_2, n: ecx_2 u>> 2 << 2)
1000daee          __builtin_memcpy(dest: edi_5, src: esi_3, n: ecx_2 & 3)
1000daee      
1000daf4      ebx += 1
1000daf7  while (ebx s< arg1)
1000daf7  
1000daff  return result

1000db06                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
1000db20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000db40    int32_t sub_1000db40(void* arg1, int32_t arg2, int32_t arg3)

1000db40  int32_t result = arg2
1000db45  int32_t ebx = 0
1000db45  
1000db49  if (result s> 0)
1000dba9      do
1000db56          int32_t edi_1 = *(arg3 + (ebx << 2))
1000db56          
1000db64          if (edi_1 != 0 && *(*(arg1 + 4) + (ebx << 2)) == 0)
1000db66              int32_t i = 0xffffffff
1000db66              
1000db6b              while (i != 0)
1000db6b                  bool cond:0_1 = 0 != *edi_1
1000db6b                  edi_1 += 1
1000db6b                  i -= 1
1000db6b                  
1000db6b                  if (not(cond:0_1))
1000db6b                      break
1000db6b              
1000db7b              *(*(arg1 + 4) + (ebx << 2)) = j_sub_10038f90(not.d(i))
1000db7e              int32_t edi_2 = *(arg3 + (ebx << 2))
1000db81              int32_t i_1 = 0xffffffff
1000db81              
1000db86              while (i_1 != 0)
1000db86                  bool cond:1_1 = 0 != *edi_2
1000db86                  edi_2 += 1
1000db86                  i_1 -= 1
1000db86                  
1000db86                  if (not(cond:1_1))
1000db86                      break
1000db86              
1000db8b              int32_t ecx_3 = not.d(i_1)
1000db99              int32_t esi_3
1000db99              int32_t edi_5
1000db99              edi_5, esi_3 = __builtin_memcpy(dest: *(*(arg1 + 4) + (ebx << 2)), 
1000db99                  src: edi_2 - ecx_3, n: ecx_3 u>> 2 << 2)
1000dba0              __builtin_memcpy(dest: edi_5, src: esi_3, n: ecx_3 & 3)
1000dba0          
1000dba2          result = arg2
1000dba6          ebx += 1
1000dba9      while (ebx s< result)
1000dba9  
1000dbaf  return result

1000dbb0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
1000dbc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000dbd0    void* sub_1000dbd0(int32_t* arg1)

1000dbd6  int32_t i = 0
1000dbd6  
1000dbdb  if (*arg1 s> 0)
1000dbf5      do
1000dbe0          void* eax_2 = *(arg1[1] + (i << 2))
1000dbe0          
1000dbe5          if (eax_2 != 0)
1000dbe8              j_sub_100390b0(eax_2)
1000dbe8          
1000dbf2          i += 1
1000dbf5      while (i s< *arg1)
1000dbf5  
1000dc02  return j_sub_100390b0(arg1)

1000dc03           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

1000dc20    int32_t* sub_1000dc20(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6)

1000dc20  int32_t* eax_6 = data_100669a4
1000dc20  
1000dc27  if (eax_6 != 0)
1000dc2a      j_sub_1000dbd0(eax_6)
1000dc2a  
1000dc32  int32_t* eax = data_100669a8
1000dc32  
1000dc39  if (eax != 0)
1000dc3c      j_sub_1000dbd0(eax)
1000dc3c  
1000dc44  int32_t* eax_1 = data_100669ac
1000dc44  
1000dc4b  if (eax_1 != 0)
1000dc4e      j_sub_1000dbd0(eax_1)
1000dc4e  
1000dc69  data_100669a4 = j_sub_1000da80(arg1, arg2)
1000dc83  data_100669a8 = j_sub_1000da80(arg3, arg4)
1000dc88  int32_t* result = j_sub_1000da80(arg5, arg6)
1000dc90  data_100669ac = result
1000dc95  data_100669b0 = 1
1000dc9f  return result

1000dca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000dcc0    int32_t* sub_1000dcc0(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6)

1000dcc0  void* eax_9 = data_100669a4
1000dcc0  
1000dcc7  if (eax_9 == 0)
1000dcf0      data_100669a4 = j_sub_1000da80(arg1, arg2)
1000dcc7  else
1000dcd4      j_sub_1000db40(eax_9, arg1, arg2)
1000dcd4  
1000dcf5  void* eax_2 = data_100669a8
1000dcf5  
1000dd01  if (eax_2 == 0)
1000dd20      data_100669a8 = j_sub_1000da80(arg3, arg4)
1000dd01  else
1000dd09      j_sub_1000db40(eax_2, arg3, arg4)
1000dd09  
1000dd25  void* eax_5 = data_100669ac
1000dd25  
1000dd2c  if (eax_5 != 0)
1000dd39      int32_t eax_6 = j_sub_1000db40(eax_5, arg5, arg6)
1000dd41      data_100669b0 = 1
1000dd4b      return eax_6
1000dd4b  
1000dd56  int32_t* eax_8 = j_sub_1000da80(arg5, arg6)
1000dd5e  data_100669ac = eax_8
1000dd63  data_100669b0 = 1
1000dd6d  return eax_8

1000dd6e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1000dd80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000dda0    int32_t sub_1000dda0(int32_t arg1, int32_t* arg2, int32_t* arg3)

1000dda7  int32_t var_48[0x3]
1000dda7  var_48[0] = 0
1000ddb2  var_48[1] = 0
1000ddba  var_48[2] = 0
1000ddc2  int32_t var_3c
1000ddc2  __builtin_memcpy(dest: &var_3c, 
1000ddc2      src: "\x00\x00\x80\xc1\x00\x00\x80\xc1\x00\x00\xc0\xc1\x00\x00\x80\xc1\x00\x00\x80\xc1\x00\x00\xc0\xc1", 
1000ddc2      n: 0x18)
1000ddf2  int32_t var_24[0x3]
1000ddf2  var_24[0] = 0
1000ddfa  var_24[1] = 0
1000de02  var_24[2] = 0
1000de0a  int32_t var_18
1000de0a  __builtin_memcpy(dest: &var_18, 
1000de0a      src: "\x00\x00\x80\x41\x00\x00\x80\x41\x00\x00\x00\x42\x00\x00\x80\x41\x00\x00\x80\x41\x00\x00\x00\x41", 
1000de0a      n: 0x18)
1000de3a  int32_t eax_1
1000de3a  
1000de3a  if (arg1 != 4)
1000de46      if (arg1 != 2)
1000de4f          data_10063fe8(4, "AAS_PresenceTypeBoundingBox: unk…")
1000de4f      
1000de58      eax_1 = 2
1000de3a  else
1000de3c      eax_1 = 1
1000de3c  
1000de64  int32_t eax_3 = eax_1 * 0xc
1000de6b  *arg2 = (&var_48)[eax_1][0]
1000de71  var_44
1000de71  arg2[1] = *(&var_44 + eax_3)
1000de78  var_40
1000de78  arg2[2] = *(&var_40 + eax_3)
1000de83  *arg3 = (&var_24)[eax_1][0]
1000de89  var_1c
1000de89  int32_t result = *(&var_1c + eax_3)
1000de8d  var_20
1000de8d  arg3[1] = *(&var_20 + eax_3)
1000de90  arg3[2] = result
1000de96  return result

1000de97                                                                       90 90 90 90 90 90 90 90 90                         .........
1000dea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000dec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000dee0    int32_t sub_1000dee0()

1000dee5  return data_100667e4

1000dee6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

1000df00    int32_t sub_1000df00()

1000df07  data_100667e4 = 1
1000df1a  return data_10063fe8(1, "AAS initialized.\n")

1000df1b                                                                                   90 90 90 90 90                             .....
1000df20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000df30    int32_t sub_1000df30(int32_t arg1)

1000df30  int32_t result = data_100667e0
1000df30  
1000df37  if (result != 0)
1000df3d      result = data_100667e4
1000df3d      
1000df44      if (result == 0)
1000df4e          int32_t var_4_1 = arg1
1000df4f          result = j_sub_10018920()
1000df4f          
1000df59          if (result == 0)
1000df5b              int16_t x87control = j_sub_100096e0()
1000df67              int32_t eax_2
1000df67              
1000df67              if (data_100667e8 == 0)
1000df76                  eax_2, x87control = __ftol(x87control, j_sub_10038990("forcewrite"))
1000df76              
1000df7d              if (data_100667e8 != 0 || eax_2 != 0)
1000df93                  if (__ftol(x87control, j_sub_10038990("nooptimize")) == 0)
1000df95                      j_sub_10010e90()
1000df95                  
1000dfae                  int32_t var_c_1
1000dfae                  char* var_8_1
1000dfae                  
1000dfae                  if (j_sub_1000cee0(&data_100667f0) == 0)
1000dfb9                      var_8_1 = "couldn't write %s\n"
1000dfbe                      var_c_1 = 3
1000dfae                  else
1000dfb0                      var_8_1 = "%s written succesfully\n"
1000dfb5                      var_c_1 = 1
1000dfb5                  
1000dfc0                  data_10063fe8(var_c_1, var_8_1, &data_100667f0)
1000dfc0              
1000dfc9              j_sub_10019520()
1000dfce              return j_sub_1000df00() __tailcall
1000dfce  
1000dfd3  return result

1000dfd4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1000dfe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000e010    int32_t sub_1000e010(float arg1)

1000e015  data_100667ec = arg1
1000e01a  j_sub_1000b0e0()
1000e024  j_sub_1001cfa0(arg1)
1000e02a  j_sub_1000d4e0(arg1)
1000e030  j_sub_1000df30(arg1)
1000e03a  data_10066a70 = 0
1000e044  long double st0 = j_sub_10038990("showcacheupdates")
1000e049  long double temp0 = fconvert.t(0f)
1000e049  st0 - temp0
1000e049  
1000e058  if ((((st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
1000e058          | (st0 == temp0 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
1000e05a      j_sub_1001a610()
1000e069      j_sub_10038ac0("showcacheupdates", &data_1005b570)
1000e069  
1000e076  long double st0_1 = j_sub_10038990("showmemoryusage")
1000e07b  long double temp1 = fconvert.t(0f)
1000e07b  st0_1 - temp1
1000e07b  
1000e089  if ((((st0_1 < temp1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp1) ? 1 : 0) << 0xa
1000e089          | (st0_1 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
1000e08b      j_sub_10039150()
1000e09a      j_sub_10038ac0("showmemoryusage", &data_1005b570)
1000e09a  
1000e0a7  long double st0_2 = j_sub_10038990("memorydump")
1000e0ac  long double temp2 = fconvert.t(0f)
1000e0ac  st0_2 - temp2
1000e0ac  
1000e0ba  if ((((st0_2 < temp2 ? 1 : 0) << 8 | (is_unordered.t(st0_2, temp2) ? 1 : 0) << 0xa
1000e0ba          | (st0_2 == temp2 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
1000e0bc      j_sub_10039190()
1000e0cb      j_sub_10038ac0("memorydump", &data_1005b570)
1000e0cb  
1000e0d5  return 0

1000e0d6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1000e0e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000e120    long double sub_1000e120()

1000e126  return fconvert.t(data_100667ec)

1000e127                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................

1000e140    char* sub_1000e140(char* arg1)

1000e15d  char var_120[0x90]
1000e15d  StrCopyFixed(&var_120, arg1, 0x90)
1000e162  char (* edi)[0x90] = &var_120
1000e169  int32_t i = 0xffffffff
1000e169  
1000e173  while (i != 0)
1000e173      bool cond:0_1 = 0 != *edi
1000e173      edi = &(*edi)[1]
1000e173      i -= 1
1000e173      
1000e173      if (not(cond:0_1))
1000e173          break
1000e173  
1000e188  sub_10044cb0(&var_120, ".bsp", 0x90 - (not.d(i) - 1))
1000e1a8  char var_240[0x90]
1000e1a8  StrCopyFixed(&var_240, j_sub_10038960("basedir"), 0x90)
1000e1ad  char (* edi_1)[0x90] = &var_240
1000e1b1  int32_t i_1 = 0xffffffff
1000e1b1  
1000e1bb  while (i_1 != 0)
1000e1bb      bool cond:1_1 = 0 != *edi_1
1000e1bb      edi_1 = &(*edi_1)[1]
1000e1bb      i_1 -= 1
1000e1bb      
1000e1bb      if (not(cond:1_1))
1000e1bb          break
1000e1bb  
1000e1c8  j_sub_10041900(&var_240, 0x90 - (not.d(i_1) - 1))
1000e1cd  char (* edi_2)[0x90] = &var_240
1000e1d1  int32_t i_2 = 0xffffffff
1000e1d1  
1000e1d9  while (i_2 != 0)
1000e1d9      bool cond:2_1 = 0 != *edi_2
1000e1d9      edi_2 = &(*edi_2)[1]
1000e1d9      i_2 -= 1
1000e1d9      
1000e1d9      if (not(cond:2_1))
1000e1d9          break
1000e1d9  
1000e1f9  sub_10044cb0(&var_240, j_sub_10038960("gamedir"), 0x90 - (not.d(i_2) - 1))
1000e1fe  char (* edi_3)[0x90] = &var_240
1000e202  int32_t i_3 = 0xffffffff
1000e202  
1000e20c  while (i_3 != 0)
1000e20c      bool cond:3_1 = 0 != *edi_3
1000e20c      edi_3 = &(*edi_3)[1]
1000e20c      i_3 -= 1
1000e20c      
1000e20c      if (not(cond:3_1))
1000e20c          break
1000e20c  
1000e219  j_sub_10041900(&var_240, 0x90 - (not.d(i_3) - 1))
1000e230  char var_1b0[0x90]
1000e230  StrCopyFixed(&var_1b0, &var_240, 0x90)
1000e235  int32_t i_4 = 0xffffffff
1000e238  char (* edi_4)[0x90] = &var_240
1000e238  
1000e23e  while (i_4 != 0)
1000e23e      bool cond:4_1 = 0 != *edi_4
1000e23e      edi_4 = &(*edi_4)[1]
1000e23e      i_4 -= 1
1000e23e      
1000e23e      if (not(cond:4_1))
1000e23e          break
1000e23e  
1000e255  sub_10044cb0(&var_240, "maps", 0x90 - (not.d(i_4) - 1))
1000e269  char (* edi_5)[0x90] = &var_240
1000e269  
1000e26f  if (sub_10052e5c(&var_240, 4) == 0)
1000e288      int32_t i_5 = 0xffffffff
1000e288      
1000e28d      while (i_5 != 0)
1000e28d          bool cond:5_1 = 0 != *edi_5
1000e28d          edi_5 = &(*edi_5)[1]
1000e28d          i_5 -= 1
1000e28d          
1000e28d          if (not(cond:5_1))
1000e28d              break
1000e28d      
1000e29f      j_sub_10041900(&var_240, 0x90 - (not.d(i_5) - 1))
1000e26f  else
1000e271      int32_t i_6 = 0xffffffff
1000e271      
1000e276      while (i_6 != 0)
1000e276          bool cond:6_1 = 0 != *edi_5
1000e276          edi_5 = &(*edi_5)[1]
1000e276          i_6 -= 1
1000e276          
1000e276          if (not(cond:6_1))
1000e276              break
1000e276      
1000e282      int32_t __saved_esi
1000e282      *(not.d(i_6) - 1 + &__saved_esi) = 0
1000e282  
1000e2a7  char (* edi_6)[0x90] = &var_240
1000e2ab  int32_t i_7 = 0xffffffff
1000e2ab  
1000e2b5  while (i_7 != 0)
1000e2b5      bool cond:7_1 = 0 != *edi_6
1000e2b5      edi_6 = &(*edi_6)[1]
1000e2b5      i_7 -= 1
1000e2b5      
1000e2b5      if (not(cond:7_1))
1000e2b5          break
1000e2b5  
1000e2c3  sub_10044cb0(&var_240, arg1, 0x90 - (not.d(i_7) - 1))
1000e2c8  char (* edi_7)[0x90] = &var_240
1000e2cc  int32_t i_8 = 0xffffffff
1000e2cc  
1000e2d6  while (i_8 != 0)
1000e2d6      bool cond:8_1 = 0 != *edi_7
1000e2d6      edi_7 = &(*edi_7)[1]
1000e2d6      i_8 -= 1
1000e2d6      
1000e2d6      if (not(cond:8_1))
1000e2d6          break
1000e2d6  
1000e2e8  sub_10044cb0(&var_240, ".aas", 0x90 - (not.d(i_8) - 1))
1000e2ed  char (* edi_8)[0x90] = &var_1b0
1000e2f4  int32_t i_9 = 0xffffffff
1000e2f4  
1000e2fe  while (i_9 != 0)
1000e2fe      bool cond:9_1 = 0 != *edi_8
1000e2fe      edi_8 = &(*edi_8)[1]
1000e2fe      i_9 -= 1
1000e2fe      
1000e2fe      if (not(cond:9_1))
1000e2fe          break
1000e2fe  
1000e313  sub_10044cb0(&var_1b0, "winbspc.exe", 0x90 - (not.d(i_9) - 1))
1000e31f  char (* var_270)[0x90] = &var_1b0
1000e325  j_sub_10038d80("spawning "%s"")
1000e335  char (* var_278)[0x90] = &var_240
1000e336  char (* var_27c_1)[0x90] = &var_120
1000e344  void var_90
1000e344  sub_10044c56(&var_90, "bsp2aas(%s,%s);")
1000e350  int32_t var_288 = 0
1000e359  void* var_28c = &var_90
1000e361  char (* var_290)[0x90] = &var_1b0
1000e365  char* result = sub_10052e44(1, &var_1b0)
1000e365  
1000e371  if (result s>= 0)
1000e389      return result
1000e389  
1000e37a  return data_10063fe8(3, "can't execute WinBSPC\n")

1000e38a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
1000e3a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e3c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e3e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000e430    int32_t sub_1000e430(char* arg1)

1000e436  char edx = data_1006294c
1000e44e  char var_1b0 = edx
1000e455  char var_360 = edx
1000e459  void s_1
1000e459  int16_t* edi = __builtin_memset(s: &s_1, c: 0, n: 0x8c)
1000e45b  *edi = 0
1000e45d  edi[1].b = 0
1000e46c  char var_120 = edx
1000e473  void s_2
1000e473  int16_t* edi_3 = __builtin_memset(s: &s_2, c: 0, n: 0x8c)
1000e475  *edi_3 = 0
1000e477  edi_3[1].b = 0
1000e486  char var_90 = edx
1000e48d  void s_3
1000e48d  int16_t* edi_6 = __builtin_memset(s: &s_3, c: 0, n: 0x8c)
1000e48f  *edi_6 = 0
1000e491  edi_6[1].b = 0
1000e49d  char* var_374 = "basedir"
1000e4a2  void s
1000e4a2  int16_t* edi_9 = __builtin_memset(&s, c: 0, n: 0x8c)
1000e4a4  *edi_9 = 0
1000e4a6  edi_9[1].b = 0
1000e4a7  char* eax = j_sub_10038960(var_374)
1000e4ac  char* var_378 = "gamedir"
1000e4b3  char* eax_1 = j_sub_10038960(var_378)
1000e4b3  
1000e4bf  if (eax != 0)
1000e4c1      char* edi_12 = eax
1000e4c3      int32_t i = 0xffffffff
1000e4c3      
1000e4c8      while (i != 0)
1000e4c8          bool cond:0_1 = 0 != *edi_12
1000e4c8          edi_12 = &edi_12[1]
1000e4c8          i -= 1
1000e4c8          
1000e4c8          if (not(cond:0_1))
1000e4c8              break
1000e4c8      
1000e4cd      if (not.d(i) != 1)
1000e4cf          int32_t var_374_1 = 0x90
1000e4d8          var_378 = eax
1000e4da          sub_10044cb0(&var_360, var_378, var_374_1)
1000e4e9          j_sub_10041900(&var_360, 0x90)
1000e4e9  
1000e4f3  if (eax_1 != 0)
1000e4f5      char* edi_13 = eax_1
1000e4f7      int32_t i_1 = 0xffffffff
1000e4f7      
1000e4fc      while (i_1 != 0)
1000e4fc          bool cond:1_1 = 0 != *edi_13
1000e4fc          edi_13 = &edi_13[1]
1000e4fc          i_1 -= 1
1000e4fc          
1000e4fc          if (not(cond:1_1))
1000e4fc              break
1000e4fc      
1000e501      if (not.d(i_1) != 1)
1000e503          char* edi_14 = &var_360
1000e507          int32_t i_2 = 0xffffffff
1000e507          
1000e50a          while (i_2 != 0)
1000e50a              bool cond:4_1 = 0 != *edi_14
1000e50a              edi_14 = &edi_14[1]
1000e50a              i_2 -= 1
1000e50a              
1000e50a              if (not(cond:4_1))
1000e50a                  break
1000e50a          
1000e51b          var_378 = eax_1
1000e51d          sub_10044cb0(&var_360, var_378, 0x90 - (not.d(i_2) - 1))
1000e52c          j_sub_10041900(&var_360, 0x90)
1000e52c  
1000e53b  int32_t* var_374_3 = 0x90
1000e540  void var_240
1000e540  var_378 = &var_240
1000e541  sub_1004501e(var_378, var_374_3)
1000e54b  sub_10044f98(&var_360)
1000e54b  
1000e555  if (eax_1 != 0)
1000e557      int32_t var_374_4 = 0x90
1000e563      var_378 = eax_1
1000e565      StrCopyFixed(&var_1b0, var_378, var_374_4)
1000e565  
1000e56d  int32_t var_374_5 = 0x90
1000e579  var_378 = "baseq2"
1000e57f  StrCopyFixed(&var_120, var_378, var_374_5)
1000e584  char var_2d0[0x90]
1000e584  char (* edi_15)[0x90] = &var_2d0
1000e58b  int32_t i_3 = 0xffffffff
1000e58b  
1000e597  while (i_3 != 0)
1000e597      bool cond:2_1 = 0 != *edi_15
1000e597      edi_15 = &(*edi_15)[1]
1000e597      i_3 -= 1
1000e597      
1000e597      if (not(cond:2_1))
1000e597          break
1000e597  
1000e5ad  StrCopyFixed(&var_2d0, arg1, 0x90 - (not.d(i_3) - 1))
1000e5b2  char (* edi_16)[0x90] = &var_2d0
1000e5b9  int32_t i_4 = 0xffffffff
1000e5b9  
1000e5be  while (i_4 != 0)
1000e5be      bool cond:3_1 = 0 != *edi_16
1000e5be      edi_16 = &(*edi_16)[1]
1000e5be      i_4 -= 1
1000e5be      
1000e5be      if (not(cond:3_1))
1000e5be          break
1000e5be  
1000e5d8  sub_10044cb0(&var_2d0, ".aas", 0x90 - (not.d(i_4) - 1))
1000e5e0  int32_t i_5 = 0
1000e5e2  char* ebx_1 = &var_1b0
1000e5e2  
1000e6e2  do
1000e6d2      for (int32_t j = 0; j s< 0xa; j += 1)
1000e5eb          int16_t edx_2 = data_1005b66c
1000e5f2          char* eax_4
1000e5f2          eax_4.b = data_1005b66e
1000e5fb          int32_t var_374_6 = 0x90
1000e600          var_378 = &var_360
1000e601          var_360.w = edx_2
1000e606          char var_35e_1 = eax_4.b
1000e60a          j_sub_10041900(var_378, var_374_6)
1000e60f          char* edi_17 = ebx_1
1000e611          int32_t k = 0xffffffff
1000e611          
1000e619          while (k != 0)
1000e619              bool cond:7_1 = 0 != *edi_17
1000e619              edi_17 = &edi_17[1]
1000e619              k -= 1
1000e619              
1000e619              if (not(cond:7_1))
1000e619                  break
1000e619          
1000e61e          if (not.d(k) != 1)
1000e620              char* edi_18 = &var_360
1000e624              int32_t k_1 = 0xffffffff
1000e624              
1000e627              while (k_1 != 0)
1000e627                  bool cond:6_1 = 0 != *edi_18
1000e627                  edi_18 = &edi_18[1]
1000e627                  k_1 -= 1
1000e627                  
1000e627                  if (not(cond:6_1))
1000e627                      break
1000e627              
1000e638              var_378 = ebx_1
1000e63a              sub_10044cb0(&var_360, var_378, 0x90 - (not.d(k_1) - 1))
1000e649              j_sub_10041900(&var_360, 0x90)
1000e649          
1000e651          char* edi_19 = &var_360
1000e655          int32_t k_2 = 0xffffffff
1000e65a          int32_t j_1 = j
1000e65a          
1000e65b          while (k_2 != 0)
1000e65b              bool cond:5_1 = 0 != *edi_19
1000e65b              edi_19 = &edi_19[1]
1000e65b              k_2 -= 1
1000e65b              
1000e65b              if (not(cond:5_1))
1000e65b                  break
1000e65b          
1000e660          var_378 = "aas%d.zip"
1000e66a          sub_10044c56(&var_378 + not.d(k_2) - 1 + 0x18, var_378)
1000e66a          
1000e680          if (sub_10052e5c(&var_360, 4) == 0)
1000e68d              char* var_374_8 = &var_360
1000e68e              var_378 = &var_2d0
1000e694              j_sub_10038d80("searching %s in %s")
1000e694              
1000e6b2              if (j_sub_10041240(&var_360, &var_2d0, 0) != 0)
1000e708                  int32_t var_374_11 = 0
1000e711                  var_378 = nullptr
1000e723                  *sub_10044f86() = j_sub_1000c730(&var_2d0, var_378)
1000e723                  
1000e72d                  if (*sub_10044f86() != 0)
1000e740                      return *sub_10044f86()
1000e740                  
1000e749                  sub_10044ede(&var_2d0)
1000e759                  var_378 = &var_2d0
1000e762                  data_10063fe8(1, "loaded %s\%s\n", &var_360, var_378)
1000e773                  char* var_388_2 = &var_360
1000e774                  char (* var_38c_1)[0x90] = &var_2d0
1000e77a                  j_sub_10038d80("found %s in %s")
1000e787                  sub_10044f98(&var_240)
1000e79b                  return 0
1000e79b              
1000e6bf              char* var_374_9 = &var_360
1000e6c0              var_378 = &var_2d0
1000e6c6              j_sub_10038d80("could not find %s in %s")
1000e6c6      
1000e6d8      i_5 += 1
1000e6d9      ebx_1 = &ebx_1[0x90]
1000e6e2  while (i_5 s< 2)
1000e6e2  
1000e6f0  sub_10044f98(&var_240)
1000e707  return 5

1000e79c                                                                                      90 90 90 90                              ....
1000e7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e7e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000e860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000e880    int32_t sub_1000e880(char* arg1)

1000e886  int32_t i = 0xffffffff
1000e895  char* edi = arg1
1000e895  
1000e897  while (i != 0)
1000e897      bool cond:0_1 = 0 != *edi
1000e897      edi = &edi[1]
1000e897      i -= 1
1000e897      
1000e897      if (not(cond:0_1))
1000e897          break
1000e897  
1000e899  int32_t ecx = not.d(i)
1000e8a9  int32_t esi_1
1000e8a9  int32_t edi_2
1000e8a9  edi_2, esi_1 = __builtin_memcpy(dest: &data_10066880, src: edi - ecx, n: ecx u>> 2 << 2)
1000e8b0  __builtin_memcpy(dest: edi_2, src: esi_1, n: ecx & 3)
1000e8b2  j_sub_1000b090()
1000e8c2  int32_t var_1c8 = 0x90
1000e8c7  void* s
1000e8c7  __builtin_memset(&s, c: 0, n: 0x98)
1000e8d6  char var_120[0x90]
1000e8d6  StrCopyFixed(&var_120, "maps\", var_1c8)
1000e8db  char (* edi_3)[0x90] = &var_120
1000e8e2  int32_t i_1 = 0xffffffff
1000e8e2  
1000e8ec  while (i_1 != 0)
1000e8ec      bool cond:1_1 = 0 != *edi_3
1000e8ec      edi_3 = &(*edi_3)[1]
1000e8ec      i_1 -= 1
1000e8ec      
1000e8ec      if (not(cond:1_1))
1000e8ec          break
1000e8ec  
1000e8fd  sub_10044cb0(&var_120, arg1, 0x90 - (not.d(i_1) - 1))
1000e902  char (* edi_4)[0x90] = &var_120
1000e909  int32_t i_2 = 0xffffffff
1000e909  
1000e913  while (i_2 != 0)
1000e913      bool cond:2_1 = 0 != *edi_4
1000e913      edi_4 = &(*edi_4)[1]
1000e913      i_2 -= 1
1000e913      
1000e913      if (not(cond:2_1))
1000e913          break
1000e913  
1000e928  sub_10044cb0(&var_120, ".bsp", 0x90 - (not.d(i_2) - 1))
1000e928  
1000e944  if (j_sub_10041f60(&var_120, &s) == 0)
1000ebca      data_10063fe8(4, "couldn't find the bsp file %s\n", &var_120)
1000ebe1      return 0xc
1000ebe1  
1000e952  int32_t var_1b4
1000e952  int32_t var_1c8_1 = var_1b4
1000e968  char var_1b0[0x90]
1000e968  *sub_10044f86() = j_sub_10007d30(&var_1b0, s)
1000e968  
1000e972  if (*sub_10044f86() != 0)
1000e984      return *sub_10044f86()
1000e984  
1000e98b  if (var_1b4 == 0)
1000e9bb      data_10063fe8(1, "loaded %s\n", &var_120)
1000e98b  else
1000e9a1      data_10063fe8(1, "loaded %s\%s\n", &var_1b0, &var_120)
1000e9a1  
1000e9cf  int32_t i_3 = 0
1000e9d1  __builtin_memset(&s, c: 0, n: 0x98)
1000e9d1  
1000ea6f  do
1000e9da      char* var_1d0_4
1000e9da      char* var_1cc_4
1000e9da      char var_90[0x90]
1000e9da      
1000e9da      if (i_3 == 0)
1000e9f2          var_1cc_4 = &data_1006294c
1000e9f7          var_1d0_4 = &var_90
1000e9da      else
1000e9e3          var_1cc_4 = "maps\"
1000e9e8          var_1d0_4 = &var_90
1000e9e8      
1000e9f8      StrCopyFixed(var_1d0_4, var_1cc_4, 0x90)
1000e9fd      char (* edi_5)[0x90] = &var_90
1000ea04      int32_t j = 0xffffffff
1000ea04      
1000ea0c      while (j != 0)
1000ea0c          bool cond:3_1 = 0 != *edi_5
1000ea0c          edi_5 = &(*edi_5)[1]
1000ea0c          j -= 1
1000ea0c          
1000ea0c          if (not(cond:3_1))
1000ea0c              break
1000ea0c      
1000ea22      sub_10044cb0(&var_90, arg1, 0x90 - (not.d(j) - 1))
1000ea27      char (* edi_6)[0x90] = &var_90
1000ea2e      int32_t j_1 = 0xffffffff
1000ea2e      
1000ea38      while (j_1 != 0)
1000ea38          bool cond:4_1 = 0 != *edi_6
1000ea38          edi_6 = &(*edi_6)[1]
1000ea38          j_1 -= 1
1000ea38          
1000ea38          if (not(cond:4_1))
1000ea38              break
1000ea38      
1000ea4d      sub_10044cb0(&var_90, ".aas", 0x90 - (not.d(j_1) - 1))
1000ea4d      
1000ea69      if (j_sub_10041f60(&var_90, &s) != 0)
1000eaa9          int32_t var_1c8_7 = var_1b4
1000eabf          *sub_10044f86() = j_sub_1000c730(&var_1b0, s)
1000eabf          
1000eac9          if (*sub_10044f86() != 0)
1000eadb              return *sub_10044f86()
1000eadb          
1000eae2          if (s == 0)
1000eb0f              data_10063fe8(1, "loaded %s\n", &var_1b0)
1000eae2          else
1000eaf8              data_10063fe8(1, "loaded %s\%s\n", &var_1b0, &var_90)
1000eaf8          
1000eb1c          int32_t var_1c8_10 = 0x90
1000eb1c          
1000eb23          if (s == 0)
1000eb50              StrCopyFixed(&data_100667f0, &var_1b0, var_1c8_10)
1000eb63              return 0
1000eb63          
1000eb32          StrCopyFixed(&data_100667f0, &var_90, var_1c8_10)
1000eb45          return 0
1000eb45      
1000ea6b      i_3 += 1
1000ea6f  while (i_3 s< 2)
1000ea6f  
1000ea85  *sub_10044f86() = j_sub_1000e430(arg1)
1000ea85  
1000ea8f  if (*sub_10044f86() == 0)
1000eaa0      return 0
1000eaa0  
1000eb6e  long double st0 = j_sub_10038a90("autolaunchbspc", &data_1005b570)
1000eb73  long double temp0 = fconvert.t(0f)
1000eb73  st0 - temp0
1000eb73  
1000eb81  if ((((st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
1000eb81          | (st0 == temp0 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
1000eb84      j_sub_1000e140(arg1)
1000eb93      data_10063fe8(5, "\ncreating AAS for %s...\n\nThis…", arg1, arg1, arg1)
1000eb93  
1000eba3  data_10063fe8(4, "no AAS file available\n")
1000ebba  return 5

1000ebe2        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1000ec00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ec20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ec40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ec60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ec80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000eca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000ecc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000ecd0    int32_t sub_1000ecd0(char* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

1000ecd7  if (arg1 == 0)
1000ecf7      j_sub_1000dcc0(arg2, arg3, arg4, arg5, arg6, arg7)
1000ed02      return 0
1000ed02  
1000ed21  data_100667e4 = 0
1000ed2b  j_sub_1000dc20(arg2, arg3, arg4, arg5, arg6, arg7)
1000ed30  j_sub_10019550()
1000ed45  *sub_10044f86() = j_sub_1000e880(arg1)
1000ed45  
1000ed4f  if (*sub_10044f86() != 0)
1000ed51      data_100667e0 = 0
1000ed63      return *sub_10044f86()
1000ed63  
1000ed64  j_sub_1001ac00()
1000ed69  j_sub_1001ade0()
1000ed6e  j_sub_10018c70()
1000ed73  j_sub_1001d140()
1000ed78  j_sub_1001ab80()
1000ed80  return 0

1000ed81     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1000eda0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000edc0    int32_t sub_1000edc0(int32_t arg1, int32_t arg2)

1000edc9  data_1006699c = arg2
1000edce  void* eax = data_100669a0
1000edd3  data_10066998 = arg1
1000edd3  
1000eddb  if (eax != 0)
1000edde      j_sub_100390b0(eax)
1000edde  
1000edf9  data_100669a0 = j_sub_10039000(arg1 * 0x84)
1000edfe  j_sub_1001d260()
1000ee03  j_sub_1000b0e0()
1000ee0b  return 0

1000ee0c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
1000ee20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000ee30    int32_t sub_1000ee30()

1000ee30  j_sub_10019550()
1000ee35  j_sub_1001d290()
1000ee3a  j_sub_1001ad10()
1000ee3f  j_sub_1001ae30()
1000ee44  j_sub_1000c490()
1000ee49  void* eax = data_100669a0
1000ee49  
1000ee50  if (eax != 0)
1000ee53      j_sub_100390b0(eax)
1000ee53  
1000ee6f  __builtin_memset(s: &data_100667e0, c: 0, n: 0x2a4)
1000ee71  data_100667e4 = 0
1000ee80  return data_10063fe8(1, "AAS shutdown.\n")

1000ee81     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1000eea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000eeb0    int32_t sub_1000eeb0(int32_t* arg1, int32_t arg2, float* arg3)

1000eec1  int32_t ecx = arg1[1]
1000eec4  long double x87_r7 = fconvert.t(arg1[2])
1000eec7  int32_t var_30 = *arg1
1000eecf  int32_t var_2c = ecx
1000eede  int32_t* var_48 = &var_30
1000eee5  float var_28 = fconvert.s(x87_r7 - fconvert.t(4f))
1000eefc  int32_t var_24
1000eefc  __builtin_memcpy(dest: &var_24, src: j_sub_1001b260(&var_24, arg1, var_48, arg2, arg3), 
1000eefc      n: 0x24)
1000eefc  
1000ef04  if (var_24 != 0)
1000ef0e      return 0
1000ef0e  
1000ef0f  float var_20
1000ef0f  long double x87_r7_2 = fconvert.t(var_20)
1000ef13  long double temp0 = fconvert.t(1.0)
1000ef13  x87_r7_2 - temp0
1000ef19  int32_t eax_3
1000ef19  eax_3.w = (x87_r7_2 < temp0 ? 1 : 0) << 8
1000ef19      | (is_unordered.t(x87_r7_2, temp0) ? 1 : 0) << 0xa
1000ef19      | (x87_r7_2 == temp0 ? 1 : 0) << 0xe
1000ef19  
1000ef1e  if ((eax_3:1.b & 1) == 0)
1000ef28      return 0
1000ef28  
1000ef2c  float var_14
1000ef2c  long double x87_r7_4 = fconvert.t(arg1[2]) - fconvert.t(var_14)
1000ef30  long double temp1 = fconvert.t(2f)
1000ef30  x87_r7_4 - temp1
1000ef36  eax_3.w = (x87_r7_4 < temp1 ? 1 : 0) << 8
1000ef36      | (is_unordered.t(x87_r7_4, temp1) ? 1 : 0) << 0xa
1000ef36      | (x87_r7_4 == temp1 ? 1 : 0) << 0xe
1000ef36  
1000ef3b  if ((eax_3:1.b & 0x41) == 0)
1000ef45      return 0
1000ef45  
1000ef50  int32_t var_4
1000ef50  long double x87_r7_5 = fconvert.t(*(j_sub_1001c6c0(var_4) + 8))
1000ef5c  long double temp2 = fconvert.t(*(data_10064064 + 0x10))
1000ef5c  x87_r7_5 - temp2
1000ef5f  void* eax_8
1000ef5f  eax_8.w = (x87_r7_5 < temp2 ? 1 : 0) << 8
1000ef5f      | (is_unordered.t(x87_r7_5, temp2) ? 1 : 0) << 0xa
1000ef5f      | (x87_r7_5 == temp2 ? 1 : 0) << 0xe
1000ef5f  
1000ef64  if ((eax_8:1.b & 1) == 0)
1000ef7a      return 1
1000ef7a  
1000ef6e  return 0

1000ef7b                                                                                   90 90 90 90 90                             .....
1000ef80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000efa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000efc0    int32_t sub_1000efc0(int32_t* arg1)

1000efcc  int32_t edx = arg1[1]
1000efcf  long double x87_r7_1 = fconvert.t(arg1[2]) - fconvert.t(2f)
1000efd9  int32_t var_c = *arg1
1000efde  int32_t var_8 = edx
1000efe2  float var_4 = fconvert.s(x87_r7_1)
1000efeb  int32_t eax_1
1000efeb  eax_1.b = j_sub_10003080(&var_c).b & 0x38
1000efed  char temp0 = eax_1.b
1000efed  eax_1.b = neg.b(eax_1.b)
1000eff6  return neg.d(sbb.d(eax_1, eax_1, temp0 != 0))

1000eff7                                                                       90 90 90 90 90 90 90 90 90                         .........
1000f000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000f010    int80_t sub_1000f010(void* arg1, int32_t* arg2)

1000f023  float var_68
1000f023  float* var_80 = &var_68
1000f024  int32_t var_60 = 0
1000f02c  var_68 = fconvert.s(fconvert.t(*(arg1 + 0xc)) - fconvert.t(*(arg1 + 0x18)))
1000f036  float var_64 = fconvert.s(fconvert.t(*(arg1 + 0x10)) - fconvert.t(*(arg1 + 0x1c)))
1000f03a  j_sub_10043290(var_80)
1000f042  int32_t edx = *(arg1 + 0x10)
1000f04a  long double x87_r7_6 = fconvert.t(*(arg1 + 0x14)) + fconvert.t(1f)
1000f054  int32_t var_74 = *(arg1 + 0xc)
1000f063  float var_6c = fconvert.s(x87_r7_6)
1000f06b  float var_5c
1000f06b  j_sub_10043570(&var_68, 400f, &var_5c)
1000f070  int32_t var_90 = 0
1000f072  char var_94 = 0x7c
1000f074  float var_98 = 0.100000001f
1000f079  int32_t var_9c = 2
1000f07f  int32_t var_a0 = 1
1000f097  float var_50
1000f097  int32_t eax
1000f097  int80_t result
1000f097  eax, result = j_sub_1000f840(&var_50, 0xffffffff, &var_74, 2, 1, &data_100631cc, &var_5c, 
1000f097      var_a0, var_9c, var_98, var_94, var_90)
1000f0ae  __builtin_memcpy(dest: &var_50, src: eax, n: 0x50)
1000f0b4  *arg2 = fconvert.s(fconvert.t(var_50))
1000f0c1  int32_t var_48
1000f0c1  arg2[2] = var_48
1000f0c4  char var_10
1000f0c4  int32_t ecx_1
1000f0c4  ecx_1.b = var_10
1000f0c8  int32_t var_4c
1000f0c8  arg2[1] = var_4c
1000f0c8  
1000f0d0  if ((ecx_1.b & 0x38) != 0)
1000f0da      *arg2 = var_74
1000f0e0      arg2[1] = edx
1000f0e3      arg2[2] = var_6c
1000f0e3  
1000f0e9  return result

1000f0ea                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
1000f100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000f130    int32_t sub_1000f130(int32_t* arg1)

1000f13c  float edx = arg1[1]
1000f13f  long double x87_r7_1 = fconvert.t(arg1[2]) + fconvert.t(48f)
1000f149  float var_c = *arg1
1000f152  float var_4 = fconvert.s(x87_r7_1)
1000f152  
1000f163  if ((j_sub_10003080(&var_c) & 0x20000000) != 0)
1000f16d      return 1
1000f16d  
1000f17d  var_c = fconvert.s(fconvert.t(var_c) + fconvert.t(8f))
1000f18b  float var_8_1 = fconvert.s(fconvert.t(edx) + fconvert.t(8f))
1000f18b  
1000f19c  if ((j_sub_10003080(&var_c) & 0x20000000) != 0)
1000f1a6      return 1
1000f1a6  
1000f1b6  var_c = fconvert.s(fconvert.t(var_c) - fconvert.t(16f))
1000f1b6  
1000f1c7  if ((j_sub_10003080(&var_c) & 0x20000000) != 0)
1000f1d1      return 1
1000f1d1  
1000f1e1  float var_8_2 = fconvert.s(fconvert.t(var_8_1) - fconvert.t(16f))
1000f1e1  
1000f1f2  if ((j_sub_10003080(&var_c) & 0x20000000) != 0)
1000f1fc      return 1
1000f1fc  
1000f20c  var_c = fconvert.s(fconvert.t(var_c) + fconvert.t(16f))
1000f20c  
1000f21d  if ((j_sub_10003080(&var_c) & 0x20000000) != 0)
1000f227      return 1
1000f227  
1000f237  var_c = fconvert.s(fconvert.t(var_c) - fconvert.t(8f))
1000f245  float var_8_3 = fconvert.s(fconvert.t(var_8_2) + fconvert.t(8f))
1000f253  float var_4_1 = fconvert.s(fconvert.t(var_4) - fconvert.t(48f))
1000f268  return j_sub_10003080(&var_c) u>> 0x1d & 1

1000f269                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1000f280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000f2c0    int32_t sub_1000f2c0(int32_t* arg1)

1000f2cd  float ecx = arg1[1]
1000f2d0  int32_t edx = arg1[2]
1000f2d3  float var_c = *arg1
1000f2e0  int32_t var_4 = edx
1000f2e4  int32_t eax_1 = j_sub_1001ae60(&var_c)
1000f2e4  
1000f2ee  if (eax_1 != 0)
1000f383      label_1000f383:
1000f383      void* ecx_2 = data_10066954 + eax_1 * 0x1c
1000f383      
1000f394      if ((*(ecx_2 + 4) & 2) != 0 && (*(ecx_2 + 8) & 2) != 0)
1000f3a6          void* ebp_3 = eax_1 * 0x30 + data_1006694c
1000f3a8          int32_t i = 0
1000f3a8          
1000f3af          if (*(ebp_3 + 4) s> 0)
1000f436              do
1000f3bf                  int32_t ecx_4 = *(data_10066944 + ((*(ebp_3 + 8) + i) << 2))
1000f3c4                  int32_t eax_5
1000f3c4                  int32_t edx_5
1000f3c4                  edx_5:eax_5 = sx.q(ecx_4)
1000f3ce                  int32_t esi_3 = (eax_5 ^ edx_5) - edx_5
1000f3d3                  int32_t* eax_7 = data_1006693c + esi_3 * 0x18
1000f3d3                  
1000f3da                  if ((eax_7[1].b & 2) != 0)
1000f3e2                      int32_t edx_7
1000f3e2                      edx_7.b = ecx_4 s< 0
1000f3e7                      int32_t ecx_6 = data_10066924
1000f3ef                      int32_t eax_9 = (edx_7 ^ *eax_7) * 5
1000f3fd                      float* eax_10 = ecx_6 + (eax_9 << 2)
1000f409                      long double x87_r7_12 =
1000f409                          fconvert.t(*(ecx_6 + (eax_9 << 2) + 8)) * fconvert.t(arg1[2])
1000f409                          + fconvert.t(*(ecx_6 + (eax_9 << 2) + 4)) * fconvert.t(arg1[1])
1000f409                          + fconvert.t(*eax_10) * fconvert.t(*arg1)
1000f40e                      int32_t eax_11
1000f40e                      int16_t x87control
1000f40e                      eax_11, x87control =
1000f40e                          __ftol(x87control, x87_r7_12 - fconvert.t(eax_10[3]))
1000f413                      int32_t eax_12
1000f413                      int32_t edx_9
1000f413                      edx_9:eax_12 = sx.q(eax_11)
1000f413                      
1000f41b                      if ((eax_12 ^ edx_9) - edx_9 s< 3
1000f41b                              && j_sub_1001bf00(esi_3, arg1, 0.100000001f) != 0)
1000f452                          return 1
1000f452                  
1000f433                  i += 1
1000f436              while (i s< *(ebp_3 + 4))
1000f2ee  else
1000f303      var_c = fconvert.s(fconvert.t(var_c) + fconvert.t(1f))
1000f307      eax_1 = j_sub_1001ae60(&var_c)
1000f307      
1000f311      if (eax_1 != 0)
1000f311          goto label_1000f383
1000f311      
1000f322      float var_8_1 = fconvert.s(fconvert.t(ecx) + fconvert.t(1f))
1000f326      eax_1 = j_sub_1001ae60(&var_c)
1000f326      
1000f330      if (eax_1 != 0)
1000f330          goto label_1000f383
1000f330      
1000f341      var_c = fconvert.s(fconvert.t(var_c) - fconvert.t(2f))
1000f345      eax_1 = j_sub_1001ae60(&var_c)
1000f345      
1000f34f      if (eax_1 != 0)
1000f34f          goto label_1000f383
1000f34f      
1000f360      float var_8_2 = fconvert.s(fconvert.t(var_8_1) - fconvert.t(2f))
1000f364      eax_1 = j_sub_1001ae60(&var_c)
1000f364      
1000f36e      if (eax_1 != 0)
1000f36e          goto label_1000f383
1000f36e  
1000f445  return 0

1000f453                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1000f460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f4a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f4c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000f4d0    long double sub_1000f4d0(int32_t* arg1, float arg2)

1000f4e5  float ecx = arg1[1]
1000f4e8  long double x87_r7_1 = fconvert.t(arg1[2]) + fconvert.t(8f)
1000f4ee  float var_b0 = *arg1
1000f501  float var_a8 = fconvert.s(x87_r7_1)
1000f50b  float var_78 = 90f
1000f513  int32_t var_74 = 0
1000f51b  int32_t var_70 = 0
1000f523  float var_90
1000f523  float var_84
1000f523  j_sub_100426b0(&var_78, &var_90, &var_84, nullptr)
1000f54e  var_b0 = fconvert.s((fconvert.t(var_84) + fconvert.t(var_90)) * fconvert.t(8f)
1000f54e      + fconvert.t(var_b0))
1000f564  float var_8c
1000f564  float var_80
1000f564  float var_ac_1 = fconvert.s((fconvert.t(var_80) + fconvert.t(var_8c)) * fconvert.t(8f)
1000f564      + fconvert.t(ecx))
1000f580  float var_88
1000f580  float var_7c
1000f580  var_a8 = fconvert.s((fconvert.t(var_7c) + fconvert.t(var_88)) * fconvert.t(8f)
1000f580      + fconvert.t(var_a8) - fconvert.t(8f))
1000f584  float var_6c
1000f584  j_sub_10043380(&var_b0, 500f, &var_90, &var_6c)
1000f5c8  void var_54
1000f5c8  __builtin_memcpy(dest: &var_54, 
1000f5c8      src: j_sub_10003010(&var_54, &var_b0, 0, 0, &var_6c, 1, 3), n: 0x54)
1000f5cb  float var_bc = 0f
1000f5d3  float var_b8 = 0f
1000f5db  float var_b4 = 8f
1000f5e3  j_sub_10043380(arg1, 0.5f, &var_bc, &var_bc)
1000f5f6  float var_48
1000f5f6  var_bc = fconvert.s(fconvert.t(var_48) - fconvert.t(var_bc))
1000f605  float var_44
1000f605  float var_b8_1 = fconvert.s(fconvert.t(var_44) - fconvert.t(var_b8))
1000f614  float var_40
1000f614  float var_b4_1 = fconvert.s(fconvert.t(var_40) - fconvert.t(var_b4))
1000f636  long double x87_r7_24 =
1000f636      fconvert.t(fconvert.d(fconvert.t(arg2))) - j_sub_10043500(&var_bc) * fconvert.t(0.5)
1000f63a  double var_a4
1000f63a  var_a4.d = fconvert.s(x87_r7_24)
1000f63e  long double temp0 = fconvert.t(0f)
1000f63e  x87_r7_24 - temp0
1000f63e  
1000f649  if ((((x87_r7_24 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_24, temp0) ? 1 : 0) << 0xa
1000f649          | (x87_r7_24 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
1000f64b      var_a4.d = 0
1000f64b  
1000f661  float var_9c = fconvert.s(fconvert.t(*arg1) - fconvert.t(var_48))
1000f66f  float var_98 = fconvert.s(fconvert.t(arg1[1]) - fconvert.t(var_44))
1000f67d  float var_94 = fconvert.s(fconvert.t(arg1[2]) - fconvert.t(var_40))
1000f681  int32_t ecx_1
1000f681  int80_t st0_1
1000f681  ecx_1, st0_1 = j_sub_10043290(&var_9c)
1000f6a0  int32_t var_d0_1 = ecx_1
1000f6a9  float var_60
1000f6a9  j_sub_10043570(&var_9c, 
1000f6a9      fconvert.s(fconvert.t(var_a4.d) * fconvert.t(0.5) * fconvert.t(8.0)), &var_60)
1000f6c7  float var_58
1000f6c7  return fconvert.t(var_58) + fconvert.t(*(data_10064068 + 0x10))

1000f6c8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1000f6e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1000f740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000f750    int80_t sub_1000f750(int32_t* arg1)

1000f762  return j_sub_1000f4d0(arg1, 120f)

1000f763           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

1000f780    int80_t sub_1000f780(int32_t* arg1)

1000f792  return j_sub_1000f4d0(arg1, 120f)

1000f793                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1000f7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1000f7b0    int32_t sub_1000f7b0(float* arg1, float arg2, float arg3, float arg4)

1000f7b4  arg1[1]
1000f7b7  long double x87_r6 = fconvert.t(*arg1)
1000f7c9  long double temp0 = fconvert.t(0f)
1000f7c9  x87_r6 - temp0
1000f7cf  int16_t result = (x87_r6 < temp0 ? 1 : 0) << 8
1000f7cf      | (is_unordered.t(x87_r6, temp0) ? 1 : 0) << 0xa | (x87_r6 == temp0 ? 1 : 0) << 0xe
1000f7cf      | 0x3800
1000f7cf  
1000f7d4  if ((result:1.b & 0x40) != 0)
1000f819      return result
1000f819  
1000f7d6  long double temp1 = fconvert.t(arg3)
1000f7d6  x87_r6 - temp1
1000f7df  long double x87_r6_1
1000f7df  
1000f7df  if ((((x87_r6 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r6, temp1) ? 1 : 0) << 0xa
1000f7df          | (x87_r6 == temp1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) == 0)
1000f7e7      x87_r6_1 = x87_r6
1000f7df  else
1000f7e1      x87_r6_1 = fconvert.t(arg3)
1000f7e1  
1000f7f1  long double x87_r6_4 = x87_r6 - x87_r6_1 * fconvert.t(arg2) * fconvert.t(arg4)
1000f7f3  long double temp2 = fconvert.t(0f)
1000f7f3  x87_r6_4 - temp2
1000f7f9  result = (x87_r6_4 < temp2 ? 1 : 0) << 8
1000f7f9      | (is_unordered.t(x87_r6_4, temp2) ? 1 : 0) << 0xa
1000f7f9      | (x87_r6_4 == temp2 ? 1 : 0) << 0xe | 0x3000
1000f7f9  
1000f7fe  if ((result:1.b & 1) != 0)
1000f802      x87_r6_4 = fconvert.t(0f)
1000f802  
1000f808  long double x87_r7_3 = x87_r6_4 / x87_r6_4
1000f80e  *arg1 = fconvert.s(x87_r7_3 * fconvert.t(*arg1))
1000f813  arg1[1] = fconvert.s(x87_r7_3 * fconvert.t(arg1[1]))
1000f816  return result

1000f81a                                                                                90 90 90 90 90 90                            ......
1000f820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1000f840    void sub_1000f840(int32_t arg1, float* arg2, int32_t* arg3, int32_t arg4, int32_t arg5, float* arg6, void* arg7, int32_t arg8, int32_t arg9, float arg10, char arg11, int32_t arg12)

1000f858  float ecx = *(data_10064030 + 0x10)
1000f85b  float eax_1 = *(data_10064034 + 0x10)
1000f877  float edx_1 = *(data_10064038 + 0x10)
1000f87b  float ecx_2 = *(data_1006403c + 0x10)
1000f899  float eax_3 = *(data_10064040 + 0x10)
1000f8bd  float var_118 = fconvert.s(fconvert.t(arg10) * fconvert.t(*(data_10064048 + 0x10)))
1000f8ce  void* edx_4 = data_1006405c
1000f8d4  float var_114 = fconvert.s(fconvert.t(arg10) * fconvert.t(*(data_1006404c + 0x10)))
1000f8e5  float eax_5 = *(edx_4 + 0x10)
1000f8f4  float var_100 = fconvert.s(fconvert.t(arg10) * fconvert.t(*(data_10064050 + 0x10)))
1000f90b  float edx_5 = *(data_10064064 + 0x10)
1000f913  float var_19c = fconvert.s(fconvert.t(arg10) * fconvert.t(*(data_10064054 + 0x10)))
1000f91e  long double x87_r7_9 = fconvert.t(arg10) * fconvert.t(*(data_10064068 + 0x10))
1000f92a  float s
1000f92a  __builtin_memset(&s, c: 0, n: 0x50)
1000f92c  float var_12c = fconvert.s(x87_r7_9)
1000f93f  int32_t s_1
1000f93f  __builtin_memset(s: &s_1, c: 0, n: 0x24)
1000f94d  float edx_6 = arg3[1]
1000f950  long double x87_r7_11 = fconvert.t(arg3[2]) + fconvert.t(0.25)
1000f956  float s_2 = *arg3
1000f965  float var_1d4 = edx_6
1000f971  float var_1d0 = fconvert.s(x87_r7_11)
1000f977  float var_1cc
1000f977  j_sub_10043570(arg6, arg10, &var_1cc)
1000f983  int32_t ebx = arg4
1000f98d  int32_t var_138 = 0xffffffff
1000f99a  int32_t var_1dc = 0
1000f9a2  float var_1c8
1000f9a2  float var_1c4
1000f9a2  
1000f9a2  if (arg9 s<= 0)
10010111      label_10010111:
10010111      s = s_2
10010119      float var_188_1 = var_1d4
10010121      float var_184_1 = var_1d0
10010129      float var_180_1 = var_1cc
1001012d      float var_17c_1 = var_1c8
10010131      float var_178_1 = var_1c4
10010135      int32_t var_14c_1 = 0
1000f9a2  else
1000f9ad      label_1000f9ad:
1000f9ad      int32_t eax_9 = j_sub_1000efc0(&s_2)
1000f9bd      long double x87_r7_12
1000f9bd      
1000f9bd      if (eax_9 == 0)
1000f9c8          x87_r7_12 = fconvert.t(edx_1)
1000f9bd      else
1000f9bf          x87_r7_12 = fconvert.t(eax_3)
1000f9bf      
1000f9e5      double var_1c0_1 =
1000f9e5          fconvert.d(x87_r7_12 * fconvert.t(arg10) * fconvert.t(0.10000000000000001))
1000f9f1      var_1c4 = fconvert.s(fconvert.t(var_1c4) - fconvert.t(var_1c0_1))
1000f9f5      float var_134_1
1000f9f5      
1000f9f5      if (arg5 != 0)
1000fa0d          if (eax_9 == 0)
1000fa26              var_134_1 = ecx_2
1000fa0d          else
1000fa16              var_134_1 = ecx
1000fa16          
1000fa0d          goto label_1000fa3c
1000fa0d      
1000f9f9      if (eax_9 != 0)
1000fa02          var_134_1 = ecx
1000fa3c          label_1000fa3c:
1000fa3c          j_sub_10043570(&var_1cc, 10f, &var_1cc)
1000fa5e          j_sub_1000f7b0(&var_1cc, var_134_1, eax_1, arg10)
1000fa72          j_sub_10043570(&var_1cc, 0.100000001f, &var_1cc)
1000fa72      
1000fa7a      int32_t ecx_11 = var_1dc
1000fa85      int32_t edi_1 = 0
1000fa85      
1000fa89      if (ecx_11 s>= arg8)
1000fb97          label_1000fb97:
1000fb97          
1000fb9a          if (ebx == 4 && (j_sub_1001afa0(&s_2) & 2) != 0)
1000fbad              ebx = 2
1000fa89      else
1000fa8f          long double x87_r7_17 = fconvert.t(var_118)
1000fa9d          int32_t i_2 = 0
1000fa9d          
1000faa1          if (arg5 != 0)
1000faa3              long double x87_r6_1 = fconvert.t(*(arg7 + 8))
1000faa6              long double temp0_1 = fconvert.t(-300f)
1000faa6              x87_r6_1 - temp0_1
1000faac              i_2.w = (x87_r6_1 < temp0_1 ? 1 : 0) << 8
1000faac                  | (is_unordered.t(x87_r6_1, temp0_1) ? 1 : 0) << 0xa
1000faac                  | (x87_r6_1 == temp0_1 ? 1 : 0) << 0xe | 0x3800
1000faac              
1000fab1              if ((i_2:1.b & 1) != 0)
1000fab5                  x87_r7_17 = fconvert.t(var_114)
1000fabc                  edi_1 = 1
1000fabc              
1000fac3              if (eax_9 == 0)
1000fac5                  long double x87_r6_2 = fconvert.t(*(arg7 + 8))
1000fac8                  long double temp1_1 = fconvert.t(1f)
1000fac8                  x87_r6_2 - temp1_1
1000face                  i_2.w = (x87_r6_2 < temp1_1 ? 1 : 0) << 8
1000face                      | (is_unordered.t(x87_r6_2, temp1_1) ? 1 : 0) << 0xa
1000face                      | (x87_r6_2 == temp1_1 ? 1 : 0) << 0xe | 0x3800
1000face                  
1000fad3                  if ((i_2:1.b & 0x41) == 0)
1000fae0                      var_138 = ecx_11
1000faed                      var_1c4 = fconvert.s(fconvert.t(var_12c) - fconvert.t(var_1c0_1)
1000faed                          + fconvert.t(5.0))
1000faed              
1000faf1              i_2 = 2
1000faf1          
1000faf8          if (eax_9 != 0)
1000fafc              x87_r7_17 = fconvert.t(var_100)
1000fb03              i_2 = 3
1000fb12              label_1000fb12:
1000fb12              float* ecx_12 = &var_1cc
1000fb18              int32_t i_1 = i_2
1000fb88              int32_t i
1000fb88              
1000fb88              do
1000fb24                  long double x87_r6_8 =
1000fb24                      fconvert.t(arg10) * fconvert.t(*(arg7 - &var_1cc + ecx_12))
1000fb24                      - fconvert.t(*ecx_12)
1000fb26                  long double temp2_1 = fconvert.t(var_19c)
1000fb26                  x87_r6_8 - temp2_1
1000fb2a                  i_2.w = (x87_r6_8 < temp2_1 ? 1 : 0) << 8
1000fb2a                      | (is_unordered.t(x87_r6_8, temp2_1) ? 1 : 0) << 0xa
1000fb2a                      | (x87_r6_8 == temp2_1 ? 1 : 0) << 0xe | 0x3000
1000fb2a                  
1000fb2f                  if ((i_2:1.b & 0x41) != 0)
1000fb3f                      var_1c0_1.d = fconvert.s(fneg(fconvert.t(var_19c)))
1000fb43                      long double temp4_1 = fconvert.t(var_1c0_1.d)
1000fb43                      x87_r6_8 - temp4_1
1000fb47                      i_2.w = (x87_r6_8 < temp4_1 ? 1 : 0) << 8
1000fb47                          | (is_unordered.t(x87_r6_8, temp4_1) ? 1 : 0) << 0xa
1000fb47                          | (x87_r6_8 == temp4_1 ? 1 : 0) << 0xe | 0x3000
1000fb47                      
1000fb4c                      if ((i_2:1.b & 1) != 0)
1000fb4e                          x87_r7_17 = x87_r6_8
1000fb50                          x87_r6_8 = fconvert.t(var_1c0_1.d)
1000fb2f                  else
1000fb31                      x87_r7_17 = x87_r6_8
1000fb33                      x87_r6_8 = fconvert.t(var_19c)
1000fb33                  
1000fb54                  long double x87_r6_9 = x87_r6_8 + fconvert.t(*ecx_12)
1000fb56                  var_1c0_1.d = fconvert.s(x87_r6_9)
1000fb5a                  *ecx_12 = fconvert.s(x87_r6_9)
1000fb5c                  long double x87_r6_10 = fconvert.t(var_1c0_1.d)
1000fb60                  x87_r6_10 - x87_r7_17
1000fb62                  i_2.w = (x87_r6_10 < x87_r7_17 ? 1 : 0) << 8
1000fb62                      | (is_unordered.t(x87_r6_10, x87_r7_17) ? 1 : 0) << 0xa
1000fb62                      | (x87_r6_10 == x87_r7_17 ? 1 : 0) << 0xe | 0x3800
1000fb62                  
1000fb67                  if ((i_2:1.b & 0x41) != 0)
1000fb6f                      long double x87_r6_12 = fneg(x87_r7_17)
1000fb71                      long double x87_r5_3 = fconvert.t(var_1c0_1.d)
1000fb75                      x87_r5_3 - x87_r6_12
1000fb77                      i_2.w = (x87_r5_3 < x87_r6_12 ? 1 : 0) << 8
1000fb77                          | (is_unordered.t(x87_r5_3, x87_r6_12) ? 1 : 0) << 0xa
1000fb77                          | (x87_r5_3 == x87_r6_12 ? 1 : 0) << 0xe | 0x3000
1000fb77                      
1000fb7c                      if ((i_2:1.b & 1) == 0)
1000fb82                          x87_r7_17 = x87_r6_12
1000fb7c                      else
1000fb7e                          *ecx_12 = fconvert.s(x87_r6_12)
1000fb67                  else
1000fb69                      *ecx_12 = fconvert.s(x87_r7_17)
1000fb69                  
1000fb84                  ecx_12 = &ecx_12[1]
1000fb87                  i = i_1
1000fb87                  i_1 -= 1
1000fb88              while (i != 1)
1000faf8          else if (i_2 s> 0)
1000fb0c              goto label_1000fb12
1000fb0c          
1000fb8e          if (edi_1 == 0)
1000fb8e              goto label_1000fb97
1000fb8e          
1000fb90          ebx = 4
1000fb90      
1000fbb2      float s_3 = s_2
1000fbc9      float var_10c_1 = var_1d4
1000fbd4      float var_108_1 = var_1d0
1000fbdf      float var_1ac = var_1cc
1000fbe3      float var_1a8_1 = var_1c8
1000fbe7      float var_1a4_1 = var_1c4
1000fbeb      var_1c0_1.d = 0
1000fbeb      
1000fc0d      while (true)
1000fc0d          float s_8 = fconvert.s(fconvert.t(var_1ac) + fconvert.t(s_2))
1000fc22          float var_194_1 = fconvert.s(fconvert.t(var_1a8_1) + fconvert.t(var_1d4))
1000fc2e          float var_190_1 = fconvert.s(fconvert.t(var_1a4_1) + fconvert.t(var_1d0))
1000fc51          void var_24
1000fc51          __builtin_memcpy(dest: &s_1, src: j_sub_1001b260(&var_24, &s_2, &s_8, ebx, arg2), 
1000fc51              n: 0x24)
1000fc53          float s_5
1000fc53          
1000fc53          if (arg12 != 0)
1000fc5e              if (s_1 != 0)
1000fc67                  data_10063fe8(1, "PredictMovement: start solid\n")
1000fc67              
1000fc82              j_sub_100098b0(&s_2, &s_5, 0xf2f2f0f0)
1000fc82          
1000fc8a          float var_ec
1000fc8a          long double x87_r7_24 = fconvert.t(var_ec)
1000fc91          long double temp3_1 = fconvert.t(1.0)
1000fc91          x87_r7_24 - temp3_1
1000fcac          s_2 = s_5
1000fcb0          float var_e4
1000fcb0          var_1d4 = var_e4
1000fcb4          float var_e0
1000fcb4          var_1d0 = var_e0
1000fcb8          float eax_18
1000fcb8          eax_18.w = (x87_r7_24 < temp3_1 ? 1 : 0) << 8
1000fcb8              | (is_unordered.t(x87_r7_24, temp3_1) ? 1 : 0) << 0xa
1000fcb8              | (x87_r7_24 == temp3_1 ? 1 : 0) << 0xe
1000fcbd          float s_4
1000fcbd          float var_1b4
1000fcbd          float var_1b0
1000fcbd          void var_174
1000fcbd          
1000fcbd          if ((eax_18:1.b & 1) != 0)
1000fccb              int32_t var_d0
1000fccb              float* eax_20
1000fccb              int32_t ecx_16
1000fccb              eax_20, ecx_16 = j_sub_1001c6c0(var_d0)
1000fcd0              float* ebp_2 = eax_20
1000fcd5              long double x87_r7_25 = fconvert.t(ebp_2[2])
1000fcd8              long double temp5_1 = fconvert.t(0f)
1000fcd8              x87_r7_25 - temp5_1
1000fcde              eax_20.w = (x87_r7_25 < temp5_1 ? 1 : 0) << 8
1000fcde                  | (is_unordered.t(x87_r7_25, temp5_1) ? 1 : 0) << 0xa
1000fcde                  | (x87_r7_25 == temp5_1 ? 1 : 0) << 0xe
1000fcde              
1000fce3              if ((eax_20:1.b & 0x40) == 0)
1000fe62                  label_1000fe62:
1000fe62                  int32_t var_1f8_5 = ecx_16
1000fe9f                  int32_t var_1f8_7 = j_sub_10043380(&var_1ac, 
1000fe9f                      fconvert.s(fneg(fconvert.t(var_1a8_1) * fconvert.t(ebp_2[1])
1000fe9f                          + fconvert.t(var_1a4_1) * fconvert.t(ebp_2[2])
1000fe9f                          + fconvert.t(var_1ac) * fconvert.t(*ebp_2))), 
1000fe9f                      ebp_2, &var_1ac)
1000feac                  j_sub_10043380(&var_1cc, 
1000feac                      fconvert.s(fneg(fconvert.t(var_1c8) * fconvert.t(ebp_2[1])
1000feac                          + fconvert.t(var_1c4) * fconvert.t(ebp_2[2])
1000feac                          + fconvert.t(var_1cc) * fconvert.t(*ebp_2))), 
1000feac                      ebp_2, &var_1cc)
1000feb1                  long double x87_r7_45 = fconvert.t(ebp_2[2])
1000feb4                  long double temp7_1 = fconvert.t(edx_5)
1000feb4                  x87_r7_45 - temp7_1
1000fec3                  int32_t ecx_22
1000fec3                  
1000fec3                  if ((((x87_r7_45 < temp7_1 ? 1 : 0) << 8
1000fec3                          | (is_unordered.t(x87_r7_45, temp7_1) ? 1 : 0) << 0xa
1000fec3                          | (x87_r7_45 == temp7_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
1000fed3                      ecx_22 = arg5
1000fec3                  else
1000fec5                      ecx_22 = 1
1000feca                      arg5 = 1
1000feca                  
1000fee2                  if ((arg11 & 0x20) != 0)
1000fee4                      long double x87_r7_46 = fconvert.t(var_1c4)
1000feeb                      long double temp10_1 = fconvert.t(0f)
1000feeb                      x87_r7_46 - temp10_1
1000fef6                      long double x87_r7_47
1000fef6                      long double temp11_1
1000fef6                      
1000fef6                      if ((((x87_r7_46 < temp10_1 ? 1 : 0) << 8
1000fef6                              | (is_unordered.t(x87_r7_46, temp10_1) ? 1 : 0) << 0xa
1000fef6                              | (x87_r7_46 == temp10_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1000fef8                          x87_r7_47 = fconvert.t(var_1c4)
1000fefc                          temp11_1 = fconvert.t(var_1c4)
1000fefc                          x87_r7_47 - temp11_1
1000fefc                      
1000ff08                      long double x87_r7_48
1000ff08                      
1000ff08                      if ((((x87_r7_46 < temp10_1 ? 1 : 0) << 8
1000ff08                              | (is_unordered.t(x87_r7_46, temp10_1) ? 1 : 0) << 0xa
1000ff08                              | (x87_r7_46 == temp10_1 ? 1 : 0) << 0xe):1.b & 1) != 0 && ((
1000ff08                              (x87_r7_47 < temp11_1 ? 1 : 0) << 8
1000ff08                              | (is_unordered.t(x87_r7_47, temp11_1) ? 1 : 0) << 0xa
1000ff08                              | (x87_r7_47 == temp11_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1000ff0c                          if (ecx_22 != 0)
1000ff0c                              goto label_1000ff1f
1000ff0c                          
1000ff0e                          x87_r7_48 = fconvert.t(var_1c4)
1000ff26                          label_1000ff26:
1000ff26                          long double temp13_1 = fconvert.t(0f)
1000ff26                          x87_r7_48 - temp13_1
1000ff26                          
1000ff31                          if ((((x87_r7_48 < temp13_1 ? 1 : 0) << 8
1000ff31                                  | (is_unordered.t(x87_r7_48, temp13_1) ? 1 : 0) << 0xa
1000ff31                                  | (x87_r7_48 == temp13_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x40)
1000ff31                                  == 0)
1000ff33                              long double x87_r7_50 = x87_r7_48 * fconvert.t(10f)
1000ff43                              x87_r7_48 = x87_r7_50 * x87_r7_50 * fconvert.t(0.0001)
1000ff43                              
1000ff49                              if (eax_9 == 0)
1000ff4b                                  long double temp16_1 = fconvert.t(30f)
1000ff4b                                  x87_r7_48 - temp16_1
1000ff51                                  int32_t eax_29
1000ff51                                  eax_29.w = (x87_r7_48 < temp16_1 ? 1 : 0) << 8
1000ff51                                      | (is_unordered.t(x87_r7_48, temp16_1) ? 1 : 0)
1000ff51                                      << 0xa | (x87_r7_48 == temp16_1 ? 1 : 0) << 0xe
1000ff51                                  
1000ff56                                  if ((eax_29:1.b & 0x41) == 0)
1001019a                                      s = s_2
100101a2                                      float var_188_2 = var_1d4
100101aa                                      float var_184_2 = var_1d0
100101b2                                      float var_180_2 = var_1cc
100101c6                                      float var_17c_2 = var_1c8
100101ca                                      float var_178_2 = var_1c4
100101ce                                      __builtin_memcpy(dest: &var_174, src: &s_1, n: 0x24)
100101d0                                      int32_t var_14c_2 = 0x20
100101db                                      break
1000ff08                      else if (ecx_22 != 0)
1000ff1f                          label_1000ff1f:
1000ff1f                          x87_r7_48 = fconvert.t(var_1c4) - fconvert.t(var_1c4)
1000ff1f                          goto label_1000ff26
1000fce3              else
1000fcf2                  if (var_138 s>= 0)
1000fcf8                      ecx_16 = var_1dc - var_138
1000fcf8                  
1000fcfd                  if (var_138 s>= 0 && ecx_16 s<= 2)
1000fcfd                      goto label_1000fe62
1000fcfd                  
1000fd13                  j_sub_10043380(&s_2, -0.25f, ebp_2, &s_4)
1000fd24                  float s_9 = s_4
1000fd36                  float var_bc_1 = var_1b4
1000fd44                  float var_b8_1 = var_1b0
1000fd59                  var_1b0 = fconvert.s(fconvert.t(var_1b0) + fconvert.t(eax_5))
1000fd7c                  int32_t var_b4
1000fd7c                  void var_48
1000fd7c                  ecx_16 = __builtin_memcpy(dest: &var_b4, 
1000fd7c                      src: j_sub_1001b260(&var_48, &s_4, &s_9, ebx, arg2), n: 0x24)
1000fd7c                  
1000fd87                  if (var_b4 != 0)
1000fd87                      goto label_1000fe62
1000fd87                  
1000fd95                  int32_t var_94
1000fd95                  void* eax_25
1000fd95                  eax_25, ecx_16 = j_sub_1001c6c0(var_94)
1000fd9a                  long double x87_r7_28 = fconvert.t(*(eax_25 + 8))
1000fd9d                  long double temp12_1 = fconvert.t(edx_5)
1000fd9d                  x87_r7_28 - temp12_1
1000fda7                  eax_25.w = (x87_r7_28 < temp12_1 ? 1 : 0) << 8
1000fda7                      | (is_unordered.t(x87_r7_28, temp12_1) ? 1 : 0) << 0xa
1000fda7                      | (x87_r7_28 == temp12_1 ? 1 : 0) << 0xe
1000fda7                  
1000fdac                  if ((eax_25:1.b & 0x41) != 0)
1000fdac                      goto label_1000fe62
1000fdac                  
1000fdc4                  var_1a4_1 = 0f
1000fdce                  var_1c4 = 0f
1000fdd6                  float var_ac
1000fdd6                  var_1ac = fconvert.s(fconvert.t(s_8) - fconvert.t(var_ac))
1000fde5                  float var_a8
1000fde5                  var_1a8_1 = fconvert.s(fconvert.t(var_194_1) - fconvert.t(var_a8))
1000fde9                  float var_a4
1000fde9                  
1000fde9                  if (arg12 != 0)
1000fdf2                      long double x87_r7_34 = fconvert.t(var_a4) - fconvert.t(var_1d0)
1000fdf6                      long double temp14_1 = fconvert.t(0.125)
1000fdf6                      x87_r7_34 - temp14_1
1000fdfc                      int32_t eax_26
1000fdfc                      eax_26.w = (x87_r7_34 < temp14_1 ? 1 : 0) << 8
1000fdfc                          | (is_unordered.t(x87_r7_34, temp14_1) ? 1 : 0) << 0xa
1000fdfc                          | (x87_r7_34 == temp14_1 ? 1 : 0) << 0xe
1000fdfc                      
1000fe01                      if ((eax_26:1.b & 0x41) == 0)
1000fe12                          s_4 = s_2
1000fe16                          var_1b4 = var_1d4
1000fe29                          var_1b0 = var_a4
1000fe2d                          j_sub_100098b0(&s_2, &s_4, 0xf3f3f1f1)
1000fe2d                  
1000fe3c                  var_1d0 = var_a4
1000fe3c          
1000ff65          bool cond:3_1 = var_1c0_1.d + 1 s> 0x14
1000ff68          var_1c0_1.d += 1
1000ff68          
1000ff6c          if (cond:3_1)
1000ff6c              goto label_10010181
1000ff6c          
1000ff72          long double x87_r7_52 = fconvert.t(var_ec)
1000ff79          long double temp6_1 = fconvert.t(1.0)
1000ff79          x87_r7_52 - temp6_1
1000ff7f          int32_t eax_31
1000ff7f          eax_31.w = (x87_r7_52 < temp6_1 ? 1 : 0) << 8
1000ff7f              | (is_unordered.t(x87_r7_52, temp6_1) ? 1 : 0) << 0xa
1000ff7f              | (x87_r7_52 == temp6_1 ? 1 : 0) << 0xe
1000ff7f          
1000ff84          if ((eax_31:1.b & 1) == 0)
1000ff8a              long double x87_r7_53 = fconvert.t(var_1c4)
1000ff8e              long double temp8_1 = fconvert.t(0f)
1000ff8e              x87_r7_53 - temp8_1
1000ff94              eax_31.w = (x87_r7_53 < temp8_1 ? 1 : 0) << 8
1000ff94                  | (is_unordered.t(x87_r7_53, temp8_1) ? 1 : 0) << 0xa
1000ff94                  | (x87_r7_53 == temp8_1 ? 1 : 0) << 0xe
1000ff94              
1000ff99              if ((eax_31:1.b & 0x41) != 0)
1000ffb4                  float s_6 = s_2
1000ffbc                  float var_c8_1 = var_1d4
1000ffc3                  float var_c4_1 = fconvert.s(fconvert.t(var_1d0) - fconvert.t(22f))
1000ffca                  int32_t eax_33 = j_sub_10003080(&s_6)
1000ffd2                  int32_t ecx_23 = 0
1000ffd2                  
1000ffda                  if ((eax_33.b & 8) != 0)
1000ffdc                      ecx_23 = 0x10
1000ffdc                  
1000ffe3                  if ((eax_33.b & 0x10) != 0)
1000ffe5                      ecx_23 |= 8
1000ffe5                  
1000ffea                  if ((eax_33.b & 0x20) != 0)
1000ffec                      ecx_23 |= 8
1000ffec                  
1000ffef                  int32_t eax_34 = arg11.d
1000ffef                  
1000fff8                  if ((eax_34 & ecx_23) != 0)
100101ea                      s = s_2
100101f2                      float var_188_3 = var_1d4
100101fa                      float var_148_2 = fconvert.s(float.t(eax_33))
10010209                      float var_184_3 = var_1d0
10010211                      int32_t var_14c_3 = ecx_23 & eax_34
1001021f                      float var_180_3 = var_1cc
10010227                      float var_17c_3 = var_1c8
1001022f                      float var_178_3 = var_1c4
10010233                      int32_t var_150_2 = ebx
1001023a                      float var_144_2 = fconvert.s(float.t(var_1dc) * fconvert.t(arg10))
10010241                      int32_t var_140_2 = var_1dc
10010248                      goto label_10010181
10010248              
1001000c              int32_t eax_35 = j_sub_1000eeb0(&s_2, ebx, arg2)
10010014              arg5 = eax_35
1001001b              bool cond:6_1 = eax_35 == 0
1001001d              eax_35.b = arg11
1001001d              
10010024              if (cond:6_1)
10010035                  if ((eax_35.b & 2) != 0)
100102a7                      long double x87_r7_67 = float.t(var_1dc)
100102af                      float var_184_5 = var_1d0
100102b7                      s = s_2
100102bf                      float var_188_5 = var_1d4
100102ce                      float var_178_5 = var_1c4
100102d2                      float var_180_5 = var_1cc
100102d6                      int32_t edx_38 = var_1dc
100102ea                      float var_17c_5 = var_1c8
100102ee                      __builtin_memcpy(dest: &var_174, src: &s_1, n: 0x24)
100102f0                      float var_144_3 = fconvert.s(x87_r7_67 * fconvert.t(arg10))
100102f7                      int32_t var_14c_5 = 2
10010302                      int32_t var_150_3 = ebx
10010309                      int32_t var_148_3 = 0x40800000
10010314                      int32_t var_140_3 = edx_38
1001031b                      goto label_10010181
1001031b                  
1001003d                  if ((eax_35.b & 0x40) != 0)
10010043                      float s_7 = s_2
1001004f                      s_4 = s_7
10010053                      s_8 = s_7
1001005d                      var_1b4 = var_1d4
10010061                      var_1b0 = var_1d0
10010065                      float var_194_2 = var_1d4
10010069                      float var_190_2 = var_1d0
10010090                      float var_190_3 = fconvert.s(fconvert.t(var_1d0)
10010090                          - (fconvert.t(*(data_10064060 + 0x10)) + fconvert.t(48f)))
100100aa                      int32_t var_90
100100aa                      void var_6c
100100aa                      __builtin_memcpy(dest: &var_90, 
100100aa                          src: j_sub_1001b260(&var_6c, &s_4, &s_8, 4, 0xffffffff), n: 0x24)
100100aa                      
100100b5                      if (var_90 == 0)
100100c4                          long double x87_r7_61 = fconvert.t(var_1d0)
100100c4                              - fconvert.t(*(data_1006405c + 0x10)) - fconvert.t(1f)
100100ca                          float var_80
100100ca                          long double temp15_1 = fconvert.t(var_80)
100100ca                          x87_r7_61 - temp15_1
100100d1                          int32_t eax_38
100100d1                          eax_38.w = (x87_r7_61 < temp15_1 ? 1 : 0) << 8
100100d1                              | (is_unordered.t(x87_r7_61, temp15_1) ? 1 : 0) << 0xa
100100d1                              | (x87_r7_61 == temp15_1 ? 1 : 0) << 0xe
100100d1                          
100100d6                          if ((eax_38:1.b & 0x41) == 0
100100d6                                  && (j_sub_10003080(&s_8) & 0x20) == 0)
1001032e                              long double x87_r7_69 = float.t(var_1dc)
10010339                              float var_188_6 = var_10c_1
10010341                              s = s_3
10010349                              float var_184_6 = var_108_1
10010358                              float var_17c_6 = var_1c8
1001035c                              float var_180_6 = var_1cc
10010360                              int32_t eax_54 = var_1dc
10010374                              float var_178_6 = var_1c4
10010378                              __builtin_memcpy(dest: &var_174, src: &s_1, n: 0x24)
1001037a                              float var_144_4 = fconvert.s(x87_r7_69 * fconvert.t(arg10))
10010381                              int32_t var_14c_6 = 0x40
1001038c                              int32_t var_150_4 = ebx
10010393                              int32_t var_148_4 = 0x40800000
1001039e                              int32_t var_140_4 = eax_54
100103a5                              goto label_10010181
10010024              else if ((eax_35.b & 1) != 0)
10010259                  s = s_2
10010261                  float var_188_4 = var_1d4
10010269                  float var_184_4 = var_1d0
10010271                  float var_180_4 = var_1cc
10010285                  float var_17c_4 = var_1c8
10010289                  float var_178_4 = var_1c4
1001028d                  __builtin_memcpy(dest: &var_174, src: &s_1, n: 0x24)
1001028f                  int32_t var_14c_4 = 1
1001029a                  goto label_10010148
1001029a              
100100f9              bool cond:9_1 = var_1dc + 1 s< arg9
100100fb              var_1dc += 1
100100fb              
100100ff              if (cond:9_1)
100100ff                  goto label_1000f9ad
100100ff              
100100ff              goto label_10010111
10010148  label_10010148:
10010148  int32_t var_150_1 = ebx
1001014f  int32_t var_148_1 = 0x40800000
1001015a  int32_t var_140_1 = var_1dc
10010168  float var_144_1 = fconvert.s(float.t(var_1dc) * fconvert.t(arg10))
10010181  label_10010181:
10010181  __builtin_memcpy(dest: arg1, src: &s, n: 0x50)

100103aa                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
100103c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100103e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100104a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100104c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100104e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100105a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100105c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100105e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10010690    int80_t sub_10010690(float* arg1, int32_t* arg2, float* arg3)

10010699  int32_t var_60 = 0
100106a2  int32_t var_64 = 0
100106aa  float var_68 = 0f
100106aa  
100106c3  if (j_sub_1000efc0(arg2) == 0)
100106c5      arg3[2] = 0
100106c5  
100106cd  j_sub_10043290(arg3)
100106df  float var_5c
100106df  j_sub_10043570(arg3, 400f, &var_5c)
100106e4  int32_t var_54 = 0x43600000
100106ec  j_sub_10009860()
100106f1  int32_t var_84 = 1
100106fa  char var_88 = 1
100106fc  float var_8c = 0.100000001f
10010701  int32_t var_90 = 0xd
10010707  int32_t var_94 = 0xd
1001070d  float* var_98 = &var_5c
1001070e  float* var_9c = &var_68
1001070f  int32_t var_a0 = 1
1001071a  void var_50
1001071a  int32_t eax_2
1001071a  int80_t result
1001071a  eax_2, result = j_sub_1000f840(&var_50, arg1, arg2, 2, var_a0, var_9c, var_98, var_94, 
1001071a      var_90, var_8c, var_88, var_84)
1001072d  __builtin_memcpy(dest: &var_50, src: eax_2, n: 0x50)
1001072f  char var_10
1001072f  eax_2.b = var_10
1001072f  
10010737  if ((eax_2.b & 2) != 0)
10010740      data_10063fe8(1, "leave ground\n")
10010740  
1001074c  return result

1001074d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10010760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10010780    int32_t sub_10010780(float arg1, float* arg2, float* arg3, float* arg4)

10010780  int32_t ecx
10010780  int32_t var_4_1 = ecx
1001078c  float ecx_1 = *(data_10064038 + 0x10)
1001078f  long double x87_r7 = fconvert.t(*(data_10064044 + 0x10))
1001079e  long double x87_r6_1 = fconvert.t(arg1) / fconvert.t(ecx_1)
100107bb  long double x87_r6_5 = x87_r6_1 * fconvert.t(ecx_1) * x87_r6_1 * fconvert.t(0.5)
100107bb      + fconvert.t(arg2[2]) - fconvert.t(arg3[2])
100107be  long double temp1 = fconvert.t(0f)
100107be  x87_r6_5 - temp1
100107c4  void* eax
100107c4  eax.w = (x87_r6_5 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_5, temp1) ? 1 : 0) << 0xa
100107c4      | (x87_r6_5 == temp1 ? 1 : 0) << 0xe | 0x3000
100107c4  
100107c9  if ((eax:1.b & 1) != 0)
100107d1      *arg4 = fconvert.s(x87_r6_5)
100107d6      return 0
100107d6  
100107d9  fconvert.t(*arg3) - fconvert.t(*arg2)
100107de  long double x87_r4_1 = fconvert.t(arg3[1]) - fconvert.t(arg2[1])
10010811  *arg4 = fconvert.s(x87_r4_1)
10010813  x87_r4_1 - x87_r7
10010815  eax.w = (x87_r4_1 < x87_r7 ? 1 : 0) << 8
10010815      | (is_unordered.t(x87_r4_1, x87_r7) ? 1 : 0) << 0xa
10010815      | (x87_r4_1 == x87_r7 ? 1 : 0) << 0xe | 0x3800
10010815  
1001081a  if ((eax:1.b & 0x41) != 0)
1001082a      return 1
1001082a  
1001081c  *arg4 = fconvert.s(x87_r7)
10010821  return 0

1001082b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10010840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10010860    int32_t sub_10010860() __pure

10010865  return 1

10010866                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10010880    int32_t sub_10010880(int32_t* arg1, int32_t arg2)

10010880  int32_t ecx
10010880  int32_t var_4_1 = ecx
1001088a  int32_t eax_1
1001088a  int32_t edx
1001088a  edx:eax_1 = sx.q(arg2)
10010894  int32_t ebx_2 = (eax_1 ^ edx) - edx
10010896  int32_t var_4 = ebx_2
1001089a  int32_t* __saved_ebp_1 = data_1006692c + (ebx_2 << 3)
1001089d  int32_t* __saved_ebp = __saved_ebp_1
1001089e  j_sub_10010860()
100108af  int32_t* ecx_2 = arg1
100108b6  int32_t result = *(ecx_2[0xd] + (ebx_2 << 2))
100108b6  
100108bb  if (result == 0)
100108d3      arg1 = 2
100108de      int32_t* __saved_ebp_2 = __saved_ebp_1
100108e0      int32_t* esi_2 = ecx_2[3] + (ecx_2[2] << 3) - __saved_ebp_1
10010965      bool cond:0_1
10010965      
10010965      do
100108e2          int32_t edx_3 = *__saved_ebp_2
100108e7          int32_t edi_1 = *(ecx_2[0xc] + (edx_3 << 2))
100108e7          
100108ec          if (edi_1 == 0)
10010908              *(ecx_2[1] + *ecx_2 * 0xc) = *(data_1006691c + edx_3 * 0xc)
10010922              *(ecx_2[1] + *ecx_2 * 0xc + 4) = *(data_1006691c + *__saved_ebp_2 * 0xc + 4)
1001093d              *(ecx_2[1] + *ecx_2 * 0xc + 8) = *(data_1006691c + *__saved_ebp_2 * 0xc + 8)
10010943              *(esi_2 + __saved_ebp_2) = *ecx_2
1001094d              *(ecx_2[0xc] + (*__saved_ebp_2 << 2)) = *ecx_2
10010952              ebx_2 = var_4
10010957              *ecx_2 += 1
100108ec          else
100108ee              *(esi_2 + __saved_ebp_2) = edi_1
100108ee          
1001095d          __saved_ebp_2 = &__saved_ebp_2[1]
10010960          cond:0_1 = arg1 != 1
10010961          arg1 -= 1
10010965      while (cond:0_1)
10010972      *(ecx_2[0xd] + (ebx_2 << 2)) = ecx_2[2]
10010975      result = ecx_2[2]
1001097b      ecx_2[2] = result + 1
1001097b      
10010984      if (arg2 s<= 0)
10010986          return neg.d(result)
100108bb  else if (arg2 s<= 0)
100108cb      return neg.d(result)
100108cb  
1001098c  return result

1001098d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
100109a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100109c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100109e0    uint32_t sub_100109e0(void* arg1)

100109ed  return (sx.d(*(arg1 + 4)) & 2) u>> 1

100109ee                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................

10010a00    uint32_t sub_10010a00(int32_t* arg1, int32_t arg2)

10010a0d  int32_t eax_1
10010a0d  int32_t edx
10010a0d  edx:eax_1 = sx.q(arg2)
10010a18  int32_t edi_2 = (eax_1 ^ edx) - edx
10010a21  void* esi = data_1006693c + edi_2 * 0x18
10010a29  uint32_t eax_3 = j_sub_100109e0(esi)
10010a29  
10010a33  if (eax_3 == 0)
10010a3c      return eax_3
10010a3c  
10010a44  int32_t eax_4 = *(arg1[0xe] + (edi_2 << 2))
10010a44  
10010a49  if (eax_4 == 0)
10010a66      void* ebp_1 = arg1[7] + arg1[6] * 0x18
10010a70      __builtin_memcpy(dest: ebp_1, src: esi, n: 0x18)
10010a76      *(ebp_1 + 8) = 0
10010a80      int32_t i = 0
10010a82      *(ebp_1 + 0xc) = arg1[4]
10010a82      
10010a8a      if (*(esi + 8) s> 0)
10010aca          do
10010a9c              int32_t eax_12 =
10010a9c                  j_sub_10010880(arg1, *(data_10066934 + ((*(esi + 0xc) + i) << 2)))
10010a9c              
10010aa6              if (eax_12 != 0)
10010ab3                  *(arg1[5] + ((*(ebp_1 + 0xc) + *(ebp_1 + 8)) << 2)) = eax_12
10010aba                  *(ebp_1 + 8) += 1
10010ac1                  arg1[4] += 1
10010ac1              
10010ac7              i += 1
10010aca          while (i s< *(esi + 8))
10010aca      
10010ad6      *(arg1[0xe] + (edi_2 << 2)) = arg1[6]
10010ad9      eax_4 = arg1[6]
10010ae5      arg1[6] = eax_4 + 1
10010ae5      
10010ae8      if (arg2 s<= 0)
10010aea          return neg.d(eax_4)
10010a49  else if (arg2 s<= 0)
10010a5c      return neg.d(eax_4)
10010a5c  
10010af3  return eax_4

10010af4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10010b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10010b40    void* sub_10010b40(int32_t* arg1, void* arg2)

10010b53  int32_t eax_1 = arg2 * 0x30
10010b5a  void* edx = eax_1 + data_1006694c
10010b5d  void* ebx_1 = arg1[0xb] + eax_1
10010b69  __builtin_memcpy(dest: ebx_1, src: edx, n: 0x30)
10010b6b  *(ebx_1 + 4) = 0
10010b75  *(ebx_1 + 8) = arg1[8]
10010b78  void* result = *(edx + 4)
10010b7b  int32_t esi_1 = 0
10010b7d  arg2 = edx
10010b7d  
10010b83  if (result s> 0)
10010b9b      while (true)
10010b9b          uint32_t eax_4 =
10010b9b              j_sub_10010a00(arg1, *(data_10066944 + ((*(edx + 8) + esi_1) << 2)))
10010b9b          
10010ba5          if (eax_4 != 0)
10010bb2              *(arg1[9] + ((*(ebx_1 + 8) + *(ebx_1 + 4)) << 2)) = eax_4
10010bb9              *(ebx_1 + 4) += 1
10010bc0              arg1[8] += 1
10010bc0          
10010bc3          result = arg2
10010bc7          esi_1 += 1
10010bc7          
10010bcb          if (esi_1 s>= *(result + 4))
10010bcb              break
10010bcb          
10010b87          edx = arg2
10010b87  
10010bd1  return result

10010bd2                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10010be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10010c10    int32_t sub_10010c10(int32_t* arg1)

10010c26  arg1[1] = j_sub_10039000(data_10066918 * 0xc)
10010c29  *arg1 = 0
10010c42  arg1[3] = j_sub_10039000(data_10066928 << 3)
10010c45  arg1[2] = 1
10010c5e  arg1[5] = j_sub_10039000(data_10066930 << 2)
10010c61  arg1[4] = 0
10010c79  arg1[7] = j_sub_10039000(data_10066938 * 0x18)
10010c7c  arg1[6] = 1
10010c95  arg1[9] = j_sub_10039000(data_10066940 << 2)
10010c98  arg1[8] = 0
10010cb0  arg1[0xb] = j_sub_10039000(data_10066948 * 0x30)
10010cb8  arg1[0xa] = data_10066948
10010cce  arg1[0xc] = j_sub_10039000(data_10066918 << 2)
10010ce3  arg1[0xd] = j_sub_10039000(data_10066928 << 2)
10010cf4  int32_t result = j_sub_10039000(data_10066938 << 2)
10010cfc  arg1[0xe] = result
10010d00  return result

10010d01     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
10010d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10010d50    void* sub_10010d50(int32_t* arg1)

10010d50  void* eax_11 = data_1006691c
10010d50  
10010d57  if (eax_11 != 0)
10010d5a      j_sub_100390b0(eax_11)
10010d5a  
10010d6a  data_1006691c = arg1[1]
10010d6f  void* eax_1 = data_1006692c
10010d78  data_10066918 = *arg1
10010d78  
10010d7e  if (eax_1 != 0)
10010d81      j_sub_100390b0(eax_1)
10010d81  
10010d8c  data_1006692c = arg1[3]
10010d95  data_10066928 = arg1[2]
10010d9a  void* eax_3 = data_10066934
10010d9a  
10010da1  if (eax_3 != 0)
10010da4      j_sub_100390b0(eax_3)
10010da4  
10010daf  void* eax_4 = data_1006693c
10010db4  data_10066934 = arg1[5]
10010dbf  data_10066930 = arg1[4]
10010dbf  
10010dc5  if (eax_4 != 0)
10010dc8      j_sub_100390b0(eax_4)
10010dc8  
10010dd3  data_1006693c = arg1[7]
10010dd8  void* eax_6 = data_10066944
10010de2  data_10066938 = arg1[6]
10010de2  
10010de8  if (eax_6 != 0)
10010deb      j_sub_100390b0(eax_6)
10010deb  
10010df6  data_10066944 = arg1[9]
10010dff  data_10066940 = arg1[8]
10010e04  void* eax_8 = data_1006694c
10010e04  
10010e0b  if (eax_8 != 0)
10010e0e      j_sub_100390b0(eax_8)
10010e0e  
10010e19  data_1006694c = arg1[0xb]
10010e22  data_10066948 = arg1[0xa]
10010e2c  j_sub_100390b0(arg1[0xc])
10010e35  j_sub_100390b0(arg1[0xd])
10010e47  return j_sub_100390b0(arg1[0xe])

10010e48                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
10010e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10010e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10010e90    int32_t sub_10010e90()

10010e99  void var_3c
10010e99  j_sub_10010c10(&var_3c)
10010ea3  void* i = 1
10010ea3  
10010ead  if (data_10066948 s> 1)
10010ec5      do
10010eb5          j_sub_10010b40(&var_3c, i)
10010ec2          i += 1
10010ec5      while (i s< data_10066948)
10010ec5  
10010ecc  int32_t i_1 = 0
10010ecc  
10010ed0  if (data_10066958 s> 0)
10010ed2      int32_t eax_3 = data_1006695c
10010ed9      int32_t ecx_1 = 0
10010ed9      
10010f08      do
10010ee4          if (*(ecx_1 + eax_3 + 0x24) != 0xb)
10010ef5              int32_t var_4
10010ef5              *(ecx_1 + eax_3 + 4) = *(var_4 + (*(ecx_1 + eax_3 + 4) << 2))
10010ef7              eax_3 = data_1006695c
10010ef7          
10010f02          i_1 += 1
10010f03          ecx_1 += 0x2c
10010f08      while (i_1 s< data_10066958)
10010f08  
10010f11  j_sub_10010d50(&var_3c)
10010f2a  return data_10063fe8(1, "AAS data optimized.\n")

10010f2b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10010f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10010f60    void* sub_10010f60()

10010f65  void* result = j_sub_10039000(0x300000)
10010f6d  data_10066788 = result
10010f6d  
10010f8a  for (int32_t i = 0; i s< 0x2fffd0; i += 0x30)
10010f78      *(i + result + 0x2c) = i + result + 0x30
10010f7c      result = data_10066788
10010f7c  
10010f8c  *(result + 0x2ffffc) = 0
10010f9c  data_100667b4 = data_10066788
10010fa2  return result

10010fa3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
10010fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10010fd0    void* sub_10010fd0()

10010fdc  return j_sub_100390b0(data_10066788)

10010fdd                                                                                         90 90 90                               ...
10010fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10010ff0    void* sub_10010ff0()

10010ff0  void* result = data_100667b4
10010ff0  
10010ff7  if (result == 0)
10010ff9      return result
10010ff9  
10010fff  if (*(result + 0x2c) == 0)
10011006      j_sub_1000d7e0("AAS_MAX_REACHABILITYSIZE")
1001100b      result = data_100667b4
1001100b  
10011016  data_100667b4 = *(result + 0x2c)
10011023  data_1006677c += 1
10011029  return result

1001102a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

10011040    int32_t sub_10011040(int32_t arg1)

1001104e  if (arg1 s>= 0 && arg1 s< data_10066948)
10011063      return *(data_10066954 + arg1 * 0x1c + 0x14)
10011063  
10011064  int32_t var_4 = arg1
1001106a  j_sub_1000d7e0("AAS_AreaReachability: areanum %d…")
10011074  return 0

10011075                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10011080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10011090    long double sub_10011090(float arg1)

1001109a  float ebx = arg1
1001109f  int32_t ebp = 1
100110a8  arg1 = 0f
100110b0  int32_t ecx_1 = *(data_10066934 + (*(ebx i+ 0xc) << 2))
100110b5  int32_t eax_2
100110b5  int32_t edx
100110b5  edx:eax_2 = sx.q(ecx_1)
100110c4  int32_t edx_1
100110c4  edx_1.b = ecx_1 s< 0
100110cd  int32_t ecx_3 = data_1006691c
100110dc  float* esi =
100110dc      ecx_3 + *(data_1006692c + ((edx_1 + (((eax_2 ^ edx) - edx) << 1)) << 2)) * 0xc
100110dc  
100110df  if (*(ebx i+ 8) - 1 s<= 1)
100111cf      return fconvert.t(0f)
100111cf  
100110fa  while (true)
100110fa      int32_t eax_11 = *(data_10066934 + ((ebp + *(ebx i+ 0xc)) << 2))
10011101      int32_t edx_5
10011101      edx_5.b = eax_11 s< 0
10011106      int32_t eax_12
10011106      int32_t edx_6
10011106      edx_6:eax_12 = sx.q(eax_11)
10011111      int32_t eax_15 = data_1006692c + (((eax_12 ^ edx_6) - edx_6) << 3)
1001111f      float var_18 = fconvert.s(fconvert.t(*(ecx_3 + *(eax_15 + (edx_5 << 2)) * 0xc))
1001111f          - fconvert.t(*esi))
10011130      float var_14_1 = fconvert.s(fconvert.t(*(ecx_3 + *(eax_15 + (edx_5 << 2)) * 0xc + 4))
10011130          - fconvert.t(esi[1]))
10011145      int32_t edx_14
10011145      edx_14.b = edx_5 == 0
10011148      float var_10_1 = fconvert.s(fconvert.t(*(ecx_3 + *(eax_15 + (edx_5 << 2)) * 0xc + 8))
10011148          - fconvert.t(esi[2]))
1001114c      int32_t* eax_16 = eax_15 + (edx_14 << 2)
10011159      float var_24 = fconvert.s(fconvert.t(*(ecx_3 + *eax_16 * 0xc)) - fconvert.t(*esi))
1001116d      float var_20_1 =
1001116d          fconvert.s(fconvert.t(*(ecx_3 + *eax_16 * 0xc + 4)) - fconvert.t(esi[1]))
10011188      float var_1c_1 =
10011188          fconvert.s(fconvert.t(*(ecx_3 + *eax_16 * 0xc + 8)) - fconvert.t(esi[2]))
1001118c      float var_c
1001118c      j_sub_100434b0(&var_18, &var_24, &var_c)
100111a7      ebp += 1
100111af      arg1 = fconvert.s(j_sub_10043500(&var_c) * fconvert.t(0.5) + fconvert.t(arg1))
100111af      
100111b3      if (ebp s>= *(ebx i+ 8) - 1)
100111b3          break
100111b3      
100110e8      ecx_3 = data_1006691c
100110e8  
100111c4  return fconvert.t(arg1)

100111d0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
100111e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10011200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10011220    long double sub_10011220(float arg1)

1001123a  void* esi_2 = arg1 i* 0x30 + data_1006694c
1001123c  int32_t i = 0
1001123e  arg1 = 0f
1001124c  int32_t eax_4
1001124c  int32_t edx
1001124c  edx:eax_4 = sx.q(*(data_10066944 + (*(esi_2 + 8) << 2)))
1001126c  int32_t eax_9
1001126c  int32_t edx_3
1001126c  edx_3:eax_9 =
1001126c      sx.q(*(data_10066934 + (*(data_1006693c + ((eax_4 ^ edx) - edx) * 0x18 + 0xc) << 2)))
10011276  int32_t edx_4 = *(data_1006692c + (((eax_9 ^ edx_3) - edx_3) << 3)) * 3
10011279  int32_t eax_14 = data_1006691c
1001127e  float ecx_3 = *(eax_14 + (edx_4 << 2))
10011281  void* eax_15 = eax_14 + (edx_4 << 2)
10011288  float edx_5 = *(eax_15 + 4)
1001128b  float eax_16 = *(eax_15 + 8)
1001128b  
1001129b  if (*(esi_2 + 4) s> 0)
10011307      do
100112b5          int32_t eax_19
100112b5          int32_t edx_7
100112b5          edx_7:eax_19 = sx.q(*(data_10066944 + ((*(esi_2 + 8) + i) << 2)))
100112bd          int32_t* ecx_7 = data_1006693c + ((eax_19 ^ edx_7) - edx_7) * 0x18
100112c3          int32_t edx_8 = *ecx_7 * 5
100112c6          int32_t eax_24 = data_10066924
100112d7          float* eax_25 = eax_24 + (edx_8 << 2)
100112e4          long double x87_r7_5 =
100112e4              fconvert.t(eax_16) * fconvert.t(*(eax_24 + (edx_8 << 2) + 8))
100112e4              + fconvert.t(edx_5) * fconvert.t(*(eax_24 + (edx_8 << 2) + 4))
100112e4              + fconvert.t(ecx_3) * fconvert.t(*eax_25) - fconvert.t(eax_25[3])
100112fc          i += 1
10011303          arg1 = fconvert.s(j_sub_10011090(ecx_7) * fconvert.t(fconvert.s(fneg(x87_r7_5)))
10011303              + fconvert.t(arg1))
10011307      while (i s< *(esi_2 + 4))
10011307  
10011318  return fconvert.t(arg1) * fconvert.t(0.333333343f)

10011319                                                                             90 90 90 90 90 90 90                           .......
10011320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10011340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10011360    long double sub_10011360(int32_t arg1)

10011360  int32_t ecx
10011360  int32_t var_4_1 = ecx
1001136d  long double result = fconvert.t(0f)
10011376  int32_t i = 0
10011378  float var_4 = fconvert.s(result)
1001137f  void* esi_2 = arg1 * 0x30 + data_1006694c
1001137f  
10011386  if (*(esi_2 + 4) s> 0)
100113c8      do
10011396          int32_t eax_5
10011396          int32_t edx_1
10011396          edx_1:eax_5 = sx.q(*(data_10066944 + ((*(esi_2 + 8) + i) << 2)))
1001139b          int32_t edx_2 = ((eax_5 ^ edx_1) - edx_1) * 3
1001139e          int32_t eax_8 = data_1006693c
100113a3          int32_t ecx_2
100113a3          ecx_2.b = *(eax_8 + (edx_2 << 3) + 4)
100113a3          
100113ad          if ((ecx_2.b & 4) != 0)
100113b7              result = j_sub_10011090(eax_8 + (edx_2 << 3)) + fconvert.t(var_4)
100113be              var_4 = fconvert.s(result)
100113be          
100113c5          i += 1
100113c8      while (i s< *(esi_2 + 4))
100113c8  
100113cd  return result

100113ce                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
100113e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100113f0    float* sub_100113f0(int32_t arg1, int32_t* arg2)

100113ff  int32_t i = 0
10011401  void* edi = data_1006693c + arg1 * 0x18
10011408  arg2[2] = 0
1001140b  arg2[1] = 0
1001140e  *arg2 = 0
1001140e  
10011415  if (*(edi + 8) s> 0)
100114b6      do
1001142f          int32_t eax_4
1001142f          int32_t edx_3
1001142f          edx_3:eax_4 = sx.q(*(data_10066934 + ((*(edi + 0xc) + i) << 2)))
1001143a          i += 1
1001143b          int32_t* eax_7 = data_1006692c + (((eax_4 ^ edx_3) - edx_3) << 3)
10011448          *arg2 =
10011448              fconvert.s(fconvert.t(*(data_1006691c + *eax_7 * 0xc)) + fconvert.t(*arg2))
1001145c          arg2[1] = fconvert.s(fconvert.t(*(data_1006691c + *eax_7 * 0xc + 4))
1001145c              + fconvert.t(arg2[1]))
10011471          arg2[2] = fconvert.s(fconvert.t(*(data_1006691c + *eax_7 * 0xc + 8))
10011471              + fconvert.t(arg2[2]))
10011485          *arg2 =
10011485              fconvert.s(fconvert.t(*(data_1006691c + eax_7[1] * 0xc)) + fconvert.t(*arg2))
1001149a          arg2[1] = fconvert.s(fconvert.t(*(data_1006691c + eax_7[1] * 0xc + 4))
1001149a              + fconvert.t(arg2[1]))
100114b0          arg2[2] = fconvert.s(fconvert.t(*(data_1006691c + eax_7[1] * 0xc + 8))
100114b0              + fconvert.t(arg2[2]))
100114b6      while (i s< *(edi + 8))
100114b6  
100114c1  int32_t* var_10 = arg2
100114d6  return j_sub_10043570(arg2, fconvert.s(fconvert.t(0.5) / float.t(*(edi + 8))), arg2)

100114d7                                                                       90 90 90 90 90 90 90 90 90                         .........
100114e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10011500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10011520    int32_t sub_10011520()

10011525  long double x87_r7 = fconvert.t(*(data_10064038 + 0x10))
10011530  long double x87_r6_2 = sqrt(fconvert.t(300000.0)) / x87_r7
10011545  int16_t x87control
10011545  return __ftol(x87control, x87_r7 * x87_r6_2 * x87_r6_2 * fconvert.t(0.5))

10011546                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10011560    long double sub_10011560(float arg1)

1001157e  return fconvert.t(arg1) / fconvert.t(*(data_10064038 + 0x10))

1001157f                                                                                               90                                 .
10011580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10011590    long double sub_10011590(float arg1)

100115b6  *(data_10064044 + 0x10)
100115bb  return fconvert.t(*(data_10064038 + 0x10))

100115bc                                                                                      90 90 90 90                              ....
100115c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100115d0    uint32_t sub_100115d0(int32_t arg1)

100115f1  return (sx.d(not.b((*(data_10066954 + arg1 * 0x1c + 8)).b)) & 2) u>> 1

100115f2                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10011600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10011610    uint32_t sub_10011610(int32_t arg1)

1001162e  return (sx.d(*(data_10066954 + arg1 * 0x1c + 4)) & 4) u>> 2

1001162f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

10011640    uint32_t sub_10011640(int32_t arg1)

1001165e  return (sx.d(*(data_10066954 + arg1 * 0x1c + 4)) & 4) u>> 2

1001165f                                                                                               90                                 .
10011660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10011670    int32_t sub_10011670(int32_t arg1)

1001168a  return *(data_10066954 + arg1 * 0x1c + 4) & 1

1001168b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

100116a0    int32_t sub_100116a0(int32_t arg1)

100116ba  return *(data_10066954 + arg1 * 0x1c + 4) & 2

100116bb                                                                                   90 90 90 90 90                             .....
100116c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100116d0    int80_t sub_100116d0()

100116e9  int16_t x87control
100116e9  return __ftol(x87control, 
100116e9      fconvert.t(*(data_10064068 + 0x10))
100116e9          / (fconvert.t(*(data_10064038 + 0x10)) * fconvert.t(0.10000000000000001))) __tailcall

100116ee                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................

10011700    int32_t sub_10011700(int32_t arg1, int32_t arg2)

1001170f  for (int32_t* i = *(data_1006675c + (arg1 << 2)); i != 0; i = i[0xb])
10011717      if (*i == arg2)
10011728          return 1
10011728  
10011722  return 0

10011729                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................

10011740    int32_t sub_10011740(float* arg1, float* arg2)

1001174c  int32_t var_4 = 0
10011758  float var_c = fconvert.s(fconvert.t(*arg2) - fconvert.t(*arg1))
10011767  float var_8 = fconvert.s(fconvert.t(arg2[1]) - fconvert.t(arg1[1]))
1001176b  j_sub_10043290(&var_c)
10011782  float var_18
10011782  j_sub_10043380(arg2, 48f, &var_c, &var_18)
10011782  
10011796  if (j_sub_1001ae60(&var_18) == 0)
100117a7      float var_10
100117a7      float var_10_1 = fconvert.s(fconvert.t(var_10) + fconvert.t(16f))
100117a7      
100117b5      if (j_sub_1001ae60(&var_18) == 0)
100117c0          return 1
100117c0  
100117d1  j_sub_10043380(arg2, 64f, &var_c, &var_18)
100117db  int32_t eax_4 = j_sub_1001ae60(&var_18)
100117db  
100117e7  if (eax_4 != 0 && j_sub_10011610(eax_4) == 0 && j_sub_10011670(eax_4) == 0)
1001180c      return 1
1001180c  
10011813  return 0

10011814                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10011820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10011840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10011860    int32_t sub_10011860(int32_t arg1, float arg2)

10011876  if (j_sub_10011610(arg1) != 0 && j_sub_10011610(arg2) != 0
10011876          && (*(data_10066954 + arg2 i* 0x1c + 8) & 2) != 0)
100118ab      int32_t eax_4 = data_1006694c
100118b6      int32_t edx_1 = 0
100118be      void* esi_4 = arg2 i* 0x30 + eax_4
100118c0      void* ebx_3 = arg1 * 0x30 + eax_4
100118c4      float* edi_1 = esi_4 + 0xc
100118c7      float* ecx_2 = ebx_3 + 0x18
100118c7      
100118cf      while (true)
100118cf          long double x87_r7_2 = fconvert.t(*(ecx_2 + esi_4 - ebx_3)) + fconvert.t(10f)
100118d5          long double temp0_1 = fconvert.t(ecx_2[-3])
100118d5          x87_r7_2 - temp0_1
100118d8          eax_4.w = (x87_r7_2 < temp0_1 ? 1 : 0) << 8
100118d8              | (is_unordered.t(x87_r7_2, temp0_1) ? 1 : 0) << 0xa
100118d8              | (x87_r7_2 == temp0_1 ? 1 : 0) << 0xe
100118d8          
100118dd          if ((eax_4:1.b & 1) != 0)
100118dd              break
100118dd          
100118e5          long double x87_r7_4 = fconvert.t(*edi_1) - fconvert.t(10f)
100118eb          long double temp1_1 = fconvert.t(*ecx_2)
100118eb          x87_r7_4 - temp1_1
100118ed          eax_4.w = (x87_r7_4 < temp1_1 ? 1 : 0) << 8
100118ed              | (is_unordered.t(x87_r7_4, temp1_1) ? 1 : 0) << 0xa
100118ed              | (x87_r7_4 == temp1_1 ? 1 : 0) << 0xe
100118ed          
100118f2          if ((eax_4:1.b & 0x41) == 0)
100118f2              break
100118f2          
100118f8          edx_1 += 1
100118f9          ecx_2 = &ecx_2[1]
100118fc          edi_1 = &edi_1[1]
100118fc          
10011902          if (edx_1 s>= 3)
10011907              int32_t var_14_1 = 0
10011907              
10011911              if (*(ebx_3 + 4) s> 0)
10011913                  int32_t ecx_3 = data_10066944
10011989                  bool cond:0_1
10011989                  
10011989                  do
10011922                      int32_t eax_6 = *(ecx_3 + ((var_14_1 + *(ebx_3 + 8)) << 2))
10011929                      int32_t edx_4
10011929                      edx_4.b = eax_6 s< 0
10011930                      int32_t ebp_4 = 0
10011932                      int32_t eax_7
10011932                      int32_t edx_5
10011932                      edx_5:eax_7 = sx.q(eax_6)
1001193a                      int32_t edi_4 = (eax_7 ^ edx_5) - edx_5
1001193a                      
1001193e                      if (*(esi_4 + 4) s> 0)
10011948                          while (true)
10011948                              int32_t eax_12
10011948                              int32_t edx_6
10011948                              edx_6:eax_12 = sx.q(*(ecx_3 + ((*(esi_4 + 8) + ebp_4) << 2)))
10011948                              
1001194f                              if (edi_4 == (eax_12 ^ edx_6) - edx_6)
10011957                                  int32_t var_c
10011957                                  j_sub_100113f0(edi_4, &var_c)
10011957                                  
1001196b                                  if ((j_sub_10003080(&var_c) & 0x38) != 0)
1001199e                                      int32_t* ebp_5 = data_1006693c + edi_4 * 0x18
100119a1                                      int32_t* eax_21 = j_sub_10010ff0()
100119a1                                      
100119aa                                      if (eax_21 == 0)
100119aa                                          break
100119aa                                      
100119b0                                      eax_21[1] = edi_4
100119b3                                      *eax_21 = arg2
100119b5                                      eax_21[2] = 0
100119c3                                      eax_21[3] = var_c
100119c9                                      int32_t var_8
100119c9                                      eax_21[4] = var_8
100119d3                                      int32_t var_4
100119d3                                      eax_21[5] = var_4
100119f2                                      j_sub_10043380(&eax_21[3], 2f, 
100119f2                                          data_10066924 + (*ebp_5 ^ edx_4) * 0x14, 
100119f2                                          &eax_21[6])
100119f8                                      eax_21[9] = 8
100119ff                                      eax_21[0xa].w = 1
10011a05                                      long double st0 = j_sub_10011220(arg2)
10011a0a                                      long double temp2 = fconvert.t(800f)
10011a0a                                      st0 - temp2
10011a0a                                      
10011a18                                      if ((((st0 < temp2 ? 1 : 0) << 8
10011a18                                              | (is_unordered.t(st0, temp2) ? 1 : 0) << 0xa
10011a18                                              | (st0 == temp2 ? 1 : 0) << 0xe):1.b & 1) != 0)
10011a1a                                          eax_21[0xa].w += 0xc8
10011a1a                                      
10011a2e                                      eax_21[0xb] = *(data_1006675c + (arg1 << 2))
10011a37                                      *(data_1006675c + (arg1 << 2)) = eax_21
10011a41                                      data_100667a4 += 1
10011a50                                      return 1
10011a50                                  
1001196d                                  ecx_3 = data_10066944
1001196d                              
10011976                              ebp_4 += 1
10011976                              
10011979                              if (ebp_4 s>= *(esi_4 + 4))
10011979                                  goto label_10011983
10011979                          
10011979                          break
10011979                      
10011983                      label_10011983:
10011983                      cond:0_1 = var_14_1 + 1 s< *(ebx_3 + 4)
10011985                      var_14_1 += 1
10011989                  while (cond:0_1)
10011989              
10011911              break
10011911  
10011994  return 0

10011a51                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10011a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10011a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10011aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10011ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10011ae0    void sub_10011ae0(int32_t arg1, int32_t arg2)

10011afc  if (j_sub_10011670(arg1) != 0 && j_sub_10011670(arg2) != 0)
10011b1a      int32_t eax_2 = data_1006694c
10011b26      int32_t edx_1 = 0
10011b2e      void* ebx_4 = arg2 * 0x30 + eax_2
10011b30      void* ebp_3 = arg1 * 0x30 + eax_2
10011b34      void* var_54_1 = ebp_3
10011b38      void* var_50_1 = ebx_4
10011b3c      float* esi_1 = ebx_4 + 0xc
10011b3f      void* ecx_1 = ebp_3 + 0x18
10011b3f      
10011b47      while (true)
10011b47          long double x87_r7_2 = fconvert.t(*(ebx_4 - ebp_3 + ecx_1)) + fconvert.t(10f)
10011b4d          long double temp0_1 = fconvert.t(*(ecx_1 - 0xc))
10011b4d          x87_r7_2 - temp0_1
10011b50          eax_2.w = (x87_r7_2 < temp0_1 ? 1 : 0) << 8
10011b50              | (is_unordered.t(x87_r7_2, temp0_1) ? 1 : 0) << 0xa
10011b50              | (x87_r7_2 == temp0_1 ? 1 : 0) << 0xe
10011b50          
10011b55          if ((eax_2:1.b & 1) != 0)
10011b55              break
10011b55          
10011b5d          long double x87_r7_4 = fconvert.t(*esi_1) - fconvert.t(10f)
10011b63          long double temp1_1 = fconvert.t(*ecx_1)
10011b63          x87_r7_4 - temp1_1
10011b65          eax_2.w = (x87_r7_4 < temp1_1 ? 1 : 0) << 8
10011b65              | (is_unordered.t(x87_r7_4, temp1_1) ? 1 : 0) << 0xa
10011b65              | (x87_r7_4 == temp1_1 ? 1 : 0) << 0xe
10011b65          
10011b6a          if ((eax_2:1.b & 0x41) == 0)
10011b6a              break
10011b6a          
10011b70          edx_1 += 1
10011b71          ecx_1 += 4
10011b74          esi_1 = &esi_1[1]
10011b74          
10011b7a          if (edx_1 s>= 2)
10011b7c              long double x87_r7_5 = fconvert.t(*(ebx_4 + 0x14))
10011b7f              long double temp2_1 = fconvert.t(*(ebp_3 + 0x20))
10011b7f              x87_r7_5 - temp2_1
10011b82              eax_2.w = (x87_r7_5 < temp2_1 ? 1 : 0) << 8
10011b82                  | (is_unordered.t(x87_r7_5, temp2_1) ? 1 : 0) << 0xa
10011b82                  | (x87_r7_5 == temp2_1 ? 1 : 0) << 0xe
10011b82              
10011b87              if ((eax_2:1.b & 0x41) != 0)
10011b91                  float var_60 = 0f
10011b9a                  float var_5c_1 = 0f
10011ba2                  float var_58_1 = -1f
10011baa                  j_sub_10043540(&var_60)
10011bb2                  int32_t i = 0
10011bb9                  float var_8c_1 = 99999f
10011bc1                  float var_64_1 = 0f
10011bc9                  int32_t var_7c_1 = 0
10011bcd                  int32_t i_1 = 0
10011bcd                  
10011bd1                  if (*(ebp_3 + 4) s> 0)
10011f61                      int32_t var_48
10011f61                      int32_t var_44
10011f61                      int32_t var_40
10011f61                      float var_3c
10011f61                      float var_38
10011f61                      float var_34
10011f61                      float var_30
10011f61                      float var_2c
10011f61                      float var_28
10011f61                      int32_t var_24
10011f61                      int16_t var_20
10011f61                      
10011f61                      do
10011bed                          int32_t eax_6
10011bed                          int32_t edx_3
10011bed                          edx_3:eax_6 = sx.q(*(data_10066944 + ((i + *(ebp_3 + 8)) << 2)))
10011bf5                          void* edi_3 = data_1006693c + ((eax_6 ^ edx_3) - edx_3) * 0x18
10011bf8                          void* var_6c_1 = edi_3
10011bf8                          
10011c00                          if ((*(edi_3 + 4) & 4) != 0)
10011c09                              int32_t j = 0
10011c0d                              int32_t j_1 = 0
10011c0d                              
10011c11                              if (*(ebx_4 + 4) s> 0)
10011f4d                                  do
10011c26                                      int32_t eax_14
10011c26                                      int32_t edx_6
10011c26                                      edx_6:eax_14 =
10011c26                                          sx.q(*(data_10066944 + ((j + *(ebx_4 + 8)) << 2)))
10011c33                                      int32_t* esi_2 =
10011c33                                          data_1006693c + ((eax_14 ^ edx_6) - edx_6) * 0x18
10011c36                                      int32_t* var_4c_1 = esi_2
10011c36                                      
10011c3e                                      if ((esi_2[1].b & 4) != 0)
10011c47                                          int32_t var_90_1 = 0
10011c47                                          
10011c51                                          if (*(edi_3 + 8) s> 0)
10011f39                                              bool cond:5_1
10011f39                                              
10011f39                                              do
10011c5a                                                  int32_t ecx_5 = 0
10011c5e                                                  int32_t var_70_1 = 0
10011c5e                                                  
10011c62                                                  if (esi_2[2] s> 0)
10011c78                                                      while (true)
10011c78                                                          int32_t eax_20 = data_10066934
10011c81                                                          int32_t ebp_5 = *(eax_20
10011c81                                                              + ((*(edi_3 + 0xc) + var_90_1) << 2))
10011c87                                                          int32_t eax_22
10011c87                                                          int32_t edx_10
10011c87                                                          edx_10:eax_22 = sx.q(
10011c87                                                              *(eax_20 + ((ecx_5 + esi_2[3]) << 2)))
10011c90                                                          int32_t eax_24
10011c90                                                          int32_t edx_11
10011c90                                                          edx_11:eax_24 = sx.q(ebp_5)
10011c90                                                          
10011c97                                                          if ((eax_24 ^ edx_11) - edx_11
10011c97                                                                  == (eax_22 ^ edx_10) - edx_10)
10011c9f                                                              int32_t ecx_10 = data_1006692c
10011ca7                                                              int32_t edx_12
10011ca7                                                              edx_12.b = ebp_5 s< 0
10011cae                                                              int32_t eax_28
10011cae                                                              int32_t edx_13
10011cae                                                              edx_13:eax_28 = sx.q(ebp_5)
10011cb1                                                              int32_t eax_30 =
10011cb1                                                                  (eax_28 ^ edx_13) - edx_13
10011cb3                                                              int32_t* esi_3 = ecx_10 + (eax_30 << 3)
10011cc2                                                              int32_t eax_33 = data_1006691c
10011ccd                                                              float var_a0 = fconvert.s(fconvert.t(*(
10011ccd                                                                  eax_33
10011ccd                                                                  + *(ecx_10 + (eax_30 << 3) + 4) * 0xc))
10011ccd                                                                  + fconvert.t(*(eax_33 + *esi_3 * 0xc)))
10011ce4                                                              float var_9c_1 = fconvert.s(fconvert.t(
10011ce4                                                                  *(eax_33 + esi_3[1] * 0xc + 4)) +
10011ce4                                                                  fconvert.t(
10011ce4                                                                  *(eax_33 + *esi_3 * 0xc + 4)))
10011d00                                                              float var_98_1 = fconvert.s(fconvert.t(
10011d00                                                                  *(eax_33 + esi_3[1] * 0xc + 8)) +
10011d00                                                                  fconvert.t(
10011d00                                                                  *(eax_33 + *esi_3 * 0xc + 8)))
10011d09                                                              float var_78_1 =
10011d09                                                                  fconvert.s(j_sub_10043500(&var_a0))
10011d1c                                                              j_sub_10043570(&var_a0, 0.5f, &var_a0)
10011d2d                                                              float var_88 = var_a0
10011d39                                                              int32_t edx_18
10011d39                                                              edx_18.b = edx_12 == 0
10011d43                                                              void* ecx_19 = &esi_3[edx_18]
10011d4e                                                              int32_t eax_37 = data_1006691c
10011d59                                                              float var_18 = fconvert.s(fconvert.t(
10011d59                                                                  *(eax_37 + esi_3[edx_12] * 0xc)) -
10011d59                                                                  fconvert.t(*(eax_37 + *ecx_19 * 0xc)))
10011d73                                                              float var_14_1 = fconvert.s(fconvert.t(
10011d73                                                                  *(eax_37 + esi_3[edx_12] * 0xc + 4)) -
10011d73                                                                  fconvert.t(
10011d73                                                                  *(eax_37 + *ecx_19 * 0xc + 4)))
10011d82                                                              esi_2 = var_4c_1
10011d9f                                                              float var_10_1 = fconvert.s(fconvert.t(
10011d9f                                                                  *(eax_37 + esi_3[edx_12] * 0xc + 8)) -
10011d9f                                                                  fconvert.t(
10011d9f                                                                  *(eax_37 + *ecx_19 * 0xc + 8)))
10011db7                                                              float var_c
10011db7                                                              j_sub_100434b0(&var_18, 
10011db7                                                                  data_10066924 + *esi_2 * 0x14, &var_c)
10011dc4                                                              j_sub_10043290(&var_c)
10011de2                                                              j_sub_10043380(&var_88, 5f, &var_c, 
10011de2                                                                  &var_88)
10011dfe                                                              j_sub_10043380(&var_a0, 0.100000001f, 
10011dfe                                                                  &var_c, &var_a0)
10011e1a                                                              float var_80_2 = fconvert.s(
10011e1a                                                                  fconvert.t(var_98_1)
10011e1a                                                                  + fconvert.t(0.125))
10011e3a                                                              float var_94_1 = fconvert.s(
10011e3a                                                                  fconvert.t(var_98_1)
10011e3a                                                                  * fconvert.t(var_58_1)
10011e3a                                                                  + fconvert.t(var_9c_1)
10011e3a                                                                  * fconvert.t(var_5c_1)
10011e3a                                                                  + fconvert.t(var_a0)
10011e3a                                                                  * fconvert.t(var_60))
10011e3a                                                              
10011e48                                                              if (j_sub_10011740(&var_a0, &var_88)
10011e48                                                                      == 0)
10011e54                                                                  var_94_1 = fconvert.s(
10011e54                                                                      fconvert.t(var_94_1) + fconvert.t(200f))
10011e54                                                              
10011e58                                                              long double x87_r7_28 =
10011e58                                                                  fconvert.t(var_94_1)
10011e5c                                                              long double temp4_1 =
10011e5c                                                                  fconvert.t(var_8c_1)
10011e5c                                                              x87_r7_28 - temp4_1
10011e60                                                              int32_t eax_40
10011e60                                                              eax_40.w =
10011e60                                                                  (x87_r7_28 < temp4_1 ? 1 : 0) << 8 | (
10011e60                                                                  is_unordered.t(x87_r7_28, temp4_1) ? 1
10011e60                                                                  : 0) << 0xa
10011e60                                                                  | (x87_r7_28 == temp4_1 ? 1 : 0) << 0xe
10011e60                                                              
10011e65                                                              if ((eax_40:1.b & 1) != 0)
10011e9e                                                                  label_10011e9e:
10011e9e                                                                  var_48 = arg2
10011ea6                                                                  var_8c_1 = var_94_1
10011eae                                                                  var_64_1 = var_78_1
10011eb6                                                                  var_34 = var_98_1
10011ebe                                                                  var_3c = var_a0
10011ec6                                                                  var_38 = var_9c_1
10011ece                                                                  var_28 = var_80_2
10011eda                                                                  var_44 = 0
10011ee2                                                                  var_40 = ebp_5
10011ee6                                                                  var_30 = var_88
10011eed                                                                  var_2c = var_9c_1
10011ef4                                                                  var_24 = 2
10011eff                                                                  var_20 = 1
10011f07                                                                  var_7c_1 = 1
10011e65                                                              else
10011e6b                                                                  long double x87_r7_30 =
10011e6b                                                                      fconvert.t(var_8c_1) + fconvert.t(1f)
10011e71                                                                  long double temp5_1 =
10011e71                                                                      fconvert.t(var_94_1)
10011e71                                                                  x87_r7_30 - temp5_1
10011e75                                                                  eax_40.w =
10011e75                                                                      (x87_r7_30 < temp5_1 ? 1 : 0) << 8 | (
10011e75                                                                      is_unordered.t(x87_r7_30, temp5_1) ? 1
10011e75                                                                      : 0) << 0xa
10011e75                                                                      | (x87_r7_30 == temp5_1 ? 1 : 0) << 0xe
10011e75                                                                  
10011e7a                                                                  if ((eax_40:1.b & 0x41) == 0)
10011e80                                                                      long double x87_r7_31 =
10011e80                                                                          fconvert.t(var_78_1)
10011e84                                                                      long double temp6_1 =
10011e84                                                                          fconvert.t(var_64_1)
10011e84                                                                      x87_r7_31 - temp6_1
10011e88                                                                      eax_40.w =
10011e88                                                                          (x87_r7_31 < temp6_1 ? 1 : 0) << 8 | (
10011e88                                                                          is_unordered.t(x87_r7_31, temp6_1) ? 1
10011e88                                                                          : 0) << 0xa
10011e88                                                                          | (x87_r7_31 == temp6_1 ? 1 : 0) << 0xe
10011e88                                                                      
10011e8d                                                                      if ((eax_40:1.b & 0x41) == 0)
10011e8d                                                                          goto label_10011e9e
10011e8d                                                          
10011f12                                                          ecx_5 = var_70_1 + 1
10011f15                                                          var_70_1 = ecx_5
10011f15                                                          
10011f19                                                          if (ecx_5 s>= esi_2[2])
10011f19                                                              break
10011f19                                                          
10011c6a                                                          edi_3 = var_6c_1
10011c6a                                                      
10011f1f                                                      ebx_4 = var_50_1
10011f23                                                      edi_3 = var_6c_1
10011f27                                                      ebp_3 = var_54_1
10011f27                                                  
10011f33                                                  cond:5_1 = var_90_1 + 1 s< *(edi_3 + 8)
10011f35                                                  var_90_1 += 1
10011f39                                              while (cond:5_1)
10011f3f                                              j = j_1
10011f3f                                      
10011f46                                      j += 1
10011f49                                      j_1 = j
10011f4d                                  while (j s< *(ebx_4 + 4))
10011f4d                                  
10011f53                                  i = i_1
10011f53                          
10011f5a                          i += 1
10011f5d                          i_1 = i
10011f61                      while (i s< *(ebp_3 + 4))
10011f61                      
10011f6d                      if (var_7c_1 != 0)
10011f73                          int32_t* eax_50 = j_sub_10010ff0()
10011f73                          
10011f7c                          if (eax_50 != 0)
10011f8e                              *eax_50 = var_48
10011f94                              eax_50[1] = var_44
10011f9e                              eax_50[2] = var_40
10011fa5                              eax_50[3] = var_3c
10011fae                              eax_50[4] = var_38
10011fbb                              eax_50[5] = var_34
10011fc5                              eax_50[7] = var_2c
10011fc8                              float edx_30
10011fc8                              edx_30.w = var_20
10011fd0                              eax_50[6] = var_30
10011fd9                              eax_50[8] = var_28
10011fe3                              eax_50[9] = var_24
10011fe6                              eax_50[0xa].w = edx_30.w
10011ff4                              eax_50[0xb] = *(data_1006675c + (arg1 << 2))
10011ffd                              *(data_1006675c + (arg1 << 2)) = eax_50
10011ffd                              
1001200a                              if (j_sub_100115d0(arg1) == 0 && j_sub_100115d0(arg2) != 0)
10012020                                  eax_50[0xa].w += 0x12c
10012020                              
10012037                              if (j_sub_10011740(&eax_50[3], &eax_50[6]) == 0)
10012039                                  eax_50[0xa].w += 0x64
10012039                              
10012040                              long double st0_3 = j_sub_10011360(*eax_50)
10012045                              long double temp3 = fconvert.t(500f)
10012045                              st0_3 - temp3
10012045                              
10012053                              if ((((st0_3 < temp3 ? 1 : 0) << 8
10012053                                      | (is_unordered.t(st0_3, temp3) ? 1 : 0) << 0xa
10012053                                      | (st0_3 == temp3 ? 1 : 0) << 0xe):1.b & 1) != 0)
10012055                                  eax_50[0xa].w += 0x64
10012055                              
10012061                              data_100667ac += 1
10012073                              return 
10012073              
10011b87              break

10012081     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
100120a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100120c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100120e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10012100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10012120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10012140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10012160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10012180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100121a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100121c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100121e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10012200    void sub_10012200(int32_t arg1, int32_t arg2)

10012212  float var_a0 = 0f
1001221d  float var_9c = 0f
10012228  float var_98 = 1f
10012233  int32_t eax = j_sub_10011670(arg1)
1001223d  uint32_t eax_1
1001223d  
1001223d  if (eax == 0)
10012240      eax_1 = j_sub_10011610(arg1)
10012240  
1001224a  if (eax != 0 || eax_1 != 0)
10012258      int32_t eax_2 = j_sub_10011670(arg2)
10012262      uint32_t eax_3
10012262      
10012262      if (eax_2 == 0)
10012265          eax_3 = j_sub_10011610(arg2)
10012265      
1001226f      if (eax_2 != 0 || eax_3 != 0)
10012275          int32_t eax_4 = data_1006694c
10012287          void* ebp_3 = arg1 * 0x30 + eax_4
10012289          void* edi_4 = arg2 * 0x30 + eax_4
100122a3          int32_t edx_1 = 0
100122a5          float* esi_1 = edi_4 + 0xc
100122a8          uint32_t var_94_1 = j_sub_10011610(arg1)
100122af          void* ecx_1 = ebp_3 + 0x18
100122af          
100122b7          while (true)
100122b7              long double x87_r7_2 = fconvert.t(*(edi_4 - ebp_3 + ecx_1)) + fconvert.t(10f)
100122bd              long double temp0_1 = fconvert.t(*(ecx_1 - 0xc))
100122bd              x87_r7_2 - temp0_1
100122c0              uint32_t eax_5
100122c0              eax_5.w = (x87_r7_2 < temp0_1 ? 1 : 0) << 8
100122c0                  | (is_unordered.t(x87_r7_2, temp0_1) ? 1 : 0) << 0xa
100122c0                  | (x87_r7_2 == temp0_1 ? 1 : 0) << 0xe
100122c0              
100122c5              if ((eax_5:1.b & 1) != 0)
100122c5                  break
100122c5              
100122cd              long double x87_r7_4 = fconvert.t(*esi_1) - fconvert.t(10f)
100122d3              long double temp1_1 = fconvert.t(*ecx_1)
100122d3              x87_r7_4 - temp1_1
100122d5              eax_5.w = (x87_r7_4 < temp1_1 ? 1 : 0) << 8
100122d5                  | (is_unordered.t(x87_r7_4, temp1_1) ? 1 : 0) << 0xa
100122d5                  | (x87_r7_4 == temp1_1 ? 1 : 0) << 0xe
100122d5              
100122da              if ((eax_5:1.b & 0x41) == 0)
100122da                  break
100122da              
100122e0              edx_1 += 1
100122e1              ecx_1 += 4
100122e4              esi_1 = &esi_1[1]
100122e4              
100122ea              if (edx_1 s>= 2)
100122ef                  uint32_t var_e8_1 = 0
100122f8                  float var_1b0_1 = 99999f
10012300                  float var_c0_1 = 0f
1001230b                  int32_t var_e0_1 = 0
10012312                  float var_128_1 = 99999f
1001231d                  float var_bc_1 = 0f
10012328                  int32_t i_1 = 0
10012328                  
1001232f                  if (*(ebp_3 + 4) s> 0)
1001300f                      float var_14c
1001300f                      float var_140
1001300f                      float var_100
1001300f                      float var_fc
1001300f                      float var_f8
1001300f                      int32_t var_f4
1001300f                      int32_t var_f0
1001300f                      float var_d8
1001300f                      float var_cc
1001300f                      float var_c8
1001300f                      float var_c4
1001300f                      float var_90
1001300f                      float var_8c
1001300f                      float var_88
1001300f                      float var_84
1001300f                      float var_78
1001300f                      int32_t i
1001300f                      
1001300f                      do
10012352                          int32_t eax_8 = *(data_10066944 + ((*(ebp_3 + 8) + i_1) << 2))
10012359                          int32_t eax_9
10012359                          int32_t edx_3
10012359                          edx_3:eax_9 = sx.q(eax_8)
1001235a                          int32_t ecx_4
1001235a                          ecx_4.b = eax_8 s< 0
10012370                          int32_t* ebp_5 = data_1006693c + ((eax_9 ^ edx_3) - edx_3) * 0x18
10012373                          int32_t* var_b8_1 = ebp_5
10012373                          
1001237e                          if ((ebp_5[1].b & 4) != 0)
100123de                              label_100123de:
100123de                              int32_t var_e4_1 = 0
100123de                              
100123e7                              if (ebp_5[2] s> 0)
10012fee                                  bool cond:6_1
10012fee                                  
10012fee                                  do
10012401                                      int32_t eax_19 =
10012401                                          *(data_10066934 + ((ebp_5[3] + var_e4_1) << 2))
10012404                                      int32_t ecx_7
10012404                                      ecx_7.b = ebp_5[1].b
10012409                                      int32_t edx_7
10012409                                      edx_7.b = eax_19 s< 0
1001240f                                      int32_t edi_7 = edx_7
1001240f                                      
10012411                                      if ((ecx_7.b & 4) == 0)
1001241e                                          int32_t ecx_8
1001241e                                          ecx_8.b = edi_7 == ecx_4
10012421                                          edi_7 = ecx_8
10012421                                      
10012423                                      int32_t eax_20
10012423                                      int32_t edx_9
10012423                                      edx_9:eax_20 = sx.q(eax_19)
1001242a                                      int32_t esi_4 = (eax_20 ^ edx_9) - edx_9
10012434                                      int32_t ecx_9 = data_1006692c + (esi_4 << 3)
10012437                                      int32_t edx_11 = data_1006691c
1001243d                                      int32_t eax_21
1001243d                                      eax_21.b = edi_7 == 0
10012446                                      int32_t eax_23 = *(ecx_9 + (eax_21 << 2)) * 3
1001244f                                      void* eax_24 = edx_11 + (eax_23 << 2)
10012452                                      float var_1a4_1 = *(edx_11 + (eax_23 << 2))
1001245c                                      float var_19c_1 = *(eax_24 + 8)
10012460                                      int32_t* eax_26 =
10012460                                          edx_11 + *(ecx_9 + (edi_7 << 2)) * 0xc
10012463                                      float var_1a0_1 = *(eax_24 + 4)
1001246c                                      float var_18c_1 = *eax_26
1001247b                                      float var_188_1 = eax_26[1]
1001247f                                      float var_184_1 = eax_26[2]
10012499                                      float var_54 = fconvert.s(fconvert.t(var_18c_1)
10012499                                          - fconvert.t(var_1a4_1))
100124aa                                      float var_50_1 = fconvert.s(fconvert.t(var_188_1)
100124aa                                          - fconvert.t(var_1a0_1))
100124b9                                      float var_4c_1 = fconvert.s(fconvert.t(var_184_1)
100124b9                                          - fconvert.t(var_19c_1))
100124c0                                      float var_124
100124c0                                      j_sub_100434b0(&var_54, &var_a0, &var_124)
100124cd                                      j_sub_10043290(&var_124)
100124f4                                      int32_t j = 0
1001250a                                      float var_120
1001250a                                      float var_11c
1001250a                                      float var_1ac_1 = fconvert.s(
1001250a                                          fconvert.t(var_11c) * fconvert.t(var_19c_1)
1001250a                                          + fconvert.t(var_120) * fconvert.t(var_1a0_1)
1001250a                                          + fconvert.t(var_124) * fconvert.t(var_1a4_1))
1001250a                                      
1001250e                                      if (*(edi_4 + 4) s> 0)
10012514                                          void* eax_28 = edi_4
10012514                                          
10012fcd                                          do
10012523                                              int32_t eax_31
10012523                                              int32_t edx_16
10012523                                              edx_16:eax_31 = sx.q(*(data_10066944
10012523                                                  + ((*(eax_28 + 8) + j) << 2)))
10012528                                              int32_t edx_17 = data_1006693c
1001252e                                              int32_t ecx_14 =
1001252e                                                  ((eax_31 ^ edx_16) - edx_16) * 3
10012531                                              int32_t eax_33
10012531                                              eax_33.b = *(edx_17 + (ecx_14 << 3) + 4)
10012537                                              void* edi_8 = edx_17 + (ecx_14 << 3)
10012537                                              
1001253a                                              if ((eax_33.b & 4) != 0)
10012543                                                  int32_t k = 0
10012543                                                  
10012547                                                  if (*(edi_8 + 8) s> 0)
10012fbc                                                      do
1001255b                                                          int32_t eax_38
1001255b                                                          int32_t edx_18
1001255b                                                          edx_18:eax_38 = sx.q(*(data_10066934
1001255b                                                              + ((*(edi_8 + 0xc) + k) << 2)))
10012566                                                          int32_t* ecx_16 = data_1006692c
10012566                                                              + (((eax_38 ^ edx_18) - edx_18) << 3)
1001257a                                                          int32_t* eax_43 =
1001257a                                                              data_1006691c + *ecx_16 * 0xc
1001257f                                                          float var_180_1 = *eax_43
10012589                                                          float var_17c_1 = eax_43[1]
1001258d                                                          float var_178_1 = eax_43[2]
100125ad                                                          int32_t* eax_45 =
100125ad                                                              data_1006691c + ecx_16[1] * 0xc
100125c5                                                          float var_198_1 = *eax_45
100125cb                                                          float var_190_1 = eax_45[2]
100125cf                                                          float var_194_1 = eax_45[1]
100125d3                                                          long double x87_r7_24 =
100125d3                                                              fconvert.t(var_178_1)
100125d3                                                              * fconvert.t(var_11c)
100125d3                                                              + fconvert.t(var_17c_1)
100125d3                                                              * fconvert.t(var_120)
100125d3                                                              + fconvert.t(var_180_1)
100125d3                                                              * fconvert.t(var_124)
100125d3                                                              - fconvert.t(var_1ac_1)
100125d7                                                          long double temp7_1 =
100125d7                                                              fconvert.t(-0.10000000000000001)
100125d7                                                          x87_r7_24 - temp7_1
100125dd                                                          float eax_46
100125dd                                                          eax_46.w =
100125dd                                                              (x87_r7_24 < temp7_1 ? 1 : 0) << 8 | (
100125dd                                                              is_unordered.t(x87_r7_24, temp7_1) ? 1
100125dd                                                              : 0) << 0xa
100125dd                                                              | (x87_r7_24 == temp7_1 ? 1 : 0) << 0xe
100125dd                                                              | 0x3800
100125dd                                                          
100125e2                                                          if ((eax_46:1.b & 1) == 0)
100125e8                                                              long double temp10_1 =
100125e8                                                                  fconvert.t(0.10000000000000001)
100125e8                                                              x87_r7_24 - temp10_1
100125ee                                                              eax_46.w =
100125ee                                                                  (x87_r7_24 < temp10_1 ? 1 : 0) << 8 | (
100125ee                                                                  is_unordered.t(x87_r7_24, temp10_1) ? 1
100125ee                                                                  : 0) << 0xa
100125ee                                                                  | (x87_r7_24 == temp10_1 ? 1 : 0)
100125ee                                                                  << 0xe
100125ee                                                              
100125f3                                                              if ((eax_46:1.b & 0x41) != 0)
1001261e                                                                  x87_r7_24 = fconvert.t(var_190_1)
1001261e                                                                      * fconvert.t(var_11c)
1001261e                                                                      + fconvert.t(var_194_1)
1001261e                                                                      * fconvert.t(var_120)
1001261e                                                                      + fconvert.t(var_198_1)
1001261e                                                                      * fconvert.t(var_124)
1001261e                                                                      - fconvert.t(var_1ac_1)
10012622                                                                  long double temp13_1 =
10012622                                                                      fconvert.t(-0.10000000000000001)
10012622                                                                  x87_r7_24 - temp13_1
10012628                                                                  eax_46.w =
10012628                                                                      (x87_r7_24 < temp13_1 ? 1 : 0) << 8 | (
10012628                                                                      is_unordered.t(x87_r7_24, temp13_1) ? 1
10012628                                                                      : 0) << 0xa
10012628                                                                      | (x87_r7_24 == temp13_1 ? 1 : 0)
10012628                                                                      << 0xe | 0x3800
10012628                                                                  
1001262d                                                                  if ((eax_46:1.b & 1) == 0)
10012633                                                                      long double temp16_1 =
10012633                                                                          fconvert.t(0.10000000000000001)
10012633                                                                      x87_r7_24 - temp16_1
10012639                                                                      eax_46.w =
10012639                                                                          (x87_r7_24 < temp16_1 ? 1 : 0) << 8 | (
10012639                                                                          is_unordered.t(x87_r7_24, temp16_1) ? 1
10012639                                                                          : 0) << 0xa
10012639                                                                          | (x87_r7_24 == temp16_1 ? 1 : 0)
10012639                                                                          << 0xe
10012639                                                                      
1001263e                                                                      if ((eax_46:1.b & 0x41) != 0)
1001265c                                                                          float var_134
1001265c                                                                          j_sub_100434b0(&var_a0, &var_124, 
1001265c                                                                              &var_134)
10012689                                                                          float var_174_1 = var_178_1
1001269d                                                                          float var_170_1 = var_19c_1
100126a8                                                                          float var_150_1 = var_184_1
100126af                                                                          float var_130
100126af                                                                          float var_12c
100126af                                                                          long double x87_r7_32 =
100126af                                                                              fconvert.t(var_12c)
100126af                                                                              * fconvert.t(var_12c)
100126af                                                                              + fconvert.t(var_130)
100126af                                                                              * fconvert.t(var_130)
100126af                                                                              + fconvert.t(var_134)
100126af                                                                              * fconvert.t(var_134)
100126c7                                                                          float var_16c_1 = var_190_1
100126dc                                                                          float var_1bc_1 = fconvert.s((
100126dc                                                                              fconvert.t(var_12c)
100126dc                                                                              * fconvert.t(var_19c_1)
100126dc                                                                              + fconvert.t(var_130)
100126dc                                                                              * fconvert.t(var_1a0_1)
100126dc                                                                              + fconvert.t(var_134)
100126dc                                                                              * fconvert.t(var_1a4_1)) / x87_r7_32)
10012707                                                                          float var_1c0_1 = fconvert.s((
10012707                                                                              fconvert.t(var_12c)
10012707                                                                              * fconvert.t(var_184_1)
10012707                                                                              + fconvert.t(var_130)
10012707                                                                              * fconvert.t(var_188_1)
10012707                                                                              + fconvert.t(var_134)
10012707                                                                              * fconvert.t(var_18c_1)) / x87_r7_32)
10012732                                                                          float var_1b8_1 = fconvert.s((
10012732                                                                              fconvert.t(var_12c)
10012732                                                                              * fconvert.t(var_178_1)
10012732                                                                              + fconvert.t(var_130)
10012732                                                                              * fconvert.t(var_17c_1)
10012732                                                                              + fconvert.t(var_134)
10012732                                                                              * fconvert.t(var_180_1)) / x87_r7_32)
1001275d                                                                          float var_1b4_1 = fconvert.s((
1001275d                                                                              fconvert.t(var_12c)
1001275d                                                                              * fconvert.t(var_190_1)
1001275d                                                                              + fconvert.t(var_130)
1001275d                                                                              * fconvert.t(var_194_1)
1001275d                                                                              + fconvert.t(var_134)
1001275d                                                                              * fconvert.t(var_198_1)) / x87_r7_32)
10012763                                                                          long double x87_r7_33 =
10012763                                                                              fconvert.t(var_1bc_1)
10012767                                                                          long double temp17_1 =
10012767                                                                              fconvert.t(var_1c0_1)
10012767                                                                          x87_r7_33 - temp17_1
1001276b                                                                          float eax_47
1001276b                                                                          eax_47.w =
1001276b                                                                              (x87_r7_33 < temp17_1 ? 1 : 0) << 8 | (
1001276b                                                                              is_unordered.t(x87_r7_33, temp17_1) ? 1
1001276b                                                                              : 0) << 0xa
1001276b                                                                              | (x87_r7_33 == temp17_1 ? 1 : 0)
1001276b                                                                              << 0xe
1001276b                                                                          
10012770                                                                          if ((eax_47:1.b & 0x41) == 0)
1001277a                                                                              long double x87_r7_34 =
1001277a                                                                                  fconvert.t(var_1bc_1)
10012782                                                                              var_1bc_1 = var_1c0_1
1001278a                                                                              var_170_1 = var_184_1
1001278e                                                                              var_1c0_1 = fconvert.s(x87_r7_34)
10012792                                                                              long double x87_r7_35 =
10012792                                                                                  fconvert.t(var_1a4_1)
10012796                                                                              var_150_1 = var_19c_1
100127b9                                                                              var_1a4_1 = var_18c_1
100127bd                                                                              float ecx_24 = var_1a0_1
100127c4                                                                              var_1a0_1 = var_188_1
100127c8                                                                              float edx_29 = var_19c_1
100127cf                                                                              var_19c_1 = var_184_1
100127d3                                                                              var_18c_1 = fconvert.s(x87_r7_35)
100127d7                                                                              var_188_1 = ecx_24
100127db                                                                              var_184_1 = edx_29
100127db                                                                          
100127df                                                                          long double x87_r7_36 =
100127df                                                                              fconvert.t(var_1b8_1)
100127e3                                                                          long double temp18_1 =
100127e3                                                                              fconvert.t(var_1b4_1)
100127e3                                                                          x87_r7_36 - temp18_1
100127e7                                                                          eax_47.w =
100127e7                                                                              (x87_r7_36 < temp18_1 ? 1 : 0) << 8 | (
100127e7                                                                              is_unordered.t(x87_r7_36, temp18_1) ? 1
100127e7                                                                              : 0) << 0xa
100127e7                                                                              | (x87_r7_36 == temp18_1 ? 1 : 0)
100127e7                                                                              << 0xe
100127e7                                                                          
100127ec                                                                          if ((eax_47:1.b & 0x41) == 0)
100127f6                                                                              long double x87_r7_37 =
100127f6                                                                                  fconvert.t(var_1b8_1)
100127fe                                                                              var_1b8_1 = var_1b4_1
10012806                                                                              var_174_1 = var_190_1
1001280a                                                                              var_1b4_1 = fconvert.s(x87_r7_37)
1001280e                                                                              long double x87_r7_38 =
1001280e                                                                                  fconvert.t(var_180_1)
10012812                                                                              var_16c_1 = var_178_1
10012832                                                                              var_180_1 = var_198_1
10012836                                                                              float edx_32 = var_17c_1
1001283d                                                                              var_17c_1 = var_194_1
10012841                                                                              eax_47 = var_178_1
10012848                                                                              var_178_1 = var_190_1
1001284c                                                                              var_198_1 = fconvert.s(x87_r7_38)
10012850                                                                              var_194_1 = edx_32
10012854                                                                              var_190_1 = eax_47
10012854                                                                          
10012858                                                                          long double x87_r7_39 =
10012858                                                                              fconvert.t(var_1c0_1)
1001285c                                                                          long double temp19_1 =
1001285c                                                                              fconvert.t(var_1b8_1)
1001285c                                                                          x87_r7_39 - temp19_1
10012860                                                                          eax_47.w =
10012860                                                                              (x87_r7_39 < temp19_1 ? 1 : 0) << 8 | (
10012860                                                                              is_unordered.t(x87_r7_39, temp19_1) ? 1
10012860                                                                              : 0) << 0xa
10012860                                                                              | (x87_r7_39 == temp19_1 ? 1 : 0)
10012860                                                                              << 0xe
10012860                                                                          
10012865                                                                          if ((eax_47:1.b & 0x41) == 0)
1001286b                                                                              long double x87_r7_40 =
1001286b                                                                                  fconvert.t(var_1b4_1)
1001286f                                                                              long double temp21_1 =
1001286f                                                                                  fconvert.t(var_1bc_1)
1001286f                                                                              x87_r7_40 - temp21_1
10012873                                                                              eax_47.w =
10012873                                                                                  (x87_r7_40 < temp21_1 ? 1 : 0) << 8 | (
10012873                                                                                  is_unordered.t(x87_r7_40, temp21_1) ? 1
10012873                                                                                  : 0) << 0xa
10012873                                                                                  | (x87_r7_40 == temp21_1 ? 1 : 0)
10012873                                                                                  << 0xe
10012873                                                                              
10012878                                                                              if ((eax_47:1.b & 0x41) == 0)
10012882                                                                                  long double x87_r7_42 =
10012882                                                                                      fconvert.t(var_1bc_1) - fconvert.t(0.5)
10012888                                                                                  long double x87_r6_41 =
10012888                                                                                      fconvert.t(var_1b8_1)
1001288c                                                                                  x87_r6_41 - x87_r7_42
1001288e                                                                                  eax_47.w =
1001288e                                                                                      (x87_r6_41 < x87_r7_42 ? 1 : 0) << 8 | (
1001288e                                                                                      is_unordered.t(x87_r6_41, x87_r7_42) ? 1
1001288e                                                                                      : 0) << 0xa
1001288e                                                                                      | (x87_r6_41 == x87_r7_42 ? 1 : 0)
1001288e                                                                                      << 0xe
10012893                                                                                  float var_1c0_2
10012893                                                                                  float var_168_1
10012893                                                                                  float var_164_1
10012893                                                                                  float var_160_1
10012893                                                                                  float var_15c_1
10012893                                                                                  float var_158_1
10012893                                                                                  float var_154_1
10012893                                                                                  float var_118_1
10012893                                                                                  float var_114_1
10012893                                                                                  float var_110_1
10012893                                                                                  float var_10c_1
10012893                                                                                  float var_108_1
10012893                                                                                  float var_104_1
10012893                                                                                  long double x87_r7_48
10012893                                                                                  
10012893                                                                                  if ((eax_47:1.b & 0x41) != 0)
10012978                                                                                      label_10012978:
10012978                                                                                      long double x87_r7_49 =
10012978                                                                                          fconvert.t(var_1bc_1)
10012980                                                                                      long double x87_r6_50 =
10012980                                                                                          fconvert.t(var_1b8_1)
10012980                                                                                          - fconvert.t(0.10000000000000001)
10012986                                                                                      x87_r6_50 - x87_r7_49
10012988                                                                                      eax_47.w =
10012988                                                                                          (x87_r6_50 < x87_r7_49 ? 1 : 0) << 8 | (
10012988                                                                                          is_unordered.t(x87_r6_50, x87_r7_49) ? 1
10012988                                                                                          : 0) << 0xa
10012988                                                                                          | (x87_r6_50 == x87_r7_49 ? 1 : 0)
10012988                                                                                          << 0xe
1001298d                                                                                      float eax_58
1001298d                                                                                      
1001298d                                                                                      if ((eax_47:1.b & 1) == 0)
100129e8                                                                                          label_100129e8:
100129e8                                                                                          long double x87_r7_52 =
100129e8                                                                                              fconvert.t(var_1bc_1)
100129ec                                                                                          long double temp22_1 =
100129ec                                                                                              fconvert.t(var_1b8_1)
100129ec                                                                                          x87_r7_52 - temp22_1
100129f0                                                                                          eax_47.w =
100129f0                                                                                              (x87_r7_52 < temp22_1 ? 1 : 0) << 8 | (
100129f0                                                                                              is_unordered.t(x87_r7_52, temp22_1) ? 1
100129f0                                                                                              : 0) << 0xa
100129f0                                                                                              | (x87_r7_52 == temp22_1 ? 1 : 0)
100129f0                                                                                              << 0xe
100129f0                                                                                          
100129f5                                                                                          if ((eax_47:1.b & 1) == 0)
10012a7b                                                                                              var_104_1 = var_19c_1
10012a82                                                                                              var_10c_1 = var_1a4_1
10012a89                                                                                              var_108_1 = var_1a0_1
10012a92                                                                                              var_15c_1 = var_1a4_1
10012a96                                                                                              var_158_1 = var_1a0_1
10012a9a                                                                                              long double x87_r7_63 = (
10012a9a                                                                                                  fconvert.t(var_1bc_1)
10012a9a                                                                                                  - fconvert.t(var_1b8_1)) * (
10012a9a                                                                                                  fconvert.t(var_16c_1)
10012a9a                                                                                                  - fconvert.t(var_174_1)) / (
10012a9a                                                                                                  fconvert.t(var_1b4_1)
10012a9a                                                                                                  - fconvert.t(var_1b8_1))
10012a9a                                                                                                  + fconvert.t(var_174_1)
10012aa2                                                                                              x87_r7_48 =
10012aa2                                                                                                  x87_r7_63 - fconvert.t(var_170_1)
10012aa6                                                                                              eax_58 = fconvert.s(x87_r7_63)
100129f5                                                                                          else
10012a1c                                                                                              var_10c_1 = var_180_1
10012a23                                                                                              var_108_1 = var_17c_1
10012a2a                                                                                              var_15c_1 = var_180_1
10012a2e                                                                                              var_158_1 = var_17c_1
10012a38                                                                                              float var_1a8_1 = fconvert.s((
10012a38                                                                                                  fconvert.t(var_1b8_1)
10012a38                                                                                                  - fconvert.t(var_1bc_1)) * (
10012a38                                                                                                  fconvert.t(var_150_1)
10012a38                                                                                                  - fconvert.t(var_170_1)) / (
10012a38                                                                                                  fconvert.t(var_1c0_1)
10012a38                                                                                                  - fconvert.t(var_1bc_1))
10012a38                                                                                                  + fconvert.t(var_170_1))
10012a44                                                                                              x87_r7_48 = fconvert.t(var_174_1)
10012a44                                                                                                  - fconvert.t(var_1a8_1)
10012a48                                                                                              var_104_1 = var_1a8_1
10012a4f                                                                                              eax_58 = var_178_1
1001298d                                                                                      else
1001298f                                                                                          long double x87_r7_50 =
1001298f                                                                                              fconvert.t(var_1bc_1)
10012997                                                                                          long double x87_r6_52 =
10012997                                                                                              fconvert.t(var_1b8_1)
10012997                                                                                              + fconvert.t(0.10000000000000001)
1001299d                                                                                          x87_r6_52 - x87_r7_50
1001299f                                                                                          eax_47.w =
1001299f                                                                                              (x87_r6_52 < x87_r7_50 ? 1 : 0) << 8 | (
1001299f                                                                                              is_unordered.t(x87_r6_52, x87_r7_50) ? 1
1001299f                                                                                              : 0) << 0xa
1001299f                                                                                              | (x87_r6_52 == x87_r7_50 ? 1 : 0)
1001299f                                                                                              << 0xe
1001299f                                                                                          
100129a4                                                                                          if ((eax_47:1.b & 0x41) != 0)
100129a4                                                                                              goto label_100129e8
100129a4                                                                                          
100129b2                                                                                          var_10c_1 = var_1a4_1
100129c1                                                                                          var_108_1 = var_1a0_1
100129cc                                                                                          var_104_1 = var_19c_1
100129d3                                                                                          x87_r7_48 = fconvert.t(var_174_1)
100129d3                                                                                              - fconvert.t(var_170_1)
100129d7                                                                                          eax_58 = var_178_1
100129db                                                                                          var_15c_1 = var_180_1
100129df                                                                                          var_158_1 = var_17c_1
100129df                                                                                      
10012aaa                                                                                      long double x87_r6_61 =
10012aaa                                                                                          fconvert.t(var_1c0_1)
10012ab2                                                                                      long double x87_r5_18 =
10012ab2                                                                                          fconvert.t(var_1b4_1)
10012ab2                                                                                          - fconvert.t(0.10000000000000001)
10012ab8                                                                                      var_154_1 = eax_58
10012abc                                                                                      x87_r5_18 - x87_r6_61
10012abe                                                                                      eax_58.w =
10012abe                                                                                          (x87_r5_18 < x87_r6_61 ? 1 : 0) << 8 | (
10012abe                                                                                          is_unordered.t(x87_r5_18, x87_r6_61) ? 1
10012abe                                                                                          : 0) << 0xa
10012abe                                                                                          | (x87_r5_18 == x87_r6_61 ? 1 : 0)
10012abe                                                                                          << 0xe | 0x3800
10012abe                                                                                      
10012ac3                                                                                      if ((eax_58:1.b & 1) == 0)
10012b29                                                                                          label_10012b29:
10012b29                                                                                          long double x87_r6_65 =
10012b29                                                                                              fconvert.t(var_1c0_1)
10012b2d                                                                                          long double temp23_1 =
10012b2d                                                                                              fconvert.t(var_1b4_1)
10012b2d                                                                                          x87_r6_65 - temp23_1
10012b31                                                                                          eax_58.w =
10012b31                                                                                              (x87_r6_65 < temp23_1 ? 1 : 0) << 8 | (
10012b31                                                                                              is_unordered.t(x87_r6_65, temp23_1) ? 1
10012b31                                                                                              : 0) << 0xa
10012b31                                                                                              | (x87_r6_65 == temp23_1 ? 1 : 0)
10012b31                                                                                              << 0xe | 0x3800
10012b31                                                                                          
10012b36                                                                                          if ((eax_58:1.b & 1) == 0)
10012bb9                                                                                              var_118_1 = var_198_1
10012bc2                                                                                              var_114_1 = var_194_1
10012bd1                                                                                              var_168_1 = var_198_1
10012bd5                                                                                              var_164_1 = var_194_1
10012bd9                                                                                              var_160_1 = var_190_1
10012bdd                                                                                              long double x87_r6_75 = (
10012bdd                                                                                                  fconvert.t(var_1b4_1)
10012bdd                                                                                                  - fconvert.t(var_1bc_1)) * (
10012bdd                                                                                                  fconvert.t(var_150_1)
10012bdd                                                                                                  - fconvert.t(var_170_1)) / (
10012bdd                                                                                                  fconvert.t(var_1c0_1)
10012bdd                                                                                                  - fconvert.t(var_1bc_1))
10012bdd                                                                                                  + fconvert.t(var_170_1)
10012be7                                                                                              var_1c0_2 = fconvert.s(
10012be7                                                                                                  fconvert.t(var_16c_1) - x87_r6_75)
10012beb                                                                                              var_110_1 = fconvert.s(x87_r6_75)
10012b36                                                                                          else
10012b5e                                                                                              var_118_1 = var_18c_1
10012b65                                                                                              var_114_1 = var_188_1
10012b6c                                                                                              var_110_1 = var_184_1
10012b75                                                                                              var_168_1 = var_18c_1
10012b79                                                                                              var_164_1 = var_188_1
10012b7d                                                                                              long double x87_r6_70 = (
10012b7d                                                                                                  fconvert.t(var_1c0_1)
10012b7d                                                                                                  - fconvert.t(var_1b8_1)) * (
10012b7d                                                                                                  fconvert.t(var_16c_1)
10012b7d                                                                                                  - fconvert.t(var_174_1)) / (
10012b7d                                                                                                  fconvert.t(var_1b4_1)
10012b7d                                                                                                  - fconvert.t(var_1b8_1))
10012b7d                                                                                                  + fconvert.t(var_174_1)
10012b8a                                                                                              var_1c0_2 = fconvert.s(x87_r6_70
10012b8a                                                                                                  - fconvert.t(var_150_1))
10012b8e                                                                                              var_160_1 = fconvert.s(x87_r6_70)
10012ac3                                                                                      else
10012ac5                                                                                          long double x87_r6_62 =
10012ac5                                                                                              fconvert.t(var_1c0_1)
10012acd                                                                                          long double x87_r5_20 =
10012acd                                                                                              fconvert.t(var_1b4_1)
10012acd                                                                                              + fconvert.t(0.10000000000000001)
10012ad3                                                                                          x87_r5_20 - x87_r6_62
10012ad5                                                                                          eax_58.w =
10012ad5                                                                                              (x87_r5_20 < x87_r6_62 ? 1 : 0) << 8 | (
10012ad5                                                                                              is_unordered.t(x87_r5_20, x87_r6_62) ? 1
10012ad5                                                                                              : 0) << 0xa
10012ad5                                                                                              | (x87_r5_20 == x87_r6_62 ? 1 : 0)
10012ad5                                                                                              << 0xe | 0x3800
10012ad5                                                                                          
10012ada                                                                                          if ((eax_58:1.b & 0x41) != 0)
10012ada                                                                                              goto label_10012b29
10012ada                                                                                          
10012af3                                                                                          var_118_1 = var_18c_1
10012afe                                                                                          var_114_1 = var_188_1
10012b09                                                                                          var_110_1 = var_184_1
10012b14                                                                                          var_168_1 = var_198_1
10012b18                                                                                          var_1c0_2 = fconvert.s(
10012b18                                                                                              fconvert.t(var_16c_1)
10012b18                                                                                              - fconvert.t(var_150_1))
10012b1c                                                                                          var_164_1 = var_194_1
10012b20                                                                                          var_160_1 = var_190_1
10012893                                                                                  else
10012899                                                                                      long double x87_r7_43 =
10012899                                                                                          fconvert.t(var_1b4_1)
100128a1                                                                                      long double x87_r6_43 =
100128a1                                                                                          fconvert.t(var_1c0_1) + fconvert.t(0.5)
100128a7                                                                                      x87_r6_43 - x87_r7_43
100128a9                                                                                      eax_47.w =
100128a9                                                                                          (x87_r6_43 < x87_r7_43 ? 1 : 0) << 8 | (
100128a9                                                                                          is_unordered.t(x87_r6_43, x87_r7_43) ? 1
100128a9                                                                                          : 0) << 0xa
100128a9                                                                                          | (x87_r6_43 == x87_r7_43 ? 1 : 0)
100128a9                                                                                          << 0xe
100128a9                                                                                      
100128ae                                                                                      if ((eax_47:1.b & 0x41) != 0)
100128ae                                                                                          goto label_10012978
100128ae                                                                                      
100128b8                                                                                      long double x87_r7_45 =
100128b8                                                                                          fconvert.t(var_1b8_1) - fconvert.t(0.5)
100128be                                                                                      long double x87_r6_44 =
100128be                                                                                          fconvert.t(var_1bc_1)
100128c2                                                                                      x87_r6_44 - x87_r7_45
100128c4                                                                                      eax_47.w =
100128c4                                                                                          (x87_r6_44 < x87_r7_45 ? 1 : 0) << 8 | (
100128c4                                                                                          is_unordered.t(x87_r6_44, x87_r7_45) ? 1
100128c4                                                                                          : 0) << 0xa
100128c4                                                                                          | (x87_r6_44 == x87_r7_45 ? 1 : 0)
100128c4                                                                                          << 0xe
100128c4                                                                                      
100128c9                                                                                      if ((eax_47:1.b & 0x41) != 0)
100128c9                                                                                          goto label_10012978
100128c9                                                                                      
100128cf                                                                                      long double x87_r7_46 =
100128cf                                                                                          fconvert.t(var_1c0_1)
100128d7                                                                                      long double x87_r6_46 =
100128d7                                                                                          fconvert.t(var_1b4_1) + fconvert.t(0.5)
100128dd                                                                                      x87_r6_46 - x87_r7_46
100128df                                                                                      eax_47.w =
100128df                                                                                          (x87_r6_46 < x87_r7_46 ? 1 : 0) << 8 | (
100128df                                                                                          is_unordered.t(x87_r6_46, x87_r7_46) ? 1
100128df                                                                                          : 0) << 0xa
100128df                                                                                          | (x87_r6_46 == x87_r7_46 ? 1 : 0)
100128df                                                                                          << 0xe
100128df                                                                                      
100128e4                                                                                      if ((eax_47:1.b & 0x41) != 0)
100128e4                                                                                          goto label_10012978
100128e4                                                                                      
100128fa                                                                                      var_10c_1 = var_1a4_1
10012901                                                                                      x87_r7_48 = fconvert.t(var_174_1)
10012901                                                                                          - fconvert.t(var_170_1)
10012909                                                                                      var_108_1 = var_1a0_1
10012914                                                                                      var_104_1 = var_19c_1
1001291f                                                                                      var_118_1 = var_18c_1
10012935                                                                                      var_114_1 = var_188_1
10012940                                                                                      var_110_1 = var_184_1
1001294b                                                                                      var_15c_1 = var_180_1
10012953                                                                                      var_158_1 = var_17c_1
1001295b                                                                                      var_154_1 = var_178_1
10012963                                                                                      var_168_1 = var_198_1
10012967                                                                                      var_1c0_2 = fconvert.s(
10012967                                                                                          fconvert.t(var_16c_1)
10012967                                                                                          - fconvert.t(var_150_1))
1001296b                                                                                      var_164_1 = var_194_1
1001296f                                                                                      var_160_1 = var_190_1
1001296f                                                                                  
10012bf6                                                                                  long double x87_r6_77 =
10012bf6                                                                                      fconvert.t(var_1c0_2) - fconvert.t(1f)
10012bfe                                                                                  x87_r7_48 - x87_r6_77
10012c00                                                                                  float eax_56
10012c00                                                                                  eax_56.w =
10012c00                                                                                      (x87_r7_48 < x87_r6_77 ? 1 : 0) << 8 | (
10012c00                                                                                      is_unordered.t(x87_r7_48, x87_r6_77) ? 1
10012c00                                                                                      : 0) << 0xa
10012c00                                                                                      | (x87_r7_48 == x87_r6_77 ? 1 : 0)
10012c00                                                                                      << 0xe | 0x3800
10012c05                                                                                  float var_148_1
10012c05                                                                                  float var_144_1
10012c05                                                                                  float var_13c_1
10012c05                                                                                  float var_138_1
10012c05                                                                                  
10012c05                                                                                  if ((eax_56:1.b & 0x41) != 0)
10012cdf                                                                                      label_10012cdf:
10012cdf                                                                                      long double temp24_1 =
10012cdf                                                                                          fconvert.t(var_1c0_2)
10012cdf                                                                                      x87_r7_48 - temp24_1
10012ce3                                                                                      eax_56.w =
10012ce3                                                                                          (x87_r7_48 < temp24_1 ? 1 : 0) << 8 | (
10012ce3                                                                                          is_unordered.t(x87_r7_48, temp24_1) ? 1
10012ce3                                                                                          : 0) << 0xa
10012ce3                                                                                          | (x87_r7_48 == temp24_1 ? 1 : 0)
10012ce3                                                                                          << 0xe | 0x3800
10012ce3                                                                                      
10012ce8                                                                                      if ((eax_56:1.b & 1) == 0)
10012d4d                                                                                          var_1ac_1 = var_1c0_2
10012d58                                                                                          var_14c = var_118_1
10012d63                                                                                          var_148_1 = var_114_1
10012d6e                                                                                          var_144_1 = var_110_1
10012d79                                                                                          var_140 = var_168_1
10012d82                                                                                          var_13c_1 = var_164_1
10012d89                                                                                          var_138_1 = var_160_1
10012ce8                                                                                      else
10012cff                                                                                          var_14c = var_10c_1
10012d0a                                                                                          var_148_1 = var_108_1
10012d15                                                                                          var_144_1 = var_104_1
10012d20                                                                                          var_140 = var_15c_1
10012d27                                                                                          var_1ac_1 = fconvert.s(x87_r7_48)
10012d2b                                                                                          var_13c_1 = var_158_1
10012d32                                                                                          var_138_1 = var_154_1
10012c05                                                                                  else
10012c0f                                                                                      long double x87_r6_79 =
10012c0f                                                                                          fconvert.t(var_1c0_2) + fconvert.t(1f)
10012c17                                                                                      x87_r7_48 - x87_r6_79
10012c19                                                                                      eax_56.w =
10012c19                                                                                          (x87_r7_48 < x87_r6_79 ? 1 : 0) << 8 | (
10012c19                                                                                          is_unordered.t(x87_r7_48, x87_r6_79) ? 1
10012c19                                                                                          : 0) << 0xa
10012c19                                                                                          | (x87_r7_48 == x87_r6_79 ? 1 : 0)
10012c19                                                                                          << 0xe | 0x3800
10012c19                                                                                      
10012c1e                                                                                      if ((eax_56:1.b & 1) == 0)
10012c1e                                                                                          goto label_10012cdf
10012c1e                                                                                      
10012c24                                                                                      var_1ac_1 = fconvert.s(x87_r7_48)
10012c4b                                                                                      var_14c = fconvert.s(
10012c4b                                                                                          fconvert.t(var_118_1)
10012c4b                                                                                          + fconvert.t(var_10c_1))
10012c60                                                                                      var_148_1 = fconvert.s(
10012c60                                                                                          fconvert.t(var_114_1)
10012c60                                                                                          + fconvert.t(var_108_1))
10012c75                                                                                      var_144_1 = fconvert.s(
10012c75                                                                                          fconvert.t(var_110_1)
10012c75                                                                                          + fconvert.t(var_104_1))
10012c7c                                                                                      j_sub_10043570(&var_14c, 0.5f, &var_14c)
10012ca1                                                                                      var_140 = fconvert.s(
10012ca1                                                                                          fconvert.t(var_168_1)
10012ca1                                                                                          + fconvert.t(var_15c_1))
10012cb6                                                                                      var_13c_1 = fconvert.s(
10012cb6                                                                                          fconvert.t(var_164_1)
10012cb6                                                                                          + fconvert.t(var_158_1))
10012ccb                                                                                      var_138_1 = fconvert.s(
10012ccb                                                                                          fconvert.t(var_160_1)
10012ccb                                                                                          + fconvert.t(var_154_1))
10012cd2                                                                                      j_sub_10043570(&var_140, 0.5f, &var_140)
10012cd2                                                                                  
10012da0                                                                                  float var_6c = fconvert.s(
10012da0                                                                                      fconvert.t(var_168_1)
10012da0                                                                                      - fconvert.t(var_15c_1))
10012daf                                                                                  float var_68_1 = fconvert.s(
10012daf                                                                                      fconvert.t(var_164_1)
10012daf                                                                                      - fconvert.t(var_158_1))
10012dc1                                                                                  float var_64_1 = fconvert.s(
10012dc1                                                                                      fconvert.t(var_160_1)
10012dc1                                                                                      - fconvert.t(var_154_1))
10012dc8                                                                                  int16_t eax_68
10012dc8                                                                                  long double st0_2
10012dc8                                                                                  eax_68, st0_2 = j_sub_10043500(&var_6c)
10012dd7                                                                                  float var_1a8_3 = fconvert.s(st0_2)
10012ddb                                                                                  eax_68.b = var_b8_1[1].b
10012dde                                                                                  long double x87_r7_83 =
10012dde                                                                                      fconvert.t(var_1ac_1)
10012dde                                                                                  
10012de4                                                                                  if ((eax_68.b & 4) == 0)
10012ecc                                                                                      long double temp25_1 =
10012ecc                                                                                          fconvert.t(var_128_1)
10012ecc                                                                                      x87_r7_83 - temp25_1
10012ecc                                                                                      
10012ed8                                                                                      if (((
10012ed8                                                                                              (x87_r7_83 < temp25_1 ? 1 : 0) << 8 | (
10012ed8                                                                                              is_unordered.t(x87_r7_83, temp25_1) ? 1
10012ed8                                                                                              : 0) << 0xa
10012ed8                                                                                              | (x87_r7_83 == temp25_1 ? 1 : 0)
10012ed8                                                                                              << 0xe):1.b & 1) != 0)
10012f1b                                                                                          label_10012f1b:
10012f1b                                                                                          var_128_1 = var_1ac_1
10012f29                                                                                          var_bc_1 = var_1a8_3
10012f37                                                                                          var_90 = var_14c
10012f45                                                                                          var_8c = var_148_1
10012f53                                                                                          var_88 = var_144_1
10012f61                                                                                          var_78 = var_124
10012f6f                                                                                          float var_74_1 = var_120
10012f7d                                                                                          float var_70_1 = var_11c
10012f8b                                                                                          var_e0_1 = 1
10012f96                                                                                          var_f0 = esi_4
10012f9d                                                                                          var_84 = var_140
10012fa4                                                                                          float var_80_1 = var_13c_1
10012fab                                                                                          float var_7c_1 = var_138_1
10012ed8                                                                                      else
10012ee1                                                                                          long double x87_r7_88 =
10012ee1                                                                                              fconvert.t(var_128_1) + fconvert.t(1f)
10012ee7                                                                                          long double temp27_1 =
10012ee7                                                                                              fconvert.t(var_1ac_1)
10012ee7                                                                                          x87_r7_88 - temp27_1
10012ee7                                                                                          
10012ef0                                                                                          if (((
10012ef0                                                                                                  (x87_r7_88 < temp27_1 ? 1 : 0) << 8 | (
10012ef0                                                                                                  is_unordered.t(x87_r7_88, temp27_1) ? 1
10012ef0                                                                                                  : 0) << 0xa
10012ef0                                                                                                  | (x87_r7_88 == temp27_1 ? 1 : 0)
10012ef0                                                                                                  << 0xe):1.b & 0x41) == 0)
10012ef6                                                                                              long double x87_r7_89 =
10012ef6                                                                                                  fconvert.t(var_1a8_3)
10012efa                                                                                              long double temp29_1 =
10012efa                                                                                                  fconvert.t(var_bc_1)
10012efa                                                                                              x87_r7_89 - temp29_1
10012efa                                                                                              
10012f06                                                                                              if (((
10012f06                                                                                                      (x87_r7_89 < temp29_1 ? 1 : 0) << 8 | (
10012f06                                                                                                      is_unordered.t(x87_r7_89, temp29_1) ? 1
10012f06                                                                                                      : 0) << 0xa
10012f06                                                                                                      | (x87_r7_89 == temp29_1 ? 1 : 0)
10012f06                                                                                                      << 0xe):1.b & 0x41) == 0)
10012f06                                                                                                  goto label_10012f1b
10012de4                                                                                  else
10012dea                                                                                      long double temp26_1 =
10012dea                                                                                          fconvert.t(var_1b0_1)
10012dea                                                                                      x87_r7_83 - temp26_1
10012dea                                                                                      
10012df3                                                                                      if (((
10012df3                                                                                              (x87_r7_83 < temp26_1 ? 1 : 0) << 8 | (
10012df3                                                                                              is_unordered.t(x87_r7_83, temp26_1) ? 1
10012df3                                                                                              : 0) << 0xa
10012df3                                                                                              | (x87_r7_83 == temp26_1 ? 1 : 0)
10012df3                                                                                              << 0xe):1.b & 1) != 0)
10012e33                                                                                          label_10012e33:
10012e33                                                                                          var_1b0_1 = var_1ac_1
10012e3e                                                                                          var_c0_1 = var_1a8_3
10012e4c                                                                                          var_cc = var_14c
10012e5a                                                                                          var_c8 = var_148_1
10012e68                                                                                          var_c4 = var_144_1
10012e76                                                                                          var_d8 = var_124
10012e84                                                                                          float var_d4_1 = var_120
10012e92                                                                                          float var_d0_1 = var_11c
10012ea0                                                                                          var_e8_1 = 1
10012eab                                                                                          var_f4 = esi_4
10012eb2                                                                                          var_100 = var_140
10012eb9                                                                                          var_fc = var_13c_1
10012ec0                                                                                          var_f8 = var_138_1
10012df3                                                                                      else
10012df9                                                                                          long double x87_r7_85 =
10012df9                                                                                              fconvert.t(var_1b0_1) + fconvert.t(1f)
10012dff                                                                                          long double temp28_1 =
10012dff                                                                                              fconvert.t(var_1ac_1)
10012dff                                                                                          x87_r7_85 - temp28_1
10012dff                                                                                          
10012e08                                                                                          if (((
10012e08                                                                                                  (x87_r7_85 < temp28_1 ? 1 : 0) << 8 | (
10012e08                                                                                                  is_unordered.t(x87_r7_85, temp28_1) ? 1
10012e08                                                                                                  : 0) << 0xa
10012e08                                                                                                  | (x87_r7_85 == temp28_1 ? 1 : 0)
10012e08                                                                                                  << 0xe):1.b & 0x41) == 0)
10012e0e                                                                                              long double x87_r7_86 =
10012e0e                                                                                                  fconvert.t(var_1a8_3)
10012e12                                                                                              long double temp30_1 =
10012e12                                                                                                  fconvert.t(var_c0_1)
10012e12                                                                                              x87_r7_86 - temp30_1
10012e12                                                                                              
10012e1e                                                                                              if (((
10012e1e                                                                                                      (x87_r7_86 < temp30_1 ? 1 : 0) << 8 | (
10012e1e                                                                                                      is_unordered.t(x87_r7_86, temp30_1) ? 1
10012e1e                                                                                                      : 0) << 0xa
10012e1e                                                                                                      | (x87_r7_86 == temp30_1 ? 1 : 0)
10012e1e                                                                                                      << 0xe):1.b & 0x41) == 0)
10012e1e                                                                                                  goto label_10012e33
10012e1e                                                          
10012fb9                                                          k += 1
10012fbc                                                      while (k s< *(edi_8 + 8))
10012fbc                                              
10012fc2                                              eax_28 = edi_4
10012fc9                                              j += 1
10012fcd                                          while (j s< *(eax_28 + 4))
10012fcd                                          
10012fd3                                          ebp_5 = var_b8_1
10012fd3                                      
10012fe5                                      cond:6_1 = var_e4_1 + 1 s< ebp_5[2]
10012fe7                                      var_e4_1 += 1
10012fee                                  while (cond:6_1)
1001237e                          else if (var_94_1 != 0)
10012396                              int32_t edx_6 = data_10066924
1001239c                              int32_t eax_13
1001239c                              eax_13.b = ecx_4 == 0
100123a8                              int32_t ecx_6 = (eax_13 ^ *ebp_5) * 5
100123c8                              long double x87_r7_8 = fconvert.t(var_98)
100123c8                                  * fconvert.t(*(edx_6 + (ecx_6 << 2) + 8))
100123c8                                  + fconvert.t(var_9c)
100123c8                                  * fconvert.t(*(edx_6 + (ecx_6 << 2) + 4))
100123c8                                  + fconvert.t(var_a0)
100123c8                                  * fconvert.t(*(edx_6 + (ecx_6 << 2)))
100123ca                              long double temp2_1 = fconvert.t(0.69999999999999996)
100123ca                              x87_r7_8 - temp2_1
100123d0                              float* eax_15
100123d0                              eax_15.w = (x87_r7_8 < temp2_1 ? 1 : 0) << 8
100123d0                                  | (is_unordered.t(x87_r7_8, temp2_1) ? 1 : 0) << 0xa
100123d0                                  | (x87_r7_8 == temp2_1 ? 1 : 0) << 0xe
100123d0                              
100123d5                              if ((eax_15:1.b & 1) == 0)
100123d5                                  goto label_100123de
100123d5                          
10013002                          i = i_1 + 1
10013006                          i_1 = i
1001300f                      while (i s< *(ebp_3 + 4))
1001300f                      
1001301e                      if (var_e8_1 == 0)
1001315a                          label_1001315a:
1001315c                          int32_t ebx_4
1001315c                          int32_t ebp_7
1001315c                          
1001315c                          if (var_e0_1 == 0)
100132b9                              label_100132b9:
100132b9                              ebx_4 = arg2
100132c0                              ebp_7 = arg1
100132d0                              label_100132d0:
100132d0                              
100132d2                              if (var_e8_1 != 0)
100132d8                                  long double x87_r7_97 = fconvert.t(var_1b0_1)
100132dc                                  long double temp6_1 = fconvert.t(0f)
100132dc                                  x87_r7_97 - temp6_1
100132e2                                  uint32_t eax_104
100132e2                                  eax_104.w = (x87_r7_97 < temp6_1 ? 1 : 0) << 8
100132e2                                      | (is_unordered.t(x87_r7_97, temp6_1) ? 1 : 0) << 0xa
100132e2                                      | (x87_r7_97 == temp6_1 ? 1 : 0) << 0xe
100132e2                                  
100132e7                                  if ((eax_104:1.b & 0x41) != 0)
100133e5                                      label_100133e5:
100133e5                                      long double x87_r7_101 = fconvert.t(var_1b0_1)
100133e9                                      long double temp8_1 = fconvert.t(0f)
100133e9                                      x87_r7_101 - temp8_1
100133ef                                      eax_104.w = (x87_r7_101 < temp8_1 ? 1 : 0) << 8
100133ef                                          | (is_unordered.t(x87_r7_101, temp8_1) ? 1 : 0)
100133ef                                          << 0xa | (x87_r7_101 == temp8_1 ? 1 : 0) << 0xe
100133ef                                      
100133f4                                      if ((eax_104:1.b & 1) != 0)
10013403                                          long double x87_r7_103 =
10013403                                              fneg(fconvert.t(*(data_1006405c + 0x10)))
10013405                                          long double temp11_1 = fconvert.t(var_1b0_1)
10013405                                          x87_r7_103 - temp11_1
10013409                                          eax_104.w = (x87_r7_103 < temp11_1 ? 1 : 0) << 8
10013409                                              | (is_unordered.t(x87_r7_103, temp11_1) ? 1
10013409                                              : 0) << 0xa
10013409                                              | (x87_r7_103 == temp11_1 ? 1 : 0) << 0xe
10013409                                          
1001340e                                          if ((eax_104:1.b & 1) == 0)
100134bc                                              long double x87_r7_104 =
100134bc                                                  float.t(neg.d(j_sub_10011520()))
100134c3                                              long double temp14_1 = fconvert.t(var_1b0_1)
100134c3                                              x87_r7_104 - temp14_1
100134c7                                              int32_t eax_115
100134c7                                              eax_115.w =
100134c7                                                  (x87_r7_104 < temp14_1 ? 1 : 0) << 8 | (
100134c7                                                  is_unordered.t(x87_r7_104, temp14_1) ? 1
100134c7                                                  : 0) << 0xa
100134c7                                                  | (x87_r7_104 == temp14_1 ? 1 : 0) << 0xe
100134cc                                              uint32_t eax_116
100134cc                                              
100134cc                                              if ((eax_115:1.b & 1) == 0)
100134cf                                                  eax_116 = j_sub_10011610(ebx_4)
100134cf                                              
100134d9                                              if ((eax_115:1.b & 1) != 0 || eax_116 != 0)
100134fc                                                  j_sub_10043380(&var_100, 2f, &var_d8, 
100134fc                                                      &var_100)
10013508                                                  float edx_72 = var_100
1001351d                                                  float var_144_2 = var_c4
1001352a                                                  var_14c = edx_72
10013531                                                  var_140 = edx_72
10013541                                                  float var_148_2 = var_fc
10013548                                                  float var_13c_2 = var_fc
1001354f                                                  float var_138_2 = fconvert.s(
1001354f                                                      fconvert.t(var_f8) + fconvert.t(4f))
1001357f                                                  int32_t var_48
1001357f                                                  void var_24
1001357f                                                  __builtin_memcpy(dest: &var_48, 
1001357f                                                      src: j_sub_1001b260(&var_24, &var_14c, 
1001357f                                                          &var_140, 2, 0xffffffff), 
1001357f                                                      n: 0x24)
1001357f                                                  
1001358a                                                  if (var_48 == 0)
10013590                                                      float var_44
10013590                                                      long double x87_r7_107 =
10013590                                                          fconvert.t(var_44)
10013597                                                      long double temp20_1 = fconvert.t(1.0)
10013597                                                      x87_r7_107 - temp20_1
1001359d                                                      int32_t eax_119
1001359d                                                      eax_119.w =
1001359d                                                          (x87_r7_107 < temp20_1 ? 1 : 0) << 8 | (
1001359d                                                          is_unordered.t(x87_r7_107, temp20_1) ? 1
1001359d                                                          : 0) << 0xa
1001359d                                                          | (x87_r7_107 == temp20_1 ? 1 : 0)
1001359d                                                          << 0xe
1001359d                                                      
100135a2                                                      if ((eax_119:1.b & 1) == 0)
100135bd                                                          float var_38
100135bd                                                          float var_38_1 = fconvert.s(
100135bd                                                              fconvert.t(var_38) + fconvert.t(1f))
100135ce                                                          float var_40
100135ce                                                          
100135ce                                                          if (j_sub_1001ae60(&var_40) == ebx_4)
100135d4                                                              int32_t* eax_121 = j_sub_10010ff0()
100135d4                                                              
100135db                                                              if (eax_121 != 0)
100135e8                                                                  *eax_121 = ebx_4
100135ea                                                                  eax_121[1] = 0
100135f1                                                                  eax_121[2] = var_f4
100135fc                                                                  eax_121[3] = var_cc
10013606                                                                  eax_121[4] = var_c8
10013610                                                                  eax_121[5] = var_c4
1001361a                                                                  eax_121[6] = var_100
10013624                                                                  eax_121[7] = var_fc
1001362e                                                                  eax_121[8] = var_f8
10013631                                                                  eax_121[9] = 7
10013638                                                                  eax_121[0xa].w = 0x64
10013648                                                                  eax_121[0xb] =
10013648                                                                      *(data_1006675c + (ebp_7 << 2))
10013651                                                                  *(data_1006675c + (ebp_7 << 2)) =
10013651                                                                      eax_121
1001365b                                                                  data_100667b8 += 1
1001366c                                                                  return 
1001340e                                          else
10013414                                              int32_t* eax_111 = j_sub_10010ff0()
10013414                                              
1001341d                                              if (eax_111 != 0)
10013434                                                  eax_111[2] = var_f4
10013446                                                  *eax_111 = ebx_4
10013448                                                  eax_111[1] = 0
1001344b                                                  j_sub_10043380(&var_cc, 0.100000001f, 
1001344b                                                      &var_d8, &eax_111[3])
10013469                                                  j_sub_10043380(&var_100, 5f, &var_d8, 
10013469                                                      &eax_111[6])
10013473                                                  eax_111[9] = 2
1001347a                                                  eax_111[0xa].w = 1
1001348a                                                  eax_111[0xb] =
1001348a                                                      *(data_1006675c + (ebp_7 << 2))
10013494                                                  *(data_1006675c + (ebp_7 << 2)) = eax_111
100134a0                                                  data_100667c4 += 1
100134ad                                                  return 
100132e7                                  else
100132f3                                      long double x87_r7_98 = fconvert.t(var_1b0_1)
100132f7                                      long double temp9_1 =
100132f7                                          fconvert.t(*(data_10064060 + 0x10))
100132f7                                      x87_r7_98 - temp9_1
100132fa                                      eax_104.w = (x87_r7_98 < temp9_1 ? 1 : 0) << 8
100132fa                                          | (is_unordered.t(x87_r7_98, temp9_1) ? 1 : 0)
100132fa                                          << 0xa | (x87_r7_98 == temp9_1 ? 1 : 0) << 0xe
100132fa                                      
100132ff                                      if ((eax_104:1.b & 1) == 0)
100132ff                                          goto label_100133e5
100132ff                                      
1001330c                                      if (var_e0_1 != 0)
10013312                                          long double x87_r7_100 =
10013312                                              fconvert.t(var_1b0_1) - fconvert.t(var_128_1)
10013319                                          long double temp15_1 = fconvert.t(16f)
10013319                                          x87_r7_100 - temp15_1
1001331f                                          eax_104.w = (x87_r7_100 < temp15_1 ? 1 : 0) << 8
1001331f                                              | (is_unordered.t(x87_r7_100, temp15_1) ? 1
1001331f                                              : 0) << 0xa
1001331f                                              | (x87_r7_100 == temp15_1 ? 1 : 0) << 0xe
1001331f                                      
10013324                                      if (var_e0_1 != 0 && (eax_104:1.b & 1) == 0)
10013324                                          goto label_100133e5
10013324                                      
10013335                                      if (j_sub_100115d0(ebp_7) != 0)
10013335                                          goto label_100133e5
10013335                                      
10013346                                      if (j_sub_100115d0(ebx_4) != 0)
10013346                                          goto label_100133e5
10013346                                      
1001334c                                      int32_t* eax_105 = j_sub_10010ff0()
1001334c                                      
10013355                                      if (eax_105 != 0)
1001336c                                          eax_105[2] = var_f4
1001337e                                          *eax_105 = ebx_4
10013380                                          eax_105[1] = 0
10013383                                          j_sub_10043380(&var_cc, 0.100000001f, &var_d8, 
10013383                                              &eax_105[3])
100133a1                                          j_sub_10043380(&var_100, 5f, &var_d8, &eax_105[6])
100133a6                                          eax_105[9] = 4
100133ad                                          eax_105[0xa].w = 0x190
100133c0                                          eax_105[0xb] = *(data_1006675c + (ebp_7 << 2))
100133c8                                          *(data_1006675c + (ebp_7 << 2)) = eax_105
100133d2                                          data_100667a0 += 1
100133e4                                          return 
1001315c                          else
1001317f                              float var_60
1001317f                              j_sub_10043380(&var_84, -2f, &var_78, &var_60)
1001319c                              float var_58
1001319c                              float var_58_1 = fconvert.s(fconvert.t(var_58)
1001319c                                  - fconvert.t(*(data_1006406c + 0x10)))
100131a3                              int32_t eax_94 = j_sub_1001ae60(&var_60)
100131a8                              int32_t ecx_57 = data_10066954
100131a8                              
100131bf                              if ((*(ecx_57 + eax_94 * 0x1c + 4) & 4) == 0)
100131bf                                  goto label_100132b9
100131bf                              
100131cd                              long double x87_r7_96 =
100131cd                                  fconvert.t(*(data_1006406c + 0x10)) + fconvert.t(24f)
100131d3                              long double temp5_1 = fconvert.t(var_128_1)
100131d3                              x87_r7_96 - temp5_1
100131da                              void* eax_95
100131da                              eax_95.w = (x87_r7_96 < temp5_1 ? 1 : 0) << 8
100131da                                  | (is_unordered.t(x87_r7_96, temp5_1) ? 1 : 0) << 0xa
100131da                                  | (x87_r7_96 == temp5_1 ? 1 : 0) << 0xe
100131da                              
100131df                              if ((eax_95:1.b & 0x41) != 0)
100131df                                  goto label_100132b9
100131df                              
100131e5                              ebp_7 = arg1
100131ec                              ebx_4 = arg2
100131ec                              
10013215                              if ((*(ecx_57 + ebp_7 * 0x1c + 8) & 2) == 0
10013215                                      || (*(ecx_57 + ebx_4 * 0x1c + 8) & 2) == 0)
10013201                                  goto label_100132d0
10013201                              
1001321b                              int32_t* eax_98 = j_sub_10010ff0()
1001321b                              
10013224                              if (eax_98 != 0)
1001323f                                  eax_98[2] = var_f0
10013249                                  eax_98[3] = var_90
1001324c                                  eax_98[4] = var_8c
10013259                                  eax_98[5] = var_88
1001326b                                  *eax_98 = ebx_4
1001326d                                  eax_98[1] = 0
10013274                                  j_sub_10043380(&var_84, 15f, &var_78, &eax_98[6])
10013279                                  eax_98[9] = 9
10013280                                  eax_98[0xa].w = 0x2bc
10013293                                  eax_98[0xb] = *(data_1006675c + (ebp_7 << 2))
1001329c                                  *(data_1006675c + (ebp_7 << 2)) = eax_98
100132a6                                  data_10066794 += 1
100132b8                                  return 
1001301e                      else
10013024                          long double x87_r7_90 = fconvert.t(var_1b0_1)
10013028                          long double temp3_1 = fconvert.t(0f)
10013028                          x87_r7_90 - temp3_1
1001302e                          uint32_t eax_81
1001302e                          eax_81.w = (x87_r7_90 < temp3_1 ? 1 : 0) << 8
1001302e                              | (is_unordered.t(x87_r7_90, temp3_1) ? 1 : 0) << 0xa
1001302e                              | (x87_r7_90 == temp3_1 ? 1 : 0) << 0xe
1001302e                          
10013033                          if ((eax_81:1.b & 1) != 0)
10013033                              goto label_1001315a
10013033                          
1001303f                          long double x87_r7_91 = fconvert.t(var_1b0_1)
10013043                          long double temp4_1 = fconvert.t(*(data_1006405c + 0x10))
10013043                          x87_r7_91 - temp4_1
10013046                          eax_81.w = (x87_r7_91 < temp4_1 ? 1 : 0) << 8
10013046                              | (is_unordered.t(x87_r7_91, temp4_1) ? 1 : 0) << 0xa
10013046                              | (x87_r7_91 == temp4_1 ? 1 : 0) << 0xe
10013046                          
1001304b                          if ((eax_81:1.b & 1) == 0)
1001304b                              goto label_1001315a
1001304b                          
10013051                          int32_t* eax_82 = j_sub_10010ff0()
10013051                          
1001305a                          if (eax_82 != 0)
10013078                              *eax_82 = arg2
10013089                              eax_82[1] = 0
10013090                              eax_82[2] = var_f4
10013093                              j_sub_10043380(&var_cc, 0.100000001f, &var_d8, &eax_82[3])
100130b1                              j_sub_10043380(&var_100, 5f, &var_d8, &eax_82[6])
100130bd                              eax_82[9] = 2
100130c5                              eax_82[0xa].w = 1
100130c5                              
100130d5                              if (j_sub_100115d0(arg1) == 0 && j_sub_100115d0(arg2) != 0)
100130eb                                  eax_82[0xa].w += 0x12c
100130eb                              
100130fc                              eax_82[0xb] = *(data_1006675c + (arg1 << 2))
10013104                              *(data_1006675c + (arg1 << 2)) = eax_82
10013104                              
10013116                              if (j_sub_10011740(&eax_82[3], &eax_82[6]) == 0)
10013118                                  eax_82[0xa].w += 0x190
10013118                              
1001311f                              long double st0_3 = j_sub_10011360(*eax_82)
10013124                              long double temp12 = fconvert.t(500f)
10013124                              st0_3 - temp12
10013124                              
10013132                              if ((((st0_3 < temp12 ? 1 : 0) << 8
10013132                                      | (is_unordered.t(st0_3, temp12) ? 1 : 0) << 0xa
10013132                                      | (st0_3 == temp12 ? 1 : 0) << 0xe):1.b & 1) != 0)
10013134                                  eax_82[0xa].w += 0x190
10013134                              
10013140                              data_100667c0 += 1
10013152                              return 
10013152                  
1001232f                  break

1001367a                                                                                90 90 90 90 90 90                            ......
10013680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100136a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100136c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100136e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100137a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100137c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100137e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100138a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100138c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100138e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100139a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100139c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100139e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10013b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10013ba0    int80_t sub_10013ba0(float* arg1, float* arg2)

10013baf  float var_c = fconvert.s(fconvert.t(*arg2) - fconvert.t(*arg1))
10013bb9  float var_8 = fconvert.s(fconvert.t(arg2[1]) - fconvert.t(arg1[1]))
10013bc8  float var_4 = fconvert.s(fconvert.t(arg2[2]) - fconvert.t(arg1[2]))
10013bd4  return j_sub_10043500(&var_c)

10013bd5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10013be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10013bf0    int32_t sub_10013bf0(float* arg1, float* arg2, float* arg3)

10013c22  long double x87_r3_3 = (fconvert.t(arg1[2]) - fconvert.t(arg3[2]))
10013c22      * (fconvert.t(arg1[2]) - fconvert.t(arg2[2]))
10013c22      + (fconvert.t(arg1[1]) - fconvert.t(arg3[1]))
10013c22      * (fconvert.t(arg1[1]) - fconvert.t(arg2[1]))
10013c28  long double x87_r4_3 = x87_r3_3
10013c28      + (fconvert.t(*arg1) - fconvert.t(*arg3)) * (fconvert.t(*arg1) - fconvert.t(*arg2))
10013c2a  long double temp1 = fconvert.t(0f)
10013c2a  x87_r4_3 - temp1
10013c32  float* eax
10013c32  bool c1
10013c32  eax.w = (x87_r4_3 < temp1 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9
10013c32      | (is_unordered.t(x87_r4_3, temp1) ? 1 : 0) << 0xa
10013c32      | (x87_r4_3 == temp1 ? 1 : 0) << 0xe | 0x3000
10013c32  
10013c3b  if ((eax:1.b & 0x41) == 0)
10013c45      return 0
10013c45  
10013c42  return 1

10013c46                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10013c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10013c70    float* sub_10013c70(float* arg1, float* arg2, float* arg3)

10013c87  *arg3 = fconvert.s(fconvert.t(*arg1) + fconvert.t(*arg2))
10013c8f  arg3[1] = fconvert.s(fconvert.t(arg1[1]) + fconvert.t(arg2[1]))
10013c98  arg3[2] = fconvert.s(fconvert.t(arg1[2]) + fconvert.t(arg2[2]))
10013ca3  return j_sub_10043570(arg3, 0.5f, arg3)

10013ca4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................

10013cc0    int32_t sub_10013cc0(int32_t arg1, int32_t arg2)

10013cdc  if (j_sub_10011670(arg1) != 0 && j_sub_10011670(arg2) != 0 && j_sub_100115d0(arg1) == 0
10013cdc          && j_sub_100115d0(arg2) == 0)
10013d1c      int32_t eax_4 = data_1006694c
10013d2f      void* ebx_4 = arg1 * 0x30 + eax_4
10013d31      int32_t esi_4 = arg2 * 0x30 + eax_4
10013d33      void* eax_5 = data_10064068
10013d38      void* var_110_1 = ebx_4
10013d3f      int32_t var_10c = esi_4
10013d46      float ecx_1 = *(eax_5 + 0x10)
10013d55      float var_114_1 = fconvert.s(j_sub_10011590(ecx_1))
10013d62      float var_170_1 = fconvert.s(j_sub_10011560(ecx_1))
10013d6b      int32_t edx_1 = 0
10013d6d      float* edi_2 = esi_4 + 0xc
10013d70      float* ecx_2 = ebx_4 + 0x18
10013d70      
10013d7c      while (true)
10013d7c          long double x87_r7_4 =
10013d7c              fconvert.t(var_114_1) + fconvert.t(*(ecx_2 + esi_4 - ebx_4))
10013d7f          long double temp0_1 = fconvert.t(ecx_2[-3])
10013d7f          x87_r7_4 - temp0_1
10013d7f          
10013d87          if ((((x87_r7_4 < temp0_1 ? 1 : 0) << 8
10013d87                  | (is_unordered.t(x87_r7_4, temp0_1) ? 1 : 0) << 0xa
10013d87                  | (x87_r7_4 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10013d87              break
10013d87          
10013d8f          long double x87_r7_6 = fconvert.t(*edi_2) - fconvert.t(var_114_1)
10013d96          long double temp1_1 = fconvert.t(*ecx_2)
10013d96          x87_r7_6 - temp1_1
10013d96          
10013d9d          if ((((x87_r7_6 < temp1_1 ? 1 : 0) << 8
10013d9d                  | (is_unordered.t(x87_r7_6, temp1_1) ? 1 : 0) << 0xa
10013d9d                  | (x87_r7_6 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
10013d9d              break
10013d9d          
10013da3          edx_1 += 1
10013da4          ecx_2 = &ecx_2[1]
10013da7          edi_2 = &edi_2[1]
10013da7          
10013dad          if (edx_1 s>= 2)
10013db3              long double x87_r7_8 = fconvert.t(var_170_1) + fconvert.t(*(ebx_4 + 0x20))
10013db6              long double temp2_1 = fconvert.t(*(esi_4 + 0x14))
10013db6              x87_r7_8 - temp2_1
10013db6              
10013dbe              if ((((x87_r7_8 < temp2_1 ? 1 : 0) << 8
10013dbe                      | (is_unordered.t(x87_r7_8, temp2_1) ? 1 : 0) << 0xa
10013dbe                      | (x87_r7_8 == temp2_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
10013dc7                  int32_t i = 0
10013dcb                  float var_1b0_1 = 999999f
10013dd3                  int32_t i_1 = 0
10013dd7                  float var_1ac
10013dd7                  float var_1a8
10013dd7                  float var_1a4
10013dd7                  float var_1a0
10013dd7                  float var_19c
10013dd7                  float var_198
10013dd7                  
10013dd7                  if (*(ebx_4 + 4) s<= 0)
10014623                      label_10014623:
10014623                      long double x87_r7_53 = fconvert.t(var_1b0_1)
10014627                      long double temp3_1 = fconvert.t(var_114_1)
10014627                      x87_r7_53 - temp3_1
10014635                      i.w = (x87_r7_53 < temp3_1 ? 1 : 0) << 8
10014635                          | (is_unordered.t(x87_r7_53, temp3_1) ? 1 : 0) << 0xa
10014635                          | (x87_r7_53 == temp3_1 ? 1 : 0) << 0xe
10014635                      
1001463a                      if ((i:1.b & 1) != 0)
10014648                          float var_110_2 =
10014648                              fconvert.s(fconvert.t(var_1a4) - fconvert.t(var_198))
1001464f                          int32_t eax_73
1001464f                          int16_t x87control_1
1001464f                          eax_73, x87control_1 = j_sub_10011520()
10014654                          var_10c = eax_73
1001465b                          long double x87_r7_56 = float.t(var_10c)
10014662                          long double temp4_1 = fconvert.t(var_110_2)
10014662                          x87_r7_56 - temp4_1
10014669                          eax_73.w = (x87_r7_56 < temp4_1 ? 1 : 0) << 8
10014669                              | (is_unordered.t(x87_r7_56, temp4_1) ? 1 : 0) << 0xa
10014669                              | (x87_r7_56 == temp4_1 ? 1 : 0) << 0xe
1001466e                          float var_16c
1001466e                          
1001466e                          if ((eax_73:1.b & 1) == 0)
1001468f                              int32_t ebx_7
1001468f                              
1001468f                              if (j_sub_10010780(0f, &var_1ac, &var_1a0, &var_16c) == 0)
100146c4                                  if (j_sub_10010780(ecx_1, &var_1ac, &var_1a0, &var_16c)
100146c4                                          != 0)
100146ca                                      ebx_7 = 5
100146ca                                      goto label_100146db
1001468f                              else
1001469b                                  ebx_7 = 7
100146a0                                  var_16c =
100146a0                                      fconvert.s(fconvert.t(var_16c) * fconvert.t(1.2))
100146db                                  label_100146db:
100146db                                  int32_t var_188_1 = 0
100146e4                                  float var_190 =
100146e4                                      fconvert.s(fconvert.t(var_1a0) - fconvert.t(var_1ac))
100146f0                                  float var_18c_1 =
100146f0                                      fconvert.s(fconvert.t(var_19c) - fconvert.t(var_1a8))
100146f4                                  long double st0_11 = j_sub_10043500(&var_190)
100146f9                                  long double temp6_1 = fconvert.t(10f)
100146f9                                  st0_11 - temp6_1
100146f9                                  
10014707                                  if ((((st0_11 < temp6_1 ? 1 : 0) << 8
10014707                                          | (is_unordered.t(st0_11, temp6_1) ? 1 : 0)
10014707                                          << 0xa | (st0_11 == temp6_1 ? 1 : 0) << 0xe):1.b & 1)
10014707                                          == 0)
1001471a                                      var_190 = fconvert.s(fconvert.t(var_1a0)
1001471a                                          - fconvert.t(var_1ac))
10014726                                      float var_18c_2 = fconvert.s(fconvert.t(var_19c)
10014726                                          - fconvert.t(var_1a8))
10014732                                      float var_188_2 = fconvert.s(fconvert.t(var_198)
10014732                                          - fconvert.t(var_1a4))
10014736                                      j_sub_10043290(&var_190)
10014751                                      int32_t var_184
10014751                                      j_sub_10043380(&var_1ac, 1f, &var_190, &var_184)
10014768                                      int32_t var_104 = var_184
10014778                                      int32_t var_180
10014778                                      int32_t var_100_1 = var_180
10014785                                      float var_17c
10014785                                      float var_fc_1 =
10014785                                          fconvert.s(fconvert.t(var_17c) - fconvert.t(100f))
100147ac                                      int32_t var_e8
100147ac                                      void var_c4
100147ac                                      __builtin_memcpy(dest: &var_e8, 
100147ac                                          src: j_sub_1001b260(&var_c4, &var_184, &var_104, 
100147ac                                              2, 0xffffffff), 
100147ac                                          n: 0x24)
100147ac                                      
100147b7                                      if (var_e8 == 0)
100147bd                                          float var_e4
100147bd                                          long double x87_r7_73 = fconvert.t(var_e4)
100147c4                                          long double temp8_1 = fconvert.t(1f)
100147c4                                          x87_r7_73 - temp8_1
100147ca                                          int32_t eax_80
100147ca                                          eax_80.w = (x87_r7_73 < temp8_1 ? 1 : 0) << 8 | (
100147ca                                              is_unordered.t(x87_r7_73, temp8_1) ? 1 : 0) << 0xa
100147ca                                              | (x87_r7_73 == temp8_1 ? 1 : 0) << 0xe
100147cf                                          float var_d8
100147cf                                          int32_t var_c8
100147cf                                          
100147cf                                          if ((eax_80:1.b & 1) == 0)
10014827                                              label_10014827:
10014827                                              j_sub_10043380(&var_1a0, -1f, &var_190, 
10014827                                                  &var_184)
1001483e                                              var_104 = var_184
1001484e                                              int32_t var_100_2 = var_180
1001485b                                              float var_fc_2 = fconvert.s(
1001485b                                                  fconvert.t(var_17c) - fconvert.t(100f))
10014882                                              __builtin_memcpy(dest: &var_e8, 
10014882                                                  src: j_sub_1001b260(&var_c4, &var_184, 
10014882                                                      &var_104, 2, 0xffffffff), 
10014882                                                  n: 0x24)
10014882                                              
1001488d                                              if (var_e8 == 0)
10014893                                                  long double x87_r7_79 = fconvert.t(var_e4)
1001489a                                                  long double temp12_1 = fconvert.t(1f)
1001489a                                                  x87_r7_79 - temp12_1
100148a0                                                  int32_t eax_86
100148a0                                                  eax_86.w =
100148a0                                                      (x87_r7_79 < temp12_1 ? 1 : 0) << 8 | (
100148a0                                                      is_unordered.t(x87_r7_79, temp12_1) ? 1
100148a0                                                      : 0) << 0xa
100148a0                                                      | (x87_r7_79 == temp12_1 ? 1 : 0)
100148a0                                                      << 0xe
100148a0                                                  
100148a5                                                  if ((eax_86:1.b & 1) == 0)
100148f5                                                      label_100148f5:
100148f5                                                      int32_t var_188_3 = 0
100148fe                                                      var_190 = fconvert.s(fconvert.t(var_1a0)
100148fe                                                          - fconvert.t(var_1ac))
1001490a                                                      float var_18c_3 = fconvert.s(
1001490a                                                          fconvert.t(var_19c)
1001490a                                                          - fconvert.t(var_1a8))
1001490e                                                      j_sub_10043290(&var_190)
10014927                                                      float var_f4
10014927                                                      j_sub_10043570(&var_190, var_16c, 
10014927                                                          &var_f4)
10014927                                                      
10014932                                                      if (ebx_7 != 5)
10014946                                                          int32_t var_ec_2 = 0
10014932                                                      else
1001493d                                                          int32_t var_ec_1 =
1001493d                                                              *(data_10064068 + 0x10)
1001493d                                                      
1001497e                                                      void var_50
1001497e                                                      int32_t eax_92
1001497e                                                      int80_t st0_14
1001497e                                                      eax_92, st0_14 = j_sub_1000f840(
1001497e                                                          &var_50, 0xffffffff, &var_1ac, 2, 1, 
1001497e                                                          &data_100631cc, &var_f4, 3, 0x1e, 
1001497e                                                          0.100000001f, 0x3d, 0)
10014994                                                      float var_a0[0x10]
10014994                                                      __builtin_memcpy(dest: &var_a0, 
10014994                                                          src: eax_92, n: 0x50)
100149ac                                                      char var_60
100149ac                                                      int32_t var_54
100149ac                                                      
100149ac                                                      if (var_54 s< 0x1e
100149ac                                                              && (var_60 & 0x38) == 0)
100149b2                                                          int32_t edi_6 = 0
100149b4                                                          int32_t esi_10 = 0
100149b6                                                          int32_t var_194_2 = 0
100149b6                                                          
100149c8                                                          while (true)
100149c8                                                              int32_t* var_1cc_13 = &var_184
100149d4                                                              j_sub_10043380(&var_a0, 
100149d4                                                                  fconvert.s(float.t(var_194_2)), 
100149d4                                                                  &var_190, &var_184)
100149e8                                                              var_17c = fconvert.s(fconvert.t(var_17c)
100149e8                                                                  + fconvert.t(0.125))
100149e8                                                              
100149f6                                                              if (j_sub_1001ae60(&var_184) == arg2)
100149f6                                                                  break
100149f6                                                              
100149f8                                                              esi_10 -= 8
100149fb                                                              edi_6 += 8
10014a01                                                              var_194_2 = esi_10
10014a01                                                              
10014a05                                                              if (esi_10 s< 0xffffffe0)
10014a13                                                                  return 0
10014a13                                                          
10014a17                                                          if (edi_6 s<= 0x20)
10014a1d                                                              int32_t* eax_95 = j_sub_10010ff0()
10014a1d                                                              
10014a28                                                              if (eax_95 != 0)
10014a2e                                                                  *eax_95 = arg2
10014a30                                                                  eax_95[1] = 0
10014a33                                                                  eax_95[2] = 0
10014a3a                                                                  eax_95[3] = var_1ac
10014a41                                                                  eax_95[4] = var_1a8
10014a48                                                                  eax_95[5] = var_1a4
10014a4f                                                                  eax_95[6] = var_1a0
10014a56                                                                  eax_95[7] = var_19c
10014a67                                                                  eax_95[8] = var_198
10014a6a                                                                  eax_95[9] = ebx_7
10014a8f                                                                  eax_95[0xa].w = __ftol(x87control_1, 
10014a8f                                                                      j_sub_10013ba0(&var_1a0, &var_1ac)
10014a8f                                                                          * fconvert.t(240f)
10014a8f                                                                          / fconvert.t(*(data_10064048 + 0x10))
10014a8f                                                                          + fconvert.t(600f))
10014aa3                                                                  eax_95[0xb] =
10014aa3                                                                      *(data_1006675c + (arg1 << 2))
10014aac                                                                  *(data_1006675c + (arg1 << 2)) = eax_95
10014ab5                                                                  data_1006678c += 1
100148a5                                                  else
100148b7                                                      long double x87_r7_80 = fconvert.t(
100148b7                                                          *(data_10066924 + var_c8 * 0x14 + 8))
100148be                                                      long double temp14_1 =
100148be                                                          fconvert.t(0.69999999999999996)
100148be                                                      x87_r7_80 - temp14_1
100148be                                                      
100148c9                                                      if (((
100148c9                                                              (x87_r7_80 < temp14_1 ? 1 : 0) << 8 | (
100148c9                                                              is_unordered.t(x87_r7_80, temp14_1) ? 1
100148c9                                                              : 0) << 0xa
100148c9                                                              | (x87_r7_80 == temp14_1 ? 1 : 0)
100148c9                                                              << 0xe):1.b & 1) != 0)
100148c9                                                          goto label_100148f5
100148c9                                                      
100148cf                                                      long double x87_r7_82 =
100148cf                                                          fconvert.t(var_17c) - fconvert.t(var_d8)
100148db                                                      long double temp16_1 =
100148db                                                          fconvert.t(*(data_10064060 + 0x10))
100148db                                                      x87_r7_82 - temp16_1
100148de                                                      void* eax_89
100148de                                                      eax_89.w =
100148de                                                          (x87_r7_82 < temp16_1 ? 1 : 0) << 8 | (
100148de                                                          is_unordered.t(x87_r7_82, temp16_1) ? 1
100148de                                                          : 0) << 0xa
100148de                                                          | (x87_r7_82 == temp16_1 ? 1 : 0)
100148de                                                          << 0xe
100148de                                                      
100148e3                                                      if ((eax_89:1.b & 0x41) == 0)
100148e3                                                          goto label_100148f5
100147cf                                          else
100147e0                                              long double x87_r7_74 = fconvert.t(
100147e0                                                  *(data_10066924 + var_c8 * 0x14 + 8))
100147e7                                              long double temp10_1 =
100147e7                                                  fconvert.t(0.69999999999999996)
100147e7                                              x87_r7_74 - temp10_1
100147e7                                              
100147f2                                              if ((((x87_r7_74 < temp10_1 ? 1 : 0) << 8 | (
100147f2                                                      is_unordered.t(x87_r7_74, temp10_1) ? 1
100147f2                                                      : 0) << 0xa | (x87_r7_74 == temp10_1 ? 1 : 0)
100147f2                                                      << 0xe):1.b & 1) != 0)
100147f2                                                  goto label_10014827
100147f2                                              
100147f8                                              long double x87_r7_76 =
100147f8                                                  fconvert.t(var_17c) - fconvert.t(var_d8)
10014805                                              long double temp11_1 =
10014805                                                  fconvert.t(*(data_10064060 + 0x10))
10014805                                              x87_r7_76 - temp11_1
10014805                                              
1001480d                                              if ((((x87_r7_76 < temp11_1 ? 1 : 0) << 8 | (
1001480d                                                      is_unordered.t(x87_r7_76, temp11_1) ? 1
1001480d                                                      : 0) << 0xa | (x87_r7_76 == temp11_1 ? 1 : 0)
1001480d                                                      << 0xe):1.b & 0x41) == 0)
1001480d                                                  goto label_10014827
10013dd7                  else
10014608                      do
10013dea                          int32_t eax_9
10013dea                          int32_t edx_4
10013dea                          edx_4:eax_9 = sx.q(*(data_10066944 + ((*(ebx_4 + 8) + i) << 2)))
10013def                          int32_t edx_5 = data_1006693c
10013df5                          int32_t ecx_4 = ((eax_9 ^ edx_4) - edx_4) * 3
10013df8                          int32_t eax_11
10013df8                          eax_11.b = *(edx_5 + (ecx_4 << 3) + 4)
10013dfe                          int32_t* edi_3 = edx_5 + (ecx_4 << 3)
10013e01                          int32_t* var_178_1 = edi_3
10013e01                          
10013e05                          if ((eax_11.b & 4) != 0)
10013e0e                              int32_t j = 0
10013e12                              int32_t j_1 = 0
10013e12                              
10013e19                              if (*(esi_4 + 4) s> 0)
100145f4                                  do
10013e2d                                      int32_t eax_16
10013e2d                                      int32_t edx_6
10013e2d                                      edx_6:eax_16 =
10013e2d                                          sx.q(*(data_10066944 + ((*(esi_4 + 8) + j) << 2)))
10013e3a                                      int32_t* ecx_6 =
10013e3a                                          data_1006693c + ((eax_16 ^ edx_6) - edx_6) * 0x18
10013e3d                                      int32_t* var_174_1 = ecx_6
10013e3d                                      
10013e45                                      if ((ecx_6[1].b & 4) != 0)
10013e4e                                          int32_t var_118_1 = 0
10013e4e                                          
10013e5b                                          if (edi_3[2] s> 0)
10013e7c                                              while (true)
10013e7c                                                  int32_t k_1 = 0
10013e8a                                                  int32_t eax_23
10013e8a                                                  int32_t edx_10
10013e8a                                                  edx_10:eax_23 = sx.q(*(data_10066934
10013e8a                                                      + ((edi_3[3] + var_118_1) << 2)))
10013e95                                                  int32_t* eax_26 = data_1006692c
10013e95                                                      + (((eax_23 ^ edx_10) - edx_10) << 3)
10013e95                                                  
10013ea4                                                  if (ecx_6[2] s> 0)
100145ac                                                      int32_t k
100145ac                                                      
100145ac                                                      do
10013ec8                                                          int32_t eax_30
10013ec8                                                          int32_t edx_14
10013ec8                                                          edx_14:eax_30 = sx.q(*(data_10066934
10013ec8                                                              + ((var_174_1[3] + k_1) << 2)))
10013ed4                                                          int32_t* ecx_9 = data_1006692c
10013ed4                                                              + (((eax_30 ^ edx_14) - edx_14) << 3)
10013edf                                                          float eax_34 = data_1006691c
10013ee4                                                          int32_t edx_17 = eax_26[1] * 3
10013ee7                                                          float* edi_5 = eax_34 i+ *eax_26 * 0xc
10013eef                                                          float* ebx_6 = eax_34 i+ (edx_17 << 2)
10013efa                                                          float var_134_1 = fconvert.s(
10013efa                                                              fconvert.t(*(eax_34 i+ (edx_17 << 2)))
10013efa                                                              - fconvert.t(*edi_5))
10013f0a                                                          float* esi_6 = eax_34 i+ *ecx_9 * 0xc
10013f0d                                                          float* ebp_3 = eax_34 i+ ecx_9[1] * 0xc
10013f10                                                          float var_130_1 = fconvert.s(
10013f10                                                              fconvert.t(ebx_6[1])
10013f10                                                              - fconvert.t(edi_5[1]))
10013f1c                                                          float var_128_1 = fconvert.s(
10013f1c                                                              fconvert.t(*ebp_3) - fconvert.t(*esi_6))
10013f29                                                          float var_124_1 = fconvert.s(
10013f29                                                              fconvert.t(ebp_3[1])
10013f29                                                              - fconvert.t(esi_6[1]))
10013f30                                                          long double x87_r7_17 =
10013f30                                                              fconvert.t(var_128_1)
10013f37                                                          long double temp7_1 = fconvert.t(0f)
10013f37                                                          x87_r7_17 - temp7_1
10013f3d                                                          eax_34.w =
10013f3d                                                              (x87_r7_17 < temp7_1 ? 1 : 0) << 8 | (
10013f3d                                                              is_unordered.t(x87_r7_17, temp7_1) ? 1
10013f3d                                                              : 0) << 0xa
10013f3d                                                              | (x87_r7_17 == temp7_1 ? 1 : 0) << 0xe
10013f42                                                          float var_168
10013f42                                                          float var_164_1
10013f42                                                          float var_150
10013f42                                                          float var_14c_1
10013f42                                                          
10013f42                                                          if ((eax_34:1.b & 0x40) != 0)
10013fd3                                                              var_168 = *esi_6
10013fda                                                              var_164_1 = edi_5[1]
10013fe0                                                              var_150 = *esi_6
10013fe7                                                              var_14c_1 = ebx_6[1]
10013f42                                                          else
10013f4f                                                              long double x87_r7_19 =
10013f4f                                                                  fconvert.t(var_124_1)
10013f4f                                                                  / fconvert.t(var_128_1)
10013f5a                                                              long double x87_r6_3 =
10013f5a                                                                  fconvert.t(esi_6[1])
10013f5a                                                                  - x87_r7_19 * fconvert.t(*esi_6)
10013f6f                                                              long double x87_r5_3 =
10013f6f                                                                  x87_r6_3 * fconvert.t(var_124_1)
10013f6f                                                                  + x87_r7_19 * fconvert.t(var_128_1)
10013f88                                                              long double x87_r4_7 = (
10013f88                                                                  fconvert.t(var_128_1)
10013f88                                                                  * fconvert.t(*edi_5)
10013f88                                                                  + fconvert.t(var_124_1)
10013f88                                                                  * fconvert.t(edi_5[1]) - x87_r5_3)
10013f88                                                                  / fconvert.t(var_128_1)
10013f8f                                                              var_168 = fconvert.s(x87_r4_7)
10013f97                                                              var_164_1 = fconvert.s(
10013f97                                                                  x87_r4_7 * x87_r7_19 + x87_r6_3)
10013fb9                                                              var_150 = fconvert.s((
10013fb9                                                                  fconvert.t(var_124_1)
10013fb9                                                                  * fconvert.t(ebx_6[1])
10013fb9                                                                  + fconvert.t(var_128_1)
10013fb9                                                                  * fconvert.t(*ebx_6) - x87_r5_3)
10013fb9                                                                  / fconvert.t(var_128_1))
10013fc7                                                              var_14c_1 = fconvert.s(
10013fc7                                                                  fconvert.t(var_150) * x87_r7_19
10013fc7                                                                  + x87_r5_3)
10013fc7                                                          
10013feb                                                          long double x87_r7_21 =
10013feb                                                              fconvert.t(var_134_1)
10013ff2                                                          long double temp9_1 = fconvert.t(0f)
10013ff2                                                          x87_r7_21 - temp9_1
10013ff8                                                          eax_34.w =
10013ff8                                                              (x87_r7_21 < temp9_1 ? 1 : 0) << 8 | (
10013ff8                                                              is_unordered.t(x87_r7_21, temp9_1) ? 1
10013ff8                                                              : 0) << 0xa
10013ff8                                                              | (x87_r7_21 == temp9_1 ? 1 : 0) << 0xe
10013ffd                                                          float var_15c
10013ffd                                                          float var_158_1
10013ffd                                                          float var_140
10013ffd                                                          float var_13c_1
10013ffd                                                          
10013ffd                                                          if ((eax_34:1.b & 0x40) != 0)
10014095                                                              var_140 = *edi_5
1001409f                                                              var_13c_1 = esi_6[1]
100140a8                                                              var_15c = *edi_5
100140af                                                              var_158_1 = ebp_3[1]
10013ffd                                                          else
1001400a                                                              long double x87_r7_23 =
1001400a                                                                  fconvert.t(var_130_1)
1001400a                                                                  / fconvert.t(var_134_1)
10014015                                                              long double x87_r6_7 =
10014015                                                                  fconvert.t(edi_5[1])
10014015                                                                  - x87_r7_23 * fconvert.t(*edi_5)
1001402a                                                              long double x87_r5_9 =
1001402a                                                                  x87_r6_7 * fconvert.t(var_130_1)
1001402a                                                                  + x87_r7_23 * fconvert.t(var_134_1)
10014043                                                              long double x87_r4_21 = (
10014043                                                                  fconvert.t(var_134_1)
10014043                                                                  * fconvert.t(*esi_6)
10014043                                                                  + fconvert.t(var_130_1)
10014043                                                                  * fconvert.t(esi_6[1]) - x87_r5_9)
10014043                                                                  / fconvert.t(var_134_1)
1001404a                                                              var_140 = fconvert.s(x87_r4_21)
10014055                                                              var_13c_1 = fconvert.s(
10014055                                                                  x87_r4_21 * x87_r7_23 + x87_r6_7)
1001407b                                                              var_15c = fconvert.s((
1001407b                                                                  fconvert.t(var_130_1)
1001407b                                                                  * fconvert.t(ebp_3[1])
1001407b                                                                  + fconvert.t(var_134_1)
1001407b                                                                  * fconvert.t(*ebp_3) - x87_r5_9)
1001407b                                                                  / fconvert.t(var_134_1))
10014089                                                              var_158_1 = fconvert.s(
10014089                                                                  fconvert.t(var_15c) * x87_r7_23
10014089                                                                  + x87_r5_9)
10014089                                                          
100140b7                                                          int32_t var_160_1 = 0
100140bf                                                          int32_t var_148_1 = 0
100140c7                                                          int32_t var_138_1 = 0
100140d2                                                          int32_t var_154_1 = 0
100140e0                                                          int32_t edx_23 = data_10066924
100140f1                                                          int32_t ecx_17 = *var_174_1 * 5
100140f4                                                          float* eax_39 =
100140f4                                                              edx_23 + *var_178_1 * 0x14
100140f7                                                          int32_t var_144_1 = 0
1001410d                                                          float* ecx_18 = edx_23 + (ecx_17 << 2)
1001411a                                                          long double x87_r7_29 = (
1001411a                                                              fconvert.t(ecx_18[3]) - (
1001411a                                                              fconvert.t(var_164_1) * fconvert.t(
1001411a                                                              *(edx_23 + (ecx_17 << 2) + 4))
1001411a                                                              + fconvert.t(var_168) *
1001411a                                                              fconvert.t(*(edx_23 + (ecx_17 << 2)))))
1001411a                                                              / fconvert.t(ecx_18[2])
1001411d                                                          float var_160_2 = fconvert.s(x87_r7_29)
10014139                                                          float var_148_2 = fconvert.s((
10014139                                                              fconvert.t(ecx_18[3]) - (
10014139                                                              fconvert.t(var_14c_1)
10014139                                                              * fconvert.t(ecx_18[1])
10014139                                                              + fconvert.t(var_150)
10014139                                                              * fconvert.t(*ecx_18)))
10014139                                                              / fconvert.t(ecx_18[2]))
1001415b                                                          float var_138_2 = fconvert.s((
1001415b                                                              fconvert.t(eax_39[3]) - (
1001415b                                                              fconvert.t(var_140)
1001415b                                                              * fconvert.t(*eax_39)
1001415b                                                              + fconvert.t(var_13c_1)
1001415b                                                              * fconvert.t(eax_39[1])))
1001415b                                                              / fconvert.t(eax_39[2]))
10014177                                                          float var_154_2 = fconvert.s((
10014177                                                              fconvert.t(eax_39[3]) - (
10014177                                                              fconvert.t(var_15c)
10014177                                                              * fconvert.t(*eax_39)
10014177                                                              + fconvert.t(var_158_1)
10014177                                                              * fconvert.t(eax_39[1])))
10014177                                                              / fconvert.t(eax_39[2]))
10014177                                                          
10014185                                                          if (
10014185                                                                  j_sub_10013bf0(&var_168, esi_6, ebp_3)
10014185                                                                  != 0)
10014191                                                              long double st0_3 =
10014191                                                                  j_sub_10013ba0(edi_5, &var_168)
1001419c                                                              long double x87_r5_14 =
1001419c                                                                  fconvert.t(var_1b0_1) - fconvert.t(0.5)
100141a5                                                              x87_r5_14 - st0_3
100141ac                                                              long double x87_r5_16
100141ac                                                              
100141ac                                                              if ((((x87_r5_14 < st0_3 ? 1 : 0) << 8
100141ac                                                                      | (is_unordered.t(x87_r5_14, st0_3) ? 1
100141ac                                                                      : 0) << 0xa
100141ac                                                                      | (x87_r5_14 == st0_3 ? 1 : 0) << 0xe
100141ac                                                                      | 0x3800):1.b & 1) != 0)
100141b4                                                                  x87_r5_16 =
100141b4                                                                      fconvert.t(var_1b0_1) + fconvert.t(0.5)
100141ba                                                                  x87_r5_16 - st0_3
100141ba                                                              
100141c1                                                              if ((((x87_r5_14 < st0_3 ? 1 : 0) << 8
100141c1                                                                      | (is_unordered.t(x87_r5_14, st0_3) ? 1
100141c1                                                                      : 0) << 0xa
100141c1                                                                      | (x87_r5_14 == st0_3 ? 1 : 0) << 0xe
100141c1                                                                      | 0x3800):1.b & 1) == 0 || ((
100141c1                                                                      (x87_r5_16 < st0_3 ? 1 : 0) << 8 | (
100141c1                                                                      is_unordered.t(x87_r5_16, st0_3) ? 1
100141c1                                                                      : 0) << 0xa
100141c1                                                                      | (x87_r5_16 == st0_3 ? 1 : 0) << 0xe
100141c1                                                                      | 0x3800):1.b & 0x41) != 0)
100141ee                                                                  long double temp13_1 =
100141ee                                                                      fconvert.t(var_1b0_1)
100141ee                                                                  st0_3 - temp13_1
100141ee                                                                  
100141f7                                                                  if ((((st0_3 < temp13_1 ? 1 : 0) << 8
100141f7                                                                          | (is_unordered.t(st0_3, temp13_1) ? 1
100141f7                                                                          : 0) << 0xa
100141f7                                                                          | (st0_3 == temp13_1 ? 1 : 0) << 0xe
100141f7                                                                          | 0x3800):1.b & 1) != 0)
100141fb                                                                      var_1ac = *edi_5
10014206                                                                      var_1a8 = edi_5[1]
10014211                                                                      var_1b0_1 = fconvert.s(st0_3)
10014215                                                                      var_1a4 = edi_5[2]
1001421d                                                                      var_1a0 = var_168
10014221                                                                      var_19c = var_164_1
10014225                                                                      var_198 = var_160_2
100141c1                                                              else
100141d0                                                                  j_sub_10013c70(&var_1ac, edi_5, 
100141d0                                                                      &var_1ac)
100141e4                                                                  j_sub_10013c70(&var_1a0, &var_168, 
100141e4                                                                      &var_1a0)
100141e4                                                              
1001422d                                                              var_144_1 = 1
1001422d                                                          
10014246                                                          if (
10014246                                                                  j_sub_10013bf0(&var_150, esi_6, ebp_3)
10014246                                                                  != 0)
10014252                                                              long double st0_4 =
10014252                                                                  j_sub_10013ba0(ebx_6, &var_150)
1001425d                                                              long double x87_r5_18 =
1001425d                                                                  fconvert.t(var_1b0_1) - fconvert.t(0.5)
10014266                                                              x87_r5_18 - st0_4
1001426d                                                              long double x87_r5_20
1001426d                                                              
1001426d                                                              if ((((x87_r5_18 < st0_4 ? 1 : 0) << 8
1001426d                                                                      | (is_unordered.t(x87_r5_18, st0_4) ? 1
1001426d                                                                      : 0) << 0xa
1001426d                                                                      | (x87_r5_18 == st0_4 ? 1 : 0) << 0xe
1001426d                                                                      | 0x3800):1.b & 1) != 0)
10014275                                                                  x87_r5_20 =
10014275                                                                      fconvert.t(var_1b0_1) + fconvert.t(0.5)
1001427b                                                                  x87_r5_20 - st0_4
1001427b                                                              
10014282                                                              if ((((x87_r5_18 < st0_4 ? 1 : 0) << 8
10014282                                                                      | (is_unordered.t(x87_r5_18, st0_4) ? 1
10014282                                                                      : 0) << 0xa
10014282                                                                      | (x87_r5_18 == st0_4 ? 1 : 0) << 0xe
10014282                                                                      | 0x3800):1.b & 1) == 0 || ((
10014282                                                                      (x87_r5_20 < st0_4 ? 1 : 0) << 8 | (
10014282                                                                      is_unordered.t(x87_r5_20, st0_4) ? 1
10014282                                                                      : 0) << 0xa
10014282                                                                      | (x87_r5_20 == st0_4 ? 1 : 0) << 0xe
10014282                                                                      | 0x3800):1.b & 0x41) != 0)
100142af                                                                  long double temp15_1 =
100142af                                                                      fconvert.t(var_1b0_1)
100142af                                                                  st0_4 - temp15_1
100142af                                                                  
100142b8                                                                  if ((((st0_4 < temp15_1 ? 1 : 0) << 8
100142b8                                                                          | (is_unordered.t(st0_4, temp15_1) ? 1
100142b8                                                                          : 0) << 0xa
100142b8                                                                          | (st0_4 == temp15_1 ? 1 : 0) << 0xe
100142b8                                                                          | 0x3800):1.b & 1) != 0)
100142bc                                                                      var_1ac = *ebx_6
100142c7                                                                      var_1a8 = ebx_6[1]
100142d2                                                                      var_1b0_1 = fconvert.s(st0_4)
100142d6                                                                      var_1a4 = ebx_6[2]
100142de                                                                      var_1a0 = var_150
100142e2                                                                      var_19c = var_14c_1
100142e6                                                                      var_198 = var_148_2
10014282                                                              else
10014291                                                                  j_sub_10013c70(&var_1ac, ebx_6, 
10014291                                                                      &var_1ac)
100142a5                                                                  j_sub_10013c70(&var_1a0, &var_150, 
100142a5                                                                      &var_1a0)
100142a5                                                              
100142ee                                                              var_144_1 = 1
100142ee                                                          
1001430a                                                          if (
1001430a                                                                  j_sub_10013bf0(&var_140, edi_5, ebx_6)
1001430a                                                                  != 0)
10014319                                                              long double st0_5 =
10014319                                                                  j_sub_10013ba0(esi_6, &var_140)
10014324                                                              long double x87_r5_22 =
10014324                                                                  fconvert.t(var_1b0_1) - fconvert.t(0.5)
1001432d                                                              x87_r5_22 - st0_5
10014334                                                              long double x87_r5_24
10014334                                                              
10014334                                                              if ((((x87_r5_22 < st0_5 ? 1 : 0) << 8
10014334                                                                      | (is_unordered.t(x87_r5_22, st0_5) ? 1
10014334                                                                      : 0) << 0xa
10014334                                                                      | (x87_r5_22 == st0_5 ? 1 : 0) << 0xe
10014334                                                                      | 0x3800):1.b & 1) != 0)
1001433c                                                                  x87_r5_24 =
1001433c                                                                      fconvert.t(var_1b0_1) + fconvert.t(0.5)
10014342                                                                  x87_r5_24 - st0_5
10014342                                                              
10014349                                                              if ((((x87_r5_22 < st0_5 ? 1 : 0) << 8
10014349                                                                      | (is_unordered.t(x87_r5_22, st0_5) ? 1
10014349                                                                      : 0) << 0xa
10014349                                                                      | (x87_r5_22 == st0_5 ? 1 : 0) << 0xe
10014349                                                                      | 0x3800):1.b & 1) == 0 || ((
10014349                                                                      (x87_r5_24 < st0_5 ? 1 : 0) << 8 | (
10014349                                                                      is_unordered.t(x87_r5_24, st0_5) ? 1
10014349                                                                      : 0) << 0xa
10014349                                                                      | (x87_r5_24 == st0_5 ? 1 : 0) << 0xe
10014349                                                                      | 0x3800):1.b & 0x41) != 0)
10014379                                                                  long double temp17_1 =
10014379                                                                      fconvert.t(var_1b0_1)
10014379                                                                  st0_5 - temp17_1
10014379                                                                  
10014382                                                                  if ((((st0_5 < temp17_1 ? 1 : 0) << 8
10014382                                                                          | (is_unordered.t(st0_5, temp17_1) ? 1
10014382                                                                          : 0) << 0xa
10014382                                                                          | (st0_5 == temp17_1 ? 1 : 0) << 0xe
10014382                                                                          | 0x3800):1.b & 1) != 0)
10014399                                                                      var_1ac = var_140
1001439d                                                                      var_1a8 = var_13c_1
100143a1                                                                      var_1a4 = var_138_2
100143a7                                                                      var_1b0_1 = fconvert.s(st0_5)
100143ab                                                                      var_1a0 = *esi_6
100143b2                                                                      var_19c = esi_6[1]
100143b9                                                                      var_198 = esi_6[2]
10014349                                                              else
1001435f                                                                  j_sub_10013c70(&var_1ac, &var_140, 
1001435f                                                                      &var_1ac)
1001436f                                                                  j_sub_10013c70(&var_1a0, esi_6, 
1001436f                                                                      &var_1a0)
1001436f                                                              
100143c1                                                              var_144_1 = 1
100143c1                                                          
100143da                                                          float edx_30
100143da                                                          long double x87_r7_48
100143da                                                          
100143da                                                          if (
100143da                                                                  j_sub_10013bf0(&var_15c, edi_5, ebx_6)
100143da                                                                  != 0)
100143e6                                                              x87_r7_48 =
100143e6                                                                  j_sub_10013ba0(ebp_3, &var_15c)
100143f1                                                              long double x87_r5_26 =
100143f1                                                                  fconvert.t(var_1b0_1) - fconvert.t(0.5)
100143fa                                                              x87_r5_26 - x87_r7_48
10014401                                                              long double x87_r5_28
10014401                                                              
10014401                                                              if (((
10014401                                                                      (x87_r5_26 < x87_r7_48 ? 1 : 0) << 8 | (
10014401                                                                      is_unordered.t(x87_r5_26, x87_r7_48) ? 1
10014401                                                                      : 0) << 0xa
10014401                                                                      | (x87_r5_26 == x87_r7_48 ? 1 : 0)
10014401                                                                      << 0xe | 0x3800):1.b & 1) != 0)
10014409                                                                  x87_r5_28 =
10014409                                                                      fconvert.t(var_1b0_1) + fconvert.t(0.5)
1001440f                                                                  x87_r5_28 - x87_r7_48
1001440f                                                              
10014416                                                              if (((
10014416                                                                      (x87_r5_26 < x87_r7_48 ? 1 : 0) << 8 | (
10014416                                                                      is_unordered.t(x87_r5_26, x87_r7_48) ? 1
10014416                                                                      : 0) << 0xa
10014416                                                                      | (x87_r5_26 == x87_r7_48 ? 1 : 0)
10014416                                                                      << 0xe | 0x3800):1.b & 1) == 0 || ((
10014416                                                                      (x87_r5_28 < x87_r7_48 ? 1 : 0) << 8 | (
10014416                                                                      is_unordered.t(x87_r5_28, x87_r7_48) ? 1
10014416                                                                      : 0) << 0xa
10014416                                                                      | (x87_r5_28 == x87_r7_48 ? 1 : 0)
10014416                                                                      << 0xe | 0x3800):1.b & 0x41) != 0)
10014446                                                                  long double temp19_1 =
10014446                                                                      fconvert.t(var_1b0_1)
10014446                                                                  x87_r7_48 - temp19_1
10014446                                                                  
1001444f                                                                  if (((
1001444f                                                                          (x87_r7_48 < temp19_1 ? 1 : 0) << 8 | (
1001444f                                                                          is_unordered.t(x87_r7_48, temp19_1) ? 1
1001444f                                                                          : 0) << 0xa
1001444f                                                                          | (x87_r7_48 == temp19_1 ? 1 : 0)
1001444f                                                                          << 0xe | 0x3800):1.b & 1) != 0)
1001445d                                                                      var_1b0_1 = fconvert.s(x87_r7_48)
10014461                                                                      edx_30 = var_154_2
10014465                                                                      var_1ac = var_15c
10014469                                                                      var_1a8 = var_158_1
10014577                                                                      label_10014577:
10014577                                                                      var_1a4 = edx_30
1001457e                                                                      var_1a0 = *ebp_3
10014585                                                                      var_19c = ebp_3[1]
1001458c                                                                      var_198 = ebp_3[2]
10014416                                                              else
10014429                                                                  j_sub_10013c70(&var_1ac, &var_15c, 
10014429                                                                      &var_1ac)
10014439                                                                  j_sub_10013c70(&var_1a0, ebp_3, 
10014439                                                                      &var_1a0)
100143da                                                          else if (var_144_1 == 0)
10014480                                                              long double st0_7 =
10014480                                                                  j_sub_10013ba0(edi_5, esi_6)
10014485                                                              long double temp18_1 =
10014485                                                                  fconvert.t(var_1b0_1)
10014485                                                              st0_7 - temp18_1
10014485                                                              
10014491                                                              if ((((st0_7 < temp18_1 ? 1 : 0) << 8
10014491                                                                      | (is_unordered.t(st0_7, temp18_1) ? 1
10014491                                                                      : 0) << 0xa
10014491                                                                      | (st0_7 == temp18_1 ? 1 : 0) << 0xe
10014491                                                                      | 0x3800):1.b & 1) != 0)
10014495                                                                  var_1ac = *edi_5
1001449c                                                                  var_1a8 = edi_5[1]
100144a3                                                                  var_1a4 = edi_5[2]
100144a9                                                                  var_1b0_1 = fconvert.s(st0_7)
100144ad                                                                  var_1a0 = *esi_6
100144b4                                                                  var_19c = esi_6[1]
100144bb                                                                  var_198 = esi_6[2]
100144bb                                                              
100144c5                                                              long double st0_8 =
100144c5                                                                  j_sub_10013ba0(edi_5, ebp_3)
100144ca                                                              long double temp20_1 =
100144ca                                                                  fconvert.t(var_1b0_1)
100144ca                                                              st0_8 - temp20_1
100144ca                                                              
100144d6                                                              if ((((st0_8 < temp20_1 ? 1 : 0) << 8
100144d6                                                                      | (is_unordered.t(st0_8, temp20_1) ? 1
100144d6                                                                      : 0) << 0xa
100144d6                                                                      | (st0_8 == temp20_1 ? 1 : 0) << 0xe
100144d6                                                                      | 0x3800):1.b & 1) != 0)
100144da                                                                  var_1ac = *edi_5
100144e1                                                                  var_1a8 = edi_5[1]
100144e8                                                                  var_1a4 = edi_5[2]
100144ef                                                                  var_1b0_1 = fconvert.s(st0_8)
100144f3                                                                  var_1a0 = *ebp_3
100144fa                                                                  var_19c = ebp_3[1]
10014501                                                                  var_198 = ebp_3[2]
10014501                                                              
1001450b                                                              long double st0_9 =
1001450b                                                                  j_sub_10013ba0(ebx_6, esi_6)
10014510                                                              long double temp21_1 =
10014510                                                                  fconvert.t(var_1b0_1)
10014510                                                              st0_9 - temp21_1
10014510                                                              
1001451c                                                              if ((((st0_9 < temp21_1 ? 1 : 0) << 8
1001451c                                                                      | (is_unordered.t(st0_9, temp21_1) ? 1
1001451c                                                                      : 0) << 0xa
1001451c                                                                      | (st0_9 == temp21_1 ? 1 : 0) << 0xe
1001451c                                                                      | 0x3800):1.b & 1) != 0)
10014520                                                                  var_1ac = *ebx_6
10014527                                                                  var_1a8 = ebx_6[1]
1001452e                                                                  var_1a4 = ebx_6[2]
10014534                                                                  var_1b0_1 = fconvert.s(st0_9)
10014538                                                                  var_1a0 = *esi_6
1001453f                                                                  var_19c = esi_6[1]
10014546                                                                  var_198 = esi_6[2]
10014546                                                              
10014550                                                              x87_r7_48 = j_sub_10013ba0(ebx_6, ebp_3)
10014555                                                              long double temp22_1 =
10014555                                                                  fconvert.t(var_1b0_1)
10014555                                                              x87_r7_48 - temp22_1
10014555                                                              
10014561                                                              if (((
10014561                                                                      (x87_r7_48 < temp22_1 ? 1 : 0) << 8 | (
10014561                                                                      is_unordered.t(x87_r7_48, temp22_1) ? 1
10014561                                                                      : 0) << 0xa
10014561                                                                      | (x87_r7_48 == temp22_1 ? 1 : 0)
10014561                                                                      << 0xe | 0x3800):1.b & 1) != 0)
10014565                                                                  var_1b0_1 = fconvert.s(x87_r7_48)
10014569                                                                  var_1ac = *ebx_6
10014570                                                                  var_1a8 = ebx_6[1]
10014574                                                                  edx_30 = ebx_6[2]
10014574                                                                  goto label_10014577
1001459f                                                          k = k_1 + 1
100145a3                                                          k_1 = k
100145ac                                                      while (k s< var_174_1[2])
100145ac                                                  
100145bd                                                  int32_t eax_70 = var_118_1 + 1
100145c1                                                  var_118_1 = eax_70
100145c1                                                  
100145ca                                                  if (eax_70 s>= var_178_1[2])
100145ca                                                      break
100145ca                                                  
10013e63                                                  ecx_6 = var_174_1
10013e67                                                  edi_3 = var_178_1
10013e67                                              
100145d0                                              j = j_1
100145d7                                              ebx_4 = var_110_1
100145de                                              esi_4 = var_10c
100145e5                                              edi_3 = var_178_1
100145e5                                      
100145ea                                      j += 1
100145ed                                      j_1 = j
100145f4                                  while (j s< *(esi_4 + 4))
100145f4                          
10014601                          i = i_1 + 1
10014604                          i_1 = i
10014608                      while (i s< *(ebx_4 + 4))
10014608                      
1001460e                      long double x87_r7_52 = fconvert.t(var_1b0_1)
10014612                      long double temp5_1 = fconvert.t(4f)
10014612                      x87_r7_52 - temp5_1
10014618                      i.w = (x87_r7_52 < temp5_1 ? 1 : 0) << 8
10014618                          | (is_unordered.t(x87_r7_52, temp5_1) ? 1 : 0) << 0xa
10014618                          | (x87_r7_52 == temp5_1 ? 1 : 0) << 0xe
10014618                      
1001461d                      if ((i:1.b & 0x41) == 0)
1001461d                          goto label_10014623
1001461d              
10013dbe              break
10013dbe  
10014ac6  return 0

10014ac7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10014ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10014e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10014e60    void sub_10014e60(int32_t arg1, int32_t arg2)

10014e7c  if (j_sub_100116a0(arg1) != 0 && j_sub_100116a0(arg2) != 0)
10014e9f      float ecx_1 = *(data_10064068 + 0x10)
10014ea4      float var_108_1 = ecx_1
10014ea9      long double st0_1 = j_sub_10011560(ecx_1)
10014eae      int32_t eax_3 = data_1006694c
10014eb6      float var_70_1 = fconvert.s(st0_1)
10014ec3      void* edi_3 = arg1 * 0x30 + eax_3
10014ec8      void* ebx_3 = arg2 * 0x30 + eax_3
10014ecd      int32_t i = 0
10014ed2      int32_t* ebp_1 = nullptr
10014ed6      void* var_98_1 = edi_3
10014edd      void* var_bc_1 = ebx_3
10014ee1      int32_t* var_94_1 = nullptr
10014ee8      int32_t* var_e4_1 = nullptr
10014eec      float var_88_1 = -9999f
10014ef7      float var_a8_1 = -9999f
10014eff      int32_t i_2 = 0
10014eff      
10014f03      if (*(edi_3 + 4) s> 0)
100150b6          int32_t var_104
100150b6          int32_t var_f4
100150b6          int32_t var_c0
100150b6          
100150b6          do
10014f14              int32_t eax_7 = *(data_10066944 + ((*(edi_3 + 8) + i) << 2))
10014f1e              int32_t eax_8
10014f1e              int32_t edx_2
10014f1e              edx_2:eax_8 = sx.q(eax_7)
10014f2b              int32_t* ecx_3 = data_1006693c + ((eax_8 ^ edx_2) - edx_2) * 0x18
10014f2e              int32_t* var_c4_1 = ecx_3
10014f2e              
10014f36              if ((ecx_3[1].b & 2) != 0)
10014f3f                  int32_t j = 0
10014f43                  int32_t j_1 = 0
10014f43                  
10014f47                  if (*(ebx_3 + 4) s> 0)
1001509b                      do
10014f57                          int32_t eax_14 = *(data_10066944 + ((*(ebx_3 + 8) + j) << 2))
10014f61                          int32_t eax_15
10014f61                          int32_t edx_6
10014f61                          edx_6:eax_15 = sx.q(eax_14)
10014f66                          int32_t edx_7 = ((eax_15 ^ edx_6) - edx_6) * 3
10014f69                          int32_t eax_18 = data_1006693c
10014f6e                          int32_t* esi_2 = eax_18 + (edx_7 << 3)
10014f71                          eax_18.b = *(eax_18 + (edx_7 << 3) + 4)
10014f71                          
10014f77                          if ((eax_18.b & 2) != 0)
10014f80                              int32_t k = 0
10014f84                              int32_t k_1 = 0
10014f84                              
10014f8b                              if (ecx_3[2] s> 0)
10015076                                  do
10014f94                                      int32_t ebx_4 = data_10066934
10014f9a                                      int32_t edi_4 = esi_2[2]
10014fa1                                      int32_t ebp_2 = *(ebx_4 + ((ecx_3[3] + k) << 2))
10014fa4                                      int32_t var_c8_1 = 0
10014fa4                                      
10014fac                                      if (edi_4 s> 0)
10014fb4                                          int32_t eax_20
10014fb4                                          int32_t edx_9
10014fb4                                          edx_9:eax_20 = sx.q(ebp_2)
10014fbe                                          int32_t* ebx_5 = ebx_4 + (esi_2[3] << 2)
10014fda                                          bool cond:9_1
10014fda                                          
10014fda                                          do
10014fc3                                              int32_t eax_22
10014fc3                                              int32_t edx_11
10014fc3                                              edx_11:eax_22 = sx.q(*ebx_5)
10014fc3                                              
10014fca                                              if ((eax_20 ^ edx_9) - edx_9
10014fca                                                      == (eax_22 ^ edx_11) - edx_11)
10014fe8                                                  float var_90_1 =
10014fe8                                                      fconvert.s(j_sub_10011090(var_c4_1))
10014ff0                                                  long double st0_3 = j_sub_10011090(esi_2)
10014ff5                                                  long double x87_r6_1 =
10014ff5                                                      fconvert.t(var_90_1)
10014ffc                                                  long double temp2_1 = fconvert.t(var_88_1)
10014ffc                                                  x87_r6_1 - temp2_1
10014ffc                                                  
1001500b                                                  if ((((x87_r6_1 < temp2_1 ? 1 : 0) << 8
1001500b                                                          | (is_unordered.t(x87_r6_1, temp2_1)
1001500b                                                          ? 1 : 0) << 0xa
1001500b                                                          | (x87_r6_1 == temp2_1 ? 1 : 0) << 0xe
1001500b                                                          | 0x3800):1.b & 0x41) == 0)
1001500d                                                      long double temp3_1 =
1001500d                                                          fconvert.t(var_a8_1)
1001500d                                                      st0_3 - temp3_1
1001500d                                                      
10015016                                                      if ((((st0_3 < temp3_1 ? 1 : 0) << 8 | (
10015016                                                              is_unordered.t(st0_3, temp3_1) ? 1 : 0)
10015016                                                              << 0xa
10015016                                                              | (st0_3 == temp3_1 ? 1 : 0) << 0xe
10015016                                                              | 0x3800):1.b & 0x41) == 0)
1001502d                                                          var_88_1 = var_90_1
10015034                                                          var_a8_1 = fconvert.s(st0_3)
10015038                                                          var_94_1 = var_c4_1
1001503f                                                          var_e4_1 = esi_2
10015043                                                          var_f4 = eax_7
10015047                                                          var_c0 = eax_14
1001504b                                                          var_104 = ebp_2
1001504b                                                  
1001500b                                                  break
1001500b                                              
10014fd0                                              ebx_5 = &ebx_5[1]
10014fd4                                              cond:9_1 = var_c8_1 + 1 s< edi_4
10014fd6                                              var_c8_1 += 1
10014fda                                          while (cond:9_1)
10014fda                                      
1001505c                                      if (var_c8_1 != esi_2[2])
1001507e                                          ecx_3 = var_c4_1
1001507e                                          break
1001507e                                      
1001505e                                      ecx_3 = var_c4_1
10015069                                      k = k_1 + 1
1001506d                                      k_1 = k
10015076                                  while (k s< ecx_3[2])
10015076                                  
10015082                                  ebp_1 = var_94_1
10015089                                  j = j_1
1001508d                                  ebx_3 = var_bc_1
1001508d                          
10015094                          j += 1
10015097                          j_1 = j
1001509b                      while (j s< *(ebx_3 + 4))
1001509b                      
100150a1                      i = i_2
100150a1                  
100150a5                  edi_3 = var_98_1
100150a5              
100150af              i += 1
100150b2              i_2 = i
100150b6          while (i s< *(edi_3 + 4))
100150b6          
100150ca          if (ebp_1 != 0 && var_e4_1 != 0)
100150dc              int32_t eax_35
100150dc              int32_t edx_14
100150dc              edx_14:eax_35 = sx.q(var_104)
100150e1              int32_t edi_8 = (eax_35 ^ edx_14) - edx_14
100150e7              int32_t esi_4 = data_1006691c
100150ed              int32_t ecx_12 = data_1006692c + (edi_8 << 3)
100150f0              int32_t edx_15
100150f0              edx_15.b = var_104 s< 0
100150f6              int32_t eax_37 = *(ecx_12 + (edx_15 << 2)) * 3
100150f9              float ebx_6 = *(esi_4 + (eax_37 << 2))
100150fc              void* eax_38 = esi_4 + (eax_37 << 2)
10015103              float ebx_7 = *(eax_38 + 4)
10015106              float eax_39 = *(eax_38 + 8)
10015111              int32_t eax_40
10015111              eax_40.b = edx_15 == 0
1001511b              int32_t ecx_14 = *(ecx_12 + (eax_40 << 2)) * 3
1001511e              float edx_16 = *(esi_4 + (ecx_14 << 2))
10015121              void* eax_41 = esi_4 + (ecx_14 << 2)
10015130              float ecx_15 = *(eax_41 + 4)
10015133              float edx_17 = *(eax_41 + 8)
10015146              float var_100 = fconvert.s(fconvert.t(edx_16) + fconvert.t(ebx_6))
10015159              float var_fc_1 = fconvert.s(fconvert.t(ecx_15) + fconvert.t(ebx_7))
10015165              float var_f8_1 = fconvert.s(fconvert.t(edx_17) + fconvert.t(eax_39))
10015169              j_sub_10043570(&var_100, 0.5f, &var_100)
10015186              float var_f0 = var_100
10015191              int32_t ecx_17 = data_10066924
10015197              int32_t eax_43
10015197              eax_43.b = var_f4 s< 0
100151a9              float* ebx_9 = ecx_17 + (eax_43 ^ *ebp_1) * 0x14
100151b6              int32_t eax_45
100151b6              eax_45.b = var_c0 s< 0
100151b9              int32_t esi_6 = *var_e4_1
100151bb              float var_6c = fconvert.s(fconvert.t(edx_16) - fconvert.t(ebx_6))
100151cf              float var_68_1 = fconvert.s(fconvert.t(ecx_15) - fconvert.t(ebx_7))
100151de              float* esi_7 = ecx_17 + (eax_45 ^ esi_6) * 0x14
100151e1              float var_64_1 = fconvert.s(fconvert.t(edx_17) - fconvert.t(eax_39))
100151f9              float var_60
100151f9              j_sub_100434b0(ebx_9, &var_6c, &var_60)
10015206              j_sub_10043290(&var_60)
10015224              j_sub_10043380(&var_100, -32f, &var_60, &var_100)
10015240              j_sub_10043380(&var_f0, 32f, &var_60, &var_f0)
1001524b              int32_t eax_48
1001524b              int16_t x87control
1001524b              int16_t x87control_1
1001524b              eax_48, x87control_1 = __ftol(x87control, fconvert.t(ebx_9[2]))
10015250              int32_t eax_49
10015250              int32_t edx_22
10015250              edx_22:eax_49 = sx.q(eax_48)
10015253              int32_t var_108_2 = 1
10015261              long double x87_r7_18 = float.t((eax_49 ^ edx_22) - edx_22)
10015265              long double temp0_1 = fconvert.t(0.10000000000000001)
10015265              x87_r7_18 - temp0_1
1001526b              int32_t eax_51
1001526b              eax_51.w = (x87_r7_18 < temp0_1 ? 1 : 0) << 8
1001526b                  | (is_unordered.t(x87_r7_18, temp0_1) ? 1 : 0) << 0xa
1001526b                  | (x87_r7_18 == temp0_1 ? 1 : 0) << 0xe
1001526b              
10015270              if ((eax_51:1.b & 1) == 0)
10015272                  var_108_2 = 0
10015272              
1001527d              int32_t eax_52
1001527d              int16_t x87control_2
1001527d              eax_52, x87control_2 = __ftol(x87control_1, fconvert.t(esi_7[2]))
10015282              int32_t eax_53
10015282              int32_t edx_23
10015282              edx_23:eax_53 = sx.q(eax_52)
1001528b              long double x87_r7_20 = float.t((eax_53 ^ edx_23) - edx_23)
1001528f              long double temp1_1 = fconvert.t(0.10000000000000001)
1001528f              x87_r7_20 - temp1_1
10015295              int32_t eax_55
10015295              eax_55.w = (x87_r7_20 < temp1_1 ? 1 : 0) << 8
10015295                  | (is_unordered.t(x87_r7_20, temp1_1) ? 1 : 0) << 0xa
10015295                  | (x87_r7_20 == temp1_1 ? 1 : 0) << 0xe
1001529a              int32_t eax_56
1001529a              
1001529a              if ((eax_55:1.b & 1) == 0)
100152a3                  eax_56 = 0
1001529a              else
1001529c                  eax_56 = 1
1001529c              
100152ab              if (var_108_2 != 0)
100152b3                  if (eax_56 == 0)
10015423                      label_10015423:
10015423                      
10015427                      if ((var_e4_1[1].b & 4) == 0)
10015555                          float var_b0_1 = 99999f
10015560                          int32_t i_1 = 0
10015564                          float var_b8
10015564                          float var_b4
10015564                          
10015564                          if (ebp_1[2] s> 0)
10015632                              do
10015578                                  int32_t ecx_38 = data_1006692c
1001557e                                  int32_t eax_85
1001557e                                  int32_t edx_45
1001557e                                  edx_45:eax_85 =
1001557e                                      sx.q(*(data_10066934 + ((ebp_1[3] + i_1) << 2)))
10015583                                  int32_t esi_13 = (eax_85 ^ edx_45) - edx_45
10015585                                  int32_t edx_46 = data_1006691c
1001558e                                  int32_t eax_87 = *(ecx_38 + (esi_13 << 3)) * 3
10015594                                  float ebx_11 = *(edx_46 + (eax_87 << 2) + 4)
1001559f                                  float eax_89 = *(edx_46 + (eax_87 << 2) + 8)
100155aa                                  int32_t ecx_39 = *(ecx_38 + (esi_13 << 3) + 4) * 3
100155b0                                  void* eax_91 = edx_46 + (ecx_39 << 2)
100155b9                                  float edx_47 = *(eax_91 + 4)
100155bc                                  float eax_92 = *(eax_91 + 8)
100155cc                                  float var_a4 = fconvert.s(
100155cc                                      fconvert.t(*(edx_46 + (ecx_39 << 2)))
100155cc                                      + fconvert.t(*(edx_46 + (eax_87 << 2))))
100155e0                                  float var_a0_1 =
100155e0                                      fconvert.s(fconvert.t(edx_47) + fconvert.t(ebx_11))
100155ef                                  float var_9c_1 =
100155ef                                      fconvert.s(fconvert.t(eax_92) + fconvert.t(eax_89))
100155f6                                  j_sub_10043570(&var_a4, 0.5f, &var_a4)
100155fb                                  long double x87_r7_34 = fconvert.t(var_9c_1)
10015602                                  long double temp6_1 = fconvert.t(var_b0_1)
10015602                                  x87_r7_34 - temp6_1
10015602                                  
1001560e                                  if ((((x87_r7_34 < temp6_1 ? 1 : 0) << 8
1001560e                                          | (is_unordered.t(x87_r7_34, temp6_1) ? 1 : 0)
1001560e                                          << 0xa | (x87_r7_34 == temp6_1 ? 1 : 0) << 0xe):1.b & 1)
1001560e                                          != 0)
1001561c                                      var_b8 = var_a4
10015620                                      var_b4 = var_a0_1
10015624                                      var_b0_1 = var_9c_1
10015628                                      var_108_2 = esi_13
10015628                                  
1001562f                                  i_1 += 1
10015632                              while (i_1 s< ebp_1[2])
10015632                          
1001564c                          float* eax_98 = data_10066924 + *ebp_1 * 0x14
1001565e                          float var_84
1001565e                          j_sub_10043380(&var_b8, 5f, eax_98, &var_84)
10015685                          float var_54 = var_84
10015695                          int32_t var_80
10015695                          int32_t var_50_1 = var_80
1001569c                          float var_7c
1001569c                          float var_7c_1 = fconvert.s(fconvert.t(var_7c) + fconvert.t(5f))
100156bc                          float var_4c_1 = fconvert.s(fconvert.t(var_7c) - fconvert.t(100f))
100156dd                          void var_48
100156dd                          void var_24
100156dd                          __builtin_memcpy(dest: &var_48, 
100156dd                              src: j_sub_1001b260(&var_24, &var_84, &var_54, 2, 
100156dd                                  0xffffffff), 
100156dd                              n: 0x24)
100156ec                          float var_38
100156ec                          float var_38_1 = fconvert.s(fconvert.t(var_38) + fconvert.t(1f))
100156f4                          float var_40
100156f4                          int32_t eax_100 = j_sub_1001ae60(&var_40)
10015704                          int32_t ebx_12 = 0
1001570c                          void* eax_103 = eax_100 * 0x30 + data_1006694c
1001570e                          int32_t esi_15 = *(eax_103 + 4)
1001570e                          
10015713                          if (esi_15 s> 0)
1001571e                              int32_t* ebp_3 = data_10066944 + (*(eax_103 + 8) << 2)
1001571e                              
10015771                              do
1001572a                                  int32_t eax_105
1001572a                                  int32_t edx_52
1001572a                                  edx_52:eax_105 = sx.q(*ebp_3)
10015732                                  int32_t* eax_109 =
10015732                                      data_1006693c + ((eax_105 ^ edx_52) - edx_52) * 0x18
10015732                                  
10015739                                  if ((eax_109[1].b & 2) != 0)
1001574c                                      int32_t eax_113
1001574c                                      eax_113, x87control_2 = __ftol(x87control_2, 
1001574c                                          fconvert.t(
1001574c                                              *(data_10066924 + *eax_109 * 0x14 + 8)))
10015751                                      int32_t eax_114
10015751                                      int32_t edx_54
10015751                                      edx_54:eax_114 = sx.q(eax_113)
1001575a                                      long double x87_r7_40 =
1001575a                                          float.t((eax_114 ^ edx_54) - edx_54)
1001575e                                      long double temp7_1 = fconvert.t(0.10000000000000001)
1001575e                                      x87_r7_40 - temp7_1
10015764                                      int32_t eax_116
10015764                                      eax_116.w = (x87_r7_40 < temp7_1 ? 1 : 0) << 8
10015764                                          | (is_unordered.t(x87_r7_40, temp7_1) ? 1 : 0)
10015764                                          << 0xa | (x87_r7_40 == temp7_1 ? 1 : 0) << 0xe
10015764                                      
10015769                                      if ((eax_116:1.b & 1) != 0)
10015769                                          break
10015769                                  
1001576b                                  ebx_12 += 1
1001576c                                  ebp_3 = &ebp_3[1]
10015771                              while (ebx_12 s< esi_15)
10015771                          
10015784                          if (ebx_12 s>= esi_15 && eax_100 != arg1
10015784                                  && j_sub_10011700(arg1, eax_100) == 0
10015784                                  && j_sub_10011700(eax_100, arg1) == 0)
100157b5                              long double x87_r7_42 =
100157b5                                  fconvert.t(var_7c_1) - fconvert.t(var_38_1)
100157bc                              long double temp8_1 = fconvert.t(var_70_1)
100157bc                              x87_r7_42 - temp8_1
100157c3                              int32_t eax_118
100157c3                              eax_118.w = (x87_r7_42 < temp8_1 ? 1 : 0) << 8
100157c3                                  | (is_unordered.t(x87_r7_42, temp8_1) ? 1 : 0) << 0xa
100157c3                                  | (x87_r7_42 == temp8_1 ? 1 : 0) << 0xe
100157c3                              
100157c8                              if ((eax_118:1.b & 1) != 0)
100157ce                                  int32_t* eax_119 = j_sub_10010ff0()
100157ce                                  
100157d5                                  if (eax_119 != 0)
100157e3                                      *eax_119 = eax_100
100157e5                                      eax_119[1] = var_f4
100157e8                                      eax_119[2] = var_108_2
100157ef                                      eax_119[3] = var_b8
100157f6                                      eax_119[4] = var_b4
100157fd                                      eax_119[5] = var_b0_1
10015807                                      eax_119[6] = var_40
10015811                                      int32_t var_3c
10015811                                      eax_119[7] = var_3c
10015820                                      eax_119[8] = var_38_1
10015823                                      eax_119[9] = 6
1001582a                                      eax_119[0xa].w = 0xa
10015839                                      eax_119[0xb] = *(data_1006675c + (arg1 << 2))
10015842                                      *(data_1006675c + (arg1 << 2)) = eax_119
1001584c                                      data_10066778 += 1
10015852                                      int32_t* eax_120 = j_sub_10010ff0()
10015852                                      
1001585b                                      if (eax_120 != 0)
10015869                                          *eax_120 = arg1
1001586b                                          eax_120[1] = var_f4
1001586e                                          eax_120[2] = var_108_2
10015878                                          eax_120[3] = var_40
10015882                                          eax_120[4] = var_3c
10015893                                          eax_120[5] = var_38_1
100158a2                                          j_sub_10043380(&var_b8, -5f, eax_98, &eax_120[6])
100158aa                                          long double x87_r7_44 =
100158aa                                              fconvert.t(eax_120[8]) + fconvert.t(10f)
100158b0                                          eax_120[9] = 5
100158b7                                          eax_120[0xa].w = 0xa
100158be                                          eax_120[8] = fconvert.s(x87_r7_44)
100158ca                                          eax_120[0xb] = *(data_1006675c + (eax_100 << 2))
100158d2                                          *(data_1006675c + (eax_100 << 2)) = eax_120
100158dd                                          data_1006678c += 1
10015427                      else
1001542d                          int32_t* eax_72 = j_sub_10010ff0()
1001542d                          
10015436                          if (eax_72 != 0)
10015447                              *eax_72 = arg2
10015449                              eax_72[1] = var_f4
1001544c                              eax_72[2] = edi_8
10015453                              eax_72[3] = var_100
1001545a                              eax_72[4] = var_fc_1
10015461                              eax_72[5] = var_f8_1
1001546d                              eax_72[6] = var_f0
10015473                              eax_72[7] = var_fc_1
1001547a                              eax_72[8] = var_f8_1
1001548d                              eax_72[8] = fconvert.s(fconvert.t(var_f8_1) + fconvert.t(16f))
10015490                              j_sub_10043380(&eax_72[6], -15f, ebx_9, &eax_72[6])
100154a1                              eax_72[9] = 6
100154a8                              eax_72[0xa].w = 0xa
100154b7                              eax_72[0xb] = *(data_1006675c + (arg1 << 2))
100154c0                              *(data_1006675c + (arg1 << 2)) = eax_72
100154ca                              data_10066778 += 1
100154d0                              int32_t* eax_77 = j_sub_10010ff0()
100154d0                              
100154d7                              if (eax_77 != 0)
100154e1                                  *eax_77 = arg1
100154e3                                  eax_77[1] = var_c0
100154e6                                  eax_77[2] = edi_8
100154ee                                  eax_77[3] = var_f0
100154f5                                  eax_77[4] = var_fc_1
100154fc                                  eax_77[5] = var_f8_1
10015503                                  eax_77[6] = var_100
1001550a                                  eax_77[7] = var_fc_1
10015511                                  eax_77[8] = var_f8_1
1001551b                                  eax_77[9] = 7
10015522                                  eax_77[0xa].w = 0xa
10015532                                  eax_77[0xb] = *(data_1006675c + (arg2 << 2))
1001553b                                  *(data_1006675c + (arg2 << 2)) = eax_77
10015544                                  data_100667b8 += 1
100152b3                  else
100152cb                      long double x87_r7_24 = fconvert.t(*esi_7) * fconvert.t(*ebx_9)
100152cb                          + fconvert.t(esi_7[2]) * fconvert.t(ebx_9[2])
100152cb                          + fconvert.t(esi_7[1]) * fconvert.t(ebx_9[1])
100152cd                      long double temp4_1 = fconvert.t(0.69999999999999996)
100152cd                      x87_r7_24 - temp4_1
100152d3                      eax_56.w = (x87_r7_24 < temp4_1 ? 1 : 0) << 8
100152d3                          | (is_unordered.t(x87_r7_24, temp4_1) ? 1 : 0) << 0xa
100152d3                          | (x87_r7_24 == temp4_1 ? 1 : 0) << 0xe
100152d3                      
100152d8                      if ((eax_56:1.b & 0x41) != 0)
100152d8                          goto label_10015423
100152d8                      
100152e5                      int32_t eax_57
100152e5                      eax_57, x87control_2 = __ftol(x87control_2, fconvert.t(var_64_1))
100152ea                      int32_t eax_58
100152ea                      int32_t edx_24
100152ea                      edx_24:eax_58 = sx.q(eax_57)
100152f3                      long double x87_r7_26 = float.t((eax_58 ^ edx_24) - edx_24)
100152f7                      long double temp5_1 = fconvert.t(0.69999999999999996)
100152f7                      x87_r7_26 - temp5_1
100152fd                      int32_t eax_60
100152fd                      eax_60.w = (x87_r7_26 < temp5_1 ? 1 : 0) << 8
100152fd                          | (is_unordered.t(x87_r7_26, temp5_1) ? 1 : 0) << 0xa
100152fd                          | (x87_r7_26 == temp5_1 ? 1 : 0) << 0xe
100152fd                      
10015302                      if ((eax_60:1.b & 1) == 0)
10015302                          goto label_10015423
10015302                      
10015308                      int32_t* eax_61 = j_sub_10010ff0()
10015308                      
10015311                      if (eax_61 != 0)
10015322                          *eax_61 = arg2
10015324                          eax_61[1] = var_f4
10015327                          eax_61[2] = edi_8
1001532e                          eax_61[3] = var_100
10015338                          eax_61[4] = var_fc_1
1001534b                          eax_61[5] = var_f8_1
1001534e                          j_sub_10043380(&var_f0, -3f, ebx_9, &eax_61[6])
1001535f                          eax_61[9] = 6
10015366                          eax_61[0xa].w = 0xa
10015376                          eax_61[0xb] = *(data_1006675c + (arg1 << 2))
1001537f                          *(data_1006675c + (arg1 << 2)) = eax_61
10015389                          data_10066778 += 1
1001538f                          int32_t* eax_65 = j_sub_10010ff0()
1001538f                          
10015398                          if (eax_65 != 0)
100153a9                              *eax_65 = arg1
100153ab                              eax_65[1] = var_c0
100153ae                              eax_65[2] = edi_8
100153b5                              eax_65[3] = var_f0
100153bf                              eax_65[4] = var_fc_1
100153d2                              eax_65[5] = var_f8_1
100153d5                              j_sub_10043380(&var_100, -3f, ebx_9, &eax_65[6])
100153e1                              eax_65[9] = 6
100153e8                              eax_65[0xa].w = 0xa
100153f8                              eax_65[0xb] = *(data_1006675c + (arg2 << 2))
10015402                              *(data_1006675c + (arg2 << 2)) = eax_65
1001540c                              data_10066778 += 1

100158fd                                                                                         90 90 90                               ...
10015900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100159a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100159c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100159e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10015ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10015bb0    int32_t sub_10015bb0()

10015bb0  int32_t ebp
10015bb0  int32_t var_4 = ebp
10015bbc  int32_t __saved_ebx_1
10015bbc  int32_t __saved_ebx = __saved_ebx_1
10015bbe  int32_t __saved_esi_1
10015bbe  int32_t __saved_esi = __saved_esi_1
10015bbf  int32_t __saved_edi_1
10015bbf  int32_t __saved_edi = __saved_edi_1
10015bc0  int32_t* eax = j_sub_100069a0()
10015bc5  int32_t* ebx = eax
10015bcd  int32_t* var_80 = ebx
10015bcd  
10015bd1  if (eax != 0)
10015bdd      while (true)
10015bdd          char* var_c4_1 = "classname"
10015be3          char* eax_1 = j_sub_10006760(ebx, "classname")
10015be3          
10015bed          if (eax_1 != 0)
10015bf3              char* esi = "misc_teleporter"
10015bf8              int32_t eax_3
10015bf8              
10015bf8              while (true)
10015bf8                  char edx_1 = *eax_1
10015bfc                  char temp0_1 = *esi
10015bfc                  bool c_1 = edx_1 u< temp0_1
10015bfc                  
10015bfe                  if (edx_1 == temp0_1)
10015c02                      if (edx_1 == 0)
10015c18                          eax_3 = 0
10015c1a                          break
10015c1a                      
10015c04                      edx_1 = eax_1[1]
10015c09                      char temp3_1 = esi[1]
10015c09                      c_1 = edx_1 u< temp3_1
10015c09                      
10015c0c                      if (edx_1 == temp3_1)
10015c0e                          eax_1 = &eax_1[2]
10015c11                          esi = &esi[2]
10015c11                          
10015c16                          if (edx_1 != 0)
10015c16                              continue
10015c16                          
10015c18                          eax_3 = 0
10015c1a                          break
10015c1a                  
10015c1c                  bool c_2 = unimplemented  {sbb eax, eax}
10015c1e                  eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
10015c1e                  break
10015c1e              
10015c23              if (eax_3 == 0)
10015c2d                  float var_8c
10015c2d                  int32_t* var_c4_2 = &var_8c
10015c2e                  char* var_c8_2 = "origin"
10015c33                  int32_t* var_cc_1 = ebx
10015c3e                  char* var_78
10015c3e                  
10015c3e                  if (j_sub_100067e0() != 0)
10015c5a                      char* var_c4_4 = "target"
10015c60                      char* eax_5 = j_sub_10006760(ebx, "target")
10015c6c                      var_78 = eax_5
10015c70                      float var_88
10015c70                      float var_84
10015c70                      
10015c70                      if (eax_5 != 0)
10015ca5                          int32_t* edi = eax
10015ca5                          
10015ca9                          while (true)
10015ca9                              char* var_c4_5 = "classname"
10015caf                              char* eax_6 = j_sub_10006760(edi, "classname")
10015caf                              
10015cb9                              if (eax_6 == 0)
10015d2e                                  label_10015d2e:
10015d2e                                  edi = edi[1]
10015d2e                                  
10015d33                                  if (edi != 0)
10015d33                                      continue
10015cb9                              else
10015cbb                                  char* esi_1 = "misc_teleporter_dest"
10015cc0                                  int32_t eax_8
10015cc0                                  
10015cc0                                  while (true)
10015cc0                                      char edx_2 = *eax_6
10015cc4                                      char temp4_1 = *esi_1
10015cc4                                      bool c_3 = edx_2 u< temp4_1
10015cc4                                      
10015cc6                                      if (edx_2 == temp4_1)
10015cca                                          if (edx_2 == 0)
10015ce0                                              eax_8 = 0
10015ce2                                              break
10015ce2                                          
10015ccc                                          edx_2 = eax_6[1]
10015cd1                                          char temp7_1 = esi_1[1]
10015cd1                                          c_3 = edx_2 u< temp7_1
10015cd1                                          
10015cd4                                          if (edx_2 == temp7_1)
10015cd6                                              eax_6 = &eax_6[2]
10015cd9                                              esi_1 = &esi_1[2]
10015cd9                                              
10015cde                                              if (edx_2 != 0)
10015cde                                                  continue
10015cde                                              
10015ce0                                              eax_8 = 0
10015ce2                                              break
10015ce2                                      
10015ce4                                      bool c_4 = unimplemented  {sbb eax, eax}
10015ce6                                      eax_8 =
10015ce6                                          sbb.d(sbb.d(eax_6, eax_6, c_3), 0xffffffff, c_4)
10015ce6                                      break
10015ce6                                  
10015ceb                                  if (eax_8 != 0)
10015ceb                                      goto label_10015d2e
10015ceb                                  
10015ced                                  char* var_c4_6 = "targetname"
10015cf3                                  char* eax_9 = j_sub_10006760(edi, "targetname")
10015cf3                                  
10015cfd                                  if (eax_9 == 0)
10015cfd                                      goto label_10015d2e
10015cfd                                  
10015cff                                  char* esi_2 = eax_5
10015d01                                  int32_t eax_11
10015d01                                  
10015d01                                  while (true)
10015d01                                      char edx_3 = *eax_9
10015d05                                      char temp8_1 = *esi_2
10015d05                                      bool c_5 = edx_3 u< temp8_1
10015d05                                      
10015d07                                      if (edx_3 == temp8_1)
10015d0b                                          if (edx_3 == 0)
10015d21                                              eax_11 = 0
10015d23                                              break
10015d23                                          
10015d0d                                          edx_3 = eax_9[1]
10015d12                                          char temp11_1 = esi_2[1]
10015d12                                          c_5 = edx_3 u< temp11_1
10015d12                                          
10015d15                                          if (edx_3 == temp11_1)
10015d17                                              eax_9 = &eax_9[2]
10015d1a                                              esi_2 = &esi_2[2]
10015d1a                                              
10015d1f                                              if (edx_3 != 0)
10015d1f                                                  continue
10015d1f                                              
10015d21                                              eax_11 = 0
10015d23                                              break
10015d23                                      
10015d25                                      bool c_6 = unimplemented  {sbb eax, eax}
10015d27                                      eax_11 =
10015d27                                          sbb.d(sbb.d(eax_9, eax_9, c_5), 0xffffffff, c_6)
10015d27                                      break
10015d27                                  
10015d2c                                  if (eax_11 != 0)
10015d2c                                      goto label_10015d2e
10015d2c                                  
10015d3d                                  if (edi != 0)
10015d59                                      float var_a4
10015d59                                      float* var_c4_8 = &var_a4
10015d5a                                      char* var_c8_8 = "origin"
10015d5f                                      int32_t* var_cc_4 = edi
10015d5f                                      
10015d6a                                      if (j_sub_100067e0() != 0)
10015d94                                          float var_74 = var_a4
10015d98                                          int32_t var_c4_10 = 0xffffffff
10015d9e                                          int32_t var_a0
10015d9e                                          int32_t var_70_1 = var_a0
10015da2                                          float var_9c = fconvert.s(fconvert.t(var_9c)
10015da2                                              + fconvert.t(24f))
10015db0                                          int32_t var_c8_10 = 4
10015db6                                          float* var_cc_6 = &var_74
10015dbe                                          double var_d0
10015dbe                                          var_d0.d = &var_a4
10015dbf                                          double var_d8
10015dbf                                          void var_2c
10015dbf                                          var_d8:4.d = &var_2c
10015dc0                                          float var_6c_1 = fconvert.s(fconvert.t(var_9c)
10015dc0                                              - fconvert.t(100f))
10015dda                                          int32_t var_50
10015dda                                          __builtin_memcpy(dest: &var_50, 
10015dda                                              src: j_sub_1001b260(), n: 0x24)
10015dda                                          
10015de2                                          if (var_50 == 0)
10015e09                                              float var_48
10015e09                                              var_a4 = var_48
10015e11                                              int32_t var_44
10015e11                                              var_a0 = var_44
10015e16                                              float var_40
10015e16                                              var_9c = var_40
10015e1a                                              int32_t eax_16 = j_sub_1001ae60(&var_a4)
10015e29                                              var_d0.d = 4
10015e2d                                              float var_98 = -8f
10015e35                                              float var_94_1 = -8f
10015e3d                                              float var_90_1 = 8f
10015e45                                              float var_b0 = 8f
10015e4d                                              float var_ac_1 = 8f
10015e55                                              float var_a8_1 = 24f
10015e5d                                              float var_68
10015e5d                                              float var_5c
10015e5d                                              j_sub_1000dda0(4, &var_68, &var_5c)
10015e66                                              long double x87_r7_9 =
10015e66                                                  fconvert.t(var_98) + fconvert.t(var_8c)
10015e76                                              var_d8:4.d = 0xffffffff
10015e7c                                              var_d8.d = &var_b0
10015e7e                                              float var_94_2 = fconvert.s(
10015e7e                                                  fconvert.t(var_94_1) + fconvert.t(var_88))
10015e8a                                              float var_90_2 = fconvert.s(
10015e8a                                                  fconvert.t(var_90_1) + fconvert.t(var_84))
10015e96                                              var_b0 = fconvert.s(fconvert.t(var_b0)
10015e96                                                  + fconvert.t(var_8c))
10015ea2                                              float var_ac_2 = fconvert.s(
10015ea2                                                  fconvert.t(var_ac_1) + fconvert.t(var_88))
10015eae                                              float var_a8_2 = fconvert.s(
10015eae                                                  fconvert.t(var_a8_1) + fconvert.t(var_84))
10015eb9                                              var_98 =
10015eb9                                                  fconvert.s(x87_r7_9 - fconvert.t(var_5c))
10015ec8                                              float var_58
10015ec8                                              float var_94_3 = fconvert.s(
10015ec8                                                  fconvert.t(var_94_2) - fconvert.t(var_58))
10015ed7                                              float var_54
10015ed7                                              float var_90_3 = fconvert.s(
10015ed7                                                  fconvert.t(var_90_2) - fconvert.t(var_54))
10015ee3                                              var_b0 = fconvert.s(fconvert.t(var_b0)
10015ee3                                                  - fconvert.t(var_68))
10015eef                                              float var_64
10015eef                                              float var_ac_3 = fconvert.s(
10015eef                                                  fconvert.t(var_ac_2) - fconvert.t(var_64))
10015efb                                              float var_60
10015efb                                              float var_a8_3 = fconvert.s(
10015efb                                                  fconvert.t(var_a8_2) - fconvert.t(var_60))
10015eff                                              int32_t* i_1 = j_sub_1001c460(&var_98, var_d8)
10015f0b                                              int32_t* i = i_1
10015f0b                                              
10015f0d                                              if (i_1 != 0)
10015f95                                                  do
10015f21                                                      if (j_sub_10011670(i[1]) != 0)
10015f23                                                          int32_t esi_4 = i[1]
10015f26                                                          int32_t* eax_18 = j_sub_10010ff0()
10015f26                                                          
10015f2d                                                          if (eax_18 == 0)
10015f2d                                                              break
10015f2d                                                          
10015f31                                                          *eax_18 = eax_16
10015f33                                                          eax_18[1] = 0
10015f36                                                          eax_18[2] = 0
10015f3d                                                          eax_18[3] = var_8c
10015f44                                                          eax_18[4] = var_88
10015f4b                                                          eax_18[5] = var_84
10015f52                                                          eax_18[6] = var_a4
10015f59                                                          eax_18[7] = var_a0
10015f60                                                          eax_18[8] = var_9c
10015f63                                                          eax_18[9] = 0xa
10015f6a                                                          eax_18[0xa].w = 0x32
10015f79                                                          eax_18[0xb] =
10015f79                                                              *(data_1006675c + (esi_4 << 2))
10015f82                                                          *(data_1006675c + (esi_4 << 2)) = eax_18
10015f8b                                                          data_10066798 += 1
10015f8b                                                      
10015f90                                                      i = i[4]
10015f95                                                  while (i != 0)
10015f95                                              
10015f9c                                              j_sub_1001c3f0(i_1)
10015fa1                                              ebx = var_80
10015de2                                          else
10015de4                                              char* var_c4_11 = eax_5
10015de5                                              char* var_c8_11 =
10015de5                                                  "teleporter destination (%s) in s…"
10015dea                                              int32_t var_cc_7 = 3
10015dec                                              data_10063fe8()
10015d6a                                      else
10015d6c                                          char* var_c4_9 = eax_5
10015d6d                                          char* var_c8_9 =
10015d6d                                              "teleporter destination (%s) with…"
10015d72                                          int32_t var_cc_5 = 3
10015d74                                          data_10063fe8()
10015d74                                      
10015d6a                                      break
10015d6a                              
10015d3f                              char* var_c4_7 = eax_5
10015d40                              char* var_c8_7 = "teleporter without destination (…"
10015d45                              int32_t var_cc_3 = 3
10015d47                              data_10063fe8()
10015d50                              break
10015c70                      else
10015c79                          int32_t* var_c8_4
10015c79                          var_c8_4.q = fconvert.d(fconvert.t(var_84))
10015c90                          char* var_dc_1 = "teleporter at %1.0f %1.0f %1.0f …"
10015c95                          int32_t var_e0_1 = 3
10015c97                          data_10063fe8(3, "teleporter at %1.0f %1.0f %1.0f …", 
10015c97                              fconvert.d(fconvert.t(var_8c)), 
10015c97                              fconvert.d(fconvert.t(var_88)), var_c8_4)
10015c3e                  else
10015c44                      char* var_c4_3 = var_78
10015c45                      char* var_c8_3 = "teleporter (%s) without origin\n"
10015c4a                      int32_t var_cc_2 = 3
10015c4c                      data_10063fe8()
10015c4c          
10015fa8          int32_t* eax_21 = ebx[1]
10015fad          var_80 = eax_21
10015fad          
10015fb1          if (eax_21 == 0)
10015fb1              break
10015fb1          
10015bd9          ebx = var_80
10015bd9  
10015fbc  int32_t result = j_sub_10006920(eax)
10015bbd  var_4
10015fcb  return result

10015fcc                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
10015fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100160a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100160c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100160e0    int32_t sub_100160e0()

100160e8  int32_t var_ec = 0
100160f3  int32_t var_e8 = 0
100160fe  int32_t var_e4 = 0
10016109  int32_t* eax
10016109  int16_t x87control
10016109  eax, x87control = j_sub_100069a0()
1001610e  int32_t* edi = eax
10016110  int32_t* ebp = edi
10016112  int32_t* var_fc = edi
1001611b  int32_t* var_144 = ebp
1001611b  
1001611f  if (edi != 0)
10016125      int32_t ebx
10016125      int32_t var_1a0_1 = ebx
10016125      
10016133      while (true)
10016133          char* eax_1 = j_sub_10006760(ebp, "classname")
10016133          
1001613d          if (eax_1 != 0)
10016143              char* esi_1 = "func_plat"
10016148              int32_t eax_3
10016148              
10016148              while (true)
10016148                  char edx_1 = *eax_1
1001614a                  ebx.b = *esi_1
1001614e                  bool c_1 = edx_1 u< ebx.b
1001614e                  
10016150                  if (edx_1 == ebx.b)
10016154                      if (edx_1 == 0)
1001616c                          eax_3 = 0
1001616e                          break
1001616e                      
10016156                      edx_1 = eax_1[1]
10016159                      ebx.b = esi_1[1]
1001615e                      c_1 = edx_1 u< ebx.b
1001615e                      
10016160                      if (edx_1 == ebx.b)
10016162                          eax_1 = &eax_1[2]
10016165                          esi_1 = &esi_1[2]
10016165                          
1001616a                          if (edx_1 != 0)
1001616a                              continue
1001616a                          
1001616c                          eax_3 = 0
1001616e                          break
1001616e                  
10016170                  bool c_2 = unimplemented  {sbb eax, eax}
10016172                  eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
10016172                  break
10016172              
10016177              if (eax_3 == 0)
10016183                  void* eax_4 = j_sub_10006760(ebp, "model")
10016183                  
1001618d                  if (eax_4 != 0)
100161a6                      int32_t eax_6 = sub_10044455(eax_4 + 1)
100161a6                      
100161b7                      if (eax_6 s> 0)
100161e6                          int32_t var_194
100161e6                          float var_184
100161e6                          float var_138
100161e6                          j_sub_10005e60(eax_6, &var_ec, &var_184, &var_194, &var_138)
100161e6                          unimplemented  {call j_sub_10005e60}
10016206                          int32_t var_130
10016206                          int32_t var_4c_1 = var_130
1001620d                          float var_10c = var_138
10016214                          int32_t var_134
10016214                          int32_t var_108_1 = var_134
1001621b                          int32_t var_104_1 = var_130
10016222                          j_sub_100068a0(ebp, "lip")
10016222                          unimplemented  {call j_sub_100068a0}
10016227                          float var_188 =
10016227                              fconvert.s(unimplemented  {fst dword [esp+0x38], st0})
1001622b                          long double temp2_1 = fconvert.t(0f)
1001622b                          unimplemented  {fcomp st0, dword [&data_10058000]} f- temp2_1
1001622b                          bool c0_1 =
1001622b                              unimplemented  {fcomp st0, dword [&data_10058000]} f< temp2_1
1001622b                          bool c2_1 = is_unordered.t(
1001622b                              unimplemented  {fcomp st0, dword [&data_10058000]}, temp2_1)
1001622b                          bool c3_1 =
1001622b                              unimplemented  {fcomp st0, dword [&data_10058000]} f== temp2_1
1001622b                          unimplemented  {fcomp st0, dword [&data_10058000]}
10016239                          int16_t top
10016239                          
10016239                          if ((((c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa
10016239                                  | (c3_1 ? 1 : 0) << 0xe | ((top - 1) & 7) << 0xb):1.b & 0x40)
10016239                                  != 0)
1001623b                              var_188 = 8f
1001623b                          
10016249                          j_sub_100068a0(ebp, "height")
10016249                          unimplemented  {call j_sub_100068a0}
1001624e                          float var_160_1 =
1001624e                              fconvert.s(unimplemented  {fst dword [esp+0x4c], st0})
10016252                          long double temp3_1 = fconvert.t(0f)
10016252                          unimplemented  {fcomp st0, dword [&data_10058000]} f- temp3_1
10016252                          bool c0_2 =
10016252                              unimplemented  {fcomp st0, dword [&data_10058000]} f< temp3_1
10016252                          bool c2_2 = is_unordered.t(
10016252                              unimplemented  {fcomp st0, dword [&data_10058000]}, temp3_1)
10016252                          bool c3_2 =
10016252                              unimplemented  {fcomp st0, dword [&data_10058000]} f== temp3_1
10016252                          unimplemented  {fcomp st0, dword [&data_10058000]}
10016252                          int16_t top_5 = top - 1
10016252                          
10016260                          if ((((c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
10016260                                  | (c3_2 ? 1 : 0) << 0xe | (top_5 & 7) << 0xb):1.b & 0x40) != 0)
10016262                              unimplemented  {fld st0, dword [esp+0x18]}
10016266                              unimplemented  {fsub st0, dword [esp+0x28]}
1001626a                              unimplemented  {fsub st0, dword [esp+0x1c]}
1001626e                              float var_160_2 =
1001626e                                  fconvert.s(unimplemented  {fstp dword [esp+0x44], st0})
1001626e                              unimplemented  {fstp dword [esp+0x44], st0}
1001626e                          
10016278                          j_sub_100068a0(ebp, "speed")
10016278                          unimplemented  {call j_sub_100068a0}
1001627d                          float var_13c_1 =
1001627d                              fconvert.s(unimplemented  {fst dword [esp+0x70], st0})
10016281                          long double temp4_1 = fconvert.t(0f)
10016281                          unimplemented  {fcomp st0, dword [&data_10058000]} f- temp4_1
10016281                          bool c0_3 =
10016281                              unimplemented  {fcomp st0, dword [&data_10058000]} f< temp4_1
10016281                          bool c2_3 = is_unordered.t(
10016281                              unimplemented  {fcomp st0, dword [&data_10058000]}, temp4_1)
10016281                          bool c3_3 =
10016281                              unimplemented  {fcomp st0, dword [&data_10058000]} f== temp4_1
10016281                          unimplemented  {fcomp st0, dword [&data_10058000]}
10016281                          
1001628f                          if ((((c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
1001628f                                  | (c3_3 ? 1 : 0) << 0xe | (top_5 & 7) << 0xb):1.b & 0x40) != 0)
10016291                              int32_t var_13c_2 = 0x43480000
10016291                          
10016299                          unimplemented  {fld st0, dword [esp+0xa0]}
100162a0                          unimplemented  {fsub st0, dword [esp+0x44]}
100162ba                          float var_104_2 =
100162ba                              fconvert.s(unimplemented  {fstp dword [esp+0xac], st0})
100162ba                          unimplemented  {fstp dword [esp+0xac], st0}
100162c1                          unimplemented  {fld st0, dword [esp+0x1c]}
100162c5                          unimplemented  {fadd dword [esp+0x2c]}
100162ca                          float var_178 =
100162ca                              fconvert.s(unimplemented  {fstp dword [esp+0x3c], st0})
100162ca                          unimplemented  {fstp dword [esp+0x3c], st0}
100162ce                          unimplemented  {fld st0, dword [esp+0x24]}
100162d2                          unimplemented  {fadd dword [esp+0x34]}
100162d6                          float var_174_1 =
100162d6                              fconvert.s(unimplemented  {fstp dword [esp+0x40], st0})
100162d6                          unimplemented  {fstp dword [esp+0x40], st0}
100162da                          unimplemented  {fld st0, dword [esp+0x38]}
100162de                          unimplemented  {fadd dword [esp+0x28]}
100162e2                          float var_170_1 =
100162e2                              fconvert.s(unimplemented  {fstp dword [esp+0x44], st0})
100162e2                          unimplemented  {fstp dword [esp+0x44], st0}
100162e6                          float var_128
100162e6                          j_sub_10043380(&var_10c, 0.5f, &var_178, &var_128)
100162eb                          unimplemented  {fld st0, dword [esp+0x168]}
100162f2                          unimplemented  {fsub st0, dword [esp+0xb0]}
10016306                          unimplemented  {fsubr st0, dword [esp+0x30]}
10016317                          unimplemented  {fadd dword [&data_100580cc]}
1001631d                          float var_120_1 =
1001631d                              fconvert.s(unimplemented  {fstp dword [esp+0xa4], st0})
1001631d                          unimplemented  {fstp dword [esp+0xa4], st0}
10016324                          unimplemented  {fld st0, dword [esp+0x30]}
10016328                          unimplemented  {fadd dword [esp+0x40]}
1001632c                          var_178 = fconvert.s(unimplemented  {fstp dword [esp+0x4c], st0})
1001632c                          unimplemented  {fstp dword [esp+0x4c], st0}
10016330                          unimplemented  {fld st0, dword [esp+0x34]}
10016334                          unimplemented  {fadd dword [esp+0x44]}
10016338                          float var_174_2 =
10016338                              fconvert.s(unimplemented  {fstp dword [esp+0x50], st0})
10016338                          unimplemented  {fstp dword [esp+0x50], st0}
1001633c                          unimplemented  {fld st0, dword [esp+0x48]}
10016340                          unimplemented  {fadd dword [esp+0x38]}
10016344                          float var_170_2 =
10016344                              fconvert.s(unimplemented  {fstp dword [esp+0x54], st0})
10016344                          unimplemented  {fstp dword [esp+0x54], st0}
10016348                          float var_118
10016348                          j_sub_10043380(&var_10c, 0.5f, &var_178, &var_118)
1001634d                          unimplemented  {fld st0, dword [esp+0x38]}
10016351                          unimplemented  {fadd dword [&data_100580cc]}
1001635a                          int32_t i = 0
1001635c                          float var_110_1 =
1001635c                              fconvert.s(unimplemented  {fstp dword [esp+0x94], st0})
1001635c                          unimplemented  {fstp dword [esp+0x94], st0}
10016385                          int32_t __saved_ebp
10016385                          
10016385                          do
10016363                              unimplemented  {fld st0, dword [esp+eax+0x20]}
10016367                              unimplemented  {fsub st0, dword [&data_100580c4]}
1001636d                              i += 4
10016373                              *(&var_188 + i) = fconvert.s(unimplemented  {fstp dword [esp
10016373                                  +eax+0x1c], st0})
10016373                              unimplemented  {fstp dword [esp+eax+0x1c], st0}
10016377                              unimplemented  {fld st0, dword [esp+eax+0xc]}
1001637b                              unimplemented  {fadd dword [&data_100580c4]}
10016381                              *(&__saved_ebp + i) =
10016381                                  fconvert.s(unimplemented  {fstp dword [esp+eax+0xc], st0})
10016381                              unimplemented  {fstp dword [esp+eax+0xc], st0}
10016385                          while (i s< 0xc)
10016385                          
10016387                          unimplemented  {fld st0, dword [esp+0x10]}
1001638b                          unimplemented  {fadd dword [esp+0x20]}
1001639e                          var_178 = fconvert.s(unimplemented  {fstp dword [esp+0x38], st0})
1001639e                          unimplemented  {fstp dword [esp+0x38], st0}
100163a2                          unimplemented  {fld st0, dword [esp+0x20]}
100163a6                          unimplemented  {fadd dword [esp+0x30]}
100163aa                          float var_174_3 =
100163aa                              fconvert.s(unimplemented  {fstp dword [esp+0x3c], st0})
100163aa                          unimplemented  {fstp dword [esp+0x3c], st0}
100163ae                          unimplemented  {fld st0, dword [esp+0x34]}
100163b2                          unimplemented  {fadd dword [esp+0x24]}
100163b6                          float var_170_3 =
100163b6                              fconvert.s(unimplemented  {fstp dword [esp+0x40], st0})
100163b6                          unimplemented  {fstp dword [esp+0x40], st0}
100163b6                          int16_t top_22
100163b6                          top = top_22
100163ba                          j_sub_10043570(&var_178, 0.5f, &var_178)
100163c3                          float ecx_3 = var_178
100163cb                          float var_d4_1 = var_184
100163d2                          float var_d0_1 = ecx_3
100163df                          float var_c8_1 = ecx_3
100163e6                          int32_t var_cc_1 = var_194
100163f3                          float var_b4_1 = var_174_3
100163fe                          float var_ac_1 = var_174_3
10016405                          int32_t eax_14 = var_194
10016409                          int32_t var_190
10016409                          int32_t var_b0_1 = var_190
10016410                          float edx_5 = var_184
10016414                          int32_t var_180
10016414                          int32_t var_a8_1 = var_180
1001641b                          int32_t var_c0_1 = eax_14
10016428                          float var_c4_1 = edx_5
1001642f                          float var_b8_1 = edx_5
1001643a                          int32_t var_bc_1 = eax_14
10016444                          int32_t var_a4_1 = var_190
1001644f                          ebx = 0
10016451                          int32_t var_a0_1 = var_190
10016458                          int32_t var_9c_1 = var_180
1001645f                          int32_t var_98_1 = var_180
10016466                          int32_t var_11c_1 = 0
10016466                          
10016470                          while (true)
10016470                              float var_16c
10016470                              float var_164_1
10016470                              
10016470                              if (ebx s>= 0x20)
10016513                                  unimplemented  {fld st0, dword [esp+0x94]}
10016528                                  unimplemented  {fadd dword [&data_10058168]}
10016532                                  var_16c = var_118
10016537                                  int32_t var_114
10016537                                  int32_t var_168_2 = var_114
1001653b                                  float var_164_2 = fconvert.s(unimplemented  {fstp dword [
1001653b                                      esp+0x44], st0})
1001653b                                  unimplemented  {fstp dword [esp+0x44], st0}
1001653f                                  float eax_22 = j_sub_1001ae60(&var_16c)
10016547                                  var_188 = eax_22
10016547                                  
1001654d                                  if (eax_22 != 0)
10016553                                      unimplemented  {fld st0, dword [esp+0x84]}
10016565                                      unimplemented  {fadd dword [&data_10058168]}
1001656b                                      var_16c = var_128
1001656f                                      int32_t var_124
1001656f                                      int32_t var_168_3 = var_124
10016573                                      var_164_1 = fconvert.s(unimplemented  {fstp dword [esp
10016573                                          +0x40], st0})
10016573                                      unimplemented  {fstp dword [esp+0x40], st0}
10016577                                      label_10016577:
10016577                                      int32_t var_140_1 = 0
10016577                                      
1001657f                                      while (true)
100165a3                                          for (int32_t i_1 = 0; i_1 s< 0xc; )
10016581                                              unimplemented  {fld st0, dword [esp+eax+0x20]}
10016585                                              unimplemented  {fsub st0, dword [
10016585                                                  &data_10058094]}
1001658b                                              i_1 += 4
10016591                                              *(&var_188 + i_1) = fconvert.s(unimplemented  
10016591                                                  {fstp dword [esp+eax+0x1c], st0})
10016591                                              unimplemented  {fstp dword [esp+eax+0x1c], st0
10016591                                                  }
10016595                                              unimplemented  {fld st0, dword [esp+eax+0xc]}
10016599                                              unimplemented  {fadd dword [&data_10058094]}
1001659f                                              *(&__saved_ebp + i_1) = fconvert.s(
1001659f                                                  unimplemented  {fstp dword [esp+eax+0xc], 
1001659f                                                  st0})
1001659f                                              unimplemented  {fstp dword [esp+eax+0xc], st0}
1001659f                                          
100165a9                                          float eax_24 = var_178
100165b1                                          float var_74_1 = var_184
100165b8                                          float var_70_1 = eax_24
100165c5                                          float var_68_1 = eax_24
100165ce                                          float var_94_1 = var_174_3
100165d9                                          int32_t var_6c = var_194
100165e4                                          float var_8c_1 = var_174_3
100165eb                                          int32_t edx_10 = var_194
100165ef                                          int32_t var_88_1 = var_180
100165f6                                          int32_t var_90_1 = var_190
100165fd                                          float ecx_12 = var_184
10016601                                          int32_t var_60_1 = edx_10
1001660e                                          int32_t var_5c_1 = edx_10
10016615                                          float var_64_1 = ecx_12
1001661c                                          float var_58_1 = ecx_12
10016629                                          int32_t var_84_1 = var_190
10016630                                          int32_t var_80_1 = var_190
1001663b                                          int32_t var_7c_1 = var_180
10016642                                          int32_t var_78_1 = var_180
10016649                                          int32_t var_12c_1 = 0
10016649                                          
1001664d                                          while (true)
1001664d                                              unimplemented  {fld st0, dword [esp+0x6c]}
10016651                                              unimplemented  {fadd dword [esp+eax+0x130]}
10016658                                              float var_150 = fconvert.s(unimplemented  {
10016658                                                  fstp dword [esp+0x54], st0})
10016658                                              unimplemented  {fstp dword [esp+0x54], st0}
1001665c                                              unimplemented  {fld st0, dword [esp+0x70]}
10016660                                              unimplemented  {fadd dword [esp+eax+0x110]}
1001666c                                              float var_14c_1 = fconvert.s(unimplemented  {
1001666c                                                  fstp dword [esp+0x5c], st0})
1001666c                                              unimplemented  {fstp dword [esp+0x5c], st0}
10016670                                              unimplemented  {fld st0, dword [esp+0x98]}
10016677                                              unimplemented  {fadd dword [&data_100580dc]}
1001667d                                              float var_148_1 = fconvert.s(unimplemented  {
1001667d                                                  fstp dword [esp+0x60], st0})
1001667d                                              unimplemented  {fstp dword [esp+0x60], st0}
10016689                                              int32_t ebx_1 = j_sub_1001ae60(&var_150)
1001668b                                              int32_t ebp_1 = 0
1001668b                                              
1001668f                                              while (true)
1001668f                                                  if (ebx_1 != 0)
10016696                                                      int32_t eax_30 = j_sub_10011670(ebx_1)
100166a0                                                      uint32_t eax_31
100166a0                                                      
100166a0                                                      if (eax_30 == 0)
100166a3                                                          eax_31 = j_sub_10011610(ebx_1)
100166a3                                                      
100166ad                                                      if (eax_30 != 0 || eax_31 != 0)
100166b3                                                          unimplemented  {fld st0, dword [esp
100166b3                                                              +0x94]}
100166c8                                                          unimplemented  {fadd dword [
100166c8                                                              &data_100581a8]}
100166ce                                                          float eax_32 = var_150
100166d2                                                          float var_f8 = var_118
100166dd                                                          int32_t var_f4_1 = var_114
100166e4                                                          float var_e0 = eax_32
100166ed                                                          float var_f0_1 = fconvert.s(
100166ed                                                              unimplemented  {fstp dword [esp+0xb8], 
100166ed                                                              st0})
100166ed                                                          unimplemented  {fstp dword [esp+0xb8], 
100166ed                                                              st0}
100166f4                                                          unimplemented  {fld st0, dword [esp
100166f4                                                              +0x60]}
100166f8                                                          unimplemented  {fadd dword [
100166f8                                                              &data_100580c4]}
10016705                                                          float var_dc_1 = var_14c_1
1001671d                                                          float var_d8_1 = fconvert.s(
1001671d                                                              unimplemented  {fstp dword [esp+0xd8], 
1001671d                                                              st0})
1001671d                                                          unimplemented  {fstp dword [esp+0xd8], 
1001671d                                                              st0}
1001673c                                                          void var_48
1001673c                                                          void var_24
1001673c                                                          __builtin_memcpy(dest: &var_48, 
1001673c                                                              src: j_sub_1001b260(&var_24, &var_f8, 
1001673c                                                                  &var_e0, 4, 0xffffffff), 
1001673c                                                              n: 0x24)
1001673e                                                          unimplemented  {fld st0, dword [esp
1001673e                                                              +0x160]}
10016745                                                          long double temp5_1 = fconvert.t(1f)
10016745                                                          unimplemented  {fcomp st0, dword [
10016745                                                              &data_100580c4]} f- temp5_1
10016745                                                          bool c0_4 = unimplemented  {fcomp st0, 
10016745                                                              dword [&data_100580c4]} f< temp5_1
10016745                                                          bool c2_4 = is_unordered.t(
10016745                                                              unimplemented  {fcomp st0, dword [
10016745                                                                  &data_100580c4]}, 
10016745                                                              temp5_1)
10016745                                                          bool c3_4 = unimplemented  {fcomp st0, 
10016745                                                              dword [&data_100580c4]} f== temp5_1
10016745                                                          unimplemented  {fcomp st0, dword [
10016745                                                              &data_100580c4]}
1001674b                                                          int32_t eax_33
1001674b                                                          eax_33.w = (c0_4 ? 1 : 0) << 8
1001674b                                                              | (c2_4 ? 1 : 0) << 0xa
1001674b                                                              | (c3_4 ? 1 : 0) << 0xe
1001674b                                                              | (top & 7) << 0xb
1001674b                                                          
10016750                                                          if ((eax_33:1.b & 1) == 0)
10016781                                                              if (ebp_1 s< 0x10)
10016787                                                                  float esi_4 = var_188
10016787                                                                  
1001678d                                                                  if (ebx_1 != esi_4
1001678d                                                                          && j_sub_10011670(ebx_1) != 0
1001678d                                                                          && j_sub_10011700(esi_4, ebx_1) == 0)
100167b6                                                                      unimplemented  {fld st0, dword [esp
100167b6                                                                          +0x38]}
100167ba                                                                      unimplemented  {fsub st0, dword [esp
100167ba                                                                          +0x7c]}
100167c3                                                                      float var_15c = fconvert.s(unimplemented
100167c3                                                                            {fstp dword [esp+0x4c], st0})
100167c3                                                                      unimplemented  {fstp dword [esp+0x4c], 
100167c3                                                                          st0}
100167c7                                                                      unimplemented  {fld st0, dword [esp
100167c7                                                                          +0x40]}
100167cb                                                                      unimplemented  {fsub st0, dword [esp
100167cb                                                                          +0x84]}
100167d2                                                                      float var_158_1 = fconvert.s(
100167d2                                                                          unimplemented  {fstp dword [esp+0x50], 
100167d2                                                                          st0})
100167d2                                                                      unimplemented  {fstp dword [esp+0x50], 
100167d2                                                                          st0}
100167d6                                                                      unimplemented  {fld st0, dword [esp
100167d6                                                                          +0x44]}
100167da                                                                      unimplemented  {fsub st0, dword [esp
100167da                                                                          +0x88]}
100167e1                                                                      float var_154_1 = fconvert.s(
100167e1                                                                          unimplemented  {fstp dword [esp+0x54], 
100167e1                                                                          st0})
100167e1                                                                      unimplemented  {fstp dword [esp+0x54], 
100167e1                                                                          st0}
100167e5                                                                      long double st0_1 =
100167e5                                                                          j_sub_10043290(&var_15c)
100167e5                                                                      unimplemented  {call j_sub_10043290}
100167ea                                                                      unimplemented  {fstp st0, st0}
100167ea                                                                      unimplemented  {fstp st0, st0}
100167ec                                                                      unimplemented  {fld st0, dword [esp
100167ec                                                                          +0x4c]}
100167f0                                                                      unimplemented  {fmul st0, dword [
100167f0                                                                          &data_10058168]}
10016801                                                                      int32_t ecx_17 = 0
10016803                                                                      unimplemented  {fadd dword [esp+0x38]}
10016807                                                                      var_15c = fconvert.s(unimplemented  {
10016807                                                                          fstp dword [esp+0x48], st0})
10016807                                                                      unimplemented  {fstp dword [esp+0x48], 
10016807                                                                          st0}
1001680b                                                                      unimplemented  {fld st0, dword [esp
1001680b                                                                          +0x4c]}
1001680f                                                                      unimplemented  {fmul st0, dword [
1001680f                                                                          &data_10058168]}
10016815                                                                      unimplemented  {fadd dword [esp+0x3c]}
10016819                                                                      float var_158_2 = fconvert.s(
10016819                                                                          unimplemented  {fstp dword [esp+0x4c], 
10016819                                                                          st0})
10016819                                                                      unimplemented  {fstp dword [esp+0x4c], 
10016819                                                                          st0}
10016819                                                                      
1001681d                                                                      while (true)
1001681d                                                                          unimplemented  {fld st0, dword [esp
1001681d                                                                              +ecx*4+0x20]}
10016821                                                                          unimplemented  {fadd dword [esp+ecx*4
10016821                                                                              +0x6c]}
10016825                                                                          long double temp6_1 =
10016825                                                                              fconvert.t((&var_15c)[ecx_17])
10016825                                                                          unimplemented  {fcomp st0, dword [esp
10016825                                                                              +ecx*4+0x48]} f- temp6_1
10016825                                                                          bool c0_5 = unimplemented  {fcomp st0, 
10016825                                                                              dword [esp+ecx*4+0x48]} f< temp6_1
10016825                                                                          bool c2_5 = is_unordered.t(
10016825                                                                              unimplemented  {fcomp st0, dword [esp
10016825                                                                                  +ecx*4+0x48]}, 
10016825                                                                              temp6_1)
10016825                                                                          bool c3_5 = unimplemented  {fcomp st0, 
10016825                                                                              dword [esp+ecx*4+0x48]} f== temp6_1
10016825                                                                          unimplemented  {fcomp st0, dword [esp
10016825                                                                              +ecx*4+0x48]}
10016825                                                                          
1001682e                                                                          if ((((c0_5 ? 1 : 0) << 8
1001682e                                                                                  | (c2_5 ? 1 : 0) << 0xa
1001682e                                                                                  | (c3_5 ? 1 : 0) << 0xe
1001682e                                                                                  | (top & 7) << 0xb):1.b & 0x41) != 0)
10016830                                                                              unimplemented  {fld st0, dword [esp
10016830                                                                                  +ecx*4+0x10]}
10016834                                                                              unimplemented  {fadd dword [esp+ecx*4
10016834                                                                                  +0x6c]}
10016838                                                                              long double temp7_1 =
10016838                                                                                  fconvert.t((&var_15c)[ecx_17])
10016838                                                                              unimplemented  {fcomp st0, dword [esp
10016838                                                                                  +ecx*4+0x48]} f- temp7_1
10016838                                                                              bool c0_6 = unimplemented  {fcomp st0, 
10016838                                                                                  dword [esp+ecx*4+0x48]} f< temp7_1
10016838                                                                              bool c2_6 = is_unordered.t(
10016838                                                                                  unimplemented  {fcomp st0, dword [esp
10016838                                                                                      +ecx*4+0x48]}, 
10016838                                                                                  temp7_1)
10016838                                                                              bool c3_6 = unimplemented  {fcomp st0, 
10016838                                                                                  dword [esp+ecx*4+0x48]} f== temp7_1
10016838                                                                              unimplemented  {fcomp st0, dword [esp
10016838                                                                                  +ecx*4+0x48]}
10016838                                                                              
10016841                                                                              if ((((c0_6 ? 1 : 0) << 8
10016841                                                                                      | (c2_6 ? 1 : 0) << 0xa
10016841                                                                                      | (c3_6 ? 1 : 0) << 0xe
10016841                                                                                      | (top & 7) << 0xb):1.b & 1) == 0)
10016843                                                                                  ecx_17 += 1
10016843                                                                                  
10016847                                                                                  if (ecx_17 s>= 3)
10016847                                                                                      break
10016847                                                                                  
10016847                                                                                  continue
10016847                                                                          
10016851                                                                          if (ecx_17 s>= 3)
10016851                                                                              break
10016851                                                                          
10016857                                                                          int32_t* eax_38 = j_sub_10010ff0()
10016857                                                                          
10016860                                                                          if (eax_38 != 0)
1001686d                                                                              *eax_38 = ebx_1
1001686f                                                                              unimplemented  {fld st0, dword [esp
1001686f                                                                                  +0x44]}
10016873                                                                              eax_38[1] = eax_6
10016876                                                                              int32_t eax_39
10016876                                                                              int16_t x87control_1
10016876                                                                              eax_39, x87control_1 =
10016876                                                                                  __ftol(x87control, st0_1)
1001687b                                                                              unimplemented  {fld st0, dword [esp
1001687b                                                                                  +0x44]}
1001687f                                                                              unimplemented  {fmul st0, dword [
1001687f                                                                                  &data_1005807c]}
10016885                                                                              eax_38[2] = eax_39
1001688c                                                                              eax_38[3] = var_15c
10016893                                                                              unimplemented  {fdiv st0, dword [esp
10016893                                                                                  +0x68]}
10016897                                                                              eax_38[4] = var_158_2
1001689e                                                                              eax_38[5] = var_164_1
100168a5                                                                              eax_38[6] = var_150
100168ac                                                                              eax_38[7] = var_14c_1
100168b3                                                                              eax_38[8] = var_148_1
100168b6                                                                              eax_38[9] = 0xb
100168bd                                                                              int16_t eax_42
100168bd                                                                              eax_42, x87control =
100168bd                                                                                  __ftol(x87control_1, st0_1)
100168c5                                                                              eax_38[0xa].w = eax_42
100168c5                                                                              
100168c9                                                                              if (eax_42 == 0)
100168cb                                                                                  eax_38[0xa].w = 0x32
100168cb                                                                              
100168d7                                                                              float eax_43 = var_188
100168db                                                                              var_140_1 = 0x270f
100168e6                                                                              eax_38[0xb] =
100168e6                                                                                  *(data_1006675c + (eax_43 << 2))
100168ef                                                                              *(data_1006675c + (eax_43 << 2)) =
100168ef                                                                                  eax_38
100168f8                                                                              data_10066784 += 1
100168f8                                                                          
10016860                                                                          break
10016860                                                              
10016781                                                              break
10016781                                                  
10016752                                                  unimplemented  {fld st0, dword [esp+0x5c]}
10016756                                                  unimplemented  {fadd dword [
10016756                                                      &data_10058094]}
10016761                                                  var_148_1 = fconvert.s(unimplemented  {
10016761                                                      fstp dword [esp+0x60], st0})
10016761                                                  unimplemented  {fstp dword [esp+0x60], st0
10016761                                                      }
1001676d                                                  ebp_1 += 1
10016771                                                  ebx_1 = j_sub_1001ae60(&var_150)
10016771                                                  
10016773                                                  if (ebp_1 s>= 0x10)
10016773                                                      break
10016773                                              
10016904                                              bool cond:7_1 = var_12c_1 + 4 s< 0x20
10016907                                              var_12c_1 += 4
10016907                                              
1001690b                                              if (not(cond:7_1))
1001690b                                                  break
1001690b                                          
10016916                                          bool cond:8_1 = var_140_1 + 1 s< 3
10016919                                          var_140_1 += 1
10016919                                          
1001691d                                          if (not(cond:8_1))
1001691d                                              break
1001691d                                      
10016923                                      ebx = var_11c_1
1001692a                                      ebp = var_144
10016470                              else
10016476                                  unimplemented  {fld st0, dword [esp+0x6c]}
1001647a                                  unimplemented  {fadd dword [esp+ebx+0xd0]}
10016486                                  var_16c = fconvert.s(unimplemented  {fstp dword [esp+0x3c]
10016486                                      , st0})
10016486                                  unimplemented  {fstp dword [esp+0x3c], st0}
1001648a                                  unimplemented  {fld st0, dword [esp+0x74]}
1001648e                                  unimplemented  {fadd dword [esp+ebx+0xf4]}
10016495                                  float var_168_1 = fconvert.s(unimplemented  {fstp dword [
10016495                                      esp+0x40], st0})
10016495                                  unimplemented  {fstp dword [esp+0x40], st0}
10016499                                  unimplemented  {fld st0, dword [esp+0x88]}
100164a0                                  unimplemented  {fadd dword [&data_100580dc]}
100164a6                                  var_164_1 = fconvert.s(unimplemented  {fstp dword [esp
100164a6                                      +0x44], st0})
100164a6                                  unimplemented  {fstp dword [esp+0x44], st0}
100164af                                  int32_t edi_1 = j_sub_1001ae60(&var_16c)
100164b4                                  var_188 = edi_1
100164b8                                  int32_t esi_2 = 0
100164b8                                  
100164c2                                  while (true)
100164c2                                      if (edi_1 != 0)
100164cf                                          if (j_sub_10011670(edi_1) != 0)
100164cf                                              break
100164cf                                          
100164dc                                          if (j_sub_10011610(edi_1) != 0)
100164dc                                              break
100164dc                                      
100164de                                      unimplemented  {fld st0, dword [esp+0x40]}
100164e2                                      unimplemented  {fadd dword [&data_10058094]}
100164ed                                      var_164_1 = fconvert.s(unimplemented  {fstp dword [esp
100164ed                                          +0x44], st0})
100164ed                                      unimplemented  {fstp dword [esp+0x44], st0}
100164f9                                      esi_2 += 1
100164fd                                      var_188 = j_sub_1001ae60(&var_16c)
100164fd                                      
10016501                                      if (esi_2 s>= 0x10)
10016501                                          goto label_1001692e
10016501                                      
100164bc                                      edi_1 = var_188
100164bc                                  
1001650b                                  if (esi_2 s< 0x10)
1001650b                                      goto label_10016577
1001692e                              label_1001692e:
1001692e                              ebx += 4
10016934                              var_11c_1 = ebx
10016934                              
1001693b                              if (ebx s>= 0x24)
1001693b                                  break
1001693b                          
10016941                          edi = var_fc
100161b7                      else
100161c0                          data_10063fe8(3, "func_plat with invalid model num…")
1001618d                  else
10016196                      data_10063fe8(3, "func_plat without model\n")
10016196          
10016948          int32_t* eax_50 = ebp[1]
1001694d          var_144 = eax_50
1001694d          
10016951          if (eax_50 == 0)
10016951              break
10016951          
10016129          ebp = var_144
10016129  
1001696a  return j_sub_10006920(edi)

1001696b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10016980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100169a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100169c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100169e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10016b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10016ba0    int32_t sub_10016ba0(int32_t arg1, int32_t arg2)

10016ba6  int32_t __saved_ebx_1
10016ba6  int32_t __saved_ebx = __saved_ebx_1
10016bae  int32_t __saved_ebp_1
10016bae  int32_t __saved_ebp = __saved_ebp_1
10016baf  int32_t __saved_esi_1
10016baf  int32_t __saved_esi = __saved_esi_1
10016bb0  int32_t __saved_edi_1
10016bb0  int32_t __saved_edi = __saved_edi_1
10016bb2  int32_t eax = j_sub_10011670(arg1)
10016bbc  uint32_t eax_1
10016bbc  
10016bbc  if (eax == 0)
10016bbf      eax_1 = j_sub_10011610(arg1)
10016bbf  
10016bc9  if ((eax != 0 || eax_1 != 0) && (j_sub_1001af50(arg1) & 2) != 0
10016bc9          && j_sub_10011610(arg1) == 0)
10016c01      int32_t eax_5 = data_1006694c
10016c09      void* ebp_2 = arg2 * 0x30 + eax_5
10016c0b      void* ecx_3 = arg1 * 0x30 + eax_5
10016c0d      void* var_118_1 = ebp_2
10016c11      long double x87_r7_1 = fconvert.t(*(ebp_2 + 0x20))
10016c14      long double temp0_1 = fconvert.t(*(ecx_3 + 0x14))
10016c14      x87_r7_1 - temp0_1
10016c14      int16_t top_1 = 0
10016c17      eax_5.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
10016c17          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
10016c17          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
10016c17      
10016c1c      if ((eax_5:1.b & 1) == 0)
10016c26          float var_154 = *(ecx_3 + 0x24)
10016c2a          float eax_6 = *(ecx_3 + 0x28)
10016c31          float ecx_4 = *(ecx_3 + 0x2c)
10016c46          int32_t* var_174_5 = &var_154
10016c46          
10016c47          if (j_sub_10011610(arg1) != 0)
10016cfe              if ((j_sub_10003080(var_174_5) & 0x38) != 0)
10016cfe                  goto label_10016d07
10016c47          else
10016c57              double var_188
10016c57              
10016c57              if (j_sub_1001ae60(var_174_5) == 0)
10016c60                  int32_t var_178
10016c60                  var_178.q = fconvert.d(fconvert.t(ecx_4))
10016c6a                  int32_t var_180
10016c6a                  var_180.q = fconvert.d(fconvert.t(eax_6))
10016c74                  var_188 = fconvert.d(fconvert.t(var_154))
10016c77                  int32_t var_18c_1 = arg1
10016c78                  char* var_190_1 = "area %d center %f %f %f in solid…"
10016c7d                  j_sub_10038d80("area %d center %f %f %f in solid…")
10016c7d              
10016c97              float var_13c = var_154
10016c9b              int32_t var_174_6 = 0xffffffff
10016ca1              float var_138 = eax_6
10016ca5              int32_t var_178_1 = 4
10016cab              float var_134_1 = fconvert.s(fconvert.t(ecx_4) - fconvert.t(1000f))
10016cab              top_1 = 0
10016caf              float* var_17c_1 = &var_13c
10016cb7              float* var_180_1 = &var_154
10016cb8              void var_9c
10016cb8              void* var_184_1 = &var_9c
10016ccc              int32_t var_114
10016ccc              __builtin_memcpy(dest: &var_114, src: j_sub_1001b260(), n: 0x24)
10016ccc              
10016cd4              if (var_114 == 0)
10016ce6                  float var_10c
10016ce6                  float var_148 = var_10c
10016cea                  float var_108
10016cea                  float var_144 = var_108
10016cee                  int32_t var_104
10016cee                  int32_t var_140 = var_104
10016d07                  label_10016d07:
10016d07                  int32_t eax_14 = 0
10016d0b                  int32_t var_11c_1 = 0
10016d0b                  
10016d0f                  if (*(ebp_2 + 4) s> 0)
10016d26                      while (true)
10016d26                          int32_t ebp_3 = *(data_10066944 + ((*(ebp_2 + 8) + eax_14) << 2))
10016d29                          int32_t ecx_10 = data_1006693c
10016d31                          int32_t eax_16
10016d31                          int32_t edx_4
10016d31                          edx_4:eax_16 = sx.q(ebp_3)
10016d36                          int32_t eax_19 = ((eax_16 ^ edx_4) - edx_4) * 3
10016d39                          int32_t* esi_1 = ecx_10 + (eax_19 << 3)
10016d3c                          eax_19.b = *(ecx_10 + (eax_19 << 3) + 4)
10016d3c                          
10016d42                          if ((eax_19.b & 1) != 0)
10016d56                              *(data_10066934 + (esi_1[3] << 2))
10016d69                              unimplemented  {fld st0, dword [eax+edx*4]}
10016d6c                              unimplemented  {fsub st0, dword [esp+0x28]}
10016d79                              float var_160 =
10016d79                                  fconvert.s(unimplemented  {fstp dword [esp+0x10], st0})
10016d79                              unimplemented  {fstp dword [esp+0x10], st0}
10016d7d                              unimplemented  {fld st0, dword [eax+0x4]}
10016d80                              unimplemented  {fsub st0, dword [esp+0x2c]}
10016d84                              float var_15c_1 =
10016d84                                  fconvert.s(unimplemented  {fstp dword [esp+0x14], st0})
10016d84                              unimplemented  {fstp dword [esp+0x14], st0}
10016d88                              unimplemented  {fld st0, dword [eax+0x8]}
10016d8b                              unimplemented  {fsub st0, dword [esp+0x30]}
10016d8f                              float var_158_1 =
10016d8f                                  fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
10016d8f                              unimplemented  {fstp dword [esp+0x18], st0}
10016d95                              unimplemented  {fld st0, dword [esp+0x18]}
10016d9c                              unimplemented  {fmul st0, dword [edx+ecx*4+0x8]}
10016da0                              unimplemented  {fld st0, dword [esp+0x14]}
10016da4                              unimplemented  {fmul st0, dword [edx+ecx*4+0x4]}
10016dab                              unimplemented  {faddp st1, st0}
10016dab                              unimplemented  {faddp st1, st0}
10016dad                              unimplemented  {fld st0, dword [esp+0x10]}
10016db1                              unimplemented  {fmul st0, dword [eax]}
10016db3                              unimplemented  {faddp st1, st0}
10016db3                              unimplemented  {faddp st1, st0}
10016db5                              long double temp1_1 = fconvert.t(0f)
10016db5                              unimplemented  {fcomp st0, dword [&data_10058000]} f- temp1_1
10016db5                              bool c0_2 = unimplemented  {fcomp st0, dword [&data_10058000]}
10016db5                                  f< temp1_1
10016db5                              bool c2_2 = is_unordered.t(
10016db5                                  unimplemented  {fcomp st0, dword [&data_10058000]}, 
10016db5                                  temp1_1)
10016db5                              bool c3_2 = unimplemented  {fcomp st0, dword [&data_10058000]}
10016db5                                  f== temp1_1
10016db5                              unimplemented  {fcomp st0, dword [&data_10058000]}
10016db5                              
10016dc0                              if ((((c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
10016dc0                                      | (c3_2 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb):1.b & 0x41)
10016dc0                                      != 0)
10016dcc                                  float var_130
10016dcc                                  j_sub_100113f0(ebp_3, &var_130)
10016dd1                                  unimplemented  {fld st0, dword [esp+0x38]}
10016dd5                                  unimplemented  {fadd dword [&data_100581d0]}
10016dde                                  float var_128
10016dde                                  long double temp2_1 = fconvert.t(var_128)
10016dde                                  unimplemented  {fcomp st0, dword [esp+0x48]} f- temp2_1
10016dde                                  bool c0_3 = unimplemented  {fcomp st0, dword [esp+0x48]}
10016dde                                      f< temp2_1
10016dde                                  bool c2_3 = is_unordered.t(
10016dde                                      unimplemented  {fcomp st0, dword [esp+0x48]}, temp2_1)
10016dde                                  bool c3_3 = unimplemented  {fcomp st0, dword [esp+0x48]}
10016dde                                      f== temp2_1
10016dde                                  unimplemented  {fcomp st0, dword [esp+0x48]}
10016dde                                  
10016de7                                  if ((((c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
10016de7                                          | (c3_3 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb):1.b & 0x41)
10016de7                                          != 0)
10016df8                                      unimplemented  {fld st0, dword [edx+ecx*4+0x8]}
10016dfc                                      unimplemented  {fmul st0, dword [&data_10058044]}
10016e05                                      long double temp3_1 = fconvert.t(0f)
10016e05                                      unimplemented  {fcomp st0, dword [&data_10058000]}
10016e05                                          f- temp3_1
10016e05                                      bool c0_4 =
10016e05                                          unimplemented  {fcomp st0, dword [&data_10058000]}
10016e05                                          f< temp3_1
10016e05                                      bool c2_4 = is_unordered.t(
10016e05                                          unimplemented  {fcomp st0, dword [&data_10058000]
10016e05                                              }, 
10016e05                                          temp3_1)
10016e05                                      bool c3_4 =
10016e05                                          unimplemented  {fcomp st0, dword [&data_10058000]}
10016e05                                          f== temp3_1
10016e05                                      unimplemented  {fcomp st0, dword [&data_10058000]}
10016e05                                      
10016e10                                      if ((((c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
10016e10                                              | (c3_4 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb):1.b
10016e10                                              & 1) == 0)
10016e16                                          unimplemented  {fld st0, dword [esp+0x40]}
10016e1a                                          unimplemented  {fsub st0, dword [esp+0x28]}
10016e22                                          int32_t var_158_2 = 0
10016e2b                                          var_160 = fconvert.s(unimplemented  {fstp dword [
10016e2b                                              esp+0x14], st0})
10016e2b                                          unimplemented  {fstp dword [esp+0x14], st0}
10016e2f                                          unimplemented  {fld st0, dword [esp+0x48]}
10016e33                                          unimplemented  {fsub st0, dword [esp+0x30]}
10016e37                                          float var_15c_2 = fconvert.s(unimplemented  {fstp 
10016e37                                              dword [esp+0x18], st0})
10016e37                                          unimplemented  {fstp dword [esp+0x18], st0}
10016e3b                                          unimplemented  {fld st0, dword [esp+0x4c]}
10016e3f                                          unimplemented  {fsub st0, dword [esp+0x34]}
10016e43                                          float var_120_1 = fconvert.s(unimplemented  {fstp 
10016e43                                              dword [esp+0x54], st0})
10016e43                                          unimplemented  {fstp dword [esp+0x54], st0}
10016e47                                          j_sub_10043500(&var_160)
10016e47                                          unimplemented  {call j_sub_10043500}
10016e4c                                          float var_124_1 = fconvert.s(unimplemented  {fst 
10016e4c                                              dword [esp+0x50], st0})
10016e50                                          long double temp4_1 = fconvert.t(0f)
10016e50                                          unimplemented  {fcomp st0, dword [&data_10058000]}
10016e50                                              f- temp4_1
10016e50                                          bool c0_5 = unimplemented  {fcomp st0, dword [
10016e50                                              &data_10058000]} f< temp4_1
10016e50                                          bool c2_5 = is_unordered.t(
10016e50                                              unimplemented  {fcomp st0, dword [
10016e50                                                  &data_10058000]}, 
10016e50                                              temp4_1)
10016e50                                          bool c3_5 = unimplemented  {fcomp st0, dword [
10016e50                                              &data_10058000]} f== temp4_1
10016e50                                          unimplemented  {fcomp st0, dword [&data_10058000]}
10016e50                                          
10016e5e                                          if ((((c0_5 ? 1 : 0) << 8 | (c2_5 ? 1 : 0) << 0xa
10016e5e                                                  | (c3_5 ? 1 : 0) << 0xe
10016e5e                                                  | (top_1 & 7) << 0xb):1.b & 0x40) == 0)
10016e64                                              unimplemented  {fld st0, dword [esp+0x4c]}
10016e68                                              long double temp5_1 = fconvert.t(2000f)
10016e68                                              unimplemented  {fcomp st0, dword [
10016e68                                                  &data_100581cc]} f- temp5_1
10016e68                                              bool c0_6 = unimplemented  {fcomp st0, dword [
10016e68                                                  &data_100581cc]} f< temp5_1
10016e68                                              bool c2_6 = is_unordered.t(
10016e68                                                  unimplemented  {fcomp st0, dword [
10016e68                                                      &data_100581cc]}, 
10016e68                                                  temp5_1)
10016e68                                              bool c3_6 = unimplemented  {fcomp st0, dword [
10016e68                                                  &data_100581cc]} f== temp5_1
10016e68                                              unimplemented  {fcomp st0, dword [
10016e68                                                  &data_100581cc]}
10016e68                                              
10016e73                                              if ((((c0_6 ? 1 : 0) << 8
10016e73                                                      | (c2_6 ? 1 : 0) << 0xa
10016e73                                                      | (c3_6 ? 1 : 0) << 0xe
10016e73                                                      | (top_1 & 7) << 0xb):1.b & 0x41) != 0)
10016e79                                                  unimplemented  {fld st0, dword [esp+0x50]}
10016e7d                                                  unimplemented  {fdiv st0, dword [esp+0x4c]
10016e7d                                                      }
10016e81                                                  int16_t top_24 = top_1 - 2
10016e81                                                  unimplemented  {fld st0, qword [
10016e81                                                      &data_100581c0]}  {"es-8R"}
10016e87                                                  long double st0_1
10016e87                                                  bool c2_7
10016e87                                                  st0_1, c2_7 =
10016e87                                                      __fptan(unimplemented  {fptan })
10016e87                                                  unimplemented  {fptan }
10016e87                                                  
10016e87                                                  if (not(c2_7))
10016e87                                                      top_24 -= 1
10016e87                                                      unimplemented  {fptan }
10016e87                                                  
10016e89                                                  unimplemented  {fstp st0, st0}
10016e89                                                  unimplemented  {fstp st0, st0}
10016e8b                                                  unimplemented  {fcompp }
10016e8b                                                      f- unimplemented  {fcompp }
10016e8b                                                  bool c0_7 = unimplemented  {fcompp }
10016e8b                                                      f< unimplemented  {fcompp }
10016e8b                                                  bool c2_8 = is_unordered.t(
10016e8b                                                      unimplemented  {fcompp }, 
10016e8b                                                      unimplemented  {fcompp })
10016e8b                                                  bool c3_7 = unimplemented  {fcompp }
10016e8b                                                      f== unimplemented  {fcompp }
10016e8b                                                  unimplemented  {fcompp }
10016e8b                                                  unimplemented  {fcompp }
10016e8b                                                  top_1 = top_24 + 3
10016e8b                                                  
10016e92                                                  if ((((c0_7 ? 1 : 0) << 8
10016e92                                                          | (c2_8 ? 1 : 0) << 0xa
10016e92                                                          | (c3_7 ? 1 : 0) << 0xe
10016e92                                                          | (top_1 & 7) << 0xb):1.b & 0x41) != 0)
10016ea4                                                      var_154 = var_130
10016ea8                                                      int32_t var_12c
10016ea8                                                      int32_t var_150_2 = var_12c
10016eac                                                      float var_14c_2 = var_128
10016ec7                                                      int32_t var_17c_2 = 0xc3fa0000
10016ecd                                                      j_sub_10043380(&var_130, -500f, 
10016ecd                                                          data_10066924 + *esi_1 * 0x14, &var_13c)
10016ed2                                                      int32_t var_184_2 = 0x6000003
10016edb                                                      var_188.d = 0
10016ede                                                      int32_t var_190_2 = 0
10016ee4                                                      int32_t var_194_1 = 0
10016f05                                                      void var_f0
10016f05                                                      void var_54
10016f05                                                      __builtin_memcpy(dest: &var_f0, 
10016f05                                                          src: j_sub_10003010(&var_54, &var_154, 
10016f05                                                              0, 0, &var_13c, 0, 0x6000003), 
10016f05                                                          n: 0x54)
10016f0f                                                      char var_ac
10016f0f                                                      
10016f0f                                                      if ((var_ac & 4) == 0)
10016f15                                                          unimplemented  {fld st0, dword [esp
10016f15                                                              +0x88]}
10016f1c                                                          unimplemented  {fmul st0, dword [
10016f1c                                                              &data_10058160]}
10016f22                                                          long double temp6_1 = fconvert.t(32f)
10016f22                                                          unimplemented  {fcomp st0, dword [
10016f22                                                              &data_100581a8]} f- temp6_1
10016f22                                                          bool c0_8 = unimplemented  {fcomp st0, 
10016f22                                                              dword [&data_100581a8]} f< temp6_1
10016f22                                                          bool c2_9 = is_unordered.t(
10016f22                                                              unimplemented  {fcomp st0, dword [
10016f22                                                                  &data_100581a8]}, 
10016f22                                                              temp6_1)
10016f22                                                          bool c3_8 = unimplemented  {fcomp st0, 
10016f22                                                              dword [&data_100581a8]} f== temp6_1
10016f22                                                          unimplemented  {fcomp st0, dword [
10016f22                                                              &data_100581a8]}
10016f28                                                          int32_t eax_29
10016f28                                                          eax_29.w = (c0_8 ? 1 : 0) << 8
10016f28                                                              | (c2_9 ? 1 : 0) << 0xa
10016f28                                                              | (c3_8 ? 1 : 0) << 0xe
10016f28                                                              | (top_1 & 7) << 0xb
10016f28                                                          
10016f2d                                                          if ((eax_29:1.b & 1) != 0)
10016f33                                                              unimplemented  {fld st0, dword [esp
10016f33                                                                  +0x40]}
10016f37                                                              unimplemented  {fsub st0, dword [esp
10016f37                                                                  +0x28]}
10016f40                                                              var_160 = fconvert.s(unimplemented  {
10016f40                                                                  fstp dword [esp+0x14], st0})
10016f40                                                              unimplemented  {fstp dword [esp+0x14], 
10016f40                                                                  st0}
10016f44                                                              unimplemented  {fld st0, dword [esp
10016f44                                                                  +0x48]}
10016f48                                                              unimplemented  {fsub st0, dword [esp
10016f48                                                                  +0x30]}
10016f4c                                                              float var_15c_3 = fconvert.s(
10016f4c                                                                  unimplemented  {fstp dword [esp+0x18], 
10016f4c                                                                  st0})
10016f4c                                                              unimplemented  {fstp dword [esp+0x18], 
10016f4c                                                                  st0}
10016f50                                                              unimplemented  {fld st0, dword [esp
10016f50                                                                  +0x4c]}
10016f54                                                              unimplemented  {fsub st0, dword [esp
10016f54                                                                  +0x34]}
10016f58                                                              float var_158_3 = fconvert.s(
10016f58                                                                  unimplemented  {fstp dword [esp+0x1c], 
10016f58                                                                  st0})
10016f58                                                              unimplemented  {fstp dword [esp+0x1c], 
10016f58                                                                  st0}
10016f5c                                                              j_sub_10043290(&var_160)
10016f5c                                                              unimplemented  {call j_sub_10043290}
10016f69                                                              float* var_178_4 = &var_154
10016f6a                                                              float* var_17c_3 = &var_160
10016f6f                                                              int32_t var_180_3 = 0x40800000
10016f74                                                              float* var_184_3 = &var_148
10016f75                                                              unimplemented  {fstp st0, st0}
10016f75                                                              unimplemented  {fstp st0, st0}
10016f77                                                              j_sub_10043380()
10016f91                                                              float var_e4
10016f91                                                              var_13c = var_e4
10016f95                                                              float var_e0
10016f95                                                              var_138 = var_e0
10016f99                                                              var_188.d = 0xffffffff
10016f9f                                                              int32_t var_dc
10016f9f                                                              int32_t var_134_2 = var_dc
10016fa3                                                              int32_t var_18c_3 = 2
10016fc6                                                              __builtin_memcpy(dest: &var_114, 
10016fc6                                                                  src: j_sub_1001b260(&var_9c, &var_154, 
10016fc6                                                                      &var_13c, 2, 0xffffffff), 
10016fc6                                                                  n: 0x24)
10016fc8                                                              unimplemented  {fld st0, dword [esp
10016fc8                                                                  +0x8c]}
10016fcf                                                              unimplemented  {fsub st0, dword [esp
10016fcf                                                                  +0x68]}
10016fd3                                                              var_160 = fconvert.s(unimplemented  {
10016fd3                                                                  fstp dword [esp+0x38], st0})
10016fd3                                                              unimplemented  {fstp dword [esp+0x38], 
10016fd3                                                                  st0}
10016fd7                                                              unimplemented  {fld st0, dword [esp
10016fd7                                                                  +0x90]}
10016fde                                                              unimplemented  {fsub st0, dword [esp
10016fde                                                                  +0x6c]}
10016fe2                                                              float var_15c_4 = fconvert.s(
10016fe2                                                                  unimplemented  {fstp dword [esp+0x3c], 
10016fe2                                                                  st0})
10016fe2                                                              unimplemented  {fstp dword [esp+0x3c], 
10016fe2                                                                  st0}
10016fe6                                                              unimplemented  {fld st0, dword [esp
10016fe6                                                                  +0x94]}
10016fed                                                              unimplemented  {fsub st0, dword [esp
10016fed                                                                  +0x70]}
10016ff6                                                              float var_158_4 = fconvert.s(
10016ff6                                                                  unimplemented  {fstp dword [esp+0x44], 
10016ff6                                                                  st0})
10016ff6                                                              unimplemented  {fstp dword [esp+0x44], 
10016ff6                                                                  st0}
10016ffa                                                              j_sub_10043500(&var_160)
10016ffa                                                              unimplemented  {call j_sub_10043500}
10016fff                                                              long double temp7_1 = fconvert.t(24f)
10016fff                                                              unimplemented  {fcomp st0, dword [
10016fff                                                                  &data_10058168]} f- temp7_1
10016fff                                                              bool c0_9 = unimplemented  {fcomp st0, 
10016fff                                                                  dword [&data_10058168]} f< temp7_1
10016fff                                                              bool c2_10 = is_unordered.t(
10016fff                                                                  unimplemented  {fcomp st0, dword [
10016fff                                                                      &data_10058168]}, 
10016fff                                                                  temp7_1)
10016fff                                                              bool c3_9 = unimplemented  {fcomp st0, 
10016fff                                                                  dword [&data_10058168]} f== temp7_1
10016fff                                                              unimplemented  {fcomp st0, dword [
10016fff                                                                  &data_10058168]}
10016fff                                                              
1001700d                                                              if ((((c0_9 ? 1 : 0) << 8
1001700d                                                                      | (c2_10 ? 1 : 0) << 0xa
1001700d                                                                      | (c3_9 ? 1 : 0) << 0xe
1001700d                                                                      | (top_1 & 7) << 0xb):1.b & 0x41) != 0)
10017013                                                                  float edx_10 = var_10c
1001701f                                                                  var_154 = edx_10
10017023                                                                  float var_150_3 = var_108
10017027                                                                  int32_t var_14c_3 = var_104
1001702b                                                                  var_13c = edx_10
1001702f                                                                  var_138 = var_108
10017033                                                                  int32_t var_134_3 = var_104
10017037                                                                  int32_t eax_34
10017037                                                                  int16_t x87control_1
10017037                                                                  eax_34, x87control_1 = j_sub_10011520()
1001703c                                                                  int32_t var_120_2 = eax_34
10017040                                                                  int32_t var_174_11 = 0xffffffff
10017042                                                                  unimplemented  {fild st0, dword [esp
10017042                                                                      +0x54]}
1001704a                                                                  int32_t var_178_5 = 2
10017050                                                                  float* var_17c_4 = &var_13c
10017051                                                                  unimplemented  {fsubr st0, dword [esp
10017051                                                                      +0x48]}
1001705c                                                                  float* var_180_4 = &var_154
1001705d                                                                  void var_78
1001705d                                                                  void* var_184_4 = &var_78
1001705e                                                                  float var_134_4 = fconvert.s(
1001705e                                                                      unimplemented  {fstp dword [esp+0x50], 
1001705e                                                                      st0})
1001705e                                                                  unimplemented  {fstp dword [esp+0x50], 
1001705e                                                                      st0}
10017075                                                                  __builtin_memcpy(dest: &var_114, 
10017075                                                                      src: j_sub_1001b260(), n: 0x24)
10017077                                                                  unimplemented  {fld st0, dword [esp
10017077                                                                      +0x60]}
1001707b                                                                  long double temp8_1 = fconvert.t(1f)
1001707b                                                                  unimplemented  {fcomp st0, dword [
1001707b                                                                      &data_100580c4]} f- temp8_1
1001707b                                                                  bool c0_10 = unimplemented  {fcomp st0, 
1001707b                                                                      dword [&data_100580c4]} f< temp8_1
1001707b                                                                  bool c2_11 = is_unordered.t(
1001707b                                                                      unimplemented  {fcomp st0, dword [
1001707b                                                                          &data_100580c4]}, 
1001707b                                                                      temp8_1)
1001707b                                                                  bool c3_10 = unimplemented  {fcomp st0, 
1001707b                                                                      dword [&data_100580c4]} f== temp8_1
1001707b                                                                  unimplemented  {fcomp st0, dword [
1001707b                                                                      &data_100580c4]}
10017081                                                                  int32_t eax_35
10017081                                                                  eax_35.w = (c0_10 ? 1 : 0) << 8
10017081                                                                      | (c2_11 ? 1 : 0) << 0xa
10017081                                                                      | (c3_10 ? 1 : 0) << 0xe
10017081                                                                      | (top_1 & 7) << 0xb
10017081                                                                  
10017086                                                                  if ((eax_35:1.b & 1) != 0)
10017091                                                                      int32_t eax_36 =
10017091                                                                          j_sub_1001ae60(&var_10c)
10017091                                                                      
100170b6                                                                      if ((*(data_10066954 + eax_36 * 0x1c)
100170b6                                                                              & 6) == 0 && eax_36 != arg1
100170b6                                                                              && j_sub_10011700(arg1, eax_36) == 0
100170b6                                                                              && j_sub_10011670(eax_36) != 0)
100170df                                                                          int32_t* eax_41 = j_sub_10010ff0()
100170df                                                                          
100170e8                                                                          if (eax_41 == 0)
100170e8                                                                              break
100170e8                                                                          
100170ee                                                                          unimplemented  {fld st0, dword [esp
100170ee                                                                              +0x8c]}
100170f5                                                                          *eax_41 = eax_36
100170f7                                                                          eax_41[1] = ebp_3
100170fa                                                                          eax_41[2] = 0
10017105                                                                          eax_41[3] = var_148
1001710c                                                                          unimplemented  {fsub st0, dword [esi
1001710c                                                                              +0xc]}
10017116                                                                          eax_41[4] = var_144
10017124                                                                          eax_41[5] = var_140
1001712e                                                                          eax_41[6] = var_e4
10017131                                                                          eax_41[7] = var_e0
10017134                                                                          eax_41[8] = var_dc
10017137                                                                          eax_41[9] = 0xe
1001713e                                                                          var_160 = fconvert.s(unimplemented  {
1001713e                                                                              fstp dword [esp+0x10], st0})
1001713e                                                                          unimplemented  {fstp dword [esp+0x10], 
1001713e                                                                              st0}
10017142                                                                          unimplemented  {fld st0, dword [esi
10017142                                                                              +0x1c]}
10017145                                                                          unimplemented  {fsub st0, dword [esi
10017145                                                                              +0x10]}
1001714d                                                                          float var_15c_5 = fconvert.s(
1001714d                                                                              unimplemented  {fstp dword [esp+0x18], 
1001714d                                                                              st0})
1001714d                                                                          unimplemented  {fstp dword [esp+0x18], 
1001714d                                                                              st0}
10017151                                                                          unimplemented  {fld st0, dword [esi
10017151                                                                              +0x20]}
10017154                                                                          unimplemented  {fsub st0, dword [esi
10017154                                                                              +0x14]}
10017157                                                                          float var_158_5 = fconvert.s(
10017157                                                                              unimplemented  {fstp dword [esp+0x1c], 
10017157                                                                              st0})
10017157                                                                          unimplemented  {fstp dword [esp+0x1c], 
10017157                                                                              st0}
1001715b                                                                          long double st0_2 =
1001715b                                                                              j_sub_10043500(&var_160)
1001715b                                                                          unimplemented  {call j_sub_10043500}
10017160                                                                          unimplemented  {fmul st0, qword [
10017160                                                                              &data_10058088]}
10017169                                                                          unimplemented  {fadd qword [
10017169                                                                              &data_100581b0]}
10017174                                                                          eax_41[0xa].w =
10017174                                                                              __ftol(x87control_1, st0_2)
10017180                                                                          eax_41[0xb] =
10017180                                                                              *(data_1006675c + (arg1 << 2))
10017189                                                                          *(data_1006675c + (arg1 << 2)) = eax_41
10017192                                                                          data_10066790 += 1
10017192                          
1001719f                          eax_14 = var_11c_1 + 1
100171a3                          var_11c_1 = eax_14
100171a3                          
100171a9                          if (eax_14 s>= *(var_118_1 + 4))
100171a9                              break
100171a9                          
10016d17                          ebp_2 = var_118_1
10016d17  
100171bb  return 0

100171bc                                                                                      90 90 90 90                              ....
100171c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100171e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100172a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100172c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100172e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10017350    int32_t sub_10017350()

10017350  int32_t ebp
10017350  int32_t var_4 = ebp
10017375  float var_20 = 15f
1001737d  int32_t var_1c
1001737d  __builtin_memcpy(dest: &var_1c, 
1001737d      src: "\x00\x00\x70\x41\x00\x00\x70\x41\x00\x00\x70\xc1\x00\x00\x70\xc1\x00\x00\x70\xc1", 
1001737d      n: 0x14)
1001738d  int32_t* eax = j_sub_100069a0()
10017396  int32_t* ebp_1 = eax
10017396  
10017398  if (eax != 0)
100173a4      while (true)
100173a4          char* eax_1 = j_sub_10006760(ebp_1, "classname")
100173a9          char* edi_1 = eax_1
100173a9          
100173b0          if (edi_1 != 0)
100173b6              char* esi_1 = "item_armor_body"
100173bb              int32_t eax_3
100173bb              char edx_1
100173bb              
100173bb              while (true)
100173bb                  edx_1 = *eax_1
100173bf                  char temp0_1 = *esi_1
100173bf                  bool c_1 = edx_1 u< temp0_1
100173bf                  
100173c1                  if (edx_1 == temp0_1)
100173c5                      if (edx_1 == 0)
100173db                          eax_3 = 0
100173dd                          break
100173dd                      
100173c7                      edx_1 = eax_1[1]
100173cc                      char temp3_1 = esi_1[1]
100173cc                      c_1 = edx_1 u< temp3_1
100173cc                      
100173cf                      if (edx_1 == temp3_1)
100173d1                          eax_1 = &eax_1[2]
100173d4                          esi_1 = &esi_1[2]
100173d4                          
100173d9                          if (edx_1 != 0)
100173d9                              continue
100173d9                          
100173db                          eax_3 = 0
100173dd                          break
100173dd                  
100173df                  bool c_2 = unimplemented  {sbb eax, eax}
100173e1                  eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
100173e1                  break
100173e1              
100173e6              if (eax_3 == 0)
10017a0f                  label_10017a0f:
10017a19                  float var_2c
10017a19                  
10017a19                  if (j_sub_100067e0(ebp_1, "origin", &var_2c) != 0)
10017a38                      float var_14
10017a38                      
10017a38                      if (j_sub_1000afd0(&var_2c, &var_14, &var_20) == 0)
10017a3a                          unimplemented  {fld st0, dword [esp+0x1c]}
10017a41                          float* var_48_2
10017a41                          var_48_2.q = fconvert.d(unimplemented  {fstp qword [esp], st0})
10017a41                          unimplemented  {fstp qword [esp], st0}
10017a44                          unimplemented  {fld st0, dword [esp+0x20]}
10017a4b                          float* var_50
10017a4b                          var_50.q = fconvert.d(unimplemented  {fstp qword [esp], st0})
10017a4b                          unimplemented  {fstp qword [esp], st0}
10017a4e                          unimplemented  {fld st0, dword [esp+0x24]}
10017a55                          double var_58_1 =
10017a55                              fconvert.d(unimplemented  {fstp qword [esp], st0})
10017a55                          unimplemented  {fstp qword [esp], st0}
10017a60                          data_10063fe8(1, "%s in solid at (%1.1f %1.1f %1.1…", edi_1, 
10017a60                              var_58_1, var_50)
10017a60                      
10017a7d                      int32_t eax_90 = j_sub_1000b300(&var_2c, &var_14, &var_20, &var_2c)
10017a7d                      int16_t top = top - 1
10017a7d                      unimplemented  {call j_sub_1000b300}
10017a8c                      int32_t edx_3 = eax_90 * 7
10017a8e                      int32_t eax_91 = data_10066954
10017a9b                      int32_t ecx_2
10017a9b                      ecx_2:1.b = (*(eax_91 + (edx_3 << 2) + 4)):1.b | 0x20
10017a9e                      *(eax_91 + (edx_3 << 2) + 4) = ecx_2
100173e6              else
100173ec                  char* esi_2 = "item_armor_combat"
100173f1                  char* eax_4 = edi_1
100173f3                  int32_t eax_6
100173f3                  
100173f3                  while (true)
100173f3                      edx_1 = *eax_4
100173f7                      char temp4_1 = *esi_2
100173f7                      bool c_3 = edx_1 u< temp4_1
100173f7                      
100173f9                      if (edx_1 == temp4_1)
100173fd                          if (edx_1 == 0)
10017413                              eax_6 = 0
10017415                              break
10017415                          
100173ff                          edx_1 = eax_4[1]
10017404                          char temp7_1 = esi_2[1]
10017404                          c_3 = edx_1 u< temp7_1
10017404                          
10017407                          if (edx_1 == temp7_1)
10017409                              eax_4 = &eax_4[2]
1001740c                              esi_2 = &esi_2[2]
1001740c                              
10017411                              if (edx_1 != 0)
10017411                                  continue
10017411                              
10017413                              eax_6 = 0
10017415                              break
10017415                      
10017417                      bool c_4 = unimplemented  {sbb eax, eax}
10017419                      eax_6 = sbb.d(sbb.d(eax_4, eax_4, c_3), 0xffffffff, c_4)
10017419                      break
10017419                  
1001741e                  if (eax_6 == 0)
1001741e                      goto label_10017a0f
1001741e                  
10017424                  char* esi_3 = "item_power_screen"
10017429                  char* eax_7 = edi_1
1001742b                  int32_t eax_9
1001742b                  
1001742b                  while (true)
1001742b                      edx_1 = *eax_7
1001742f                      char temp8_1 = *esi_3
1001742f                      bool c_5 = edx_1 u< temp8_1
1001742f                      
10017431                      if (edx_1 == temp8_1)
10017435                          if (edx_1 == 0)
1001744b                              eax_9 = 0
1001744d                              break
1001744d                          
10017437                          edx_1 = eax_7[1]
1001743c                          char temp11_1 = esi_3[1]
1001743c                          c_5 = edx_1 u< temp11_1
1001743c                          
1001743f                          if (edx_1 == temp11_1)
10017441                              eax_7 = &eax_7[2]
10017444                              esi_3 = &esi_3[2]
10017444                              
10017449                              if (edx_1 != 0)
10017449                                  continue
10017449                              
1001744b                              eax_9 = 0
1001744d                              break
1001744d                      
1001744f                      bool c_6 = unimplemented  {sbb eax, eax}
10017451                      eax_9 = sbb.d(sbb.d(eax_7, eax_7, c_5), 0xffffffff, c_6)
10017451                      break
10017451                  
10017456                  if (eax_9 == 0)
10017456                      goto label_10017a0f
10017456                  
1001745c                  char* esi_4 = "item_power_shield"
10017461                  char* eax_10 = edi_1
10017463                  int32_t eax_12
10017463                  
10017463                  while (true)
10017463                      edx_1 = *eax_10
10017467                      char temp12_1 = *esi_4
10017467                      bool c_7 = edx_1 u< temp12_1
10017467                      
10017469                      if (edx_1 == temp12_1)
1001746d                          if (edx_1 == 0)
10017483                              eax_12 = 0
10017485                              break
10017485                          
1001746f                          edx_1 = eax_10[1]
10017474                          char temp15_1 = esi_4[1]
10017474                          c_7 = edx_1 u< temp15_1
10017474                          
10017477                          if (edx_1 == temp15_1)
10017479                              eax_10 = &eax_10[2]
1001747c                              esi_4 = &esi_4[2]
1001747c                              
10017481                              if (edx_1 != 0)
10017481                                  continue
10017481                              
10017483                              eax_12 = 0
10017485                              break
10017485                      
10017487                      bool c_8 = unimplemented  {sbb eax, eax}
10017489                      eax_12 = sbb.d(sbb.d(eax_10, eax_10, c_7), 0xffffffff, c_8)
10017489                      break
10017489                  
1001748e                  if (eax_12 == 0)
1001748e                      goto label_10017a0f
1001748e                  
10017494                  char* esi_5 = "weapon_grenadelauncher"
10017499                  char* eax_13 = edi_1
1001749b                  int32_t eax_15
1001749b                  
1001749b                  while (true)
1001749b                      edx_1 = *eax_13
1001749f                      char temp16_1 = *esi_5
1001749f                      bool c_9 = edx_1 u< temp16_1
1001749f                      
100174a1                      if (edx_1 == temp16_1)
100174a5                          if (edx_1 == 0)
100174bb                              eax_15 = 0
100174bd                              break
100174bd                          
100174a7                          edx_1 = eax_13[1]
100174ac                          char temp19_1 = esi_5[1]
100174ac                          c_9 = edx_1 u< temp19_1
100174ac                          
100174af                          if (edx_1 == temp19_1)
100174b1                              eax_13 = &eax_13[2]
100174b4                              esi_5 = &esi_5[2]
100174b4                              
100174b9                              if (edx_1 != 0)
100174b9                                  continue
100174b9                              
100174bb                              eax_15 = 0
100174bd                              break
100174bd                      
100174bf                      bool c_10 = unimplemented  {sbb eax, eax}
100174c1                      eax_15 = sbb.d(sbb.d(eax_13, eax_13, c_9), 0xffffffff, c_10)
100174c1                      break
100174c1                  
100174c6                  if (eax_15 == 0)
100174c6                      goto label_10017a0f
100174c6                  
100174cc                  char* esi_6 = "weapon_rocketlauncher"
100174d1                  char* eax_16 = edi_1
100174d3                  int32_t eax_18
100174d3                  
100174d3                  while (true)
100174d3                      edx_1 = *eax_16
100174d7                      char temp20_1 = *esi_6
100174d7                      bool c_11 = edx_1 u< temp20_1
100174d7                      
100174d9                      if (edx_1 == temp20_1)
100174dd                          if (edx_1 == 0)
100174f3                              eax_18 = 0
100174f5                              break
100174f5                          
100174df                          edx_1 = eax_16[1]
100174e4                          char temp23_1 = esi_6[1]
100174e4                          c_11 = edx_1 u< temp23_1
100174e4                          
100174e7                          if (edx_1 == temp23_1)
100174e9                              eax_16 = &eax_16[2]
100174ec                              esi_6 = &esi_6[2]
100174ec                              
100174f1                              if (edx_1 != 0)
100174f1                                  continue
100174f1                              
100174f3                              eax_18 = 0
100174f5                              break
100174f5                      
100174f7                      bool c_12 = unimplemented  {sbb eax, eax}
100174f9                      eax_18 = sbb.d(sbb.d(eax_16, eax_16, c_11), 0xffffffff, c_12)
100174f9                      break
100174f9                  
100174fe                  if (eax_18 == 0)
100174fe                      goto label_10017a0f
100174fe                  
10017504                  char* esi_7 = "weapon_hyperblaster"
10017509                  char* eax_19 = edi_1
1001750b                  int32_t eax_21
1001750b                  
1001750b                  while (true)
1001750b                      edx_1 = *eax_19
1001750f                      char temp24_1 = *esi_7
1001750f                      bool c_13 = edx_1 u< temp24_1
1001750f                      
10017511                      if (edx_1 == temp24_1)
10017515                          if (edx_1 == 0)
1001752b                              eax_21 = 0
1001752d                              break
1001752d                          
10017517                          edx_1 = eax_19[1]
1001751c                          char temp27_1 = esi_7[1]
1001751c                          c_13 = edx_1 u< temp27_1
1001751c                          
1001751f                          if (edx_1 == temp27_1)
10017521                              eax_19 = &eax_19[2]
10017524                              esi_7 = &esi_7[2]
10017524                              
10017529                              if (edx_1 != 0)
10017529                                  continue
10017529                              
1001752b                              eax_21 = 0
1001752d                              break
1001752d                      
1001752f                      bool c_14 = unimplemented  {sbb eax, eax}
10017531                      eax_21 = sbb.d(sbb.d(eax_19, eax_19, c_13), 0xffffffff, c_14)
10017531                      break
10017531                  
10017536                  if (eax_21 == 0)
10017536                      goto label_10017a0f
10017536                  
1001753c                  char* esi_8 = "weapon_railgun"
10017541                  char* eax_22 = edi_1
10017543                  int32_t eax_24
10017543                  
10017543                  while (true)
10017543                      edx_1 = *eax_22
10017547                      char temp28_1 = *esi_8
10017547                      bool c_15 = edx_1 u< temp28_1
10017547                      
10017549                      if (edx_1 == temp28_1)
1001754d                          if (edx_1 == 0)
10017563                              eax_24 = 0
10017565                              break
10017565                          
1001754f                          edx_1 = eax_22[1]
10017554                          char temp31_1 = esi_8[1]
10017554                          c_15 = edx_1 u< temp31_1
10017554                          
10017557                          if (edx_1 == temp31_1)
10017559                              eax_22 = &eax_22[2]
1001755c                              esi_8 = &esi_8[2]
1001755c                              
10017561                              if (edx_1 != 0)
10017561                                  continue
10017561                              
10017563                              eax_24 = 0
10017565                              break
10017565                      
10017567                      bool c_16 = unimplemented  {sbb eax, eax}
10017569                      eax_24 = sbb.d(sbb.d(eax_22, eax_22, c_15), 0xffffffff, c_16)
10017569                      break
10017569                  
1001756e                  if (eax_24 == 0)
1001756e                      goto label_10017a0f
1001756e                  
10017574                  char* esi_9 = "weapon_bfg"
10017579                  char* eax_25 = edi_1
1001757b                  int32_t eax_27
1001757b                  
1001757b                  while (true)
1001757b                      edx_1 = *eax_25
1001757f                      char temp32_1 = *esi_9
1001757f                      bool c_17 = edx_1 u< temp32_1
1001757f                      
10017581                      if (edx_1 == temp32_1)
10017585                          if (edx_1 == 0)
1001759b                              eax_27 = 0
1001759d                              break
1001759d                          
10017587                          edx_1 = eax_25[1]
1001758c                          char temp35_1 = esi_9[1]
1001758c                          c_17 = edx_1 u< temp35_1
1001758c                          
1001758f                          if (edx_1 == temp35_1)
10017591                              eax_25 = &eax_25[2]
10017594                              esi_9 = &esi_9[2]
10017594                              
10017599                              if (edx_1 != 0)
10017599                                  continue
10017599                              
1001759b                              eax_27 = 0
1001759d                              break
1001759d                      
1001759f                      bool c_18 = unimplemented  {sbb eax, eax}
100175a1                      eax_27 = sbb.d(sbb.d(eax_25, eax_25, c_17), 0xffffffff, c_18)
100175a1                      break
100175a1                  
100175a6                  if (eax_27 == 0)
100175a6                      goto label_10017a0f
100175a6                  
100175ac                  char* esi_10 = "weapon_boomer"
100175b1                  char* eax_28 = edi_1
100175b3                  int32_t eax_30
100175b3                  
100175b3                  while (true)
100175b3                      edx_1 = *eax_28
100175b7                      char temp36_1 = *esi_10
100175b7                      bool c_19 = edx_1 u< temp36_1
100175b7                      
100175b9                      if (edx_1 == temp36_1)
100175bd                          if (edx_1 == 0)
100175d3                              eax_30 = 0
100175d5                              break
100175d5                          
100175bf                          edx_1 = eax_28[1]
100175c4                          char temp39_1 = esi_10[1]
100175c4                          c_19 = edx_1 u< temp39_1
100175c4                          
100175c7                          if (edx_1 == temp39_1)
100175c9                              eax_28 = &eax_28[2]
100175cc                              esi_10 = &esi_10[2]
100175cc                              
100175d1                              if (edx_1 != 0)
100175d1                                  continue
100175d1                              
100175d3                              eax_30 = 0
100175d5                              break
100175d5                      
100175d7                      bool c_20 = unimplemented  {sbb eax, eax}
100175d9                      eax_30 = sbb.d(sbb.d(eax_28, eax_28, c_19), 0xffffffff, c_20)
100175d9                      break
100175d9                  
100175de                  if (eax_30 == 0)
100175de                      goto label_10017a0f
100175de                  
100175e4                  char* esi_11 = "weapon_phalanx"
100175e9                  char* eax_31 = edi_1
100175eb                  int32_t eax_33
100175eb                  
100175eb                  while (true)
100175eb                      edx_1 = *eax_31
100175ef                      char temp40_1 = *esi_11
100175ef                      bool c_21 = edx_1 u< temp40_1
100175ef                      
100175f1                      if (edx_1 == temp40_1)
100175f5                          if (edx_1 == 0)
1001760b                              eax_33 = 0
1001760d                              break
1001760d                          
100175f7                          edx_1 = eax_31[1]
100175fc                          char temp43_1 = esi_11[1]
100175fc                          c_21 = edx_1 u< temp43_1
100175fc                          
100175ff                          if (edx_1 == temp43_1)
10017601                              eax_31 = &eax_31[2]
10017604                              esi_11 = &esi_11[2]
10017604                              
10017609                              if (edx_1 != 0)
10017609                                  continue
10017609                              
1001760b                              eax_33 = 0
1001760d                              break
1001760d                      
1001760f                      bool c_22 = unimplemented  {sbb eax, eax}
10017611                      eax_33 = sbb.d(sbb.d(eax_31, eax_31, c_21), 0xffffffff, c_22)
10017611                      break
10017611                  
10017616                  if (eax_33 == 0)
10017616                      goto label_10017a0f
10017616                  
1001761c                  char* esi_12 = "item_quadfire"
10017621                  char* eax_34 = edi_1
10017623                  int32_t eax_36
10017623                  
10017623                  while (true)
10017623                      edx_1 = *eax_34
10017627                      char temp44_1 = *esi_12
10017627                      bool c_23 = edx_1 u< temp44_1
10017627                      
10017629                      if (edx_1 == temp44_1)
1001762d                          if (edx_1 == 0)
10017643                              eax_36 = 0
10017645                              break
10017645                          
1001762f                          edx_1 = eax_34[1]
10017634                          char temp47_1 = esi_12[1]
10017634                          c_23 = edx_1 u< temp47_1
10017634                          
10017637                          if (edx_1 == temp47_1)
10017639                              eax_34 = &eax_34[2]
1001763c                              esi_12 = &esi_12[2]
1001763c                              
10017641                              if (edx_1 != 0)
10017641                                  continue
10017641                              
10017643                              eax_36 = 0
10017645                              break
10017645                      
10017647                      bool c_24 = unimplemented  {sbb eax, eax}
10017649                      eax_36 = sbb.d(sbb.d(eax_34, eax_34, c_23), 0xffffffff, c_24)
10017649                      break
10017649                  
1001764e                  if (eax_36 == 0)
1001764e                      goto label_10017a0f
1001764e                  
10017654                  char* esi_13 = "weapon_etf_rifle"
10017659                  char* eax_37 = edi_1
1001765b                  int32_t eax_39
1001765b                  
1001765b                  while (true)
1001765b                      edx_1 = *eax_37
1001765f                      char temp48_1 = *esi_13
1001765f                      bool c_25 = edx_1 u< temp48_1
1001765f                      
10017661                      if (edx_1 == temp48_1)
10017665                          if (edx_1 == 0)
1001767b                              eax_39 = 0
1001767d                              break
1001767d                          
10017667                          edx_1 = eax_37[1]
1001766c                          char temp51_1 = esi_13[1]
1001766c                          c_25 = edx_1 u< temp51_1
1001766c                          
1001766f                          if (edx_1 == temp51_1)
10017671                              eax_37 = &eax_37[2]
10017674                              esi_13 = &esi_13[2]
10017674                              
10017679                              if (edx_1 != 0)
10017679                                  continue
10017679                              
1001767b                              eax_39 = 0
1001767d                              break
1001767d                      
1001767f                      bool c_26 = unimplemented  {sbb eax, eax}
10017681                      eax_39 = sbb.d(sbb.d(eax_37, eax_37, c_25), 0xffffffff, c_26)
10017681                      break
10017681                  
10017686                  if (eax_39 == 0)
10017686                      goto label_10017a0f
10017686                  
1001768c                  char* esi_14 = "weapon_proxlauncher"
10017691                  char* eax_40 = edi_1
10017693                  int32_t eax_42
10017693                  
10017693                  while (true)
10017693                      edx_1 = *eax_40
10017697                      char temp52_1 = *esi_14
10017697                      bool c_27 = edx_1 u< temp52_1
10017697                      
10017699                      if (edx_1 == temp52_1)
1001769d                          if (edx_1 == 0)
100176b3                              eax_42 = 0
100176b5                              break
100176b5                          
1001769f                          edx_1 = eax_40[1]
100176a4                          char temp55_1 = esi_14[1]
100176a4                          c_27 = edx_1 u< temp55_1
100176a4                          
100176a7                          if (edx_1 == temp55_1)
100176a9                              eax_40 = &eax_40[2]
100176ac                              esi_14 = &esi_14[2]
100176ac                              
100176b1                              if (edx_1 != 0)
100176b1                                  continue
100176b1                              
100176b3                              eax_42 = 0
100176b5                              break
100176b5                      
100176b7                      bool c_28 = unimplemented  {sbb eax, eax}
100176b9                      eax_42 = sbb.d(sbb.d(eax_40, eax_40, c_27), 0xffffffff, c_28)
100176b9                      break
100176b9                  
100176be                  if (eax_42 == 0)
100176be                      goto label_10017a0f
100176be                  
100176c4                  char* esi_15 = "weapon_plasmabeam"
100176c9                  char* eax_43 = edi_1
100176cb                  int32_t eax_45
100176cb                  
100176cb                  while (true)
100176cb                      edx_1 = *eax_43
100176cf                      char temp56_1 = *esi_15
100176cf                      bool c_29 = edx_1 u< temp56_1
100176cf                      
100176d1                      if (edx_1 == temp56_1)
100176d5                          if (edx_1 == 0)
100176eb                              eax_45 = 0
100176ed                              break
100176ed                          
100176d7                          edx_1 = eax_43[1]
100176dc                          char temp59_1 = esi_15[1]
100176dc                          c_29 = edx_1 u< temp59_1
100176dc                          
100176df                          if (edx_1 == temp59_1)
100176e1                              eax_43 = &eax_43[2]
100176e4                              esi_15 = &esi_15[2]
100176e4                              
100176e9                              if (edx_1 != 0)
100176e9                                  continue
100176e9                              
100176eb                              eax_45 = 0
100176ed                              break
100176ed                      
100176ef                      bool c_30 = unimplemented  {sbb eax, eax}
100176f1                      eax_45 = sbb.d(sbb.d(eax_43, eax_43, c_29), 0xffffffff, c_30)
100176f1                      break
100176f1                  
100176f6                  if (eax_45 == 0)
100176f6                      goto label_10017a0f
100176f6                  
100176fc                  char* esi_16 = "weapon_chainfist"
10017701                  char* eax_46 = edi_1
10017703                  int32_t eax_48
10017703                  
10017703                  while (true)
10017703                      edx_1 = *eax_46
10017707                      char temp60_1 = *esi_16
10017707                      bool c_31 = edx_1 u< temp60_1
10017707                      
10017709                      if (edx_1 == temp60_1)
1001770d                          if (edx_1 == 0)
10017723                              eax_48 = 0
10017725                              break
10017725                          
1001770f                          edx_1 = eax_46[1]
10017714                          char temp63_1 = esi_16[1]
10017714                          c_31 = edx_1 u< temp63_1
10017714                          
10017717                          if (edx_1 == temp63_1)
10017719                              eax_46 = &eax_46[2]
1001771c                              esi_16 = &esi_16[2]
1001771c                              
10017721                              if (edx_1 != 0)
10017721                                  continue
10017721                              
10017723                              eax_48 = 0
10017725                              break
10017725                      
10017727                      bool c_32 = unimplemented  {sbb eax, eax}
10017729                      eax_48 = sbb.d(sbb.d(eax_46, eax_46, c_31), 0xffffffff, c_32)
10017729                      break
10017729                  
1001772e                  if (eax_48 == 0)
1001772e                      goto label_10017a0f
1001772e                  
10017734                  char* esi_17 = "weapon_disintegrator"
10017739                  char* eax_49 = edi_1
1001773b                  int32_t eax_51
1001773b                  
1001773b                  while (true)
1001773b                      edx_1 = *eax_49
1001773f                      char temp64_1 = *esi_17
1001773f                      bool c_33 = edx_1 u< temp64_1
1001773f                      
10017741                      if (edx_1 == temp64_1)
10017745                          if (edx_1 == 0)
1001775b                              eax_51 = 0
1001775d                              break
1001775d                          
10017747                          edx_1 = eax_49[1]
1001774c                          char temp67_1 = esi_17[1]
1001774c                          c_33 = edx_1 u< temp67_1
1001774c                          
1001774f                          if (edx_1 == temp67_1)
10017751                              eax_49 = &eax_49[2]
10017754                              esi_17 = &esi_17[2]
10017754                              
10017759                              if (edx_1 != 0)
10017759                                  continue
10017759                              
1001775b                              eax_51 = 0
1001775d                              break
1001775d                      
1001775f                      bool c_34 = unimplemented  {sbb eax, eax}
10017761                      eax_51 = sbb.d(sbb.d(eax_49, eax_49, c_33), 0xffffffff, c_34)
10017761                      break
10017761                  
10017766                  if (eax_51 == 0)
10017766                      goto label_10017a0f
10017766                  
1001776c                  char* esi_18 = "item_ir_goggles"
10017771                  char* eax_52 = edi_1
10017773                  int32_t eax_54
10017773                  
10017773                  while (true)
10017773                      edx_1 = *eax_52
10017777                      char temp68_1 = *esi_18
10017777                      bool c_35 = edx_1 u< temp68_1
10017777                      
10017779                      if (edx_1 == temp68_1)
1001777d                          if (edx_1 == 0)
10017793                              eax_54 = 0
10017795                              break
10017795                          
1001777f                          edx_1 = eax_52[1]
10017784                          char temp71_1 = esi_18[1]
10017784                          c_35 = edx_1 u< temp71_1
10017784                          
10017787                          if (edx_1 == temp71_1)
10017789                              eax_52 = &eax_52[2]
1001778c                              esi_18 = &esi_18[2]
1001778c                              
10017791                              if (edx_1 != 0)
10017791                                  continue
10017791                              
10017793                              eax_54 = 0
10017795                              break
10017795                      
10017797                      bool c_36 = unimplemented  {sbb eax, eax}
10017799                      eax_54 = sbb.d(sbb.d(eax_52, eax_52, c_35), 0xffffffff, c_36)
10017799                      break
10017799                  
1001779e                  if (eax_54 == 0)
1001779e                      goto label_10017a0f
1001779e                  
100177a4                  char* esi_19 = "item_double"
100177a9                  char* eax_55 = edi_1
100177ab                  int32_t eax_57
100177ab                  
100177ab                  while (true)
100177ab                      edx_1 = *eax_55
100177af                      char temp72_1 = *esi_19
100177af                      bool c_37 = edx_1 u< temp72_1
100177af                      
100177b1                      if (edx_1 == temp72_1)
100177b5                          if (edx_1 == 0)
100177cb                              eax_57 = 0
100177cd                              break
100177cd                          
100177b7                          edx_1 = eax_55[1]
100177bc                          char temp75_1 = esi_19[1]
100177bc                          c_37 = edx_1 u< temp75_1
100177bc                          
100177bf                          if (edx_1 == temp75_1)
100177c1                              eax_55 = &eax_55[2]
100177c4                              esi_19 = &esi_19[2]
100177c4                              
100177c9                              if (edx_1 != 0)
100177c9                                  continue
100177c9                              
100177cb                              eax_57 = 0
100177cd                              break
100177cd                      
100177cf                      bool c_38 = unimplemented  {sbb eax, eax}
100177d1                      eax_57 = sbb.d(sbb.d(eax_55, eax_55, c_37), 0xffffffff, c_38)
100177d1                      break
100177d1                  
100177d6                  if (eax_57 == 0)
100177d6                      goto label_10017a0f
100177d6                  
100177dc                  char* esi_20 = "item_compass"
100177e1                  char* eax_58 = edi_1
100177e3                  int32_t eax_60
100177e3                  
100177e3                  while (true)
100177e3                      edx_1 = *eax_58
100177e7                      char temp76_1 = *esi_20
100177e7                      bool c_39 = edx_1 u< temp76_1
100177e7                      
100177e9                      if (edx_1 == temp76_1)
100177ed                          if (edx_1 == 0)
10017803                              eax_60 = 0
10017805                              break
10017805                          
100177ef                          edx_1 = eax_58[1]
100177f4                          char temp79_1 = esi_20[1]
100177f4                          c_39 = edx_1 u< temp79_1
100177f4                          
100177f7                          if (edx_1 == temp79_1)
100177f9                              eax_58 = &eax_58[2]
100177fc                              esi_20 = &esi_20[2]
100177fc                              
10017801                              if (edx_1 != 0)
10017801                                  continue
10017801                              
10017803                              eax_60 = 0
10017805                              break
10017805                      
10017807                      bool c_40 = unimplemented  {sbb eax, eax}
10017809                      eax_60 = sbb.d(sbb.d(eax_58, eax_58, c_39), 0xffffffff, c_40)
10017809                      break
10017809                  
1001780e                  if (eax_60 == 0)
1001780e                      goto label_10017a0f
1001780e                  
10017814                  char* esi_21 = "item_sphere_vengeance"
10017819                  char* eax_61 = edi_1
1001781b                  int32_t eax_63
1001781b                  
1001781b                  while (true)
1001781b                      edx_1 = *eax_61
1001781f                      char temp80_1 = *esi_21
1001781f                      bool c_41 = edx_1 u< temp80_1
1001781f                      
10017821                      if (edx_1 == temp80_1)
10017825                          if (edx_1 == 0)
1001783b                              eax_63 = 0
1001783d                              break
1001783d                          
10017827                          edx_1 = eax_61[1]
1001782c                          char temp83_1 = esi_21[1]
1001782c                          c_41 = edx_1 u< temp83_1
1001782c                          
1001782f                          if (edx_1 == temp83_1)
10017831                              eax_61 = &eax_61[2]
10017834                              esi_21 = &esi_21[2]
10017834                              
10017839                              if (edx_1 != 0)
10017839                                  continue
10017839                              
1001783b                              eax_63 = 0
1001783d                              break
1001783d                      
1001783f                      bool c_42 = unimplemented  {sbb eax, eax}
10017841                      eax_63 = sbb.d(sbb.d(eax_61, eax_61, c_41), 0xffffffff, c_42)
10017841                      break
10017841                  
10017846                  if (eax_63 == 0)
10017846                      goto label_10017a0f
10017846                  
1001784c                  char* esi_22 = "item_sphere_hunter"
10017851                  char* eax_64 = edi_1
10017853                  int32_t eax_66
10017853                  
10017853                  while (true)
10017853                      edx_1 = *eax_64
10017857                      char temp84_1 = *esi_22
10017857                      bool c_43 = edx_1 u< temp84_1
10017857                      
10017859                      if (edx_1 == temp84_1)
1001785d                          if (edx_1 == 0)
10017873                              eax_66 = 0
10017875                              break
10017875                          
1001785f                          edx_1 = eax_64[1]
10017864                          char temp87_1 = esi_22[1]
10017864                          c_43 = edx_1 u< temp87_1
10017864                          
10017867                          if (edx_1 == temp87_1)
10017869                              eax_64 = &eax_64[2]
1001786c                              esi_22 = &esi_22[2]
1001786c                              
10017871                              if (edx_1 != 0)
10017871                                  continue
10017871                              
10017873                              eax_66 = 0
10017875                              break
10017875                      
10017877                      bool c_44 = unimplemented  {sbb eax, eax}
10017879                      eax_66 = sbb.d(sbb.d(eax_64, eax_64, c_43), 0xffffffff, c_44)
10017879                      break
10017879                  
1001787e                  if (eax_66 == 0)
1001787e                      goto label_10017a0f
1001787e                  
10017884                  char* esi_23 = "item_sphere_defender"
10017889                  char* eax_67 = edi_1
1001788b                  int32_t eax_69
1001788b                  
1001788b                  while (true)
1001788b                      edx_1 = *eax_67
1001788f                      char temp88_1 = *esi_23
1001788f                      bool c_45 = edx_1 u< temp88_1
1001788f                      
10017891                      if (edx_1 == temp88_1)
10017895                          if (edx_1 == 0)
100178ab                              eax_69 = 0
100178ad                              break
100178ad                          
10017897                          edx_1 = eax_67[1]
1001789c                          char temp91_1 = esi_23[1]
1001789c                          c_45 = edx_1 u< temp91_1
1001789c                          
1001789f                          if (edx_1 == temp91_1)
100178a1                              eax_67 = &eax_67[2]
100178a4                              esi_23 = &esi_23[2]
100178a4                              
100178a9                              if (edx_1 != 0)
100178a9                                  continue
100178a9                              
100178ab                              eax_69 = 0
100178ad                              break
100178ad                      
100178af                      bool c_46 = unimplemented  {sbb eax, eax}
100178b1                      eax_69 = sbb.d(sbb.d(eax_67, eax_67, c_45), 0xffffffff, c_46)
100178b1                      break
100178b1                  
100178b6                  if (eax_69 == 0)
100178b6                      goto label_10017a0f
100178b6                  
100178bc                  char* esi_24 = "item_doppleganger"
100178c1                  char* eax_70 = edi_1
100178c3                  int32_t eax_72
100178c3                  
100178c3                  while (true)
100178c3                      edx_1 = *eax_70
100178c7                      char temp92_1 = *esi_24
100178c7                      bool c_47 = edx_1 u< temp92_1
100178c7                      
100178c9                      if (edx_1 == temp92_1)
100178cd                          if (edx_1 == 0)
100178e3                              eax_72 = 0
100178e5                              break
100178e5                          
100178cf                          edx_1 = eax_70[1]
100178d4                          char temp95_1 = esi_24[1]
100178d4                          c_47 = edx_1 u< temp95_1
100178d4                          
100178d7                          if (edx_1 == temp95_1)
100178d9                              eax_70 = &eax_70[2]
100178dc                              esi_24 = &esi_24[2]
100178dc                              
100178e1                              if (edx_1 != 0)
100178e1                                  continue
100178e1                              
100178e3                              eax_72 = 0
100178e5                              break
100178e5                      
100178e7                      bool c_48 = unimplemented  {sbb eax, eax}
100178e9                      eax_72 = sbb.d(sbb.d(eax_70, eax_70, c_47), 0xffffffff, c_48)
100178e9                      break
100178e9                  
100178ee                  if (eax_72 == 0)
100178ee                      goto label_10017a0f
100178ee                  
100178f4                  char* esi_25 = "dm_tag_token"
100178f9                  char* eax_73 = edi_1
100178fb                  int32_t eax_75
100178fb                  
100178fb                  while (true)
100178fb                      edx_1 = *eax_73
100178ff                      char temp96_1 = *esi_25
100178ff                      bool c_49 = edx_1 u< temp96_1
100178ff                      
10017901                      if (edx_1 == temp96_1)
10017905                          if (edx_1 == 0)
1001791b                              eax_75 = 0
1001791d                              break
1001791d                          
10017907                          edx_1 = eax_73[1]
1001790c                          char temp99_1 = esi_25[1]
1001790c                          c_49 = edx_1 u< temp99_1
1001790c                          
1001790f                          if (edx_1 == temp99_1)
10017911                              eax_73 = &eax_73[2]
10017914                              esi_25 = &esi_25[2]
10017914                              
10017919                              if (edx_1 != 0)
10017919                                  continue
10017919                              
1001791b                              eax_75 = 0
1001791d                              break
1001791d                      
1001791f                      bool c_50 = unimplemented  {sbb eax, eax}
10017921                      eax_75 = sbb.d(sbb.d(eax_73, eax_73, c_49), 0xffffffff, c_50)
10017921                      break
10017921                  
10017926                  if (eax_75 == 0)
10017926                      goto label_10017a0f
10017926                  
1001792c                  char* esi_26 = "dm_tag_token"
10017931                  char* eax_76 = edi_1
10017933                  int32_t eax_78
10017933                  
10017933                  while (true)
10017933                      edx_1 = *eax_76
10017937                      char temp100_1 = *esi_26
10017937                      bool c_51 = edx_1 u< temp100_1
10017937                      
10017939                      if (edx_1 == temp100_1)
1001793d                          if (edx_1 == 0)
10017953                              eax_78 = 0
10017955                              break
10017955                          
1001793f                          edx_1 = eax_76[1]
10017944                          char temp103_1 = esi_26[1]
10017944                          c_51 = edx_1 u< temp103_1
10017944                          
10017947                          if (edx_1 == temp103_1)
10017949                              eax_76 = &eax_76[2]
1001794c                              esi_26 = &esi_26[2]
1001794c                              
10017951                              if (edx_1 != 0)
10017951                                  continue
10017951                              
10017953                              eax_78 = 0
10017955                              break
10017955                      
10017957                      bool c_52 = unimplemented  {sbb eax, eax}
10017959                      eax_78 = sbb.d(sbb.d(eax_76, eax_76, c_51), 0xffffffff, c_52)
10017959                      break
10017959                  
1001795e                  if (eax_78 == 0)
1001795e                      goto label_10017a0f
1001795e                  
10017964                  char* esi_27 = "item_health_mega"
10017969                  char* eax_79 = edi_1
1001796b                  int32_t eax_81
1001796b                  
1001796b                  while (true)
1001796b                      edx_1 = *eax_79
1001796f                      char temp104_1 = *esi_27
1001796f                      bool c_53 = edx_1 u< temp104_1
1001796f                      
10017971                      if (edx_1 == temp104_1)
10017975                          if (edx_1 == 0)
1001798b                              eax_81 = 0
1001798d                              break
1001798d                          
10017977                          edx_1 = eax_79[1]
1001797c                          char temp107_1 = esi_27[1]
1001797c                          c_53 = edx_1 u< temp107_1
1001797c                          
1001797f                          if (edx_1 == temp107_1)
10017981                              eax_79 = &eax_79[2]
10017984                              esi_27 = &esi_27[2]
10017984                              
10017989                              if (edx_1 != 0)
10017989                                  continue
10017989                              
1001798b                              eax_81 = 0
1001798d                              break
1001798d                      
1001798f                      bool c_54 = unimplemented  {sbb eax, eax}
10017991                      eax_81 = sbb.d(sbb.d(eax_79, eax_79, c_53), 0xffffffff, c_54)
10017991                      break
10017991                  
10017996                  if (eax_81 == 0)
10017996                      goto label_10017a0f
10017996                  
10017998                  char* esi_28 = "item_quad"
1001799d                  char* eax_82 = edi_1
1001799f                  int32_t eax_84
1001799f                  
1001799f                  while (true)
1001799f                      edx_1 = *eax_82
100179a3                      char temp108_1 = *esi_28
100179a3                      bool c_55 = edx_1 u< temp108_1
100179a3                      
100179a5                      if (edx_1 == temp108_1)
100179a9                          if (edx_1 == 0)
100179bf                              eax_84 = 0
100179c1                              break
100179c1                          
100179ab                          edx_1 = eax_82[1]
100179b0                          char temp111_1 = esi_28[1]
100179b0                          c_55 = edx_1 u< temp111_1
100179b0                          
100179b3                          if (edx_1 == temp111_1)
100179b5                              eax_82 = &eax_82[2]
100179b8                              esi_28 = &esi_28[2]
100179b8                              
100179bd                              if (edx_1 != 0)
100179bd                                  continue
100179bd                              
100179bf                              eax_84 = 0
100179c1                              break
100179c1                      
100179c3                      bool c_56 = unimplemented  {sbb eax, eax}
100179c5                      eax_84 = sbb.d(sbb.d(eax_82, eax_82, c_55), 0xffffffff, c_56)
100179c5                      break
100179c5                  
100179ca                  if (eax_84 == 0)
100179ca                      goto label_10017a0f
100179ca                  
100179cc                  char* esi_29 = "item_invulnerability"
100179d1                  char* eax_85 = edi_1
100179d3                  int32_t eax_87
100179d3                  
100179d3                  while (true)
100179d3                      edx_1 = *eax_85
100179d7                      char temp112_1 = *esi_29
100179d7                      bool c_57 = edx_1 u< temp112_1
100179d7                      
100179d9                      if (edx_1 == temp112_1)
100179dd                          if (edx_1 == 0)
100179f3                              eax_87 = 0
100179f5                              break
100179f5                          
100179df                          edx_1 = eax_85[1]
100179e4                          char temp115_1 = esi_29[1]
100179e4                          c_57 = edx_1 u< temp115_1
100179e4                          
100179e7                          if (edx_1 == temp115_1)
100179e9                              eax_85 = &eax_85[2]
100179ec                              esi_29 = &esi_29[2]
100179ec                              
100179f1                              if (edx_1 != 0)
100179f1                                  continue
100179f1                              
100179f3                              eax_87 = 0
100179f5                              break
100179f5                      
100179f7                      bool c_58 = unimplemented  {sbb eax, eax}
100179f9                      eax_87 = sbb.d(sbb.d(eax_85, eax_85, c_57), 0xffffffff, c_58)
100179f9                      break
100179f9                  
100179fe                  if (eax_87 == 0)
100179fe                      goto label_10017a0f
100179fe          
10017aa0          ebp_1 = ebp_1[1]
10017aa0          
10017aa5          if (ebp_1 == 0)
10017aa5              break
10017aa5  
10017aac  int32_t result = j_sub_10006920(eax)
1001735a  var_4
10017abb  return result

10017abc                                                                                      90 90 90 90                              ....
10017ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10017c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10017ca0    int32_t sub_10017ca0(int32_t arg1, int32_t arg2)

10017ca6  int32_t __saved_ebx_1
10017ca6  int32_t __saved_ebx = __saved_ebx_1
10017ca7  int32_t __saved_ebp_1
10017ca7  int32_t __saved_ebp = __saved_ebp_1
10017ca8  int32_t __saved_esi_1
10017ca8  int32_t __saved_esi = __saved_esi_1
10017cb0  int32_t __saved_edi_1
10017cb0  int32_t __saved_edi = __saved_edi_1
10017cb0  
10017cbc  if (j_sub_10011670(arg1) != 0 && j_sub_10011610(arg1) == 0 && j_sub_10011670(arg2) != 0
10017cbc          && ((*(data_10066954 + arg2 * 0x1c + 4)).w:1.b & 0x20) != 0)
10017d07      int32_t eax_5 = data_1006694c
10017d12      int32_t ebx_2 = arg2 * 0x30
10017d15      int32_t edx_3 = arg1 * 0x30
10017d18      long double x87_r7_1 = fconvert.t(*(ebx_2 + eax_5 + 0x20))
10017d1c      long double temp0_1 = fconvert.t(*(edx_3 + eax_5 + 0x14))
10017d1c      x87_r7_1 - temp0_1
10017d20      void* ebx_3 = ebx_2 + eax_5
10017d22      void* ecx_2 = edx_3 + eax_5
10017d25      eax_5.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
10017d25          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
10017d25          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
10017d25      
10017d2a      if ((eax_5:1.b & 1) == 0)
10017d33          float var_120 = *(ecx_2 + 0x24)
10017d37          float edx_4 = *(ecx_2 + 0x28)
10017d3e          float eax_7 = *(ecx_2 + 0x2c)
10017d54          double var_158
10017d54          
10017d54          if (j_sub_1001ae60(&var_120) == 0)
10017d5d              int32_t var_148
10017d5d              var_148.q = fconvert.d(fconvert.t(eax_7))
10017d67              int32_t var_150
10017d67              var_150.q = fconvert.d(fconvert.t(edx_4))
10017d71              var_158 = fconvert.d(fconvert.t(var_120))
10017d74              int32_t var_15c_1 = arg1
10017d75              char* var_160_1 = "area %d center %f %f %f in solid…"
10017d7a              j_sub_10038d80("area %d center %f %f %f in solid…")
10017d7a          
10017d94          float var_e8 = var_120
10017d98          int32_t var_144_4 = 0xffffffff
10017d9e          float var_e4_1 = edx_4
10017da2          int32_t var_148_1 = 4
10017da8          float var_e0_1 = fconvert.s(fconvert.t(eax_7) - fconvert.t(1000f))
10017da8          int16_t top_1 = 0
10017dac          float* var_14c_1 = &var_e8
10017db4          float* var_150_1 = &var_120
10017db5          int32_t var_c4
10017db5          int32_t* var_154_1 = &var_c4
10017dcc          __builtin_memcpy(dest: &var_c4, src: j_sub_1001b260(), n: 0x24)
10017dcc          
10017dd4          if (var_c4 == 0)
10017def              int32_t var_bc
10017def              int32_t var_12c = var_bc
10017dfe              int32_t i = 0
10017e02              int32_t i_1 = 0
10017e02              
10017e06              if (*(ebx_3 + 4) s> 0)
10018009                  do
10017e17                      int32_t ecx_6 = *(data_10066944 + ((*(ebx_3 + 8) + i) << 2))
10017e1c                      int32_t eax_15
10017e1c                      int32_t edx_8
10017e1c                      edx_8:eax_15 = sx.q(ecx_6)
10017e1c                      
10017e2f                      if ((*(data_1006693c + ((eax_15 ^ edx_8) - edx_8) * 0x18 + 4) & 4)
10017e2f                              != 0)
10017e3b                          int32_t var_10c
10017e3b                          j_sub_100113f0(ecx_6, &var_10c)
10017e40                          unimplemented  {fld st0, dword [esp+0x24]}
10017e44                          unimplemented  {fadd dword [&data_100581d0]}
10017e4d                          float var_104
10017e4d                          long double temp1_1 = fconvert.t(var_104)
10017e4d                          unimplemented  {fcomp st0, dword [esp+0x3c]} f- temp1_1
10017e4d                          bool c0_2 =
10017e4d                              unimplemented  {fcomp st0, dword [esp+0x3c]} f< temp1_1
10017e4d                          bool c2_2 = is_unordered.t(
10017e4d                              unimplemented  {fcomp st0, dword [esp+0x3c]}, temp1_1)
10017e4d                          bool c3_2 =
10017e4d                              unimplemented  {fcomp st0, dword [esp+0x3c]} f== temp1_1
10017e4d                          unimplemented  {fcomp st0, dword [esp+0x3c]}
10017e4d                          
10017e56                          if ((((c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
10017e56                                  | (c3_2 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb):1.b & 0x41) != 0)
10017e5c                              int32_t ebp = 0
10017e5c                              
10017e60                              while (true)
10017e60                                  int16_t top_3
10017e60                                  
10017e60                                  if (ebp == 0)
10017e73                                      j_sub_1000f750(&var_12c)
10017e73                                      top_3 = top_1 - 1
10017e73                                      unimplemented  {call j_sub_1000f750}
10017e60                                  else
10017e67                                      j_sub_1000f780(&var_12c)
10017e67                                      top_3 = top_1 - 1
10017e67                                      unimplemented  {call j_sub_1000f780}
10017e67                                  
10017e78                                  float var_130_1 = fconvert.s(unimplemented  {fstp dword [
10017e78                                      esp+0x14], st0})
10017e78                                  unimplemented  {fstp dword [esp+0x14], st0}
10017e78                                  top_1 = top_3 + 1
10017e9d                                  float var_110
10017e9d                                  
10017e9d                                  if (j_sub_10010780(var_130_1, &var_12c, &var_10c, 
10017e9d                                          &var_110) != 0)
10017ea3                                      unimplemented  {fld st0, dword [esp+0x30]}
10017ea7                                      long double temp2_1 = fconvert.t(270f)
10017ea7                                      unimplemented  {fcomp st0, dword [&data_100581e4]}
10017ea7                                          f- temp2_1
10017ea7                                      bool c0_3 =
10017ea7                                          unimplemented  {fcomp st0, dword [&data_100581e4]}
10017ea7                                          f< temp2_1
10017ea7                                      bool c2_3 = is_unordered.t(
10017ea7                                          unimplemented  {fcomp st0, dword [&data_100581e4]
10017ea7                                              }, 
10017ea7                                          temp2_1)
10017ea7                                      bool c3_3 =
10017ea7                                          unimplemented  {fcomp st0, dword [&data_100581e4]}
10017ea7                                          f== temp2_1
10017ea7                                      unimplemented  {fcomp st0, dword [&data_100581e4]}
10017ead                                      int32_t eax_21
10017ead                                      eax_21.w = (c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
10017ead                                          | (c3_3 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb
10017ead                                      
10017eb2                                      if ((eax_21:1.b & 1) != 0)
10017eb8                                          unimplemented  {fld st0, dword [esp+0x34]}
10017ebc                                          unimplemented  {fsub st0, dword [esp+0x14]}
10017ec4                                          int32_t var_f8_1 = 0
10017ecd                                          float var_100 = fconvert.s(unimplemented  {fstp 
10017ecd                                              dword [esp+0x44], st0})
10017ecd                                          unimplemented  {fstp dword [esp+0x44], st0}
10017ed1                                          unimplemented  {fld st0, dword [esp+0x3c]}
10017ed5                                          unimplemented  {fsub st0, dword [esp+0x1c]}
10017ed9                                          float var_fc_1 = fconvert.s(unimplemented  {fstp 
10017ed9                                              dword [esp+0x48], st0})
10017ed9                                          unimplemented  {fstp dword [esp+0x48], st0}
10017edd                                          j_sub_10043290(&var_100)
10017edd                                          unimplemented  {call j_sub_10043290}
10017ee2                                          unimplemented  {fld st0, dword [esp+0x40]}
10017ee6                                          unimplemented  {fmul st0, qword [&data_100581d8]}
10017eef                                          unimplemented  {fsub st0, dword [esp+0x1c]}
10017ef3                                          unimplemented  {fcompp }
10017ef3                                              f- unimplemented  {fcompp }
10017ef3                                          bool c0_4 = unimplemented  {fcompp }
10017ef3                                              f< unimplemented  {fcompp }
10017ef3                                          bool c2_4 = is_unordered.t(
10017ef3                                              unimplemented  {fcompp }, 
10017ef3                                              unimplemented  {fcompp })
10017ef3                                          bool c3_4 = unimplemented  {fcompp }
10017ef3                                              f== unimplemented  {fcompp }
10017ef3                                          unimplemented  {fcompp }
10017ef3                                          unimplemented  {fcompp }
10017ef3                                          
10017efa                                          if ((((c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
10017efa                                                  | (c3_4 ? 1 : 0) << 0xe
10017efa                                                  | (top_1 & 7) << 0xb):1.b & 0x41) == 0)
10017f0f                                              float var_d0
10017f0f                                              j_sub_10043570(&var_100, var_110, &var_d0)
10017f18                                              int32_t var_150_3 = 0
10017f1a                                              int32_t var_154_2 = 0x3d
10017f1c                                              var_158.d = 0x3dcccccd
10017f21                                              int32_t var_15c_2 = 0x1e
10017f2a                                              int32_t var_160_2 = 3
10017f31                                              float var_ec_1 = var_130_1
10017f36                                              int32_t var_16c_1 = 1
10017f3c                                              int32_t var_170_1 = 2
10017f46                                              int32_t var_178_1 = 0xffffffff
10017f49                                              float var_f4 = 0f
10017f54                                              int32_t var_f0 = 0
10017f5f                                              void var_50
10017f5f                                              int32_t eax_24 = j_sub_1000f840(&var_50, 
10017f5f                                                  0xffffffff, &var_12c, 2, 1, &var_f4, 
10017f5f                                                  &var_d0, 3, 0x1e, 0.100000001f, 0x3d, 0)
10017f5f                                              top_1 -= 1
10017f5f                                              unimplemented  {call j_sub_1000f840}
10017f75                                              float var_a0[0x10]
10017f75                                              __builtin_memcpy(dest: &var_a0, src: eax_24, 
10017f75                                                  n: 0x50)
10017f89                                              char var_60
10017f89                                              int32_t var_54
10017f89                                              
10017f89                                              if (var_54 s< 0x1e && (var_60 & 0x38) == 0)
10017f8b                                                  int32_t edi = 0
10017f8d                                                  int32_t esi_3 = 0
10017f8f                                                  int32_t var_130_2 = 0
10017f8f                                                  
10017f93                                                  while (true)
10017f93                                                      unimplemented  {fild st0, dword [esp
10017f93                                                          +0x10]}
10017fa1                                                      float var_dc
10017fa1                                                      float* var_14c_4 = &var_dc
10017fa9                                                      float var_14c_5 = fconvert.s(
10017fa9                                                          unimplemented  {fstp dword [esp], st0})
10017fa9                                                      unimplemented  {fstp dword [esp], st0}
10017fad                                                      j_sub_10043380(&var_a0, var_14c_5, 
10017fad                                                          &var_100, &var_dc)
10017fb2                                                      unimplemented  {fld st0, dword [esp
10017fb2                                                          +0x7c]}
10017fb6                                                      unimplemented  {fadd qword [
10017fb6                                                          &data_10058110]}
10017fc0                                                      float* var_154_3 = &var_dc
10017fc1                                                      float var_d4_1 = fconvert.s(
10017fc1                                                          unimplemented  {fstp dword [esp+0x80], 
10017fc1                                                          st0})
10017fc1                                                      unimplemented  {fstp dword [esp+0x80], 
10017fc1                                                          st0}
10017fc1                                                      
10017fd9                                                      if (j_sub_1001ae60() == arg2)
10017fd9                                                          break
10017fd9                                                      
10017fdb                                                      esi_3 -= 8
10017fde                                                      edi += 8
10017fe4                                                      int32_t var_130_3 = esi_3
10017fe4                                                      
10017fe8                                                      if (esi_3 s< 0xffffffe0)
10017fe8                                                          goto label_10017ff1
10017fe8                                                  
10017fef                                                  if (edi s<= 0x20)
1001801c                                                      int32_t* eax_28 = j_sub_10010ff0()
1001801c                                                      
10018025                                                      if (eax_28 == 0)
10018025                                                          break
10018025                                                      
1001802e                                                      eax_28[1] = 0
10018031                                                      *eax_28 = arg2
10018033                                                      eax_28[2] = 0
1001803c                                                      eax_28[3] = var_12c
10018043                                                      int32_t var_b8
10018043                                                      eax_28[4] = var_b8
1001804a                                                      int32_t var_b4
1001804a                                                      eax_28[5] = var_b4
10018051                                                      eax_28[6] = var_10c
10018058                                                      int32_t var_108
10018058                                                      eax_28[7] = var_108
1001805f                                                      eax_28[8] = var_104
1001805f                                                      
10018062                                                      if (ebp == 0)
1001806d                                                          eax_28[9] = 0xc
10018062                                                      else
10018064                                                          eax_28[9] = 0xd
10018064                                                      
1001807b                                                      eax_28[0xa].w = 0x1f4
1001808e                                                      eax_28[0xb] =
1001808e                                                          *(data_1006675c + (arg1 << 2))
10018097                                                      *(data_1006675c + (arg1 << 2)) = eax_28
100180a0                                                      data_100667bc += 1
100180b0                                                      return 1
100180b0                                  
10017ff1                                  label_10017ff1:
10017ff1                                  ebp += 1
10017ff1                                  
10017ff5                                  if (ebp s>= 1)
10017ffb                                      i = i_1
10017ffb                                      goto label_10018002
10017ffb                              
10017e9d                              break
10017e9d                      
10018002                      label_10018002:
10018002                      i += 1
10018005                      i_1 = i
10018009                  while (i s< *(ebx_3 + 4))
10018009  
1001801b  return 0

100180b1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
100180c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100180e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100181a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100181c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100181d0    void sub_100181d0(int32_t arg1)

100181ea  if (j_sub_10011670(arg1) != 0 && j_sub_10011610(arg1) == 0)
1001820d      void* esi_3 = arg1 * 0x30 + data_1006694c
1001820f      int32_t ebx_1 = 0
10018211      void* var_74_1 = esi_3
10018215      int32_t var_8c_1 = 0
10018219      int32_t ecx_2 = *(esi_3 + 4)
10018219      
1001821e      if (ecx_2 s> 0)
1001868b          do
10018236              int32_t eax_5
10018236              int32_t edx_3
10018236              edx_3:eax_5 = sx.q(*(data_10066944 + ((ebx_1 + *(esi_3 + 8)) << 2)))
10018244              int32_t* edx_5 = data_1006693c + ((eax_5 ^ edx_3) - edx_3) * 0x18
10018247              int32_t* var_78_1 = edx_5
10018247              
1001824f              if ((edx_5[1].b & 4) != 0)
10018258                  int32_t i = 0
1001825c                  int32_t i_1 = 0
1001825c                  
10018260                  if (edx_5[2] s> 0)
10018677                      do
10018273                          int32_t eax_12 = *(data_10066934 + ((i + edx_5[3]) << 2))
1001827a                          int32_t eax_13 = 0
1001827e                          int32_t var_84_1 = 0
1001827e                          
10018282                          if (ecx_2 s> 0)
1001865f                              do
10018296                                  int32_t eax_16
10018296                                  int32_t edx_6
10018296                                  edx_6:eax_16 = sx.q(
10018296                                      *(data_10066944 + ((eax_13 + *(esi_3 + 8)) << 2)))
100182a0                                  int32_t edi_4 = (eax_16 ^ edx_6) - edx_6
100182a2                                  int32_t var_88_1 = edi_4
100182a9                                  void* esi_4 = data_1006693c + edi_4 * 0x18
100182ac                                  void* var_70_1 = esi_4
100182ac                                  
100182b4                                  if ((*(esi_4 + 4) & 4) == 0)
100182bd                                      int32_t j = 0
100182c1                                      int32_t j_1 = 0
100182c1                                      
100182c5                                      if (*(esi_4 + 8) s> 0)
100182cf                                          int32_t eax_20
100182cf                                          int32_t edx_8
100182cf                                          edx_8:eax_20 = sx.q(eax_12)
100182d4                                          int32_t ebp_4 = (eax_20 ^ edx_8) - edx_8
100182d6                                          int32_t var_94_1 = ebp_4
100182d6                                          
10018647                                          do
100182e7                                              int32_t eax_23
100182e7                                              int32_t edx_11
100182e7                                              edx_11:eax_23 = sx.q(*(data_10066934
100182e7                                                  + ((*(esi_4 + 0xc) + j) << 2)))
100182e7                                              
100182ee                                              if (ebp_4 == (eax_23 ^ edx_11) - edx_11)
100182f4                                                  int32_t ecx_4 = *(esi_4 + 0x10)
100182f4                                                  
10018300                                                  if (ecx_4 == arg1)
10018302                                                      ecx_4 = *(esi_4 + 0x14)
10018302                                                  
10018320                                                  void* eax_29 =
10018320                                                      ecx_4 * 0x30 + data_1006694c
10018322                                                  int32_t ebx_3
10018322                                                  ebx_3.b =
10018322                                                      *(data_10066954 + ecx_4 * 0x1c + 4)
10018322                                                  
10018329                                                  if ((ebx_3.b & 1) != 0)
1001832f                                                      int32_t ecx_6 = *(eax_29 + 4)
10018332                                                      uint32_t ebx_4 = 0
10018336                                                      int32_t var_ac_1 = 0
1001833a                                                      int32_t var_90_1 = ecx_6
1001833a                                                      
1001833e                                                      if (ecx_6 s<= 0)
1001833e                                                          break
1001833e                                                      
1001834f                                                      int32_t* var_98_1 =
1001834f                                                          data_10066944 + (*(eax_29 + 8) << 2)
100183dc                                                      bool cond:8_1
100183dc                                                      
100183dc                                                      do
10018359                                                          int32_t eax_33
10018359                                                          int32_t edx_16
10018359                                                          edx_16:eax_33 = sx.q(*var_98_1)
1001835c                                                          int32_t eax_35 =
1001835c                                                              (eax_33 ^ edx_16) - edx_16
1001835c                                                          
10018360                                                          if (eax_35 != edi_4)
10018362                                                              int32_t edx_17 = data_1006693c
10018368                                                              int32_t ecx_7 = eax_35 * 3
1001836b                                                              int32_t edi_5 =
1001836b                                                                  *(edx_17 + (ecx_7 << 3) + 8)
1001836f                                                              void* ebp_5 = edx_17 + (ecx_7 << 3)
10018372                                                              int32_t ecx_8 = 0
10018372                                                              
10018376                                                              if (edi_5 s> 0)
10018381                                                                  int32_t* esi_5 =
10018381                                                                      data_10066934 + (*(ebp_5 + 0xc) << 2)
10018381                                                                  
10018399                                                                  do
10018386                                                                      int32_t eax_38
10018386                                                                      int32_t edx_19
10018386                                                                      edx_19:eax_38 = sx.q(*esi_5)
10018386                                                                      
10018391                                                                      if ((eax_38 ^ edx_19) - edx_19
10018391                                                                              == var_94_1)
1001839d                                                                          char eax_41 = (*(ebp_5 + 4)).b
1001839d                                                                          
100183a2                                                                          if ((eax_41 & 1) != 0)
100183b3                                                                              ebx_4 = (sx.d(not.b(eax_41)) & 4) u>> 2
100183a2                                                                          else
100183a4                                                                              ebx_4 = 1
100183a4                                                                          
100183a2                                                                          break
100183a2                                                                      
10018393                                                                      ecx_8 += 1
10018394                                                                      esi_5 = &esi_5[1]
10018399                                                                  while (ecx_8 s< edi_5)
10018399                                                              
100183b6                                                              ebp_4 = var_94_1
100183b6                                                              
100183bc                                                              if (ecx_8 s< edi_5)
100183bc                                                                  break
100183bc                                                              
100183be                                                              edi_4 = var_88_1
100183c2                                                              ecx_6 = var_90_1
100183c2                                                          
100183d2                                                          cond:8_1 = var_ac_1 + 1 s< ecx_6
100183d4                                                          var_ac_1 += 1
100183d8                                                          var_98_1 = &var_98_1[1]
100183dc                                                      while (cond:8_1)
100183dc                                                      
100183e4                                                      if (ebx_4 == 0)
100183e4                                                          break
100183e4                                                  
100183f5                                                  int32_t edi_6 = data_1006691c
100183fd                                                  int32_t eax_45 =
100183fd                                                      data_1006692c + (ebp_4 << 3)
10018400                                                  int32_t ecx_9
10018400                                                  ecx_9.b = eax_12 s< 0
10018409                                                  float* esi_8 =
10018409                                                      edi_6 + *(eax_45 + (ecx_9 << 2)) * 0xc
10018410                                                  int32_t edx_24
10018410                                                  edx_24.b = ecx_9 == 0
1001841a                                                  int32_t eax_47 =
1001841a                                                      *(eax_45 + (edx_24 << 2)) * 3
10018422                                                  float* edi_7 = edi_6 + (eax_47 << 2)
10018425                                                  int32_t eax_48 = *var_78_1
1001842e                                                  int32_t eax_49 = data_10066924
10018433                                                  float var_60 = fconvert.s(
10018433                                                      fconvert.t(*(edi_6 + (eax_47 << 2)))
10018433                                                      - fconvert.t(*esi_8))
10018447                                                  float var_5c_1 = fconvert.s(
10018447                                                      fconvert.t(edi_7[1])
10018447                                                      - fconvert.t(esi_8[1]))
10018451                                                  float var_58_1 = fconvert.s(
10018451                                                      fconvert.t(edi_7[2])
10018451                                                      - fconvert.t(esi_8[2]))
10018455                                                  float var_54
10018455                                                  j_sub_100434b0(eax_49 + eax_48 * 0x14, 
10018455                                                      &var_60, &var_54)
1001845f                                                  j_sub_10043290(&var_54)
10018479                                                  float var_a8 = fconvert.s(
10018479                                                      fconvert.t(*esi_8) + fconvert.t(*edi_7))
10018483                                                  float var_a4_1 = fconvert.s(
10018483                                                      fconvert.t(esi_8[1])
10018483                                                      + fconvert.t(edi_7[1]))
1001848d                                                  float var_a0_1 = fconvert.s(
1001848d                                                      fconvert.t(edi_7[2])
1001848d                                                      + fconvert.t(esi_8[2]))
10018491                                                  j_sub_10043570(&var_a8, 0.5f, &var_a8)
100184ad                                                  j_sub_10043380(&var_a8, 8f, &var_54, 
100184ad                                                      &var_a8)
100184c4                                                  float var_6c = var_a8
100184d1                                                  float var_68_1 = var_a4_1
100184de                                                  float var_64_1 = fconvert.s(
100184de                                                      fconvert.t(var_a0_1)
100184de                                                      - fconvert.t(1000f))
10018502                                                  int32_t var_48
10018502                                                  void var_24
10018502                                                  __builtin_memcpy(dest: &var_48, 
10018502                                                      src: j_sub_1001b260(&var_24, &var_a8, 
10018502                                                          &var_6c, 4, 0xffffffff), 
10018502                                                      n: 0x24)
10018502                                                  
1001850a                                                  if (var_48 != 0)
1001850a                                                      break
1001850a                                                  
10018515                                                  float var_40
10018515                                                  int32_t eax_54 = j_sub_1001ae60(&var_40)
10018515                                                  
10018528                                                  if (eax_54 == arg1)
10018528                                                      break
10018528                                                  
1001853a                                                  if (j_sub_10011700(arg1, eax_54) != 0)
1001853a                                                      break
1001853a                                                  
1001854b                                                  if (j_sub_10011670(eax_54) == 0
1001854b                                                          && j_sub_10011610(eax_54) == 0)
10018558                                                      break
10018558                                                  
10018571                                                  if ((*(data_10066954 + eax_54 * 0x1c) & 6)
10018571                                                          != 0)
10018571                                                      break
10018571                                                  
10018577                                                  int32_t* eax_60 = j_sub_10010ff0()
10018577                                                  
10018580                                                  if (eax_60 == 0)
10018580                                                      break
10018580                                                  
1001858a                                                  *eax_60 = eax_54
1001858c                                                  eax_60[1] = 0
10018593                                                  eax_60[2] = eax_12
1001859b                                                  eax_60[3] = var_a8
100185a2                                                  eax_60[4] = var_a4_1
100185a9                                                  eax_60[5] = var_a0_1
100185b3                                                  eax_60[6] = var_40
100185bd                                                  int32_t var_3c
100185bd                                                  eax_60[7] = var_3c
100185c7                                                  float var_38
100185c7                                                  eax_60[8] = var_38
100185ca                                                  eax_60[9] = 7
100185d1                                                  uint32_t eax_63 = j_sub_10011610(eax_54)
100185db                                                  int32_t eax_64
100185db                                                  
100185db                                                  if (eax_63 == 0)
100185f5                                                      long double x87_r7_18 =
100185f5                                                          float.t(j_sub_10011520())
100185f9                                                      long double temp0_1 = fconvert.t(
100185f9                                                          fconvert.s(fconvert.t(var_a0_1)
100185f9                                                          - fconvert.t(var_38)))
100185f9                                                      x87_r7_18 - temp0_1
100185fd                                                      eax_64.w =
100185fd                                                          (x87_r7_18 < temp0_1 ? 1 : 0) << 8 | (
100185fd                                                          is_unordered.t(x87_r7_18, temp0_1) ? 1
100185fd                                                          : 0) << 0xa
100185fd                                                          | (x87_r7_18 == temp0_1 ? 1 : 0) << 0xe
100185fd                                                  
10018602                                                  if (eax_63 != 0 || (eax_64:1.b & 1) == 0)
1001860c                                                      eax_60[0xa].w = 0x64
10018602                                                  else
10018604                                                      eax_60[0xa].w = 0xbb8
10018604                                                  
10018617                                                  edi_4 = var_88_1
1001861e                                                  eax_60[0xb] =
1001861e                                                      *(data_1006675c + (arg1 << 2))
10018627                                                  j = j_1
1001862b                                                  *(data_1006675c + (arg1 << 2)) = eax_60
10018633                                                  esi_4 = var_70_1
10018638                                                  data_100667b8 += 1
10018638                                              
10018640                                              j += 1
10018643                                              j_1 = j
10018647                                          while (j s< *(esi_4 + 8))
10018647                                  
1001864d                                  esi_3 = var_74_1
10018655                                  eax_13 = var_84_1 + 1
10018656                                  ecx_2 = *(esi_3 + 4)
10018659                                  var_84_1 = eax_13
1001865f                              while (eax_13 s< ecx_2)
1001865f                              
10018665                              edx_5 = var_78_1
10018669                              i = i_1
10018669                          
10018670                          i += 1
10018673                          i_1 = i
10018677                      while (i s< edx_5[2])
10018677                      
1001867d                      ebx_1 = var_8c_1
1001867d              
10018681              ecx_2 = *(esi_3 + 4)
10018684              ebx_1 += 1
10018687              var_8c_1 = ebx_1
1001868b          while (ebx_1 s< ecx_2)

1001869c                                                                                      90 90 90 90                              ....
100186a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100186c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100186e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100187a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100187c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100187e0    int32_t sub_100187e0()

100187e0  void* eax_3 = data_1006695c
100187e0  
100187e7  if (eax_3 != 0)
100187ea      j_sub_100390b0(eax_3)
100187ea  
100187f8  int32_t eax = j_sub_10039000(0x2c0000)
100187fd  int32_t ecx = data_10066948
10018803  data_1006695c = eax
1001880b  int32_t result = 1
10018810  int32_t esi = 0
10018812  data_10066958 = 1
10018812  
10018819  if (ecx s> 0)
10018821      void* edi_1 = nullptr
100188c7      bool cond:0_1
100188c7      
100188c7      do
10018823          int32_t ecx_1 = data_10066954
10018829          *(edi_1 + ecx_1 + 0x18) = result
1001882d          *(edi_1 + ecx_1 + 0x14) = 0
1001883a          void* edx_1 = edi_1 + ecx_1
1001883a          
10018842          for (int32_t* i = *(data_1006675c + (esi << 2)); i != 0; i = i[0xb])
10018858              int32_t* ecx_5 = data_1006695c + (*(edx_1 + 0x14) + *(edx_1 + 0x18)) * 0x2c
1001885e              *ecx_5 = *i
10018863              ecx_5[1] = i[1]
10018869              ecx_5[2] = i[2]
1001886f              ecx_5[3] = i[3]
10018875              ecx_5[4] = i[4]
1001887b              ecx_5[5] = i[5]
10018881              ecx_5[6] = i[6]
10018887              ecx_5[7] = i[7]
1001888d              ecx_5[8] = i[8]
10018893              ecx_5[9] = i[9]
10018896              int32_t ebp_13
10018896              ebp_13.w = i[0xa].w
1001889a              ecx_5[0xa].w = ebp_13.w
100188a2              *(edx_1 + 0x14) += 1
100188a2          
100188b4          result = data_10066958 + *(edx_1 + 0x14)
100188bc          esi += 1
100188bd          edi_1 += 0x1c
100188c0          cond:0_1 = esi s< data_10066948
100188c2          data_10066958 = result
100188c7      while (cond:0_1)
100188c7  
100188d0  return result

100188d1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
100188e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10018920    int32_t sub_10018920()

10018927  if (data_100667e0 == 0)
1001892b      return 0
1001892b  
10018939  if (data_10066980 s>= data_10066948)
1001893d      return 0
1001893d  
1001893e  int32_t* ecx_1 = data_10062954
1001893e  
10018946  if (ecx_1 == 0)
10018957      ecx_1 = j_sub_100389c0("framereachability", &data_1005bdf8)
1001895c      data_10062954 = ecx_1
10018962      long double x87_r7_1 = fconvert.t(ecx_1[4])
10018965      long double temp2_1 = fconvert.t(0f)
10018965      x87_r7_1 - temp2_1
1001896b      int32_t* eax_3
1001896b      eax_3.w = (x87_r7_1 < temp2_1 ? 1 : 0) << 8
1001896b          | (is_unordered.t(x87_r7_1, temp2_1) ? 1 : 0) << 0xa
1001896b          | (x87_r7_1 == temp2_1 ? 1 : 0) << 0xe
1001896b      
10018970      if ((eax_3:1.b & 0x41) != 0)
10018972          ecx_1[4] = 0x41700000
10018979          ecx_1 = data_10062954
10018979  
10018986  int32_t eax_4
10018986  int16_t x87control
10018986  int16_t x87control_1
10018986  eax_4, x87control_1 = __ftol(x87control, fconvert.t(ecx_1[4]))
10018986  int16_t top = 0
10018998  int32_t ebx_1 = eax_4 + data_10066980
10018998  
1001899c  if (data_10062950 == 0)
100189ad      int32_t* ecx_3 = j_sub_100389c0("reachability_delay", &data_1005bddc)
100189b2      data_10062950 = ecx_3
100189b8      long double x87_r7_3 = fconvert.t(ecx_3[4])
100189bb      long double temp3_1 = fconvert.t(0f)
100189bb      x87_r7_3 - temp3_1
100189bb      top = 0
100189c1      int32_t* eax_6
100189c1      eax_6.w = (x87_r7_3 < temp3_1 ? 1 : 0) << 8
100189c1          | (is_unordered.t(x87_r7_3, temp3_1) ? 1 : 0) << 0xa
100189c1          | (x87_r7_3 == temp3_1 ? 1 : 0) << 0xe
100189c1      
100189c6      if ((eax_6:1.b & 0x41) != 0)
100189c8          ecx_3[4] = 0x43480000
100189c8  
100189cf  int32_t eax_7 = j_sub_100378c0()
100189d4  int32_t esi = data_10066980
100189e2  long double st0
100189e2  
100189e2  if (esi s< data_10066948)
100189ea      while (esi s< ebx_1)
100189f6          int32_t eax_8 = data_10066948
100189fb          float edi_1 = 1.40129846e-45f
10018a03          data_10066980 += 1
10018a03          
10018a09          if (eax_8 s> 1)
10018a67              do
10018a0d                  if (esi != edi_1 && j_sub_10011700(esi, edi_1) == 0
10018a0d                          && j_sub_10011860(esi, edi_1) == 0)
10018a2d                      int32_t eax_11
10018a2d                      eax_11, st0 = j_sub_10011ae0(esi, edi_1)
10018a2d                      top -= 1
10018a2d                      unimplemented  {call j_sub_10011ae0}
10018a2d                      
10018a37                      if (eax_11 == 0)
10018a3b                          int32_t eax_12
10018a3b                          eax_12, x87control_1, st0 = j_sub_10012200(esi, edi_1)
10018a3b                          top -= 1
10018a3b                          unimplemented  {call j_sub_10012200}
10018a3b                          
10018a45                          if (eax_12 == 0)
10018a49                              int32_t eax_13
10018a49                              eax_13, x87control_1, st0 = j_sub_10014e60(esi, edi_1)
10018a49                              top -= 1
10018a49                              unimplemented  {call j_sub_10014e60}
10018a49                              
10018a53                              if (eax_13 == 0)
10018a57                                  x87control_1 = j_sub_10013cc0(esi, edi_1)
10018a57                  
10018a5f                  eax_8 = data_10066948
10018a64                  edi_1 += 1
10018a67              while (edi_1 s< eax_8)
10018a67          
10018a69          int32_t i = 1
10018a69          
10018a70          if (eax_8 s> 1)
10018a9d              do
10018a74                  if (esi != i && j_sub_10011700(esi, i) == 0)
10018a86                      x87control_1 = j_sub_10016ba0(esi, i)
10018a8d                      j_sub_10017ca0(esi, i)
10018a8d                  
10018a9a                  i += 1
10018a9d              while (i s< data_10066948)
10018a9d          
10018aac          int32_t edi_3 = j_sub_100378c0() - eax_7
10018aae          unimplemented  {fld st0, dword [ecx+0x10]}
10018ab1          int32_t eax_17
10018ab1          eax_17, x87control_1 = __ftol(x87control_1, st0)
10018ab1          
10018ab8          if (edi_3 s> eax_17)
10018ab8              break
10018ab8          
10018abf          esi += 1
10018abf          
10018ac2          if (esi s>= data_10066948)
10018ac2              break
10018ac2  
10018ac8  int32_t esi_1 = data_10066980
10018ace  int32_t eax_19 = data_10066948
10018ad5  char* var_18_9
10018ad5  int32_t var_14_10
10018ad5  
10018ad5  if (esi_1 s< eax_19)
10018b22      unimplemented  {fld st0, dword [eax+0x10]}
10018b25      int32_t eax_21
10018b25      int16_t x87control_2
10018b25      eax_21, x87control_2 = __ftol(x87control_1, st0)
10018b25      
10018b2f      if (esi_1 - eax_21 s<= 1)
10018b38          data_10063fe8(1, "calculating reachability...\n")
10018b38      
10018b47      unimplemented  {fld st0, dword [ecx+0x10]}
10018b4a      int32_t eax_22 = __ftol(x87control_2, st0)
10018b4f      int32_t ecx_4 = data_10066948
10018b57      int32_t eax_23 = data_10066980
10018b57      
10018b60      if (eax_22 + eax_23 s>= ecx_4)
10018b6b          data_10063fe8(1, "\r%6d%%%%", 0x64)
10018b78          data_10063fe8(1, "\nplease wait while storing reac…")
10018b8a          return 1
10018b8a      
10018b97      var_14_10 = divs.dp.d(sx.q(eax_23 * 0x64), ecx_4)
10018b98      var_18_9 = "\r%6d%%%%"
10018ad5  else
10018ad7      int32_t i_1 = 1
10018ad7      
10018ade      if (eax_19 s> 1)
10018af1          do
10018ae1              j_sub_100181d0(i_1)
10018ae1              top -= 1
10018ae1              unimplemented  {call j_sub_100181d0}
10018aee              i_1 += 1
10018af1          while (i_1 s< data_10066948)
10018af1      
10018af3      j_sub_10015bb0()
10018af8      j_sub_100160e0()
10018afd      j_sub_100187e0()
10018b02      j_sub_10010fd0()
10018b0d      var_14_10 = data_1006675c
10018b0e      j_sub_100390b0(var_14_10)
10018b13      var_18_9 = "calculating clusters...\n"
10018b13  
10018b9f  data_10063fe8(1, var_18_9, var_14_10)
10018bb1  return 1

10018bb2                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10018bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10018c70    int32_t sub_10018c70()

10018c70  int32_t result = data_100667e0
10018c70  
10018c77  if (result != 0)
10018c80      int32_t eax_1
10018c80      int16_t x87control
10018c80      
10018c80      if (data_10066958 != 0)
10018c8f          eax_1 = __ftol(x87control, j_sub_10038990("forcereachability"))
10018c8f      
10018c96      if (data_10066958 == 0 || eax_1 != 0)
10018ca8          data_100667e8 = 1
10018cad          data_10066980 = 1
10018cb2          j_sub_10010f60()
10018ccd          data_1006675c = j_sub_10039000(data_10066948 << 2)
10018cd2          return j_sub_10017350() __tailcall
10018cd2      
10018c98      result = data_10066948
10018c9d      data_10066980 = result
10018c9d  
10018ca2  return result

10018cd7                                                                       90 90 90 90 90 90 90 90 90                         .........
10018ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10018d00    int32_t sub_10018d00()

10018d00  __builtin_memcpy(dest: &data_100669ec, 
10018d00      src: "\x01\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x80\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x40\x00\x00", 
10018d00      n: 0x38)

10018d8d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10018da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10018dc0    int32_t sub_10018dc0(int32_t arg1)

10018dcb  if (arg1 s>= 0 && arg1 s< 0x20)
10018dd4      return *((arg1 << 2) + &data_100669e8)
10018dd4  
10018dd7  return 0

10018dd8                                                                          90 90 90 90 90 90 90 90                          ........
10018de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10018df0    int32_t sub_10018df0()

10018df0  void* eax_12 = data_10066a74
10018df0  
10018dfa  if (eax_12 != 0)
10018dfd      j_sub_100390b0(eax_12)
10018dfd  
10018e1f  int32_t result = j_sub_10039000((data_10066948 << 3) + data_10066958 * 0xc)
10018e24  int32_t edx_1 = data_10066948
10018e30  data_10066a74 = result
10018e35  int32_t* edi = result + (edx_1 << 3)
10018e38  int32_t result_1 = 1
10018e38  
10018e40  if (edx_1 s> 1)
10018e47      int32_t ebx_1 = data_10066954
10018e4f      int32_t esi_1 = 0x1c
10018e54      int32_t var_8_1 = 0x1c
10018e54      
10018eee      do
10018e60          int32_t i = 0
10018e60          
10018e68          if (*(esi_1 + ebx_1 + 0x14) s> 0)
10018eca              do
10018e84                  int32_t* edx_4 = data_1006695c + (i + *(esi_1 + ebx_1 + 0x18)) * 0x2c
10018e87                  int32_t* eax_7 = edi
10018e89                  edi = &edi[3]
10018e8c                  eax_7[1] = result_1
10018e95                  *eax_7 = i + *(esi_1 + ebx_1 + 0x18)
10018ea3                  eax_7[2] = *(data_10066a74 + (*edx_4 << 3) + 4)
10018eae                  *(data_10066a74 + (*edx_4 << 3) + 4) = eax_7
10018eb2                  int32_t eax_8 = *edx_4
10018eb4                  int32_t edx_5 = data_10066a74
10018ec1                  i += 1
10018ec2                  *(edx_5 + (eax_8 << 3)) += 1
10018eca              while (i s< *(esi_1 + ebx_1 + 0x14))
10018eca              
10018ecc              ebx_1 = data_10066954
10018ed2              edx_1 = data_10066948
10018ed8              esi_1 = var_8_1
10018ed8          
10018ee0          esi_1 += 0x1c
10018ee3          result = result_1 + 1
10018ee4          var_8_1 = esi_1
10018eea          result_1 = result
10018eee      while (result s< edx_1)
10018eee  
10018efb  return result

10018efc                                                                                      90 90 90 90                              ....
10018f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10018f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10018f50    int32_t sub_10018f50(int32_t arg1, float arg2, float* arg3)

10018f53  float* eax = arg2
10018f60  float var_c = fconvert.s(fconvert.t(*eax) - fconvert.t(*arg3))
10018f6a  float var_8 = fconvert.s(fconvert.t(eax[1]) - fconvert.t(arg3[1]))
10018f79  float var_4 = fconvert.s(fconvert.t(eax[2]) - fconvert.t(arg3[2]))
10018f86  arg2 = fconvert.s(j_sub_10043500(&var_c))
10018f95  long double x87_r7_8
10018f95  
10018f95  if (j_sub_100115d0(arg1) == 0)
10018fae      if (j_sub_10011610(arg1) != 0)
10018fbc          x87_r7_8 = fconvert.t(arg2)
10018fae      else
10018fb4          x87_r7_8 = fconvert.t(arg2) * fconvert.t(0.33000000000000002)
10018f95  else
10018f9b      x87_r7_8 = fconvert.t(arg2) * fconvert.t(1.3)
10018f9b  
10018fc0  int16_t x87control
10018fc0  int32_t result = __ftol(x87control, x87_r7_8)
10018fc0  
10018fc8  if (result s> 0)
10018fd2      return result
10018fd2  
10018fca  return 1

10018fd3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10018fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019010    int32_t sub_10019010()

10019017  j_sub_100378c0()
1001901c  void* eax = data_10066a78
10019021  int32_t ebp = 0
10019021  
10019025  if (eax != 0)
10019028      j_sub_100390b0(eax)
10019028  
10019030  int32_t i_2 = data_10066948
10019038  int32_t eax_1 = i_2 << 2
10019038  
1001903f  if (i_2 s> 0)
10019047      int32_t* esi_1 = data_10066a74
1001904d      int32_t* edx_2 = data_10066954 + 0x14
10019050      int32_t i_1 = i_2
1001906a      int32_t i
1001906a      
1001906a      do
10019052          int32_t ecx = *edx_2
10019056          eax_1 += ecx << 2
10019056          
10019059          if (ecx s> 0)
10019060              eax_1 += (*esi_1 * ecx) << 1
10019060          
10019063          esi_1 = &esi_1[2]
10019066          edx_2 = &edx_2[7]
10019069          i = i_1
10019069          i_1 -= 1
1001906a      while (i != 1)
1001906a  
1001906d  int32_t eax_2 = j_sub_10039000(eax_1)
10019072  int32_t ecx_1 = data_10066948
1001907b  int32_t esi_2 = 0
1001907d  data_10066a78 = eax_2
10019084  int32_t result = eax_2 + (ecx_1 << 2)
10019087  int32_t var_20 = 0
10019087  
1001908b  if (ecx_1 s> 0)
10019091      void* var_1c_1 = nullptr
10019091      
100190a5      while (true)
100190a5          int32_t* edx_3 = data_10066a74 + (esi_2 << 3)
100190ae          int32_t* var_10_1 = edx_3
100190b2          void* ebx_3 = var_1c_1 + data_10066954
100190bb          int32_t edi_2 = 0
100190bd          void* var_14_1 = ebx_3
100190c1          *(data_10066a78 + ebp) = result
100190c4          int32_t ecx_5 = *(ebx_3 + 0x14)
100190c9          int32_t result_2 = result + (ecx_5 << 2)
100190cc          int32_t result_1 = result_2
100190cc          
100190d0          if (ecx_5 s> 0)
100190e5              while (true)
100190e5                  *(*(data_10066a78 + ebp) + (edi_2 << 2)) = result_2
100190ea                  int32_t* esi_3 = edx_3[1]
100190f0                  result_1 = result_2 + (*edx_3 << 1)
10019101                  int32_t ecx_10 = data_1006695c
10019101                  
1001910a                  if (esi_3 != 0)
1001910c                      float eax_8 = ecx_10 + (*(ebx_3 + 0x18) + edi_2) * 0x2c + 0xc
1001910f                      int32_t ebx_4 = 0
1001910f                      
1001911d                      while (true)
10019129                          float var_c =
10019129                              fconvert.s(fconvert.t(*(ecx_10 + *esi_3 * 0x2c + 0x18)))
10019139                          float var_8_1 =
10019139                              fconvert.s(fconvert.t(*(ecx_10 + *esi_3 * 0x2c + 0x1c)))
10019155                          float var_4_1 =
10019155                              fconvert.s(fconvert.t(*(ecx_10 + *esi_3 * 0x2c + 0x20)))
1001916a                          ebx_4 += 2
10019173                          *(*(*(data_10066a78 + ebp) + (edi_2 << 2)) + ebx_4 - 2) =
10019173                              j_sub_10018f50(var_20, eax_8, &var_c)
10019178                          esi_3 = esi_3[2]
10019178                          
1001917d                          if (esi_3 == 0)
1001917d                              break
1001917d                          
10019117                          ecx_10 = data_1006695c
10019117                      
1001917f                      ebx_3 = var_14_1
10019183                      edx_3 = var_10_1
10019183                  
1001918a                  edi_2 += 1
1001918a                  
1001918d                  if (edi_2 s>= *(ebx_3 + 0x14))
1001918d                      break
1001918d                  
100190d8                  result_2 = result_1
100190d8              
10019193              esi_2 = var_20
10019193          
1001919b          result = data_10066948
100191a0          esi_2 += 1
100191a4          ebp += 4
100191a9          var_20 = esi_2
100191ad          var_1c_1 += 0x1c
100191ad          
100191b1          if (esi_2 s>= result)
100191b1              break
100191b1          
10019097          result = result_1
10019097  
100191be  return result

100191bf                                                                                               90                                 .
100191c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100191e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019230    int32_t sub_10019230(int32_t arg1)

10019241  return j_sub_10039000(arg1 * 2 + 0x2c)

10019242        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................

10019260    void* sub_10019260(void* arg1)

1001926b  return j_sub_100390b0(arg1)

1001926c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................

10019280    void* sub_10019280()

10019280  void* ecx
10019280  void* var_4 = ecx
10019281  void* result = data_10066a7c
10019281  
10019288  if (result != 0)
10019294      int32_t i = 0
10019294      
10019298      if (data_10066978 s> 0)
1001929b          void* ebp_1 = nullptr
1001929f          var_4 = nullptr
1001929f          
100192ff          do
100192a8              int32_t j = 0
100192aa              int32_t* ebp_2 = ebp_1 + data_1006697c
100192aa              
100192b0              if (*ebp_2 s> 0)
100192ea                  do
100192bb                      void* k_1 = *(*(data_10066a7c + (i << 2)) + (j << 2))
100192bb                      
100192c0                      if (k_1 != 0)
100192d2                          void* k
100192d2                          
100192d2                          do
100192c2                              k = *(k_1 + 0x24)
100192c6                              j_sub_10019260(k_1)
100192ce                              k_1 = k
100192d2                          while (k != 0)
100192d2                      
100192d9                      j += 1
100192dd                      *(*(data_10066a7c + (i << 2)) + (j << 2) - 4) = 0
100192ea                  while (j s< *ebp_2)
100192ea              
100192f5              i += 1
100192f6              ebp_1 = var_4 + 0xc
100192fb              var_4 = ebp_1
100192ff          while (i s< data_10066978)
100192ff      
1001930b      result = j_sub_100390b0(data_10066a7c)
10019313      data_10066a7c = 0
10019313  
1001931f  return result

10019320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019350    int32_t sub_10019350()

10019351  int32_t i_3 = data_10066978
10019357  int32_t eax = 0
10019357  
1001935b  if (i_3 s> 0)
1001935d      int32_t* ecx_1 = data_1006697c
10019364      int32_t i_2 = i_3
1001936e      int32_t i
1001936e      
1001936e      do
10019366          int32_t edi_1 = *ecx_1
10019368          ecx_1 = &ecx_1[3]
1001936b          eax += edi_1
1001936d          i = i_2
1001936d          i_2 -= 1
1001936e      while (i != 1)
1001936e  
10019377  int32_t eax_1 = j_sub_10039000((i_3 + eax) << 2)
1001937c  int32_t edx_1 = data_10066978
10019385  int32_t i_1 = 0
10019387  data_10066a7c = eax_1
1001938e  int32_t result = eax_1 + (edx_1 << 2)
1001938e  
10019391  if (edx_1 s> 0)
10019393      int32_t edx_2 = 0
10019393      
100193b8      do
1001939b          i_1 += 1
1001939c          edx_2 += 0xc
1001939f          *(data_10066a7c + (i_1 << 2) - 4) = result
100193ad          result += *(edx_2 + data_1006697c - 0xc) << 2
100193b8      while (i_1 s< data_10066978)
100193b8  
100193bb  return result

100193bc                                                                                      90 90 90 90                              ....
100193c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100193e0    void* sub_100193e0()

100193e0  void* result = data_10066a80
100193e0  
100193e7  if (result != 0)
100193ef      int32_t i = 0
100193ef      
100193f3      if (data_10066948 s> 0)
1001942a          do
100193fb              void* j_1 = *(data_10066a80 + (i << 2))
100193fb              
10019400              if (j_1 != 0)
10019412                  void* j
10019412                  
10019412                  do
10019402                      j = *(j_1 + 0x24)
10019406                      j_sub_10019260(j_1)
1001940e                      j_1 = j
10019412                  while (j != 0)
10019412              
1001941a              i += 1
1001941b              *(data_10066a80 + (i << 2) - 4) = 0
1001942a          while (i s< data_10066948)
1001942a      
10019434      result = j_sub_100390b0(data_10066a80)
1001943c      data_10066a80 = 0
1001943c  
10019447  return result

10019448                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
10019460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019470    int32_t sub_10019470()

1001947d  int32_t result = j_sub_10039000(data_10066948 << 2)
10019485  data_10066a80 = result
1001948a  return result

1001948b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

100194a0    int32_t sub_100194a0()

100194a0  void* eax_6 = data_10066a68
100194a0  
100194a7  if (eax_6 != 0)
100194aa      j_sub_100390b0(eax_6)
100194aa  
100194c3  data_10066a68 = j_sub_10039000(data_10066948 * 0x28)
100194c8  void* eax_4 = data_10066a6c
100194c8  
100194d2  if (eax_4 != 0)
100194d5      j_sub_100390b0(eax_4)
100194d5  
100194e9  int32_t result = j_sub_10039000(data_10066948 * 0x28)
100194f1  data_10066a6c = result
100194f6  return result

100194f7                                                                       90 90 90 90 90 90 90 90 90                         .........
10019500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10019520    int32_t sub_10019520()

10019520  j_sub_10018d00()
10019525  j_sub_100194a0()
1001952a  j_sub_10018df0()
1001952f  j_sub_10019350()
10019534  j_sub_10019470()
10019539  return j_sub_10019010() __tailcall

1001953e                                                                                            90 90                                ..
10019540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019550    int32_t sub_10019550()

10019550  j_sub_10019280()
10019555  return j_sub_100193e0() __tailcall

1001955a                                                                                90 90 90 90 90 90                            ......
10019560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019570    int32_t sub_10019570()

10019578  int32_t* ecx = nullptr
1001957f  int32_t var_8 = 0
1001957f  
10019583  if (data_10066978 s> 0)
10019589      void* eax_1 = data_1006697c
1001958f      int32_t ebp_1 = 0
10019591      int32_t* var_4_1 = nullptr
1001962f      bool cond:1_1
1001962f      
1001962f      do
10019598          int32_t i = 0
10019598          
1001959c          if (*(ecx + eax_1) s> 0)
10019612              do
100195a7                  float* j_1 = *(*(data_10066a7c + ebp_1) + (i << 2))
100195a7                  
100195ac                  if (j_1 != 0)
10019601                      float* j
10019601                      
10019601                      do
100195ae                          j = j_1[9]
100195b1                          long double st0_1 = j_sub_1000e120()
100195b6                          long double x87_r6_1 = fconvert.t(*j_1)
100195ba                          long double x87_r6_3 = st0_1 - fconvert.t(15.0)
100195c0                          x87_r6_3 - x87_r6_1
100195c2                          eax_1.w = (x87_r6_3 < x87_r6_1 ? 1 : 0) << 8
100195c2                              | (is_unordered.t(x87_r6_3, x87_r6_1) ? 1 : 0) << 0xa
100195c2                              | (x87_r6_3 == x87_r6_1 ? 1 : 0) << 0xe
100195c2                          
100195c7                          if ((eax_1:1.b & 0x41) == 0)
100195c9                              void* eax_2 = j_1[8]
100195c9                              
100195ce                              if (eax_2 == 0)
100195e4                                  *(*(data_10066a7c + ebp_1) + (i << 2)) = j_1[9]
100195ce                              else
100195d3                                  *(eax_2 + 0x24) = j_1[9]
100195d3                              
100195e7                              void* eax_4 = j_1[9]
100195e7                              
100195ec                              if (eax_4 != 0)
100195f1                                  *(eax_4 + 0x20) = j_1[8]
100195f1                              
100195f5                              j_sub_10019260(j_1)
100195f5                          
100195ff                          j_1 = j
10019601                      while (j != 0)
10019603                      eax_1 = data_1006697c
10019608                      ecx = var_4_1
10019608                  
1001960f                  i += 1
10019612              while (i s< *(ecx + eax_1))
10019612          
1001961f          ecx = &ecx[3]
10019622          ebp_1 += 4
10019625          cond:1_1 = var_8 + 1 s< data_10066978
10019627          var_8 += 1
1001962b          var_4_1 = ecx
1001962f      while (cond:1_1)
1001962f  
10019636  int32_t result = data_10066948
1001963b  int32_t ebx_1 = 0
1001963b  
1001963f  if (result s> 0)
100196a6      do
10019646          float* i_2 = *(data_10066a80 + (ebx_1 << 2))
10019646          
1001964b          if (i_2 != 0)
1001969c              float* i_1
1001969c              
1001969c              do
1001964d                  i_1 = i_2[9]
10019650                  long double st0_2 = j_sub_1000e120()
10019655                  long double x87_r6_4 = fconvert.t(*i_2)
10019659                  long double x87_r6_6 = st0_2 - fconvert.t(15.0)
1001965f                  x87_r6_6 - x87_r6_4
10019661                  void* eax_5
10019661                  eax_5.w = (x87_r6_6 < x87_r6_4 ? 1 : 0) << 8
10019661                      | (is_unordered.t(x87_r6_6, x87_r6_4) ? 1 : 0) << 0xa
10019661                      | (x87_r6_6 == x87_r6_4 ? 1 : 0) << 0xe
10019661                  
10019666                  if ((eax_5:1.b & 0x41) == 0)
10019668                      void* eax_6 = i_2[8]
10019668                      
1001966d                      if (eax_6 == 0)
1001967f                          *(data_10066a80 + (ebx_1 << 2)) = i_2[9]
1001966d                      else
10019672                          *(eax_6 + 0x24) = i_2[9]
10019672                      
10019682                      void* eax_8 = i_2[9]
10019682                      
10019687                      if (eax_8 != 0)
1001968c                          *(eax_8 + 0x20) = i_2[8]
1001968c                      
10019690                      j_sub_10019260(i_2)
10019690                  
1001969a                  i_2 = i_1
1001969c              while (i_1 != 0)
1001969c          
1001969e          result = data_10066948
100196a3          ebx_1 += 1
100196a6      while (ebx_1 s< result)
100196a6  
100196ae  return result

100196af                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
100196c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100196e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10019700    int32_t* sub_10019700(void* arg1)

10019719  int32_t ecx_1 = data_10066948 * 0x28
10019721  int32_t s = data_10066a68
10019727  int32_t ebx_1 = data_10066a70 + 1
1001972a  data_10066758 += 1
10019733  data_10066a70 = ebx_1
10019740  __builtin_memset(s: __builtin_memset(s, c: 0, n: ecx_1 u>> 2 << 2), c: 0, n: ecx_1 & 3)
1001974f  int32_t eax_2 = not.d(*(arg1 + 0x1c))
10019755  int32_t eax_3 = *(arg1 + 8)
1001975b  int32_t* i_4 = data_10066a68 + eax_3 * 0x28
1001975e  i_4[1] = eax_3
1001976f  i_4[6] = **(data_10066a78 + (*(arg1 + 8) << 2))
10019775  int16_t eax_6
10019775  int16_t x87control
10019775  int16_t x87control_1
10019775  eax_6, x87control_1 = __ftol(x87control, fconvert.t(*(arg1 + 0x18)))
1001977a  i_4[5].w = eax_6
10019781  int32_t edx_3 = data_10066954
10019790  int32_t ecx_8 = *(arg1 + 8) * 7
10019792  int32_t eax_8 = *(edx_3 + (ecx_8 << 2) + 0xc)
1001979b  int32_t ebx_2
1001979b  
1001979b  if (eax_8 s<= 0)
100197ad      int32_t ecx_12 = data_1006696c
100197bf      int32_t ebx_5
100197bf      ebx_5.b = *(ecx_12 - eax_8 * 0x14 + 4) != *(arg1 + 4)
100197c4      ebx_2 = *(ecx_12 + ((ebx_5 - eax_8 * 5) << 2) + 0xc)
1001979b  else
1001979d      ebx_2 = *(edx_3 + (ecx_8 << 2) + 0x10)
1001979d  
100197d0  *(arg1 + (ebx_2 << 1) + 0x28) = __ftol(x87control_1, fconvert.t(*(arg1 + 0x18)))
100197d7  i_4[8] = 0
100197da  i_4[9] = 0
100197dd  int32_t* i = i_4
100197df  int32_t* i_5 = i_4
100197df  
100197e3  if (i_4 != 0)
100197ef      while (true)
100197ef          void* edx_6 = i[8]
100197f6          int32_t* i_3 = i
100197f6          
100197fa          if (edx_6 == 0)
10019801              i_5 = nullptr
100197fa          else
100197fc              *(edx_6 + 0x24) = 0
100197fc          
10019805          int32_t* i_7 = i[8]
10019808          int32_t eax_11 = i[1]
1001980b          i[7] = 0
10019814          int32_t* i_2 = i_7
10019818          i = *(data_10066a74 + (eax_11 << 3) + 4)
1001981e          int32_t* i_1 = i
1001981e          
10019822          if (i != 0)
10019828              int32_t var_14_1 = 0
10019828              
100199a9              do
10019830                  int32_t ecx_15 = data_1006695c
10019836                  int32_t ebx_7 = *i_1
1001983f                  int32_t eax_12 = ebx_7 * 0xb
10019846                  int32_t* ebp_2 = ecx_15 + (eax_12 << 2)
10019846                  
10019854                  if ((*((*(ecx_15 + (eax_12 << 2) + 0x24) << 2) + &data_100669e8) & eax_2)
10019854                          == 0)
1001985d                      int32_t ecx_16 = data_10066954
1001986c                      int32_t eax_15 = *(ecx_16 + *ebp_2 * 0x1c)
10019871                      int32_t eax_16
10019871                      
10019871                      if ((eax_15.b & 1) != 0)
10019873                          eax_16 = 0x10000
10019871                      else if ((eax_15.b & 4) == 0)
10019885                          eax_15.b &= 2
10019887                          char temp0_1 = eax_15.b
10019887                          eax_15.b = neg.b(eax_15.b)
10019890                          eax_16 = (sbb.d(eax_15, eax_15, temp0_1 != 0) & 0x38000) + 0x8000
1001987c                      else
1001987e                          eax_16 = 0x20000
1001987e                      
10019897                      if ((eax_2 & eax_16) == 0)
1001989d                          int32_t edx_9 = i_1[1]
100198a9                          int32_t edi_6 = edx_9 * 0x1c
100198ac                          int32_t esi_1 = *(edi_6 + ecx_16 + 0xc)
100198ac                          
100198bb                          if (esi_1 s<= 0 || esi_1 == *(arg1 + 4))
100198cc                              int16_t* ecx_18
100198cc                              ecx_18.w = *(i_3[6] + var_14_1)
100198d4                              ecx_18.w += ebp_2[0xa].w
100198d8                              ecx_18.w += i_3[5].w
100198de                              int32_t eax_23
100198de                              
100198de                              if (esi_1 s<= 0)
10019908                                  int32_t ebx_10
10019908                                  ebx_10.b =
10019908                                      *(data_1006696c - esi_1 * 0x14 + 4) != *(arg1 + 4)
10019912                                  eax_23 =
10019912                                      *(data_1006696c + ((ebx_10 - esi_1 * 5) << 2) + 0xc)
100198de                              else
100198e5                                  eax_23 = *(edi_6 + data_10066954 + 0x10)
100198e5                              
1001991e                              void* esi_2
1001991e                              esi_2.w = *(arg1 + (eax_23 << 1) + 0x28)
1001991e                              
1001992b                              if (esi_2.w == 0 || esi_2.w u> ecx_18.w)
10019931                                  *(arg1 + (eax_23 << 1) + 0x28) = ecx_18.w
1001993f                                  int32_t* i_6 = data_10066a68 + edx_9 * 0x28
10019942                                  i_6[1] = edx_9
10019945                                  i_6[5].w = ecx_18.w
10019961                                  i_6[6] = *(*(data_10066a78 + (edx_9 << 2))
10019961                                      + ((ebx_7 - *(edi_6 + data_10066954 + 0x18)) << 2))
10019961                                  
10019969                                  if (i_6[7] == 0)
1001996f                                      i_6[8] = 0
10019978                                      i_6[9] = i_5
10019978                                      
1001997b                                      if (i_5 == 0)
10019982                                          i_2 = i_6
1001997b                                      else
1001997d                                          i_5[8] = i_6
1001997d                                      
10019986                                      i_5 = i_6
1001998a                                      i_6[7] = 1
1001998a                  
10019995                  i = i_1[2]
1001999f                  i_1 = i
100199a5                  var_14_1 += 2
100199a9              while (i != 0)
100199a9          
100199b5          if (i_2 == 0)
100199b5              break
100199b5          
100197eb          i = i_2
100197eb  
100199c2  return i

100199c3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
100199e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019a90    float* sub_10019a90(int32_t arg1, int32_t arg2, int32_t arg3)

10019a98  int32_t ebp = arg2
10019aab  void* ecx = data_10066954 + ebp * 0x1c
10019aae  int32_t eax_2 = *(ecx + 0xc)
10019aae  
10019ab3  if (eax_2 s<= 0)
10019abe      int32_t esi_1 = data_1006696c
10019ad8      int32_t ecx_3
10019ad8      ecx_3.b = *(esi_1 - eax_2 * 0x14 + 4) != arg1
10019ae1      arg2 = *(esi_1 + ((ecx_3 - eax_2 * 5) << 2) + 0xc)
10019ab3  else
10019ab8      arg2 = *(ecx + 0x10)
10019ab8  
10019af2  float* result_1 = *(*(data_10066a7c + (arg1 << 2)) + (arg2 << 2))
10019af7  float* result = result_1
10019af7  
10019af9  if (result_1 != 0)
10019b04      while (result[7] != arg3)
10019b06          result = result[9]
10019b06          
10019b0b          if (result == 0)
10019b0b              goto label_10019b28
10019b0b  
10019b11  if (result_1 == 0 || result == 0)
10019b28      label_10019b28:
10019b28      result = j_sub_10019230(*(data_1006697c + arg1 * 0xc))
10019b2e      int32_t eax_9 = ebp * 0x30
10019b31      result[1] = arg1
10019b34      result[2] = ebp
10019b46      result[3] = *(eax_9 + data_1006694c + 0x24)
10019b53      result[4] = *(eax_9 + data_1006694c + 0x28)
10019b60      int32_t eax_10 = *(eax_9 + data_1006694c + 0x2c)
10019b64      result[6] = 0x3f800000
10019b6b      result[5] = eax_10
10019b6e      result[7] = arg3
10019b71      result[8] = 0
10019b78      result[9] = result_1
10019b78      
10019b7b      if (result_1 != 0)
10019b7d          result_1[8] = result
10019b7d      
10019b8e      *(*(data_10066a7c + (arg1 << 2)) + (arg2 << 2)) = result
10019b91      j_sub_10019700(result)
10019b91  
10019b9e  *result = fconvert.s(j_sub_1000e120())
10019ba6  return result

10019ba7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10019bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10019c00    int32_t sub_10019c00(void* arg1)

10019c09  data_10066748 += 1
10019c19  int32_t ecx_1 = data_10066948 * 0x28
10019c25  void* ebx = arg1
10019c35  __builtin_memset(s: __builtin_memset(s: data_10066a6c, c: 0, n: ecx_1 u>> 2 << 2), c: 0, 
10019c35      n: ecx_1 & 3)
10019c46  int32_t* esi = data_10066a6c + *(ebx + 8) * 0x28
10019c49  *esi = *(ebx + 4)
10019c4e  esi[1] = *(ebx + 8)
10019c54  int16_t eax_5
10019c54  int16_t x87control
10019c54  int16_t x87control_1
10019c54  eax_5, x87control_1 = __ftol(x87control, fconvert.t(*(ebx + 0x18)))
10019c59  esi[5].w = eax_5
10019c5d  int32_t i = *(ebx + 8)
10019c71  int32_t edi_2 = *(data_10066954 + i * 0x1c + 0xc)
10019c71  
10019c77  if (edi_2 s< 0)
10019c7c      i = __ftol(x87control_1, fconvert.t(*(ebx + 0x18)))
10019c88      *(ebx + ((0x14 - edi_2) << 1)) = i.w
10019c88  
10019c8e  esi[8] = 0
10019c91  esi[9] = 0
10019c94  int32_t* edi_3 = esi
10019c96  int32_t* var_14 = esi
10019c96  
10019c9a  if (esi != 0)
10019ca6      while (true)
10019ca6          void* eax_6 = edi_3[8]
10019ca6          
10019cab          if (eax_6 == 0)
10019cb2              var_14 = nullptr
10019cab          else
10019cad              *(eax_6 + 0x24) = 0
10019cad          
10019cb9          int32_t eax_7 = *edi_3
10019cbb          int32_t* var_10_1 = edi_3[8]
10019cbf          edi_3[7] = 0
10019ccb          void* esi_1 = data_1006697c + eax_7 * 0xc
10019cd7          void* var_4_1 = esi_1
10019cdb          float* eax_8 = j_sub_10019a90(eax_7, edi_3[1], *(ebx + 0x1c))
10019cea          i = 0
10019cee          int32_t i_1 = 0
10019cee          
10019cf2          if (*(esi_1 + 4) s> 0)
10019cf8              int32_t ebp_1 = data_1006696c
10019cf8              
10019df5              do
10019d0c                  int32_t ecx_14 = *(data_10066974 + ((*(esi_1 + 8) + i) << 2))
10019d0f                  int32_t edx_7 = ecx_14 * 5
10019d12                  int32_t esi_2 = *(ebp_1 + (edx_7 << 2))
10019d16                  int32_t* edx_8 = ebp_1 + (edx_7 << 2)
10019d16                  
10019d1c                  if (esi_2 != edi_3[1])
10019d31                      void* ebx_4 = data_10066954 + esi_2 * 0x1c
10019d34                      int32_t esi_4 = *(ebx_4 + 0xc)
10019d39                      int32_t ebx_5
10019d39                      
10019d39                      if (esi_4 s<= 0)
10019d54                          int32_t ebx_8
10019d54                          ebx_8.b = *(ebp_1 - esi_4 * 0x14 + 4) != *edi_3
10019d59                          i = i_1
10019d5d                          ebx_5 = *(ebp_1 + ((ebx_8 - esi_4 * 5) << 2) + 0xc)
10019d39                      else
10019d3b                          ebx_5 = *(ebx_4 + 0x10)
10019d3b                      
10019d65                      float* esi_5
10019d65                      esi_5.w = *(eax_8 + (ebx_5 << 1) + 0x28)
10019d65                      
10019d6d                      if (esi_5.w != 0)
10019d6f                          ebx_5.w = edi_3[5].w
10019d73                          int16_t esi_6 = esi_5.w + ebx_5.w
10019d79                          void* ebx_10
10019d79                          ebx_10.w = *(arg1 + (ecx_14 << 1) + 0x28)
10019d79                          
10019d86                          if (ebx_10.w == 0 || ebx_10.w u> esi_6)
10019d8c                              *(arg1 + (ecx_14 << 1) + 0x28) = esi_6
10019d9e                              int32_t* ecx_17 = data_10066a6c + *edx_8 * 0x28
10019da1                              int32_t ebx_13 = edx_8[1]
10019da1                              
10019da6                              if (ebx_13 == *edi_3)
10019da8                                  ebx_13 = edx_8[2]
10019da8                              
10019dab                              *ecx_17 = ebx_13
10019daf                              ecx_17[1] = *edx_8
10019db7                              ecx_17[5].w = esi_6
10019db7                              
10019dbb                              if (ecx_17[7] == 0)
10019dc1                                  ecx_17[8] = 0
10019dca                                  ecx_17[9] = var_14
10019dca                                  
10019dcd                                  if (var_14 == 0)
10019dd4                                      var_10_1 = ecx_17
10019dcd                                  else
10019dcf                                      var_14[8] = ecx_17
10019dcf                                  
10019dd8                                  var_14 = ecx_17
10019ddc                                  ecx_17[7] = 1
10019ddc                              
10019de3                              ebp_1 = data_1006696c
10019de3                  
10019de9                  esi_1 = var_4_1
10019ded                  i += 1
10019dee                  i_1 = i
10019df5              while (i s< *(esi_1 + 4))
10019df5              
10019dfb              ebx = arg1
10019dfb          
10019e05          if (var_10_1 == 0)
10019e05              break
10019e05          
10019ca2          edi_3 = var_10_1
10019ca2  
10019e12  return i

10019e13                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10019e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10019ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10019eb0    float* sub_10019eb0(int32_t arg1, int32_t arg2, int32_t arg3)

10019ec0  float* result = *(data_10066a80 + (arg2 << 2))
10019ec0  
10019ec5  if (result == 0)
10019eed      label_10019eed:
10019eed      result = j_sub_10019230(data_10066968)
10019ef5      result[1] = arg1
10019ef8      result[2] = arg2
10019f01      int32_t eax_2 = arg2 * 0x30
10019f08      result[3] = *(eax_2 + data_1006694c + 0x24)
10019f15      result[4] = *(eax_2 + data_1006694c + 0x28)
10019f1e      int32_t edx_4 = *(eax_2 + data_1006694c + 0x2c)
10019f22      result[6] = 0x3f800000
10019f29      result[5] = edx_4
10019f2c      result[7] = arg3
10019f2f      result[8] = 0
10019f3e      result[9] = *(data_10066a80 + (arg2 << 2))
10019f47      void* eax_4 = *(data_10066a80 + (arg2 << 2))
10019f47      
10019f4c      if (eax_4 != 0)
10019f4e          *(eax_4 + 0x20) = result
10019f4e      
10019f57      *(data_10066a80 + (arg2 << 2)) = result
10019f5a      j_sub_10019c00(result)
10019ec5  else
10019eca      while (result[7] != arg3)
10019ecc          result = result[9]
10019ecc          
10019ed1          if (result == 0)
10019ed1              goto label_10019eed
10019ed1      
10019ed7      if (result == 0)
10019ed7          goto label_10019eed
10019ed7  
10019f67  *result = fconvert.s(j_sub_1000e120())
10019f6e  return result

10019f6f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10019f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10019fa0    float* sub_10019fa0(float* arg1, float* arg2, int32_t arg3)

10019fae  float* eax
10019fae  
10019fae  if (data_100667e4 == 0)
1001a21e      eax.w = 0
10019fae  else
10019fbe      if (arg1 == arg2)
10019fc3          eax.w = 1
10019fcb          return eax
10019fcb      
10019fce      int32_t edx_1
10019fce      
10019fce      if (arg1 s> 0)
10019fd4          edx_1 = data_10066948
10019fd4      
10019fdc      if (arg1 s<= 0 || arg1 s>= edx_1)
1001a215          data_10063fe8(3, "AAS_AreaTravelTimeToGoalArea: ar…", arg1)
1001a21e          eax.w = 0
10019fdc      else if (arg2 s<= 0 || arg2 s>= edx_1)
1001a215          data_10063fe8(3, "AAS_AreaTravelTimeToGoalArea: go…", arg2)
1001a21e          eax.w = 0
10019fec      else if (data_10066a70 s> 0xa)
1001a21e          eax.w = 0
10019ff9      else
1001a013          int32_t eax_1 = data_10066954
1001a01a          int32_t ebx_3 = arg1 * 0x1c
1001a01d          int32_t ecx_3 = data_1006696c
1001a023          int32_t edi_1 = *(ebx_3 + eax_1 + 0xc)
1001a027          int32_t esi_1 = edi_1
1001a029          int32_t ebp_3 = arg2 * 0x1c
1001a02e          int32_t eax_2 = *(eax_1 + ebp_3 + 0xc)
1001a02e          
1001a036          if (esi_1 s>= 0 || eax_2 s<= 0)
1001a050              if (esi_1 s> 0)
1001a058                  if (eax_2 s>= 0)
1001a058                      goto label_1001a074
1001a058                  
1001a060                  void* ecx_5 = ecx_3 - eax_2 * 0x14
1001a060                  
1001a06a                  if (*(ecx_5 + 4) == esi_1 || *(ecx_5 + 8) == esi_1)
1001a06c                      eax_2 = esi_1
1001a06c                  
1001a06a                  goto label_1001a06e
1001a06a              
1001a0e0              label_1001a0e0:
1001a0e0              int32_t ebp_4 = *(data_10066954 + ebp_3 + 0xc)
1001a0e0              
1001a0e6              if (ebp_4 s< 0)
1001a0f1                  ebp_4 = *(ecx_3 - ebp_4 * 0x14 + 4)
1001a0f1              
1001a104              int32_t edx_14 = 0
1001a109              float* ebp_5 = j_sub_10019eb0(ebp_4, arg2, arg3)
1001a10d              arg1 = ebp_5
1001a10d              
1001a111              if (edi_1 s< 0)
1001a11c                  int32_t eax_7
1001a11c                  eax_7.w = *(ebp_5 + ((0x14 - edi_1) << 1))
1001a126                  return eax_7
1001a126              
1001a12f              arg2 = nullptr
1001a133              int32_t var_4 = 0
1001a137              void* ecx_12 = data_1006697c + edi_1 * 0xc
1001a13a              void* var_8 = ecx_12
1001a141              int32_t eax_8
1001a141              
1001a141              if (*(ecx_12 + 4) s> 0)
1001a147                  eax_8 = data_1006696c
1001a147                  
1001a15d                  while (true)
1001a15d                      float* esi_4 = *(data_10066974 + ((*(ecx_12 + 8) + edx_14) << 2))
1001a15d                      
1001a166                      if (*(ebp_5 + (esi_4 << 1) + 0x28) != 0)
1001a177                          float* eax_11 =
1001a177                              j_sub_10019a90(edi_1, *(eax_8 + esi_4 * 0x14), arg3)
1001a17c                          int32_t edx_17 = data_10066954
1001a187                          eax_8 = data_1006696c
1001a18c                          int32_t ecx_14 = *(ebx_3 + edx_17 + 0xc)
1001a192                          int32_t edx_18
1001a192                          
1001a192                          if (ecx_14 s<= 0)
1001a1aa                              int32_t edx_21
1001a1aa                              edx_21.b = *(eax_8 - ecx_14 * 0x14 + 4) != edi_1
1001a1af                              eax_8 = data_1006696c
1001a1b4                              edx_18 = *(eax_8 + ((edx_21 - ecx_14 * 5) << 2) + 0xc)
1001a192                          else
1001a194                              edx_18 = *(ebx_3 + edx_17 + 0x10)
1001a194                          
1001a1b8                          ecx_14.w = *(eax_11 + (edx_18 << 1) + 0x28)
1001a1b8                          
1001a1c0                          if (ecx_14.w != 0)
1001a1c6                              esi_4.w = *(arg1 + (esi_4 << 1) + 0x28)
1001a1cb                              esi_4.w += ecx_14.w
1001a1ce                              int16_t ecx_15 = arg2.w
1001a1ce                              
1001a1da                              if (ecx_15 == 0 || esi_4.w u< ecx_15)
1001a1dc                                  arg2 = esi_4
1001a1dc                          
1001a1e0                          ecx_12 = var_8
1001a1e0                      
1001a1eb                      edx_14 = var_4 + 1
1001a1ee                      var_4 = edx_14
1001a1ee                      
1001a1f2                      if (edx_14 s>= *(ecx_12 + 4))
1001a1f2                          break
1001a1f2                      
1001a14e                      ebp_5 = arg1
1001a14e              
1001a1f8              eax_8.w = arg2.w
1001a204              return eax_8
1001a204          
1001a03e          void* ecx_4 = ecx_3 - esi_1 * 0x14
1001a03e          
1001a048          if (*(ecx_4 + 4) == eax_2 || *(ecx_4 + 8) == eax_2)
1001a04a              esi_1 = eax_2
1001a04a          
1001a06e          label_1001a06e:
1001a06e          ecx_3 = data_1006696c
1001a074          label_1001a074:
1001a074          
1001a07e          if (esi_1 s<= 0 || eax_2 s<= 0 || esi_1 != eax_2)
1001a076              goto label_1001a0e0
1001a076          
1001a08b          eax = j_sub_10019a90(esi_1, arg2, arg3)
1001a090          int32_t edx_6 = data_10066954
1001a096          ecx_3 = data_1006696c
1001a09f          edi_1 = *(ebx_3 + edx_6 + 0xc)
1001a0a5          int32_t edx_7
1001a0a5          
1001a0a5          if (edi_1 s<= 0)
1001a0bd              int32_t edx_10
1001a0bd              edx_10.b = *(ecx_3 - edi_1 * 0x14 + 4) != esi_1
1001a0c2              ecx_3 = data_1006696c
1001a0c8              edx_7 = *(ecx_3 + ((edx_10 - edi_1 * 5) << 2) + 0xc)
1001a0a5          else
1001a0a7              edx_7 = *(ebx_3 + edx_6 + 0x10)
1001a0a7          
1001a0cc          eax.w = *(eax + (edx_7 << 1) + 0x28)
1001a0cc          
1001a0d4          if (eax.w == 0)
1001a0d4              goto label_1001a0e0
1001a0d4  
1001a228  return eax

1001a229                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1001a240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001a260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001a280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001a2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001a2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001a2e0    int32_t sub_1001a2e0(int32_t arg1, int32_t arg2)

1001a2fc  if (data_100667e4 == 0 || arg2 s< 0 || arg2 s> data_10066958)
1001a32e      void s
1001a32e      __builtin_memset(&s, c: 0, n: 0x2c)
1001a33b      __builtin_memcpy(dest: arg1, src: &s, n: 0x2c)
1001a342      return arg1
1001a342  
1001a317  __builtin_memcpy(dest: arg1, src: data_1006695c + arg2 * 0x2c, n: 0x2c)
1001a31e  return arg1

1001a343           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
1001a360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001a370    int32_t sub_1001a370(int32_t arg1, int32_t arg2)

1001a377  if (data_100667e4 != 0)
1001a387      if (arg1 s> 0 && arg1 s< data_10066948)
1001a39e          void* ecx_2 = data_10066954 + arg1 * 0x1c
1001a39e          
1001a3a1          if (arg2 == 0)
1001a3a6              return *(ecx_2 + 0x18)
1001a3a6          
1001a3a7          int32_t edx_1 = *(ecx_2 + 0x18)
1001a3a7          
1001a3ac          if (arg2 s>= edx_1)
1001a3cb              int32_t edx_2
1001a3cb              edx_2.b = arg2 + 1 s>= *(ecx_2 + 0x14) + edx_1
1001a3d1              return (arg2 + 1) & (edx_2 - 1)
1001a3d1          
1001a3b5          data_10063fe8(4, "AAS_NextAreaReachability: reachn…")
1001a3c0          return 0
1001a3c0      
1001a3da      data_10063fe8(3, "AAS_NextAreaReachability: areanu…", arg1)
1001a3da  
1001a3e5  return 0

1001a3e6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
1001a400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001a410    int32_t sub_1001a410(float* arg1, int32_t arg2, int32_t* arg3, float* arg4)

1001a410  int32_t __saved_ebp_1
1001a410  int32_t __saved_ebp = __saved_ebp_1
1001a419  int32_t __saved_ebx_1
1001a419  int32_t __saved_ebx = __saved_ebx_1
1001a41a  int32_t __saved_esi_2
1001a41a  int32_t __saved_esi_1 = __saved_esi_2
1001a41b  int32_t __saved_edi_1
1001a41b  int32_t __saved_edi = __saved_edi_1
1001a43f  int16_t x87control
1001a43f  float* ebx = __ftol(x87control, 
1001a43f      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001a43f          * float.t(data_10066948))
1001a441  int32_t eax_3 = data_10066948
1001a448  int32_t var_6c_1 = 0
1001a448  
1001a450  if (eax_3 s> 0)
1001a551      bool cond:1_1
1001a551      
1001a551      do
1001a458          if (ebx s<= 0)
1001a45a              ebx = 1
1001a45a          
1001a461          if (ebx s>= eax_3)
1001a463              ebx = 1
1001a463          
1001a473          if (j_sub_10011040(ebx) != 0 && j_sub_10019fa0(arg1, ebx, arg2) u> 0)
1001a49e              void* eax_8 = data_1006694c + ebx * 0x30
1001a4a3              float var_68 = *(eax_8 + 0x24)
1001a4a7              float edx_3 = *(eax_8 + 0x28)
1001a4ae              float eax_9 = *(eax_8 + 0x2c)
1001a4c4              float* var_88
1001a4c4              
1001a4c4              if (j_sub_1001ae60(&var_68) == 0)
1001a4cd                  float* var_80_1
1001a4cd                  var_80_1.q = fconvert.d(fconvert.t(eax_9))
1001a4d7                  var_88.q = fconvert.d(fconvert.t(edx_3))
1001a4e1                  double var_90_1 = fconvert.d(fconvert.t(var_68))
1001a4e4                  float* var_94_1 = ebx
1001a4e5                  char* var_98_1 = "area %d center %f %f %f in solid…"
1001a4ea                  j_sub_10038d80("area %d center %f %f %f in solid…")
1001a4ea              
1001a504              float var_5c = var_68
1001a508              int32_t var_7c_4 = 0xffffffff
1001a50e              float var_58_1 = edx_3
1001a512              int32_t var_80_2 = 4
1001a518              float var_54_1 = fconvert.s(fconvert.t(eax_9) - fconvert.t(300f))
1001a51c              float* var_84_2 = &var_5c
1001a521              var_88 = &var_68
1001a522              void var_2c
1001a522              void* var_8c_1 = &var_2c
1001a536              int32_t var_50
1001a536              __builtin_memcpy(dest: &var_50, src: j_sub_1001b260(), n: 0x24)
1001a536              
1001a53e              if (var_50 == 0)
1001a565                  float var_48
1001a565                  int32_t eax_15 = j_sub_1001ae60(&var_48)
1001a571                  long double x87_r7_8 = fconvert.t(var_48)
1001a578                  *arg3 = eax_15
1001a583                  *arg4 = fconvert.s(x87_r7_8)
1001a585                  int32_t var_44
1001a585                  arg4[1] = var_44
1001a588                  int32_t var_40
1001a588                  arg4[2] = var_40
1001a594                  return 1
1001a594          
1001a544          eax_3 = data_10066948
1001a549          ebx += 1
1001a54b          cond:1_1 = var_6c_1 + 1 s< eax_3
1001a54d          var_6c_1 += 1
1001a551      while (cond:1_1)
1001a551  
1001a55f  return 0

1001a595                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
1001a5a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001a5c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001a5e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001a600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001a610    int32_t sub_1001a610()

1001a61d  data_10063fe8(1, "%d area cache updates\n", data_10066758)
1001a63a  return data_10063fe8(1, "%d portal cache updates\n", data_10066748)

1001a63b                                                                                   90 90 90 90 90                             .....
1001a640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001a650    int32_t sub_1001a650(int32_t arg1)

1001a662  *(data_10066744 + (data_10066730 << 2)) = arg1
1001a66b  int32_t edx = data_10066740
1001a672  data_10066730 += 1
1001a67b  *(edx + (arg1 << 3)) = 0
1001a68b  void* esi_4 = arg1 * 0x30 + data_1006694c
1001a68d  int32_t ebx = 0
1001a68f  int32_t result = *(esi_4 + 4)
1001a68f  
1001a694  if (result s> 0)
1001a6e2      do
1001a6a4          int32_t eax_3
1001a6a4          int32_t edx_1
1001a6a4          edx_1:eax_3 = sx.q(*(data_10066944 + ((*(esi_4 + 8) + ebx) << 2)))
1001a6a9          int32_t edx_2 = ((eax_3 ^ edx_1) - edx_1) * 3
1001a6ac          int32_t eax_6 = data_1006693c
1001a6b1          int32_t ecx_3 = *(eax_6 + (edx_2 << 3) + 0x10)
1001a6ba          int32_t eax_8
1001a6ba          
1001a6ba          if (ecx_3 != arg1)
1001a6c1              eax_8 = ecx_3
1001a6ba          else
1001a6bc              eax_8 = *(eax_6 + (edx_2 << 3) + 0x14)
1001a6bc          
1001a6d1          if (eax_8 != 0 && *(data_10066740 + (eax_8 << 3)) != 0)
1001a6d4              j_sub_1001a650(eax_8)
1001a6d4          
1001a6dc          result = *(esi_4 + 4)
1001a6df          ebx += 1
1001a6e2      while (ebx s< result)
1001a6e2  
1001a6e7  return result

1001a6e8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1001a700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001a720    void sub_1001a720(char* arg1, float* arg2, float* arg3, void* arg4, int32_t arg5)

1001a72a  int32_t eax_1 = j_sub_1001ae60(arg1)
1001a731  int32_t ebx = 0
1001a731  
1001a73c  if (eax_1 == 0)
1001a745      return 
1001a745  
1001a74b  int32_t eax_3 = j_sub_1001ae60(arg2)
1001a74b  
1001a759  if (eax_3 == 0)
1001a762      return 
1001a762  
1001a76c  float* eax_5 = j_sub_10019fa0(eax_1, eax_3, arg3)
1001a783  int32_t ecx_1 = data_10066948 << 3
1001a78a  float* esi_1 = 1
1001a79b  arg2 = nullptr
1001a7a2  __builtin_memset(s: __builtin_memset(s: data_10066740, c: 0, n: ecx_1 u>> 2 << 2), c: 0, 
1001a7a2      n: ecx_1 & 3)
1001a7a4  int32_t eax_6 = data_10066948
1001a7a4  
1001a7ab  if (eax_6 s> 1)
1001a7b1      arg1 = 0x1c
1001a7b1      
1001a8a0      do
1001a7c6          if ((arg1[data_10066954] & 0x20) != 0 && j_sub_10011040(esi_1) != 0)
1001a7e4              int16_t eax_9 = j_sub_10019fa0(eax_1, esi_1, arg3)
1001a7e4              
1001a7f1              if (eax_9 != 0)
1001a81a                  double var_20_1 = fconvert.d(float.t(zx.d(eax_5.w)) * fconvert.t(1.5))
1001a81e                  long double x87_r7_3 = float.t(zx.d(eax_9))
1001a822                  long double temp0_1 = fconvert.t(var_20_1)
1001a822                  x87_r7_3 - temp0_1
1001a826                  uint32_t eax_11
1001a826                  eax_11.w = (x87_r7_3 < temp0_1 ? 1 : 0) << 8
1001a826                      | (is_unordered.t(x87_r7_3, temp0_1) ? 1 : 0) << 0xa
1001a826                      | (x87_r7_3 == temp0_1 ? 1 : 0) << 0xe
1001a826                  
1001a82b                  if ((eax_11:1.b & 0x41) != 0)
1001a834                      int16_t eax_12 = j_sub_10019fa0(esi_1, eax_3, arg3)
1001a834                      
1001a841                      if (eax_12 != 0)
1001a84c                          long double x87_r7_4 = float.t(zx.d(eax_12))
1001a850                          long double temp3_1 = fconvert.t(var_20_1)
1001a850                          x87_r7_4 - temp3_1
1001a854                          uint32_t eax_13
1001a854                          eax_13.w = (x87_r7_4 < temp3_1 ? 1 : 0) << 8
1001a854                              | (is_unordered.t(x87_r7_4, temp3_1) ? 1 : 0) << 0xa
1001a854                              | (x87_r7_4 == temp3_1 ? 1 : 0) << 0xe
1001a854                          
1001a859                          if ((eax_13:1.b & 0x41) != 0)
1001a861                              float* var_40_4 = esi_1
1001a862                              int32_t var_44_3 = ebx
1001a868                              *(data_10066740 + (esi_1 << 3)) = 1
1001a874                              *(data_10066740 + (esi_1 << 3) + 4) = eax_9
1001a87f                              *(data_10066740 + (esi_1 << 3) + 6) = eax_12
1001a884                              j_sub_10038d80("%d midrange area %d")
1001a88c                              ebx += 1
1001a88c          
1001a891          eax_6 = data_10066948
1001a896          esi_1 += 1
1001a89c          arg1 = &arg1[0x1c]
1001a8a0      while (esi_1 s< eax_6)
1001a8a0  
1001a8a6  int32_t i = 1
1001a8a6  
1001a8ad  if (eax_6 s> 1)
1001a8b7      void* ebx_1 = arg4 + 8
1001a8b7      
1001aa73      do
1001a8c0          int32_t j_1 = 0
1001a8c0          
1001a8c5          if (*(data_10066740 + (i << 3)) != 0)
1001a8cc              data_10066730 = 0
1001a8d2              int32_t ecx_10 = j_sub_1001a650(i)
1001a8d7              int32_t j_2 = data_10066730
1001a8e2              float var_10_1 = 0f
1001a8e6              float var_14_1 = 0f
1001a8ea              float var_18 = 0f
1001a8ea              
1001a8ee              if (j_2 s> 0)
1001a8f0                  int32_t* eax_16 = data_10066744
1001a8f5                  int32_t edx_8 = data_1006694c
1001a93d                  int32_t j
1001a93d                  
1001a93d                  do
1001a8fb                      int32_t ecx_11 = *eax_16
1001a8fd                      eax_16 = &eax_16[1]
1001a90e                      var_18 = fconvert.s(fconvert.t(var_18)
1001a90e                          + fconvert.t(*(ecx_11 * 0x30 + edx_8 + 0x24)))
1001a923                      var_14_1 = fconvert.s(fconvert.t(var_14_1)
1001a923                          + fconvert.t(*(eax_16[-1] * 0x30 + edx_8 + 0x28)))
1001a931                      ecx_10 = eax_16[-1] * 0x30
1001a934                      j = j_2
1001a934                      j_2 -= 1
1001a939                      var_10_1 = fconvert.s(fconvert.t(var_10_1)
1001a939                          + fconvert.t(*(ecx_10 + edx_8 + 0x2c)))
1001a93d                  while (j != 1)
1001a93d              
1001a94e              int32_t var_44_4 = ecx_10
1001a959              j_sub_10043570(&var_18, fconvert.s(fconvert.t(1.0) / float.t(data_10066730)), 
1001a959                  &var_18)
1001a966              int32_t esi_2 = 0
1001a96a              arg1 = 0x497423f0
1001a96a              
1001a972              if (data_10066730 s> 0)
1001a974                  int32_t eax_18 = data_10066744
1001a974                  
1001a9ef                  do
1001a983                      int32_t ecx_20 = data_1006694c
1001a990                      float var_c = fconvert.s(fconvert.t(var_18)
1001a990                          - fconvert.t(*(*(eax_18 + (j_1 << 2)) * 0x30 + ecx_20 + 0x24)))
1001a9a5                      float var_8_1 = fconvert.s(fconvert.t(var_14_1)
1001a9a5                          - fconvert.t(*(*(eax_18 + (j_1 << 2)) * 0x30 + ecx_20 + 0x28)))
1001a9bf                      float var_4_1 = fconvert.s(fconvert.t(var_10_1)
1001a9bf                          - fconvert.t(*(*(eax_18 + (j_1 << 2)) * 0x30 + ecx_20 + 0x2c)))
1001a9c3                      long double st0_1 = j_sub_10043500(&var_c)
1001a9c8                      long double temp2_1 = fconvert.t(arg1)
1001a9c8                      st0_1 - temp2_1
1001a9d4                      eax_18 = data_10066744
1001a9d4                      
1001a9d9                      if ((((st0_1 < temp2_1 ? 1 : 0) << 8
1001a9d9                              | (is_unordered.t(st0_1, temp2_1) ? 1 : 0) << 0xa
1001a9d9                              | (st0_1 == temp2_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
1001a9db                          arg1 = fconvert.s(st0_1)
1001a9df                          esi_2 = *(eax_18 + (j_1 << 2))
1001a9df                      
1001a9ec                      j_1 += 1
1001a9ef                  while (j_1 s< data_10066730)
1001a9ef              
1001a9fa              int32_t eax_24 = esi_2 * 0x30
1001aa01              ebx_1 += 0x18
1001aa08              *(ebx_1 - 0x20) = *(eax_24 + data_1006694c + 0x24)
1001aa15              *(ebx_1 - 0x1c) = *(eax_24 + data_1006694c + 0x28)
1001aa22              *(ebx_1 - 0x18) = *(eax_24 + data_1006694c + 0x2c)
1001aa25              *(ebx_1 - 0x14) = esi_2
1001aa2e              int32_t edx_16
1001aa2e              edx_16.w = *(data_10066740 + (esi_2 << 3) + 4)
1001aa33              *(ebx_1 - 0x10) = edx_16.w
1001aa3c              int32_t ecx_24
1001aa3c              ecx_24.w = *(data_10066740 + (esi_2 << 3) + 6)
1001aa41              *(ebx_1 - 0xe) = ecx_24.w
1001aa45              int32_t eax_27 = data_10066740
1001aa4e              edx_16.w = *(eax_27 + (esi_2 << 3) + 6)
1001aa53              edx_16.w += *(eax_27 + (esi_2 << 3) + 4)
1001aa5f              *(ebx_1 - 0xc) = edx_16.w - eax_5.w
1001aa63              bool cond:5_1 = arg2 + 1 s>= arg5
1001aa65              arg2 += 1
1001aa65              
1001aa69              if (cond:5_1)
1001aa69                  break
1001aa69          
1001aa70          i += 1
1001aa73      while (i s< data_10066948)
1001aa73  
1001aa85  data_10063fe8(1, "%d alternative route goals\n", arg2)

1001aa98                                                                          90 90 90 90 90 90 90 90                          ........
1001aaa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001aac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001aae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ab00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ab20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ab40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ab60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001ab80    int32_t sub_1001ab80()

1001ab80  void* eax_4 = data_10066740
1001ab80  
1001ab87  if (eax_4 != 0)
1001ab8a      j_sub_100390b0(eax_4)
1001ab8a  
1001aba4  data_10066740 = j_sub_10038f90(data_10066948 << 3)
1001aba9  void* eax_2 = data_10066744
1001aba9  
1001abb3  if (eax_2 != 0)
1001abb6      j_sub_100390b0(eax_2)
1001abb6  
1001abcc  int32_t result = j_sub_10038f90(data_10066948 << 2)
1001abd4  data_10066744 = result
1001abd9  return result

1001abda                                                                                90 90 90 90 90 90                            ......
1001abe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001ac00    int32_t sub_1001ac00()

1001ac00  void* eax_3 = data_10066988
1001ac06  int32_t esi = data_1006698c
1001ac06  
1001ac0e  if (eax_3 == 0)
1001ac27      int16_t x87control
1001ac27      esi = __ftol(x87control, j_sub_10038a90("max_aaslinks", "4096"))
1001ac27      
1001ac2b      if (esi s< 0)
1001ac2d          esi = 0
1001ac2d      
1001ac32      data_1006698c = esi
1001ac3c      eax_3 = j_sub_10038f90(esi * 0x18)
1001ac44      data_10066988 = eax_3
1001ac44  
1001ac49  *(eax_3 + 0xc) = 0
1001ac50  void* eax_4 = data_10066988
1001ac58  *(eax_4 + 8) = eax_4 + 0x18
1001ac58  
1001ac61  if (esi - 1 s> 1)
1001ac64      int32_t eax_5 = 0x18
1001ac69      int32_t i_1 = esi - 2
1001ac8c      int32_t i
1001ac8c      
1001ac8c      do
1001ac6c          int32_t ecx_2 = data_10066988
1001ac76          *(eax_5 + ecx_2 + 0xc) = eax_5 + ecx_2 - 0x18
1001ac7a          int32_t ecx_3 = data_10066988
1001ac84          *(eax_5 + ecx_3 + 8) = eax_5 + ecx_3 + 0x18
1001ac88          eax_5 += 0x18
1001ac8b          i = i_1
1001ac8b          i_1 -= 1
1001ac8c      while (i != 1)
1001ac8c  
1001ac8f  int32_t ecx_4 = data_10066988
1001ac9d  int32_t result = esi * 0x18
1001aca3  *(result + ecx_4 - 0xc) = ecx_4 + ((esi * 3 - 6) << 3)
1001acad  *(result + data_10066988 - 0x10) = 0
1001acbb  data_10066990 = data_10066988
1001acc1  return result

1001acc2        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1001ace0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ad00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001ad10    void* sub_1001ad10()

1001ad10  void* result = data_10066988
1001ad10  
1001ad1a  if (result != 0)
1001ad1d      result = j_sub_100390b0(result)
1001ad1d  
1001ad25  data_10066988 = 0
1001ad2b  data_1006698c = 0
1001ad32  return result

1001ad33                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1001ad40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001ad50    void* sub_1001ad50()

1001ad50  void* result = data_10066990
1001ad50  
1001ad57  if (result == 0)
1001ad60      data_10063fe8(4, "empty aas link heap\n")
1001ad6b      return 0
1001ad6b  
1001ad6c  void* ecx = *(result + 8)
1001ad71  data_10066990 = ecx
1001ad71  
1001ad77  if (ecx != 0)
1001ad79      *(ecx + 0xc) = 0
1001ad79  
1001ad80  return result

1001ad81     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

1001ada0    void* sub_1001ada0(void* arg1)

1001ada0  void* ecx_1 = data_10066990
1001ada0  
1001adae  if (ecx_1 != 0)
1001adb0      *(ecx_1 + 0xc) = arg1
1001adb0  
1001adb3  *(arg1 + 0xc) = 0
1001adbc  *(arg1 + 8) = data_10066990
1001adbf  *(arg1 + 0x14) = 0
1001adc2  *(arg1 + 0x10) = 0
1001adc5  data_10066990 = arg1
1001adca  return arg1

1001adcb                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

1001ade0    int32_t sub_1001ade0()

1001ade0  int32_t result = data_100667e0
1001ade0  
1001ade7  if (result != 0)
1001ade9      void* eax = data_10066994
1001ade9      
1001adf0      if (eax != 0)
1001adf3          j_sub_100390b0(eax)
1001adf3      
1001ae08      result = j_sub_10039000(data_10066948 << 2)
1001ae10      data_10066994 = result
1001ae10  
1001ae15  return result

1001ae16                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1001ae20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001ae30    void* sub_1001ae30()

1001ae30  void* result = data_10066994
1001ae30  
1001ae37  if (result != 0)
1001ae3a      result = j_sub_100390b0(result)
1001ae3a  
1001ae42  data_10066994 = 0
1001ae4c  return result

1001ae4d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................

1001ae60    int32_t sub_1001ae60(float* arg1)

1001ae67  if (data_100667e0 == 0)
1001ae70      data_10063fe8(3, "AAS_PointAreaNum: aas not loaded…")
1001ae7b      return 0
1001ae7b  
1001ae81  int32_t esi = data_10066924
1001ae88  int32_t edi = data_10066964
1001aed2  int32_t i
1001aed2  
1001aed2  for (i = 1; i s> 0; )
1001ae93      int32_t eax_1 = i * 3
1001ae96      void* ecx_1 = edi + (eax_1 << 2)
1001ae9c      int32_t eax_3 = *(edi + (eax_1 << 2)) * 5
1001aeaa      float* eax_4 = esi + (eax_3 << 2)
1001aeb6      long double x87_r7_4 = fconvert.t(*(esi + (eax_3 << 2) + 8)) * fconvert.t(arg1[2])
1001aeb6          + fconvert.t(*(esi + (eax_3 << 2) + 4)) * fconvert.t(arg1[1])
1001aeb6          + fconvert.t(*eax_4) * fconvert.t(*arg1)
1001aeb8      long double x87_r7_5 = x87_r7_4 - fconvert.t(eax_4[3])
1001aebb      long double temp0_1 = fconvert.t(0f)
1001aebb      x87_r7_5 - temp0_1
1001aec1      eax_4.w = (x87_r7_5 < temp0_1 ? 1 : 0) << 8
1001aec1          | (is_unordered.t(x87_r7_5, temp0_1) ? 1 : 0) << 0xa
1001aec1          | (x87_r7_5 == temp0_1 ? 1 : 0) << 0xe
1001aec1      
1001aec6      if ((eax_4:1.b & 0x41) != 0)
1001aecd          i = *(ecx_1 + 8)
1001aec6      else
1001aec8          i = *(ecx_1 + 4)
1001aec8  
1001aed6  if (i != 0)
1001aedd      return neg.d(i)
1001aedd  
1001aeda  return 0

1001aede                                                                                            90 90                                ..
1001aee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001af00    int32_t sub_1001af00(int32_t arg1)

1001af0e  if (arg1 s> 0 && arg1 s< data_10066948)
1001af23      return *(data_10066954 + arg1 * 0x1c + 0xc)
1001af23  
1001af2b  data_10063fe8(3, "AAS_AreaCluster: invalid area nu…")
1001af36  return 0

1001af37                                                                       90 90 90 90 90 90 90 90 90                         .........
1001af40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001af50    int32_t sub_1001af50(int32_t arg1)

1001af57  if (data_100667e0 != 0)
1001af67      if (arg1 s> 0 && arg1 s< data_10066948)
1001af7c          return *(data_10066954 + arg1 * 0x1c + 8)
1001af7c      
1001af84      data_10063fe8(3, "AAS_AreaPresenceType: invalid ar…")
1001af84  
1001af8f  return 0

1001af90                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

1001afa0    int32_t sub_1001afa0(float* arg1)

1001afa7  if (data_100667e0 == 0)
1001afab      return 0
1001afab  
1001afb1  int32_t eax_2 = j_sub_1001ae60(arg1)
1001afb1  
1001afbb  if (eax_2 != 0)
1001afd6      return *(data_10066954 + eax_2 * 0x1c + 8)
1001afd6  
1001afc2  return 1

1001afd7                                                                       90 90 90 90 90 90 90 90 90                         .........
1001afe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001aff0    long double sub_1001aff0(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

1001b001  float* ecx = arg1
1001b003  float var_c
1001b003  int32_t eax
1001b003  
1001b003  if (arg4 == 0)
1001b069      int32_t edx_1 = &var_c - arg1
1001b06b      int32_t i_3 = 3
1001b0a9      int32_t i
1001b0a9      
1001b0a9      do
1001b070          long double x87_r7_3 = fconvert.t(*ecx)
1001b072          long double temp0_1 = fconvert.t(0.001)
1001b072          x87_r7_3 - temp0_1
1001b078          eax.w = (x87_r7_3 < temp0_1 ? 1 : 0) << 8
1001b078              | (is_unordered.t(x87_r7_3, temp0_1) ? 1 : 0) << 0xa
1001b078              | (x87_r7_3 == temp0_1 ? 1 : 0) << 0xe
1001b078          
1001b07d          if ((eax:1.b & 0x41) != 0)
1001b087              long double x87_r7_4 = fconvert.t(*ecx)
1001b089              long double temp2_1 = fconvert.t(-0.001)
1001b089              x87_r7_4 - temp2_1
1001b08f              eax.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
1001b08f                  | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
1001b08f                  | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
1001b08f              
1001b094              if ((eax:1.b & 1) == 0)
1001b09e                  *(ecx + edx_1) = 0
1001b094              else
1001b099                  *(ecx + edx_1) = *(ecx + arg3 - arg1)
1001b07d          else
1001b082              *(ecx + edx_1) = *(ecx + arg2 - arg1)
1001b082          
1001b0a5          ecx = &ecx[1]
1001b0a8          i = i_3
1001b0a8          i_3 -= 1
1001b0a9      while (i != 1)
1001b003  else
1001b015      void* edx = &var_c - arg1
1001b017      int32_t i_2 = 3
1001b055      int32_t i_1
1001b055      
1001b055      do
1001b01c          long double x87_r7_1 = fconvert.t(*ecx)
1001b01e          long double temp1_1 = fconvert.t(0.001)
1001b01e          x87_r7_1 - temp1_1
1001b024          eax.w = (x87_r7_1 < temp1_1 ? 1 : 0) << 8
1001b024              | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
1001b024              | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe
1001b024          
1001b029          if ((eax:1.b & 0x41) != 0)
1001b033              long double x87_r7_2 = fconvert.t(*ecx)
1001b035              long double temp3_1 = fconvert.t(-0.001)
1001b035              x87_r7_2 - temp3_1
1001b03b              eax.w = (x87_r7_2 < temp3_1 ? 1 : 0) << 8
1001b03b                  | (is_unordered.t(x87_r7_2, temp3_1) ? 1 : 0) << 0xa
1001b03b                  | (x87_r7_2 == temp3_1 ? 1 : 0) << 0xe
1001b03b              
1001b040              if ((eax:1.b & 1) == 0)
1001b04a                  *(edx + ecx) = 0
1001b040              else
1001b045                  *(edx + ecx) = *(arg2 - arg1 + ecx)
1001b029          else
1001b02e              *(edx + ecx) = *(arg3 - arg1 + ecx)
1001b02e          
1001b051          ecx = &ecx[1]
1001b054          i_1 = i_2
1001b054          i_2 -= 1
1001b055      while (i_1 != 1)
1001b0ad  float edx_2 = arg1[1]
1001b0b0  float eax_1 = arg1[2]
1001b0b3  float var_18 = *arg1
1001b0c4  j_sub_10043540(&var_18)
1001b0ef  float var_8
1001b0ef  float var_4
1001b0ef  return fconvert.t(var_4) * fconvert.t(eax_1) + fconvert.t(var_8) * fconvert.t(edx_2)
1001b0ef      + fconvert.t(var_c) * fconvert.t(var_18)

1001b0f0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
1001b100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001b130    void sub_1001b130(int32_t arg1, float* arg2, float* arg3, int32_t arg4, float* arg5, int32_t* arg6)

1001b143  void var_6c
1001b143  void var_60
1001b143  j_sub_1000dda0(arg4, &var_60, &var_6c)
1001b155  int32_t var_4c = 0x3f800000
1001b160  int32_t* i = *(data_10066994 + (arg1 << 2))
1001b163  arg4 = 0
1001b163  
1001b170  if (i != 0)
1001b1c4      do
1001b18b          int32_t eax_1 = *i
1001b18b          
1001b18f          if (eax_1 != arg5)
1001b1a8              void var_54
1001b1a8              int32_t eax_2
1001b1a8              int80_t st0_1
1001b1a8              eax_2, st0_1 = j_sub_10003680(arg5, i, arg3, eax_1, arg2, &var_60, &var_6c, 
1001b1a8                  arg3, 9.47742657e-38f, &var_54)
1001b1a8              
1001b1b2              if (eax_2 != 0)
1001b1b4                  arg4 = 1
1001b1b4          
1001b1bf          i = i[2]
1001b1c4      while (i != 0)
1001b1c4      
1001b1d2      if (arg4 != 0)
1001b1e3          int32_t var_50
1001b1e3          *arg6 = var_50
1001b1e9          int32_t var_4
1001b1e9          arg6[5] = var_4
1001b1f0          int32_t var_48
1001b1f0          arg6[2] = var_48
1001b1f7          int32_t var_44
1001b1f7          arg6[3] = var_44
1001b1fa          int32_t var_40
1001b1fa          arg6[4] = var_40
1001b1fd          arg6[7] = i
1001b200          arg6[8] = i

1001b214                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1001b220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001b260    int32_t sub_1001b260(int32_t arg1, int32_t* arg2, int32_t* arg3, int32_t arg4, float* arg5)

1001b275  int32_t s
1001b275  __builtin_memset(&s, c: 0, n: 0x24)
1001b275  
1001b27e  if (data_100667e0 != 0)
1001b284      int32_t* edx_1 = arg2
1001b28b      int32_t var_7e8_1 = 0
1001b296      int32_t var_7e4_1 = 1
1001b2a1      void var_7e0
1001b2a1      void* esi_1 = &var_7e0
1001b2ad      int32_t var_800_1 = *edx_1
1001b2b4      int32_t var_7f8_1 = edx_1[2]
1001b2c2      int32_t var_7fc = edx_1[1]
1001b2c9      void var_7d4
1001b2c9      void* ebx_1 = &var_7d4
1001b2d2      void var_7dc
1001b2d2      void* edi_1 = &var_7dc
1001b2d9      int32_t var_7f4_1 = *arg3
1001b2e6      int32_t var_7f0_1 = arg3[1]
1001b2ed      float* var_7ec_1 = arg3[2]
1001b2ed      
1001b2f4      while (true)
1001b2f4          edi_1 -= 0x20
1001b2fe          esi_1 -= 0x20
1001b301          ebx_1 -= 0x20
1001b301          
1001b306          if (edi_1 s< &var_7fc)
1001b57c              s = 0
1001b580              int32_t var_850_1 = 0x3f800000
1001b58a              int32_t var_840_1 = 0
1001b58e              int32_t var_84c_1 = *arg3
1001b598              int32_t var_848_1 = arg3[1]
1001b59c              int32_t var_844_1 = arg3[2]
1001b5a0              int32_t var_838_1 = 0
1001b5a4              int32_t var_834_1 = 0
1001b5a8              break
1001b5a8          
1001b30c          int32_t ebp_1 = *(esi_1 + 0x1c)
1001b311          int32_t esi_3
1001b311          float var_864
1001b311          float var_830
1001b311          float* eax_4
1001b311          int16_t top
1001b311          
1001b311          if (ebp_1 s>= 0)
1001b370              if (ebp_1 == 0)
1001b740                  unimplemented  {fld st0, dword [esi]}
1001b742                  long double temp2_1 = fconvert.t(*edx_1)
1001b742                  unimplemented  {fcomp st0, dword [edx]} f- temp2_1
1001b742                  bool c0_13 = unimplemented  {fcomp st0, dword [edx]} f< temp2_1
1001b742                  bool c2_13 =
1001b742                      is_unordered.t(unimplemented  {fcomp st0, dword [edx]}, temp2_1)
1001b742                  bool c3_13 = unimplemented  {fcomp st0, dword [edx]} f== temp2_1
1001b742                  unimplemented  {fcomp st0, dword [edx]}
1001b744                  eax_4.w = (c0_13 ? 1 : 0) << 8 | (c2_13 ? 1 : 0) << 0xa
1001b744                      | (c3_13 ? 1 : 0) << 0xe | (top & 7) << 0xb
1001b744                  
1001b749                  if ((eax_4:1.b & 0x40) == 0)
1001b77e                      label_1001b77e:
1001b77e                      s = 0
1001b786                      unimplemented  {fld st0, dword [eax]}
1001b788                      unimplemented  {fsub st0, dword [edx]}
1001b78a                      var_864 = fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
1001b78a                      unimplemented  {fstp dword [esp+0x18], st0}
1001b78e                      unimplemented  {fld st0, dword [eax+0x4]}
1001b791                      unimplemented  {fsub st0, dword [edx+0x4]}
1001b794                      float var_860_3 =
1001b794                          fconvert.s(unimplemented  {fstp dword [esp+0x1c], st0})
1001b794                      unimplemented  {fstp dword [esp+0x1c], st0}
1001b798                      unimplemented  {fld st0, dword [eax+0x8]}
1001b79b                      unimplemented  {fsub st0, dword [edx+0x8]}
1001b79e                      float var_85c_3 =
1001b79e                          fconvert.s(unimplemented  {fstp dword [esp+0x20], st0})
1001b79e                      unimplemented  {fstp dword [esp+0x20], st0}
1001b7a2                      unimplemented  {fld st0, dword [esi]}
1001b7a4                      unimplemented  {fsub st0, dword [edx]}
1001b7a6                      var_830 = fconvert.s(unimplemented  {fstp dword [esp+0x4c], st0})
1001b7a6                      unimplemented  {fstp dword [esp+0x4c], st0}
1001b7aa                      unimplemented  {fld st0, dword [esi+0x4]}
1001b7ad                      unimplemented  {fsub st0, dword [edx+0x4]}
1001b7b0                      float var_82c_3 =
1001b7b0                          fconvert.s(unimplemented  {fstp dword [esp+0x50], st0})
1001b7b0                      unimplemented  {fstp dword [esp+0x50], st0}
1001b7b4                      unimplemented  {fld st0, dword [esi+0x8]}
1001b7b7                      unimplemented  {fsub st0, dword [edx+0x8]}
1001b7bf                      float var_828_3 =
1001b7bf                          fconvert.s(unimplemented  {fstp dword [esp+0x58], st0})
1001b7bf                      unimplemented  {fstp dword [esp+0x58], st0}
1001b7c3                      j_sub_10043500(&var_830)
1001b7c3                      unimplemented  {call j_sub_10043500}
1001b7c8                      float var_868_4 =
1001b7c8                          fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
1001b7c8                      unimplemented  {fstp dword [esp+0x18], st0}
1001b7d1                      j_sub_10043290(&var_864)
1001b7d1                      unimplemented  {call j_sub_10043290}
1001b7d6                      unimplemented  {fdivr st0, dword [esp+0x1c]}
1001b7e6                      float var_850_6 =
1001b7e6                          fconvert.s(unimplemented  {fstp dword [esp+0x44], st0})
1001b7e6                      unimplemented  {fstp dword [esp+0x44], st0}
1001b7ea                      j_sub_10043380(esi_1, -0.125f, &var_864, esi_1)
1001b749                  else
1001b74b                      unimplemented  {fld st0, dword [esi+0x4]}
1001b74e                      long double temp5_1 = fconvert.t(edx_1[1])
1001b74e                      unimplemented  {fcomp st0, dword [edx+0x4]} f- temp5_1
1001b74e                      bool c0_14 = unimplemented  {fcomp st0, dword [edx+0x4]} f< temp5_1
1001b74e                      bool c2_14 = is_unordered.t(
1001b74e                          unimplemented  {fcomp st0, dword [edx+0x4]}, temp5_1)
1001b74e                      bool c3_14 = unimplemented  {fcomp st0, dword [edx+0x4]} f== temp5_1
1001b74e                      unimplemented  {fcomp st0, dword [edx+0x4]}
1001b751                      eax_4.w = (c0_14 ? 1 : 0) << 8 | (c2_14 ? 1 : 0) << 0xa
1001b751                          | (c3_14 ? 1 : 0) << 0xe | (top & 7) << 0xb
1001b751                      
1001b756                      if ((eax_4:1.b & 0x40) == 0)
1001b756                          goto label_1001b77e
1001b756                      
1001b758                      unimplemented  {fld st0, dword [esi+0x8]}
1001b75b                      long double temp10_1 = fconvert.t(edx_1[2])
1001b75b                      unimplemented  {fcomp st0, dword [edx+0x8]} f- temp10_1
1001b75b                      bool c0_15 = unimplemented  {fcomp st0, dword [edx+0x8]} f< temp10_1
1001b75b                      bool c2_15 = is_unordered.t(
1001b75b                          unimplemented  {fcomp st0, dword [edx+0x8]}, temp10_1)
1001b75b                      bool c3_15 = unimplemented  {fcomp st0, dword [edx+0x8]} f== temp10_1
1001b75b                      unimplemented  {fcomp st0, dword [edx+0x8]}
1001b75e                      eax_4.w = (c0_15 ? 1 : 0) << 8 | (c2_15 ? 1 : 0) << 0xa
1001b75e                          | (c3_15 ? 1 : 0) << 0xe | (top & 7) << 0xb
1001b75e                      
1001b763                      if ((eax_4:1.b & 0x40) == 0)
1001b763                          goto label_1001b77e
1001b763                      
1001b765                      s = 1
1001b76d                      int32_t var_850_5 = 0
1001b76d                  
1001b7fa                  esi_3 = *(esi_1 + 0x18)
1001b7fd                  int32_t var_848_3 = *(esi_1 + 4)
1001b803                  unimplemented  {fld st0, dword [esp+0x20]}
1001b807                  int32_t var_84c_3 = *esi_1
1001b80b                  int32_t var_840_3 = 0
1001b80f                  int32_t var_838_3 = 0
1001b81b                  int32_t var_844_3 = *(esi_1 + 8)
1001b81f                  int32_t var_834_3 = esi_3
1001b823                  unimplemented  {fmul st0, dword [eax+edx*4+0x8]}
1001b827                  unimplemented  {fld st0, dword [esp+0x1c]}
1001b82b                  unimplemented  {fmul st0, dword [eax+edx*4+0x4]}
1001b832                  unimplemented  {faddp st1, st0}
1001b832                  unimplemented  {faddp st1, st0}
1001b834                  unimplemented  {fld st0, dword [esp+0x18]}
1001b838                  unimplemented  {fmul st0, dword [eax]}
1001b83a                  unimplemented  {faddp st1, st0}
1001b83a                  unimplemented  {faddp st1, st0}
1001b83c                  long double temp9_1 = fconvert.t(0f)
1001b83c                  unimplemented  {fcomp st0, dword [&data_10058000]} f- temp9_1
1001b83c                  bool c0_16 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp9_1
1001b83c                  bool c2_16 = is_unordered.t(
1001b83c                      unimplemented  {fcomp st0, dword [&data_10058000]}, temp9_1)
1001b83c                  bool c3_16 =
1001b83c                      unimplemented  {fcomp st0, dword [&data_10058000]} f== temp9_1
1001b83c                  unimplemented  {fcomp st0, dword [&data_10058000]}
1001b83c                  
1001b847                  if ((((c0_16 ? 1 : 0) << 8 | (c2_16 ? 1 : 0) << 0xa
1001b847                          | (c3_16 ? 1 : 0) << 0xe | (top & 7) << 0xb):1.b & 0x41) != 0)
1001b847                      break
1001b370              else
1001b37f                  data_10066924
1001b385                  int32_t* ecx_7 = data_10066964 + ebp_1 * 0xc
1001b388                  int32_t eax_13 = *edi_1
1001b38e                  int32_t eax_14 = *(esi_1 + 8)
1001b397                  int32_t var_818_1 = *ebx_1
1001b39e                  int32_t var_814_1 = *(esi_1 + 0x10)
1001b3a5                  unimplemented  {fld st0, dword [esi]}
1001b3a7                  int32_t var_810_1 = *(esi_1 + 0x14)
1001b3ad                  unimplemented  {fld st0, st0}
1001b3b2                  unimplemented  {fmul st0, dword [ebp+eax*4]}
1001b3b6                  unimplemented  {fld st0, dword [esp+0x60]}
1001b3ba                  unimplemented  {fmul st0, dword [ebp+eax*4+0x8]}
1001b3c2                  unimplemented  {faddp st1, st0}
1001b3c2                  unimplemented  {faddp st1, st0}
1001b3c4                  unimplemented  {fld st0, dword [esp+0x5c]}
1001b3c8                  unimplemented  {fmul st0, dword [eax+0x4]}
1001b3cb                  unimplemented  {faddp st1, st0}
1001b3cb                  unimplemented  {faddp st1, st0}
1001b3cd                  unimplemented  {fsub st0, dword [eax+0xc]}
1001b3d0                  float var_86c_1 = fconvert.s(unimplemented  {fstp dword [esp+0x10], st0})
1001b3d0                  unimplemented  {fstp dword [esp+0x10], st0}
1001b3d4                  unimplemented  {fld st0, dword [esp+0x64]}
1001b3d8                  unimplemented  {fmul st0, dword [eax]}
1001b3da                  unimplemented  {fld st0, dword [esp+0x6c]}
1001b3de                  unimplemented  {fmul st0, dword [eax+0x8]}
1001b3e1                  unimplemented  {faddp st1, st0}
1001b3e1                  unimplemented  {faddp st1, st0}
1001b3e3                  unimplemented  {fld st0, dword [esp+0x68]}
1001b3e7                  unimplemented  {fmul st0, dword [eax+0x4]}
1001b3ea                  unimplemented  {faddp st1, st0}
1001b3ea                  unimplemented  {faddp st1, st0}
1001b3ec                  unimplemented  {fsub st0, dword [eax+0xc]}
1001b3ef                  float var_858_1 = fconvert.s(unimplemented  {fstp dword [esp+0x24], st0})
1001b3ef                  unimplemented  {fstp dword [esp+0x24], st0}
1001b3f3                  unimplemented  {fld st0, dword [esp+0x10]}
1001b3f7                  long double temp3_1 = fconvert.t(-0.00050000000000000001)
1001b3f7                  unimplemented  {fcomp st0, qword [&data_10058250]} f- temp3_1
1001b3f7                  bool c0_1 = unimplemented  {fcomp st0, qword [&data_10058250]} f< temp3_1
1001b3f7                  bool c2_1 = is_unordered.t(
1001b3f7                      unimplemented  {fcomp st0, qword [&data_10058250]}, temp3_1)
1001b3f7                  bool c3_1 = unimplemented  {fcomp st0, qword [&data_10058250]} f== temp3_1
1001b3f7                  unimplemented  {fcomp st0, qword [&data_10058250]}
1001b3f7                  int16_t top_15 = top - 1
1001b3fd                  eax_4.w = (c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa
1001b3fd                      | (c3_1 ? 1 : 0) << 0xe | (top_15 & 7) << 0xb
1001b3fd                  
1001b402                  if ((eax_4:1.b & 0x41) == 0)
1001b404                      unimplemented  {fld st0, dword [esp+0x24]}
1001b408                      long double temp7_1 = fconvert.t(-0.00050000000000000001)
1001b408                      unimplemented  {fcomp st0, qword [&data_10058250]} f- temp7_1
1001b408                      bool c0_2 =
1001b408                          unimplemented  {fcomp st0, qword [&data_10058250]} f< temp7_1
1001b408                      bool c2_2 = is_unordered.t(
1001b408                          unimplemented  {fcomp st0, qword [&data_10058250]}, temp7_1)
1001b408                      bool c3_2 =
1001b408                          unimplemented  {fcomp st0, qword [&data_10058250]} f== temp7_1
1001b408                      unimplemented  {fcomp st0, qword [&data_10058250]}
1001b40e                      eax_4.w = (c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
1001b40e                          | (c3_2 ? 1 : 0) << 0xe | (top_15 & 7) << 0xb
1001b40e                      
1001b413                      if ((eax_4:1.b & 0x41) == 0)
1001b418                          edi_1 += 0x20
1001b41b                          *(esi_1 + 0x1c) = ecx_7[1]
1001b41e                          esi_1 += 0x20
1001b421                          unimplemented  {fstp st0, st0}
1001b421                          unimplemented  {fstp st0, st0}
1001b421                          top = top_15 + 1
1001b423                          ebx_1 += 0x20
1001b426                          continue
1001b426                  
1001b42b                  unimplemented  {fld st0, dword [esp+0x10]}
1001b42f                  long double temp6_1 = fconvert.t(0.00050000000000000001)
1001b42f                  unimplemented  {fcomp st0, qword [&data_10058240]} f- temp6_1
1001b42f                  bool c0_3 = unimplemented  {fcomp st0, qword [&data_10058240]} f< temp6_1
1001b42f                  bool c2_3 = is_unordered.t(
1001b42f                      unimplemented  {fcomp st0, qword [&data_10058240]}, temp6_1)
1001b42f                  bool c3_3 = unimplemented  {fcomp st0, qword [&data_10058240]} f== temp6_1
1001b42f                  unimplemented  {fcomp st0, qword [&data_10058240]}
1001b435                  eax_4.w = (c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
1001b435                      | (c3_3 ? 1 : 0) << 0xe | (top_15 & 7) << 0xb
1001b435                  
1001b43a                  if ((eax_4:1.b & 1) != 0)
1001b43c                      unimplemented  {fld st0, dword [esp+0x24]}
1001b440                      long double temp12_1 = fconvert.t(0.00050000000000000001)
1001b440                      unimplemented  {fcomp st0, qword [&data_10058240]} f- temp12_1
1001b440                      bool c0_4 =
1001b440                          unimplemented  {fcomp st0, qword [&data_10058240]} f< temp12_1
1001b440                      bool c2_4 = is_unordered.t(
1001b440                          unimplemented  {fcomp st0, qword [&data_10058240]}, temp12_1)
1001b440                      bool c3_4 =
1001b440                          unimplemented  {fcomp st0, qword [&data_10058240]} f== temp12_1
1001b440                      unimplemented  {fcomp st0, qword [&data_10058240]}
1001b446                      eax_4.w = (c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
1001b446                          | (c3_4 ? 1 : 0) << 0xe | (top_15 & 7) << 0xb
1001b446                      
1001b44b                      if ((eax_4:1.b & 1) != 0)
1001b450                          edi_1 += 0x20
1001b453                          *(esi_1 + 0x1c) = ecx_7[2]
1001b456                          esi_1 += 0x20
1001b459                          unimplemented  {fstp st0, st0}
1001b459                          unimplemented  {fstp st0, st0}
1001b459                          top = top_15 + 1
1001b45b                          ebx_1 += 0x20
1001b45e                          continue
1001b45e                  
1001b463                  unimplemented  {fld st0, dword [esp+0x10]}
1001b467                  long double temp11_1 = fconvert.t(0f)
1001b467                  unimplemented  {fcomp st0, dword [&data_10058000]} f- temp11_1
1001b467                  bool c0_5 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp11_1
1001b467                  bool c2_5 = is_unordered.t(
1001b467                      unimplemented  {fcomp st0, dword [&data_10058000]}, temp11_1)
1001b467                  bool c3_5 =
1001b467                      unimplemented  {fcomp st0, dword [&data_10058000]} f== temp11_1
1001b467                  unimplemented  {fcomp st0, dword [&data_10058000]}
1001b470                  unimplemented  {fld st0, dword [esp+0x10]}
1001b474                  float* var_868_1 = *(esi_1 + 0x18)
1001b478                  float* eax_20
1001b478                  eax_20.w = (c0_5 ? 1 : 0) << 8 | (c2_5 ? 1 : 0) << 0xa
1001b478                      | (c3_5 ? 1 : 0) << 0xe | ((top_15 - 1) & 7) << 0xb
1001b478                  
1001b47d                  if ((eax_20:1.b & 1) == 0)
1001b487                      unimplemented  {fsub st0, qword [&data_10058110]}
1001b47d                  else
1001b47f                      unimplemented  {fadd qword [&data_10058110]}
1001b47f                  
1001b48d                  unimplemented  {fld st0, dword [esp+0x10]}
1001b491                  unimplemented  {fsub st0, dword [esp+0x24]}
1001b495                  unimplemented  {fdivp st1, st0}
1001b495                  unimplemented  {fdivp st1, st0}
1001b495                  int16_t top_24 = top_15 - 1
1001b497                  long double temp15_1 = fconvert.t(0f)
1001b497                  unimplemented  {fcom st0, dword [&data_10058000]} f- temp15_1
1001b497                  bool c0_6 = unimplemented  {fcom st0, dword [&data_10058000]} f< temp15_1
1001b497                  bool c2_6 = is_unordered.t(
1001b497                      unimplemented  {fcom st0, dword [&data_10058000]}, temp15_1)
1001b497                  bool c3_6 = unimplemented  {fcom st0, dword [&data_10058000]} f== temp15_1
1001b49d                  eax_20.w = (c0_6 ? 1 : 0) << 8 | (c2_6 ? 1 : 0) << 0xa
1001b49d                      | (c3_6 ? 1 : 0) << 0xe | (top_24 & 7) << 0xb
1001b49d                  
1001b4a2                  if ((eax_20:1.b & 1) == 0)
1001b4ae                      long double temp16_1 = fconvert.t(1f)
1001b4ae                      unimplemented  {fcom st0, dword [&data_100580c4]} f- temp16_1
1001b4ae                      bool c0_7 =
1001b4ae                          unimplemented  {fcom st0, dword [&data_100580c4]} f< temp16_1
1001b4ae                      bool c2_7 = is_unordered.t(
1001b4ae                          unimplemented  {fcom st0, dword [&data_100580c4]}, temp16_1)
1001b4ae                      bool c3_7 =
1001b4ae                          unimplemented  {fcom st0, dword [&data_100580c4]} f== temp16_1
1001b4b4                      eax_20.w = (c0_7 ? 1 : 0) << 8 | (c2_7 ? 1 : 0) << 0xa
1001b4b4                          | (c3_7 ? 1 : 0) << 0xe | (top_24 & 7) << 0xb
1001b4b4                      
1001b4b9                      if ((eax_20:1.b & 0x41) == 0)
1001b4bb                          unimplemented  {fstp st0, st0}
1001b4bb                          unimplemented  {fstp st0, st0}
1001b4bd                          unimplemented  {fld st0, dword [&data_100580c4]}
1001b4a2                  else
1001b4a4                      unimplemented  {fstp st0, st0}
1001b4a4                      unimplemented  {fstp st0, st0}
1001b4a6                      unimplemented  {fld st0, dword [&data_10058000]}
1001b4a6                  
1001b4c3                  unimplemented  {fld st0, dword [esp+0x64]}
1001b4c7                  unimplemented  {fsub st0, st2}
1001b4c9                  unimplemented  {fmul st0, st1}
1001b4cb                  unimplemented  {fadd st0, st2}
1001b4cd                  float var_80c_1 = fconvert.s(unimplemented  {fstp dword [esp+0x70], st0})
1001b4cd                  unimplemented  {fstp dword [esp+0x70], st0}
1001b4d1                  unimplemented  {fld st0, dword [esp+0x68]}
1001b4d5                  unimplemented  {fsub st0, dword [esp+0x5c]}
1001b4d9                  unimplemented  {fmul st0, st1}
1001b4db                  unimplemented  {fadd dword [esp+0x5c]}
1001b4df                  float var_808_1 = fconvert.s(unimplemented  {fstp dword [esp+0x74], st0})
1001b4df                  unimplemented  {fstp dword [esp+0x74], st0}
1001b4e3                  unimplemented  {fld st0, dword [esp+0x6c]}
1001b4e7                  unimplemented  {fsub st0, dword [esp+0x60]}
1001b4eb                  unimplemented  {fmulp st1, st0}
1001b4eb                  unimplemented  {fmulp st1, st0}
1001b4ed                  unimplemented  {fadd dword [esp+0x60]}
1001b4f1                  unimplemented  {fld st0, dword [esp+0x10]}
1001b4f5                  long double temp17_1 = fconvert.t(0f)
1001b4f5                  unimplemented  {fcomp st0, dword [&data_10058000]} f- temp17_1
1001b4f5                  bool c0_8 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp17_1
1001b4f5                  bool c2_8 = is_unordered.t(
1001b4f5                      unimplemented  {fcomp st0, dword [&data_10058000]}, temp17_1)
1001b4f5                  bool c3_8 =
1001b4f5                      unimplemented  {fcomp st0, dword [&data_10058000]} f== temp17_1
1001b4f5                  unimplemented  {fcomp st0, dword [&data_10058000]}
1001b4fb                  eax_20.w = (c0_8 ? 1 : 0) << 8 | (c2_8 ? 1 : 0) << 0xa
1001b4fb                      | (c3_8 ? 1 : 0) << 0xe | (top_24 & 7) << 0xb
1001b500                  int32_t ebp_4
1001b500                  
1001b500                  if ((eax_20:1.b & 1) == 0)
1001b509                      ebp_4 = 0
1001b500                  else
1001b502                      ebp_4 = 1
1001b502                  
1001b50f                  *(esi_1 + 8) = fconvert.s(unimplemented  {fst dword [esi+0x8], st0})
1001b512                  *esi_1 = var_80c_1
1001b518                  *edi_1 = var_808_1
1001b51c                  *(esi_1 + 0x18) = *ecx_7
1001b523                  int32_t eax_24
1001b523                  eax_24.b = ebp_4 == 0
1001b533                  *(esi_1 + 0x1c) = ecx_7[eax_24 + 1]
1001b53a                  *(edi_1 + 0x20) = eax_13
1001b540                  *(esi_1 + 0x28) = eax_14
1001b547                  *(ebx_1 + 0x20) = var_80c_1
1001b54d                  unimplemented  {fxch st0, st1}
1001b54d                  unimplemented  {fxch st0, st1}
1001b54f                  *(esi_1 + 0x20) = fconvert.s(unimplemented  {fstp dword [esi], st0})
1001b54f                  unimplemented  {fstp dword [esi], st0}
1001b551                  *(esi_1 + 0x30) = var_808_1
1001b558                  *(esi_1 + 0x34) = fconvert.s(unimplemented  {fstp dword [esi+0x14], st0})
1001b558                  unimplemented  {fstp dword [esi+0x14], st0}
1001b558                  top = top_24 + 2
1001b55b                  *(esi_1 + 0x38) = var_868_1
1001b562                  *(esi_1 + 0x3c) = ecx_7[ebp_4 + 1]
1001b565                  esi_1 += 0x40
1001b568                  edi_1 += 0x40
1001b56b                  ebx_1 += 0x40
1001b56e                  continue
1001b311          else if ((*(data_10066954 - ebp_1 * 0x1c + 8) & arg4) == 0)
1001b5ad              unimplemented  {fld st0, dword [esi]}
1001b5af              long double temp4_1 = fconvert.t(*edx_1)
1001b5af              unimplemented  {fcomp st0, dword [edx]} f- temp4_1
1001b5af              bool c0_9 = unimplemented  {fcomp st0, dword [edx]} f< temp4_1
1001b5af              bool c2_9 = is_unordered.t(unimplemented  {fcomp st0, dword [edx]}, temp4_1)
1001b5af              bool c3_9 = unimplemented  {fcomp st0, dword [edx]} f== temp4_1
1001b5af              unimplemented  {fcomp st0, dword [edx]}
1001b5b1              void* eax_9
1001b5b1              eax_9.w = (c0_9 ? 1 : 0) << 8 | (c2_9 ? 1 : 0) << 0xa | (c3_9 ? 1 : 0) << 0xe
1001b5b1                  | (top & 7) << 0xb
1001b5b1              
1001b5b6              if ((eax_9:1.b & 0x40) == 0)
1001b5f0                  label_1001b5f0:
1001b5f0                  s = 0
1001b5f8                  unimplemented  {fld st0, dword [eax]}
1001b5fa                  unimplemented  {fsub st0, dword [edx]}
1001b5fc                  var_864 = fconvert.s(unimplemented  {fstp dword [esp+0x1c], st0})
1001b5fc                  unimplemented  {fstp dword [esp+0x1c], st0}
1001b600                  unimplemented  {fld st0, dword [eax+0x4]}
1001b603                  unimplemented  {fsub st0, dword [edx+0x4]}
1001b606                  float var_860_1 = fconvert.s(unimplemented  {fstp dword [esp+0x20], st0})
1001b606                  unimplemented  {fstp dword [esp+0x20], st0}
1001b60a                  unimplemented  {fld st0, dword [eax+0x8]}
1001b60d                  unimplemented  {fsub st0, dword [edx+0x8]}
1001b610                  float var_85c_1 = fconvert.s(unimplemented  {fstp dword [esp+0x24], st0})
1001b610                  unimplemented  {fstp dword [esp+0x24], st0}
1001b614                  unimplemented  {fld st0, dword [esi]}
1001b616                  unimplemented  {fsub st0, dword [edx]}
1001b618                  var_830 = fconvert.s(unimplemented  {fstp dword [esp+0x50], st0})
1001b618                  unimplemented  {fstp dword [esp+0x50], st0}
1001b61c                  unimplemented  {fld st0, dword [esi+0x4]}
1001b61f                  unimplemented  {fsub st0, dword [edx+0x4]}
1001b622                  float var_82c_1 = fconvert.s(unimplemented  {fstp dword [esp+0x54], st0})
1001b622                  unimplemented  {fstp dword [esp+0x54], st0}
1001b626                  unimplemented  {fld st0, dword [esi+0x8]}
1001b629                  unimplemented  {fsub st0, dword [edx+0x8]}
1001b62c                  float var_828_1 = fconvert.s(unimplemented  {fstp dword [esp+0x58], st0})
1001b62c                  unimplemented  {fstp dword [esp+0x58], st0}
1001b630                  j_sub_10043500(&var_830)
1001b630                  unimplemented  {call j_sub_10043500}
1001b635                  float var_868_2 = fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
1001b635                  unimplemented  {fstp dword [esp+0x18], st0}
1001b63e                  j_sub_10043290(&var_864)
1001b63e                  unimplemented  {call j_sub_10043290}
1001b643                  unimplemented  {fdivr st0, dword [esp+0x1c]}
1001b653                  float var_850_3 = fconvert.s(unimplemented  {fstp dword [esp+0x44], st0})
1001b653                  unimplemented  {fstp dword [esp+0x44], st0}
1001b657                  j_sub_10043380(esi_1, -0.125f, &var_864, esi_1)
1001b5b6              else
1001b5b8                  unimplemented  {fld st0, dword [esi+0x4]}
1001b5bb                  long double temp8_1 = fconvert.t(edx_1[1])
1001b5bb                  unimplemented  {fcomp st0, dword [edx+0x4]} f- temp8_1
1001b5bb                  bool c0_10 = unimplemented  {fcomp st0, dword [edx+0x4]} f< temp8_1
1001b5bb                  bool c2_10 =
1001b5bb                      is_unordered.t(unimplemented  {fcomp st0, dword [edx+0x4]}, temp8_1)
1001b5bb                  bool c3_10 = unimplemented  {fcomp st0, dword [edx+0x4]} f== temp8_1
1001b5bb                  unimplemented  {fcomp st0, dword [edx+0x4]}
1001b5be                  eax_9.w = (c0_10 ? 1 : 0) << 8 | (c2_10 ? 1 : 0) << 0xa
1001b5be                      | (c3_10 ? 1 : 0) << 0xe | (top & 7) << 0xb
1001b5be                  
1001b5c3                  if ((eax_9:1.b & 0x40) == 0)
1001b5c3                      goto label_1001b5f0
1001b5c3                  
1001b5c5                  unimplemented  {fld st0, dword [esi+0x8]}
1001b5c8                  long double temp14_1 = fconvert.t(edx_1[2])
1001b5c8                  unimplemented  {fcomp st0, dword [edx+0x8]} f- temp14_1
1001b5c8                  bool c0_11 = unimplemented  {fcomp st0, dword [edx+0x8]} f< temp14_1
1001b5c8                  bool c2_11 =
1001b5c8                      is_unordered.t(unimplemented  {fcomp st0, dword [edx+0x8]}, temp14_1)
1001b5c8                  bool c3_11 = unimplemented  {fcomp st0, dword [edx+0x8]} f== temp14_1
1001b5c8                  unimplemented  {fcomp st0, dword [edx+0x8]}
1001b5cb                  eax_9.w = (c0_11 ? 1 : 0) << 8 | (c2_11 ? 1 : 0) << 0xa
1001b5cb                      | (c3_11 ? 1 : 0) << 0xe | (top & 7) << 0xb
1001b5cb                  
1001b5d0                  if ((eax_9:1.b & 0x40) == 0)
1001b5d0                      goto label_1001b5f0
1001b5d0                  
1001b5d2                  s = 1
1001b5da                  int32_t var_850_2 = 0
1001b5da              
1001b667              esi_3 = *(esi_1 + 0x18)
1001b66a              unimplemented  {fld st0, dword [esp+0x20]}
1001b66e              int32_t var_84c_2 = *esi_1
1001b672              int32_t var_848_2 = *(esi_1 + 4)
1001b67f              int32_t var_844_2 = *(esi_1 + 8)
1001b683              int32_t var_840_2 = 0
1001b690              int32_t var_838_2 = neg.d(ebp_1)
1001b694              int32_t var_834_2 = esi_3
1001b698              unimplemented  {fmul st0, dword [eax+0x8]}
1001b69b              unimplemented  {fld st0, dword [esp+0x1c]}
1001b69f              unimplemented  {fmul st0, dword [eax+0x4]}
1001b6a2              unimplemented  {faddp st1, st0}
1001b6a2              unimplemented  {faddp st1, st0}
1001b6a4              unimplemented  {fld st0, dword [esp+0x18]}
1001b6a8              unimplemented  {fmul st0, dword [eax]}
1001b6aa              unimplemented  {faddp st1, st0}
1001b6aa              unimplemented  {faddp st1, st0}
1001b6ac              long double temp13_1 = fconvert.t(0f)
1001b6ac              unimplemented  {fcomp st0, dword [&data_10058000]} f- temp13_1
1001b6ac              bool c0_12 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp13_1
1001b6ac              bool c2_12 = is_unordered.t(
1001b6ac                  unimplemented  {fcomp st0, dword [&data_10058000]}, temp13_1)
1001b6ac              bool c3_12 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp13_1
1001b6ac              unimplemented  {fcomp st0, dword [&data_10058000]}
1001b6ac              
1001b6b7              if ((((c0_12 ? 1 : 0) << 8 | (c2_12 ? 1 : 0) << 0xa | (c3_12 ? 1 : 0) << 0xe
1001b6b7                      | (top & 7) << 0xb):1.b & 0x41) != 0)
1001b6b7                  break
1001b332          else
1001b341              if (arg5 s>= 0)
1001b351                  eax_4 = j_sub_1001b130(neg.d(ebp_1), esi_1, ebx_1, arg4, arg5, &s)
1001b351                  top -= 1
1001b351                  unimplemented  {call j_sub_1001b130}
1001b351                  
1001b35b                  if (eax_4 != 0)
1001b6c8                      if (s == 0)
1001b6dc                          unimplemented  {fld st0, dword [ecx]}
1001b6de                          unimplemented  {fsub st0, dword [eax]}
1001b6e0                          var_864 = fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
1001b6e0                          unimplemented  {fstp dword [esp+0x18], st0}
1001b6e4                          unimplemented  {fld st0, dword [ecx+0x4]}
1001b6e7                          unimplemented  {fsub st0, dword [eax+0x4]}
1001b6ea                          float var_860_2 =
1001b6ea                              fconvert.s(unimplemented  {fstp dword [esp+0x1c], st0})
1001b6ea                          unimplemented  {fstp dword [esp+0x1c], st0}
1001b6ee                          unimplemented  {fld st0, dword [ecx+0x8]}
1001b6f1                          unimplemented  {fsub st0, dword [eax+0x8]}
1001b6f4                          float var_85c_2 =
1001b6f4                              fconvert.s(unimplemented  {fstp dword [esp+0x20], st0})
1001b6f4                          unimplemented  {fstp dword [esp+0x20], st0}
1001b6f8                          unimplemented  {fld st0, dword [esp+0x30]}
1001b6fc                          unimplemented  {fsub st0, dword [eax]}
1001b6fe                          var_830 = fconvert.s(unimplemented  {fstp dword [esp+0x4c], st0})
1001b6fe                          unimplemented  {fstp dword [esp+0x4c], st0}
1001b702                          unimplemented  {fld st0, dword [esp+0x34]}
1001b706                          unimplemented  {fsub st0, dword [eax+0x4]}
1001b709                          float var_82c_2 =
1001b709                              fconvert.s(unimplemented  {fstp dword [esp+0x50], st0})
1001b709                          unimplemented  {fstp dword [esp+0x50], st0}
1001b70d                          unimplemented  {fld st0, dword [esp+0x38]}
1001b711                          unimplemented  {fsub st0, dword [eax+0x8]}
1001b719                          float var_828_2 =
1001b719                              fconvert.s(unimplemented  {fstp dword [esp+0x58], st0})
1001b719                          unimplemented  {fstp dword [esp+0x58], st0}
1001b71d                          j_sub_10043500(&var_830)
1001b71d                          unimplemented  {call j_sub_10043500}
1001b722                          float var_868_3 =
1001b722                              fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
1001b722                          unimplemented  {fstp dword [esp+0x18], st0}
1001b72b                          j_sub_10043500(&var_864)
1001b72b                          unimplemented  {call j_sub_10043500}
1001b730                          unimplemented  {fdivr st0, dword [esp+0x1c]}
1001b737                          float var_850_4 =
1001b737                              fconvert.s(unimplemented  {fstp dword [esp+0x2c], st0})
1001b737                          unimplemented  {fstp dword [esp+0x2c], st0}
1001b737                      
1001b6c8                      break
1001b6c8                  
1001b361                  edx_1 = arg2
1001b361              
1001b36a              int32_t var_83c_1 = neg.d(ebp_1)
1001b36e              continue
1001b84c          int32_t var_834_4 = esi_3 ^ 1
1001b84c          break
1001b84c  
1001b862  __builtin_memcpy(dest: arg1, src: &s, n: 0x24)
1001b86e  return arg1

1001b86f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1001b880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b8a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b8c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b8e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b9a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b9c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001b9e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001ba00    void sub_1001ba00(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

1001ba10  int32_t ebx = 0
1001ba13  *arg3 = 0
1001ba1c  int32_t var_820 = 0
1001ba1c  
1001ba20  if (data_100667e0 == 0)
1001ba2e      return 
1001ba2e  
1001ba36  int32_t var_7e8 = 0
1001ba3a  int32_t var_7e4 = 1
1001ba42  int32_t* var_810 = arg3
1001ba4e  int32_t var_800 = *arg1
1001ba52  int32_t var_7f8 = arg1[2]
1001ba5d  int32_t var_7fc = arg1[1]
1001ba69  int32_t var_7f4 = *arg2
1001ba6d  int32_t var_7f0 = arg2[1]
1001ba71  int32_t var_7ec = arg2[2]
1001ba75  void var_7e0
1001ba75  void* ecx_2 = &var_7e0
1001ba79  void var_7dc
1001ba79  void* edx_2 = &var_7dc
1001ba79  
1001ba7d  while (true)
1001ba7d      edx_2 -= 0x20
1001ba84      ecx_2 -= 0x20
1001ba84      
1001ba89      if (edx_2 s< &var_7fc)
1001ba89          break
1001ba89      
1001ba8f      int32_t eax_6 = *(ecx_2 + 0x1c)
1001ba8f      
1001ba94      if (eax_6 s< 0)
1001ba9c          *var_810 = neg.d(eax_6)
1001baa5          ebx += 1
1001baab          var_820 = ebx
1001baaf          var_810 = &var_810[1]
1001baaf          
1001bab3          if (ebx s>= arg4)
1001bab3              break
1001ba94      else if (eax_6 != 0)
1001bac6          int32_t ebp_1 = data_10066924
1001bacc          int32_t* esi_4 = data_10066964 + eax_6 * 0xc
1001bacf          float eax_10 = *edx_2
1001bad5          float eax_11 = *(ecx_2 + 8)
1001bad8          int32_t edi_1 = *esi_4
1001bade          float eax_12 = *(ecx_2 + 0xc)
1001bae5          float eax_13 = *(ecx_2 + 0x10)
1001bae8          long double x87_r7_1 = fconvert.t(*ecx_2)
1001baee          float eax_14 = *(ecx_2 + 0x14)
1001baf5          int32_t eax_15 = edi_1 * 5
1001bb06          float* eax_16 = ebp_1 + (eax_15 << 2)
1001bb15          long double x87_r6_5 = x87_r7_1 * fconvert.t(*(ebp_1 + (eax_15 << 2)))
1001bb15              + fconvert.t(eax_11) * fconvert.t(*(ebp_1 + (eax_15 << 2) + 8))
1001bb15              + fconvert.t(eax_10) * fconvert.t(eax_16[1]) - fconvert.t(eax_16[3])
1001bb18          float var_834_1 = fconvert.s(x87_r6_5)
1001bb37          float var_830_1 = fconvert.s(fconvert.t(eax_12) * fconvert.t(*eax_16)
1001bb37              + fconvert.t(eax_14) * fconvert.t(eax_16[2])
1001bb37              + fconvert.t(eax_13) * fconvert.t(eax_16[1]) - fconvert.t(eax_16[3]))
1001bb3b          long double x87_r6_11 = fconvert.t(var_834_1)
1001bb3f          long double temp2_1 = fconvert.t(0f)
1001bb3f          x87_r6_11 - temp2_1
1001bb45          long double x87_r6_12 = fconvert.t(var_830_1)
1001bb49          eax_16.w = (x87_r6_11 < temp2_1 ? 1 : 0) << 8
1001bb49              | (is_unordered.t(x87_r6_11, temp2_1) ? 1 : 0) << 0xa
1001bb49              | (x87_r6_11 == temp2_1 ? 1 : 0) << 0xe | 0x3000
1001bb4b          long double temp3_1 = fconvert.t(0f)
1001bb4b          x87_r6_12 - temp3_1
1001bb51          bool cond:3_1 = (eax_16:1.b & 0x41) != 0
1001bb54          eax_16.w = (x87_r6_12 < temp3_1 ? 1 : 0) << 8
1001bb54              | (is_unordered.t(x87_r6_12, temp3_1) ? 1 : 0) << 0xa
1001bb54              | (x87_r6_12 == temp3_1 ? 1 : 0) << 0xe | 0x3800
1001bb54          
1001bb56          if (cond:3_1)
1001bb73              if ((eax_16:1.b & 0x41) != 0)
1001bb78                  *(ecx_2 + 0x1c) = esi_4[2]
1001bb7b                  ecx_2 += 0x20
1001bb80                  edx_2 += 0x20
1001bb83                  continue
1001bb56          else if ((eax_16:1.b & 0x41) == 0)
1001bb60              *(ecx_2 + 0x1c) = esi_4[1]
1001bb63              ecx_2 += 0x20
1001bb68              edx_2 += 0x20
1001bb6b              continue
1001bb6b          
1001bb88          long double x87_r6_13 = fconvert.t(var_834_1)
1001bb8c          long double temp4_1 = fconvert.t(0f)
1001bb8c          x87_r6_13 - temp4_1
1001bb96          bool c1_1 = unimplemented  {fsub st0, dword [esp+0x14]}
1001bb9a          int32_t ebx_1 = *(ecx_2 + 0x18)
1001bb9d          eax_16.w = (x87_r6_13 < temp4_1 ? 1 : 0) << 8 | (c1_1 ? 1 : 0) << 9
1001bb9d              | (is_unordered.t(x87_r6_13, temp4_1) ? 1 : 0) << 0xa
1001bb9d              | (x87_r6_13 == temp4_1 ? 1 : 0) << 0xe | 0x3000
1001bb9f          long double x87_r6_16 =
1001bb9f              fconvert.t(var_834_1) / (fconvert.t(var_834_1) - fconvert.t(var_830_1))
1001bba6          long double temp7_1 = fconvert.t(0f)
1001bba6          x87_r6_16 - temp7_1
1001bbac          eax_16.w = (x87_r6_16 < temp7_1 ? 1 : 0) << 8
1001bbac              | (is_unordered.t(x87_r6_16, temp7_1) ? 1 : 0) << 0xa
1001bbac              | (x87_r6_16 == temp7_1 ? 1 : 0) << 0xe | 0x3000
1001bbac          
1001bbb1          if ((eax_16:1.b & 1) == 0)
1001bbbd              long double temp8_1 = fconvert.t(1f)
1001bbbd              x87_r6_16 - temp8_1
1001bbc3              eax_16.w = (x87_r6_16 < temp8_1 ? 1 : 0) << 8
1001bbc3                  | (is_unordered.t(x87_r6_16, temp8_1) ? 1 : 0) << 0xa
1001bbc3                  | (x87_r6_16 == temp8_1 ? 1 : 0) << 0xe | 0x3000
1001bbc3              
1001bbc8              if ((eax_16:1.b & 0x41) == 0)
1001bbca                  x87_r7_1 = x87_r6_16
1001bbcc                  x87_r6_16 = fconvert.t(1f)
1001bbb1          else
1001bbb3              x87_r7_1 = x87_r6_16
1001bbb5              x87_r6_16 = fconvert.t(0f)
1001bbb5          
1001bbdc          float var_80c_1 =
1001bbdc              fconvert.s((fconvert.t(eax_12) - x87_r7_1) * x87_r6_16 + x87_r7_1)
1001bbee          float var_808_1 = fconvert.s((fconvert.t(eax_13) - fconvert.t(eax_10)) * x87_r6_16
1001bbee              + fconvert.t(eax_10))
1001bbfc          long double x87_r6_18 =
1001bbfc              x87_r6_16 * (fconvert.t(eax_14) - fconvert.t(eax_11)) + fconvert.t(eax_11)
1001bc00          long double x87_r5_19 = fconvert.t(var_834_1)
1001bc04          long double temp9_1 = fconvert.t(0f)
1001bc04          x87_r5_19 - temp9_1
1001bc0a          eax_16.w = (x87_r5_19 < temp9_1 ? 1 : 0) << 8
1001bc0a              | (is_unordered.t(x87_r5_19, temp9_1) ? 1 : 0) << 0xa
1001bc0a              | (x87_r5_19 == temp9_1 ? 1 : 0) << 0xe | 0x3000
1001bc0f          int32_t ebp_2
1001bc0f          
1001bc0f          if ((eax_16:1.b & 1) == 0)
1001bc18              ebp_2 = 0
1001bc0f          else
1001bc11              ebp_2 = 1
1001bc11          
1001bc1e          *(ecx_2 + 0x18) = edi_1
1001bc21          *ecx_2 = var_80c_1
1001bc27          *edx_2 = var_808_1
1001bc2d          *(ecx_2 + 8) = fconvert.s(x87_r6_18)
1001bc30          int32_t eax_21
1001bc30          eax_21.b = ebp_2 == 0
1001bc3d          *(ecx_2 + 0x1c) = esi_4[eax_21 + 1]
1001bc44          *(edx_2 + 0x20) = eax_10
1001bc4a          *(ecx_2 + 0x28) = eax_11
1001bc51          *(ecx_2 + 0x2c) = var_80c_1
1001bc5a          *(ecx_2 + 0x20) = fconvert.s(x87_r7_1)
1001bc5c          *(ecx_2 + 0x30) = var_808_1
1001bc5f          int32_t eax_27 = esi_4[ebp_2 + 1]
1001bc63          *(ecx_2 + 0x34) = fconvert.s(x87_r6_18)
1001bc66          *(ecx_2 + 0x38) = ebx_1
1001bc69          ebx = var_820
1001bc6d          *(ecx_2 + 0x3c) = eax_27
1001bc70          ecx_2 += 0x40
1001bc73          edx_2 += 0x40

1001bc88                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1001bca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001bcc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001bce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001bd00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001bd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001bd40    void sub_1001bd40(void* arg1, float* arg2, float arg3, float arg4)

1001bd4e  if (data_100667e0 == 0)
1001bd59      return 
1001bd59  
1001bd5e  int32_t var_20_1 = 0
1001bd66  int32_t ecx_1 = *(arg1 + 8)
1001bd66  
1001bd6f  if (ecx_1 s<= 0)
1001be97      return 
1001be97  
1001bd82  float* edi_1 = arg3
1001bd8a  int32_t ebp_1 = data_1006691c
1001bd99  arg1 = data_10066934 + (*(arg1 + 0xc) << 2)
1001bd99  
1001bda1  while (true)
1001bda1      int32_t esi_1 = *arg1
1001bda5      int32_t eax_5
1001bda5      int32_t edx_3
1001bda5      edx_3:eax_5 = sx.q(esi_1)
1001bdb0      int32_t edx_5 = data_1006692c + (((eax_5 ^ edx_3) - edx_3) << 3)
1001bdb7      int32_t eax_8
1001bdb7      eax_8.b = esi_1 s< 0
1001bdbf      int32_t eax_10 = *(edx_5 + (eax_8 << 2)) * 3
1001bdc2      long double x87_r7_3 = fconvert.t(*(ebp_1 + (eax_10 << 2)))
1001bdc6      float ebx_1 = *(ebp_1 + (eax_10 << 2) + 4)
1001bdd2      float eax_12 = *(ebp_1 + (eax_10 << 2) + 8)
1001bddd      int32_t eax_13
1001bddd      eax_13.b = eax_8 == 0
1001bde3      int32_t edx_7 = *(edx_5 + (eax_13 << 2)) * 3
1001bdea      void* eax_14 = ebp_1 + (edx_7 << 2)
1001bdf0      float var_18_1 = fconvert.s(fconvert.t(*(ebp_1 + (edx_7 << 2))) - x87_r7_3)
1001bdfb      float var_14_1 = fconvert.s(fconvert.t(*(eax_14 + 4)) - fconvert.t(ebx_1))
1001be06      float var_10_1 = fconvert.s(fconvert.t(*(eax_14 + 8)) - fconvert.t(eax_12))
1001be4e      long double x87_r3_7 = (fconvert.t(var_18_1) * fconvert.t(arg2[1])
1001be4e          - fconvert.t(var_14_1) * fconvert.t(*arg2))
1001be4e          * (fconvert.t(edi_1[2]) - fconvert.t(eax_12)) + (
1001be4e          fconvert.t(var_10_1) * fconvert.t(*arg2)
1001be4e          - fconvert.t(var_18_1) * fconvert.t(arg2[2]))
1001be4e          * (fconvert.t(edi_1[1]) - fconvert.t(ebx_1))
1001be54      long double x87_r4_5 = x87_r3_7 + (fconvert.t(var_14_1) * fconvert.t(arg2[2])
1001be54          - fconvert.t(var_10_1) * fconvert.t(arg2[1])) * (fconvert.t(*edi_1) - x87_r7_3)
1001be56      long double temp1_1 = fconvert.t(fconvert.s(fneg(fconvert.t(arg4))))
1001be56      x87_r4_5 - temp1_1
1001be5c      bool c1
1001be5c      eax_14.w = (x87_r4_5 < temp1_1 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9
1001be5c          | (is_unordered.t(x87_r4_5, temp1_1) ? 1 : 0) << 0xa
1001be5c          | (x87_r4_5 == temp1_1 ? 1 : 0) << 0xe | 0x3000
1001be5c      
1001be65      if ((eax_14:1.b & 1) != 0)
1001bd59          return 
1001bd59      
1001be7b      bool cond:2_1 = var_20_1 + 1 s< ecx_1
1001be7d      var_20_1 += 1
1001be81      arg1 += 4
1001be81      
1001be85      if (not(cond:2_1))
1001be97          return 

1001be98                                                                          90 90 90 90 90 90 90 90                          ........
1001bea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001bec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001bee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001bf00    int32_t sub_1001bf00(int32_t arg1, float arg2, float arg3)

1001bf0e  if (data_100667e0 == 0)
1001bf19      return 0
1001bf19  
1001bf1a  int32_t eax_1 = arg1
1001bf1e  int32_t ecx_1 = data_1006693c
1001bf24  arg1 = 0
1001bf2c  int32_t eax_2 = eax_1 * 3
1001bf2f  void* ebx_1 = ecx_1 + (eax_2 << 3)
1001bf3d  float* ecx_2 = data_10066924 + *(ecx_1 + (eax_2 << 3)) * 0x14
1001bf3d  
1001bf49  if (*(ebx_1 + 8) s<= 0)
1001c044      return 1
1001c044  
1001bf53  float* edi_1 = arg2
1001bf53  
1001bf6b  while (true)
1001bf6b      int32_t ebp_1 = data_1006691c
1001bf71      int32_t ecx_3 = *(data_10066934 + ((*(ebx_1 + 0xc) + arg1) << 2))
1001bf76      int32_t eax_9
1001bf76      int32_t edx_4
1001bf76      edx_4:eax_9 = sx.q(ecx_3)
1001bf81      int32_t edx_6 = data_1006692c + (((eax_9 ^ edx_4) - edx_4) << 3)
1001bf88      int32_t eax_12
1001bf88      eax_12.b = ecx_3 s< 0
1001bf93      float* eax_14 = ebp_1 + *(edx_6 + (eax_12 << 2)) * 0xc
1001bf9b      int32_t ecx_5
1001bf9b      ecx_5.b = eax_12 == 0
1001bfa1      int32_t edx_8 = *(edx_6 + (ecx_5 << 2)) * 3
1001bfaa      void* ecx_6 = ebp_1 + (edx_8 << 2)
1001bfb2      float var_18 = fconvert.s(fconvert.t(*(ebp_1 + (edx_8 << 2))) - fconvert.t(*eax_14))
1001bfbc      float var_14_1 = fconvert.s(fconvert.t(*(ecx_6 + 4)) - fconvert.t(eax_14[1]))
1001bfca      float var_10_1 = fconvert.s(fconvert.t(*(ecx_6 + 8)) - fconvert.t(eax_14[2]))
1001bfd2      float var_24_1 = fconvert.s(fconvert.t(*edi_1) - fconvert.t(*eax_14))
1001bfdc      float var_20_1 = fconvert.s(fconvert.t(edi_1[1]) - fconvert.t(eax_14[1]))
1001bfed      float var_1c_1 = fconvert.s(fconvert.t(edi_1[2]) - fconvert.t(eax_14[2]))
1001bff1      float var_c
1001bff1      j_sub_100434b0(&var_18, ecx_2, &var_c)
1001c013      float var_8
1001c013      float var_4
1001c013      long double x87_r7_18 = fconvert.t(var_4) * fconvert.t(var_1c_1)
1001c013          + fconvert.t(var_8) * fconvert.t(var_20_1)
1001c013          + fconvert.t(var_c) * fconvert.t(var_24_1)
1001c015      long double temp0_1 = fconvert.t(fconvert.s(fneg(fconvert.t(arg3))))
1001c015      x87_r7_18 - temp0_1
1001c015      
1001c01e      if ((((x87_r7_18 < temp0_1 ? 1 : 0) << 8
1001c01e              | (is_unordered.t(x87_r7_18, temp0_1) ? 1 : 0) << 0xa
1001c01e              | (x87_r7_18 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1001bf19          return 0
1001bf19      
1001c02c      bool cond:2_1 = arg1 + 1 s< *(ebx_1 + 8)
1001c02e      arg1 += 1
1001c02e      
1001c032      if (not(cond:2_1))
1001c044          return 1

1001c045                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1001c060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001c080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001c0a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001c0b0    int32_t* sub_1001c0b0(int32_t arg1, float arg2)

1001c0bd  if (data_100667e0 != 0)
1001c0cd      int32_t i = 0
1001c0d5      void* edi_3 = arg1 * 0x30 + data_1006694c
1001c0d5      
1001c0dc      if (*(edi_3 + 4) s> 0)
1001c166          do
1001c0f0              int32_t eax_5
1001c0f0              int32_t edx_1
1001c0f0              edx_1:eax_5 = sx.q(*(data_10066944 + ((*(edi_3 + 8) + i) << 2)))
1001c0f5              int32_t edx_2 = ((eax_5 ^ edx_1) - edx_1) * 3
1001c0f8              int32_t eax_8 = data_1006693c
1001c0fd              int32_t* result = eax_8 + (edx_2 << 3)
1001c100              eax_8.b = *(eax_8 + (edx_2 << 3) + 4)
1001c100              
1001c106              if ((eax_8.b & 4) != 0)
1001c113                  unimplemented  {fld st0, dword [edx+ecx*4+0x8]}
1001c117                  long double temp0_1 = fconvert.t(0f)
1001c117                  unimplemented  {fcomp st0, dword [&data_10058000]} f- temp0_1
1001c117                  bool c0_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp0_1
1001c117                  bool c2_1 = is_unordered.t(
1001c117                      unimplemented  {fcomp st0, dword [&data_10058000]}, temp0_1)
1001c117                  bool c3_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp0_1
1001c117                  unimplemented  {fcomp st0, dword [&data_10058000]}
1001c11d                  float var_c = 0f
1001c125                  int32_t var_8_1 = 0
1001c12d                  int32_t var_4_1 = 0xbf800000
1001c13a                  int16_t top
1001c13a                  
1001c13a                  if ((((c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa | (c3_1 ? 1 : 0) << 0xe
1001c13a                          | (top & 7) << 0xb):1.b & 1) == 0)
1001c13c                      int32_t var_4_2 = 0x3f800000
1001c13c                  
1001c154                  int32_t eax_11 = j_sub_1001bd40(result, &var_c, arg2, 0.00999999978f)
1001c154                  top -= 1
1001c154                  unimplemented  {call j_sub_1001bd40}
1001c154                  
1001c15e                  if (eax_11 != 0)
1001c17d                      return result
1001c17d              
1001c163              i += 1
1001c166          while (i s< *(edi_3 + 4))
1001c166  
1001c174  return 0

1001c17e                                                                                            90 90                                ..
1001c180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001c1a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001c1c0    int32_t sub_1001c1c0(int32_t arg1, int32_t* arg2, int32_t* arg3)

1001c1dc  int32_t* eax_3 = data_10066924 + *(data_1006693c + arg1 * 0x18) * 0x14
1001c1e1  *arg2 = *eax_3
1001c1e6  arg2[1] = eax_3[1]
1001c1ec  arg2[2] = eax_3[2]
1001c1f3  int32_t result = eax_3[3]
1001c1f6  *arg3 = result
1001c1f8  return result

1001c1f9                                                                             90 90 90 90 90 90 90                           .......
1001c200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001c210    void* sub_1001c210(int32_t* arg1)

1001c224  if (data_100667e0 != 0 && *arg1 == 0)
1001c22f      int32_t i = 0
1001c237      void* edi_3 = arg1[6] * 0x30 + data_1006694c
1001c237      
1001c23e      if (*(edi_3 + 4) s> 0)
1001c298          do
1001c24e              int32_t eax_5
1001c24e              int32_t edx_1
1001c24e              edx_1:eax_5 = sx.q(*(data_10066944 + ((*(edi_3 + 8) + i) << 2)))
1001c25b              void* result = data_1006693c + ((eax_5 ^ edx_1) - edx_1) * 0x18
1001c261              int32_t eax_9 = *result
1001c261              
1001c26d              if (((eax_9 ^ arg1[8]) & 0xfffffffe) == 0)
1001c286                  int32_t eax_11 = j_sub_1001bd40(result, data_10066924 + eax_9 * 0x14, 
1001c286                      &arg1[2], 0.00999999978f)
1001c286                  int16_t top = top - 1
1001c286                  unimplemented  {call j_sub_1001bd40}
1001c286                  
1001c290                  if (eax_11 != 0)
1001c2a7                      return result
1001c2a7              
1001c295              i += 1
1001c298          while (i s< *(edi_3 + 4))
1001c298  
1001c2a0  return 0

1001c2a8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1001c2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001c2e0    int32_t sub_1001c2e0(float* arg1, int32_t arg2, float* arg3)

1001c2e3  float* ecx = arg1
1001c2fd  void* ebp_1 = arg3 - ecx
1001c2ff  float var_c
1001c2ff  void* edx = &var_c - ecx
1001c301  int32_t* esi_1 = arg2 - ecx
1001c303  float var_18
1001c303  void* edi = &var_18 - ecx
1001c305  arg1 = 3
1001c33f  void* eax
1001c33f  bool cond:1_1
1001c33f  
1001c33f  do
1001c30d      long double x87_r7_1 = fconvert.t(*(ecx + ebp_1))
1001c310      long double temp0_1 = fconvert.t(0f)
1001c310      x87_r7_1 - temp0_1
1001c316      eax.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
1001c316          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1001c316          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
1001c31b      float eax_1 = *ecx
1001c31b      
1001c31d      if ((eax:1.b & 1) == 0)
1001c32a          *(edx + ecx) = eax_1
1001c330          *(edi + ecx) = *(esi_1 + ecx)
1001c31d      else
1001c31f          *(edi + ecx) = eax_1
1001c325          *(edx + ecx) = *(esi_1 + ecx)
1001c325      
1001c337      ecx = &ecx[1]
1001c33a      cond:1_1 = arg1 != 1
1001c33b      arg1 -= 1
1001c33f  while (cond:1_1)
1001c350  int32_t result = 0
1001c35e  float var_8
1001c35e  float var_4
1001c35e  long double x87_r7_6 = fconvert.t(var_4) * fconvert.t(arg3[2])
1001c35e      + fconvert.t(var_8) * fconvert.t(arg3[1]) + fconvert.t(var_c) * fconvert.t(*arg3)
1001c35e      - fconvert.t(arg3[3])
1001c379  float var_14
1001c379  float var_10
1001c379  long double x87_r6_8 = fconvert.t(var_10) * fconvert.t(arg3[2])
1001c379      + fconvert.t(var_14) * fconvert.t(arg3[1]) + fconvert.t(var_18) * fconvert.t(*arg3)
1001c379      - fconvert.t(arg3[3])
1001c37d  long double temp2 = fconvert.t(0f)
1001c37d  x87_r6_8 - temp2
1001c383  eax.w = (x87_r6_8 < temp2 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_8, temp2) ? 1 : 0) << 0xa
1001c383      | (x87_r6_8 == temp2 ? 1 : 0) << 0xe | 0x3800
1001c383  
1001c388  if ((eax:1.b & 1) == 0)
1001c38a      result = 1
1001c38a  
1001c38f  long double temp3 = fconvert.t(0f)
1001c38f  x87_r7_6 - temp3
1001c395  eax.w = (x87_r7_6 < temp3 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_6, temp3) ? 1 : 0) << 0xa
1001c395      | (x87_r7_6 == temp3 ? 1 : 0) << 0xe
1001c395  
1001c39a  if ((eax:1.b & 1) == 0)
1001c3a4      return result
1001c3a4  
1001c39c  return result | 2

1001c3a5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1001c3c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001c3e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001c3f0    void* sub_1001c3f0(void* arg1)

1001c3f0  void* result = arg1
1001c3f0  
1001c3f6  if (result != 0)
1001c435      void* i
1001c435      
1001c435      do
1001c3fa          void* ecx_1 = *(result + 0xc)
1001c3fd          i = *(result + 0x10)
1001c3fd          
1001c402          if (ecx_1 == 0)
1001c418              *(data_10066994 + (*(result + 4) << 2)) = *(result + 8)
1001c402          else
1001c407              *(ecx_1 + 8) = *(result + 8)
1001c407          
1001c41b          void* ecx_3 = *(result + 8)
1001c41b          
1001c420          if (ecx_3 != 0)
1001c425              *(ecx_3 + 0xc) = *(result + 0xc)
1001c425          
1001c429          j_sub_1001ada0(result)
1001c431          result = i
1001c435      while (i != 0)
1001c435  
1001c439  return result

1001c43a                                                                                90 90 90 90 90 90                            ......
1001c440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001c460    int32_t* sub_1001c460(float* arg1, int32_t arg2, int32_t arg3)

1001c471  if (data_100667e0 == 0)
1001c47a      data_10063fe8(3, "AAS_LinkEntity: aas not loaded\n")
1001c48f      return 0
1001c48f  
1001c497  int32_t* result = nullptr
1001c499  int32_t var_100 = 1
1001c4a1  void var_fc
1001c4a1  void* ebx = &var_fc
1001c4a1  
1001c4a5  while (true)
1001c4a5      ebx -= 4
1001c4a5      
1001c4ae      if (ebx u< &var_100)
1001c4ae          break
1001c4ae      
1001c4b4      int32_t esi_1 = *ebx
1001c4b4      
1001c4b8      if (esi_1 s< 0)
1001c4ba          int32_t* result_1 = j_sub_1001ad50()
1001c4ba          
1001c4c3          if (result_1 == 0)
1001c4c3              break
1001c4c3          
1001c4d0          result_1[5] = 0
1001c4d3          *result_1 = arg3
1001c4db          result_1[1] = neg.d(esi_1)
1001c4de          result_1[4] = result
1001c4de          
1001c4e1          if (result != 0)
1001c4e3              result[5] = result_1
1001c4e3          
1001c4e6          result_1[3] = 0
1001c4ef          int32_t ecx_1 = esi_1 << 2
1001c4f6          result = result_1
1001c4fc          result_1[2] = *(data_10066994 - ecx_1)
1001c4ff          int32_t edx_7 = data_10066994
1001c509          void* esi_4 = *(edx_7 - ecx_1)
1001c509          
1001c50d          if (esi_4 != 0)
1001c50f              *(esi_4 + 0xc) = result_1
1001c512              edx_7 = data_10066994
1001c512          
1001c51a          *(edx_7 - ecx_1) = result_1
1001c4b8      else if (esi_1 != 0)
1001c520          int32_t ecx_2 = data_10066964
1001c526          int32_t eax_1 = esi_1 * 3
1001c529          void* esi_5 = ecx_2 + (eax_1 << 2)
1001c52f          int32_t edx_9 = *(ecx_2 + (eax_1 << 2)) * 5
1001c532          int32_t eax_3 = data_10066924
1001c537          float* ecx_3 = eax_3 + (edx_9 << 2)
1001c53a          int32_t edx_10 = *(eax_3 + (edx_9 << 2) + 0x10)
1001c541          char eax_5
1001c541          
1001c541          if (edx_10 s>= 3)
1001c584              eax_5 = j_sub_1001c2e0(arg1, arg2, ecx_3)
1001c541          else
1001c54a              long double x87_r7_1 = fconvert.t(ecx_3[3])
1001c54d              long double temp1_1 = fconvert.t(arg1[edx_10])
1001c54d              x87_r7_1 - temp1_1
1001c550              float* eax_4
1001c550              eax_4.w = (x87_r7_1 < temp1_1 ? 1 : 0) << 8
1001c550                  | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
1001c550                  | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe
1001c550              
1001c555              if ((eax_4:1.b & 0x41) == 0)
1001c55e                  long double x87_r7_2 = fconvert.t(ecx_3[3])
1001c561                  long double temp2_1 = fconvert.t(*(arg2 + (edx_10 << 2)))
1001c561                  x87_r7_2 - temp2_1
1001c565                  eax_4.w = (x87_r7_2 < temp2_1 ? 1 : 0) << 8
1001c565                      | (is_unordered.t(x87_r7_2, temp2_1) ? 1 : 0) << 0xa
1001c565                      | (x87_r7_2 == temp2_1 ? 1 : 0) << 0xe
1001c565                  
1001c56a                  if ((eax_4:1.b & 1) != 0)
1001c573                      eax_5 = 3
1001c56a                  else
1001c56c                      eax_5 = 2
1001c555              else
1001c557                  eax_5 = 1
1001c557          
1001c58e          if ((eax_5 & 1) != 0)
1001c593              *ebx = *(esi_5 + 4)
1001c595              ebx += 4
1001c595          
1001c59a          if ((eax_5 & 2) != 0)
1001c5a3              *ebx = *(esi_5 + 8)
1001c5a5              ebx += 4
1001c5a5  
1001c5b9  return result

1001c5ba                                                                                90 90 90 90 90 90                            ......
1001c5c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001c5e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001c600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001c620    int32_t* sub_1001c620(float* arg1, float* arg2, int32_t arg3, int32_t arg4)

1001c632  float var_30
1001c632  float var_24
1001c632  j_sub_1000dda0(arg4, &var_24, &var_30)
1001c649  float var_c = fconvert.s(fconvert.t(*arg1) - fconvert.t(var_30))
1001c654  float var_2c
1001c654  float var_8 = fconvert.s(fconvert.t(arg1[1]) - fconvert.t(var_2c))
1001c663  float var_28
1001c663  float var_4 = fconvert.s(fconvert.t(arg1[2]) - fconvert.t(var_28))
1001c66d  float var_18 = fconvert.s(fconvert.t(*arg2) - fconvert.t(var_24))
1001c678  float var_20
1001c678  float var_14 = fconvert.s(fconvert.t(arg2[1]) - fconvert.t(var_20))
1001c68a  float var_1c
1001c68a  float var_10 = fconvert.s(fconvert.t(arg2[2]) - fconvert.t(var_1c))
1001c696  return j_sub_1001c460(&var_c, &var_18, arg3)

1001c697                                                                       90 90 90 90 90 90 90 90 90                         .........
1001c6a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001c6c0    int32_t sub_1001c6c0(int32_t arg1)

1001c6c7  if (data_100667e0 != 0)
1001c6dc      return data_10066924 + arg1 * 0x14
1001c6dc  
1001c6cb  return 0

1001c6dd                                                                                         90 90 90                               ...
1001c6e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001c6f0    int32_t* sub_1001c6f0()

1001c6f0  int32_t* result = data_100669b4
1001c6f7  int32_t edi = 0
1001c6f7  
1001c6fb  if (result s> 0)
1001c6fd      int32_t esi_1 = 0
1001c6fd      
1001c733      do
1001c6ff          result = j_sub_10038ec0()
1001c6ff          
1001c706          if (result == 0)
1001c706              break
1001c706          
1001c718          j_sub_10041210(result, &data_1005c138, esi_1 + data_100669b8)
1001c720          j_sub_10038ee0()
1001c725          result = data_100669b4
1001c72a          edi += 1
1001c72b          esi_1 += 0xb0
1001c733      while (edi s< result)
1001c733  
1001c737  return result

1001c738                                                                          90 90 90 90 90 90 90 90                          ........
1001c740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001c760    int32_t sub_1001c760(char* arg1)

1001c781  int16_t x87control
1001c781  int32_t ebx = __ftol(x87control, j_sub_10038a90("max_soundinfo", &data_1005c268))
1001c781  
1001c78d  if (ebx s< 0 || ebx s> 0xffff)
1001c796      data_10063fe8(3, "max_soundinfo out of range [0, 6…")
1001c7a6      ebx = 0x100
1001c7ab      j_sub_10038ac0("max_soundinfo", &data_1005c268)
1001c7ab  
1001c7b3  void* eax_1 = data_100669b8
1001c7b3  
1001c7ba  if (eax_1 != 0)
1001c7bd      j_sub_100390b0(eax_1)
1001c7bd  
1001c7db  data_100669b8 = j_sub_10039000(ebx * 0xb0)
1001c7eb  int32_t var_570_2 = 0x90
1001c7f0  void* s
1001c7f0  __builtin_memset(&s, c: 0, n: 0x98)
1001c7fb  char var_4c0[0x90]
1001c7fb  StrCopyFixed(&var_4c0, arg1, var_570_2)
1001c7fb  
1001c817  if (j_sub_10041f60(&var_4c0, &s) == 0)
1001c828      data_10063fe8(3, "couldn't find %s\n", &var_4c0)
1001c83d      return 0
1001c83d  
1001c84d  void* var_554
1001c84d  char var_550[0x90]
1001c84d  char* eax_6 = j_sub_1003de60(&var_550, s, var_554)
1001c84d  
1001c859  if (eax_6 == 0)
1001c86a      data_10063fe8(3, "counldn't load %s\n", &var_4c0)
1001c87f      return 0
1001c87f  
1001c887  data_100669b4 = 0
1001c89d  char var_430[0x430]
1001c89d  
1001c89d  if (j_sub_1003d580(eax_6, &var_430) != 0)
1001c8a3      while (true)
1001c8a3          char* esi_1 = "soundinfo"
1001c8a8          char (* eax_9)[0x430] = &var_430
1001c8af          int32_t eax_11
1001c8af          
1001c8af          while (true)
1001c8af              char edx_2 = *eax_9
1001c8b3              char temp0_1 = *esi_1
1001c8b3              bool c_1 = edx_2 u< temp0_1
1001c8b3              
1001c8b5              if (edx_2 == temp0_1)
1001c8b9                  if (edx_2 == 0)
1001c8cf                      eax_11 = 0
1001c8d1                      break
1001c8d1                  
1001c8bb                  edx_2 = (*eax_9)[1]
1001c8c0                  char temp3_1 = esi_1[1]
1001c8c0                  c_1 = edx_2 u< temp3_1
1001c8c0                  
1001c8c3                  if (edx_2 == temp3_1)
1001c8c5                      eax_9 = &(*eax_9)[2]
1001c8c8                      esi_1 = &esi_1[2]
1001c8c8                      
1001c8cd                      if (edx_2 != 0)
1001c8cd                          continue
1001c8cd                      
1001c8cf                      eax_11 = 0
1001c8d1                      break
1001c8d1              
1001c8d3              bool c_2 = unimplemented  {sbb eax, eax}
1001c8d5              eax_11 = sbb.d(sbb.d(eax_9, eax_9, c_1), 0xffffffff, c_2)
1001c8d5              break
1001c8d5          
1001c8da          void* var_570_10
1001c8da          
1001c8da          if (eax_11 != 0)
1001c9b6              char (* var_56c_14)[0x430] = &var_430
1001c9b7              var_570_10 = "unknown definition %s\n"
1001c8da          else
1001c8e0              int32_t edx_3 = data_100669b4
1001c8e0              
1001c8e8              if (edx_3 s>= ebx)
1001c991                  int32_t var_56c_12 = ebx
1001c992                  var_570_10 = "more than %d sound infos defined…"
1001c8e8              else
1001c904                  int32_t ecx_4
1001c904                  int32_t edi_4
1001c904                  edi_4, ecx_4 = __memfill_u32(edx_3 * 0xb0 + data_100669b8, eax_11, 0x2c)
1001c904                  
1001c92d                  if (j_sub_10040ad0(eax_6, &data_1005c138, 
1001c92d                          data_100669b4 * 0xb0 + data_100669b8) == 0)
1001c99a                      j_sub_1003e000(eax_6)
1001c9ae                      return 0
1001c9ae                  
1001c935                  data_100669b4 += 1
1001c935                  
1001c94d                  if (j_sub_1003d580(eax_6, &var_430) == 0)
1001c94d                      break
1001c94d                  
1001c94d                  continue
1001c94d          
1001c9bd          j_sub_10039200(eax_6, var_570_10)
1001c9c3          j_sub_1003e000(eax_6)
1001c9d7          return 0
1001c9d7  
1001c954  j_sub_1003e000(eax_6)
1001c954  
1001c962  if (var_554 != 0)
1001c978      data_10063fe8(1, "loaded %s\%s\n", &var_550, arg1)
1001c990      return 1
1001c990  
1001c9e7  data_10063fe8(1, "loaded %s\n", &var_4c0)
1001c9ff  return 1

1001ca00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ca20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ca40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ca60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ca80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001caa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001cab0    int32_t sub_1001cab0()

1001cac9  int16_t x87control
1001cac9  int32_t esi = __ftol(x87control, j_sub_10038a90("max_aassounds", &data_1005c268))
1001cac9  
1001cad5  if (esi s< 0 || esi s> 0x10000)
1001cade      data_10063fe8(3, "max_aassounds out of range [0, 6…")
1001caee      esi = 0x100
1001caf3      j_sub_10038ac0("max_aassounds", &data_1005c268)
1001caf3  
1001cafb  void* eax_1 = data_100669c4
1001cafb  
1001cb02  if (eax_1 != 0)
1001cb05      j_sub_100390b0(eax_1)
1001cb05  
1001cb13  int32_t edi_1 = esi * 0x34
1001cb17  void* eax_3 = j_sub_10038f90(edi_1)
1001cb1c  data_100669c4 = eax_3
1001cb21  *(eax_3 + 0x2c) = 0
1001cb28  void* eax_4 = data_100669c4
1001cb33  *(eax_4 + 0x30) = eax_4 + 0x34
1001cb33  
1001cb3c  if (esi - 1 s> 1)
1001cb3f      int32_t eax_5 = 0x34
1001cb44      int32_t i_1 = esi - 2
1001cb67      int32_t i
1001cb67      
1001cb67      do
1001cb47          int32_t ecx_2 = data_100669c4
1001cb51          *(eax_5 + ecx_2 + 0x2c) = eax_5 + ecx_2 - 0x34
1001cb55          int32_t ecx_3 = data_100669c4
1001cb5f          *(eax_5 + ecx_3 + 0x30) = eax_5 + ecx_3 + 0x34
1001cb63          eax_5 += 0x34
1001cb66          i = i_1
1001cb66          i_1 -= 1
1001cb67      while (i != 1)
1001cb67  
1001cb6a  int32_t eax_6 = data_100669c4
1001cb7a  *(edi_1 + eax_6 - 8) = eax_6 + ((esi + ((esi * 3 - 6) << 2) - 2) << 2)
1001cb7e  int32_t result = data_100669c4
1001cb83  *(edi_1 + result - 4) = 0
1001cb92  data_100669c8 = data_100669c4
1001cb99  return result

1001cb9a                                                                                90 90 90 90 90 90                            ......
1001cba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001cbc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001cbe0    void* sub_1001cbe0()

1001cbe0  void* result = data_100669c8
1001cbe0  
1001cbe7  if (result != 0)
1001cbe9      void* ecx_1 = *(result + 0x30)
1001cbee      data_100669c8 = ecx_1
1001cbee      
1001cbf4      if (ecx_1 != 0)
1001cbf6          *(ecx_1 + 0x2c) = 0
1001cbf6  
1001cbfd  return result

1001cbfe                                                                                            90 90                                ..
1001cc00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001cc10    void* sub_1001cc10(void* arg1)

1001cc10  void* ecx_1 = data_100669c8
1001cc10  
1001cc1c  if (ecx_1 != 0)
1001cc1e      *(ecx_1 + 0x2c) = arg1
1001cc1e  
1001cc21  *(arg1 + 0x2c) = 0
1001cc2e  *(arg1 + 0x30) = data_100669c8
1001cc31  data_100669c8 = arg1
1001cc36  return arg1

1001cc37                                                                       90 90 90 90 90 90 90 90 90                         .........
1001cc40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001cc50    void sub_1001cc50(void* arg1)

1001cc50  void* i = data_100669d0
1001cc56  void* i_1 = nullptr
1001cc56  
1001cc5f  for (; i != 0; i = *(i + 0x2c))
1001cc61      long double x87_r7_1 = fconvert.t(*(i + 4))
1001cc64      long double temp0_1 = fconvert.t(*(arg1 + 4))
1001cc64      x87_r7_1 - temp0_1
1001cc64      
1001cc6c      if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
1001cc6c              | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1001cc6c              | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1001cc6c          break
1001cc6c      
1001cc6e      i_1 = i
1001cc6e  
1001cc79  *(arg1 + 0x30) = i_1
1001cc7c  *(arg1 + 0x2c) = i
1001cc7c  
1001cc7f  if (i_1 == 0)
1001cc86      data_100669d0 = arg1
1001cc7f  else
1001cc81      *(i_1 + 0x2c) = arg1
1001cc81  
1001cc8e  if (i != 0)
1001cc90      *(i + 0x30) = arg1
1001cc94      return 
1001cc94  
1001cc95  data_100669cc = arg1

1001cc9d                                                                                         90 90 90                               ...
1001cca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001ccc0    void* sub_1001ccc0(void* arg1)

1001ccc4  void* ecx = *(arg1 + 0x2c)
1001ccc4  
1001ccc9  if (ecx == 0)
1001ccd6      data_100669cc = *(arg1 + 0x30)
1001ccc9  else
1001ccce      *(ecx + 0x30) = *(arg1 + 0x30)
1001ccce  
1001ccdc  void* ecx_2 = *(arg1 + 0x30)
1001ccdc  
1001cce1  if (ecx_2 != 0)
1001cce6      *(ecx_2 + 0x2c) = *(arg1 + 0x2c)
1001cce9      return arg1
1001cce9  
1001ccea  int32_t eax = *(arg1 + 0x2c)
1001cced  data_100669d0 = eax
1001ccf2  return eax

1001ccf3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1001cd00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001cd10    void sub_1001cd10(float* arg1)

1001cd10  float* i = data_100669d8
1001cd16  float* i_1 = nullptr
1001cd16  
1001cd1f  for (; i != 0; i = i[0xb])
1001cd21      long double x87_r7_1 = fconvert.t(*i)
1001cd23      long double temp0_1 = fconvert.t(*arg1)
1001cd23      x87_r7_1 - temp0_1
1001cd23      
1001cd2a      if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
1001cd2a              | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1001cd2a              | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1001cd2a          break
1001cd2a      
1001cd2c      i_1 = i
1001cd2c  
1001cd37  arg1[0xc] = i_1
1001cd3a  arg1[0xb] = i
1001cd3a  
1001cd3d  if (i_1 == 0)
1001cd44      data_100669d8 = arg1
1001cd3d  else
1001cd3f      i_1[0xb] = arg1
1001cd3f  
1001cd4c  if (i != 0)
1001cd4e      i[0xc] = arg1
1001cd52      return 
1001cd52  
1001cd53  data_100669d4 = arg1

1001cd5b                                                                                   90 90 90 90 90                             .....
1001cd60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001cd80    void* sub_1001cd80(void* arg1)

1001cd84  void* ecx = *(arg1 + 0x2c)
1001cd84  
1001cd89  if (ecx == 0)
1001cd96      data_100669d4 = *(arg1 + 0x30)
1001cd89  else
1001cd8e      *(ecx + 0x30) = *(arg1 + 0x30)
1001cd8e  
1001cd9c  void* ecx_2 = *(arg1 + 0x30)
1001cd9c  
1001cda1  if (ecx_2 != 0)
1001cda6      *(ecx_2 + 0x2c) = *(arg1 + 0x2c)
1001cda9      return arg1
1001cda9  
1001cdaa  int32_t eax = *(arg1 + 0x2c)
1001cdad  data_100669d8 = eax
1001cdb2  return eax

1001cdb3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1001cdc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001cdd0    void sub_1001cdd0(int32_t arg1, int32_t arg2)

1001cdd1  void* esi = data_100669cc
1001cdd1  
1001cdd9  if (esi != 0)
1001cdeb      while (*(esi + 0x18) != arg1 || *(esi + 0x20) != arg2)
1001cded          esi = *(esi + 0x30)
1001cded          
1001cdf2          if (esi == 0)
1001cdf5              return 
1001cdf5      
1001cdf7      j_sub_1001ccc0(esi)
1001cdfd      j_sub_1001cc10(esi)

1001ce07                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................

1001ce20    int32_t sub_1001ce20(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, float arg7)

1001ce20  int32_t* eax_10 = data_100669a8
1001ce20  
1001ce37  if (arg4 s< 0 || arg4 s>= *eax_10)
1001cf34      data_10063fe8(4, "sound index %d out of range [0, …", arg4, *eax_10)
1001cf46      return 0x20
1001cf46  
1001ce3d  int32_t eax = data_100669c0
1001ce3d  
1001ce44  if (eax == 0)
1001ce4d      data_10063fe8(1, "no soundindex to soundinfo table…")
1001ce5c      return 0
1001ce5c  
1001ce63  if (arg4 s< data_100669bc)
1001ce69      void* ebx_1 = *(eax + (arg4 << 2))
1001ce69      
1001ce6e      if (ebx_1 == 0)
1001ce76          return 0
1001ce76      
1001ce7e      void* i
1001ce7e      
1001ce7e      for (i = data_100669cc; i != 0; i = *(i + 0x30))
1001ce7e      
1001ce87      long double x87_r7_1 = fconvert.t(arg7)
1001ce8b      long double temp0_1 = fconvert.t(0f)
1001ce8b      x87_r7_1 - temp0_1
1001ce95      i.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
1001ce95          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1001ce95          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
1001ce95      
1001ce9a      if ((i:1.b & 0x40) != 0)
1001ce9e          j_sub_1001cdd0(arg2, arg4)
1001ce9e      
1001cea6      float* eax_3 = j_sub_1001cbe0()
1001cea6      
1001ceaf      if (eax_3 == 0)
1001ceb8          data_10063fe8(3, "empty sound heap\n")
1001cec7          return 0
1001cec7      
1001ced1      *eax_3 = fconvert.s(j_sub_1000e120() + fconvert.t(arg7))
1001cee4      eax_3[1] =
1001cee4          fconvert.s(j_sub_1000e120() + fconvert.t(*(ebx_1 + 0x54)) + fconvert.t(arg7))
1001cee9      eax_3[2] = *arg1
1001cef3      eax_3[3] = arg1[1]
1001cefd      eax_3[4] = arg1[2]
1001cf04      eax_3[5] = 0
1001cf0b      eax_3[6] = arg2
1001cf0e      eax_3[7] = arg3
1001cf11      eax_3[8] = arg4
1001cf14      eax_3[9] = arg5
1001cf17      eax_3[0xa] = arg6
1001cf1a      j_sub_1001cd10(eax_3)
1001cf1a  
1001cf28  return 0

1001cf47                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
1001cf60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001cf80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001cfa0    void sub_1001cfa0(float arg1)

1001cfa1  void* i_2 = data_100669cc
1001cfa1  
1001cfaa  if (i_2 != 0)
1001cfd0      void* i
1001cfd0      
1001cfd0      do
1001cfac          long double x87_r7_1 = fconvert.t(*(i_2 + 4))
1001cfaf          long double temp0_1 = fconvert.t(arg1)
1001cfaf          x87_r7_1 - temp0_1
1001cfaf          
1001cfb8          if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
1001cfb8                  | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1001cfb8                  | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1001cfb8              break
1001cfb8          
1001cfba          i = *(i_2 + 0x30)
1001cfbe          j_sub_1001ccc0(i_2)
1001cfc4          j_sub_1001cc10(i_2)
1001cfcc          i_2 = i
1001cfd0      while (i != 0)
1001cfd0  
1001cfd2  float* i_3 = data_100669d4
1001cfd2  
1001cfda  if (i_3 != 0)
1001d00c      float* i_1
1001d00c      
1001d00c      do
1001cfdc          long double x87_r7_2 = fconvert.t(*i_3)
1001cfde          long double temp1_1 = fconvert.t(arg1)
1001cfde          x87_r7_2 - temp1_1
1001cfe2          i_1 = i_3[0xc]
1001cfe2          
1001cfea          if ((((x87_r7_2 < temp1_1 ? 1 : 0) << 8
1001cfea                  | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
1001cfea                  | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1001cfed              j_sub_1001cd80(i_3)
1001cffa              j_sub_1001cdd0(i_3[6], i_3[8])
1001d000              j_sub_1001cc50(i_3)
1001d000          
1001d00a          i_3 = i_1
1001d00c      while (i_1 != 0)

1001d011                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1001d020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001d040    int32_t sub_1001d040(void* arg1)

1001d046  if (arg1 != 0)
1001d051      return *(arg1 + 0x30)
1001d051  
1001d04d  return data_100669cc

1001d052                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1001d060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001d070    int32_t sub_1001d070(void* arg1)

1001d080  return *(data_100669c0 + (*(arg1 + 0x20) << 2))

1001d081     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

1001d0a0    long double sub_1001d0a0(float* arg1, void* arg2)

1001d0ba  if (j_sub_10005c90(arg1, arg2 + 8) == 0)
1001d0c5      return fconvert.t(0f)
1001d0c5  
1001d0cf  void* eax_2 = *(data_100669c0 + (*(arg2 + 0x20) << 2))
1001d0cf  
1001d0d4  if (eax_2 == 0)
1001d0df      return fconvert.t(0f)
1001d0df  
1001d0e2  fconvert.t(*(arg2 + 8)) - fconvert.t(*arg1)
1001d0e7  fconvert.t(*(arg2 + 0xc)) - fconvert.t(arg1[1])
1001d0f3  fconvert.t(*(eax_2 + 0x50)) * fconvert.t(*(arg2 + 0x24))
1001d111  return fconvert.t(*(arg2 + 0x10)) - fconvert.t(arg1[2])

1001d112                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1001d120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001d140    int32_t* sub_1001d140()

1001d140  void* eax_8 = data_100669c0
1001d140  
1001d147  if (eax_8 != 0)
1001d14a      j_sub_100390b0(eax_8)
1001d14a  
1001d15f  int32_t s = j_sub_10038f90(*data_100669a8 << 2)
1001d164  int32_t* edx = data_100669a8
1001d16c  data_100669c0 = s
1001d179  int32_t ecx_3 = *edx << 2
1001d17e  int32_t ebx = 0
1001d18a  __builtin_memset(s: __builtin_memset(s, c: 0, n: ecx_3 u>> 2 << 2), c: 0, n: ecx_3 & 3)
1001d18c  int32_t* eax_1 = data_100669a8
1001d18c  
1001d194  if (*eax_1 s<= 0)
1001d215      data_100669bc = *eax_1
1001d21c      return eax_1
1001d21c  
1001d205  int32_t ecx_13
1001d205  
1001d205  do
1001d19e      if (*(eax_1[1] + (ebx << 2)) != 0)
1001d1a6          int32_t i = 0
1001d1a6          
1001d1aa          if (data_100669b4 s> 0)
1001d1ac              void* edi_2 = nullptr
1001d1ac              
1001d1de              do
1001d1c9                  if (j_sub_10043c10(edi_2 + data_100669b8, *(eax_1[1] + (ebx << 2))) == 0)
1001d1f8                      *(data_100669c0 + (ebx << 2)) = i * 0xb0 + data_100669b8
1001d1fb                      eax_1 = data_100669a8
1001d1fb                      break
1001d1fb                  
1001d1d0                  i += 1
1001d1d1                  edi_2 += 0xb0
1001d1d9                  eax_1 = data_100669a8
1001d1de              while (i s< data_100669b4)
1001d1de      
1001d200      ecx_13 = *eax_1
1001d202      ebx += 1
1001d205  while (ebx s< ecx_13)
1001d205  
1001d20b  data_100669bc = ecx_13
1001d211  return ecx_13

1001d21d                                                                                         90 90 90                               ...
1001d220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001d240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001d260    int32_t sub_1001d260()

1001d260  j_sub_1001cab0()
1001d27d  return j_sub_1001c760(j_sub_10038a60("soundconfig", "sounds.c"))

1001d27e                                                                                            90 90                                ..
1001d280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001d290    int32_t sub_1001d290() __pure

1001d290  return 

1001d291                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1001d2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001d2b0    int32_t sub_1001d2b0()

1001d2b0  data_100644a0 = 0

1001d2bb                                                                                   90 90 90 90 90                             .....
1001d2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001d2d0    int32_t sub_1001d2d0(int32_t arg1 @ esi, int32_t arg2 @ edi, void* arg3)

1001d2d6  int32_t __saved_ebx_1
1001d2d6  int32_t __saved_ebx = __saved_ebx_1
1001d2d7  int32_t __saved_ebp = 0x32
1001d2eb  double var_588_1 = fconvert.d(j_sub_1000e120())
1001d2fb  int32_t var_58c_1 = j_sub_10028f30(*(arg3 + 4))
1001d2fc  char* var_590 = "%s at %1.1f switched more than %…"
1001d302  void var_578
1001d302  sub_10044c56(&var_578, "%s at %1.1f switched more than %…")
1001d307  int32_t i_1 = data_100644a0
1001d307  
1001d312  if (i_1 s> 0)
1001d314      int32_t __saved_ebp_3
1001d314      int32_t __saved_ebp_1 = __saved_ebp_3
1001d315      var_588_1:4.d = arg1
1001d316      var_588_1.d = arg2
1001d317      int32_t edx_1 = 0x10064a80
1001d34e      int32_t i
1001d34e      
1001d34e      do
1001d31c          int32_t edi = edx_1
1001d31e          int32_t j = 0xffffffff
1001d31e          
1001d327          while (j != 0)
1001d327              bool cond:0_1 = 0 != *edi
1001d327              edi += 1
1001d327              j -= 1
1001d327              
1001d327              if (not(cond:0_1))
1001d327                  break
1001d327          
1001d329          int32_t ecx_1 = not.d(j)
1001d32d          edx_1 += 0x90
1001d335          void* edi_2 = &var_578
1001d339          int32_t j_1 = 0xffffffff
1001d339          
1001d33c          while (j_1 != 0)
1001d33c              bool cond:1_1 = 0 != *edi_2
1001d33c              edi_2 += 1
1001d33c              j_1 -= 1
1001d33c              
1001d33c              if (not(cond:1_1))
1001d33c                  break
1001d33c          
1001d344          int32_t esi_1
1001d344          int32_t edi_4
1001d344          edi_4, esi_1 =
1001d344              __builtin_memcpy(dest: edi_2 - 1, src: edi - ecx_1, n: ecx_1 u>> 2 << 2)
1001d34b          i = i_1
1001d34b          i_1 -= 1
1001d34c          __builtin_memcpy(dest: edi_4, src: esi_1, n: ecx_1 & 3)
1001d34e      while (i != 1)
1001d34e  
1001d357  void* __saved_ebp_2 = &var_578
1001d358  var_588_1:4.d = 4
1001d36a  return data_10063fe8()

1001d36b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
1001d380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001d3a0    int32_t sub_1001d3a0(void* arg1, int32_t arg2, int32_t arg3)

1001d3a8  int32_t var_4 = arg3
1001d3a9  int32_t var_8 = arg2
1001d3b9  double var_10 = fconvert.d(j_sub_1000e120())
1001d3c5  int32_t var_14_1 = j_sub_10028f30(*(arg1 + 4))
1001d3dd  sub_10044c56(data_100644a0 * 0x90 + 0x10064a80, "%s at %2.1f entered %s: %s\n")
1001d3ea  int32_t result = data_100644a0 + 1
1001d3eb  data_100644a0 = result
1001d3f0  return result

1001d3f1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1001d400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001d420    void* sub_1001d420(void* arg1)

1001d459  int32_t var_f8
1001d459  void var_7c
1001d459  __builtin_memcpy(dest: &var_f8, 
1001d459      src: j_sub_1000abe0(&var_7c, j_sub_10028ea0(arg1 + 0x1124) + 1), n: 0x7c)
1001d459  
1001d461  if (var_f8 != 0)
1001d46c      float var_e8
1001d46c      int32_t eax_5 = j_sub_1001ae60(&var_e8)
1001d46c      
1001d47a      if (eax_5 != 0 && j_sub_10011040(eax_5) != 0)
1001d49d          *(arg1 + 0x1144) = var_e8
1001d4ab          float var_e4
1001d4ab          *(arg1 + 0x1148) = var_e4
1001d4b1          float var_e0
1001d4b1          *(arg1 + 0x114c) = var_e0
1001d4bc          int32_t ebp = j_sub_10028ea0(arg1 + 0x10f0) + 1
1001d4db          __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_7c, ebp), n: 0x7c)
1001d4e3          float var_120
1001d4e3          
1001d4e3          if (var_f8 != 0)
1001d4f1              float* var_140_2 = &var_120
1001d4f2              float var_d0
1001d4f2              var_120 = fconvert.s(fconvert.t(var_e8) - fconvert.t(var_d0))
1001d4fe              float var_cc
1001d4fe              float var_11c_1 = fconvert.s(fconvert.t(var_e4) - fconvert.t(var_cc))
1001d50a              float var_c8
1001d50a              float var_118_1 = fconvert.s(fconvert.t(var_e0) - fconvert.t(var_c8))
1001d50e              long double st0_1 = j_sub_10043500(var_140_2)
1001d513              long double temp0_1 = fconvert.t(0.10000000000000001)
1001d513              st0_1 - temp0_1
1001d513              
1001d521              if ((((st0_1 < temp0_1 ? 1 : 0) << 8
1001d521                      | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
1001d521                      | (st0_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1001d52f                  *(arg1 + 0x1138) = var_120
1001d535                  *(arg1 + 0x113c) = var_11c_1
1001d53b                  *(arg1 + 0x1140) = var_118_1
1001d53b          
1001d54d          float var_12c
1001d54d          j_sub_10041790(arg1 + 0x1138, &var_12c)
1001d556          float var_128
1001d556          long double x87_r7_9 = fconvert.t(var_128) + fconvert.t(*(arg1 + 0x1134))
1001d55f          var_12c = 0f
1001d56f          float var_128_1 = fconvert.s(j_sub_10042d40(fconvert.s(x87_r7_9)))
1001d581          float var_124 = 0f
1001d589          j_sub_100426b0(&var_12c, &var_120, nullptr, nullptr)
1001d59a          float edx_2 = *(arg1 + 0x1148)
1001d5a0          long double x87_r7_12 = fconvert.t(*(arg1 + 0x114c)) + fconvert.t(1f)
1001d5aa          float var_114 = *(arg1 + 0x1144)
1001d5b9          float var_10c = fconvert.s(x87_r7_12)
1001d5c1          float var_104
1001d5c1          j_sub_10043570(&var_120, 400f, &var_104)
1001d5c6          int32_t var_160 = 0
1001d5c8          char var_164 = 0x7c
1001d5ca          float var_168 = 0.100000001f
1001d5cf          int32_t var_16c = 2
1001d5d5          int32_t var_170 = 1
1001d5d7          float* var_174 = &var_104
1001d5f0          int32_t eax_14
1001d5f0          int80_t st0_3
1001d5f0          eax_14, st0_3 = j_sub_1000f840(&var_7c, 0xffffffff, &var_114, 2, 1, 
1001d5f0              &data_100631cc, var_174, var_170, var_16c, var_168, var_164, var_160)
1001d606          __builtin_memcpy(dest: &var_7c, src: eax_14, n: 0x50)
1001d610          char var_3c
1001d610          long double x87_r6
1001d610          
1001d610          if ((var_3c & 0x38) == 0)
1001d628              x87_r6 = fconvert.t(var_124)
1001d610          else
1001d61a              x87_r6 = fconvert.t(var_10c)
1001d61e              var_12c = var_114
1001d622              var_128_1 = edx_2
1001d622          
1001d630          float edx_4 = var_12c
1001d634          *(arg1 + 0x115c) = eax_5
1001d63e          *(arg1 + 0x1158) = fconvert.s(x87_r6)
1001d644          *(arg1 + 0x1154) = var_128_1
1001d64f          *(arg1 + 0x1178) = ebp
1001d655          __builtin_memcpy(dest: arg1 + 0x1160, 
1001d655              src: "\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\x41\x00\x00\x00\x41\x00\x00\x00\x41", 
1001d655              n: 0x18)
1001d687          *(arg1 + 0x1150) = edx_4
1001d687  
1001d6a0  return arg1 + 0x1150

1001d6a1     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1001d6c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001d6e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001d700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001d720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001d740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001d760    void* sub_1001d760(void* arg1, float arg2, int32_t arg3)

1001d771  int32_t eax = *(arg1 + 0x10a4)
1001d78b  float var_22c
1001d78b  int32_t var_210
1001d78b  float var_200
1001d78b  float var_1fc
1001d78b  float var_1f8
1001d78b  void var_194
1001d78b  void var_7c
1001d78b  
1001d78b  if (eax == 1 && arg3 == 0)
1001d791      long double x87_r7_1 = fconvert.t(*(arg1 + 0x10e4))
1001d797      long double temp0_1 = fconvert.t(0f)
1001d797      x87_r7_1 - temp0_1
1001d79d      eax.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
1001d79d          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1001d79d          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
1001d79d      
1001d7a2      if ((eax:1.b & 0x40) == 0)
1001d7a4          long double st0_1 = j_sub_1000e120()
1001d7a9          long double temp4_1 = fconvert.t(*(arg1 + 0x10e4))
1001d7a9          st0_1 - temp4_1
1001d7af          eax.w = (st0_1 < temp4_1 ? 1 : 0) << 8
1001d7af              | (is_unordered.t(st0_1, temp4_1) ? 1 : 0) << 0xa
1001d7af              | (st0_1 == temp4_1 ? 1 : 0) << 0xe
1001d7af          
1001d7b4          if ((eax:1.b & 0x41) == 0)
1001d7c3              int32_t var_244_1 = 0
1001d7d5              int32_t var_248_2 = j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_194)
1001d7dc              j_sub_1002e510(arg1 + 0xf8c, "help_start")
1001d7e8              j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001d7f0              *(arg1 + 0x10e4) = 0
1001d7f0      
1001d7f6      long double st0_2 = j_sub_1000e120()
1001d7fb      long double temp3_1 = fconvert.t(*(arg1 + 0x10e8))
1001d7fb      st0_2 - temp3_1
1001d801      eax.w = (st0_2 < temp3_1 ? 1 : 0) << 8
1001d801          | (is_unordered.t(st0_2, temp3_1) ? 1 : 0) << 0xa
1001d801          | (st0_2 == temp3_1 ? 1 : 0) << 0xe
1001d801      
1001d806      if ((eax:1.b & 0x41) == 0)
1001d808          *(arg1 + 0x10a4) = 0
1001d808      
1001d813      long double x87_r7_5 = j_sub_1000e120() - fconvert.t(10f)
1001d819      long double temp8_1 = fconvert.t(*(arg1 + 0x10ec))
1001d819      x87_r7_5 - temp8_1
1001d81f      eax.w = (x87_r7_5 < temp8_1 ? 1 : 0) << 8
1001d81f          | (is_unordered.t(x87_r7_5, temp8_1) ? 1 : 0) << 0xa
1001d81f          | (x87_r7_5 == temp8_1 ? 1 : 0) << 0xe
1001d81f      
1001d824      if ((eax:1.b & 0x41) == 0)
1001d826          *(arg1 + 0x10a4) = 0
1001d826      
1001d83b      int32_t eax_3 = j_sub_1000abe0(&var_7c, *(arg1 + 0x10a8))
1001d840      int32_t edx_2 = *(arg1 + 0x10a8)
1001d851      __builtin_memcpy(dest: &var_210, src: eax_3, n: 0x7c)
1001d851      
1001d875      if (j_sub_1000b750(*(arg1 + 8), arg1 + 0x6b0, arg1 + 0x1080, 360f, edx_2) == 0)
1001d8c5          *(arg1 + 0x10ec) = fconvert.s(j_sub_1000e120())
1001d8cf          label_1001d8cf:
1001d8cf          
1001d8cf          if (var_210 != 0)
1001d8d6              int32_t eax_7 = j_sub_1001ae60(&var_200)
1001d8d6              
1001d8e2              if (eax_7 != 0 && j_sub_10011040(eax_7) != 0)
1001d8f5                  int32_t edx_4 = *(arg1 + 0x10a8)
1001d8ff                  *(arg1 + 0x10ac) = var_200
1001d90a                  *(arg1 + 0x10d4) = edx_4
1001d914                  *(arg1 + 0x10bc) = 0xc1000000
1001d91a                  *(arg1 + 0x10c0) = 0xc1000000
1001d920                  *(arg1 + 0x10c4) = 0xc1000000
1001d92b                  *(arg1 + 0x10b8) = eax_7
1001d931                  *(arg1 + 0x10b0) = var_1fc
1001d937                  *(arg1 + 0x10b4) = var_1f8
1001d93d                  *(arg1 + 0x10c8) = 0x41000000
1001d943                  *(arg1 + 0x10cc) = 0x41000000
1001d949                  *(arg1 + 0x10d0) = 0x41000000
1001d949          
1001d961          return arg1 + 0x10ac
1001d961      
1001d885      float* var_244_3 = &var_22c
1001d886      var_22c = fconvert.s(fconvert.t(var_200) - fconvert.t(*(arg1 + 0x694)))
1001d894      float var_228_1 = fconvert.s(fconvert.t(var_1fc) - fconvert.t(*(arg1 + 0x698)))
1001d8a2      float var_224_1 = fconvert.s(fconvert.t(var_1f8) - fconvert.t(*(arg1 + 0x69c)))
1001d8a6      long double st0_4 = j_sub_10043500(var_244_3)
1001d8ab      long double temp26_1 = fconvert.t(100f)
1001d8ab      st0_4 - temp26_1
1001d8ab      
1001d8b9      if ((((st0_4 < temp26_1 ? 1 : 0) << 8
1001d8b9              | (is_unordered.t(st0_4, temp26_1) ? 1 : 0) << 0xa
1001d8b9              | (st0_4 == temp26_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
1001d8b9          goto label_1001d8cf
1001d8b9      
1001e2a5      j_sub_10034af0(arg1 + 0xb40)
1001e2b9      return 0
1001e2b9  
1001d96d  void* result
1001d96d  float var_21c
1001d96d  float var_218
1001d96d  float var_214
1001d96d  
1001d96d  if (eax == 2 && arg3 == 0)
1001d973      long double x87_r7_14 = fconvert.t(*(arg1 + 0x10e4))
1001d979      long double temp2_1 = fconvert.t(0f)
1001d979      x87_r7_14 - temp2_1
1001d97f      eax.w = (x87_r7_14 < temp2_1 ? 1 : 0) << 8
1001d97f          | (is_unordered.t(x87_r7_14, temp2_1) ? 1 : 0) << 0xa
1001d97f          | (x87_r7_14 == temp2_1 ? 1 : 0) << 0xe
1001d97f      
1001d984      if ((eax:1.b & 0x40) == 0)
1001d986          long double st0_6 = j_sub_1000e120()
1001d98b          long double temp7_1 = fconvert.t(*(arg1 + 0x10e4))
1001d98b          st0_6 - temp7_1
1001d991          eax.w = (st0_6 < temp7_1 ? 1 : 0) << 8
1001d991              | (is_unordered.t(st0_6, temp7_1) ? 1 : 0) << 0xa
1001d991              | (st0_6 == temp7_1 ? 1 : 0) << 0xe
1001d991          
1001d996          if ((eax:1.b & 0x41) == 0)
1001d9a5              int32_t var_244_6 = 0
1001d9b7              int32_t var_248_5 = j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_194)
1001d9be              j_sub_1002e510(arg1 + 0xf8c, "accompany_start")
1001d9ca              j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001d9d2              *(arg1 + 0x10e4) = 0
1001d9d2      
1001d9d8      long double st0_7 = j_sub_1000e120()
1001d9dd      long double temp6_1 = fconvert.t(*(arg1 + 0x10e8))
1001d9dd      st0_7 - temp6_1
1001d9e3      eax.w = (st0_7 < temp6_1 ? 1 : 0) << 8
1001d9e3          | (is_unordered.t(st0_7, temp6_1) ? 1 : 0) << 0xa
1001d9e3          | (st0_7 == temp6_1 ? 1 : 0) << 0xe
1001d9e3      
1001d9e8      if ((eax:1.b & 0x41) == 0)
1001d9f7          int32_t var_244_7 = 0
1001da09          int32_t var_248_7 = j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_194)
1001da10          j_sub_1002e510(arg1 + 0xf8c, "accompany_stop")
1001da1c          j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001da24          *(arg1 + 0x10a4) = 0
1001da24      
1001da39      int32_t eax_14 = j_sub_1000abe0(&var_7c, *(arg1 + 0x10a8))
1001da3e      int32_t edx_8 = *(arg1 + 0x10a8)
1001da4f      __builtin_memcpy(dest: &var_210, src: eax_14, n: 0x7c)
1001da73      int32_t eax_16
1001da73      
1001da73      if (j_sub_1000b750(*(arg1 + 8), arg1 + 0x6b0, arg1 + 0x1080, 360f, edx_8) != 0)
1001da7e          *(arg1 + 0x10ec) = fconvert.s(j_sub_1000e120())
1001da98          float* var_244_9 = &var_22c
1001da99          var_22c = fconvert.s(fconvert.t(var_200) - fconvert.t(*(arg1 + 0x694)))
1001daa7          float var_228_2 = fconvert.s(fconvert.t(var_1fc) - fconvert.t(*(arg1 + 0x698)))
1001dab5          float var_224_2 = fconvert.s(fconvert.t(var_1f8) - fconvert.t(*(arg1 + 0x69c)))
1001dab9          long double st0_9
1001dab9          eax_16, st0_9 = j_sub_10043500(var_244_9)
1001dabe          long double temp25_1 = fconvert.t(*(arg1 + 0x1120))
1001dabe          st0_9 - temp25_1
1001dac7          eax_16.w = (st0_9 < temp25_1 ? 1 : 0) << 8
1001dac7              | (is_unordered.t(st0_9, temp25_1) ? 1 : 0) << 0xa
1001dac7              | (st0_9 == temp25_1 ? 1 : 0) << 0xe
1001dac7          
1001dacc          if ((eax_16:1.b & 1) != 0)
1001dad7              long double x87_r7_26 = j_sub_1000e120() - fconvert.t(5f)
1001dadd              long double temp33_1 = fconvert.t(*(arg1 + 0xb04))
1001dadd              x87_r7_26 - temp33_1
1001dae3              eax_16.w = (x87_r7_26 < temp33_1 ? 1 : 0) << 8
1001dae3                  | (is_unordered.t(x87_r7_26, temp33_1) ? 1 : 0) << 0xa
1001dae3                  | (x87_r7_26 == temp33_1 ? 1 : 0) << 0xe
1001dae3              
1001dae8              if ((eax_16:1.b & 0x41) == 0)
1001dafe                  float var_220_1 =
1001dafe                      fconvert.s(j_sub_1002a690(*(arg1 + 0x688), 0x18, nullptr, 1f))
1001db17                  long double x87_r7_29 =
1001db17                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001db21                  long double x87_r6_2 = fconvert.t(var_220_1) * fconvert.t(*(arg1 + 0x690))
1001db27                  x87_r6_2 - x87_r7_29
1001db29                  int32_t eax_18
1001db29                  eax_18.w = (x87_r6_2 < x87_r7_29 ? 1 : 0) << 8
1001db29                      | (is_unordered.t(x87_r6_2, x87_r7_29) ? 1 : 0) << 0xa
1001db29                      | (x87_r6_2 == x87_r7_29 ? 1 : 0) << 0xe
1001db29                  
1001db2e                  if ((eax_18:1.b & 0x41) == 0)
1001db47                      *(arg1 + 0xb04) = fconvert.s(j_sub_1000e120()
1001db47                          + fconvert.t(var_220_1) * fconvert.t(15f) + fconvert.t(5f))
1001db47              
1001db58              if (j_sub_1000efc0(arg1 + 0x694) != 0)
1001db65                  *(arg1 + 0xb04) = fconvert.s(j_sub_1000e120() - fconvert.t(1f))
1001db65              
1001db70              long double x87_r7_36 = j_sub_1000e120() - fconvert.t(2f)
1001db76              long double temp35_1 = fconvert.t(*(arg1 + 0xb3c))
1001db76              x87_r7_36 - temp35_1
1001db7c              int32_t eax_19
1001db7c              eax_19.w = (x87_r7_36 < temp35_1 ? 1 : 0) << 8
1001db7c                  | (is_unordered.t(x87_r7_36, temp35_1) ? 1 : 0) << 0xa
1001db7c                  | (x87_r7_36 == temp35_1 ? 1 : 0) << 0xe
1001db7c              
1001db81              if ((eax_19:1.b & 0x41) == 0)
1001db87                  long double x87_r7_37 = fconvert.t(*(arg1 + 0xb3c))
1001db8d                  long double temp37_1 = fconvert.t(0f)
1001db8d                  x87_r7_37 - temp37_1
1001db93                  eax_19.w = (x87_r7_37 < temp37_1 ? 1 : 0) << 8
1001db93                      | (is_unordered.t(x87_r7_37, temp37_1) ? 1 : 0) << 0xa
1001db93                      | (x87_r7_37 == temp37_1 ? 1 : 0) << 0xe
1001db93                  
1001db98                  if ((eax_19:1.b & 0x40) == 0)
1001dbf2                      long double st0_16 = j_sub_1000e120()
1001dbf7                      long double temp38_1 = fconvert.t(*(arg1 + 0xb04))
1001dbf7                      st0_16 - temp38_1
1001dbfd                      eax_19.w = (st0_16 < temp38_1 ? 1 : 0) << 8
1001dbfd                          | (is_unordered.t(st0_16, temp38_1) ? 1 : 0) << 0xa
1001dbfd                          | (st0_16 == temp38_1 ? 1 : 0) << 0xe
1001dbfd                      
1001dc02                      if ((eax_19:1.b & 1) == 0)
1001dc27                          long double x87_r7_41 =
1001dc27                              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001dc33                          long double x87_r6_6 =
1001dc33                              fconvert.t(*(arg1 + 0x690)) * fconvert.t(0.29999999999999999)
1001dc39                          x87_r6_6 - x87_r7_41
1001dc3b                          eax_19.w = (x87_r6_6 < x87_r7_41 ? 1 : 0) << 8
1001dc3b                              | (is_unordered.t(x87_r6_6, x87_r7_41) ? 1 : 0) << 0xa
1001dc3b                              | (x87_r6_6 == x87_r7_41 ? 1 : 0) << 0xe
1001dc3b                          
1001dc40                          if ((eax_19:1.b & 0x41) == 0)
1001dc63                              void* var_248_8
1001dc63                              var_248_8.q = fconvert.d(float.t(sub_10045187() & 0x7fff)
1001dc63                                  * fconvert.t(3.05185094e-05f)
1001dc63                                  * fconvert.t(2.8999999999999999))
1001dc66                              int16_t x87control_1
1001dc66                              long double st0_17
1001dc66                              st0_17, x87control_1 = sub_100445e9(var_248_8)
1001dc6e                              int32_t eax_25 = __ftol(x87control_1, st0_17)
1001dc75                              int32_t var_248_12
1001dc75                              int32_t var_244_15
1001dc75                              
1001dc75                              if (eax_25 == 0)
1001dc8d                                  var_244_15 = 0
1001dc8e                                  var_248_12 = *(arg1 + 4)
1001dc75                              else if (eax_25 == 1)
1001dc85                                  var_244_15 = 2
1001dc87                                  var_248_12 = *(arg1 + 4)
1001dc78                              else
1001dc7d                                  var_244_15 = 3
1001dc7f                                  var_248_12 = *(arg1 + 4)
1001dc7f                              
1001dc8f                              j_sub_100371b0(var_248_12, var_244_15)
1001dc02                      else
1001dc08                          j_sub_100373d0(*(arg1 + 4))
1001db98                  else
1001dba0                      j_sub_100371b0(*(arg1 + 4), 1)
1001dbb6                      int32_t var_244_13 = 0
1001dbc7                      int32_t var_248_11 = j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_194)
1001dbce                      j_sub_1002e510(arg1 + 0xf8c, "accompany_arrive")
1001dbda                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001dbe7                      *(arg1 + 0xb3c) = fconvert.s(j_sub_1000e120())
1001dbe7              
1001dc9c              long double x87_r7_47 = j_sub_1000e120() - fconvert.t(2f)
1001dca2              long double temp36_1 = fconvert.t(*(arg1 + 0xb3c))
1001dca2              x87_r7_47 - temp36_1
1001dca8              eax_19.w = (x87_r7_47 < temp36_1 ? 1 : 0) << 8
1001dca8                  | (is_unordered.t(x87_r7_47, temp36_1) ? 1 : 0) << 0xa
1001dca8                  | (x87_r7_47 == temp36_1 ? 1 : 0) << 0xe
1001dca8              
1001dcad              if ((eax_19:1.b & 1) == 0)
1001dcfd                  long double x87_r7_55 =
1001dcfd                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001dd09                  long double x87_r6_8 =
1001dd09                      fconvert.t(*(arg1 + 0x690)) * fconvert.t(0.80000000000000004)
1001dd0f                  x87_r6_8 - x87_r7_55
1001dd11                  int32_t eax_30
1001dd11                  eax_30.w = (x87_r6_8 < x87_r7_55 ? 1 : 0) << 8
1001dd11                      | (is_unordered.t(x87_r6_8, x87_r7_55) ? 1 : 0) << 0xa
1001dd11                      | (x87_r6_8 == x87_r7_55 ? 1 : 0) << 0xe
1001dd11                  
1001dd16                  if ((eax_30:1.b & 0x41) == 0)
1001dd22                      j_sub_10022a60(arg1, &var_21c)
1001dd38                      float* var_250_8 = &var_22c
1001dd39                      var_22c =
1001dd39                          fconvert.s(fconvert.t(var_21c) - fconvert.t(*(arg1 + 0x694)))
1001dd47                      float var_228_4 =
1001dd47                          fconvert.s(fconvert.t(var_218) - fconvert.t(*(arg1 + 0x698)))
1001dd55                      float var_224_4 =
1001dd55                          fconvert.s(fconvert.t(var_214) - fconvert.t(*(arg1 + 0x69c)))
1001dd59                      j_sub_10041790(var_250_8, arg1 + 0x108c)
1001dd5e                      goto label_1001dd61
1001dcad              else
1001dcc0                  float* var_248_13 = &var_22c
1001dcc1                  var_22c = fconvert.s(fconvert.t(var_200) - fconvert.t(*(arg1 + 0x694)))
1001dccf                  float var_228_3 =
1001dccf                      fconvert.s(fconvert.t(var_1fc) - fconvert.t(*(arg1 + 0x698)))
1001dcdd                  float var_224_3 =
1001dcdd                      fconvert.s(fconvert.t(var_1f8) - fconvert.t(*(arg1 + 0x69c)))
1001dce1                  j_sub_10041790(var_248_13, arg1 + 0x108c)
1001dd61                  label_1001dd61:
1001dd61                  unimplemented  {fld st0, dword [ebx+0x1094]}
1001dd67                  unimplemented  {fmul st0, qword [&data_10058018]}
1001dd6d                  *(arg1 + 0x1094) =
1001dd6d                      fconvert.s(unimplemented  {fstp dword [ebx+0x1094], st0})
1001dd6d                  unimplemented  {fstp dword [ebx+0x1094], st0}
1001dd6d              
1001e2a5              j_sub_10034af0(arg1 + 0xb40)
1001e2b9              return 0
1001e2b9      
1001dd7c      if (var_210 != 0)
1001dd88          int32_t esi_9 = j_sub_1001ae60(&var_200)
1001dd88          
1001dd8f          if (esi_9 != 0 && j_sub_10011040(esi_9) != 0)
1001dda2              int32_t ecx_16 = *(arg1 + 0x10a8)
1001dda8              float edx_13 = var_200
1001ddac              *(arg1 + 0x10b0) = var_1fc
1001ddb7              *(arg1 + 0x10d4) = ecx_16
1001ddc1              *(arg1 + 0x10bc) = 0xc1000000
1001ddc7              *(arg1 + 0x10c0) = 0xc1000000
1001ddcd              *(arg1 + 0x10c4) = 0xc1000000
1001ddd8              *(arg1 + 0x10b8) = esi_9
1001ddde              *(arg1 + 0x10ac) = edx_13
1001dde4              *(arg1 + 0x10b4) = var_1f8
1001ddea              *(arg1 + 0x10c8) = 0x41000000
1001ddf0              *(arg1 + 0x10cc) = 0x41000000
1001ddf6              *(arg1 + 0x10d0) = 0x41000000
1001ddf6      
1001ddfc      result = arg1 + 0x10ac
1001de07      long double x87_r7_58 = j_sub_1000e120() - fconvert.t(60f)
1001de0d      long double temp32_1 = fconvert.t(*(arg1 + 0x10ec))
1001de0d      x87_r7_58 - temp32_1
1001de13      eax_16.w = (x87_r7_58 < temp32_1 ? 1 : 0) << 8
1001de13          | (is_unordered.t(x87_r7_58, temp32_1) ? 1 : 0) << 0xa
1001de13          | (x87_r7_58 == temp32_1 ? 1 : 0) << 0xe
1001de13      
1001de18      if ((eax_16:1.b & 0x41) == 0)
1001de2b          int32_t var_244_20 = 0
1001de3d          int32_t var_248_16 = j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_194)
1001de44          j_sub_1002e510(arg1 + 0xf8c, "accompany_cannotfind")
1001de50          j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001de5b          *(arg1 + 0x10a4) = 0
1001d96d  else if (eax != 3)
1001dfd4      label_1001dfd4:
1001dfd4      int32_t eax_43 = *(arg1 + 0x10a4)
1001dfd4      
1001dfdd      if (eax_43 != 6)
1001e2bd          if (eax_43 == 7)
1001e2c3              long double x87_r7_91 = fconvert.t(*(arg1 + 0x10e4))
1001e2c9              long double temp9 = fconvert.t(0f)
1001e2c9              x87_r7_91 - temp9
1001e2cf              eax_43.w = (x87_r7_91 < temp9 ? 1 : 0) << 8
1001e2cf                  | (is_unordered.t(x87_r7_91, temp9) ? 1 : 0) << 0xa
1001e2cf                  | (x87_r7_91 == temp9 ? 1 : 0) << 0xe
1001e2cf              
1001e2d4              if ((eax_43:1.b & 0x40) == 0)
1001e2da                  long double st0_31 = j_sub_1000e120()
1001e2df                  long double temp14_1 = fconvert.t(*(arg1 + 0x10e4))
1001e2df                  st0_31 - temp14_1
1001e2e5                  eax_43.w = (st0_31 < temp14_1 ? 1 : 0) << 8
1001e2e5                      | (is_unordered.t(st0_31, temp14_1) ? 1 : 0) << 0xa
1001e2e5                      | (st0_31 == temp14_1 ? 1 : 0) << 0xe
1001e2e5                  
1001e2ea                  if ((eax_43:1.b & 0x41) == 0)
1001e2f6                      char var_114 = data_1006294c
1001e2f6                      
1001e305                      for (int32_t* i = *(arg1 + 0x11c4); i != 0; i = i[0xf])
1001e307                          int32_t edi_6 = *i
1001e309                          int32_t j = 0xffffffff
1001e309                          
1001e315                          while (j != 0)
1001e315                              bool cond:3_1 = 0 != *edi_6
1001e315                              edi_6 += 1
1001e315                              j -= 1
1001e315                              
1001e315                              if (not(cond:3_1))
1001e315                                  break
1001e315                          
1001e317                          int32_t ecx_24 = not.d(j)
1001e31d                          char* edi_8 = &var_114
1001e321                          int32_t j_1 = 0xffffffff
1001e321                          
1001e324                          while (j_1 != 0)
1001e324                              bool cond:4_1 = 0 != *edi_8
1001e324                              edi_8 = &edi_8[1]
1001e324                              j_1 -= 1
1001e324                              
1001e324                              if (not(cond:4_1))
1001e324                                  break
1001e324                          
1001e32c                          int32_t esi_15
1001e32c                          int32_t edi_10
1001e32c                          edi_10, esi_15 = __builtin_memcpy(dest: edi_8 - 1, 
1001e32c                              src: edi_6 - ecx_24, n: ecx_24 u>> 2 << 2)
1001e335                          __builtin_memcpy(dest: edi_10, src: esi_15, n: ecx_24 & 3)
1001e335                          
1001e33a                          if (i[0xf] != 0)
1001e33c                              char* edi_11 = " to "
1001e341                              int32_t j_2 = 0xffffffff
1001e341                              
1001e34d                              while (j_2 != 0)
1001e34d                                  bool cond:5_1 = 0 != *edi_11
1001e34d                                  edi_11 = &edi_11[1]
1001e34d                                  j_2 -= 1
1001e34d                                  
1001e34d                                  if (not(cond:5_1))
1001e34d                                      break
1001e34d                              
1001e34f                              int32_t ecx_29 = not.d(j_2)
1001e355                              char* edi_13 = &var_114
1001e359                              int32_t j_3 = 0xffffffff
1001e359                              
1001e35c                              while (j_3 != 0)
1001e35c                                  bool cond:6_1 = 0 != *edi_13
1001e35c                                  edi_13 = &edi_13[1]
1001e35c                                  j_3 -= 1
1001e35c                                  
1001e35c                                  if (not(cond:6_1))
1001e35c                                      break
1001e35c                              
1001e364                              int32_t esi_17
1001e364                              int32_t edi_15
1001e364                              edi_15, esi_17 = __builtin_memcpy(dest: edi_13 - 1, 
1001e364                                  src: edi_11 - ecx_29, n: ecx_29 u>> 2 << 2)
1001e36d                              __builtin_memcpy(dest: edi_15, src: esi_17, n: ecx_29 & 3)
1001e36d                      
1001e37d                      int32_t var_244_36 = 0
1001e384                      char* var_248_29 = &var_114
1001e38b                      j_sub_1002e510(arg1 + 0xf8c, "patrol_start")
1001e397                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001e39f                      *(arg1 + 0x10e4) = 0
1001e39f              
1001e3a5              void* eax_57 = *(arg1 + 0x11c8)
1001e3a5              
1001e3ad              if (eax_57 == 0)
1001e3b0                  *(arg1 + 0x10a4) = 0
1001e3c1                  return 0
1001e3c1              
1001e3d7              int32_t eax_60
1001e3d7              
1001e3d7              if (j_sub_10030600(arg1 + 0x694, eax_57 + 4) != 0)
1001e3d9                  eax_60 = *(arg1 + 0x11cc)
1001e3df                  void* ecx_35 = *(arg1 + 0x11c8)
1001e3df                  
1001e3e7                  if ((eax_60.b & 4) == 0)
1001e405                      int32_t edx_23 = *(ecx_35 + 0x3c)
1001e405                      
1001e40a                      if (edx_23 == 0)
1001e417                          eax_60.b |= 4
1001e419                          *(arg1 + 0x11c8) = *(ecx_35 + 0x40)
1001e41f                          *(arg1 + 0x11cc) = eax_60
1001e40a                      else
1001e40c                          *(arg1 + 0x11c8) = edx_23
1001e3e7                  else
1001e3e9                      int32_t edx_22 = *(ecx_35 + 0x40)
1001e3e9                      
1001e3ee                      if (edx_22 == 0)
1001e3fb                          eax_60.b &= 0xfb
1001e3fd                          *(arg1 + 0x11c8) = *(ecx_35 + 0x3c)
1001e41f                          *(arg1 + 0x11cc) = eax_60
1001e3ee                      else
1001e3f0                          *(arg1 + 0x11c8) = edx_22
1001e3f0              
1001e425              long double st0_32 = j_sub_1000e120()
1001e42a              long double temp24 = fconvert.t(*(arg1 + 0x10e8))
1001e42a              st0_32 - temp24
1001e430              eax_60.w = (st0_32 < temp24 ? 1 : 0) << 8
1001e430                  | (is_unordered.t(st0_32, temp24) ? 1 : 0) << 0xa
1001e430                  | (st0_32 == temp24 ? 1 : 0) << 0xe
1001e430              
1001e435              if ((eax_60:1.b & 0x41) == 0)
1001e43d                  int32_t var_244_38 = 0
1001e444                  j_sub_1002e510(arg1 + 0xf8c, "patrol_stop")
1001e450                  j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001e458                  *(arg1 + 0x10a4) = 0
1001e458              
1001e45e              int32_t eax_62 = *(arg1 + 0x11c8)
1001e45e              
1001e466              if (eax_62 != 0)
1001e48a                  return eax_62 + 4
1001e48a              
1001e469              *(arg1 + 0x10a4) = 0
1001e47a              return 0
1001e47a          
1001e48e          if (eax_43 == 4)
1001e494              long double x87_r7_94 = fconvert.t(*(arg1 + 0x10e4))
1001e49a              long double temp13_1 = fconvert.t(0f)
1001e49a              x87_r7_94 - temp13_1
1001e4a0              eax_43.w = (x87_r7_94 < temp13_1 ? 1 : 0) << 8
1001e4a0                  | (is_unordered.t(x87_r7_94, temp13_1) ? 1 : 0) << 0xa
1001e4a0                  | (x87_r7_94 == temp13_1 ? 1 : 0) << 0xe
1001e4a0              
1001e4a5              if ((eax_43:1.b & 0x40) == 0)
1001e4a7                  long double st0_33 = j_sub_1000e120()
1001e4ac                  long double temp20_1 = fconvert.t(*(arg1 + 0x10e4))
1001e4ac                  st0_33 - temp20_1
1001e4b2                  eax_43.w = (st0_33 < temp20_1 ? 1 : 0) << 8
1001e4b2                      | (is_unordered.t(st0_33, temp20_1) ? 1 : 0) << 0xa
1001e4b2                      | (st0_33 == temp20_1 ? 1 : 0) << 0xe
1001e4b2                  
1001e4b7                  if ((eax_43:1.b & 0x41) == 0)
1001e4bf                      int32_t var_244_39 = 0
1001e4c6                      j_sub_1002e510(arg1 + 0xf8c, "captureflag_start")
1001e4d2                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001e4da                      *(arg1 + 0x10e4) = 0
1001e4da              
1001e4ea              result = &data_10064420
1001e4ea              
1001e4ef              if (j_sub_10023510(arg1) == 1)
1001e4f1                  result = &data_100643e0
1001e4f1              
1001e508              if (j_sub_10030600(arg1 + 0x694, result) != 0)
1001e50a                  *(arg1 + 0x10a4) = 0
1001e50a              
1001e510              long double st0_34 = j_sub_1000e120()
1001e515              long double temp30_1 = fconvert.t(*(arg1 + 0x10e8))
1001e515              st0_34 - temp30_1
1001e51b              int32_t eax_67
1001e51b              eax_67.w = (st0_34 < temp30_1 ? 1 : 0) << 8
1001e51b                  | (is_unordered.t(st0_34, temp30_1) ? 1 : 0) << 0xa
1001e51b                  | (st0_34 == temp30_1 ? 1 : 0) << 0xe
1001e51b              
1001e520              if ((eax_67:1.b & 0x41) == 0)
1001e529                  *(arg1 + 0x10a4) = 0
1001e48e          else if (eax_43 != 5)
1001e60e              label_1001e60e:
1001e60e              result = j_sub_1002fe50(arg1 + 0xbc0)
1001e615              void* eax_77
1001e615              
1001e615              if (result == 0)
1001e66b                  *(arg1 + 0xae8) = 0
1001e615              else if (j_sub_10030600(arg1 + 0x694, result) == 0)
1001e655                  void* result_1 = result
1001e655                  
1001e669                  if (j_sub_10030770(*(arg1 + 8), arg1 + 0x6b0, arg1 + 0x1080) != 0)
1001e66b                      *(arg1 + 0xae8) = 0
1001e629              else
1001e630                  long double x87_r7_105 = fconvert.t(*(data_10064468 + 0x10))
1001e633                  long double temp28_1 = fconvert.t(0f)
1001e633                  x87_r7_105 - temp28_1
1001e639                  eax_77.w = (x87_r7_105 < temp28_1 ? 1 : 0) << 8
1001e639                      | (is_unordered.t(x87_r7_105, temp28_1) ? 1 : 0) << 0xa
1001e639                      | (x87_r7_105 == temp28_1 ? 1 : 0) << 0xe
1001e639                  
1001e63e                  if ((eax_77:1.b & 0x40) == 0)
1001e642                      j_sub_100262c0(arg1, result)
1001e642                  
1001e66b                  *(arg1 + 0xae8) = 0
1001e66b              
1001e671              long double st0_38 = j_sub_1000e120()
1001e676              long double temp27_1 = fconvert.t(*(arg1 + 0xae8))
1001e676              st0_38 - temp27_1
1001e67c              eax_77.w = (st0_38 < temp27_1 ? 1 : 0) << 8
1001e67c                  | (is_unordered.t(st0_38, temp27_1) ? 1 : 0) << 0xa
1001e67c                  | (st0_38 == temp27_1 ? 1 : 0) << 0xe
1001e67c              
1001e681              if ((eax_77:1.b & 0x41) == 0)
1001e684                  j_sub_1002fe00(arg1 + 0xbc0)
1001e684                  
1001e6aa                  if (j_sub_1002feb0(arg1 + 0xbc0, arg1 + 0x694, arg1 + 0x6c0, arg2) == 0)
1001e6c0                      j_sub_1002f6f0(arg1 + 0xbc0)
1001e6cc                      j_sub_10034af0(arg1 + 0xb40)
1001e6aa                  else
1001e6b7                      *(arg1 + 0xae8) = fconvert.s(j_sub_1000e120() + fconvert.t(20f))
1001e6b7                  
1001e6dd                  return j_sub_1002fe50(arg1 + 0xbc0)
1001e53c          else
1001e542              long double st0_35 = j_sub_1000e120()
1001e547              long double temp18_1 = fconvert.t(*(arg1 + 0xb30))
1001e547              st0_35 - temp18_1
1001e54d              eax_43.w = (st0_35 < temp18_1 ? 1 : 0) << 8
1001e54d                  | (is_unordered.t(st0_35, temp18_1) ? 1 : 0) << 0xa
1001e54d                  | (st0_35 == temp18_1 ? 1 : 0) << 0xe
1001e54d              
1001e552              if ((eax_43:1.b & 0x41) != 0)
1001e552                  goto label_1001e60e
1001e552              
1001e562              result = &data_100643e0
1001e562              
1001e567              if (j_sub_10023510(arg1) == 1)
1001e569                  result = &data_10064420
1001e569              
1001e56e              long double st0_36 = j_sub_1000e120()
1001e573              long double temp29_1 = fconvert.t(*(arg1 + 0x10e8))
1001e573              st0_36 - temp29_1
1001e573              
1001e57e              if ((((st0_36 < temp29_1 ? 1 : 0) << 8
1001e57e                      | (is_unordered.t(st0_36, temp29_1) ? 1 : 0) << 0xa
1001e57e                      | (st0_36 == temp29_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1001e580                  *(arg1 + 0x10a4) = 0
1001e580              
1001e598              if (j_sub_10030600(arg1 + 0x694, result) != 0)
1001e5a9                  if (j_sub_10021650(arg1) == 0)
1001de5b                      *(arg1 + 0x10a4) = 0
1001de6a                      return result
1001de6a                  
1001e5b6                  j_sub_10034af0(arg1 + 0xb40)
1001e5dc                  float var_230_10 = fconvert.s(float.t(sub_10045187() & 0x7fff)
1001e5dc                      * fconvert.t(3.05185094e-05f) * fconvert.t(10f))
1001e5f4                  *(arg1 + 0xb30) =
1001e5f4                      fconvert.s(j_sub_1000e120() + fconvert.t(var_230_10) + fconvert.t(5f))
1001dfdd      else
1001dfe3          long double x87_r7_76 = fconvert.t(*(arg1 + 0x10e4))
1001dfe9          long double temp5_1 = fconvert.t(0f)
1001dfe9          x87_r7_76 - temp5_1
1001dfef          eax_43.w = (x87_r7_76 < temp5_1 ? 1 : 0) << 8
1001dfef              | (is_unordered.t(x87_r7_76, temp5_1) ? 1 : 0) << 0xa
1001dfef              | (x87_r7_76 == temp5_1 ? 1 : 0) << 0xe
1001dfef          
1001dff4          if ((eax_43:1.b & 0x40) == 0)
1001dff6              long double st0_26 = j_sub_1000e120()
1001dffb              long double temp11_1 = fconvert.t(*(arg1 + 0x10e4))
1001dffb              st0_26 - temp11_1
1001e001              eax_43.w = (st0_26 < temp11_1 ? 1 : 0) << 8
1001e001                  | (is_unordered.t(st0_26, temp11_1) ? 1 : 0) << 0xa
1001e001                  | (st0_26 == temp11_1 ? 1 : 0) << 0xe
1001e001              
1001e006              if ((eax_43:1.b & 0x41) == 0)
1001e015                  int32_t var_244_25 = 0
1001e027                  int32_t var_248_22 = j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_194)
1001e02e                  j_sub_1002e510(arg1 + 0xf8c, "camp_start")
1001e03a                  j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001e042                  *(arg1 + 0x10e4) = 0
1001e042          
1001e048          result = arg1 + 0x10ac
1001e04e          long double st0_27 = j_sub_1000e120()
1001e053          long double temp10_1 = fconvert.t(*(arg1 + 0x10e8))
1001e053          st0_27 - temp10_1
1001e059          eax_43.w = (st0_27 < temp10_1 ? 1 : 0) << 8
1001e059              | (is_unordered.t(st0_27, temp10_1) ? 1 : 0) << 0xa
1001e059              | (st0_27 == temp10_1 ? 1 : 0) << 0xe
1001e059          
1001e05e          if ((eax_43:1.b & 0x41) == 0)
1001e066              int32_t var_244_26 = 0
1001e06d              j_sub_1002e510(arg1 + 0xf8c, "camp_stop")
1001e079              j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001e081              *(arg1 + 0x10a4) = 0
1001e081          
1001e099          float* var_244_27 = &var_22c
1001e09a          var_22c = fconvert.s(fconvert.t(*result) - fconvert.t(*(arg1 + 0x694)))
1001e0a7          float var_228_6 =
1001e0a7              fconvert.s(fconvert.t(*(result + 4)) - fconvert.t(*(arg1 + 0x698)))
1001e0b4          float var_224_6 =
1001e0b4              fconvert.s(fconvert.t(*(result + 8)) - fconvert.t(*(arg1 + 0x69c)))
1001e0b8          long double st0_28 = j_sub_10043500(var_244_27)
1001e0bd          long double temp15_1 = fconvert.t(40f)
1001e0bd          st0_28 - temp15_1
1001e0bd          
1001e0cb          if ((((st0_28 < temp15_1 ? 1 : 0) << 8
1001e0cb                  | (is_unordered.t(st0_28, temp15_1) ? 1 : 0) << 0xa
1001e0cb                  | (st0_28 == temp15_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1001e0d1              long double x87_r7_86 = fconvert.t(*(arg1 + 0xb3c))
1001e0d7              long double temp21_1 = fconvert.t(0f)
1001e0d7              x87_r7_86 - temp21_1
1001e0d7              
1001e0e2              if ((((x87_r7_86 < temp21_1 ? 1 : 0) << 8
1001e0e2                      | (is_unordered.t(x87_r7_86, temp21_1) ? 1 : 0) << 0xa
1001e0e2                      | (x87_r7_86 == temp21_1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
1001e0f1                  int32_t var_244_28 = 0
1001e103                  int32_t var_248_25 = j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_194)
1001e10a                  j_sub_1002e510(arg1 + 0xf8c, "camp_arrive")
1001e116                  j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001e123                  *(arg1 + 0xb3c) = fconvert.s(j_sub_1000e120())
1001e123              
1001e13b              long double x87_r7_89 =
1001e13b                  float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001e147              long double x87_r6_16 =
1001e147                  fconvert.t(*(arg1 + 0x690)) * fconvert.t(0.80000000000000004)
1001e14d              x87_r6_16 - x87_r7_89
1001e14d              int16_t top_1 = 0
1001e14f              float* eax_51
1001e14f              eax_51.w = (x87_r6_16 < x87_r7_89 ? 1 : 0) << 8
1001e14f                  | (is_unordered.t(x87_r6_16, x87_r7_89) ? 1 : 0) << 0xa
1001e14f                  | (x87_r6_16 == x87_r7_89 ? 1 : 0) << 0xe
1001e14f              
1001e154              if ((eax_51:1.b & 0x41) == 0)
1001e15c                  j_sub_10022a60(arg1, &var_21c)
1001e172                  float* var_250_15 = &var_22c
1001e173                  var_22c = fconvert.s(fconvert.t(var_21c) - fconvert.t(*(arg1 + 0x694)))
1001e181                  float var_228_7 =
1001e181                      fconvert.s(fconvert.t(var_218) - fconvert.t(*(arg1 + 0x698)))
1001e18f                  float var_224_7 =
1001e18f                      fconvert.s(fconvert.t(var_214) - fconvert.t(*(arg1 + 0x69c)))
1001e193                  j_sub_10041790(var_250_15, arg1 + 0x108c)
1001e1a7                  *(arg1 + 0x1094) =
1001e1a7                      fconvert.s(fconvert.t(*(arg1 + 0x1094)) * fconvert.t(0.5))
1001e1a7                  top_1 = 0xffff
1001e1a7              
1001e1ad              j_sub_1000e120()
1001e1ad              unimplemented  {call j_sub_1000e120}
1001e1b2              unimplemented  {fsub st0, dword [&data_100581a4]}
1001e1b8              long double temp31_1 = fconvert.t(*(arg1 + 0xb04))
1001e1b8              unimplemented  {fcomp st0, dword [ebx+0xb04]} f- temp31_1
1001e1b8              bool c0_30 = unimplemented  {fcomp st0, dword [ebx+0xb04]} f< temp31_1
1001e1b8              bool c2_30 =
1001e1b8                  is_unordered.t(unimplemented  {fcomp st0, dword [ebx+0xb04]}, temp31_1)
1001e1b8              bool c3_30 = unimplemented  {fcomp st0, dword [ebx+0xb04]} f== temp31_1
1001e1b8              unimplemented  {fcomp st0, dword [ebx+0xb04]}
1001e1be              eax_51.w = (c0_30 ? 1 : 0) << 8 | (c2_30 ? 1 : 0) << 0xa
1001e1be                  | (c3_30 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb
1001e1be              
1001e1c3              if ((eax_51:1.b & 0x41) == 0)
1001e1d4                  j_sub_1002a690(*(arg1 + 0x688), 0x18, 0f, 1f)
1001e1d4                  unimplemented  {call j_sub_1002a690}
1001e1d9                  float var_220_2 = fconvert.s(unimplemented  {fstp dword [esp+0x30], st0})
1001e1d9                  unimplemented  {fstp dword [esp+0x30], st0}
1001e1ea                  float* var_230_8 = sub_10045187() & 0x7fff
1001e1ee                  unimplemented  {fild st0, dword [esp+0x10]}
1001e1f2                  unimplemented  {fmul st0, dword [&data_10058218]}
1001e1f8                  unimplemented  {fld st0, dword [esp+0x20]}
1001e1fc                  unimplemented  {fmul st0, dword [ebx+0x690]}
1001e202                  unimplemented  {fcompp } f- unimplemented  {fcompp }
1001e202                  bool c0_31 = unimplemented  {fcompp } f< unimplemented  {fcompp }
1001e202                  bool c2_31 =
1001e202                      is_unordered.t(unimplemented  {fcompp }, unimplemented  {fcompp })
1001e202                  bool c3_31 = unimplemented  {fcompp } f== unimplemented  {fcompp }
1001e202                  unimplemented  {fcompp }
1001e202                  unimplemented  {fcompp }
1001e204                  eax_51.w = (c0_31 ? 1 : 0) << 8 | (c2_31 ? 1 : 0) << 0xa
1001e204                      | (c3_31 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb
1001e204                  
1001e209                  if ((eax_51:1.b & 0x41) == 0)
1001e20b                      j_sub_1000e120()
1001e20b                      unimplemented  {call j_sub_1000e120}
1001e210                      unimplemented  {fld st0, dword [esp+0x20]}
1001e214                      unimplemented  {fmul st0, dword [&data_1005829c]}
1001e21a                      unimplemented  {faddp st1, st0}
1001e21a                      unimplemented  {faddp st1, st0}
1001e21c                      unimplemented  {fadd dword [&data_100581a4]}
1001e222                      *(arg1 + 0xb04) =
1001e222                          fconvert.s(unimplemented  {fstp dword [ebx+0xb04], st0})
1001e222                      unimplemented  {fstp dword [ebx+0xb04], st0}
1001e222              
1001e228              j_sub_1000e120()
1001e228              unimplemented  {call j_sub_1000e120}
1001e22d              long double temp34_1 = fconvert.t(*(arg1 + 0xb04))
1001e22d              unimplemented  {fcomp st0, dword [ebx+0xb04]} f- temp34_1
1001e22d              bool c0_32 = unimplemented  {fcomp st0, dword [ebx+0xb04]} f< temp34_1
1001e22d              bool c2_32 =
1001e22d                  is_unordered.t(unimplemented  {fcomp st0, dword [ebx+0xb04]}, temp34_1)
1001e22d              bool c3_32 = unimplemented  {fcomp st0, dword [ebx+0xb04]} f== temp34_1
1001e22d              unimplemented  {fcomp st0, dword [ebx+0xb04]}
1001e233              eax_51.w = (c0_32 ? 1 : 0) << 8 | (c2_32 ? 1 : 0) << 0xa
1001e233                  | (c3_32 ? 1 : 0) << 0xe | (top_1 & 7) << 0xb
1001e233              
1001e238              if ((eax_51:1.b & 1) != 0)
1001e23e                  j_sub_100373d0(*(arg1 + 4))
1001e23e              
1001e251              if (j_sub_1000efc0(arg1 + 0x694) != 0)
1001e253                  j_sub_1000e120()
1001e253                  unimplemented  {call j_sub_1000e120}
1001e258                  unimplemented  {fsub st0, dword [&data_100580c4]}
1001e25e                  *(arg1 + 0xb04) = fconvert.s(unimplemented  {fstp dword [ebx+0xb04], st0})
1001e25e                  unimplemented  {fstp dword [ebx+0xb04], st0}
1001e25e              
1001e275              if ((j_sub_10003080(arg1 + 0x6b0) & 0x38) != 0)
1001e27d                  int32_t var_244_34 = 0
1001e284                  j_sub_1002e510(arg1 + 0xf8c, "camp_stop")
1001e290                  j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001e298                  *(arg1 + 0x10a4) = 0
1001e298              
1001e2a5              j_sub_10034af0(arg1 + 0xb40)
1001e2b9              return 0
1001de6e  else
1001de74      long double st0_21 = j_sub_1000e120()
1001de79      long double temp1_1 = fconvert.t(*(arg1 + 0xb2c))
1001de79      st0_21 - temp1_1
1001de7f      eax.w = (st0_21 < temp1_1 ? 1 : 0) << 8
1001de7f          | (is_unordered.t(st0_21, temp1_1) ? 1 : 0) << 0xa
1001de7f          | (st0_21 == temp1_1 ? 1 : 0) << 0xe
1001de7f      
1001de8c      if ((eax:1.b & 0x41) != 0 || arg3 != 0)
1001de84          goto label_1001dfd4
1001de84      
1001de92      long double x87_r7_60 = fconvert.t(*(arg1 + 0x10e4))
1001de98      long double temp12_1 = fconvert.t(0f)
1001de98      x87_r7_60 - temp12_1
1001de9e      eax.w = (x87_r7_60 < temp12_1 ? 1 : 0) << 8
1001de9e          | (is_unordered.t(x87_r7_60, temp12_1) ? 1 : 0) << 0xa
1001de9e          | (x87_r7_60 == temp12_1 ? 1 : 0) << 0xe
1001de9e      
1001dea3      if ((eax:1.b & 0x40) == 0)
1001dea5          long double st0_22 = j_sub_1000e120()
1001deaa          long double temp17_1 = fconvert.t(*(arg1 + 0x10e4))
1001deaa          st0_22 - temp17_1
1001deb0          eax.w = (st0_22 < temp17_1 ? 1 : 0) << 8
1001deb0              | (is_unordered.t(st0_22, temp17_1) ? 1 : 0) << 0xa
1001deb0              | (st0_22 == temp17_1 ? 1 : 0) << 0xe
1001deb0          
1001deb5          if ((eax:1.b & 0x41) == 0)
1001debd              int32_t var_244_21 = 0
1001decd              int32_t var_248_18 = j_sub_1002f6a0(*(arg1 + 0x10d8))
1001ded4              j_sub_1002e510(arg1 + 0xf8c, "defend_start")
1001dee0              j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001dee8              *(arg1 + 0x10e4) = 0
1001dee8      
1001deee      result = arg1 + 0x10ac
1001def4      long double st0_23 = j_sub_1000e120()
1001def9      long double temp16_1 = fconvert.t(*(arg1 + 0x10e8))
1001def9      st0_23 - temp16_1
1001deff      eax.w = (st0_23 < temp16_1 ? 1 : 0) << 8
1001deff          | (is_unordered.t(st0_23, temp16_1) ? 1 : 0) << 0xa
1001deff          | (st0_23 == temp16_1 ? 1 : 0) << 0xe
1001deff      
1001df04      if ((eax:1.b & 0x41) == 0)
1001df0c          int32_t var_244_22 = 0
1001df1c          int32_t var_248_20 = j_sub_1002f6a0(*(arg1 + 0x10d8))
1001df23          j_sub_1002e510(arg1 + 0xf8c, "defend_stop")
1001df2f          j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1001df37          *(arg1 + 0x10a4) = 0
1001df37      
1001df49      float* var_244_23 = &var_22c
1001df4a      var_22c = fconvert.s(fconvert.t(*result) - fconvert.t(*(arg1 + 0x694)))
1001df57      float var_228_5 = fconvert.s(fconvert.t(*(result + 4)) - fconvert.t(*(arg1 + 0x698)))
1001df64      float var_224_5 = fconvert.s(fconvert.t(*(result + 8)) - fconvert.t(*(arg1 + 0x69c)))
1001df68      long double st0_24 = j_sub_10043500(var_244_23)
1001df6d      long double temp22_1 = fconvert.t(70f)
1001df6d      st0_24 - temp22_1
1001df6d      
1001df7b      if ((((st0_24 < temp22_1 ? 1 : 0) << 8
1001df7b              | (is_unordered.t(st0_24, temp22_1) ? 1 : 0) << 0xa
1001df7b              | (st0_24 == temp22_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
1001df88          j_sub_10034af0(arg1 + 0xb40)
1001dfae          float var_230_6 = fconvert.s(float.t(sub_10045187() & 0x7fff)
1001dfae              * fconvert.t(3.05185094e-05f) * fconvert.t(10f))
1001dfc6          *(arg1 + 0xb2c) =
1001dfc6              fconvert.s(j_sub_1000e120() + fconvert.t(var_230_6) + fconvert.t(5f))
1001e6eb  return result

1001e6ec                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
1001e700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e7e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e8a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e8c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e8e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e9a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e9c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001e9e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ea00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ea20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ea40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ea60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ea80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001eaa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001eac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001eae0    int32_t sub_1001eae0(int32_t arg1)

1001eaf0  j_sub_1001d3a0(arg1, "intermission", &data_1006294c)
1001eaf6  j_sub_10029a40(arg1)
1001eafc  int32_t result = j_sub_10022070(arg1)
1001eafc  
1001eb06  if (result != 0)
1001eb15      result = j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 0)
1001eb15  
1001eb1d  *(arg1 + 0x68c) = j_sub_1001eb50
1001eb28  return result

1001eb29                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1001eb40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001eb50    int32_t sub_1001eb50(float arg1)

1001eb51  float esi = arg1
1001eb51  
1001eb60  if (j_sub_100216f0(esi) == 0)
1001eb6d      long double x87_r7_3
1001eb6d      
1001eb6d      if (j_sub_10021f80(esi) == 0)
1001eb8c          x87_r7_3 = j_sub_1000e120() + fconvert.t(2f)
1001eb6d      else
1001eb75          arg1 = fconvert.s(j_sub_10022650(esi))
1001eb81          x87_r7_3 = j_sub_1000e120() + fconvert.t(arg1)
1001eb81      
1001eb92      *(esi i+ 0xafc) = fconvert.s(x87_r7_3)
1001eb99      j_sub_1001ec50(esi)
1001eb99  
1001eba7  return 1

1001eba8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1001ebc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001ebd0    int32_t* sub_1001ebd0(int32_t* arg1)

1001ebe0  j_sub_1001d3a0(arg1, "observer", &data_1006294c)
1001ebe6  int32_t* result = j_sub_10029a40(arg1)
1001ebee  arg1[0x1a3] = j_sub_1001ec10
1001ebf9  return result

1001ebfa                                                                                90 90 90 90 90 90                            ......
1001ec00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001ec10    int32_t sub_1001ec10(void* arg1)

1001ec20  if (j_sub_100216d0(arg1) == 0)
1001ec23      j_sub_1001ec50(arg1)
1001ec23  
1001ec31  return 1

1001ec32                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1001ec40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001ec50    int32_t sub_1001ec50(void* arg1)

1001ec60  int32_t result = j_sub_1001d3a0(arg1, "stand", &data_1006294c)
1001ec68  *(arg1 + 0x68c) = j_sub_1001ec90
1001ec73  return result

1001ec74                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1001ec80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001ec90    int32_t sub_1001ec90(float arg1)

1001eca0  if (j_sub_10023970(arg1) != 0)
1001eca3      j_sub_1001fcf0(arg1)
1001ecae      return 0
1001ecae  
1001ecb5  int32_t var_8_2 = *(arg1 i+ 0x690)
1001ecb7  j_sub_10029150(arg1)
1001ecbf  long double st0_1 = j_sub_1000e120()
1001ecc4  long double temp0 = fconvert.t(*(arg1 i+ 0xafc))
1001ecc4  st0_1 - temp0
1001ecc4  
1001eccf  if ((((st0_1 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp0) ? 1 : 0) << 0xa
1001eccf          | (st0_1 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
1001ecd6      long double st0_2 = j_sub_10038990("__squatt")
1001ecdb      long double temp1_1 = fconvert.t(0f)
1001ecdb      st0_2 - temp1_1
1001ecdb      
1001ece9      if ((((st0_2 < temp1_1 ? 1 : 0) << 8 | (is_unordered.t(st0_2, temp1_1) ? 1 : 0) << 0xa
1001ece9              | (st0_2 == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x40) != 0)
1001ed30          j_sub_1002ea80(arg1 i+ 0xf8c, *(arg1 i+ 4), 0)
1001ed36          j_sub_1001f6e0(arg1)
1001ed41          return 0
1001ed41      
1001ecf4      j_sub_10037090(*(arg1 i+ 4), "I never hacked your brain...\n")
1001ecff      int32_t var_8_3 = 0
1001ed0a      int32_t var_c_3 = j_sub_10028f30(*(arg1 i+ 4))
1001ed14      j_sub_10037200(*(arg1 i+ 4), "removebot")
1001ed14  
1001ed22  return 1

1001ed42        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1001ed60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001ed80    int32_t sub_1001ed80(float arg1)

1001ed82  int32_t esi = arg1
1001ed92  j_sub_1001d3a0(esi, "respawn", &data_1006294c)
1001ed9e  j_sub_10034b90(esi + 0xb40)
1001edaa  j_sub_10030990(esi + 0xbc0)
1001edb6  j_sub_10035640(esi + 0x1048)
1001edbc  j_sub_1002f6f0(esi + 0xbc0)
1001edc2  j_sub_10034af0(esi + 0xb40)
1001edc8  int32_t result = j_sub_10022160(esi)
1001edd2  long double x87_r7_2
1001edd2  
1001edd2  if (result == 0)
1001edec      x87_r7_2 = j_sub_1000e120()
1001edd2  else
1001edd5      long double st0
1001edd5      result, st0 = j_sub_10022650(esi)
1001ede6      x87_r7_2 = j_sub_1000e120() + fconvert.t(fconvert.s(st0))
1001ede6  
1001edf1  *(esi + 0xaf0) = fconvert.s(x87_r7_2)
1001edf7  *(esi + 0xac8) = 0
1001ee01  *(esi + 0x68c) = j_sub_1001ee40
1001ee0e  return result

1001ee0f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1001ee20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001ee40    int32_t sub_1001ee40(void* arg1)

1001ee4d  if (*(arg1 + 0xac8) == 0)
1001ee6c      long double st0_1 = j_sub_1000e120()
1001ee71      long double temp0_1 = fconvert.t(*(arg1 + 0xaf0))
1001ee71      st0_1 - temp0_1
1001ee77      int32_t eax
1001ee77      eax.w = (st0_1 < temp0_1 ? 1 : 0) << 8
1001ee77          | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
1001ee77          | (st0_1 == temp0_1 ? 1 : 0) << 0xe
1001ee77      
1001ee7c      if ((eax:1.b & 0x41) == 0)
1001ee7e          int32_t eax_3 = *(arg1 + 4)
1001ee81          *(arg1 + 0xac8) = 1
1001ee8c          j_sub_10037320(eax_3)
1001ee8c          
1001ee9c          if (*(arg1 + 0x1064) != 0)
1001eeab              j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 0)
1001eeb3              *(arg1 + 0x1064) = 0
1001ee4d  else if (j_sub_100216a0(arg1) == 0)
1001ee5d      j_sub_1001f6e0(arg1)
1001ee5d  
1001eec3  return 1

1001eec4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
1001eee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001ef00    int32_t sub_1001ef00(void* arg1)

1001ef10  int32_t result = j_sub_1001d3a0(arg1, "activate entity", &data_1006294c)
1001ef18  *(arg1 + 0x68c) = j_sub_1001ef40
1001ef23  return result

1001ef24              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................

1001ef40    int32_t sub_1001ef40(int32_t* arg1)

1001ef59  if (j_sub_100216d0(arg1) != 0)
1001ef5b      j_sub_1001ebd0(arg1)
1001ef6b      return 0
1001ef6b  
1001ef77  if (j_sub_100216f0(arg1) != 0)
1001ef79      j_sub_1001eae0(arg1)
1001ef89      return 0
1001ef89  
1001ef94  if (j_sub_100216a0(arg1) != 0)
1001ef97      j_sub_1001ed80(arg1)
1001efa7      return 0
1001efa7  
1001efad  int32_t var_7c = 0x18fbe
1001efb5  long double x87_r7 = fconvert.t(*(data_10064458 + 0x10))
1001efb8  long double temp0 = fconvert.t(0f)
1001efb8  x87_r7 - temp0
1001efbe  void* eax_6
1001efbe  eax_6.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
1001efbe      | (x87_r7 == temp0 ? 1 : 0) << 0xe
1001efbe  
1001efc3  if ((eax_6:1.b & 0x40) == 0)
1001efc5      var_7c = 0x1cfbe
1001efc5  
1001efd7  arg1[0x419] = 0
1001efdd  int32_t* var_90
1001efdd  
1001efdd  if (arg1 == 0xffffee78)
1001eff3      arg1[0x2c9] = 0
1001efdd  else
1001efe6      var_90 = &arg1[0x1a5]
1001efe6      
1001eff1      if (j_sub_10030600(var_90, &arg1[0x462]) != 0)
1001eff3          arg1[0x2c9] = 0
1001eff3  
1001eff9  long double st0 = j_sub_1000e120()
1001effe  long double temp1 = fconvert.t(arg1[0x2c9])
1001effe  st0 - temp1
1001f004  eax_6.w = (st0 < temp1 ? 1 : 0) << 8 | (is_unordered.t(st0, temp1) ? 1 : 0) << 0xa
1001f004      | (st0 == temp1 ? 1 : 0) << 0xe
1001f004  
1001f009  if ((eax_6:1.b & 0x41) == 0)
1001f00c      j_sub_1001f210(arg1)
1001f01c      return 0
1001f01c  
1001f01e  var_90 = arg1
1001f01f  j_sub_10021500(var_90)
1001f02c  j_sub_10020ed0(arg1, &arg1[0x2d0])
1001f050  int32_t var_60
1001f050  void var_30
1001f050  __builtin_memcpy(dest: &var_60, 
1001f050      src: j_sub_100343a0(&var_30, &arg1[0x2d0], &arg1[0x462], var_7c), n: 0x30)
1001f050  
1001f058  if (var_60 != 0)
1001f05a      var_90 = &arg1[0x2d0]
1001f05b      j_sub_10034af0(var_90)
1001f063      arg1[0x2bb] = 0
1001f063  
1001f071  var_90 = 1
1001f075  j_sub_10025560(arg1, &var_60, var_90)
1001f083  char var_4c
1001f083  
1001f083  if ((var_4c & 3) == 0)
1001f0ad      float var_78
1001f0ad      var_90 = &var_78
1001f0c1      int32_t var_94_3
1001f0c1      
1001f0c1      if (j_sub_10031270(&arg1[0x2d0], &arg1[0x462], var_7c, var_90) == 0)
1001f105          var_90 = &arg1[0x423]
1001f106          void var_48
1001f106          var_94_3 = &var_48
1001f0c1      else
1001f0c7          long double x87_r7_3 = fconvert.t(var_78) - fconvert.t(arg1[0x1a5])
1001f0d7          var_90 = &arg1[0x423]
1001f0d8          float var_6c
1001f0d8          var_94_3 = &var_6c
1001f0d9          var_6c = fconvert.s(x87_r7_3)
1001f0e7          float var_74
1001f0e7          float var_68_1 = fconvert.s(fconvert.t(var_74) - fconvert.t(arg1[0x1a6]))
1001f0f5          float var_70
1001f0f5          float var_64_1 = fconvert.s(fconvert.t(var_70) - fconvert.t(arg1[0x1a7]))
1001f0f5      
1001f107      j_sub_10041790(var_94_3, var_90)
1001f11b      arg1[0x425] = fconvert.s(fconvert.t(arg1[0x425]) * fconvert.t(0.5))
1001f083  else
1001f091      int32_t var_3c
1001f091      arg1[0x423] = var_3c
1001f097      int32_t var_38
1001f097      arg1[0x424] = var_38
1001f09d      int32_t var_34
1001f09d      arg1[0x425] = var_34
1001f09d  
1001f121  var_90 = arg1
1001f121  
1001f12c  if (j_sub_10023970(var_90) != 0)
1001f12e      var_90 = arg1
1001f12e      
1001f139      if (j_sub_100228c0(var_90) == 0)
1001f146          var_90 = &arg1[0x2d0]
1001f147          j_sub_10034b20(var_90)
1001f153          j_sub_1002fe30(&arg1[0x2f0])
1001f159          j_sub_1001fcf0(arg1)
1001f139      else
1001f13b          var_90 = arg1
1001f13c          j_sub_10020ad0(var_90)
1001f13c  
1001f167  var_90 = arg1[0x1a4]
1001f169  j_sub_10029150(arg1)
1001f17d  return 1

1001f17e                                                                                            90 90                                ..
1001f180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f1a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f1c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f1e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001f210    int32_t sub_1001f210(void* arg1)

1001f21c  void* eax_1 = j_sub_1002fe50(arg1 + 0xbc0)
1001f21c  
1001f226  if (eax_1 != 0)
1001f238      int32_t eax_3 = j_sub_1001d3a0(arg1, "seek NBG", j_sub_1002f6a0(*(eax_1 + 0x2c)))
1001f240      *(arg1 + 0x68c) = j_sub_1001f290
1001f24b      return eax_3
1001f24b  
1001f257  int32_t eax_4 = j_sub_1001d3a0(arg1, "seek NBG", "no goal")
1001f25f  *(arg1 + 0x68c) = j_sub_1001f290
1001f26a  return eax_4

1001f26b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
1001f280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001f290    int32_t sub_1001f290(void* arg1)

1001f29e  void* var_90 = arg1
1001f2a7  bool cond:0 = j_sub_100216d0(var_90) == 0
1001f2a9  var_90 = arg1
1001f2a9  
1001f2aa  if (not(cond:0))
1001f2ac      j_sub_1001ebd0(var_90)
1001f2bd      return 0
1001f2bd  
1001f2c6  bool cond:1 = j_sub_100216f0(var_90) == 0
1001f2c8  var_90 = arg1
1001f2c8  
1001f2c9  if (not(cond:1))
1001f2cb      j_sub_1001eae0()
1001f2dc      return 0
1001f2dc  
1001f2e7  if (j_sub_100216a0() != 0)
1001f2e9      var_90 = arg1
1001f2ea      j_sub_1001ed80(var_90)
1001f2fb      return 0
1001f2fb  
1001f301  int32_t var_7c = 0x18fbe
1001f309  long double x87_r7 = fconvert.t(*(data_10064458 + 0x10))
1001f30c  long double temp0 = fconvert.t(0f)
1001f30c  x87_r7 - temp0
1001f312  void* eax_6
1001f312  eax_6.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
1001f312      | (x87_r7 == temp0 ? 1 : 0) << 0xe
1001f312  
1001f317  if ((eax_6:1.b & 0x40) == 0)
1001f319      var_7c = 0x1cfbe
1001f319  
1001f327  long double x87_r7_1 = fconvert.t(*(data_10064478 + 0x10))
1001f32a  long double temp1 = fconvert.t(0f)
1001f32a  x87_r7_1 - temp1
1001f330  eax_6.w = (x87_r7_1 < temp1 ? 1 : 0) << 8
1001f330      | (is_unordered.t(x87_r7_1, temp1) ? 1 : 0) << 0xa
1001f330      | (x87_r7_1 == temp1 ? 1 : 0) << 0xe
1001f330  
1001f335  if ((eax_6:1.b & 0x40) == 0)
1001f337      var_90 = arg1
1001f337      
1001f342      if (j_sub_10022990(var_90) != 0)
1001f348          int32_t eax_8
1001f348          eax_8:1.b = var_7c:1.b | 0x10
1001f34b          var_7c = eax_8
1001f34b  
1001f357  var_90 = arg1 + 0xbc0
1001f358  *(arg1 + 0x1064) = 0
1001f363  void* esi = j_sub_1002fe50(var_90)
1001f36a  void* eax_9
1001f36a  
1001f36a  if (esi == 0)
1001f3c0      *(arg1 + 0xaec) = 0
1001f36a  else
1001f372      var_90 = esi
1001f372      
1001f37e      if (j_sub_10030600(arg1 + 0x694, var_90) == 0)
1001f3a1          int32_t eax_11 = *(arg1 + 8)
1001f3aa          var_90 = esi
1001f3aa          
1001f3be          if (j_sub_10030770(eax_11, arg1 + 0x6b0, arg1 + 0x1080) != 0)
1001f3c0              *(arg1 + 0xaec) = 0
1001f37e      else
1001f385          long double x87_r7_2 = fconvert.t(*(data_10064468 + 0x10))
1001f388          long double temp3_1 = fconvert.t(0f)
1001f388          x87_r7_2 - temp3_1
1001f38e          eax_9.w = (x87_r7_2 < temp3_1 ? 1 : 0) << 8
1001f38e              | (is_unordered.t(x87_r7_2, temp3_1) ? 1 : 0) << 0xa
1001f38e              | (x87_r7_2 == temp3_1 ? 1 : 0) << 0xe
1001f38e          
1001f393          if ((eax_9:1.b & 0x40) == 0)
1001f395              var_90 = esi
1001f397              j_sub_100262c0(arg1, var_90)
1001f397          
1001f3c0          *(arg1 + 0xaec) = 0
1001f3c0  
1001f3c6  long double st0 = j_sub_1000e120()
1001f3cb  long double temp2 = fconvert.t(*(arg1 + 0xaec))
1001f3cb  st0 - temp2
1001f3d1  eax_9.w = (st0 < temp2 ? 1 : 0) << 8 | (is_unordered.t(st0, temp2) ? 1 : 0) << 0xa
1001f3d1      | (st0 == temp2 ? 1 : 0) << 0xe
1001f3d1  
1001f3d6  if ((eax_9:1.b & 0x41) == 0)
1001f3d8      var_90 = arg1 + 0xbc0
1001f3d9      j_sub_1002fe00(var_90)
1001f3df      j_sub_1001f6e0(arg1)
1001f3f0      return 0
1001f3f0  
1001f3f1  var_90 = arg1
1001f3f2  j_sub_10021500(var_90)
1001f3ff  j_sub_10020ed0(arg1, arg1 + 0xb40)
1001f423  int32_t var_60
1001f423  void var_30
1001f423  __builtin_memcpy(dest: &var_60, src: j_sub_100343a0(&var_30, arg1 + 0xb40, esi, var_7c), 
1001f423      n: 0x30)
1001f423  
1001f42b  if (var_60 != 0)
1001f42d      var_90 = arg1 + 0xb40
1001f42e      j_sub_10034af0(var_90)
1001f436      *(arg1 + 0xaec) = 0
1001f436  
1001f444  var_90 = 1
1001f448  j_sub_10025560(arg1, &var_60, var_90)
1001f456  char var_4c
1001f456  
1001f456  if ((var_4c & 3) == 0)
1001f47d      float var_78
1001f47d      float var_74
1001f47d      float var_70
1001f47d      float var_6c
1001f47d      
1001f47d      if ((var_4c & 4) == 0)
1001f504          var_90 = arg1 + 0xbc0
1001f505          void* eax_19 = j_sub_1002fe80(var_90)
1001f505          
1001f511          if (eax_19 == 0)
1001f513              var_90 = arg1 + 0xbc0
1001f514              j_sub_1002fe50(var_90)
1001f514          
1001f524          var_90 = &var_78
1001f532          float* var_94_9
1001f532          
1001f532          if (j_sub_10031270(arg1 + 0xb40, eax_19, var_7c, var_90) == 0)
1001f576              var_90 = arg1 + 0x108c
1001f577              void var_48
1001f577              var_94_9 = &var_48
1001f532          else
1001f538              long double x87_r7_8 = fconvert.t(var_78) - fconvert.t(*(arg1 + 0x694))
1001f548              var_90 = arg1 + 0x108c
1001f549              var_94_9 = &var_6c
1001f54a              var_6c = fconvert.s(x87_r7_8)
1001f558              float var_68_2 = fconvert.s(fconvert.t(var_74) - fconvert.t(*(arg1 + 0x698)))
1001f566              float var_64_2 = fconvert.s(fconvert.t(var_70) - fconvert.t(*(arg1 + 0x69c)))
1001f566          
1001f578          j_sub_10041790(var_94_9)
1001f532          goto label_1001f580
1001f532      
1001f491      long double x87_r7_5 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001f49d      long double x87_r6_2 = fconvert.t(*(arg1 + 0x690)) * fconvert.t(0.80000000000000004)
1001f4a3      x87_r6_2 - x87_r7_5
1001f4a5      int32_t eax_18
1001f4a5      eax_18.w = (x87_r6_2 < x87_r7_5 ? 1 : 0) << 8
1001f4a5          | (is_unordered.t(x87_r6_2, x87_r7_5) ? 1 : 0) << 0xa
1001f4a5          | (x87_r6_2 == x87_r7_5 ? 1 : 0) << 0xe
1001f4a5      
1001f4aa      if ((eax_18:1.b & 0x41) == 0)
1001f4b4          var_90 = &var_78
1001f4b6          j_sub_10022a60(arg1, var_90)
1001f4d1          var_6c = fconvert.s(fconvert.t(var_78) - fconvert.t(*(arg1 + 0x694)))
1001f4df          float var_68_1 = fconvert.s(fconvert.t(var_74) - fconvert.t(*(arg1 + 0x698)))
1001f4ed          float var_64_1 = fconvert.s(fconvert.t(var_70) - fconvert.t(*(arg1 + 0x69c)))
1001f4f1          j_sub_10041790(&var_6c, arg1 + 0x108c)
1001f580          label_1001f580:
1001f580          unimplemented  {fld st0, dword [ebx+0x1094]}
1001f586          unimplemented  {fmul st0, qword [&data_10058018]}
1001f58c          *(arg1 + 0x1094) = fconvert.s(unimplemented  {fstp dword [ebx+0x1094], st0})
1001f58c          unimplemented  {fstp dword [ebx+0x1094], st0}
1001f456  else
1001f464      int32_t var_3c
1001f464      *(arg1 + 0x108c) = var_3c
1001f46a      int32_t var_38
1001f46a      *(arg1 + 0x1090) = var_38
1001f470      int32_t var_34
1001f470      *(arg1 + 0x1094) = var_34
1001f470  
1001f592  var_90 = arg1
1001f592  
1001f59d  if (j_sub_10023970(var_90) != 0)
1001f59f      var_90 = arg1
1001f59f      
1001f5aa      if (j_sub_100228c0(var_90) == 0)
1001f5b7          var_90 = arg1 + 0xb40
1001f5b8          j_sub_10034b20(var_90)
1001f5b8          unimplemented  {call j_sub_10034b20}
1001f5c4          j_sub_1002fe30(arg1 + 0xbc0)
1001f5ca          j_sub_1001fcf0(arg1)
1001f5aa      else
1001f5ac          var_90 = arg1
1001f5ad          j_sub_10020ad0(var_90)
1001f5ad  
1001f5d7  if ((var_4c & 8) == 0)
1001f5df      var_90 = *(arg1 + 0x690)
1001f5e1      j_sub_10029150(arg1)
1001f5e1      unimplemented  {call j_sub_10029150}
1001f5e1  
1001f5f5  return 1

1001f5f6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1001f600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f6a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001f6c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001f6e0    int32_t sub_1001f6e0(void* arg1)

1001f6ec  void* eax_1 = j_sub_1002fe50(arg1 + 0xbc0)
1001f6ec  
1001f6f6  if (eax_1 != 0)
1001f708      int32_t eax_3 = j_sub_1001d3a0(arg1, "seek LTG", j_sub_1002f6a0(*(eax_1 + 0x2c)))
1001f710      *(arg1 + 0x68c) = j_sub_1001f760
1001f71b      return eax_3
1001f71b  
1001f727  int32_t eax_4 = j_sub_1001d3a0(arg1, "seek LTG", "no goal")
1001f72f  *(arg1 + 0x68c) = j_sub_1001f760
1001f73a  return eax_4

1001f73b                                                                                   90 90 90 90 90                             .....
1001f740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1001f760    int32_t sub_1001f760(int32_t* arg1)

1001f77c  if (j_sub_100216d0(arg1) != 0)
1001f77e      j_sub_1001ebd0(arg1)
1001f791      return 0
1001f791  
1001f79d  if (j_sub_100216f0(arg1) != 0)
1001f79f      j_sub_1001eae0(arg1)
1001f7b2      return 0
1001f7b2  
1001f7be  if (j_sub_100216a0(arg1) != 0)
1001f7c0      j_sub_1001ed80(arg1)
1001f7d3      return 0
1001f7d3  
1001f7de  if (j_sub_10022470(arg1) != 0)
1001f7e6      float var_80 = fconvert.s(j_sub_10022650(arg1))
1001f7f4      arg1[0x2bf] = fconvert.s(j_sub_1000e120() + fconvert.t(var_80))
1001f7fa      j_sub_1001ec50(arg1)
1001f80d      return 0
1001f80d  
1001f813  float edi = 1.43400477e-40f
1001f818  float var_80_1 = 1.43400477e-40f
1001f81c  long double x87_r7_3 = fconvert.t(*(data_10064458 + 0x10))
1001f81f  long double temp0 = fconvert.t(0f)
1001f81f  x87_r7_3 - temp0
1001f825  void* eax_8
1001f825  eax_8.w = (x87_r7_3 < temp0 ? 1 : 0) << 8
1001f825      | (is_unordered.t(x87_r7_3, temp0) ? 1 : 0) << 0xa
1001f825      | (x87_r7_3 == temp0 ? 1 : 0) << 0xe
1001f825  
1001f82a  if ((eax_8:1.b & 0x40) == 0)
1001f82c      var_80_1 = 1.66359351e-40f
1001f834      edi = 1.66359351e-40f
1001f834  
1001f83e  long double x87_r7_4 = fconvert.t(*(data_10064478 + 0x10))
1001f841  long double temp1 = fconvert.t(0f)
1001f841  x87_r7_4 - temp1
1001f847  eax_8.w = (x87_r7_4 < temp1 ? 1 : 0) << 8
1001f847      | (is_unordered.t(x87_r7_4, temp1) ? 1 : 0) << 0xa
1001f847      | (x87_r7_4 == temp1 ? 1 : 0) << 0xe
1001f847  
1001f84c  if ((eax_8:1.b & 0x40) == 0 && j_sub_10022990(arg1) != 0)
1001f85b      edi |= 0x1000
1001f861      var_80_1 = edi
1001f861  
1001f865  arg1[0x419] = 0
1001f874  long double x87_r7_6 = j_sub_1000e120() - fconvert.t(5f)
1001f87a  long double temp2 = fconvert.t(arg1[0x2ce])
1001f87a  x87_r7_6 - temp2
1001f880  eax_8.w = (x87_r7_6 < temp2 ? 1 : 0) << 8
1001f880      | (is_unordered.t(x87_r7_6, temp2) ? 1 : 0) << 0xa
1001f880      | (x87_r7_6 == temp2 ? 1 : 0) << 0xe
1001f880  
1001f885  if ((eax_8:1.b & 1) != 0)
1001f899      long double x87_r7_8 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001f89f      long double temp3_1 = fconvert.t(arg1[0x1a4])
1001f89f      x87_r7_8 - temp3_1
1001f8a5      int32_t eax_10
1001f8a5      eax_10.w = (x87_r7_8 < temp3_1 ? 1 : 0) << 8
1001f8a5          | (is_unordered.t(x87_r7_8, temp3_1) ? 1 : 0) << 0xa
1001f8a5          | (x87_r7_8 == temp3_1 ? 1 : 0) << 0xe
1001f8a5      
1001f8aa      if ((eax_10:1.b & 1) != 0)
1001f8be          long double x87_r7_10 =
1001f8be              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001f8c4          long double temp5_1 = fconvert.t(0.5)
1001f8c4          x87_r7_10 - temp5_1
1001f8ca          int32_t eax_12
1001f8ca          eax_12.w = (x87_r7_10 < temp5_1 ? 1 : 0) << 8
1001f8ca              | (is_unordered.t(x87_r7_10, temp5_1) ? 1 : 0) << 0xa
1001f8ca              | (x87_r7_10 == temp5_1 ? 1 : 0) << 0xe
1001f8cf          int32_t var_98_2
1001f8cf          int32_t __saved_ebp_6
1001f8cf          
1001f8cf          if ((eax_12:1.b & 1) == 0)
1001f8dc              __saved_ebp_6 = 2
1001f8de              var_98_2 = arg1[1]
1001f8cf          else
1001f8d4              __saved_ebp_6 = 0
1001f8d6              var_98_2 = arg1[1]
1001f8d6          
1001f8df          j_sub_100371b0(var_98_2, __saved_ebp_6)
1001f8df  
1001f8f2  if (j_sub_10023970(arg1) != 0)
1001f8ff      if (j_sub_100228c0(arg1) == 0)
1001f91d          j_sub_10034b20(&arg1[0x2d0])
1001f929          j_sub_1002fe30(&arg1[0x2f0])
1001f92f          j_sub_1001fcf0(arg1)
1001f942          return 0
1001f942      
1001f902      j_sub_100205c0(arg1)
1001f915      return 0
1001f915  
1001f948  long double x87_r7_11 = fconvert.t(*(data_100643ac + 0x10))
1001f94b  long double temp4 = fconvert.t(0f)
1001f94b  x87_r7_11 - temp4
1001f951  void* eax_18
1001f951  eax_18.w = (x87_r7_11 < temp4 ? 1 : 0) << 8
1001f951      | (is_unordered.t(x87_r7_11, temp4) ? 1 : 0) << 0xa
1001f951      | (x87_r7_11 == temp4 ? 1 : 0) << 0xe
1001f951  
1001f956  if ((eax_18:1.b & 0x40) == 0)
1001f959      j_sub_10026440(arg1)
1001f959  
1001f965  void* eax_19
1001f965  int32_t __saved_ebp_16
1001f965  eax_19, __saved_ebp_16 = j_sub_1001d760(arg1, edi, 0)
1001f96a  void* esi = eax_19
1001f96a  
1001f975  if (esi == 0)
1001fbac      label_1001fbac:
1001fbac      int32_t __saved_ebp_15 = arg1[0x1a4]
1001fbae      j_sub_10029150(arg1)
1001fbae      unimplemented  {call j_sub_10029150}
1001f975  else
1001f97b      long double st0_4 = j_sub_1000e120()
1001f980      long double temp6_1 = fconvert.t(arg1[0x2be])
1001f980      st0_4 - temp6_1
1001f986      eax_19.w = (st0_4 < temp6_1 ? 1 : 0) << 8
1001f986          | (is_unordered.t(st0_4, temp6_1) ? 1 : 0) << 0xa
1001f986          | (st0_4 == temp6_1 ? 1 : 0) << 0xe
1001f986      
1001f98b      if ((eax_19:1.b & 0x41) == 0)
1001f991          long double st0_5 = j_sub_1000e120()
1001f99c          int32_t __saved_ebp_12 = __saved_ebp_16
1001f9a3          int32_t edx_4 = arg1[0x429] - 3
1001f9ac          int32_t edx_5 = neg.d(edx_4)
1001f9b6          arg1[0x2be] = fconvert.s(st0_5 + fconvert.t(0.5))
1001f9b6          
1001f9e8          if (j_sub_10030260(&arg1[0x2f0], &arg1[0x1a5], &arg1[0x1b0], edi, esi, 
1001f9e8                  fconvert.s(float.t((sbb.d(edx_5, edx_5, edx_4 != 0) & 0xfffffce0)
1001f9e8                      + 0x5dc))) != 0)
1001f9f1              j_sub_10034b20(&arg1[0x2d0])
1001fa02              arg1[0x2bb] = fconvert.s(j_sub_1000e120() + fconvert.t(5f))
1001fa08              j_sub_1001f210(arg1)
1001fa1b              return 0
1001fa1b      
1001fa1e      j_sub_10021500(arg1)
1001fa2b      j_sub_10020ed0(arg1, &arg1[0x2d0])
1001fa4b      int32_t var_60
1001fa4b      void var_30
1001fa4b      __builtin_memcpy(dest: &var_60, src: j_sub_100343a0(&var_30, &arg1[0x2d0], esi, edi), 
1001fa4b          n: 0x30)
1001fa4b      
1001fa53      if (var_60 != 0)
1001fa56          j_sub_10034af0(&arg1[0x2d0])
1001fa5e          arg1[0x2ba] = 0
1001fa5e      
1001fa70      j_sub_10025560(arg1, &var_60, 1)
1001fa7e      char var_4c
1001fa7e      float* eax_27
1001fa7e      
1001fa7e      if ((var_4c & 3) == 0)
1001faa5          float var_7c
1001faa5          float var_78
1001faa5          float var_74
1001faa5          float var_70
1001faa5          
1001faa5          if ((var_4c & 4) == 0)
1001fb3d              int32_t var_9c_7
1001fb3d              float* var_98_11
1001fb3d              
1001fb3d              if (j_sub_10031270(&arg1[0x2d0], esi, var_80_1, &var_7c) == 0)
1001fb81                  var_98_11 = &arg1[0x423]
1001fb82                  void var_48
1001fb82                  var_9c_7 = &var_48
1001fb3d              else
1001fb53                  var_98_11 = &arg1[0x423]
1001fb54                  var_9c_7 = &var_70
1001fb55                  var_70 = fconvert.s(fconvert.t(var_7c) - fconvert.t(arg1[0x1a5]))
1001fb63                  float var_6c_2 = fconvert.s(fconvert.t(var_78) - fconvert.t(arg1[0x1a6]))
1001fb71                  float var_68_2 = fconvert.s(fconvert.t(var_74) - fconvert.t(arg1[0x1a7]))
1001fb71              
1001fb83              j_sub_10041790(var_9c_7, var_98_11)
1001fb88              goto label_1001fb8b
1001fb88          
1001fab9          long double x87_r7_19 =
1001fab9              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1001fac5          long double x87_r6_2 = fconvert.t(arg1[0x1a4]) * fconvert.t(0.80000000000000004)
1001facb          x87_r6_2 - x87_r7_19
1001facd          eax_27.w = (x87_r6_2 < x87_r7_19 ? 1 : 0) << 8
1001facd              | (is_unordered.t(x87_r6_2, x87_r7_19) ? 1 : 0) << 0xa
1001facd              | (x87_r6_2 == x87_r7_19 ? 1 : 0) << 0xe
1001facd          
1001fad2          if ((eax_27:1.b & 0x41) == 0)
1001fade              j_sub_10022a60(arg1, &var_7c)
1001faf9              var_70 = fconvert.s(fconvert.t(var_7c) - fconvert.t(arg1[0x1a5]))
1001fb07              float var_6c_1 = fconvert.s(fconvert.t(var_78) - fconvert.t(arg1[0x1a6]))
1001fb15              float var_68_1 = fconvert.s(fconvert.t(var_74) - fconvert.t(arg1[0x1a7]))
1001fb19              j_sub_10041790(&var_70, &arg1[0x423])
1001fb8b              label_1001fb8b:
1001fb8b              unimplemented  {fld st0, dword [ebx+0x1094]}
1001fb91              unimplemented  {fmul st0, qword [&data_10058018]}
1001fb97              arg1[0x425] = fconvert.s(unimplemented  {fstp dword [ebx+0x1094], st0})
1001fb97              unimplemented  {fstp dword [ebx+0x1094], st0}
1001fa7e      else
1001fa8c          float* var_3c
1001fa8c          arg1[0x423] = var_3c
1001fa92          int32_t var_38
1001fa92          arg1[0x424] = var_38
1001fa98          int32_t var_34
1001fa98          arg1[0x425] = var_34
1001fa98      
1001fb9d      eax_27.b = var_4c
1001fb9d      
1001fba4      if ((eax_27.b & 8) == 0)
1001fba4          goto label_1001fbac
1001fba4  
1001fbc4  return 1

1001fbc5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1001fbe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fc00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fc20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fc40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fc60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fc80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fcc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001fce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001fcf0    int32_t sub_1001fcf0(void* arg1)

1001fd00  int32_t result = j_sub_1001d3a0(arg1, "battle fight", &data_1006294c)
1001fd08  *(arg1 + 0x68c) = j_sub_1001fd30
1001fd13  return result

1001fd14                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1001fd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1001fd30    int32_t sub_1001fd30(int32_t* arg1)

1001fd4c  if (j_sub_100216d0(arg1) != 0)
1001fd4e      j_sub_1001ebd0(arg1)
1001fd61      return 0
1001fd61  
1001fd6d  if (j_sub_100216f0(arg1) != 0)
1001fd6f      j_sub_1001eae0(arg1)
1001fd82      return 0
1001fd82  
1001fd8d  if (j_sub_100216a0(arg1) != 0)
1001fd90      j_sub_1001ed80(arg1)
1001fda3      return 0
1001fda3  
1001fda4  int32_t eax_6 = arg1[0x419]
1001fdac  int32_t* var_16c_4
1001fdac  
1001fdac  if (eax_6 != 0)
1001fddc      void var_128
1001fddc      void var_7c
1001fddc      __builtin_memcpy(dest: &var_128, src: j_sub_1000abe0(&var_7c, eax_6), n: 0x7c)
1001fddc      
1001fded      if (j_sub_10021710(&var_128) == 0)
1001fe2f          float var_118
1001fe2f          int32_t eax_12 = j_sub_1001ae60(&var_118)
1001fe2f          
1001fe3b          if (eax_12 != 0 && j_sub_10011040(eax_12) != 0)
1001fe56              arg1[0x41b] = var_118
1001fe5c              int32_t var_114
1001fe5c              arg1[0x41c] = var_114
1001fe62              int32_t var_110
1001fe62              arg1[0x41d] = var_110
1001fe68              arg1[0x41a] = eax_12
1001fe68          
1001fe76          j_sub_10021290(arg1, arg1[0x419])
1001fe76          
1001fea3          if (j_sub_1000b750(arg1[2], &arg1[0x1ac], &arg1[0x420], 360f, arg1[0x419]) != 0)
1001fed1              int32_t edi = 0x18fbe
1001fed6              long double x87_r7_3 = fconvert.t(*(data_10064458 + 0x10))
1001fed9              long double temp0 = fconvert.t(0f)
1001fed9              x87_r7_3 - temp0
1001fedf              int32_t eax_17
1001fedf              eax_17.w = (x87_r7_3 < temp0 ? 1 : 0) << 8
1001fedf                  | (is_unordered.t(x87_r7_3, temp0) ? 1 : 0) << 0xa
1001fedf                  | (x87_r7_3 == temp0 ? 1 : 0) << 0xe
1001fedf              
1001fee4              if ((eax_17:1.b & 0x40) == 0)
1001fee6                  edi = 0x1cfbe
1001fee6              
1001fef0              long double x87_r7_4 = fconvert.t(*(data_10064478 + 0x10))
1001fef3              long double temp1 = fconvert.t(0f)
1001fef3              x87_r7_4 - temp1
1001fef9              void* eax_20
1001fef9              eax_20.w = (x87_r7_4 < temp1 ? 1 : 0) << 8
1001fef9                  | (is_unordered.t(x87_r7_4, temp1) ? 1 : 0) << 0xa
1001fef9                  | (x87_r7_4 == temp1 ? 1 : 0) << 0xe
1001fef9              
1001fefe              if ((eax_20:1.b & 0x40) == 0 && j_sub_10022990(arg1) != 0)
1001ff0d                  edi |= 0x1000
1001ff0d              
1001ff1b              j_sub_10020fe0(arg1, &arg1[0x412])
1001ff21              j_sub_10035500(&arg1[0x412])
1001ff27              j_sub_100215e0(arg1)
1001ff2d              j_sub_10021500(arg1)
1001ff3b              void var_ac
1001ff3b              void* var_188 = &var_ac
1001ff3c              int32_t eax_22
1001ff3c              int80_t st0_3
1001ff3c              eax_22, st0_3 = j_sub_10022e10(var_188, arg1, edi)
1001ff4f              int32_t var_158
1001ff4f              __builtin_memcpy(dest: &var_158, src: eax_22, n: 0x30)
1001ff4f              
1001ff57              if (var_158 != 0)
1001ff60                  j_sub_10034af0(&arg1[0x2d0])
1001ff68                  arg1[0x2ba] = 0
1001ff68              
1001ff7a              j_sub_10025560(arg1, &var_158, 0)
1001ff80              j_sub_10023ce0(arg1)
1001ff86              j_sub_10024590(arg1)
1001ff86              
1001ff96              if (j_sub_100228c0(arg1) != 0)
1001ff99                  j_sub_100205c0(arg1)
1001ff99              
1001ffaf              return 1
1001ffaf          
1001feb0          var_16c_4 = arg1
1001feb0          
1001feb1          if (j_sub_10022930(arg1) != 0)
1001feb7              j_sub_10020050(var_16c_4)
1001feca              return 0
1001fded      else
1001fdfa          var_16c_4 = arg1
1001fdfa          
1001fdfb          if (j_sub_100222e0(arg1) != 0)
1001fe02              float var_15c = fconvert.s(j_sub_10022650(var_16c_4))
1001fe10              arg1[0x2bf] = fconvert.s(j_sub_1000e120() + fconvert.t(var_15c))
1001fe16              j_sub_1001ec50(arg1)
1001fe29              return 0
1001fdac  else
1001fdae      var_16c_4 = arg1
1001fdae  
1001fdaf  j_sub_1001f6e0(var_16c_4)
1001fdc2  return 0

1001ffb0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
1001ffc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1001ffe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10020050    int32_t sub_10020050(void* arg1)

10020060  int32_t result = j_sub_1001d3a0(arg1, "battle chase", &data_1006294c)
1002006d  long double x87_r7_1 = j_sub_1000e120() + fconvert.t(10f)
10020073  *(arg1 + 0x68c) = j_sub_100200a0
1002007d  *(arg1 + 0xaf4) = fconvert.s(x87_r7_1)
10020084  return result

10020085                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

100200a0    int32_t sub_100200a0(int32_t* arg1)

100200bc  if (j_sub_100216d0(arg1) != 0)
100200be      j_sub_1001ebd0(arg1)
100200d1      return 0
100200d1  
100200dd  if (j_sub_100216f0(arg1) != 0)
100200df      j_sub_1001eae0(arg1)
100200f2      return 0
100200f2  
100200fd  if (j_sub_100216a0(arg1) != 0)
10020100      j_sub_1001ed80(arg1)
10020113      return 0
10020113  
10020114  int32_t eax_6 = arg1[0x419]
10020114  
1002011c  if (eax_6 == 0)
1002011f      j_sub_1001f6e0(arg1)
10020132      return 0
10020132  
10020155  if (j_sub_1000b750(arg1[2], &arg1[0x1ac], &arg1[0x420], 360f, eax_6) != 0)
1002015e      j_sub_10034b20(&arg1[0x2d0])
10020164      j_sub_1001fcf0(arg1)
10020177      return 0
10020177  
10020183  if (j_sub_10023970(arg1) != 0)
10020186      j_sub_1001fcf0(arg1)
10020199      return 0
10020199  
100201a2  if (arg1[0x41a] == 0)
100201a5      j_sub_1001f6e0(arg1)
100201b8      return 0
100201b8  
100201bf  float esi = 1.43400477e-40f
100201c4  float var_b4 = 1.43400477e-40f
100201c8  long double x87_r7 = fconvert.t(*(data_10064458 + 0x10))
100201cb  long double temp0 = fconvert.t(0f)
100201cb  x87_r7 - temp0
100201d1  int32_t eax_14
100201d1  eax_14.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100201d1      | (x87_r7 == temp0 ? 1 : 0) << 0xe
100201d1  
100201d6  if ((eax_14:1.b & 0x40) == 0)
100201d8      var_b4 = 1.66359351e-40f
100201e0      esi = 1.66359351e-40f
100201e0  
100201ea  long double x87_r7_1 = fconvert.t(*(data_10064478 + 0x10))
100201ed  long double temp1 = fconvert.t(0f)
100201ed  x87_r7_1 - temp1
100201f3  eax_14.w = (x87_r7_1 < temp1 ? 1 : 0) << 8
100201f3      | (is_unordered.t(x87_r7_1, temp1) ? 1 : 0) << 0xa
100201f3      | (x87_r7_1 == temp1 ? 1 : 0) << 0xe
100201f3  
100201f8  if ((eax_14:1.b & 0x40) == 0 && j_sub_10022990(arg1) != 0)
10020207      esi |= 0x1000
1002020d      var_b4 = esi
1002020d  
10020217  int32_t eax_17 = arg1[0x419]
1002021d  int32_t ecx_2 = arg1[0x41a]
10020223  float var_98 = arg1[0x41b]
1002022b  int32_t var_70 = eax_17
10020235  int32_t var_8c = ecx_2
10020247  int32_t var_94 = arg1[0x41c]
1002024b  int32_t var_90 = arg1[0x41d]
1002024f  int32_t var_88
1002024f  __builtin_memcpy(dest: &var_88, 
1002024f      src: "\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\x41\x00\x00\x00\x41\x00\x00\x00\x41", 
1002024f      n: 0x18)
1002024f  
10020289  if (j_sub_10030600(&arg1[0x1a5], &var_98) != 0)
1002028b      arg1[0x2bd] = 0
1002028b  
10020295  long double st0_1 = j_sub_1000e120()
1002029a  long double temp2 = fconvert.t(arg1[0x2bd])
1002029a  st0_1 - temp2
100202a0  int32_t eax_19
100202a0  eax_19.w = (st0_1 < temp2 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp2) ? 1 : 0) << 0xa
100202a0      | (st0_1 == temp2 ? 1 : 0) << 0xe
100202a0  
100202a5  if ((eax_19:1.b & 0x41) == 0)
100202a8      j_sub_1001f6e0(arg1)
100202bb      return 0
100202bb  
100202bc  long double st0_2 = j_sub_1000e120()
100202c1  long double temp3 = fconvert.t(arg1[0x2be])
100202c1  st0_2 - temp3
100202c7  eax_19.w = (st0_2 < temp3 ? 1 : 0) << 8 | (is_unordered.t(st0_2, temp3) ? 1 : 0) << 0xa
100202c7      | (st0_2 == temp3 ? 1 : 0) << 0xe
100202c7  
100202cc  if ((eax_19:1.b & 0x41) == 0)
100202eb      arg1[0x2be] = fconvert.s(j_sub_1000e120() + fconvert.t(1f))
100202eb      
10020303      if (j_sub_10030260(&arg1[0x2f0], &arg1[0x1a5], &arg1[0x1b0], esi, &var_98, 500f) != 0)
10020317          arg1[0x2bb] = fconvert.s(j_sub_1000e120() + fconvert.t(5f))
1002031d          j_sub_10034b20(&arg1[0x2d0])
10020323          j_sub_10020ad0(arg1)
10020336          return 0
10020336  
10020340  j_sub_10021290(arg1, arg1[0x419])
10020346  j_sub_10021500(arg1)
10020353  j_sub_10020ed0(arg1, &arg1[0x2d0])
1002037d  int32_t var_60
1002037d  void var_30
1002037d  __builtin_memcpy(dest: &var_60, src: j_sub_100343a0(&var_30, &arg1[0x2d0], &var_98, esi), 
1002037d      n: 0x30)
1002037d  
10020387  if (var_60 != 0)
1002038a      j_sub_10034af0(&arg1[0x2d0])
10020392      arg1[0x2ba] = 0
10020392  
1002039f  j_sub_10025560(arg1, &var_60, 0)
100203b0  char var_4c
100203b0  
100203b0  if ((var_4c & 3) == 0)
100203f5      int32_t var_cc_5
100203f5      void* var_c8_7
100203f5      float var_a4
100203f5      
100203f5      if (j_sub_10031270(&arg1[0x2d0], &var_98, var_b4, &var_a4) == 0)
10020439          var_c8_7 = &arg1[0x423]
1002043a          void var_48
1002043a          var_cc_5 = &var_48
100203f5      else
1002040b          var_c8_7 = &arg1[0x423]
1002040c          float var_b0
1002040c          var_cc_5 = &var_b0
1002040d          var_b0 = fconvert.s(fconvert.t(var_a4) - fconvert.t(arg1[0x1a5]))
1002041b          float var_a0
1002041b          float var_ac_1 = fconvert.s(fconvert.t(var_a0) - fconvert.t(arg1[0x1a6]))
10020429          float var_9c
10020429          float var_a8_1 = fconvert.s(fconvert.t(var_9c) - fconvert.t(arg1[0x1a7]))
10020429      
1002043b      j_sub_10041790(var_cc_5, var_c8_7)
1002044f      arg1[0x425] = fconvert.s(fconvert.t(arg1[0x425]) * fconvert.t(0.5))
100203b0  else
100203c7      int32_t var_3c
100203c7      arg1[0x423] = var_3c
100203cd      int32_t var_38
100203cd      arg1[0x424] = var_38
100203d3      int32_t var_34
100203d3      arg1[0x425] = var_34
100203d3  
10020464  if (arg1[0x2e0] == arg1[0x41a])
10020466      arg1[0x2bd] = 0
10020466  
10020471  if ((var_4c & 8) == 0)
10020479      int32_t __saved_ebp_14 = arg1[0x1a4]
1002047b      j_sub_10029150(arg1)
1002047b  
1002048e  if (j_sub_100228c0(arg1) != 0)
10020491      j_sub_100205c0(arg1)
10020491  
100204a7  return 1

100204a8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
100204c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100204e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100205a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100205c0    int32_t sub_100205c0(void* arg1)

100205d0  int32_t result = j_sub_1001d3a0(arg1, "battle retreat", &data_1006294c)
100205d8  *(arg1 + 0x68c) = j_sub_10020600
100205e3  return result

100205e4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................

10020600    int32_t sub_10020600(int32_t* arg1)

1002061c  if (j_sub_100216d0(arg1) != 0)
1002061e      j_sub_1001ebd0(arg1)
10020631      return 0
10020631  
1002063d  if (j_sub_100216f0(arg1) != 0)
1002063f      j_sub_1001eae0(arg1)
10020652      return 0
10020652  
1002065d  if (j_sub_100216a0(arg1) != 0)
10020660      j_sub_1001ed80(arg1)
10020673      return 0
10020673  
10020674  int32_t eax_6 = arg1[0x419]
10020674  
1002067c  if (eax_6 == 0)
1002067f      j_sub_1001f6e0(arg1)
10020692      return 0
10020692  
100206af  void var_f8
100206af  void var_7c
100206af  __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_7c, eax_6), n: 0x7c)
100206af  
100206c3  if (j_sub_10021710(&var_f8) != 0)
100206c6      j_sub_1001f6e0(arg1)
100206d9      return 0
100206d9  
100206e0  float edi = 1.43400477e-40f
100206e5  int32_t var_178 = 0x18fbe
100206e9  long double x87_r7 = fconvert.t(*(data_10064458 + 0x10))
100206ec  long double temp0 = fconvert.t(0f)
100206ec  x87_r7 - temp0
100206f2  int32_t eax_9
100206f2  eax_9.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100206f2      | (x87_r7 == temp0 ? 1 : 0) << 0xe
100206f2  
100206f7  if ((eax_9:1.b & 0x40) == 0)
100206f9      var_178 = 0x1cfbe
10020701      edi = 1.66359351e-40f
10020701  
1002070d  j_sub_10021290(arg1, arg1[0x419])
1002070d  
1002071d  if (j_sub_10022930(arg1) != 0)
10020726      j_sub_1002fe30(&arg1[0x2f0])
1002072c      j_sub_10020050(arg1)
1002073f      return 0
1002073f  
10020768  if (j_sub_1000b750(arg1[2], &arg1[0x1ac], &arg1[0x420], 360f, arg1[0x419]) == 0)
1002076b      j_sub_1001f6e0(arg1)
1002077e      return 0
1002077e  
10020784  long double x87_r7_1 = fconvert.t(*(data_100643ac + 0x10))
10020787  long double temp1 = fconvert.t(0f)
10020787  x87_r7_1 - temp1
1002078d  void* eax_17
1002078d  eax_17.w = (x87_r7_1 < temp1 ? 1 : 0) << 8
1002078d      | (is_unordered.t(x87_r7_1, temp1) ? 1 : 0) << 0xa
1002078d      | (x87_r7_1 == temp1 ? 1 : 0) << 0xe
1002078d  
10020792  if ((eax_17:1.b & 0x40) == 0)
10020795      j_sub_100263d0(arg1)
10020795  
100207a6  void* esi_1 = j_sub_1001d760(arg1, edi, 1)
100207ad  void* var_174 = esi_1
100207ad  
100207b1  if (esi_1 == 0)
100207b9      int32_t __saved_ebp_13 = arg1[0x1a4]
100207bb      j_sub_10029150(arg1)
100207d1      return 1
100207d1  
100207d2  long double st0_1 = j_sub_1000e120()
100207d7  long double temp2 = fconvert.t(arg1[0x2be])
100207d7  st0_1 - temp2
100207dd  void* eax_18
100207dd  eax_18.w = (st0_1 < temp2 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp2) ? 1 : 0) << 0xa
100207dd      | (st0_1 == temp2 ? 1 : 0) << 0xe
100207dd  
100207e2  if ((eax_18:1.b & 0x41) == 0)
10020803      arg1[0x2be] = fconvert.s(j_sub_1000e120() + fconvert.t(1f))
10020803      
1002081b      if (j_sub_10030260(&arg1[0x2f0], &arg1[0x1a5], &arg1[0x1b0], edi, esi_1, 500f) != 0)
10020824          j_sub_10034b20(&arg1[0x2d0])
10020835          arg1[0x2bb] = fconvert.s(j_sub_1000e120() + fconvert.t(5f))
1002083b          j_sub_10020ad0(arg1)
1002084e          return 0
1002084e  
10020851  j_sub_10021500(arg1)
1002085e  j_sub_10020ed0(arg1, &arg1[0x2d0])
1002087e  int32_t var_158
1002087e  void var_128
1002087e  __builtin_memcpy(dest: &var_158, src: j_sub_100343a0(&var_128, &arg1[0x2d0], esi_1, edi), 
1002087e      n: 0x30)
1002087e  
10020886  if (var_158 != 0)
10020889      j_sub_10034af0(&arg1[0x2d0])
10020891      arg1[0x2ba] = 0
10020891  
100208a3  j_sub_10025560(arg1, &var_158, 0)
100208b0  j_sub_10020fe0(arg1, &arg1[0x412])
100208b6  j_sub_10035500(&arg1[0x412])
100208c4  char var_144
100208c4  
100208c4  if ((var_144 & 1) != 0)
100208d2      int32_t var_134
100208d2      arg1[0x423] = var_134
100208d8      int32_t var_130
100208d8      arg1[0x424] = var_130
100208de      int32_t var_12c
100208de      arg1[0x425] = var_12c
100208c4  else if ((var_144 & 8) == 0)
10020901      long double st0_6 = j_sub_1002a690(arg1[0x1a2], 4, 0f, 1f)
10020906      long double temp3_1 = fconvert.t(0.29999999999999999)
10020906      st0_6 - temp3_1
10020906      
10020914      if ((((st0_6 < temp3_1 ? 1 : 0) << 8 | (is_unordered.t(st0_6, temp3_1) ? 1 : 0) << 0xa
10020914              | (st0_6 == temp3_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
1002093e          int32_t var_190_8
1002093e          void* var_18c_11
1002093e          float var_164
1002093e          
1002093e          if (j_sub_10031270(&arg1[0x2d0], var_174, var_178, &var_164) == 0)
10020982              var_18c_11 = &arg1[0x423]
10020983              void var_140
10020983              var_190_8 = &var_140
1002093e          else
10020954              var_18c_11 = &arg1[0x423]
10020955              float var_170
10020955              var_190_8 = &var_170
10020956              var_170 = fconvert.s(fconvert.t(var_164) - fconvert.t(arg1[0x1a5]))
10020964              float var_160
10020964              float var_16c_1 = fconvert.s(fconvert.t(var_160) - fconvert.t(arg1[0x1a6]))
10020972              float var_15c
10020972              float var_168_1 = fconvert.s(fconvert.t(var_15c) - fconvert.t(arg1[0x1a7]))
10020972          
10020984          j_sub_10041790(var_190_8, var_18c_11)
1002099e          int32_t var_18c_12 = arg1[0x1a4]
100209a0          arg1[0x425] = fconvert.s(fconvert.t(arg1[0x425]) * fconvert.t(0.5))
100209a6          j_sub_10029150(arg1)
10020914      else
10020917          j_sub_10023ce0(arg1)
10020917  
100209af  j_sub_10024590(arg1)
100209c6  return 1

100209c7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
100209e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10020ad0    int32_t sub_10020ad0(void* arg1)

10020ae0  int32_t result = j_sub_1001d3a0(arg1, "battle NBG", &data_1006294c)
10020ae8  *(arg1 + 0x68c) = j_sub_10020b10
10020af3  return result

10020af4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10020b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10020b10    int32_t sub_10020b10(int32_t* arg1)

10020b2d  if (j_sub_100216d0(arg1) != 0)
10020b2f      j_sub_1001ebd0(arg1)
10020b43      return 0
10020b43  
10020b4f  if (j_sub_100216f0(arg1) != 0)
10020b51      j_sub_1001eae0(arg1)
10020b65      return 0
10020b65  
10020b70  if (j_sub_100216a0(arg1) != 0)
10020b73      j_sub_1001ed80(arg1)
10020b87      return 0
10020b87  
10020b88  int32_t eax_6 = arg1[0x419]
10020b88  
10020b90  if (eax_6 == 0)
10020b93      j_sub_1001f210(arg1)
10020ba7      return 0
10020ba7  
10020bc1  void var_128
10020bc1  void var_7c
10020bc1  __builtin_memcpy(dest: &var_128, src: j_sub_1000abe0(&var_7c, eax_6), n: 0x7c)
10020bc1  
10020bd2  if (j_sub_10021710(&var_128) != 0)
10020bd5      j_sub_1001f210(arg1)
10020be9      return 0
10020be9  
10020bf0  int32_t var_15c = 0x18fbe
10020bf8  long double x87_r7 = fconvert.t(*(data_10064458 + 0x10))
10020bfb  long double temp0 = fconvert.t(0f)
10020bfb  x87_r7 - temp0
10020c01  int32_t eax_9
10020c01  eax_9.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10020c01      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10020c01  
10020c06  if ((eax_9:1.b & 0x40) == 0)
10020c08      var_15c = 0x1cfbe
10020c08  
10020c15  long double x87_r7_1 = fconvert.t(*(data_10064478 + 0x10))
10020c18  long double temp1 = fconvert.t(0f)
10020c18  x87_r7_1 - temp1
10020c1e  void* eax_11
10020c1e  eax_11.w = (x87_r7_1 < temp1 ? 1 : 0) << 8
10020c1e      | (is_unordered.t(x87_r7_1, temp1) ? 1 : 0) << 0xa
10020c1e      | (x87_r7_1 == temp1 ? 1 : 0) << 0xe
10020c1e  
10020c23  if ((eax_11:1.b & 0x40) == 0 && j_sub_10022990(arg1) != 0)
10020c36      int32_t eax_13
10020c36      eax_13:1.b = var_15c:1.b | 0x10
10020c39      var_15c = eax_13
10020c39  
10020c42  float var_118
10020c42  int32_t eax_14 = j_sub_1001ae60(&var_118)
10020c42  
10020c4e  if (eax_14 != 0 && j_sub_10011040(eax_14) != 0)
10020c69      arg1[0x41b] = var_118
10020c6f      int32_t var_114
10020c6f      arg1[0x41c] = var_114
10020c75      int32_t var_110
10020c75      arg1[0x41d] = var_110
10020c7b      arg1[0x41a] = eax_14
10020c7b  
10020c8d  float esi_2 = j_sub_1002fe50(&arg1[0x2f0])
10020c96  void* eax_17
10020c96  
10020c96  if (esi_2 == 0)
10020ccb      arg1[0x2bb] = 0
10020c96  else if (j_sub_10030600(&arg1[0x1a5], esi_2) != 0)
10020cb1      long double x87_r7_2 = fconvert.t(*(data_10064468 + 0x10))
10020cb4      long double temp3_1 = fconvert.t(0f)
10020cb4      x87_r7_2 - temp3_1
10020cba      eax_17.w = (x87_r7_2 < temp3_1 ? 1 : 0) << 8
10020cba          | (is_unordered.t(x87_r7_2, temp3_1) ? 1 : 0) << 0xa
10020cba          | (x87_r7_2 == temp3_1 ? 1 : 0) << 0xe
10020cba      
10020cbf      if ((eax_17:1.b & 0x40) == 0)
10020cc3          j_sub_100262c0(arg1, esi_2)
10020cc3      
10020ccb      arg1[0x2bb] = 0
10020ccb  
10020cd1  long double st0 = j_sub_1000e120()
10020cd6  long double temp2 = fconvert.t(arg1[0x2bb])
10020cd6  st0 - temp2
10020cdc  eax_17.w = (st0 < temp2 ? 1 : 0) << 8 | (is_unordered.t(st0, temp2) ? 1 : 0) << 0xa
10020cdc      | (st0 == temp2 ? 1 : 0) << 0xe
10020cdc  
10020ce1  if ((eax_17:1.b & 0x41) == 0)
10020ce4      j_sub_1002fe00(&arg1[0x2f0])
10020ce4      
10020cf5      if (j_sub_1002fe50(&arg1[0x2f0]) == 0)
10020d0c          j_sub_1001fcf0(arg1)
10020d20          return 0
10020d20      
10020cf7      j_sub_100205c0(arg1)
10020d0b      return 0
10020d0b  
10020d22  j_sub_10021500(arg1)
10020d2f  j_sub_10020ed0(arg1, &arg1[0x2d0])
10020d41  int32_t* var_184 = &arg1[0x2d0]
10020d42  void var_ac
10020d42  int32_t* var_188 = &var_ac
10020d56  int32_t var_158
10020d56  __builtin_memcpy(dest: &var_158, src: j_sub_100343a0(var_188, var_184, esi_2, var_15c), 
10020d56      n: 0x30)
10020d56  
10020d5e  if (var_158 != 0)
10020d61      j_sub_10034af0(&arg1[0x2d0])
10020d69      arg1[0x2bb] = 0
10020d69  
10020d7b  j_sub_10025560(arg1, &var_158, 0)
10020d88  j_sub_10020fe0(arg1, &arg1[0x412])
10020d8d  int32_t ecx_3 = arg1[0x419]
10020d94  var_188 = arg1
10020d95  j_sub_10021290(var_188, ecx_3)
10020d9b  j_sub_10035500(&arg1[0x412])
10020da9  char var_144
10020da9  
10020da9  if ((var_144 & 1) == 0)
10020dcc      j_sub_10023ce0(arg1)
10020da9  else
10020db7      int32_t var_134
10020db7      arg1[0x423] = var_134
10020dbd      int32_t var_130
10020dbd      arg1[0x424] = var_130
10020dc3      int32_t var_12c
10020dc3      arg1[0x425] = var_12c
10020dc3  
10020dd5  j_sub_10024590(arg1)
10020dd5  
10020de3  if ((var_144 & 8) == 0)
10020deb      int32_t var_170_20 = arg1[0x1a4]
10020ded      j_sub_10029150(arg1)
10020ded  
10020e04  return 1

10020e05                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
10020e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10020ed0    int32_t* sub_10020ed0(void* arg1, int32_t* arg2)

10020edb  *arg2 = *(arg1 + 0x10)
10020ee0  arg2[1] = *(arg1 + 0x14)
10020ee6  arg2[2] = *(arg1 + 0x18)
10020eec  arg2[3] = *(arg1 + 0x1c)
10020ef2  arg2[4] = *(arg1 + 0x20)
10020ef8  arg2[5] = *(arg1 + 0x24)
10020efe  arg2[6] = *(arg1 + 0x48)
10020f04  arg2[7] = *(arg1 + 0x4c)
10020f0a  arg2[8] = *(arg1 + 0x50)
10020f10  arg2[9] = *(arg1 + 8)
10020f16  arg2[0xa] = *(arg1 + 4)
10020f1f  arg2[0xb] = *(arg1 + 0x690)
10020f25  int32_t edx_13 = arg2[0x18] & 0xfffffffd
10020f28  arg2[0x18] = edx_13
10020f28  
10020f2f  if ((*(arg1 + 0x28) & 4) != 0)
10020f34      arg2[0x18] = edx_13 | 2
10020f34  
10020f3a  int32_t edx_16 = arg2[0x18] & 0xffffffdf
10020f3d  arg2[0x18] = edx_16
10020f3d  
10020f4a  if ((*(arg1 + 0x28) & 0x20) != 0 && *(arg1 + 0x29) u> 0)
10020f4f      arg2[0x18] = edx_16 | 0x20
10020f4f  
10020f55  int32_t edx_19 = arg2[0x18] & 0xffffffef
10020f58  arg2[0x18] = edx_19
10020f58  
10020f65  if ((*(arg1 + 0x28) & 8) != 0 && *(arg1 + 0x29) u> 0)
10020f6a      arg2[0x18] = edx_19 | 0x10
10020f6a  
10020f71  if ((*(arg1 + 0x28) & 1) == 0)
10020f7c      arg2[0xc] = 2
10020f71  else
10020f73      arg2[0xc] = 4
10020f73  
10020f89  arg2[0xd] = *(arg1 + 0x1080)
10020f92  arg2[0xe] = *(arg1 + 0x1084)
10020f9b  arg2[0xf] = *(arg1 + 0x1088)
10020f9e  return arg2

10020f9f                                                                                               90                                 .
10020fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10020fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10020fe0    char* sub_10020fe0(void* arg1, int32_t* arg2)

10020ff2  *arg2 = *(arg1 + 4)
10020ff4  arg2[1] = arg1 + 0x6c0
10020ffb  char* result = j_sub_1000d960(*(arg1 + 0x78))
10021003  arg2[4] = result
10021007  return result

10021008                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................

10021020    int32_t sub_10021020(int32_t arg1)

10021033  *(arg1 + 0x764) = sx.d(*(arg1 + 0x9a))
10021039  int32_t eax
10021039  eax.w = *(arg1 + 0xaa)
10021039  
10021043  if (eax.w != 0)
1002104d      char* eax_1
1002104d      int32_t ecx_2
1002104d      int32_t edx_1
1002104d      eax_1, ecx_2, edx_1 = j_sub_1000da20(sx.d(eax.w))
1002105a      int32_t eax_2
1002105a      int32_t ecx_3
1002105a      int32_t edx_2
1002105a      eax_2, ecx_3, edx_2 = sub_10045cb0(eax_1, edx_1, ecx_2, eax_1, "p_quad")
1002105a      
10021064      if (eax_2 != 0)
1002108b          int32_t eax_3
1002108b          int32_t ecx_4
1002108b          int32_t edx_4
1002108b          eax_3, ecx_4, edx_4 =
1002108b              sub_10045cb0(eax_2, edx_2, ecx_3, eax_1, "p_invulnerability")
1002108b          
10021095          if (eax_3 != 0)
100210b9              int32_t eax_5
100210b9              int32_t ecx_5
100210b9              int32_t edx_5
100210b9              eax_5, ecx_5, edx_5 = sub_10045cb0(eax_3, edx_4, ecx_4, eax_1, "p_rebreather")
100210b9              
100210c3              if (eax_5 != 0)
100210f1                  if (sub_10045cb0(eax_5, edx_5, ecx_5, eax_1, "p_envirosuit") == 0)
10021107                      *(arg1 + 0xb1c) =
10021107                          fconvert.s(j_sub_1000e120() + float.t(sx.d(*(arg1 + 0xac))))
100210c3              else
100210d9                  *(arg1 + 0xb18) =
100210d9                      fconvert.s(j_sub_1000e120() + float.t(sx.d(*(arg1 + 0xac))))
10021095          else
100210ab              *(arg1 + 0xb14) = fconvert.s(j_sub_1000e120() + float.t(sx.d(*(arg1 + 0xac))))
10021064      else
1002107a          *(arg1 + 0xb10) = fconvert.s(j_sub_1000e120() + float.t(sx.d(*(arg1 + 0xac))))
1002107a  
1002110d  long double st0_5 = j_sub_1000e120()
10021118  int32_t eax_7
10021118  int16_t x87control
10021118  int16_t x87control_1
10021118  eax_7, x87control_1 = __ftol(x87control, fconvert.t(*(arg1 + 0xb10)) - st0_5)
1002111f  *(arg1 + 0x9f0) = eax_7
1002111f  
10021125  if (eax_7 s<= 0)
10021127      *(arg1 + 0x9f0) = 0
10021127  
1002112d  long double st0_6 = j_sub_1000e120()
10021138  int32_t eax_8
10021138  int16_t x87control_2
10021138  eax_8, x87control_2 = __ftol(x87control_1, fconvert.t(*(arg1 + 0xb14)) - st0_6)
1002113f  *(arg1 + 0x9f4) = eax_8
1002113f  
10021145  if (eax_8 s<= 0)
10021147      *(arg1 + 0x9f4) = 0
10021147  
1002114d  long double st0_7 = j_sub_1000e120()
10021158  int32_t eax_9
10021158  int16_t x87control_3
10021158  eax_9, x87control_3 = __ftol(x87control_2, fconvert.t(*(arg1 + 0xb18)) - st0_7)
1002115f  *(arg1 + 0x9fc) = eax_9
1002115f  
10021165  if (eax_9 s<= 0)
10021167      *(arg1 + 0x9fc) = 0
10021167  
1002116d  long double st0_8 = j_sub_1000e120()
10021178  int32_t eax_10 = __ftol(x87control_3, fconvert.t(*(arg1 + 0xb1c)) - st0_8)
1002117f  *(arg1 + 0xa00) = eax_10
1002117f  
10021185  if (eax_10 s<= 0)
10021187      *(arg1 + 0xa00) = 0
10021187  
1002118d  eax_10.w = *(arg1 + 0xa0)
1002118d  
10021197  if (eax_10.w != 0)
1002119d      char* eax_12
1002119d      int32_t ecx_7
1002119d      int32_t edx_7
1002119d      eax_12, ecx_7, edx_7 = j_sub_1000da20(sx.d(eax_10.w))
1002119d      
100211b2      if (sub_10045cb0(eax_12, edx_7, ecx_7, eax_12, "i_powershield") == 0)
100211b9          *(arg1 + 0xb0c) = fconvert.s(j_sub_1000e120())
100211b9      
100211c5      double var_8_1 = fconvert.d(fconvert.t(*(arg1 + 0xb0c)))
100211ce      long double x87_r7_20 = j_sub_1000e120() - fconvert.t(0.90000000000000002)
100211d4      long double temp0_1 = fconvert.t(var_8_1)
100211d4      x87_r7_20 - temp0_1
100211d8      eax_10.w = (x87_r7_20 < temp0_1 ? 1 : 0) << 8
100211d8          | (is_unordered.t(x87_r7_20, temp0_1) ? 1 : 0) << 0xa
100211d8          | (x87_r7_20 == temp0_1 ? 1 : 0) << 0xe
100211d8      
100211dd      if ((eax_10:1.b & 1) != 0)
100211df          int32_t eax_13 = *(arg1 + 0x710)
100211e6          *(arg1 + 0xa08) = eax_13
100211ec          *(arg1 + 0xa0c) = eax_13
100211f7          return eax_13
100211f7      
100211f8      *(arg1 + 0xa08) = 0
100211fe      *(arg1 + 0xa0c) = 0
100211fe  
1002120a  return eax_10

1002120b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10021220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10021290    int32_t sub_10021290(void* arg1, int32_t arg2)

100212b5  void var_7c
100212b5  __builtin_memcpy(dest: &var_7c, src: j_sub_1000abe0(&var_7c, arg2), n: 0x7c)
100212c8  float var_6c
100212c8  float var_88 = fconvert.s(fconvert.t(var_6c) - fconvert.t(*(arg1 + 0x694)))
100212d6  float var_68
100212d6  float var_84 = fconvert.s(fconvert.t(var_68) - fconvert.t(*(arg1 + 0x698)))
100212e4  float var_64
100212e4  int32_t eax_2
100212e4  int16_t x87control
100212e4  int16_t x87control_1
100212e4  eax_2, x87control_1 = __ftol(x87control, fconvert.t(var_64) - fconvert.t(*(arg1 + 0x69c)))
100212ed  *(arg1 + 0x9e4) = eax_2
100212f4  int32_t var_80 = 0
10021309  *(arg1 + 0x9e0) = __ftol(x87control_1, j_sub_10043500(&var_88))
10021311  char var_b
10021311  int32_t eax_4
10021311  eax_4.b = var_b
1002131a  __builtin_memset(s: arg1 + 0xa58, c: 0, n: 0x30)
1002131a  
1002136d  if (eax_4 - 1 u<= 0xb)
1002136f      switch (eax_4)
10021376          case 1
10021376              *(arg1 + 0xa58) = 1
1002137e          case 2
1002137e              *(arg1 + 0xa5c) = 1
10021386          case 3
10021386              *(arg1 + 0xa60) = 1
1002138e          case 4
1002138e              *(arg1 + 0xa64) = 1
10021396          case 5
10021396              *(arg1 + 0xa68) = 1
1002139e          case 6
1002139e              *(arg1 + 0xa80) = 1
100213a6          case 7
100213a6              *(arg1 + 0xa6c) = 1
100213ae          case 8
100213ae              *(arg1 + 0xa70) = 1
100213b6          case 9
100213b6              *(arg1 + 0xa74) = 1
100213be          case 0xa
100213be              *(arg1 + 0xa78) = 1
100213c6          case 0xb
100213c6              *(arg1 + 0xa7c) = 1
100213ce          case 0xc
100213ce              *(arg1 + 0xa84) = 1
100213ce  
100213e1  int32_t var_8
100213e1  
100213e1  if ((var_8 & 0x10000) == 0)
100213eb      *(arg1 + 0xa98) = 0
100213e1  else
100213e3      *(arg1 + 0xa98) = 1
100213e3  
100213f4  if ((var_8:1.b & 0x80) == 0)
100213fe      *(arg1 + 0xa94) = 0
100213f4  else
100213f6      *(arg1 + 0xa94) = 1
100213f6  
10021407  if ((var_8:1.b & 2) != 0)
10021409      *(arg1 + 0xa9c) = 1
10021417      return 1
10021417  
10021418  *(arg1 + 0xa9c) = 0
10021426  return 1

10021427                       90                                                                                 .
10021428  uint32_t jump_table_10021428[0xc] = 
10021428  {
10021428      [0x0] =  0x10021376
1002142c      [0x1] =  0x1002137e
10021430      [0x2] =  0x10021386
10021434      [0x3] =  0x1002138e
10021438      [0x4] =  0x10021396
1002143c      [0x5] =  0x1002139e
10021440      [0x6] =  0x100213a6
10021444      [0x7] =  0x100213ae
10021448      [0x8] =  0x100213b6
1002144c      [0x9] =  0x100213be
10021450      [0xa] =  0x100213c6
10021454      [0xb] =  0x100213ce
10021458  }

10021458                                                                          90 90 90 90 90 90 90 90                          ........
10021460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100214a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100214c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100214e0    int32_t sub_100214e0(void* arg1)

100214eb  return sx.d(*(arg1 + 0xb8))

100214ec                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................

10021500    int32_t sub_10021500(void* arg1)

1002150d  if (*(arg1 + 0x724) s> 0)
10021518      j_sub_100370f0(*(arg1 + 4), "Silencer")
10021518  
10021545  if ((j_sub_10003080(arg1 + 0x6b0) & 0x38) != 0 && *(arg1 + 0x9fc) == 0
10021545          && *(arg1 + 0x728) s> 0)
10021550      j_sub_100370f0(*(arg1 + 4), "Rebreather")
10021550  
1002156a  if (*(arg1 + 0xa0c) == 0 && *(arg1 + 0x6d8) s> 0)
10021575      j_sub_100370f0(*(arg1 + 4), "Power Shield")
10021575  
1002157d  int32_t result = *(arg1 + 0xa08)
1002157d  
10021585  if (result == 0)
10021587      result = *(arg1 + 0x6d4)
10021587      
1002158f      if (result s> 0)
1002159a          return j_sub_100370f0(*(arg1 + 4), "Power Screen")
1002159a  
100215a3  return result

100215a4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
100215c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100215e0    void* sub_100215e0(void* arg1)

100215f6  if (*(arg1 + 0x9f0) == 0 && *(arg1 + 0x71c) s> 0)
10021609      return j_sub_100370f0(*(arg1 + 4), "Quad Damage")
10021609  
1002161c  if (*(arg1 + 0x9f4) == 0 && *(arg1 + 0x720) s> 0)
10021627      return j_sub_100370f0(*(arg1 + 4), "Invulnerability")
10021627  
1002162f  return arg1

10021630                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
10021640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10021650    int32_t sub_10021650(void* arg1)

10021655  long double x87_r7 = fconvert.t(*(data_100643ac + 0x10))
10021658  long double temp0 = fconvert.t(0f)
10021658  x87_r7 - temp0
1002165e  void* eax
1002165e  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
1002165e      | (x87_r7 == temp0 ? 1 : 0) << 0xe
1002165e  
10021663  if ((eax:1.b & 0x40) != 0)
10021667      return 0
10021667  
10021674  if (*(arg1 + 0x76c) s> 0)
1002167b      return 1
1002167b  
10021686  int32_t ecx_1
10021686  ecx_1.b = *(arg1 + 0x770) s<= 0
1002168f  return (ecx_1 - 1) & 2

10021690                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

100216a0    int32_t sub_100216a0(void* arg1)

100216a4  int32_t eax = *(arg1 + 0xc)
100216a4  
100216af  if (eax != 2 && eax != 3)
100216b3      return 0
100216b3  
100216b9  return 1

100216ba                                                                                90 90 90 90 90 90                            ......
100216c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100216d0    int32_t sub_100216d0(void* arg1)

100216da  int32_t result
100216da  result.b = *(arg1 + 0xc) == 1
100216dd  return result

100216de                                                                                            90 90                                ..
100216e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100216f0    int32_t sub_100216f0(void* arg1)

100216fa  int32_t result
100216fa  result.b = *(arg1 + 0xc) == 4
100216fd  return result

100216fe                                                                                            90 90                                ..
10021700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10021710    int32_t sub_10021710(void* arg1)

1002171b  if ((*(arg1 + 0x74) & 0x4002) == 0)
1002171d      int32_t eax_1 = *(arg1 + 0xc)
1002171d      
10021734      if (eax_1 s>= 1 && eax_1 s<= data_10064028 && *(arg1 + 0x5c) == 0xff)
10021736          int32_t ecx = *(arg1 + 0x6c)
10021736          
10021747          if (ecx s< 0xad || ecx s> 0xc5)
1002174b              return 0
1002174b  
10021751  return 1

10021752                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10021760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10021780    int32_t sub_10021780(void* arg1)

1002178b  if (*(arg1 + 0x5c) == 0xff)
1002178d      int32_t eax = *(arg1 + 0x6c)
1002178d      
10021798      if (eax s>= 0x2e && eax s<= 0x35)
1002179f          return 1
1002179f  
100217a2  return 0

100217a3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

100217c0    char* sub_100217c0(char* arg1, char* arg2)

100217c4  char* edi = arg1
100217c4  
100217cb  if (*edi != 0)
100217cd      char* ecx_1 = arg2
100217cd      
100217d1      while (true)
100217d1          uint32_t eax
100217d1          eax.b = *ecx_1
100217d3          char* ebx_1 = nullptr
100217d3          
100217d7          if (eax.b != 0)
100217d9              char* esi_1 = ecx_1
100217db              char* edi_1 = edi - ecx_1
100217db              
100217e3              while (true)
100217e3                  eax.b = *(edi_1 + esi_1)
100217e3                  
100217e8                  if (eax.b == 0)
100217e8                      break
100217e8                  
100217ee                  uint32_t eax_2 = sub_100451b1(sx.d(eax.b))
100217ee                  
10021803                  if (sub_100451b1(sx.d(*esi_1)) == eax_2)
10021805                      eax.b = esi_1[1]
10021808                      ebx_1 = &ebx_1[1]
10021809                      esi_1 = &esi_1[1]
10021809                      
1002180c                      if (eax.b != 0)
100217df                          ecx_1 = arg2
100217df                          continue
100217df                  
1002180e                  ecx_1 = arg2
1002180e                  break
1002180e          
10021816          if (*(ebx_1 + ecx_1) == 0)
10021835              return arg1
10021835          
1002181c          edi = &arg1[1]
1002181d          arg1 = edi
1002181d          
10021824          if (*edi == 0)
10021824              break
10021824  
1002182c  return 0

10021836                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10021840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10021860    int32_t sub_10021860(int32_t arg1, int32_t arg2)

10021872  int32_t edi = j_sub_10028f30(arg1)
10021874  int32_t i = 0xffffffff
10021874  
1002187c  while (i != 0)
1002187c      bool cond:0_1 = 0 != *edi
1002187c      edi += 1
1002187c      i -= 1
1002187c      
1002187c      if (not(cond:0_1))
1002187c          break
1002187c  
1002187e  int32_t ecx = not.d(i)
1002188f  char i_8
1002188f  int32_t esi_1
1002188f  int32_t edi_2
1002188f  edi_2, esi_1 = __builtin_memcpy(dest: &i_8, src: edi - ecx, n: ecx u>> 2 << 2)
10021896  __builtin_memcpy(dest: edi_2, src: esi_1, n: ecx & 3)
10021898  char i_1 = i_8
10021898  
1002189e  if (i_1 != 0)
100218a0      char* eax_2 = &i_8
100218a0      
100218af      do
100218a7          *eax_2 = i_1 & 0x7f
100218a9          i_1 = eax_2[1]
100218ac          eax_2 = &eax_2[1]
100218af      while (i_1 != 0)
100218af  
100218c7  for (char* i_2 = sub_10045630(&i_8, &data_1005c660); i_2 != 0; 
100218c7          i_2 = sub_10045630(&i_8, &data_1005c660))
100218cc      int32_t j = 0xffffffff
100218cf      char* edi_3 = &i_2[1]
100218cf      
100218d3      while (j != 0)
100218d3          bool cond:1_1 = 0 != *edi_3
100218d3          edi_3 = &edi_3[1]
100218d3          j -= 1
100218d3          
100218d3          if (not(cond:1_1))
100218d3              break
100218d3      
100218da      sub_100452f0(i_2, &i_2[1], not.d(j))
100218da  
10021901  char* eax_5 = sub_10045630(&i_8, &data_1005c65c)
10021912  char* eax_6
10021912  int32_t ecx_5
10021912  eax_6, ecx_5 = sub_10045630(&i_8, &data_1005c658)
10021912  
10021922  if (eax_5 != 0 && eax_6 != 0)
10021926      char* var_94_2
10021926      char* var_90_3
10021926      int32_t __saved_ebx_2
10021926      
10021926      if (eax_6 u<= eax_5)
1002193a          int32_t i_3 = 0xffffffff
1002193d          char* edi_5 = &eax_5[1]
1002193d          
10021941          while (i_3 != 0)
10021941              bool cond:4_1 = 0 != *edi_5
10021941              edi_5 = &edi_5[1]
10021941              i_3 -= 1
10021941              
10021941              if (not(cond:4_1))
10021941                  break
10021941          
10021945          __saved_ebx_2 = not.d(i_3)
10021946          var_90_3 = &eax_5[1]
10021947          var_94_2 = eax_6
10021926      else
10021929          int32_t i_4 = 0xffffffff
1002192c          void* edi_4 = &eax_6[1]
1002192c          
10021930          while (i_4 != 0)
10021930              bool cond:5_1 = 0 != *edi_4
10021930              edi_4 += 1
10021930              i_4 -= 1
10021930              
10021930              if (not(cond:5_1))
10021930                  break
10021930          
10021934          __saved_ebx_2 = not.d(i_4)
10021935          var_90_3 = &eax_6[1]
10021936          var_94_2 = eax_5
10021936      
10021948      eax_6, ecx_5 = sub_100452f0(var_94_2, var_90_3, __saved_ebx_2)
10021948  
10021950  eax_6.b = i_8
1002195a  char var_7f
1002195a  
1002195a  if (eax_6.b == 0x6d || eax_6.b == 0x4d)
1002195c      ecx_5.b = var_7f
1002195c      
10021968      if (ecx_5.b == 0x72 || ecx_5.b == 0x52)
1002196a          char var_7e[0x7e]
1002196a          char (* edi_6)[0x7e] = &var_7e
1002196e          int32_t i_5 = ecx_5 | 0xffffffff
1002196e          
10021977          while (i_5 != 0)
10021977              bool cond:2_1 = 0 != *edi_6
10021977              edi_6 = &(*edi_6)[1]
10021977              i_5 -= 1
10021977              
10021977              if (not(cond:2_1))
10021977                  break
10021977          
10021982          sub_100452f0(&i_8, &var_7e, not.d(i_5))
10021987          eax_6.b = i_8
10021987  
10021990  char* esi_5 = &i_8
10021990  
10021994  if (eax_6.b != 0)
10021997      char* ebx_1 = &var_7f
10021997      
100219de      do
1002199b          eax_6.b = *esi_5
1002199b          
100219a3          if (eax_6.b s>= 0x61 && eax_6.b s<= 0x7a)
100219b1              esi_5 = &esi_5[1]
100219b2              ebx_1 = &ebx_1[1]
100219a3          else if (eax_6.b s< 0x30)
100219af              if (eax_6.b != 0x5f)
100219af                  goto label_100219bb
100219af              
100219b1              esi_5 = &esi_5[1]
100219b2              ebx_1 = &ebx_1[1]
100219a7          else if (eax_6.b s<= 0x39 || eax_6.b == 0x5f)
100219b1              esi_5 = &esi_5[1]
100219b2              ebx_1 = &ebx_1[1]
100219af          else
100219bb              label_100219bb:
100219bb              
100219bb              if (eax_6.b s< 0x41 || eax_6.b s> 0x5a)
100219c5                  char* edi_7 = ebx_1
100219c7                  int32_t i_6 = 0xffffffff
100219c7                  
100219cc                  while (i_6 != 0)
100219cc                      bool cond:7_1 = 0 != *edi_7
100219cc                      edi_7 = &edi_7[1]
100219cc                      i_6 -= 1
100219cc                      
100219cc                      if (not(cond:7_1))
100219cc                          break
100219cc                  
100219d3                  sub_100452f0(esi_5, ebx_1, not.d(i_6))
100219bb              else
100219bd                  eax_6.b += 0x20
100219bf                  *esi_5 = eax_6.b
100219c1                  esi_5 = &esi_5[1]
100219c2                  ebx_1 = &ebx_1[1]
100219de      while (*esi_5 != 0)
100219de  
100219e1  char* edi_8 = &i_8
100219e5  int32_t i_7 = 0xffffffff
100219e5  
100219ea  while (i_7 != 0)
100219ea      bool cond:6_1 = 0 != *edi_8
100219ea      edi_8 = &edi_8[1]
100219ea      i_7 -= 1
100219ea      
100219ea      if (not(cond:6_1))
100219ea          break
100219ea  
100219f3  int32_t ecx_10 = not.d(i_7)
10021a00  int32_t esi_7
10021a00  int32_t edi_11
10021a00  edi_11, esi_7 = __builtin_memcpy(dest: arg2, src: edi_8 - ecx_10, n: ecx_10 u>> 2 << 2)
10021a07  __builtin_memcpy(dest: edi_11, src: esi_7, n: ecx_10 & 3)
10021a11  return arg2

10021a12                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10021a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10021a90    int32_t* sub_10021a90(int32_t arg1, int32_t* arg2, int32_t arg3)

10021a97  int32_t edi = arg1
10021a99  int32_t i = 0xffffffff
10021a99  
10021a9e  while (i != 0)
10021a9e      bool cond:0_1 = 0 != *edi
10021a9e      edi += 1
10021a9e      i -= 1
10021a9e      
10021a9e      if (not(cond:0_1))
10021a9e          break
10021a9e  
10021aa6  int32_t* result = j_sub_10038f90(not.d(i) + 0x44)
10021aad  int32_t edi_1 = arg1
10021aaf  int32_t i_1 = 0xffffffff
10021aba  *result = &result[0x11]
10021aba  
10021abc  while (i_1 != 0)
10021abc      bool cond:1_1 = 0 != *edi_1
10021abc      edi_1 += 1
10021abc      i_1 -= 1
10021abc      
10021abc      if (not(cond:1_1))
10021abc          break
10021abc  
10021abe  int32_t ecx_2 = not.d(i_1)
10021acb  int32_t esi_2
10021acb  int32_t edi_4
10021acb  edi_4, esi_2 =
10021acb      __builtin_memcpy(dest: &result[0x11], src: edi_1 - ecx_2, n: ecx_2 u>> 2 << 2)
10021ad6  __builtin_memcpy(dest: edi_4, src: esi_2, n: ecx_2 & 3)
10021adb  result[1] = *arg2
10021ae1  result[2] = arg2[1]
10021ae7  result[3] = arg2[2]
10021af4  __builtin_memcpy(dest: &result[5], 
10021af4      src: "\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\x41\x00\x00\x00\x41\x00\x00\x00\x41", 
10021af4      n: 0x18)
10021b0d  result[0xf] = 0
10021b10  result[0x10] = 0
10021b13  result[4] = arg3
10021b19  return result

10021b1a                                                                                90 90 90 90 90 90                            ......
10021b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10021b50    int32_t* sub_10021b50(int32_t* arg1, char* arg2)

10021b58  for (int32_t* i = arg1; i != 0; i = i[0xf])
10021b5e      char* eax_1 = *i
10021b62      int32_t eax_2
10021b62      int32_t ecx
10021b62      int32_t edx
10021b62      eax_2, ecx, edx = sub_10045cb0(eax_1, edx, ecx, eax_1, arg2)
10021b62      
10021b6c      if (eax_2 == 0)
10021b7e          return i
10021b7e  
10021b79  return 0

10021b7f                                                                                               90                                 .
10021b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10021b90    void* sub_10021b90(void* arg1)

10021b90  void* result = arg1
10021b90  
10021b96  if (result != 0)
10021ba9      void* i
10021ba9      
10021ba9      do
10021b99          i = *(result + 0x3c)
10021b9d          j_sub_100390b0(result)
10021ba5          result = i
10021ba9      while (i != 0)
10021ba9  
10021bac  return result

10021bad                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................

10021bc0    int32_t sub_10021bc0(void* arg1)

10021bd9  if (j_sub_100216a0(arg1) != 0)
10021be7      return 1
10021be7  
10021bec  if ((*(arg1 + 0x28) & 4) == 0)
10021bf7      return 0
10021bf7  
10021c04  int32_t ecx = *(arg1 + 0x698)
10021c0a  long double x87_r7_1 = fconvert.t(*(arg1 + 0x69c)) - fconvert.t(24f)
10021c14  int32_t var_90 = *(arg1 + 0x694)
10021c19  int32_t var_8c = ecx
10021c1d  float var_88 = fconvert.s(x87_r7_1)
10021c1d  
10021c2b  if ((j_sub_10003080(&var_90) & 0x18) != 0)
10021c36      return 0
10021c36  
10021c43  int32_t ecx_1 = *(arg1 + 0x698)
10021c49  long double x87_r7_3 = fconvert.t(*(arg1 + 0x69c)) + fconvert.t(32f)
10021c53  var_90 = *(arg1 + 0x694)
10021c58  int32_t var_8c_1 = ecx_1
10021c5c  float var_88_1 = fconvert.s(x87_r7_3)
10021c5c  
10021c6a  if ((j_sub_10003080(&var_90) & 0x38) != 0)
10021c75      return 0
10021c75  
10021c7c  int32_t eax_9 = *(arg1 + 0x694)
10021c82  int32_t ecx_2 = *(arg1 + 0x698)
10021c88  long double x87_r7_5 = fconvert.t(*(arg1 + 0x69c)) + fconvert.t(1f)
10021c8e  int32_t var_84 = eax_9
10021c94  int32_t var_80 = ecx_2
10021c9a  int32_t var_78 = eax_9
10021ca2  float var_7c = fconvert.s(x87_r7_5)
10021cbb  int32_t var_74 = ecx_2
10021cbf  float var_70 = fconvert.s(fconvert.t(*(arg1 + 0x69c)) - fconvert.t(100f))
10021cc3  void var_6c
10021cc3  void var_60
10021cc3  j_sub_1000dda0(4, &var_60, &var_6c)
10021ccf  int32_t var_a8 = *(arg1 + 4)
10021cfa  void var_54
10021cfa  __builtin_memcpy(dest: &var_54, 
10021cfa      src: j_sub_10003010(&var_54, &var_84, &var_60, &var_6c, &var_78, 4, var_a8), n: 0x54)
10021d09  int32_t var_4
10021d09  int32_t result
10021d09  result.b = var_4 == 0
10021d12  return result

10021d13                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10021d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10021d80    int32_t sub_10021d80(int32_t arg1)

10021d88  long double x87_r7 = fconvert.t(*(data_10064474 + 0x10))
10021d8b  long double temp0 = fconvert.t(0f)
10021d8b  x87_r7 - temp0
10021d92  void* eax
10021d92  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10021d92      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10021d92  
10021d97  if ((eax:1.b & 0x40) == 0)
10021d9f      return 0
10021d9f  
10021db4  long double st0 = j_sub_1002a690(*(arg1 + 0x688), 0x12, 0f, 1f)
10021dc6  long double x87_r7_2 = fconvert.t(*(data_1006447c + 0x10))
10021dc9  long double temp1 = fconvert.t(0f)
10021dc9  x87_r7_2 - temp1
10021dc9  
10021dd4  if ((((x87_r7_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp1) ? 1 : 0) << 0xa
10021dd4          | (x87_r7_2 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10021de8      long double x87_r7_4 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10021dee      long double temp2_1 = fconvert.t(fconvert.s(st0))
10021dee      x87_r7_4 - temp2_1
10021df2      int32_t eax_4
10021df2      eax_4.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
10021df2          | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
10021df2          | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
10021df2      
10021df7      if ((eax_4:1.b & 0x41) == 0)
10021dff          return 0
10021dff  
10021e01  int32_t result = j_sub_10021bc0(arg1)
10021e01  
10021e0b  if (result == 0)
10021e11      return result
10021e11  
10021e19  int32_t var_2c_1 = 0
10021e2b  void var_20
10021e2b  int32_t var_30_1 = j_sub_10021860(*(arg1 + 4), &var_20)
10021e32  j_sub_1002e510(arg1 + 0xf8c, "enter_game")
10021e43  return 1

10021e44              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10021e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10021e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10021e90    int32_t sub_10021e90(int32_t arg1)

10021e98  long double x87_r7 = fconvert.t(*(data_10064474 + 0x10))
10021e9b  long double temp0 = fconvert.t(0f)
10021e9b  x87_r7 - temp0
10021ea2  void* eax
10021ea2  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10021ea2      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10021ea2  
10021ea7  if ((eax:1.b & 0x40) == 0)
10021eaf      return 0
10021eaf  
10021ec4  long double st0 = j_sub_1002a690(*(arg1 + 0x688), 0x12, 0f, 1f)
10021ed6  long double x87_r7_2 = fconvert.t(*(data_1006447c + 0x10))
10021ed9  long double temp1 = fconvert.t(0f)
10021ed9  x87_r7_2 - temp1
10021ed9  
10021ee4  if ((((x87_r7_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp1) ? 1 : 0) << 0xa
10021ee4          | (x87_r7_2 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10021ef8      long double x87_r7_4 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10021efe      long double temp2_1 = fconvert.t(fconvert.s(st0))
10021efe      x87_r7_4 - temp2_1
10021f02      int32_t eax_4
10021f02      eax_4.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
10021f02          | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
10021f02          | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
10021f02      
10021f07      if ((eax_4:1.b & 0x41) == 0)
10021f0f          return 0
10021f0f  
10021f17  int32_t var_2c = 0
10021f29  void var_20
10021f29  int32_t var_30_1 = j_sub_10021860(*(arg1 + 4), &var_20)
10021f30  j_sub_1002e510(arg1 + 0xf8c, "exit_game")
10021f41  return 1

10021f42        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10021f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10021f80    int32_t sub_10021f80(int32_t arg1)

10021f88  long double x87_r7 = fconvert.t(*(data_10064474 + 0x10))
10021f8b  long double temp0 = fconvert.t(0f)
10021f8b  x87_r7 - temp0
10021f92  void* eax
10021f92  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10021f92      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10021f92  
10021f97  if ((eax:1.b & 0x40) == 0)
10021f9f      return 0
10021f9f  
10021fb4  long double st0 = j_sub_1002a690(*(arg1 + 0x688), 0x11, 0f, 1f)
10021fc6  long double x87_r7_2 = fconvert.t(*(data_1006447c + 0x10))
10021fc9  long double temp1 = fconvert.t(0f)
10021fc9  x87_r7_2 - temp1
10021fc9  
10021fd4  if ((((x87_r7_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp1) ? 1 : 0) << 0xa
10021fd4          | (x87_r7_2 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10021fe8      long double x87_r7_4 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10021fee      long double temp2_1 = fconvert.t(fconvert.s(st0))
10021fee      x87_r7_4 - temp2_1
10021ff2      int32_t eax_4
10021ff2      eax_4.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
10021ff2          | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
10021ff2          | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
10021ff2      
10021ff7      if ((eax_4:1.b & 0x41) == 0)
10021fff          return 0
10021fff  
10022007  int32_t var_2c = 0
10022019  void var_20
10022019  int32_t var_30_1 = j_sub_10021860(*(arg1 + 4), &var_20)
10022020  j_sub_1002e510(arg1 + 0xf8c, "start_level")
10022031  return 1

10022032                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10022040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10022070    int32_t sub_10022070(int32_t arg1)

10022078  long double x87_r7 = fconvert.t(*(data_10064474 + 0x10))
1002207b  long double temp0 = fconvert.t(0f)
1002207b  x87_r7 - temp0
10022082  void* eax
10022082  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10022082      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10022082  
10022087  if ((eax:1.b & 0x40) == 0)
1002208f      return 0
1002208f  
100220a4  long double st0 = j_sub_1002a690(*(arg1 + 0x688), 0x11, 0f, 1f)
100220b6  long double x87_r7_2 = fconvert.t(*(data_1006447c + 0x10))
100220b9  long double temp1 = fconvert.t(0f)
100220b9  x87_r7_2 - temp1
100220b9  
100220c4  if ((((x87_r7_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp1) ? 1 : 0) << 0xa
100220c4          | (x87_r7_2 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
100220d8      long double x87_r7_4 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100220de      long double temp2_1 = fconvert.t(fconvert.s(st0))
100220de      x87_r7_4 - temp2_1
100220e2      int32_t eax_4
100220e2      eax_4.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
100220e2          | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
100220e2          | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
100220e2      
100220e7      if ((eax_4:1.b & 0x41) == 0)
100220ef          return 0
100220ef  
100220f7  int32_t var_2c = 0
10022109  void var_20
10022109  int32_t var_30_1 = j_sub_10021860(*(arg1 + 4), &var_20)
10022110  j_sub_1002e510(arg1 + 0xf8c, "end_level")
10022121  return 1

10022122        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10022140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10022160    int32_t sub_10022160(int32_t arg1)

10022168  long double x87_r7 = fconvert.t(*(data_10064474 + 0x10))
1002216b  long double temp0 = fconvert.t(0f)
1002216b  x87_r7 - temp0
10022172  void* eax
10022172  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10022172      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10022172  
10022177  if ((eax:1.b & 0x40) == 0)
1002217f      return 0
1002217f  
10022194  long double st0 = j_sub_1002a690(*(arg1 + 0x688), 0x14, 0f, 1f)
100221a6  long double x87_r7_2 = fconvert.t(*(data_1006447c + 0x10))
100221a9  long double temp1 = fconvert.t(0f)
100221a9  x87_r7_2 - temp1
100221b4  void* edx
100221b4  
100221b4  if ((((x87_r7_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp1) ? 1 : 0) << 0xa
100221b4          | (x87_r7_2 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
100221b6      int32_t eax_3
100221b6      eax_3, edx = sub_10045187()
100221c8      long double x87_r7_4 = float.t(eax_3 & 0x7fff) * fconvert.t(3.05185094e-05f)
100221ce      long double temp2_1 = fconvert.t(fconvert.s(st0))
100221ce      x87_r7_4 - temp2_1
100221d2      int32_t eax_4
100221d2      eax_4.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
100221d2          | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
100221d2          | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
100221d2      
100221d7      if ((eax_4:1.b & 0x41) == 0)
100221df          return 0
100221df  
100221e0  int32_t eax_6 = *(arg1 + 0x1064)
100221e8  char var_20
100221e8  
100221e8  if (eax_6 == 0)
100221fb      edx.b = data_1006294c
10022201      var_20 = edx.b
100221e8  else
100221f1      j_sub_10021860(eax_6 - 1, &var_20)
100221f1  
1002220c  char* var_34
1002220c  
1002220c  if (*(arg1 + 0xad4) != 0xc)
10022221      int32_t eax_9 = sub_10045187() & 0x7fff
10022248      long double st0_1 = j_sub_1002a690(*(arg1 + 0x688), 0xf, 0f, 1f)
1002224d      long double temp3_1 =
1002224d          fconvert.t(fconvert.s(float.t(eax_9) * fconvert.t(3.05185094e-05f)))
1002224d      st0_1 - temp3_1
10022254      int32_t var_2c_3 = 0
10022254      
1002225b      if ((((st0_1 < temp3_1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp3_1) ? 1 : 0) << 0xa
1002225b              | (st0_1 == temp3_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
1002226d          char* var_30_4 = &var_20
1002226e          var_34 = "death_praise"
1002225b      else
10022261          char* var_30_3 = &var_20
10022262          var_34 = "death_insult"
1002220c  else
10022212      int32_t var_2c_2 = 0
10022214      char* var_30_2 = &var_20
10022215      var_34 = "death_bfg"
10022215  
1002227a  j_sub_1002e510(arg1 + 0xf8c, var_34)
1002228b  return 1

1002228c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
100222a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100222c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100222e0    int32_t sub_100222e0(int32_t arg1)

100222e8  long double x87_r7 = fconvert.t(*(data_10064474 + 0x10))
100222eb  long double temp0 = fconvert.t(0f)
100222eb  x87_r7 - temp0
100222f2  void* eax
100222f2  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100222f2      | (x87_r7 == temp0 ? 1 : 0) << 0xe
100222f2  
100222f7  if ((eax:1.b & 0x40) == 0)
100222ff      return 0
100222ff  
10022314  long double st0 = j_sub_1002a690(*(arg1 + 0x688), 0x13, 0f, 1f)
10022326  long double x87_r7_2 = fconvert.t(*(data_1006447c + 0x10))
10022329  long double temp1 = fconvert.t(0f)
10022329  x87_r7_2 - temp1
10022329  
10022334  if ((((x87_r7_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp1) ? 1 : 0) << 0xa
10022334          | (x87_r7_2 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10022348      long double x87_r7_4 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1002234e      long double temp2_1 = fconvert.t(fconvert.s(st0))
1002234e      x87_r7_4 - temp2_1
10022352      int32_t eax_4
10022352      eax_4.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
10022352          | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
10022352          | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
10022352      
10022357      if ((eax_4:1.b & 0x41) == 0)
1002235f          return 0
1002235f  
10022361  int32_t result = j_sub_10021bc0(arg1)
10022361  
1002236b  if (result == 0)
10022371      return result
10022371  
10022372  int32_t eax_6 = *(arg1 + 0x1064)
1002237a  char var_20
1002237a  
1002237a  if (eax_6 == 0)
10022393      var_20 = data_1006294c
1002237a  else
10022383      j_sub_10021860(eax_6 - 1, &var_20)
10022383  
1002239e  char* var_34
1002239e  
1002239e  if (*(arg1 + 0xad0) != 0xd)
100223b3      int32_t eax_9 = sub_10045187() & 0x7fff
100223da      long double st0_1 = j_sub_1002a690(*(arg1 + 0x688), 0xf, 0f, 1f)
100223df      long double temp3_1 =
100223df          fconvert.t(fconvert.s(float.t(eax_9) * fconvert.t(3.05185094e-05f)))
100223df      st0_1 - temp3_1
100223e6      int32_t var_2c_3 = 0
100223e6      
100223ed      if ((((st0_1 < temp3_1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp3_1) ? 1 : 0) << 0xa
100223ed              | (st0_1 == temp3_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
100223ff          char* var_30_4 = &var_20
10022400          var_34 = "kill_praise"
100223ed      else
100223f3          char* var_30_3 = &var_20
100223f4          var_34 = "kill_insult"
1002239e  else
100223a4      int32_t var_2c_2 = 0
100223a6      char* var_30_2 = &var_20
100223a7      var_34 = "kill_telefrag"
100223a7  
1002240c  j_sub_1002e510(arg1 + 0xf8c, var_34)
1002241d  return 1

1002241e                                                                                            90 90                                ..
10022420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10022470    int32_t sub_10022470(int32_t arg1)

10022470  float ecx
10022470  float var_4 = ecx
10022477  long double x87_r7 = fconvert.t(*(data_10064474 + 0x10))
1002247a  long double temp0 = fconvert.t(0f)
1002247a  x87_r7 - temp0
10022480  void* eax
10022480  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10022480      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10022480  
10022485  if ((eax:1.b & 0x40) != 0)
1002248f      int32_t eax_1 = *(arg1 + 0x10a4)
1002248f      
100224aa      if (eax_1 != 1 && eax_1 != 2 && eax_1 != 5)
100224c5          var_4 = fconvert.s(j_sub_1002a690(*(arg1 + 0x688), 0x15, 0f, 1f))
100224de          long double x87_r7_3 =
100224de              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100224ea          long double x87_r6_2 =
100224ea              fconvert.t(*(arg1 + 0x690)) * fconvert.t(0.10000000000000001)
100224f0          x87_r6_2 - x87_r7_3
100224f2          int32_t eax_3
100224f2          eax_3.w = (x87_r6_2 < x87_r7_3 ? 1 : 0) << 8
100224f2              | (is_unordered.t(x87_r6_2, x87_r7_3) ? 1 : 0) << 0xa
100224f2              | (x87_r6_2 == x87_r7_3 ? 1 : 0) << 0xe
100224f2          
100224f7          if ((eax_3:1.b & 1) == 0)
10022503              long double x87_r7_4 = fconvert.t(*(data_1006447c + 0x10))
10022506              long double temp1_1 = fconvert.t(0f)
10022506              x87_r7_4 - temp1_1
1002250c              eax_3.w = (x87_r7_4 < temp1_1 ? 1 : 0) << 8
1002250c                  | (is_unordered.t(x87_r7_4, temp1_1) ? 1 : 0) << 0xa
1002250c                  | (x87_r7_4 == temp1_1 ? 1 : 0) << 0xe
1002250c              
10022511              if ((eax_3:1.b & 0x40) == 0)
10022564                  label_10022564:
10022564                  
1002256e                  if (j_sub_10021bc0(arg1) != 0)
10022575                      int32_t eax_10 = sub_10045187() & 0x7fff
1002259c                      long double st0_2 = j_sub_1002a690(*(arg1 + 0x688), 0x10, 0f, 1f)
100225a1                      long double temp3 = fconvert.t(fconvert.s(float.t(eax_10)
100225a1                          * fconvert.t(3.05185094e-05f)))
100225a1                      st0_2 - temp3
100225a8                      int32_t var_c_2 = 0
100225a8                      
100225af                      if ((((st0_2 < temp3 ? 1 : 0) << 8
100225af                              | (is_unordered.t(st0_2, temp3) ? 1 : 0) << 0xa
100225af                              | (st0_2 == temp3 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
100225bd                          j_sub_1002e510(arg1 + 0xf8c, "random_misc")
100225cc                          return 1
100225cc                      
100225d9                      j_sub_1002e510(arg1 + 0xf8c, "random_insult")
100225e8                      return 1
10022511              else
10022525                  long double x87_r7_6 =
10022525                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1002252b                  long double temp2_1 = fconvert.t(var_4)
1002252b                  x87_r7_6 - temp2_1
1002252f                  int32_t eax_5
1002252f                  eax_5.w = (x87_r7_6 < temp2_1 ? 1 : 0) << 8
1002252f                      | (is_unordered.t(x87_r7_6, temp2_1) ? 1 : 0) << 0xa
1002252f                      | (x87_r7_6 == temp2_1 ? 1 : 0) << 0xe
1002252f                  
10022534                  if ((eax_5:1.b & 0x41) != 0)
1002254c                      long double x87_r7_8 =
1002254c                          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10022552                      long double temp4_1 = fconvert.t(0.25)
10022552                      x87_r7_8 - temp4_1
10022558                      int32_t eax_7
10022558                      eax_7.w = (x87_r7_8 < temp4_1 ? 1 : 0) << 8
10022558                          | (is_unordered.t(x87_r7_8, temp4_1) ? 1 : 0) << 0xa
10022558                          | (x87_r7_8 == temp4_1 ? 1 : 0) << 0xe
10022558                      
1002255d                      if ((eax_7:1.b & 0x41) != 0)
1002255d                          goto label_10022564
1002255d  
100225ed  return 0

100225ee                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10022600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10022650    long double sub_10022650(int32_t arg1)

10022650  int32_t ecx
10022650  int32_t var_4_1 = ecx
10022666  int32_t eax_1 = j_sub_1002a7a0(*(arg1 + 0x688), 0xe, 1, 0xfa0)
10022692  return float.t(j_sub_1002ea50(arg1 + 0xf8c)) * fconvert.t(30f) / float.t(eax_1)

10022693                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
100226a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100226c0    long double sub_100226c0(void* arg1)

100226cd  if (*(arg1 + 0x9f4) != 0)
100226d6      return fconvert.t(100f)
100226d6  
100226f7  if (*(arg1 + 0xa98) == 0 && (*(arg1 + 0xa94) == 0 || *(arg1 + 0x9f0) != 0))
1002270a      if (*(arg1 + 0xa9c) == 0)
10022726          label_10022726:
10022726          
10022730          if (*(arg1 + 0x9e4) s<= 0xc8)
10022736              int32_t ecx_6 = *(arg1 + 0x764)
10022736              
10022762              if (ecx_6 s>= 0x28 && (ecx_6 s>= 0x46 || *(arg1 + 0x6c4) s>= 0x28
10022762                      || *(arg1 + 0x6c8) s>= 0x32 || *(arg1 + 0x6cc) s>= 0x3c))
10022778                  if (*(arg1 + 0x704) s> 0 && *(arg1 + 0x710) s> 0x32)
10022781                      return fconvert.t(100f)
10022781                  
10022797                  if (*(arg1 + 0x700) s> 0 && *(arg1 + 0x718) s> 5)
100227a0                      return fconvert.t(100f)
100227a0                  
100227b1                  if (*(arg1 + 0x6fc) s> 0 && *(arg1 + 0x710) s> 0x32)
100227ba                      return fconvert.t(100f)
100227ba                  
100227cb                  if (*(arg1 + 0x6f8) s> 0 && *(arg1 + 0x714) s> 5)
100227d4                      return fconvert.t(100f)
100227d4                  
100227e6                  if (*(arg1 + 0x6f4) s> 0 && *(arg1 + 0x6f0) s> 0xa)
100227ef                      return fconvert.t(100f)
100227ef                  
10022801                  if (*(arg1 + 0x6ec) s> 0 && *(arg1 + 0x70c) s> 0x64)
1002280a                      return fconvert.t(100f)
1002280a                  
1002281c                  if (*(arg1 + 0x6e8) s> 0 && *(arg1 + 0x70c) s> 0x4b)
10022825                      return fconvert.t(100f)
10022825                  
10022837                  if (*(arg1 + 0x6e4) s> 0 && *(arg1 + 0x708) s> 0x14)
10022840                      return fconvert.t(100f)
1002270a      else if (*(arg1 + 0xa08) != 0 && *(arg1 + 0x710) s>= 0x32)
10022720          goto label_10022726
10022720  
10022848  return fconvert.t(0f)

10022849                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
10022860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100228a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100228c0    int32_t sub_100228c0(void* arg1)

100228d0  if (j_sub_10021650(arg1) != 0)
100228d8      return 1
100228d8  
100228e0  if (*(arg1 + 0x10a4) == 4)
100228e8      return 1
100228e8  
100228ea  long double st0 = j_sub_100226c0(arg1)
100228ef  long double temp0 = fconvert.t(50f)
100228ef  st0 - temp0
100228ef  
100228fd  if ((((st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
100228fd          | (st0 == temp0 ? 1 : 0) << 0xe):1.b & 1) == 0)
10022909      return 0
10022909  
10022905  return 1

1002290a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10022920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10022930    int32_t sub_10022930(void* arg1)

10022935  long double st0 = j_sub_100226c0(arg1)
1002293a  long double temp0 = fconvert.t(50f)
1002293a  st0 - temp0
1002293a  
10022948  if ((((st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
10022948          | (st0 == temp0 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10022952      return 0
10022952  
1002294f  return 1

10022953                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10022960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10022970    int32_t sub_10022970() __pure

10022975  return 1

10022976                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10022980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10022990    int32_t sub_10022990(void* arg1)

1002299c  if (*(arg1 + 0x6f8) s<= 0)
100229a0      return 0
100229a0  
100229a8  if (*(arg1 + 0x714) s< 3)
100229ac      return 0
100229ac  
100229b5  if (*(arg1 + 0x9f0) != 0)
100229b9      return 0
100229b9  
100229c2  if (*(arg1 + 0x9f4) == 0)
100229c4      int32_t ecx_3 = *(arg1 + 0x764)
100229c4      
100229cd      if (ecx_3 s< 0x3c)
100229d1          return 0
100229d1      
100229f0      if (ecx_3 s< 0x5a && *(arg1 + 0x6c4) s< 0x28 && *(arg1 + 0x6c8) s< 0x32
100229f0              && *(arg1 + 0x6cc) s< 0x3c)
100229f4          return 0
100229f4      
10022a05      long double st0_1 = j_sub_1002a690(*(arg1 + 0x688), 0x1a, 0f, 1f)
10022a0a      long double temp0_1 = fconvert.t(0.5)
10022a0a      st0_1 - temp0_1
10022a0a      
10022a18      if ((((st0_1 < temp0_1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
10022a18              | (st0_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10022a1c          return 0
10022a1c  
10022a22  return 1

10022a23           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
10022a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10022a60    long double sub_10022a60(void* arg1, float* arg2)

10022a71  float var_118 = 0f
10022d16  float var_12c
10022d16  float var_128_1
10022d16  float var_124_2
10022d16  long double result
10022d16  int32_t eax_15
10022d16  
10022d16  do
10022a82      float ecx_1 = *(arg1 + 0x698)
10022a88      float edx_1 = *(arg1 + 0x69c)
10022a8e      var_12c = *(arg1 + 0x694)
10022a92      var_128_1 = ecx_1
10022aac      long double x87_r7_2 = float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10022ab2      float var_11c_2 = fconvert.s(x87_r7_2)
10022ab6      long double temp0_1 = fconvert.t(0.80000000000000004)
10022ab6      x87_r7_2 - temp0_1
10022abc      int32_t eax_3
10022abc      eax_3.w = (x87_r7_2 < temp0_1 ? 1 : 0) << 8
10022abc          | (is_unordered.t(x87_r7_2, temp0_1) ? 1 : 0) << 0xa
10022abc          | (x87_r7_2 == temp0_1 ? 1 : 0) << 0xe
10022abc      
10022ac1      if ((eax_3:1.b & 1) != 0)
10022acd          float var_120_1 = -1f
10022add          long double x87_r7_4 =
10022add              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10022ae3          long double temp2_1 = fconvert.t(0.5)
10022ae3          x87_r7_4 - temp2_1
10022ae9          int32_t eax_5
10022ae9          eax_5.w = (x87_r7_4 < temp2_1 ? 1 : 0) << 8
10022ae9              | (is_unordered.t(x87_r7_4, temp2_1) ? 1 : 0) << 0xa
10022ae9              | (x87_r7_4 == temp2_1 ? 1 : 0) << 0xe
10022ae9          
10022aee          if ((eax_5:1.b & 1) == 0)
10022af0              var_120_1 = 1f
10022af0          
10022b24          var_12c = fconvert.s(float.t(sub_10045187() & 0x7fff)
10022b24              * fconvert.t(3.05185094e-05f) * fconvert.t(var_120_1) * fconvert.t(700f)
10022b24              + fconvert.t(var_12c) + fconvert.t(50f))
10022b24      
10022b28      long double x87_r7_11 = fconvert.t(var_11c_2)
10022b2c      long double temp1_1 = fconvert.t(0.20000000000000001)
10022b2c      x87_r7_11 - temp1_1
10022b32      eax_3.w = (x87_r7_11 < temp1_1 ? 1 : 0) << 8
10022b32          | (is_unordered.t(x87_r7_11, temp1_1) ? 1 : 0) << 0xa
10022b32          | (x87_r7_11 == temp1_1 ? 1 : 0) << 0xe
10022b32      
10022b37      if ((eax_3:1.b & 0x41) == 0)
10022b43          float var_120_2 = -1f
10022b53          long double x87_r7_13 =
10022b53              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10022b59          long double temp3_1 = fconvert.t(0.5)
10022b59          x87_r7_13 - temp3_1
10022b5f          int32_t eax_8
10022b5f          eax_8.w = (x87_r7_13 < temp3_1 ? 1 : 0) << 8
10022b5f              | (is_unordered.t(x87_r7_13, temp3_1) ? 1 : 0) << 0xa
10022b5f              | (x87_r7_13 == temp3_1 ? 1 : 0) << 0xe
10022b5f          
10022b64          if ((eax_8:1.b & 1) == 0)
10022b66              var_120_2 = 1f
10022b66          
10022b9a          var_128_1 = fconvert.s(float.t(sub_10045187() & 0x7fff)
10022b9a              * fconvert.t(3.05185094e-05f) * fconvert.t(var_120_2) * fconvert.t(700f)
10022b9a              + fconvert.t(var_128_1) + fconvert.t(50f))
10022b9a      
10022ba3      int32_t eax_12 = sub_10045187() & 0x7fff
10022ba8      int32_t var_144_1 = 3
10022bae      int32_t eax_13 = *(arg1 + 8)
10022bba      float* var_14c_1 = &var_12c
10022bbb      int32_t var_150 = 0
10022be4      var_124_2 = fconvert.s(
10022be4          float.t(eax_12) * fconvert.t(3.05185094e-05f) * fconvert.t(144f) - fconvert.t(96f)
10022be4          - fconvert.t(1f) + fconvert.t(edx_1))
10022be8      void var_a8
10022be8      int32_t eax_14 =
10022be8          j_sub_10003010(&var_a8, arg1 + 0x694, 0, var_150, var_14c_1, eax_13, var_144_1)
10022bf1      long double x87_r7_27 = fconvert.t(var_12c) - fconvert.t(*(arg1 + 0x694))
10022c03      void var_fc
10022c03      __builtin_memcpy(dest: &var_fc, src: eax_14, n: 0x54)
10022c05      float var_114 = fconvert.s(x87_r7_27)
10022c13      float var_110_1 = fconvert.s(fconvert.t(var_128_1) - fconvert.t(*(arg1 + 0x698)))
10022c21      float var_10c_1 = fconvert.s(fconvert.t(var_124_2) - fconvert.t(*(arg1 + 0x69c)))
10022c26      long double result_1
10022c26      eax_15, result_1 = j_sub_10043290(&var_114)
10022c2b      long double temp4_1 = fconvert.t(100f)
10022c2b      result_1 - temp4_1
10022c34      eax_15.w = (result_1 < temp4_1 ? 1 : 0) << 8
10022c34          | (is_unordered.t(result_1, temp4_1) ? 1 : 0) << 0xa
10022c34          | (result_1 == temp4_1 ? 1 : 0) << 0xe | 0x3800
10022c34      
10022c39      if ((eax_15:1.b & 0x41) != 0)
10022cfb          result = result_1
10022c39      else
10022c4e          float* var_148_2 = &var_114
10022c59          result = result_1
10022c5b          float var_f4
10022c5b          j_sub_10043570(&var_114, 
10022c5b              fconvert.s(fconvert.t(var_f4) * result_1 - fconvert.t(40f)), &var_114)
10022c64          long double x87_r7_34 = fconvert.t(var_114) + fconvert.t(*(arg1 + 0x694))
10022c67          int32_t ecx_2 = *(arg1 + 8)
10022c6a          var_150 = 3
10022c74          var_12c = fconvert.s(x87_r7_34)
10022c8b          var_128_1 = fconvert.s(fconvert.t(var_110_1) + fconvert.t(*(arg1 + 0x698)))
10022c9d          float var_104_1 = var_128_1
10022ca7          var_124_2 = fconvert.s(fconvert.t(var_10c_1) + fconvert.t(*(arg1 + 0x69c)))
10022cab          float var_108 = fconvert.s(x87_r7_34)
10022cb9          float var_100_1 = fconvert.s(fconvert.t(var_124_2) - fconvert.t(800f))
10022cd0          void var_54
10022cd0          __builtin_memcpy(dest: &var_fc, 
10022cd0              src: j_sub_10003010(&var_54, &var_12c, 0, 0, &var_108, ecx_2, var_150), 
10022cd0              n: 0x54)
10022cd8          int32_t var_f8
10022cd8          
10022cd8          if (var_f8 == 0)
10022ce9              float var_e8 = fconvert.s(fconvert.t(var_e8) + fconvert.t(1f))
10022cf7              void var_f0
10022cf7              
10022cf7              if ((j_sub_10003080(&var_f0).b & 0x18) == 0)
10022cf7                  break
10022cf7      
10022d01      long double x87_r7_40 = fconvert.t(var_118) + fconvert.t(1f)
10022d07      var_118 = fconvert.s(x87_r7_40)
10022d0b      long double temp5_1 = fconvert.t(10f)
10022d0b      x87_r7_40 - temp5_1
10022d11      eax_15.w = (x87_r7_40 < temp5_1 ? 1 : 0) << 8
10022d11          | (is_unordered.t(x87_r7_40, temp5_1) ? 1 : 0) << 0xa
10022d11          | (x87_r7_40 == temp5_1 ? 1 : 0) << 0xe
10022d16  while ((eax_15:1.b & 1) != 0)
10022d30  *arg2 = fconvert.s(fconvert.t(var_12c))
10022d34  arg2[1] = var_128_1
10022d37  arg2[2] = var_124_2
10022d41  return result

10022d42        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10022d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10022e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10022e10    void sub_10022e10(int32_t arg1, void* arg2, int32_t arg3)

10022e1a  float var_f0 = 0f
10022e22  int32_t var_ec = 0
10022e2a  int32_t var_e8 = 0x3f800000
10022e32  long double st0 = j_sub_1000e120()
10022e3e  long double temp0 = fconvert.t(*(arg2 + 0xb08))
10022e3e  st0 - temp0
10022e49  void s
10022e49  
10022e49  if ((((st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
10022e49          | (st0 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
10022e67      int32_t var_bc = *(arg2 + 0x1064)
10022e6e      int32_t eax_2 = *(arg2 + 0x1070)
10022e74      int32_t var_d8 = *(arg2 + 0x1068)
10022e78      int32_t ecx_2 = *(arg2 + 0x1074)
10022e80      int32_t var_e4 = *(arg2 + 0x106c)
10022e84      int32_t var_e0 = eax_2
10022e88      int32_t var_dc = ecx_2
10022e8c      int32_t var_d4
10022e8c      __builtin_memcpy(dest: &var_d4, 
10022e8c          src: "\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\xc1\x00\x00\x00\x41\x00\x00\x00\x41\x00\x00\x00\x41", 
10022e8c          n: 0x18)
10022ec8      j_sub_10020ed0(arg2, arg2 + 0xb40)
10022efb      __builtin_memcpy(dest: arg1, src: j_sub_100343a0(&s, arg2 + 0xb40, &var_e4, arg3), 
10022efb          n: 0x30)
10022f07      return 
10022f07  
10022f16  __builtin_memset(&s, c: 0, n: 0x30)
10022f40  float var_124_1 =
10022f40      fconvert.s(float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f))
10022f44  long double st0_1 = j_sub_1002a690(*(arg2 + 0x688), 0x30, 0f, 1f)
10022f49  long double temp1 = fconvert.t(var_124_1)
10022f49  st0_1 - temp1
10022f49  
10022f55  if ((((st0_1 < temp1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp1) ? 1 : 0) << 0xa
10022f55          | (st0_1 == temp1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10022f7b      float var_11c_1 = fconvert.s(j_sub_1002a690(*(arg2 + 0x688), 4, 0f, 1f))
10022f84      long double st0_3 = j_sub_1002a690(*(arg2 + 0x688), 0x19, 0f, 1f)
10022fa2      float var_124_2 = fconvert.s(j_sub_1002a690(*(arg2 + 0x688), 0x18, 0f, 1f))
10022fa6      long double x87_r7_7 = fconvert.t(var_11c_1)
10022faa      long double temp2_1 = fconvert.t(0.20000000000000001)
10022faa      x87_r7_7 - temp2_1
10022faa      
10022fb8      if ((((x87_r7_7 < temp2_1 ? 1 : 0) << 8
10022fb8              | (is_unordered.t(x87_r7_7, temp2_1) ? 1 : 0) << 0xa
10022fb8              | (x87_r7_7 == temp2_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
10022fc6          j_sub_10020ed0(arg2, arg2 + 0xb40)
10022ff1          void var_7c
10022ff1          __builtin_memcpy(dest: &var_7c, src: j_sub_1000abe0(&var_7c, *(arg2 + 0x1064)), 
10022ff1              n: 0x7c)
10023000          float var_6c
10023000          float var_118 = fconvert.s(fconvert.t(var_6c) - fconvert.t(*(arg2 + 0x694)))
10023011          float var_68
10023011          float var_114_1 = fconvert.s(fconvert.t(var_68) - fconvert.t(*(arg2 + 0x698)))
10023023          float var_64
10023023          float var_110_1 = fconvert.s(fconvert.t(var_64) - fconvert.t(*(arg2 + 0x69c)))
1002302c          float var_120_1 = fconvert.s(j_sub_10043500(&var_118))
10023035          int32_t eax_12
10023035          int80_t st0_6
10023035          eax_12, st0_6 = j_sub_10043290(&var_118)
10023042          float var_108 = fconvert.s(fneg(fconvert.t(var_118)))
1002304c          float var_104_1 = fconvert.s(fneg(fconvert.t(var_114_1)))
10023056          float var_100_1 = fconvert.s(fneg(fconvert.t(var_110_1)))
1002305d          int32_t edi_2 = 1
10023067          long double x87_r7_23 = j_sub_1000e120() - fconvert.t(1f)
1002306d          long double temp3_1 = fconvert.t(*(arg2 + 0xb04))
1002306d          x87_r7_23 - temp3_1
10023073          eax_12.w = (x87_r7_23 < temp3_1 ? 1 : 0) << 8
10023073              | (is_unordered.t(x87_r7_23, temp3_1) ? 1 : 0) << 0xa
10023073              | (x87_r7_23 == temp3_1 ? 1 : 0) << 0xe
10023073          
10023078          if ((eax_12:1.b & 0x41) == 0)
1002308c              long double x87_r7_25 =
1002308c                  float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10023092              long double temp5_1 = fconvert.t(fconvert.s(st0_3))
10023092              x87_r7_25 - temp5_1
10023096              eax_12.w = (x87_r7_25 < temp5_1 ? 1 : 0) << 8
10023096                  | (is_unordered.t(x87_r7_25, temp5_1) ? 1 : 0) << 0xa
10023096                  | (x87_r7_25 == temp5_1 ? 1 : 0) << 0xe
10023096              
1002309b              if ((eax_12:1.b & 1) == 0)
100230a9                  long double x87_r7_27 = j_sub_1000e120() - fconvert.t(1f)
100230af                  long double temp6_1 = fconvert.t(*(arg2 + 0xb04))
100230af                  x87_r7_27 - temp6_1
100230b5                  eax_12.w = (x87_r7_27 < temp6_1 ? 1 : 0) << 8
100230b5                      | (is_unordered.t(x87_r7_27, temp6_1) ? 1 : 0) << 0xa
100230b5                      | (x87_r7_27 == temp6_1 ? 1 : 0) << 0xe
100230b5                  
100230ba                  if ((eax_12:1.b & 0x41) == 0)
100230ce                      long double x87_r7_29 =
100230ce                          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100230d4                      long double temp8_1 = fconvert.t(var_124_2)
100230d4                      x87_r7_29 - temp8_1
100230d8                      eax_12.w = (x87_r7_29 < temp8_1 ? 1 : 0) << 8
100230d8                          | (is_unordered.t(x87_r7_29, temp8_1) ? 1 : 0) << 0xa
100230d8                          | (x87_r7_29 == temp8_1 ? 1 : 0) << 0xe
100230d8                      
100230dd                      if ((eax_12:1.b & 1) != 0)
100230f0                          *(arg2 + 0xb04) = fconvert.s(j_sub_1000e120()
100230f0                              + fconvert.t(var_124_2) * fconvert.t(5f))
1002309b              else
1002309d                  edi_2 = 4
1002309d          
100230f6          long double st0_10 = j_sub_1000e120()
100230fb          long double temp4_1 = fconvert.t(*(arg2 + 0xb04))
100230fb          st0_10 - temp4_1
10023101          eax_12.w = (st0_10 < temp4_1 ? 1 : 0) << 8
10023101              | (is_unordered.t(st0_10, temp4_1) ? 1 : 0) << 0xa
10023101              | (st0_10 == temp4_1 ? 1 : 0) << 0xe
10023101          
10023106          if ((eax_12:1.b & 1) != 0)
10023108              edi_2 = 2
10023106          else if (edi_2 == 4)
10023114              eax_12 = *(arg2 + 0xac0)
10023114              
1002311c              if ((eax_12.b & 4) == 0)
1002312d                  eax_12.b |= 4
1002312f                  *(arg2 + 0xac0) = eax_12
1002311c              else
1002311e                  eax_12.b &= 0xfb
10023120                  edi_2 = 1
10023125                  *(arg2 + 0xac0) = eax_12
10023125          
10023135          long double x87_r7_33 = fconvert.t(var_11c_1)
10023139          long double temp7_1 = fconvert.t(0.40000000000000002)
10023139          x87_r7_33 - temp7_1
1002313f          eax_12.w = (x87_r7_33 < temp7_1 ? 1 : 0) << 8
1002313f              | (is_unordered.t(x87_r7_33, temp7_1) ? 1 : 0) << 0xa
1002313f              | (x87_r7_33 == temp7_1 ? 1 : 0) << 0xe
1002313f          
10023144          if ((eax_12:1.b & 0x41) == 0)
100231ad              *(arg2 + 0xb00) =
100231ad                  fconvert.s(fconvert.t(*(arg2 + 0xb00)) + fconvert.t(0.10000000000000001))
100231c3              long double x87_r7_41 =
100231c3                  (fconvert.t(1f) - fconvert.t(var_11c_1)) * fconvert.t(0.20000000000000001)
100231c3                  + fconvert.t(0.40000000000000002)
100231c9              float var_10c_2 = fconvert.s(x87_r7_41)
100231cd              long double x87_r6_3 = fconvert.t(var_11c_1)
100231d1              long double temp9_1 = fconvert.t(0.69999999999999996)
100231d1              x87_r6_3 - temp9_1
100231d7              eax_12.w = (x87_r6_3 < temp9_1 ? 1 : 0) << 8
100231d7                  | (is_unordered.t(x87_r6_3, temp9_1) ? 1 : 0) << 0xa
100231d7                  | (x87_r6_3 == temp9_1 ? 1 : 0) << 0xe | 0x3800
100231d7              
100231dc              if ((eax_12:1.b & 0x41) == 0)
100231f8                  long double x87_r7_44 =
100231f8                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100231f8                      - fconvert.t(0.5)
10023206                  x87_r7_41 = (x87_r7_44 + x87_r7_44) * fconvert.t(0.10000000000000001)
10023206                      + fconvert.t(var_10c_2)
10023206              
1002320a              long double temp11_1 = fconvert.t(*(arg2 + 0xb00))
1002320a              x87_r7_41 - temp11_1
10023210              eax_12.w = (x87_r7_41 < temp11_1 ? 1 : 0) << 8
10023210                  | (is_unordered.t(x87_r7_41, temp11_1) ? 1 : 0) << 0xa
10023210                  | (x87_r7_41 == temp11_1 ? 1 : 0) << 0xe
10023210              
10023215              if ((eax_12:1.b & 1) != 0)
10023229                  long double x87_r7_48 =
10023229                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1002322f                  long double temp13_1 = fconvert.t(0.93500000000000005)
1002322f                  x87_r7_48 - temp13_1
10023235                  int32_t eax_17
10023235                  eax_17.w = (x87_r7_48 < temp13_1 ? 1 : 0) << 8
10023235                      | (is_unordered.t(x87_r7_48, temp13_1) ? 1 : 0) << 0xa
10023235                      | (x87_r7_48 == temp13_1 ? 1 : 0) << 0xe
10023235                  
1002323a                  if ((eax_17:1.b & 0x41) == 0)
1002323c                      int32_t eax_18 = *(arg2 + 0xac0)
10023242                      *(arg2 + 0xb00) = 0
1002324f                      *(arg2 + 0xac0) = eax_18 ^ 1
1002324f              
10023378              for (int32_t i = 0; i s< 2; )
10023263                  float var_fc = var_118
10023268                  float var_f8 = var_114_1
1002326c                  int32_t var_f4_1 = 0
10023274                  j_sub_10043290(&var_fc)
1002328a                  float var_130
1002328a                  j_sub_100434b0(&var_fc, &var_f0, &var_130)
1002329a                  float var_12c
1002329a                  float var_128
1002329a                  
1002329a                  if ((*(arg2 + 0xac0) & 1) != 0)
100232a2                      var_130 = fconvert.s(fneg(fconvert.t(var_130)))
100232ac                      var_12c = fconvert.s(fneg(fconvert.t(var_12c)))
100232b6                      var_128 = fconvert.s(fneg(fconvert.t(var_128)))
100232b6                  
100232cc                  long double x87_r7_57 =
100232cc                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100232d2                  long double temp14_1 = fconvert.t(0.90000000000000002)
100232d2                  x87_r7_57 - temp14_1
100232d8                  int32_t eax_23
100232d8                  eax_23.w = (x87_r7_57 < temp14_1 ? 1 : 0) << 8
100232d8                      | (is_unordered.t(x87_r7_57, temp14_1) ? 1 : 0) << 0xa
100232d8                      | (x87_r7_57 == temp14_1 ? 1 : 0) << 0xe
100232d8                  
100232dd                  if ((eax_23:1.b & 0x41) == 0)
1002332b                      label_1002332b:
1002332b                      var_130 = fconvert.s(fconvert.t(var_130) + fconvert.t(var_108))
10023337                      var_12c = fconvert.s(fconvert.t(var_12c) + fconvert.t(var_104_1))
10023343                      var_128 = fconvert.s(fconvert.t(var_128) + fconvert.t(var_100_1))
100232dd                  else
100232df                      long double x87_r7_58 = fconvert.t(var_120_1)
100232e3                      long double temp15_1 = fconvert.t(180f)
100232e3                      x87_r7_58 - temp15_1
100232e9                      eax_23.w = (x87_r7_58 < temp15_1 ? 1 : 0) << 8
100232e9                          | (is_unordered.t(x87_r7_58, temp15_1) ? 1 : 0) << 0xa
100232e9                          | (x87_r7_58 == temp15_1 ? 1 : 0) << 0xe
100232e9                      
100232ee                      if ((eax_23:1.b & 0x41) != 0)
10023312                          long double x87_r7_65 = fconvert.t(var_120_1)
10023316                          long double temp16_1 = fconvert.t(100f)
10023316                          x87_r7_65 - temp16_1
1002331c                          eax_23.w = (x87_r7_65 < temp16_1 ? 1 : 0) << 8
1002331c                              | (is_unordered.t(x87_r7_65, temp16_1) ? 1 : 0) << 0xa
1002331c                              | (x87_r7_65 == temp16_1 ? 1 : 0) << 0xe
1002331c                          
10023321                          if ((eax_23:1.b & 1) != 0)
10023321                              goto label_1002332b
100232ee                      else
100232f8                          var_130 = fconvert.s(fconvert.t(var_130) + fconvert.t(var_118))
10023304                          var_12c = fconvert.s(fconvert.t(var_12c) + fconvert.t(var_114_1))
10023343                          var_128 = fconvert.s(fconvert.t(var_128) + fconvert.t(var_110_1))
10023343                  
10023353                  int32_t eax_24 = j_sub_10031be0(arg2 + 0xb40, &var_130, 400f, edi_2)
10023353                  
1002335d                  if (eax_24 != 0)
1002335d                      break
1002335d                  
1002335f                  int32_t edx_4 = *(arg2 + 0xac0)
10023365                  *(arg2 + 0xb00) = eax_24
1002336e                  i += 1
10023372                  *(arg2 + 0xac0) = edx_4 ^ 1
10023144          else
10023146              long double x87_r7_34 = fconvert.t(var_120_1)
1002314a              long double temp10_1 = fconvert.t(180f)
1002314a              x87_r7_34 - temp10_1
10023150              eax_12.w = (x87_r7_34 < temp10_1 ? 1 : 0) << 8
10023150                  | (is_unordered.t(x87_r7_34, temp10_1) ? 1 : 0) << 0xa
10023150                  | (x87_r7_34 == temp10_1 ? 1 : 0) << 0xe
10023150              
10023155              if ((eax_12:1.b & 0x41) != 0)
10023173                  label_10023173:
10023173                  long double x87_r7_35 = fconvert.t(var_120_1)
10023177                  long double temp12_1 = fconvert.t(100f)
10023177                  x87_r7_35 - temp12_1
1002317d                  eax_12.w = (x87_r7_35 < temp12_1 ? 1 : 0) << 8
1002317d                      | (is_unordered.t(x87_r7_35, temp12_1) ? 1 : 0) << 0xa
1002317d                      | (x87_r7_35 == temp12_1 ? 1 : 0) << 0xe
1002317d                  
10023182                  if ((eax_12:1.b & 1) != 0)
10023194                      j_sub_10031be0(arg2 + 0xb40, &var_108, 400f, edi_2)
10023155              else if (j_sub_10031be0(arg2 + 0xb40, &var_118, 400f, edi_2) == 0)
1002316d                  goto label_10023173
1002316d  
10023393  __builtin_memcpy(dest: arg1, src: &s, n: 0x30)

100233a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100233c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100233e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100234a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100234c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100234e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10023510    int32_t sub_10023510(void* arg1)

10023523  char* eax_1 = sub_10045630(j_sub_10028f80(*(arg1 + 4)), "ctf_r")
1002352b  int32_t eax_2 = neg.d(eax_1)
10023532  return sbb.d(eax_2, eax_2, eax_1 != 0) + 2

10023533                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10023540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10023550    int32_t sub_10023550(void* arg1, int32_t arg2)

1002357d  void var_7c
1002357d  __builtin_memcpy(dest: &var_7c, src: j_sub_1000abe0(&var_7c, arg2), n: 0x7c)
10023588  int32_t var_70
10023588  
10023588  if (var_70 != 0)
10023594      long double x87_r7_1 = fconvert.t(*(data_10064488 + 0x10))
10023597      long double temp0_1 = fconvert.t(0f)
10023597      x87_r7_1 - temp0_1
1002359d      int32_t eax
1002359d      eax.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
1002359d          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1002359d          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
100235a2      void var_f8
100235a2      
100235a2      if ((eax:1.b & 0x40) == 0)
100235cb          __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_f8, *(arg1 + 8)), 
100235cb              n: 0x7c)
100235d9          int32_t var_80
100235d9          int32_t var_4
100235d9          int32_t eax_5 = (var_4 ^ var_80) & 0x1c00
100235df          int32_t eax_6 = neg.d(eax_5)
100235ed          return sbb.d(eax_6, eax_6, eax_5 != 0) + 1
100235ed      
100235f3      long double x87_r7_2 = fconvert.t(*(data_1006445c + 0x10))
100235f6      long double temp1_1 = fconvert.t(0f)
100235f6      x87_r7_2 - temp1_1
100235fc      void* eax_9
100235fc      eax_9.w = (x87_r7_2 < temp1_1 ? 1 : 0) << 8
100235fc          | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
100235fc          | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe
100235fc      
10023601      if ((eax_9:1.b & 0x40) != 0)
10023654          long double x87_r7_3 = fconvert.t(*(data_10064460 + 0x10))
10023657          long double temp2_1 = fconvert.t(0f)
10023657          x87_r7_3 - temp2_1
1002365d          eax_9.w = (x87_r7_3 < temp2_1 ? 1 : 0) << 8
1002365d              | (is_unordered.t(x87_r7_3, temp2_1) ? 1 : 0) << 0xa
1002365d              | (x87_r7_3 == temp2_1 ? 1 : 0) << 0xe
1002365d          
10023662          if ((eax_9:1.b & 0x40) == 0)
10023666              char* eax_13 = j_sub_10028f80(var_70 - 1)
1002367a              char* eax_15
1002367a              int32_t ecx_5
1002367a              int32_t edx_4
1002367a              eax_15, ecx_5, edx_4 = j_sub_10028f80(*(arg1 + 4))
10023683              int32_t eax_16 = sub_10045cb0(eax_15, edx_4, ecx_5, eax_15, eax_13)
1002368b              int32_t eax_17 = neg.d(eax_16)
1002369a              return sbb.d(eax_17, eax_17, eax_16 != 0) + 1
1002369a          
100236a4          int16_t x87control
100236a4          char eax_20 = __ftol(x87control, fconvert.t(*(data_10064470 + 0x10)))
100236ae          void* eax_21
100236ae          
100236ae          if ((eax_20 & 0x40) == 0)
100236b9              long double x87_r7_5 = fconvert.t(*(data_100643ac + 0x10))
100236bc              long double temp5_1 = fconvert.t(0f)
100236bc              x87_r7_5 - temp5_1
100236c2              eax_21.w = (x87_r7_5 < temp5_1 ? 1 : 0) << 8
100236c2                  | (is_unordered.t(x87_r7_5, temp5_1) ? 1 : 0) << 0xa
100236c2                  | (x87_r7_5 == temp5_1 ? 1 : 0) << 0xe
100236c2          
100236c7          if ((eax_20 & 0x40) != 0 || (eax_21:1.b & 0x40) == 0)
100237c7              void* edi_4 = sub_10045700(j_sub_10028f80(*(arg1 + 4)), 0x2f)
100237c7              
100237ce              if (edi_4 == 0)
100237dc                  edi_4 = j_sub_10028f80(*(arg1 + 4))
100237dc              
100237ed              char* eax_41
100237ed              int32_t ecx_13
100237ed              int32_t edx_8
100237ed              eax_41, ecx_13, edx_8 = sub_10045700(j_sub_10028f80(var_70 - 1), 0x2f)
100237ed              
100237f7              if (eax_41 == 0)
100237fa                  eax_41, ecx_13, edx_8 = j_sub_10028f80(var_70 - 1)
100237fa              
1002380e              if (sub_10045cb0(eax_41, edx_8, ecx_13, edi_4, eax_41) == 0)
1002381f                  return 1
100236c7          else if ((eax_20 & 0x80) != 0)
100236ec              void* eax_23 = sub_10045700(j_sub_10028f80(*(arg1 + 4)), 0x2f)
100236f8              void* var_fc_1
100236f8              
100236f8              if (eax_23 == 0)
10023717                  int32_t edi_2 = j_sub_10028f80(*(arg1 + 4))
10023719                  int32_t i = 0xffffffff
10023719                  
10023721                  while (i != 0)
10023721                      bool cond:0_1 = 0 != *edi_2
10023721                      edi_2 += 1
10023721                      i -= 1
10023721                      
10023721                      if (not(cond:0_1))
10023721                          break
10023721                  
10023726                  var_fc_1 = not.d(i) - 1
100236f8              else
10023708                  var_fc_1 = eax_23 - j_sub_10028f80(*(arg1 + 4))
10023708              
10023737              void* eax_28 = sub_10045700(j_sub_10028f80(var_70 - 1), 0x2f)
10023744              void* ecx_10
10023744              
10023744              if (eax_28 == 0)
10023759                  int32_t edi_3 = j_sub_10028f80(var_70 - 1)
1002375b                  int32_t i_1 = 0xffffffff
1002375b                  
10023763                  while (i_1 != 0)
10023763                      bool cond:1_1 = 0 != *edi_3
10023763                      edi_3 += 1
10023763                      i_1 -= 1
10023763                      
10023763                      if (not(cond:1_1))
10023763                          break
10023763                  
10023767                  ecx_10 = not.d(i_1) - 1
10023744              else
10023750                  ecx_10 = eax_28 - j_sub_10028f80(var_70 - 1)
10023750              
1002376e              if (var_fc_1 == ecx_10)
10023776                  void* eax_32 = j_sub_10028f80(var_70 - 1)
10023776                  
10023796                  if (StrCompareN(j_sub_10028f80(*(arg1 + 4)), eax_32, var_fc_1) == 0)
100237ab                      return 1
10023601      else
1002362a          __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_f8, *(arg1 + 8)), 
1002362a              n: 0x7c)
10023638          int32_t var_94
10023638          int32_t var_18
10023638          
10023638          if (var_94 != var_18)
1002364d              return 1
1002364d  
1002382c  return 0

1002382d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10023840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100238a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100238c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100238e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100238f0    int32_t sub_100238f0(void* arg1)

100238f7  int32_t result = 0
100238f9  int32_t i = 0
100238f9  
100238fd  if (data_10064028 s<= 0)
10023948      return 0
10023948  
10023901  int32_t ebx = 0
10023901  
1002393b  do
10023908      int32_t j = 0xffffffff
1002390b      int32_t edi_1 = ebx + data_100643a8
1002390b      
10023910      while (j != 0)
10023910          bool cond:0_1 = 0 != *edi_1
10023910          edi_1 += 1
10023910          j -= 1
10023910          
10023910          if (not(cond:0_1))
10023910              break
10023910      
10023915      if (not.d(j) != 1 && j_sub_10023550(arg1, i + 1) != 0)
1002392c          result += 1
1002392c      
10023932      i += 1
10023933      ebx += 0x90
1002393b  while (i s< data_10064028)
1002393b  
10023943  return result

10023949                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
10023960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10023970    int32_t sub_10023970(void* arg1)

1002398e  int32_t eax_1 = j_sub_1002a7a0(*(arg1 + 0x688), 0x2d, 0, 1)
1002399d  int32_t eax_2 = *(arg1 + 0x764)
100239ac  bool cond:0 = *(arg1 + 0xacc) s> eax_2
100239ae  *(arg1 + 0xacc) = eax_2
100239bd  int32_t ecx
100239bd  ecx.b = cond:0
100239d5  void var_bc
100239d5  int32_t eax_5 =
100239d5      j_sub_1000baa0(*(arg1 + 8), arg1 + 0x6b0, arg1 + 0x1080, 360f, 0x10, &var_bc)
100239e3  int32_t var_160 = 0
100239e3  
100239eb  if (eax_5 s> 0)
100239f1      void* ebp_1 = &var_bc
10023bf8      bool cond:2_1
10023bf8      
10023bf8      do
10023a14          void var_138
10023a14          void var_7c
10023a14          __builtin_memcpy(dest: &var_138, src: j_sub_1000abe0(&var_7c, *ebp_1), n: 0x7c)
10023a34          int32_t var_12c
10023a34          
10023a34          if (j_sub_10021710(&var_138) == 0 && var_12c != *(arg1 + 8))
10023a3a              unimplemented  {fld st0, dword [esp+0x50]}
10023a3e              unimplemented  {fsub st0, dword [ebx+0x694]}
10023a48              float var_15c
10023a48              float* var_17c_2 = &var_15c
10023a49              var_15c = fconvert.s(unimplemented  {fstp dword [esp+0x20], st0})
10023a49              unimplemented  {fstp dword [esp+0x20], st0}
10023a4d              unimplemented  {fld st0, dword [esp+0x58]}
10023a51              unimplemented  {fsub st0, dword [ebx+0x698]}
10023a57              float var_158_1 = fconvert.s(unimplemented  {fstp dword [esp+0x24], st0})
10023a57              unimplemented  {fstp dword [esp+0x24], st0}
10023a5b              unimplemented  {fld st0, dword [esp+0x5c]}
10023a5f              unimplemented  {fsub st0, dword [ebx+0x69c]}
10023a65              float var_154_1 = fconvert.s(unimplemented  {fstp dword [esp+0x28], st0})
10023a65              unimplemented  {fstp dword [esp+0x28], st0}
10023a69              j_sub_10043500(var_17c_2)
10023a69              unimplemented  {call j_sub_10043500}
10023a75              float var_168_1 = fconvert.s(unimplemented  {fstp dword [esp+0x10], st0})
10023a75              unimplemented  {fstp dword [esp+0x10], st0}
10023a7b              int32_t eax_9
10023a7b              int16_t top
10023a7b              
10023a7b              if (eax_1 == 0)
10023a7d                  unimplemented  {fld st0, dword [esp+0x10]}
10023a81                  long double temp0_1 = fconvert.t(900f)
10023a81                  unimplemented  {fcomp st0, dword [&data_100582ec]} f- temp0_1
10023a81                  bool c0_1 = unimplemented  {fcomp st0, dword [&data_100582ec]} f< temp0_1
10023a81                  bool c2_1 = is_unordered.t(
10023a81                      unimplemented  {fcomp st0, dword [&data_100582ec]}, temp0_1)
10023a81                  bool c3_1 = unimplemented  {fcomp st0, dword [&data_100582ec]} f== temp0_1
10023a81                  unimplemented  {fcomp st0, dword [&data_100582ec]}
10023a87                  eax_9.w = (c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa
10023a87                      | (c3_1 ? 1 : 0) << 0xe | (top & 7) << 0xb
10023a87              
10023a8c              if (eax_1 != 0 || (eax_9:1.b & 0x41) != 0)
10023a98                  float var_164_1
10023a98                  
10023a98                  if (ecx == 0)
10023aa4                      unimplemented  {fld st0, dword [esp+0x10]}
10023aa8                      long double temp1_1 = fconvert.t(810f)
10023aa8                      unimplemented  {fcomp st0, dword [&data_100582e8]} f- temp1_1
10023aa8                      bool c0_2 =
10023aa8                          unimplemented  {fcomp st0, dword [&data_100582e8]} f< temp1_1
10023aa8                      bool c2_2 = is_unordered.t(
10023aa8                          unimplemented  {fcomp st0, dword [&data_100582e8]}, temp1_1)
10023aa8                      bool c3_2 =
10023aa8                          unimplemented  {fcomp st0, dword [&data_100582e8]} f== temp1_1
10023aa8                      unimplemented  {fcomp st0, dword [&data_100582e8]}
10023aae                      eax_9.w = (c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
10023aae                          | (c3_2 ? 1 : 0) << 0xe | (top & 7) << 0xb
10023ab3                      int16_t top_11
10023ab3                      
10023ab3                      if ((eax_9:1.b & 0x41) != 0)
10023abd                          top_11 = top - 1
10023abd                          unimplemented  {fld st0, dword [esp+0x10]}
10023ab3                      else
10023ab5                          top_11 = top - 1
10023ab5                          unimplemented  {fld st0, dword [&data_100582e8]}
10023ab5                      
10023ac1                      unimplemented  {fmul st0, dword [&data_1005813c]}
10023ac7                      unimplemented  {fsubr st0, dword [&data_100581e4]}
10023acd                      unimplemented  {fsubr st0, dword [&data_100582e4]}
10023ad3                      var_164_1 = fconvert.s(unimplemented  {fstp dword [esp+0x14], st0})
10023ad3                      unimplemented  {fstp dword [esp+0x14], st0}
10023ad3                      top = top_11 + 1
10023a98                  else
10023a9a                      var_164_1 = 360f
10023a9a                  
10023ae1                  float var_144
10023ae1                  j_sub_10041790(&var_15c, &var_144)
10023ae1                  
10023b01                  if (j_sub_1000b640(arg1 + 0x1080, var_164_1, &var_144) != 0)
10023b0c                      int32_t eax_12 = j_sub_10023550(arg1, *ebp_1)
10023b0c                      
10023b16                      if (eax_12 == 0)
10023b1e                          if (ecx != 0)
10023b20                              unimplemented  {fld st0, dword [esp+0x10]}
10023b24                              long double temp2_1 = fconvert.t(300f)
10023b24                              unimplemented  {fcomp st0, dword [&data_10058214]} f- temp2_1
10023b24                              bool c0_3 = unimplemented  {fcomp st0, dword [&data_10058214]}
10023b24                                  f< temp2_1
10023b24                              bool c2_3 = is_unordered.t(
10023b24                                  unimplemented  {fcomp st0, dword [&data_10058214]}, 
10023b24                                  temp2_1)
10023b24                              bool c3_3 = unimplemented  {fcomp st0, dword [&data_10058214]}
10023b24                                  f== temp2_1
10023b24                              unimplemented  {fcomp st0, dword [&data_10058214]}
10023b2a                              eax_12.w = (c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
10023b2a                                  | (c3_3 ? 1 : 0) << 0xe | (top & 7) << 0xb
10023b2a                          
10023b2f                          if (ecx != 0 && (eax_12:1.b & 0x41) != 0)
10023c0f                              label_10023c0f:
10023c0f                              *(arg1 + 0x1064) = var_12c
10023c15                              j_sub_1000e120()
10023c15                              unimplemented  {call j_sub_1000e120}
10023c1a                              *(arg1 + 0xb20) =
10023c1a                                  fconvert.s(unimplemented  {fstp dword [ebx+0xb20], st0})
10023c1a                              unimplemented  {fstp dword [ebx+0xb20], st0}
10023c2f                              return 1
10023c2f                          
10023b40                          int32_t var_128
10023b40                          int32_t eax_13 =
10023b40                              j_sub_1000d770(&var_128, nullptr, nullptr, nullptr)
10023b40                          top -= 1
10023b40                          unimplemented  {call j_sub_1000d770}
10023b40                          
10023b4b                          if (eax_13 s>= 5)
10023b51                              unimplemented  {fld st0, dword [esp+0x10]}
10023b55                              long double temp3_1 = fconvert.t(300f)
10023b55                              unimplemented  {fcomp st0, dword [&data_10058214]} f- temp3_1
10023b55                              bool c0_4 = unimplemented  {fcomp st0, dword [&data_10058214]}
10023b55                                  f< temp3_1
10023b55                              bool c2_4 = is_unordered.t(
10023b55                                  unimplemented  {fcomp st0, dword [&data_10058214]}, 
10023b55                                  temp3_1)
10023b55                              bool c3_4 = unimplemented  {fcomp st0, dword [&data_10058214]}
10023b55                                  f== temp3_1
10023b55                              unimplemented  {fcomp st0, dword [&data_10058214]}
10023b5b                              eax_13.w = (c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
10023b5b                                  | (c3_4 ? 1 : 0) << 0xe | (top & 7) << 0xb
10023b5b                              
10023b60                              if ((eax_13:1.b & 0x41) != 0)
10023b60                                  goto label_10023c0f
10023b60                              
10023b75                              if (j_sub_10021780(&var_138) != 0)
10023b75                                  goto label_10023c0f
10023b75                              
10023b7b                              unimplemented  {fld st0, dword [ebx+0x694]}
10023b81                              unimplemented  {fsub st0, dword [esp+0x50]}
10023b8d                              float* var_17c_7 = &var_144
10023b8e                              int32_t var_180_5 = &var_15c
10023b8f                              var_15c =
10023b8f                                  fconvert.s(unimplemented  {fstp dword [esp+0x24], st0})
10023b8f                              unimplemented  {fstp dword [esp+0x24], st0}
10023b93                              unimplemented  {fld st0, dword [ebx+0x698]}
10023b99                              unimplemented  {fsub st0, dword [esp+0x5c]}
10023b9d                              float var_158_2 =
10023b9d                                  fconvert.s(unimplemented  {fstp dword [esp+0x28], st0})
10023b9d                              unimplemented  {fstp dword [esp+0x28], st0}
10023ba1                              unimplemented  {fld st0, dword [ebx+0x69c]}
10023ba7                              unimplemented  {fsub st0, dword [esp+0x60]}
10023bab                              float var_154_2 =
10023bab                                  fconvert.s(unimplemented  {fstp dword [esp+0x2c], st0})
10023bab                              unimplemented  {fstp dword [esp+0x2c], st0}
10023bab                              top = top
10023baf                              j_sub_10041790(var_180_5, var_17c_7)
10023bcd                              void var_11c
10023bcd                              
10023bcd                              if (j_sub_1000b640(&var_11c, 160f, &var_144) != 0)
10023bcd                                  goto label_10023c0f
10023bcd                              
10023bd4                              j_sub_10021290(arg1, *ebp_1)
10023bd4                              
10023be4                              if (j_sub_100228c0(arg1) == 0)
10023be4                                  goto label_10023c0f
10023be4          
10023bef          ebp_1 += 4
10023bf2          cond:2_1 = var_160 + 1 s< eax_5
10023bf4          var_160 += 1
10023bf8      while (cond:2_1)
10023bf8  
10023c0a  return 0

10023c30                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
10023c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10023cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10023ce0    void* sub_10023ce0(float arg1)

10023cef  int32_t var_164
10023cef  __builtin_memcpy(dest: &var_164, 
10023cef      src: "\x00\x00\x80\xc0\x00\x00\x80\xc0\x00\x00\x80\xc0\x00\x00\x80\x40\x00\x00\x80\x40\x00\x00\x80\x40", 
10023cef      n: 0x18)
10023cf7  void* result = *(arg1 i+ 0x1064)
10023cf7  
10023d27  if (result != 0)
10023d4d      float var_1a8_1 = fconvert.s(j_sub_1002a690(*(arg1 i+ 0x688), 7, 0f, 1f))
10023d56      long double st0_2 = j_sub_1002a690(*(arg1 i+ 0x688), 8, 0f, 1f)
10023d5b      float var_18c_1 = fconvert.s(st0_2)
10023d5f      long double temp0_1 = fconvert.t(0f)
10023d5f      st0_2 - temp0_1
10023d5f      
10023d6d      if ((((st0_2 < temp0_1 ? 1 : 0) << 8 | (is_unordered.t(st0_2, temp0_1) ? 1 : 0) << 0xa
10023d6d              | (st0_2 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10023d6f          var_18c_1 = 9.99999975e-05f
10023d6f      
10023d80      void* eax_2
10023d80      int32_t ecx_2
10023d80      int32_t edx_2
10023d80      eax_2, ecx_2, edx_2 = j_sub_100354b0(arg1 i+ 0x1048)
10023d80      
10023d9a      if (sub_10045cb0(eax_2 + 4, edx_2, ecx_2, eax_2 + 4, "Rocket Launcher") == 0)
10023da2          var_18c_1 = fconvert.s(sqrt(fconvert.t(var_18c_1)))
10023da2      
10023dcd      void var_f8
10023dcd      void var_7c
10023dcd      __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_7c, *(arg1 i+ 0x1064)), 
10023dcd          n: 0x7c)
10023dea      float ecx_3 = *(arg1 i+ 0x694)
10023df0      float var_e8
10023df0      float var_198 = var_e8
10023df4      float edx_4 = *(arg1 i+ 0x698)
10023dfe      float var_e0
10023dfe      float var_190_1 = fconvert.s(fconvert.t(var_e0) + fconvert.t(8f))
10023e02      long double x87_r7_7 = fconvert.t(*(arg1 i+ 0x69c))
10023e08      int32_t eax_8 = *(arg1 i+ 8)
10023e0b      float var_17c = ecx_3
10023e0f      long double x87_r7_8 = x87_r7_7 + fconvert.t(*(arg1 i+ 0x50))
10023e24      float var_174 = fconvert.s(x87_r7_8)
10023e3d      var_174 = fconvert.s(x87_r7_8 + fconvert.t(*(eax_2 + 0x128)))
10023e57      int32_t var_158
10023e57      void var_14c
10023e57      __builtin_memcpy(dest: &var_14c, 
10023e57          src: j_sub_10003010(&var_7c, &var_17c, &var_164, &var_158, &var_198, eax_8, 
10023e57              0x6000003), 
10023e57          n: 0x54)
10023e59      float var_144
10023e59      long double x87_r7_10 = fconvert.t(var_144)
10023e5d      long double temp1_1 = fconvert.t(1f)
10023e5d      x87_r7_10 - temp1_1
10023e63      float* eax_9
10023e63      eax_9.w = (x87_r7_10 < temp1_1 ? 1 : 0) << 8
10023e63          | (is_unordered.t(x87_r7_10, temp1_1) ? 1 : 0) << 0xa
10023e63          | (x87_r7_10 == temp1_1 ? 1 : 0) << 0xe
10023e7a      float* var_fc
10023e7a      int32_t var_ec
10023e7a      
10023e7a      if ((eax_9:1.b & 0x41) != 0 && var_fc != var_ec)
10023e86          var_190_1 = fconvert.s(fconvert.t(var_190_1) + fconvert.t(16f))
10023e86      
10023e8a      long double x87_r7_13 = fconvert.t(*(eax_2 + 0x10c))
10023e90      long double temp2_1 = fconvert.t(0f)
10023e90      x87_r7_13 - temp2_1
10023e96      eax_9.w = (x87_r7_13 < temp2_1 ? 1 : 0) << 8
10023e96          | (is_unordered.t(x87_r7_13, temp2_1) ? 1 : 0) << 0xa
10023e96          | (x87_r7_13 == temp2_1 ? 1 : 0) << 0xe
10023e9b      float var_1a4
10023e9b      float var_1a0
10023e9b      float var_e4
10023e9b      
10023e9b      if ((eax_9:1.b & 0x40) == 0)
10023ea1          long double x87_r7_14 = fconvert.t(var_1a8_1)
10023ea5          long double temp4_1 = fconvert.t(0.40000000000000002)
10023ea5          x87_r7_14 - temp4_1
10023eab          eax_9.w = (x87_r7_14 < temp4_1 ? 1 : 0) << 8
10023eab              | (is_unordered.t(x87_r7_14, temp4_1) ? 1 : 0) << 0xa
10023eab              | (x87_r7_14 == temp4_1 ? 1 : 0) << 0xe
10023eab          
10023eb0          if ((eax_9:1.b & 0x41) == 0)
10023ec8              var_1a4 = fconvert.s(fconvert.t(var_e8) - fconvert.t(*(arg1 i+ 0x694)))
10023ed9              var_1a0 = fconvert.s(fconvert.t(var_e4) - fconvert.t(*(arg1 i+ 0x698)))
10023eea              float var_19c_1 =
10023eea                  fconvert.s(fconvert.t(var_e0) - fconvert.t(*(arg1 i+ 0x69c)))
10023ef3              float var_1ac_1 = fconvert.s(j_sub_10043500(&var_1a4))
10023f09              int32_t var_19c_2 = 0
10023f12              float var_c4
10023f12              var_1a4 = fconvert.s(fconvert.t(var_e8) - fconvert.t(var_c4))
10023f24              float var_c0
10023f24              var_1a0 = fconvert.s(fconvert.t(var_e4) - fconvert.t(var_c0))
10023f2d              float var_f0
10023f2d              long double x87_r7_27 = j_sub_10043290(&var_1a4) / fconvert.t(var_f0)
10023f48              float* var_1c8_2 = &var_1a4
10023f5b              j_sub_10043380(&var_e8, 
10023f5b                  fconvert.s(fconvert.t(var_1ac_1) / fconvert.t(*(eax_2 + 0x10c))
10023f5b                      * x87_r7_27), 
10023f5b                  &var_1a4, &var_198)
10023f5b      
10023f63      long double x87_r7_28 = fconvert.t(var_1a8_1)
10023f67      long double temp3_1 = fconvert.t(0.59999999999999998)
10023f67      x87_r7_28 - temp3_1
10023f6d      eax_9.w = (x87_r7_28 < temp3_1 ? 1 : 0) << 8
10023f6d          | (is_unordered.t(x87_r7_28, temp3_1) ? 1 : 0) << 0xa
10023f6d          | (x87_r7_28 == temp3_1 ? 1 : 0) << 0xe
10023f6d      
10023f85      if ((eax_9:1.b & 0x41) == 0 && (*(*(eax_2 + 0x154) + 0xb4) & 2) != 0)
10023f91          long double x87_r7_30 = fconvert.t(*(arg1 i+ 0x69c)) + fconvert.t(16f)
10023f97          long double temp6_1 = fconvert.t(var_e0)
10023f97          x87_r7_30 - temp6_1
10023f9e          void* eax_10
10023f9e          eax_10.w = (x87_r7_30 < temp6_1 ? 1 : 0) << 8
10023f9e              | (is_unordered.t(x87_r7_30, temp6_1) ? 1 : 0) << 0xa
10023f9e              | (x87_r7_30 == temp6_1 ? 1 : 0) << 0xe
10023f9e          
10023fa3          if ((eax_10:1.b & 0x41) == 0)
10023fc5              float var_170 = var_e8
10023fd9              float var_16c_1 = var_e4
10023fe9              float var_168_1 = fconvert.s(fconvert.t(var_e0) - fconvert.t(64f))
1002400d              __builtin_memcpy(dest: &var_14c, 
1002400d                  src: j_sub_10003010(&var_7c, &var_e8, 0, 0, &var_170, var_ec, 0x6000003), 
1002400d                  n: 0x54)
1002401d              float var_188 = var_198
10024027              int32_t var_148
10024027              float var_138
10024027              long double x87_r7_34
10024027              
10024027              if (var_148 == 0)
1002403f                  x87_r7_34 = fconvert.t(var_138) - fconvert.t(8f)
10024027              else
10024030                  x87_r7_34 = fconvert.t(var_e0) - fconvert.t(16f)
10024030              
1002404d              float var_180_1 = fconvert.s(x87_r7_34)
1002407e              __builtin_memcpy(dest: &var_14c, 
1002407e                  src: j_sub_10003010(&var_7c, &var_17c, 0, 0, &var_188, *(arg1 i+ 8), 
1002407e                      0x6000003), 
1002407e                  n: 0x54)
10024087              long double x87_r7_37 = fconvert.t(var_138) - fconvert.t(var_180_1)
1002408d              long double x87_r6_5 = fabs(x87_r7_37)
1002408f              long double temp8_1 = fconvert.t(50.0)
1002408f              x87_r6_5 - temp8_1
10024095              int32_t eax_15
10024095              eax_15.w = (x87_r6_5 < temp8_1 ? 1 : 0) << 8
10024095                  | (is_unordered.t(x87_r6_5, temp8_1) ? 1 : 0) << 0xa
10024095                  | (x87_r6_5 == temp8_1 ? 1 : 0) << 0xe | 0x3800
10024095              
1002409a              if ((eax_15:1.b & 1) != 0)
100240ad                  float var_140
100240ad                  var_1a4 = fconvert.s(fconvert.t(var_140) - fconvert.t(var_188))
100240bc                  float var_13c
100240bc                  var_1a0 = fconvert.s(fconvert.t(var_13c) - fconvert.t(var_e4))
100240c0                  float var_19c_3 = fconvert.s(x87_r7_37)
100240c4                  long double st0_5 = j_sub_10043500(&var_1a4)
100240c9                  long double temp9_1 = fconvert.t(60f)
100240c9                  st0_5 - temp9_1
100240c9                  
100240d7                  if ((((st0_5 < temp9_1 ? 1 : 0) << 8
100240d7                          | (is_unordered.t(st0_5, temp9_1) ? 1 : 0) << 0xa
100240d7                          | (st0_5 == temp9_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
100240ea                      var_1a4 = fconvert.s(fconvert.t(var_140) - fconvert.t(var_17c))
100240f9                      var_1a0 = fconvert.s(fconvert.t(var_13c) - fconvert.t(edx_4))
10024108                      float var_19c_4 =
10024108                          fconvert.s(fconvert.t(var_138) - fconvert.t(var_174))
1002410c                      long double st0_6 = j_sub_10043500(&var_1a4)
10024111                      long double temp10_1 = fconvert.t(150f)
10024111                      st0_6 - temp10_1
10024111                      
1002411f                      if ((((st0_6 < temp10_1 ? 1 : 0) << 8
1002411f                              | (is_unordered.t(st0_6, temp10_1) ? 1 : 0) << 0xa
1002411f                              | (st0_6 == temp10_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
10024160                          __builtin_memcpy(dest: &var_14c, 
10024160                              src: j_sub_10003010(&var_7c, &var_140, 0, 0, &var_e8, var_ec, 
10024160                                  0x6000003), 
10024160                              n: 0x54)
10024162                          long double x87_r7_46 = fconvert.t(var_144)
10024166                          long double temp11_1 = fconvert.t(1f)
10024166                          x87_r7_46 - temp11_1
1002416c                          int32_t eax_19
1002416c                          eax_19.w = (x87_r7_46 < temp11_1 ? 1 : 0) << 8
1002416c                              | (is_unordered.t(x87_r7_46, temp11_1) ? 1 : 0) << 0xa
1002416c                              | (x87_r7_46 == temp11_1 ? 1 : 0) << 0xe
1002416c                          
10024171                          if ((eax_19:1.b & 1) == 0)
1002417f                              var_198 = var_188
10024187                              var_190_1 = var_180_1
10024187      
10024199      float var_1a8_2 = fconvert.s(fconvert.t(1f) - fconvert.t(var_18c_1))
100241b5      long double x87_r7_51 =
100241b5          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f) - fconvert.t(0.5)
100241cb      var_198 = fconvert.s(
100241cb          (x87_r7_51 + x87_r7_51) * fconvert.t(var_1a8_2) * fconvert.t(20.0)
100241cb          + fconvert.t(var_198))
100241e7      long double x87_r7_58 =
100241e7          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f) - fconvert.t(0.5)
100241fd      float var_194_2 = fconvert.s(
100241fd          (x87_r7_58 + x87_r7_58) * fconvert.t(var_1a8_2) * fconvert.t(20.0)
100241fd          + fconvert.t(var_e4))
10024201      int32_t eax_25
10024201      int32_t ecx_8
10024201      int32_t edx_8
10024201      eax_25, ecx_8, edx_8 = sub_10045187()
10024222      long double x87_r7_65 =
10024222          float.t(eax_25 & 0x7fff) * fconvert.t(3.05185094e-05f) - fconvert.t(0.5)
10024238      float var_190_2 = fconvert.s(
10024238          (x87_r7_65 + x87_r7_65) * fconvert.t(var_1a8_2) * fconvert.t(10.0)
10024238          + fconvert.t(var_190_1))
10024246      var_1a4 = fconvert.s(fconvert.t(var_198) - fconvert.t(*(arg1 i+ 0x6b0)))
10024254      var_1a0 = fconvert.s(fconvert.t(var_194_2) - fconvert.t(*(arg1 i+ 0x6b4)))
10024262      float var_19c_5 = fconvert.s(fconvert.t(var_190_2) - fconvert.t(*(arg1 i+ 0x6b8)))
10024262      
10024270      if (sub_10045cb0(eax_2 + 4, edx_8, ecx_8, eax_2 + 4, "Railgun") == 0)
10024277          j_sub_10043290(&var_1a4)
10024281          float* esi_6 = &var_1a4
10024285          int32_t i_1 = 3
100242be          int32_t i
100242be          
100242be          do
10024294              esi_6 = &esi_6[1]
1002429b              i = i_1
1002429b              i_1 -= 1
100242a6              long double x87_r7_79 =
100242a6                  float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100242a6                  - fconvert.t(0.5)
100242bb              esi_6[-1] = fconvert.s((x87_r7_79 + x87_r7_79) * fconvert.t(var_1a8_2)
100242bb                  * fconvert.t(0.29999999999999999) + fconvert.t(esi_6[-1]))
100242be          while (i != 1)
100242be      
100242cc      j_sub_10041790(&var_1a4, arg1 i+ 0x108c)
100242e9      long double x87_r7_86 =
100242e9          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f) - fconvert.t(0.5)
10024303      long double x87_r7_90 = (x87_r7_86 + x87_r7_86) * fconvert.t(*(eax_2 + 0x108))
10024303          * fconvert.t(6f) * fconvert.t(var_1a8_2) + fconvert.t(*(arg1 i+ 0x108c))
1002430d      *(arg1 i+ 0x108c) = fconvert.s(x87_r7_90)
10024315      *(arg1 i+ 0x108c) = fconvert.s(j_sub_10042d40(fconvert.s(x87_r7_90)))
1002432f      long double x87_r7_94 =
1002432f          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f) - fconvert.t(0.5)
10024349      long double x87_r7_98 = (x87_r7_94 + x87_r7_94) * fconvert.t(*(eax_2 + 0x104))
10024349          * fconvert.t(6f) * fconvert.t(var_1a8_2) + fconvert.t(*(arg1 i+ 0x1090))
10024357      *(arg1 i+ 0x1090) = fconvert.s(x87_r7_98)
1002435e      long double st0_9 = j_sub_10042d40(fconvert.s(x87_r7_98))
10024363      int32_t edx_9 = *(arg1 i+ 0x690)
10024369      *(arg1 i+ 0x1090) = fconvert.s(st0_9)
1002436f      int32_t var_1d0_2 = edx_9
10024371      int80_t st0_10
10024371      result, st0_10 = j_sub_10029150(arg1)
10024376      long double x87_r6_14 = fconvert.t(var_18c_1)
1002437a      long double temp5_1 = fconvert.t(0.80000000000000004)
1002437a      x87_r6_14 - temp5_1
10024385      result.w = (x87_r6_14 < temp5_1 ? 1 : 0) << 8
10024385          | (is_unordered.t(x87_r6_14, temp5_1) ? 1 : 0) << 0xa
10024385          | (x87_r6_14 == temp5_1 ? 1 : 0) << 0xe | 0x3800
10024385      
1002438a      if ((result:1.b & 0x41) == 0)
10024392          int32_t ecx_10 = *(arg1 i+ 0x108c)
1002439a          *(arg1 i+ 0x1084) = *(arg1 i+ 0x1090)
100243a0          int32_t edx_11 = *(arg1 i+ 4)
100243a4          *(arg1 i+ 0x1080) = ecx_10
100243ad          *(arg1 i+ 0x1088) = *(arg1 i+ 0x1094)
100243b3          return j_sub_100375a0(edx_11, arg1 i+ 0x1080)
100243b3  
100243c3  return result

100243c4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
100243e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100244a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100244c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100244e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10024590    void* sub_10024590(void* arg1)

100245a1  int32_t var_164 = 0xc1000000
100245a9  void* result = *(arg1 + 0x1064)
100245af  int32_t var_160 = 0xc1000000
100245b9  int32_t var_15c = 0xc1000000
100245c1  int32_t var_188 = 0x41000000
100245c9  int32_t var_184 = 0x41000000
100245d1  int32_t var_180 = 0x41000000
100245d1  
100245d9  if (result != 0)
100245ef      long double st0_1
100245ef      result, st0_1 = j_sub_1002a690(*(arg1 + 0x688), 0xb, 0f, 1f)
10024600      long double x87_r7_3 = j_sub_1000e120() - fconvert.t(fconvert.s(st0_1))
10024604      long double temp0_1 = fconvert.t(*(arg1 + 0xb20))
10024604      x87_r7_3 - temp0_1
1002460a      result.w = (x87_r7_3 < temp0_1 ? 1 : 0) << 8
1002460a          | (is_unordered.t(x87_r7_3, temp0_1) ? 1 : 0) << 0xa
1002460a          | (x87_r7_3 == temp0_1 ? 1 : 0) << 0xe
1002460a      
1002460f      if ((result:1.b & 1) == 0)
1002463b          void var_f8
1002463b          void var_7c
1002463b          __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_7c, *(arg1 + 0x1064)), 
1002463b              n: 0x7c)
1002464a          float var_e8
1002464a          float var_17c = fconvert.s(fconvert.t(var_e8) - fconvert.t(*(arg1 + 0x694)))
1002465b          float var_e4
1002465b          float var_178_1 = fconvert.s(fconvert.t(var_e4) - fconvert.t(*(arg1 + 0x698)))
1002466d          float var_e0
1002466d          float var_174 = fconvert.s(fconvert.t(var_e0) - fconvert.t(*(arg1 + 0x69c)))
10024671          long double st0_3 = j_sub_10043500(&var_17c)
10024676          long double temp1_1 = fconvert.t(100f)
10024676          st0_3 - temp1_1
1002467f          float var_1a4_2 = 120f
1002467f          
1002468c          if ((((st0_3 < temp1_1 ? 1 : 0) << 8
1002468c                  | (is_unordered.t(st0_3, temp1_1) ? 1 : 0) << 0xa
1002468c                  | (st0_3 == temp1_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
1002468e              var_1a4_2 = 50f
1002468e          
100246b4          result = j_sub_1000b750(*(arg1 + 8), arg1 + 0x6b0, arg1 + 0x1080, var_1a4_2, 
100246b4              *(arg1 + 0x1064))
100246b4          
100246be          if (result != 0)
100246cb              result = j_sub_100354b0(arg1 + 0x1048)
100246d0              void* result_2 = result
100246d0              
100246d7              if (result_2 != 0)
100246e9                  float ecx_4 = *(arg1 + 0x698)
100246ef                  long double x87_r7_12 =
100246ef                      fconvert.t(*(arg1 + 0x69c)) + fconvert.t(*(arg1 + 0x50))
100246f2                  float var_1a0 = *(arg1 + 0x694)
10024702                  float var_198_1 = fconvert.s(x87_r7_12)
1002470b                  float var_194
1002470b                  float var_170
1002470b                  j_sub_100426b0(arg1 + 0x1080, &var_194, &var_170, nullptr)
1002473e                  var_1a0 = fconvert.s(fconvert.t(var_170) * fconvert.t(*(result_2 + 0x124))
1002473e                      + fconvert.t(var_194) * fconvert.t(*(result_2 + 0x120))
1002473e                      + fconvert.t(var_1a0))
1002475c                  float var_190
1002475c                  float var_16c
1002475c                  float var_19c_2 = fconvert.s(
1002475c                      fconvert.t(var_16c) * fconvert.t(*(result_2 + 0x124))
1002475c                      + fconvert.t(var_190) * fconvert.t(*(result_2 + 0x120))
1002475c                      + fconvert.t(ecx_4))
10024780                  float var_18c
10024780                  float var_168
10024780                  float var_198_2 = fconvert.s(
10024780                      fconvert.t(var_168) * fconvert.t(*(result_2 + 0x124))
10024780                      + fconvert.t(var_18c) * fconvert.t(*(result_2 + 0x120))
10024780                      + fconvert.t(*(result_2 + 0x128)) + fconvert.t(var_198_1))
10024784                  float var_158
10024784                  j_sub_10043380(&var_1a0, 1000f, &var_194, &var_158)
1002479d                  j_sub_10043380(&var_1a0, -12f, &var_194, &var_1a0)
100247e3                  void var_14c
100247e3                  __builtin_memcpy(dest: &var_14c, 
100247e3                      src: j_sub_10003010(&var_7c, &var_1a0, &var_164, &var_188, &var_158, 
100247e3                          *(arg1 + 8), 0x6000003), 
100247e3                      n: 0x54)
100247e5                  void* result_1
100247e5                  result = result_1
100247e5                  
100247f4                  if (result == *(arg1 + 0x1064))
10024863                      label_10024863:
1002486b                      char var_100
1002486b                      
1002486b                      if ((var_100 & 2) == 0)
100248e6                          label_100248e6:
100248e6                          
100248e6                          if ((*(result_2 + 0xac) & 1) == 0)
100248fb                              result = j_sub_100372c0(*(arg1 + 4))
100248e6                          else if ((*(arg1 + 0xac0) & 2) != 0)
100248fb                              result = j_sub_100372c0(*(arg1 + 4))
100248fb                          
10024903                          *(arg1 + 0xac0) ^= 2
1002486b                      else
1002487c                          int32_t eax_6 = j_sub_1000abe0(&var_7c, *(arg1 + 0x1064))
10024888                          int32_t eax_7 = *(arg1 + 8)
10024892                          __builtin_memcpy(dest: &var_f8, src: eax_6, n: 0x7c)
100248b6                          void var_140
100248b6                          int32_t eax_8 = j_sub_10003010(&var_7c, &var_140, 0, 0, &var_e8, 
100248b6                              eax_7, 0x6000003)
100248c2                          result = *(arg1 + 0x1064)
100248cf                          __builtin_memcpy(dest: &var_14c, src: eax_8, n: 0x54)
100248cf                          
100248dd                          if (result_1 == result)
100248dd                              goto label_100248e6
100247f4                  else if (result s<= 0 || result s> data_10064028)
10024814                      label_10024814:
10024814                      void* ecx_7 = *(result_2 + 0x154)
10024814                      
10024821                      if ((*(ecx_7 + 0xb4) & 2) == 0)
10024821                          goto label_10024863
10024821                      
10024827                      float var_144
10024827                      long double x87_r7_27 = fconvert.t(var_144) * fconvert.t(1000f)
1002482d                      long double temp2_1 = fconvert.t(*(ecx_7 + 0xac))
1002482d                      x87_r7_27 - temp2_1
10024833                      result.w = (x87_r7_27 < temp2_1 ? 1 : 0) << 8
10024833                          | (is_unordered.t(x87_r7_27, temp2_1) ? 1 : 0) << 0xa
10024833                          | (x87_r7_27 == temp2_1 ? 1 : 0) << 0xe
10024833                      
10024838                      if ((result:1.b & 1) == 0)
10024838                          goto label_10024863
10024838                      
1002484c                      long double x87_r7_30 = (float.t(*(ecx_7 + 0xa8))
1002484c                          - fconvert.t(var_144) * fconvert.t(500.0)) * fconvert.t(0.5)
10024852                      long double temp3_1 = fconvert.t(0f)
10024852                      x87_r7_30 - temp3_1
10024858                      result.w = (x87_r7_30 < temp3_1 ? 1 : 0) << 8
10024858                          | (is_unordered.t(x87_r7_30, temp3_1) ? 1 : 0) << 0xa
10024858                          | (x87_r7_30 == temp3_1 ? 1 : 0) << 0xe
10024858                      
1002485d                      if ((result:1.b & 0x41) != 0)
1002485d                          goto label_10024863
10024800                  else
10024804                      result = j_sub_10023550(arg1, result)
10024804                      
1002480e                      if (result == 0)
1002480e                          goto label_10024814
1002480e  
10024914  return result

10024915                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10024920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100249a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100249c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100249e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10024a10    int32_t* sub_10024a10(int32_t arg1)

10024a1e  int32_t ebx
10024a1e  int32_t var_d8 = ebx
10024a34  void var_7c
10024a34  __builtin_memcpy(dest: &var_7c, src: j_sub_1000abe0(&var_7c, arg1), n: 0x7c)
10024a3e  int32_t var_20
10024a3e  char* eax_1 = j_sub_1000d960(var_20)
10024a43  int32_t* result = data_10064398
10024a43  
10024a50  if (result == 0)
10024aaf      label_10024aaf:
10024e6b      label_10024e6b:
10024e6b      data_10063fe8(3, "BotEntityToActivate: no entity f…", eax_1)
10024a50  else
10024a58      char* var_ec_2
10024a58      char* var_e8_2
10024a58      
10024a58      while (true)
10024a58          char* eax_2 = j_sub_10006760(result, "model")
10024a58          
10024a62          if (eax_2 != 0)
10024a64              char* esi_1 = eax_2
10024a66              char* eax_3 = eax_1
10024a68              int32_t eax_5
10024a68              
10024a68              while (true)
10024a68                  char edx_1 = *eax_3
10024a6a                  ebx.b = *esi_1
10024a6e                  bool c_1 = edx_1 u< ebx.b
10024a6e                  
10024a70                  if (edx_1 == ebx.b)
10024a74                      if (edx_1 == 0)
10024a8c                          eax_5 = 0
10024a8e                          break
10024a8e                      
10024a76                      edx_1 = eax_3[1]
10024a79                      ebx.b = esi_1[1]
10024a7e                      c_1 = edx_1 u< ebx.b
10024a7e                      
10024a80                      if (edx_1 == ebx.b)
10024a82                          eax_3 = &eax_3[2]
10024a85                          esi_1 = &esi_1[2]
10024a85                          
10024a8a                          if (edx_1 != 0)
10024a8a                              continue
10024a8a                          
10024a8c                          eax_5 = 0
10024a8e                          break
10024a8e                  
10024a90                  bool c_2 = unimplemented  {sbb eax, eax}
10024a92                  eax_5 = sbb.d(sbb.d(eax_3, eax_3, c_1), 0xffffffff, c_2)
10024a92                  break
10024a92              
10024a97              if (eax_5 == 0)
10024a97                  break
10024a97          
10024a99          result = result[1]
10024a99          
10024a9e          if (result == 0)
10024aa0              var_e8_2 = eax_1
10024aa1              var_ec_2 = "BotEntityToActivate: no entity f…"
10024aa6              goto label_10024e6b_2
10024aa6      
10024aad      if (result == 0)
10024aad          goto label_10024aaf
10024aad      
10024ac0      char* eax_6 = j_sub_10006760(result, "classname")
10024acc      char* var_d0_1 = eax_6
10024acc      
10024ad0      if (eax_6 != 0)
10024add          char* esi_2 = "func_door_secret"
10024ae2          char* eax_7 = eax_6
10024ae4          int32_t eax_9
10024ae4          char edx_2
10024ae4          
10024ae4          while (true)
10024ae4              edx_2 = *eax_7
10024ae8              char temp2_1 = *esi_2
10024ae8              bool c_3 = edx_2 u< temp2_1
10024ae8              
10024aea              if (edx_2 == temp2_1)
10024aee                  if (edx_2 == 0)
10024b04                      eax_9 = 0
10024b06                      break
10024b06                  
10024af0                  edx_2 = eax_7[1]
10024af5                  char temp5_1 = esi_2[1]
10024af5                  c_3 = edx_2 u< temp5_1
10024af5                  
10024af8                  if (edx_2 == temp5_1)
10024afa                      eax_7 = &eax_7[2]
10024afd                      esi_2 = &esi_2[2]
10024afd                      
10024b02                      if (edx_2 != 0)
10024b02                          continue
10024b02                      
10024b04                      eax_9 = 0
10024b06                      break
10024b06              
10024b08              bool c_4 = unimplemented  {sbb eax, eax}
10024b0a              eax_9 = sbb.d(sbb.d(eax_7, eax_7, c_3), 0xffffffff, c_4)
10024b0a              break
10024b0a          
10024b0f          if (eax_9 == 0)
10024b17              int32_t eax_10 = j_sub_10006760(result, "targetname")
10024b24              char* eax_11 = j_sub_10006760(result, "spawnflags")
10024b2e              char eax_12
10024b2e              
10024b2e              if (eax_10 != 0)
10024b31                  eax_12 = sub_10044455(eax_11)
10024b31              
10024b3b              if (eax_10 == 0 || (eax_12 & 1) != 0)
10024b49                  return result
10024b49          
10024b4a          void* esi_4 = "func_door"
10024b4f          char* eax_14 = eax_6
10024b51          int32_t eax_16
10024b51          
10024b51          while (true)
10024b51              edx_2 = *eax_14
10024b53              char* ebx_1
10024b53              ebx_1.b = *esi_4
10024b57              bool c_5 = edx_2 u< ebx_1.b
10024b57              
10024b59              if (edx_2 == ebx_1.b)
10024b5d                  if (edx_2 == 0)
10024b75                      eax_16 = 0
10024b77                      break
10024b77                  
10024b5f                  edx_2 = eax_14[1]
10024b62                  ebx_1.b = *(esi_4 + 1)
10024b67                  c_5 = edx_2 u< ebx_1.b
10024b67                  
10024b69                  if (edx_2 == ebx_1.b)
10024b6b                      eax_14 = &eax_14[2]
10024b6e                      esi_4 += 2
10024b6e                      
10024b73                      if (edx_2 != 0)
10024b73                          continue
10024b73                      
10024b75                      eax_16 = 0
10024b77                      break
10024b77              
10024b79              bool c_6 = unimplemented  {sbb eax, eax}
10024b7b              eax_16 = sbb.d(sbb.d(eax_14, eax_14, c_5), 0xffffffff, c_6)
10024b7b              break
10024b7b          
10024b80          if (eax_16 == 0)
10024b88              long double st0_1 = j_sub_100068a0(result, "health")
10024b8d              long double temp8_1 = fconvert.t(0f)
10024b8d              st0_1 - temp8_1
10024b8d              
10024b9b              if ((((st0_1 < temp8_1 ? 1 : 0) << 8
10024b9b                      | (is_unordered.t(st0_1, temp8_1) ? 1 : 0) << 0xa
10024b9b                      | (st0_1 == temp8_1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10024ba9                  return result
10024ba9          
10024bb0          int32_t eax_19 = j_sub_10006760(result, "targetname")
10024bb8          int32_t var_cc[0xa]
10024bb8          var_cc[0] = eax_19
10024bb8          
10024bbe          if (eax_19 != 0)
10024bc9              char* var_d4_1 = nullptr
10024bd1              int32_t* var_a4 = data_10064398
10024bd5              int32_t** ebx_4 = &var_a4
10024bd9              int32_t (* ebp_1)[0xa] = &var_cc
10024bd9              
10024be2              while (true)
10024be2                  if (var_d4_1 s< 0xa)
10024be8                      result = *ebx_4
10024be8                      
10024bec                      if (result == 0)
10024c4f                          label_10024c4f:
10024c4f                          data_10063fe8(3, "BotEntityToActivate: no entity w…", *ebp_1)
10024c5d                          ebp_1 -= 4
10024c60                          var_d4_1 -= 1
10024c64                          ebx_4 -= 4
10024bec                      else
10024bf4                          while (true)
10024bf4                              char* eax_21 = j_sub_10006760(result, "target")
10024bf4                              
10024bfe                              if (eax_21 != 0)
10024c00                                  char* esi_5 = eax_21
10024c02                                  char* eax_22 = *ebp_1
10024c05                                  int32_t eax_24
10024c05                                  
10024c05                                  while (true)
10024c05                                      char edx_3 = *eax_22
10024c09                                      char temp9_1 = *esi_5
10024c09                                      bool c_7 = edx_3 u< temp9_1
10024c09                                      
10024c0b                                      if (edx_3 == temp9_1)
10024c0f                                          if (edx_3 == 0)
10024c25                                              eax_24 = 0
10024c27                                              break
10024c27                                          
10024c11                                          edx_3 = eax_22[1]
10024c16                                          char temp12_1 = esi_5[1]
10024c16                                          c_7 = edx_3 u< temp12_1
10024c16                                          
10024c19                                          if (edx_3 == temp12_1)
10024c1b                                              eax_22 = &eax_22[2]
10024c1e                                              esi_5 = &esi_5[2]
10024c1e                                              
10024c23                                              if (edx_3 != 0)
10024c23                                                  continue
10024c23                                              
10024c25                                              eax_24 = 0
10024c27                                              break
10024c27                                      
10024c29                                      bool c_8 = unimplemented  {sbb eax, eax}
10024c2b                                      eax_24 =
10024c2b                                          sbb.d(sbb.d(eax_22, eax_22, c_7), 0xffffffff, c_8)
10024c2b                                      break
10024c2b                                  
10024c30                                  if (eax_24 == 0)
10024c30                                      break
10024c30                              
10024c32                              result = result[1]
10024c32                              
10024c37                              if (result == 0)
10024c37                                  goto label_10024c4f
10024c37                          
10024c40                          *ebx_4 = result[1]
10024c40                          
10024c42                          if (result == 0)
10024c42                              goto label_10024c4f
10024c42                          
10024c72                          char* eax_26 = j_sub_10006760(result, "classname")
10024c7a                          var_d0_1 = eax_26
10024c7a                          
10024c80                          if (eax_26 == 0)
10024e89                              var_e8_2 = var_cc[var_d4_1]
10024e8a                              var_ec_2 = "BotEntityToActivate: entity with…"
10024e8f                              break
10024e8f                          
10024c86                          char* esi_6 = "trigger_counter"
10024c8b                          int32_t eax_28
10024c8b                          char edx_6
10024c8b                          
10024c8b                          while (true)
10024c8b                              edx_6 = *eax_26
10024c8f                              char temp13_1 = *esi_6
10024c8f                              bool c_9 = edx_6 u< temp13_1
10024c8f                              
10024c91                              if (edx_6 == temp13_1)
10024c95                                  if (edx_6 == 0)
10024cab                                      eax_28 = 0
10024cad                                      break
10024cad                                  
10024c97                                  edx_6 = eax_26[1]
10024c9c                                  char temp16_1 = esi_6[1]
10024c9c                                  c_9 = edx_6 u< temp16_1
10024c9c                                  
10024c9f                                  if (edx_6 == temp16_1)
10024ca1                                      eax_26 = &eax_26[2]
10024ca4                                      esi_6 = &esi_6[2]
10024ca4                                      
10024ca9                                      if (edx_6 != 0)
10024ca9                                          continue
10024ca9                                      
10024cab                                      eax_28 = 0
10024cad                                      break
10024cad                              
10024caf                              bool c_10 = unimplemented  {sbb eax, eax}
10024cb1                              eax_28 = sbb.d(sbb.d(eax_26, eax_26, c_9), 0xffffffff, c_10)
10024cb1                              break
10024cb1                          
10024cb6                          int32_t eax_31
10024cb6                          
10024cb6                          if (eax_28 != 0)
10024cbc                              char* eax_29 = var_d0_1
10024cc0                              char* esi_7 = "trigger_relay"
10024cc0                              
10024cc5                              while (true)
10024cc5                                  edx_6 = *eax_29
10024cc9                                  char temp17_1 = *esi_7
10024cc9                                  bool c_11 = edx_6 u< temp17_1
10024cc9                                  
10024ccb                                  if (edx_6 == temp17_1)
10024ccf                                      if (edx_6 == 0)
10024ce5                                          eax_31 = 0
10024ce7                                          break
10024ce7                                      
10024cd1                                      edx_6 = eax_29[1]
10024cd6                                      char temp20_1 = esi_7[1]
10024cd6                                      c_11 = edx_6 u< temp20_1
10024cd6                                      
10024cd9                                      if (edx_6 == temp20_1)
10024cdb                                          eax_29 = &eax_29[2]
10024cde                                          esi_7 = &esi_7[2]
10024cde                                          
10024ce3                                          if (edx_6 != 0)
10024ce3                                              continue
10024ce3                                          
10024ce5                                          eax_31 = 0
10024ce7                                          break
10024ce7                                  
10024ce9                                  bool c_12 = unimplemented  {sbb eax, eax}
10024ceb                                  eax_31 =
10024ceb                                      sbb.d(sbb.d(eax_29, eax_29, c_11), 0xffffffff, c_12)
10024ceb                                  break
10024ceb                          
10024cf0                          if (eax_28 == 0 || eax_31 == 0)
10024e2c                              if (var_d4_1 s>= 9)
10024e95                                  var_e8_2 = var_d4_1
10024e96                                  var_ec_2 = "BotEntityToActivate: stacked up …"
10024e9b                                  break
10024e9b                              
10024e37                              var_d4_1 = &var_d4_1[1]
10024e3b                              ebp_1 = &(*ebp_1)[1]
10024e3e                              ebx_4 = &ebx_4[1]
10024e46                              *ebp_1 = j_sub_10006760(result, "targetname")
10024e51                              *ebx_4 = data_10064398
10024cf0                          else
10024cf6                              char* eax_32 = var_d0_1
10024cfa                              char* esi_8 = "func_button"
10024cff                              int32_t eax_34
10024cff                              
10024cff                              while (true)
10024cff                                  edx_6 = *eax_32
10024d03                                  char temp21_1 = *esi_8
10024d03                                  bool c_13 = edx_6 u< temp21_1
10024d03                                  
10024d05                                  if (edx_6 == temp21_1)
10024d09                                      if (edx_6 == 0)
10024d1f                                          eax_34 = 0
10024d21                                          break
10024d21                                      
10024d0b                                      edx_6 = eax_32[1]
10024d10                                      char temp24_1 = esi_8[1]
10024d10                                      c_13 = edx_6 u< temp24_1
10024d10                                      
10024d13                                      if (edx_6 == temp24_1)
10024d15                                          eax_32 = &eax_32[2]
10024d18                                          esi_8 = &esi_8[2]
10024d18                                          
10024d1d                                          if (edx_6 != 0)
10024d1d                                              continue
10024d1d                                          
10024d1f                                          eax_34 = 0
10024d21                                          break
10024d21                                  
10024d23                                  bool c_14 = unimplemented  {sbb eax, eax}
10024d25                                  eax_34 =
10024d25                                      sbb.d(sbb.d(eax_32, eax_32, c_13), 0xffffffff, c_14)
10024d25                                  break
10024d25                              
10024d2a                              if (eax_34 == 0)
10024ba9                                  return result
10024ba9                              
10024d30                              char* eax_35 = var_d0_1
10024d34                              char* esi_9 = "trigger_multiple"
10024d39                              int32_t eax_37
10024d39                              
10024d39                              while (true)
10024d39                                  edx_6 = *eax_35
10024d3d                                  char temp25_1 = *esi_9
10024d3d                                  bool c_15 = edx_6 u< temp25_1
10024d3d                                  
10024d3f                                  if (edx_6 == temp25_1)
10024d43                                      if (edx_6 == 0)
10024d59                                          eax_37 = 0
10024d5b                                          break
10024d5b                                      
10024d45                                      edx_6 = eax_35[1]
10024d4a                                      char temp28_1 = esi_9[1]
10024d4a                                      c_15 = edx_6 u< temp28_1
10024d4a                                      
10024d4d                                      if (edx_6 == temp28_1)
10024d4f                                          eax_35 = &eax_35[2]
10024d52                                          esi_9 = &esi_9[2]
10024d52                                          
10024d57                                          if (edx_6 != 0)
10024d57                                              continue
10024d57                                          
10024d59                                          eax_37 = 0
10024d5b                                          break
10024d5b                                  
10024d5d                                  bool c_16 = unimplemented  {sbb eax, eax}
10024d5f                                  eax_37 =
10024d5f                                      sbb.d(sbb.d(eax_35, eax_35, c_15), 0xffffffff, c_16)
10024d5f                                  break
10024d5f                              
10024d64                              if (eax_37 == 0)
10024ba9                                  return result
10024ba9                              
10024d6a                              char* eax_38 = var_d0_1
10024d6e                              char* esi_10 = "trigger_once"
10024d73                              int32_t eax_40
10024d73                              
10024d73                              while (true)
10024d73                                  edx_6 = *eax_38
10024d77                                  char temp29_1 = *esi_10
10024d77                                  bool c_17 = edx_6 u< temp29_1
10024d77                                  
10024d79                                  if (edx_6 == temp29_1)
10024d7d                                      if (edx_6 == 0)
10024d93                                          eax_40 = 0
10024d95                                          break
10024d95                                      
10024d7f                                      edx_6 = eax_38[1]
10024d84                                      char temp32_1 = esi_10[1]
10024d84                                      c_17 = edx_6 u< temp32_1
10024d84                                      
10024d87                                      if (edx_6 == temp32_1)
10024d89                                          eax_38 = &eax_38[2]
10024d8c                                          esi_10 = &esi_10[2]
10024d8c                                          
10024d91                                          if (edx_6 != 0)
10024d91                                              continue
10024d91                                          
10024d93                                          eax_40 = 0
10024d95                                          break
10024d95                                  
10024d97                                  bool c_18 = unimplemented  {sbb eax, eax}
10024d99                                  eax_40 =
10024d99                                      sbb.d(sbb.d(eax_38, eax_38, c_17), 0xffffffff, c_18)
10024d99                                  break
10024d99                              
10024d9e                              if (eax_40 == 0)
10024ba9                                  return result
10024ba9                              
10024da4                              char* eax_41 = var_d0_1
10024da8                              char* esi_11 = "func_door_rotating"
10024dad                              int32_t eax_43
10024dad                              
10024dad                              while (true)
10024dad                                  edx_6 = *eax_41
10024db1                                  char temp33_1 = *esi_11
10024db1                                  bool c_19 = edx_6 u< temp33_1
10024db1                                  
10024db3                                  if (edx_6 == temp33_1)
10024db7                                      if (edx_6 == 0)
10024dcd                                          eax_43 = 0
10024dcf                                          break
10024dcf                                      
10024db9                                      edx_6 = eax_41[1]
10024dbe                                      char temp36_1 = esi_11[1]
10024dbe                                      c_19 = edx_6 u< temp36_1
10024dbe                                      
10024dc1                                      if (edx_6 == temp36_1)
10024dc3                                          eax_41 = &eax_41[2]
10024dc6                                          esi_11 = &esi_11[2]
10024dc6                                          
10024dcb                                          if (edx_6 != 0)
10024dcb                                              continue
10024dcb                                          
10024dcd                                          eax_43 = 0
10024dcf                                          break
10024dcf                                  
10024dd1                                  bool c_20 = unimplemented  {sbb eax, eax}
10024dd3                                  eax_43 =
10024dd3                                      sbb.d(sbb.d(eax_41, eax_41, c_19), 0xffffffff, c_20)
10024dd3                                  break
10024dd3                              
10024dd8                              if (eax_43 == 0)
10024ba9                                  return result
10024ba9                              
10024dde                              char* eax_44 = var_d0_1
10024de2                              char* esi_12 = "trigger_key"
10024de7                              int32_t eax_46
10024de7                              
10024de7                              while (true)
10024de7                                  edx_6 = *eax_44
10024deb                                  char temp37_1 = *esi_12
10024deb                                  bool c_21 = edx_6 u< temp37_1
10024deb                                  
10024ded                                  if (edx_6 == temp37_1)
10024df1                                      if (edx_6 == 0)
10024e07                                          eax_46 = 0
10024e09                                          break
10024e09                                      
10024df3                                      edx_6 = eax_44[1]
10024df8                                      char temp40_1 = esi_12[1]
10024df8                                      c_21 = edx_6 u< temp40_1
10024df8                                      
10024dfb                                      if (edx_6 == temp40_1)
10024dfd                                          eax_44 = &eax_44[2]
10024e00                                          esi_12 = &esi_12[2]
10024e00                                          
10024e05                                          if (edx_6 != 0)
10024e05                                              continue
10024e05                                          
10024e07                                          eax_46 = 0
10024e09                                          break
10024e09                                  
10024e0b                                  bool c_22 = unimplemented  {sbb eax, eax}
10024e0d                                  eax_46 =
10024e0d                                      sbb.d(sbb.d(eax_44, eax_44, c_21), 0xffffffff, c_22)
10024e0d                                  break
10024e0d                              
10024e12                              if (eax_46 == 0)
10024e80                                  return 0
10024e80                              
10024e18                              ebp_1 -= 4
10024e1c                              ebx_4 -= 4
10024e1f                              var_d4_1 -= 1
10024e1f                      
10024e59                      if (var_d4_1 s>= 0)
10024e59                          continue
10024e59                  
10024e63                  var_e8_2 = var_d0_1
10024e64                  var_ec_2 = "BotEntityToActivate: unkown acti…"
10024e64                  break
10024e64              
10024e6b              label_10024e6b_1:
10024e6b              data_10063fe8(3, var_ec_2, var_e8_2)
10024ad0      else
10024ad2          var_e8_2 = eax_1
10024ad3          var_ec_2 = "BotEntityToActivate: entity with…"
10024e6b          label_10024e6b_2:
10024e6b          data_10063fe8(3, var_ec_2, var_e8_2)
10024e6b  
10024e80  return 0

10024e9d                                                                                         90 90 90                               ...
10024ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10024fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10024fd0    float* sub_10024fd0(float* arg1, float* arg2)

10024fe5  if (j_sub_10043240(arg1, &data_1005c56c) != 0)
10024ff2      *arg2 = fconvert.s(fconvert.t(data_1005c578))
10024ffa      arg2[1] = data_1005c57c
10025003      arg2[2] = data_1005c580
10025006      return arg2
10025006  
10025017  if (j_sub_10043240(arg1, &data_1005c584) == 0)
1002504c      return j_sub_100426b0(arg1, arg2, nullptr, nullptr)
1002504c  
10025024  *arg2 = fconvert.s(fconvert.t(data_1005c590))
1002502c  arg2[1] = data_1005c594
10025035  arg2[2] = data_1005c598
10025038  return arg2

1002504d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10025060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10025070    void sub_10025070()

10025078  int32_t* ebp = data_10064398
1002507e  int32_t ebx = 0
1002507e  
10025084  if (ebp != 0)
10025090      while (true)
10025090          char* eax_1 = j_sub_10006760(ebp, "classname")
10025098          char* esi_1 = "func_button"
1002509d          int32_t eax
1002509d          
1002509d          while (true)
1002509d              char edx_1 = *eax_1
100250a1              char temp1_1 = *esi_1
100250a1              bool c_1 = edx_1 u< temp1_1
100250a1              
100250a3              if (edx_1 == temp1_1)
100250a7                  if (edx_1 == 0)
100250bd                      eax = 0
100250bf                      break
100250bf                  
100250a9                  edx_1 = eax_1[1]
100250ae                  char temp4_1 = esi_1[1]
100250ae                  c_1 = edx_1 u< temp4_1
100250ae                  
100250b1                  if (edx_1 == temp4_1)
100250b3                      eax_1 = &eax_1[2]
100250b6                      esi_1 = &esi_1[2]
100250b6                      
100250bb                      if (edx_1 != 0)
100250bb                          continue
100250bb                      
100250bd                      eax = 0
100250bf                      break
100250bf              
100250c1              bool c_2 = unimplemented  {sbb eax, eax}
100250c3              eax = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
100250c3              break
100250c3          
100250c8          if (eax == 0)
100250d4              char* eax_3 = j_sub_10006760(ebp, "model")
100250dc              int32_t eax_4 = j_sub_1000d990(eax_3)
100250dc              
100250e6              if (eax_4 == 0)
100250ea                  eax_4 = sub_10044455(&eax_3[1])
100250ea              
10025105              int32_t var_7c_1 = 0
1002510d              int32_t var_80_1 = 0
10025115              float var_84 = 0f
1002511d              float var_c4
1002511d              float var_b8
1002511d              j_sub_10005e60(eax_4 - 1, &var_84, &var_c4, &var_b8, nullptr)
1002511d              unimplemented  {call j_sub_10005e60}
10025128              j_sub_100068a0(ebp, "lip")
10025128              unimplemented  {call j_sub_100068a0}
10025133              unimplemented  {fstp st0, st0}
10025133              unimplemented  {fstp st0, st0}
10025135              var_84 = 0f
10025140              j_sub_100068a0(ebp, "angle")
10025140              unimplemented  {call j_sub_100068a0}
10025152              float var_80_2 = fconvert.s(unimplemented  {fstp dword [esp+0x8c], st0})
10025152              unimplemented  {fstp dword [esp+0x8c], st0}
10025159              int32_t var_7c_2 = 0
10025164              float var_94
10025164              j_sub_10024fd0(&var_84, &var_94)
10025169              unimplemented  {fld st0, dword [esp+0x54]}
1002516d              unimplemented  {fsub st0, dword [esp+0x48]}
10025180              float var_78_1 = fconvert.s(unimplemented  {fstp dword [esp+0xa0], st0})
10025180              unimplemented  {fstp dword [esp+0xa0], st0}
10025187              unimplemented  {fld st0, dword [esp+0x64]}
1002518b              unimplemented  {fsub st0, dword [esp+0x58]}
1002518f              float var_74_1 = fconvert.s(unimplemented  {fstp dword [esp+0xa4], st0})
1002518f              unimplemented  {fstp dword [esp+0xa4], st0}
10025196              unimplemented  {fld st0, dword [esp+0x68]}
1002519a              unimplemented  {fsub st0, dword [esp+0x5c]}
1002519e              float var_70_1 = fconvert.s(unimplemented  {fstp dword [esp+0xa8], st0})
1002519e              unimplemented  {fstp dword [esp+0xa8], st0}
100251a5              unimplemented  {fld st0, dword [esp+0x54]}
100251a9              unimplemented  {fadd dword [esp+0x60]}
100251ad              float var_d0 = fconvert.s(unimplemented  {fstp dword [esp+0x48], st0})
100251ad              unimplemented  {fstp dword [esp+0x48], st0}
100251b1              unimplemented  {fld st0, dword [esp+0x58]}
100251b5              unimplemented  {fadd dword [esp+0x64]}
100251b9              float var_cc_1 = fconvert.s(unimplemented  {fstp dword [esp+0x4c], st0})
100251b9              unimplemented  {fstp dword [esp+0x4c], st0}
100251bd              unimplemented  {fld st0, dword [esp+0x5c]}
100251c1              unimplemented  {fadd dword [esp+0x68]}
100251c5              float var_c8_1 = fconvert.s(unimplemented  {fstp dword [esp+0x50], st0})
100251c5              unimplemented  {fstp dword [esp+0x50], st0}
100251c9              j_sub_10043570(&var_d0, 0.5f, &var_d0)
100251ce              unimplemented  {fld st0, dword [esp+0x8c]}
100251d5              unimplemented  {fabs }
100251d7              unimplemented  {fmul st0, dword [esp+0xa8]}
100251de              unimplemented  {fld st0, dword [esp+0x88]}
100251e5              unimplemented  {fabs }
100251e7              unimplemented  {fmul st0, dword [esp+0xa4]}
100251f4              unimplemented  {faddp st1, st0}
100251f4              unimplemented  {faddp st1, st0}
100251f6              unimplemented  {fld st0, dword [esp+0x8c]}
100251fd              unimplemented  {fabs }
100251ff              unimplemented  {fmul st0, dword [esp+0xa8]}
10025206              unimplemented  {faddp st1, st0}
10025206              unimplemented  {faddp st1, st0}
10025208              unimplemented  {fmul st0, qword [&data_10058018]}
1002520e              float var_88_1 = fconvert.s(unimplemented  {fstp dword [esp+0x98], st0})
1002520e              unimplemented  {fstp dword [esp+0x98], st0}
10025215              j_sub_100068a0(ebp, "health")
10025215              unimplemented  {call j_sub_100068a0}
1002521a              long double temp5_1 = fconvert.t(0f)
1002521a              unimplemented  {fcomp st0, dword [&data_10058000]} f- temp5_1
1002521a              bool c0_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp5_1
1002521a              bool c2_1 = is_unordered.t(
1002521a                  unimplemented  {fcomp st0, dword [&data_10058000]}, temp5_1)
1002521a              bool c3_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp5_1
1002521a              unimplemented  {fcomp st0, dword [&data_10058000]}
10025228              int16_t top
10025228              float var_a0
10025228              
10025228              if ((((c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa | (c3_1 ? 1 : 0) << 0xe
10025228                      | ((top - 1) & 7) << 0xb):1.b & 0x40) != 0)
10025276                  void var_60
10025276                  void var_54
10025276                  j_sub_1000dda0(4, &var_60, &var_54)
1002527b                  int16_t top_27 = top - 2
1002527b                  unimplemented  {fld st0, dword [esp+0x64]}
1002527b                  
100252b9                  for (int32_t i = 0; i s< 0xc; )
10025284                      unimplemented  {fld st0, dword [esp+ecx+0x4c]}
10025288                      long double temp6_1 = fconvert.t(0f)
10025288                      unimplemented  {fcomp st0, dword [&data_10058000]} f- temp6_1
10025288                      bool c0_2 =
10025288                          unimplemented  {fcomp st0, dword [&data_10058000]} f< temp6_1
10025288                      bool c2_2 = is_unordered.t(
10025288                          unimplemented  {fcomp st0, dword [&data_10058000]}, temp6_1)
10025288                      bool c3_2 =
10025288                          unimplemented  {fcomp st0, dword [&data_10058000]} f== temp6_1
10025288                      unimplemented  {fcomp st0, dword [&data_10058000]}
10025293                      int16_t top_30
10025293                      
10025293                      if ((((c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
10025293                              | (c3_2 ? 1 : 0) << 0xe | (top_27 & 7) << 0xb):1.b & 1) == 0)
1002529e                          top_30 = top_27 - 1
1002529e                          unimplemented  {fld st0, dword [esp+ecx+0x80]}
10025293                      else
10025295                          top_30 = top_27 - 1
10025295                          unimplemented  {fld st0, dword [esp+ecx+0x8c]}
10025295                      
100252a5                      unimplemented  {fabs }
100252a7                      unimplemented  {fld st0, dword [esp+ecx+0x4c]}
100252ab                      unimplemented  {fabs }
100252ad                      unimplemented  {fmulp st1, st0}
100252ad                      unimplemented  {fmulp st1, st0}
100252af                      unimplemented  {fxch st0, st1}
100252af                      unimplemented  {fxch st0, st1}
100252b1                      i += 4
100252b7                      unimplemented  {faddp st1, st0}
100252b7                      unimplemented  {faddp st1, st0}
100252b7                      top_27 = top_30 + 1
100252b7                  
100252c5                  float* var_ec_5 = &var_94
100252ca                  unimplemented  {fchs }
100252cc                  float var_ec_6 = fconvert.s(unimplemented  {fstp dword [esp], st0})
100252cc                  unimplemented  {fstp dword [esp], st0}
100252d0                  j_sub_10043380(&var_d0, var_ec_6, &var_94, &var_a0)
100252d5                  unimplemented  {fld st0, dword [esp+0x58]}
100252d9                  float eax_8 = var_a0
100252e1                  unimplemented  {fadd dword [&data_10058168]}
100252e7                  float var_ac = eax_8
100252ed                  int32_t var_9c
100252ed                  int32_t var_a8_1 = var_9c
100252f3                  float var_6c = eax_8
100252fc                  float var_a4_1 = fconvert.s(unimplemented  {fstp dword [esp+0x50], st0})
100252fc                  unimplemented  {fstp dword [esp+0x50], st0}
10025300                  unimplemented  {fld st0, dword [esp+0x50]}
10025304                  unimplemented  {fsub st0, dword [&data_1005807c]}
10025311                  int32_t var_68_1 = var_9c
10025328                  float var_64_1 = fconvert.s(unimplemented  {fstp dword [esp+0xa0], st0})
10025328                  unimplemented  {fstp dword [esp+0xa0], st0}
10025345                  int32_t var_48
10025345                  void var_24
10025345                  __builtin_memcpy(dest: &var_48, 
10025345                      src: j_sub_1001b260(&var_24, &var_ac, &var_6c, 4, 0xffffffff), 
10025345                      n: 0x24)
10025345                  
10025350                  if (var_48 == 0)
10025367                      float var_40
10025367                      var_a0 = var_40
1002536b                      int32_t var_3c
1002536b                      var_9c = var_3c
1002536f                      int32_t var_38
1002536f                      int32_t var_98_1 = var_38
1002536f                  
10025382                  j_sub_10009950(&var_a0, 4f, 0xdcdddedf)
10025387                  unimplemented  {fld st0, dword [esp+0x28]}
1002538b                  unimplemented  {fsub st0, dword [esp+0x1c]}
1002539e                  var_c4 = fconvert.s(unimplemented  {fstp dword [esp+0x34], st0})
1002539e                  unimplemented  {fstp dword [esp+0x34], st0}
100253a2                  unimplemented  {fld st0, dword [esp+0x38]}
100253a6                  unimplemented  {fsub st0, dword [esp+0x2c]}
100253aa                  float var_c0_1 = fconvert.s(unimplemented  {fstp dword [esp+0x38], st0})
100253aa                  unimplemented  {fstp dword [esp+0x38], st0}
100253ae                  unimplemented  {fld st0, dword [esp+0x3c]}
100253b2                  unimplemented  {fsub st0, dword [esp+0x30]}
100253b6                  float var_bc_1 = fconvert.s(unimplemented  {fstp dword [esp+0x3c], st0})
100253b6                  unimplemented  {fstp dword [esp+0x3c], st0}
100253ba                  unimplemented  {fld st0, dword [esp+0x40]}
100253be                  unimplemented  {fsub st0, dword [esp+0x28]}
100253c2                  var_b8 = fconvert.s(unimplemented  {fstp dword [esp+0x40], st0})
100253c2                  unimplemented  {fstp dword [esp+0x40], st0}
100253c6                  unimplemented  {fld st0, dword [esp+0x44]}
100253ca                  unimplemented  {fsub st0, dword [esp+0x2c]}
100253ce                  float var_b4_1 = fconvert.s(unimplemented  {fstp dword [esp+0x44], st0})
100253ce                  unimplemented  {fstp dword [esp+0x44], st0}
100253d2                  unimplemented  {fld st0, dword [esp+0x48]}
100253d6                  unimplemented  {fsub st0, dword [esp+0x30]}
100253da                  float var_b0_1 = fconvert.s(unimplemented  {fstp dword [esp+0x48], st0})
100253da                  unimplemented  {fstp dword [esp+0x48], st0}
100253de                  unimplemented  {fld st0, dword [esp+0x28]}
100253e2                  unimplemented  {fadd dword [esp+0x34]}
100253e6                  var_ac = fconvert.s(unimplemented  {fstp dword [esp+0x4c], st0})
100253e6                  unimplemented  {fstp dword [esp+0x4c], st0}
100253ea                  unimplemented  {fld st0, dword [esp+0x2c]}
100253ee                  unimplemented  {fadd dword [esp+0x38]}
100253f2                  float var_a8_2 = fconvert.s(unimplemented  {fstp dword [esp+0x50], st0})
100253f2                  unimplemented  {fstp dword [esp+0x50], st0}
100253f6                  unimplemented  {fld st0, dword [esp+0x30]}
100253fa                  unimplemented  {fadd dword [esp+0x3c]}
100253fe                  float var_a4_2 = fconvert.s(unimplemented  {fstp dword [esp+0x54], st0})
100253fe                  unimplemented  {fstp dword [esp+0x54], st0}
10025402                  j_sub_10009950(&var_ac, 4f, 0xf3f3f1f1)
10025407                  unimplemented  {fld st0, dword [esp+0x28]}
1002540b                  unimplemented  {fadd dword [esp+0x40]}
1002541e                  var_ac = fconvert.s(unimplemented  {fstp dword [esp+0x58], st0})
1002541e                  unimplemented  {fstp dword [esp+0x58], st0}
10025422                  unimplemented  {fld st0, dword [esp+0x38]}
10025426                  unimplemented  {fadd dword [esp+0x50]}
1002542a                  float var_a8_3 = fconvert.s(unimplemented  {fstp dword [esp+0x5c], st0})
1002542a                  unimplemented  {fstp dword [esp+0x5c], st0}
1002542e                  unimplemented  {fld st0, dword [esp+0x3c]}
10025432                  unimplemented  {fadd dword [esp+0x54]}
10025436                  float var_a4_3 = fconvert.s(unimplemented  {fstp dword [esp+0x60], st0})
10025436                  unimplemented  {fstp dword [esp+0x60], st0}
10025436                  top = top_27 + 1
1002543a                  j_sub_10009950(&var_ac, 4f, 0xf3f3f1f1)
10025228              else
1002522a                  unimplemented  {fld st0, dword [esp+0x58]}
10025238                  float* var_ec_3 = &var_94
1002523d                  unimplemented  {fchs }
1002523f                  float var_ec_4 = fconvert.s(unimplemented  {fstp dword [esp], st0})
1002523f                  unimplemented  {fstp dword [esp], st0}
1002523f                  top -= 1
10025243                  j_sub_10043380(&var_d0, var_ec_4, &var_94, &var_a0)
10025257                  j_sub_10009950(&var_a0, 4f, 0xf3f3f1f1)
10025442              ebx += 1
10025442              
10025446              if (ebx s> 5)
10025446                  break
10025446          
10025448          ebp = ebp[1]
10025448          
1002544d          if (ebp == 0)
1002544d              break

1002545e                                                                                            90 90                                ..
10025460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10025480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100254a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100254c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100254e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10025500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10025520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10025540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10025560    void* sub_10025560(void* arg1, void* arg2, int32_t arg3)

10025567  void* ebx = arg2
10025570  int32_t result = *(ebx + 8)
10025576  float var_c4 = 0f
10025581  int32_t var_c0 = 0
1002558c  int32_t var_bc = 0x3f800000
1002558c  
10025597  if (result != 0)
100255bf      void var_7c
100255bf      __builtin_memcpy(dest: &var_7c, src: j_sub_1000abe0(&var_7c, *(ebx + 0xc)), n: 0x7c)
100255d8      int32_t var_24
100255d8      
100255d8      if (var_24 != 3 || arg3 == 0)
100255c9          goto label_10025e71
100255c9      
100255eb      int32_t var_70
100255eb      int32_t* ebp_1 = j_sub_10024a10(var_70)
100255f4      char* edi_1
100255f4      
100255f4      if (ebp_1 != 0)
1002560b          edi_1 = j_sub_10006760(ebp_1, "classname")
100255f4      else
100255f6          edi_1 = &data_1006294c
100255f6      
1002560d      char* esi_2 = "func_door_secret"
10025612      char* ecx_1 = edi_1
10025614      int32_t* eax_3
10025614      int32_t ecx_3
10025614      
10025614      while (true)
10025614          eax_3.b = *ecx_1
10025618          char temp1_1 = *esi_2
10025618          bool c_1 = eax_3.b u< temp1_1
10025618          
1002561a          if (eax_3.b == temp1_1)
1002561e              if (eax_3.b == 0)
10025634                  ecx_3 = 0
10025636                  break
10025636              
10025620              eax_3.b = ecx_1[1]
10025625              char temp4_1 = esi_2[1]
10025625              c_1 = eax_3.b u< temp4_1
10025625              
10025628              if (eax_3.b == temp4_1)
1002562a                  ecx_1 = &ecx_1[2]
1002562d                  esi_2 = &esi_2[2]
1002562d                  
10025632                  if (eax_3.b != 0)
10025632                      continue
10025632                  
10025634                  ecx_3 = 0
10025636                  break
10025636          
10025638          bool c_2 = unimplemented  {sbb ecx, ecx}
1002563a          ecx_3 = sbb.d(sbb.d(ecx_1, ecx_1, c_1), 0xffffffff, c_2)
1002563a          break
1002563a      
1002563f      int32_t ecx_6
1002563f      
1002563f      if (ecx_3 != 0)
10025645          char* esi_3 = "func_door"
1002564a          char* ecx_4 = edi_1
1002564a          
1002564c          while (true)
1002564c              eax_3.b = *ecx_4
10025650              char temp5_1 = *esi_3
10025650              bool c_3 = eax_3.b u< temp5_1
10025650              
10025652              if (eax_3.b == temp5_1)
10025656                  if (eax_3.b == 0)
1002566c                      ecx_6 = 0
1002566e                      break
1002566e                  
10025658                  eax_3.b = ecx_4[1]
1002565d                  char temp8_1 = esi_3[1]
1002565d                  c_3 = eax_3.b u< temp8_1
1002565d                  
10025660                  if (eax_3.b == temp8_1)
10025662                      ecx_4 = &ecx_4[2]
10025665                      esi_3 = &esi_3[2]
10025665                      
1002566a                      if (eax_3.b != 0)
1002566a                          continue
1002566a                      
1002566c                      ecx_6 = 0
1002566e                      break
1002566e              
10025670              bool c_4 = unimplemented  {sbb ecx, ecx}
10025672              ecx_6 = sbb.d(sbb.d(ecx_4, ecx_4, c_3), 0xffffffff, c_4)
10025672              break
10025672      
10025677      float var_158
10025677      float var_14c
10025677      float var_148
10025677      float var_144
10025677      float var_140
10025677      float var_13c
10025677      float var_138
10025677      float var_128
10025677      float var_110
10025677      
10025677      if (ecx_3 == 0 || ecx_6 == 0)
10025d7d          result = j_sub_1000d990(j_sub_10006760(ebp_1, "model"))
10025d7d          
10025d87          if (result != 0)
10025d9f              int32_t var_108_4 = 0
10025da7              int32_t var_10c_4 = 0
10025daf              var_110 = 0f
10025db7              j_sub_10005e60(result - 1, &var_110, &var_140, &var_14c, nullptr)
10025dd3              var_158 = fconvert.s(fconvert.t(var_140) + fconvert.t(var_14c))
10025ddf              float var_154_3 = fconvert.s(fconvert.t(var_13c) + fconvert.t(var_148))
10025deb              float var_150_3 = fconvert.s(fconvert.t(var_138) + fconvert.t(var_144))
10025def              j_sub_10043570(&var_158, 0.5f, &var_158)
10025e15              var_128 = fconvert.s(fconvert.t(var_158) - fconvert.t(*(arg1 + 0x694)))
10025e23              float var_124_2 =
10025e23                  fconvert.s(fconvert.t(var_154_3) - fconvert.t(*(arg1 + 0x698)))
10025e31              float var_120_2 =
10025e31                  fconvert.s(fconvert.t(var_150_3) - fconvert.t(*(arg1 + 0x69c)))
10025e35              j_sub_10041790(&var_128, arg2 + 0x24)
10025e42              int32_t eax_32
10025e42              eax_32.b = (*(arg2 + 0x14)).b | 1
10025e44              *(arg2 + 0x14) = eax_32
10025e4b              j_sub_100370f0(*(arg1 + 4), "Blaster")
10025e66              return j_sub_100372c0(*(arg1 + 4))
10025677      else
1002567d          char* esi_4 = "func_button"
10025682          char* ecx_7 = edi_1
10025684          int32_t ecx_9
10025684          
10025684          while (true)
10025684              eax_3.b = *ecx_7
10025688              char temp9_1 = *esi_4
10025688              bool c_5 = eax_3.b u< temp9_1
10025688              
1002568a              if (eax_3.b == temp9_1)
1002568e                  if (eax_3.b == 0)
100256a4                      ecx_9 = 0
100256a6                      break
100256a6                  
10025690                  eax_3.b = ecx_7[1]
10025695                  char temp12_1 = esi_4[1]
10025695                  c_5 = eax_3.b u< temp12_1
10025695                  
10025698                  if (eax_3.b == temp12_1)
1002569a                      ecx_7 = &ecx_7[2]
1002569d                      esi_4 = &esi_4[2]
1002569d                      
100256a2                      if (eax_3.b != 0)
100256a2                          continue
100256a2                      
100256a4                      ecx_9 = 0
100256a6                      break
100256a6              
100256a8              bool c_6 = unimplemented  {sbb ecx, ecx}
100256aa              ecx_9 = sbb.d(sbb.d(ecx_7, ecx_7, c_5), 0xffffffff, c_6)
100256aa              break
100256aa          
100256af          float var_11c
100256af          float var_e8
100256af          int32_t var_b8
100256af          float var_b0
100256af          int32_t var_ac
100256af          int32_t var_a8
100256af          void* esi_7
100256af          
100256af          if (ecx_9 != 0)
10025ad4              char* esi_8 = "trigger_multiple"
10025ad9              char* ecx_14 = edi_1
10025adb              int32_t ecx_16
10025adb              
10025adb              while (true)
10025adb                  eax_3.b = *ecx_14
10025adf                  char temp13_1 = *esi_8
10025adf                  bool c_7 = eax_3.b u< temp13_1
10025adf                  
10025ae1                  if (eax_3.b == temp13_1)
10025ae5                      if (eax_3.b == 0)
10025afb                          ecx_16 = 0
10025afd                          break
10025afd                      
10025ae7                      eax_3.b = ecx_14[1]
10025aec                      char temp17_1 = esi_8[1]
10025aec                      c_7 = eax_3.b u< temp17_1
10025aec                      
10025aef                      if (eax_3.b == temp17_1)
10025af1                          ecx_14 = &ecx_14[2]
10025af4                          esi_8 = &esi_8[2]
10025af4                          
10025af9                          if (eax_3.b != 0)
10025af9                              continue
10025af9                          
10025afb                          ecx_16 = 0
10025afd                          break
10025afd                  
10025aff                  bool c_8 = unimplemented  {sbb ecx, ecx}
10025b01                  ecx_16 = sbb.d(sbb.d(ecx_14, ecx_14, c_7), 0xffffffff, c_8)
10025b01                  break
10025b01              
10025b06              if (ecx_16 == 0)
10025b48                  label_10025b48:
10025b48                  char* eax_21 = j_sub_10006760(ebp_1, "model")
10025b50                  int32_t eax_22 = j_sub_1000d990(eax_21)
10025b50                  
10025b5a                  if (eax_22 == 0)
10025b5e                      eax_22 = sub_10044455(&eax_21[1])
10025b5e                  
10025b78                  int32_t var_108_3 = 0
10025b80                  int32_t var_10c_3 = 0
10025b88                  var_110 = 0f
10025b90                  j_sub_10005e60(eax_22 - 1, &var_110, &var_140, &var_14c, nullptr)
10025bac                  float var_134 = fconvert.s(fconvert.t(var_140) + fconvert.t(var_14c))
10025bb8                  float var_130_1 = fconvert.s(fconvert.t(var_13c) + fconvert.t(var_148))
10025bc4                  float var_12c_1 = fconvert.s(fconvert.t(var_138) + fconvert.t(var_144))
10025bc8                  j_sub_10043570(&var_134, 0.5f, &var_134)
10025bd7                  float ecx_17 = var_134
10025bdf                  var_11c = ecx_17
10025be5                  float var_118_2 = var_130_1
10025bf9                  var_e8 = ecx_17
10025c09                  float var_e4_2 = var_130_1
10025c20                  float var_e0_2 = fconvert.s(
10025c20                      fconvert.t(fconvert.s(fconvert.t(var_144) + fconvert.t(24f)))
10025c20                      - fconvert.t(100f))
10025c27                  result = j_sub_1001b260(&var_b8, &var_11c, &var_e8, 4, 0xffffffff)
10025c3d                  __builtin_memcpy(dest: &var_b8, src: result, n: 0x24)
10025c3d                  
10025c46                  if (var_b8 == 0)
10025c61                      esi_7 = arg1
10025c68                      long double x87_r6_68 = fconvert.t(var_134)
10025c6c                      int32_t var_150_2 = var_a8
10025c70                      var_158 = var_b0
10025c78                      int32_t var_154_2 = var_ac
10025c84                      *(esi_7 + 0x1188) = fconvert.s(x87_r6_68)
10025c8b                      *(esi_7 + 0x118c) = var_130_1
10025c91                      *(esi_7 + 0x1190) = var_12c_1
10025c97                      int32_t eax_27 = j_sub_1001ae60(&var_158)
10025ca0                      long double x87_r6_70 = fconvert.t(var_140) - fconvert.t(var_134)
10025cab                      *(esi_7 + 0x1194) = eax_27
10025cb1                      *(esi_7 + 0x11b0) = var_70
10025cb7                      *(esi_7 + 0x11b4) = 0
10025cbd                      *(esi_7 + 0x11b8) = 0
10025cc3                      *(esi_7 + 0x1198) = fconvert.s(x87_r6_70)
10025cd1                      *(esi_7 + 0x119c) =
10025cd1                          fconvert.s(fconvert.t(var_13c) - fconvert.t(var_130_1))
10025cdf                      *(esi_7 + 0x11a0) =
10025cdf                          fconvert.s(fconvert.t(var_138) - fconvert.t(var_12c_1))
10025ced                      *(esi_7 + 0x11a4) =
10025ced                          fconvert.s(fconvert.t(var_14c) - fconvert.t(var_134))
10025cfb                      *(esi_7 + 0x11a8) =
10025cfb                          fconvert.s(fconvert.t(var_148) - fconvert.t(var_130_1))
10025d09                      *(esi_7 + 0x11ac) =
10025d09                          fconvert.s(fconvert.t(var_144) - fconvert.t(var_12c_1))
10025d14                      long double x87_r6_82 = j_sub_1000e120() + fconvert.t(10f)
10025d1a                      int32_t eax_28 = *(esi_7 + 0x1194)
10025d21                      *(esi_7 + 0xb24) = fconvert.s(x87_r6_82)
10025d21                      
10025d31                      if (j_sub_10011040(eax_28) != 0)
10025ad3                          return j_sub_1001ef00(esi_7)
10025ad3                      
10025d37                      result = *(esi_7 + 0x68c)
10025d37                      
10025d42                      if (result == j_sub_1001f290)
10025d44                          *(esi_7 + 0xaec) = 0
10025d54                          return result
10025d54                      
10025d55                      label_10025d55:
10025d55                      
10025d5a                      if (result == j_sub_1001f760)
10025d60                          *(esi_7 + 0xae8) = 0
10025b06              else
10025b08                  char* esi_9 = "trigger_once"
10025b0d                  char* eax_18 = edi_1
10025b0f                  int32_t eax_20
10025b0f                  
10025b0f                  while (true)
10025b0f                      char edx_2 = *eax_18
10025b11                      ecx_16.b = edx_2
10025b13                      char temp19_1 = *esi_9
10025b13                      bool c_9 = edx_2 u< temp19_1
10025b13                      
10025b15                      if (edx_2 == temp19_1)
10025b19                          if (ecx_16.b == 0)
10025b2f                              eax_20 = 0
10025b31                              break
10025b31                          
10025b1b                          edx_2 = eax_18[1]
10025b1e                          ecx_16.b = edx_2
10025b20                          char temp22_1 = esi_9[1]
10025b20                          c_9 = edx_2 u< temp22_1
10025b20                          
10025b23                          if (edx_2 == temp22_1)
10025b25                              eax_18 = &eax_18[2]
10025b28                              esi_9 = &esi_9[2]
10025b28                              
10025b2d                              if (ecx_16.b != 0)
10025b2d                                  continue
10025b2d                              
10025b2f                              eax_20 = 0
10025b31                              break
10025b31                      
10025b33                      bool c_10 = unimplemented  {sbb eax, eax}
10025b35                      eax_20 = sbb.d(sbb.d(eax_18, eax_18, c_9), 0xffffffff, c_10)
10025b35                      break
10025b35                  
10025b3a                  if (eax_20 == 0)
10025b3a                      goto label_10025b48
10025b3a                  
10025e67                  ebx = arg2
10025e71                  label_10025e71:
10025e71                  int32_t eax_35 = *(ebx + 0x1c)
10025e7b                  float var_d0 = *(ebx + 0x18)
10025e83                  int32_t var_cc_1 = eax_35
10025e8a                  int32_t var_c8_1 = 0
10025e95                  j_sub_10043290(&var_d0)
10025ea9                  float ecx_22 = *(arg1 + 0x69c)
10025eaf                  int32_t eax_36 = *(arg1 + 0x698)
10025eb5                  var_11c = *(arg1 + 0x694)
10025ec7                  int32_t var_118_3 = eax_36
10025ee8                  float var_114_4 =
10025ee8                      fconvert.s(fconvert.t(ecx_22) + fconvert.t(*(data_1006405c + 0x10)))
10025eec                  j_sub_10043380(&var_11c, 5f, &var_d0, &var_e8)
10025f21                  __builtin_memcpy(dest: &var_14c, 
10025f21                      src: "\x00\x00\x80\x41\x00\x00\x80\x41\x00\x00\x80\x40\x00\x00\x80\xc1\x00\x00\x80\xc1\x00\x00\xc0\xc1", 
10025f21                      n: 0x18)
10025f39                  float var_f8
10025f39                  j_sub_100434b0(&var_d0, &var_c4, &var_f8)
10025f4e                  float var_f4
10025f4e                  float var_f0
10025f4e                  
10025f4e                  if ((0x10 & *(arg1 + 0xac0)) != 0)
10025f56                      var_f8 = fconvert.s(fneg(fconvert.t(var_f8)))
10025f60                      var_f4 = fconvert.s(fneg(fconvert.t(var_f4)))
10025f6a                      var_f0 = fconvert.s(fneg(fconvert.t(var_f0)))
10025f6a                  
10025f8b                  if (j_sub_10031be0(arg1 + 0xb40, &var_f8, 400f, 1) == 0)
10025f93                      var_f8 = fconvert.s(fneg(fconvert.t(var_f8)))
10025fa5                      float var_f4_1 = fconvert.s(fneg(fconvert.t(var_f4)))
10025fbb                      float var_f0_1 = fconvert.s(fneg(fconvert.t(var_f0)))
10025fc3                      *(arg1 + 0xac0) ^= 0x10
10025fc9                      j_sub_10031be0(arg1 + 0xb40, &var_f8, 400f, 1)
10025fc9                  
10025fd1                  result = *(arg1 + 0x68c)
10025fd1                  
10025fdc                  if (result == j_sub_1001f290)
10025fde                      *(arg1 + 0xaec) = 0
10025ff2                      return result
10025ff2                  
10025ff8                  if (result == j_sub_1001f760)
10025ffa                      *(arg1 + 0xae8) = 0
100256af          else
100256c1              result = j_sub_1000d990(j_sub_10006760(ebp_1, "model"))
100256c1              
100256cb              if (result != 0)
100256e3                  int32_t var_108_1 = 0
100256eb                  int32_t var_10c_1 = 0
100256f3                  var_110 = 0f
100256fb                  j_sub_10005e60(result - 1, &var_110, &var_140, &var_14c, nullptr)
10025706                  j_sub_100068a0(ebp_1, "lip")
10025713                  var_110 = 0f
1002572a                  float var_10c_2 = fconvert.s(j_sub_100068a0(ebp_1, "angle"))
10025731                  int32_t var_108_2 = 0
1002573c                  j_sub_10024fd0(&var_110, &var_128)
1002575e                  float var_dc = fconvert.s(fconvert.t(var_14c) - fconvert.t(var_140))
1002576d                  float var_d8_1 = fconvert.s(fconvert.t(var_148) - fconvert.t(var_13c))
1002577c                  float var_d4_1 = fconvert.s(fconvert.t(var_144) - fconvert.t(var_138))
1002578b                  float var_104 = fconvert.s(fconvert.t(var_140) + fconvert.t(var_14c))
1002579a                  float var_100_1 = fconvert.s(fconvert.t(var_13c) + fconvert.t(var_148))
100257a9                  float var_fc_1 = fconvert.s(fconvert.t(var_138) + fconvert.t(var_144))
100257b0                  j_sub_10043570(&var_104, 0.5f, &var_104)
100257f2                  float var_124
100257f2                  float var_120
100257f2                  float var_ec_1 = fconvert.s((
100257f2                      fabs(fconvert.t(var_120)) * fconvert.t(var_d4_1)
100257f2                      + fabs(fconvert.t(var_124)) * fconvert.t(var_d8_1)
100257f2                      + fabs(fconvert.t(var_128)) * fconvert.t(var_dc)) * fconvert.t(0.5))
100257f9                  long double st0_4 = j_sub_100068a0(ebp_1, "health")
100257fe                  long double temp14_1 = fconvert.t(0f)
100257fe                  st0_4 - temp14_1
1002580c                  float var_154
1002580c                  float var_150
1002580c                  
1002580c                  if ((((st0_4 < temp14_1 ? 1 : 0) << 8
1002580c                          | (is_unordered.t(st0_4, temp14_1) ? 1 : 0) << 0xa
1002580c                          | (st0_4 == temp14_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x40) == 0)
10025820                      float* var_174_3 = &var_128
1002582b                      j_sub_10043380(&var_104, fconvert.s(fneg(fconvert.t(var_ec_1))), 
1002582b                          &var_128, &var_158)
10025851                      var_128 =
10025851                          fconvert.s(fconvert.t(var_158) - fconvert.t(*(arg1 + 0x694)))
1002585f                      float var_124_1 =
1002585f                          fconvert.s(fconvert.t(var_154) - fconvert.t(*(arg1 + 0x698)))
1002586d                      float var_120_1 =
1002586d                          fconvert.s(fconvert.t(var_150) - fconvert.t(*(arg1 + 0x69c)))
10025871                      j_sub_10041790(&var_128, arg2 + 0x24)
10025881                      *(arg2 + 0x14) |= 1
10025888                      j_sub_100370f0(*(arg1 + 4), "Blaster")
100258a3                      return j_sub_100372c0(*(arg1 + 4))
100258a3                  
100258b6                  void var_94
100258b6                  void var_88
100258b6                  j_sub_1000dda0(4, &var_88, &var_94)
100258bb                  long double x87_r6_30 = fconvert.t(var_ec_1)
100258bb                  
100258fc                  for (int32_t i = 0; i s< 0xc; )
100258c7                      long double x87_r5_7 = fconvert.t(*(&var_128 + i))
100258cb                      long double temp18_1 = fconvert.t(0f)
100258cb                      x87_r5_7 - temp18_1
100258d6                      long double x87_r5_8
100258d6                      
100258d6                      if ((((x87_r5_7 < temp18_1 ? 1 : 0) << 8
100258d6                              | (is_unordered.t(x87_r5_7, temp18_1) ? 1 : 0) << 0xa
100258d6                              | (x87_r5_7 == temp18_1 ? 1 : 0) << 0xe | 0x3000):1.b & 1) == 0)
100258e1                          x87_r5_8 = fconvert.t(*(&var_88 + i))
100258d6                      else
100258d8                          x87_r5_8 = fconvert.t(*(&var_94 + i))
100258d8                      
100258f0                      long double x87_r5_10 =
100258f0                          fabs(x87_r5_8) * fabs(fconvert.t(*(&var_128 + i)))
100258f4                      i += 4
100258fa                      x87_r6_30 = x87_r5_10 + x87_r6_30
100258fa                  
10025908                  float* var_174_5 = &var_128
10025913                  j_sub_10043380(&var_104, fconvert.s(fneg(x87_r6_30)), &var_128, &var_158)
1002591c                  float eax_11 = var_158
1002592a                  var_11c = eax_11
10025930                  float var_118_1 = var_154
10025936                  var_e8 = eax_11
10025954                  float var_e4_1 = var_154
1002596b                  float var_e0_1 = fconvert.s(
1002596b                      fconvert.t(fconvert.s(fconvert.t(var_150) + fconvert.t(24f)))
1002596b                      - fconvert.t(100f))
10025988                  __builtin_memcpy(dest: &var_b8, 
10025988                      src: j_sub_1001b260(&var_b8, &var_11c, &var_e8, 4, 0xffffffff), 
10025988                      n: 0x24)
10025988                  
10025991                  if (var_b8 == 0)
100259a8                      var_158 = var_b0
100259ac                      int32_t var_154_1 = var_ac
100259b0                      int32_t var_150_1 = var_a8
100259b0                  
100259b8                  esi_7 = arg1
100259cb                  *(esi_7 + 0x1188) = fconvert.s(fconvert.t(var_104))
100259d2                  *(esi_7 + 0x118c) = var_100_1
100259d8                  *(esi_7 + 0x1190) = var_fc_1
100259de                  int32_t eax_15 = j_sub_1001ae60(&var_158)
100259e7                  long double x87_r6_39 = fconvert.t(var_140) - fconvert.t(var_104)
100259f2                  *(esi_7 + 0x1194) = eax_15
100259f8                  *(esi_7 + 0x11b0) = var_70
100259fe                  *(esi_7 + 0x11b4) = 0
10025a0a                  *(esi_7 + 0x11b8) = 0
10025a10                  *(esi_7 + 0x1198) = fconvert.s(x87_r6_39 - fconvert.t(5f))
10025a24                  *(esi_7 + 0x119c) = fconvert.s(fconvert.t(var_13c) - fconvert.t(var_100_1)
10025a24                      - fconvert.t(5f))
10025a38                  *(esi_7 + 0x11a0) = fconvert.s(fconvert.t(var_138) - fconvert.t(var_fc_1)
10025a38                      - fconvert.t(5f))
10025a4c                  *(esi_7 + 0x11a4) =
10025a4c                      fconvert.s(fconvert.t(var_14c) - fconvert.t(var_104) + fconvert.t(5f))
10025a60                  *(esi_7 + 0x11a8) = fconvert.s(fconvert.t(var_148) - fconvert.t(var_100_1)
10025a60                      + fconvert.t(5f))
10025a74                  *(esi_7 + 0x11ac) = fconvert.s(fconvert.t(var_144) - fconvert.t(var_fc_1)
10025a74                      + fconvert.t(5f))
10025a7f                  long double x87_r6_57 = j_sub_1000e120() + fconvert.t(10f)
10025a85                  int32_t edx_7 = *(esi_7 + 0x1194)
10025a8c                  *(esi_7 + 0xb24) = fconvert.s(x87_r6_57)
10025a8c                  
10025a9c                  if (j_sub_10011040(edx_7) != 0)
10025ad3                      return j_sub_1001ef00(esi_7)
10025ad3                  
10025a9e                  result = *(esi_7 + 0x68c)
10025a9e                  
10025aa9                  if (result != j_sub_1001f290)
10025aa9                      goto label_10025d55
10025aa9                  
10025aaf                  *(esi_7 + 0xaec) = 0
10025aaf  
1002600e  return result

1002600f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10026020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100260a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100260c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100260e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100261a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100261c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100261e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100262a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100262c0    void* sub_100262c0(void* arg1, void* arg2)

100262c8  long double x87_r7 = fconvert.t(*(data_100643ac + 0x10))
100262cb  long double temp0 = fconvert.t(0f)
100262cb  x87_r7 - temp0
100262d3  void* result
100262d3  result.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100262d3      | (x87_r7 == temp0 ? 1 : 0) << 0xe
100262d3  
100262d8  if ((result:1.b & 0x40) == 0)
100262e5      result = *(arg2 + 0x28)
100262e5      
100262ea      if (result != 0)
100262f6          void var_7c
100262f6          int32_t eax = j_sub_1000abe0(&var_7c, result)
100262fb          int32_t edx_1 = data_1006449c
1002630c          __builtin_memcpy(dest: &var_7c, src: eax, n: 0x7c)
1002630e          void* result_1
1002630e          result = result_1
10026312          int32_t esi_2 = data_10064498
10026318          int32_t edi_1 = data_10064494
10026318          
10026333          if (result == edx_1 || result == esi_2 || result == edi_1
10026333                  || result == data_10064490)
10026366              if ((*(arg1 + 0x774) s> 0 && result != edx_1)
10026366                      || (*(arg1 + 0x778) s> 0 && result != esi_2)
10026366                      || (*(arg1 + 0x77c) s> 0 && result != edi_1))
1002637f                  return j_sub_10037120(*(arg1 + 4), "tech")
1002637f              
10026374              if (*(arg1 + 0x780) s> 0 && result != edi_1)
1002637f                  return j_sub_10037120(*(arg1 + 4), "tech")
1002637f  
1002638c  return result

1002638d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
100263a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100263c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100263d0    int32_t sub_100263d0(void* arg1)

100263d6  int32_t result = j_sub_10021650(arg1)
100263d6  
100263e0  if (result != 0)
100263e8      result = 5
100263e8      
100263ef      if (*(arg1 + 0x10a4) != 5)
100263f1          *(arg1 + 0x10a4) = 5
100263fc          long double x87_r7_2 = j_sub_1000e120() + fconvert.t(120f)
10026402          *(arg1 + 0xb30) = 0
1002640c          *(arg1 + 0x10e8) = fconvert.s(x87_r7_2)
1002640c  
10026413  return result

10026414                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10026420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10026440    int32_t sub_10026440(int32_t arg1)

10026450  int32_t eax
10026450  
10026450  if (j_sub_10021650(arg1) == 0)
10026488      long double st0_2 = j_sub_1000e120()
1002648d      long double temp0_1 = fconvert.t(*(arg1 + 0xb34))
1002648d      st0_2 - temp0_1
10026493      eax.w = (st0_2 < temp0_1 ? 1 : 0) << 8
10026493          | (is_unordered.t(st0_2, temp0_1) ? 1 : 0) << 0xa
10026493          | (st0_2 == temp0_1 ? 1 : 0) << 0xe
10026493      
10026498      if ((eax:1.b & 1) == 0)
1002649e          eax = *(arg1 + 0x10a4)
1002649e          
100264dd          if (eax != 1 && eax != 2 && eax != 3 && eax != 4 && eax != 5 && eax != 6
100264dd                  && eax != 7)
100264e4              long double st0_3
100264e4              eax, st0_3 = j_sub_100226c0(arg1)
100264e9              long double temp1_1 = fconvert.t(50f)
100264e9              st0_3 - temp1_1
100264f2              eax.w = (st0_3 < temp1_1 ? 1 : 0) << 8
100264f2                  | (is_unordered.t(st0_3, temp1_1) ? 1 : 0) << 0xa
100264f2                  | (st0_3 == temp1_1 ? 1 : 0) << 0xe
100264f2              
100264f7              if ((eax:1.b & 1) == 0)
1002650f                  long double x87_r7_6 =
1002650f                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10026524                  *(arg1 + 0x10e4) = fconvert.s(j_sub_1000e120()
10026524                      + fconvert.t(fconvert.s(x87_r7_6 + x87_r7_6)))
1002652f                  eax = sub_10045187() & 0x7fff
10026534                  int32_t ecx_2 = data_1006442c
1002653e                  int32_t edx_1 = data_100643ec
10026548                  long double x87_r7_11 = float.t(eax) * fconvert.t(3.05185094e-05f)
1002654e                  long double temp2_1 = fconvert.t(0.33000000000000002)
1002654e                  x87_r7_11 - temp2_1
10026554                  eax.w = (x87_r7_11 < temp2_1 ? 1 : 0) << 8
10026554                      | (is_unordered.t(x87_r7_11, temp2_1) ? 1 : 0) << 0xa
10026554                      | (x87_r7_11 == temp2_1 ? 1 : 0) << 0xe | 0x3800
10026554                  
10026561                  if ((eax:1.b & 1) != 0 && ecx_2 != 0 && edx_1 != 0)
10026565                      *(arg1 + 0x10a4) = 4
1002657a                      *(arg1 + 0x10e8) = fconvert.s(j_sub_1000e120() + fconvert.t(180f))
10026581                      return eax
10026581                  
10026582                  long double temp3_1 = fconvert.t(0.66000000000000003)
10026582                  x87_r7_11 - temp3_1
10026588                  eax.w = (x87_r7_11 < temp3_1 ? 1 : 0) << 8
10026588                      | (is_unordered.t(x87_r7_11, temp3_1) ? 1 : 0) << 0xa
10026588                      | (x87_r7_11 == temp3_1 ? 1 : 0) << 0xe
10026588                  
10026595                  if ((eax:1.b & 1) != 0 && ecx_2 != 0 && edx_1 != 0)
1002659a                      int32_t eax_4 = j_sub_10023510(arg1)
100265b0                      void* esi = &data_10064420
100265b0                      
100265b5                      if (eax_4 != 1)
100265b7                          esi = &data_100643e0
100265b7                      
100265bc                      __builtin_memcpy(dest: arg1 + 0x10ac, src: esi, n: 0x38)
100265be                      *(arg1 + 0x10a4) = 3
100265cd                      long double x87_r7_15 = j_sub_1000e120() + fconvert.t(120f)
100265d4                      *(arg1 + 0xb2c) = 0
100265df                      *(arg1 + 0x10e8) = fconvert.s(x87_r7_15)
100265e6                      return eax_4
100265e6                  
100265e7                  *(arg1 + 0x10a4) = 0
100265fc                  *(arg1 + 0xb34) = fconvert.s(j_sub_1000e120() + fconvert.t(60f))
10026450  else
10026458      eax = 5
10026458      
1002645f      if (*(arg1 + 0x10a4) != 5)
10026465          *(arg1 + 0x10a4) = 5
10026470          long double x87_r7_2 = j_sub_1000e120() + fconvert.t(120f)
10026476          *(arg1 + 0xb30) = 0
10026480          *(arg1 + 0x10e8) = fconvert.s(x87_r7_2)
10026487          return 5
10026487  
10026603  return eax

10026604              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10026620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10026690    int32_t sub_10026690()

1002669f  int16_t x87control
1002669f  
1002669f  if ((__ftol(x87control, fconvert.t(*(data_10064470 + 0x10))).b & 0xc0) == 0)
100266a7      long double x87_r7_1 = fconvert.t(*(data_100643ac + 0x10))
100266aa      long double temp0_1 = fconvert.t(0f)
100266aa      x87_r7_1 - temp0_1
100266aa      
100266b5      if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
100266b5              | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
100266b5              | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
100266bd          long double x87_r7_2 = fconvert.t(*(data_10064460 + 0x10))
100266c0          long double temp1_1 = fconvert.t(0f)
100266c0          x87_r7_2 - temp1_1
100266c0          
100266cb          if ((((x87_r7_2 < temp1_1 ? 1 : 0) << 8
100266cb                  | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
100266cb                  | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
100266cf              return 0
100266cf  
100266d5  return 1

100266d6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
100266e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10026700    int32_t sub_10026700(char* arg1, int32_t* arg2)

10026706  char* edi = arg1
10026708  int32_t i = 0xffffffff
10026708  
1002670d  while (i != 0)
1002670d      bool cond:0_1 = 0 != *edi
1002670d      edi = &edi[1]
1002670d      i -= 1
1002670d      
1002670d      if (not(cond:0_1))
1002670d          break
1002670d  
10026712  if (not.d(i) != 1)
1002671c      int32_t eax_1 = j_sub_1002f890(0xffffffff, arg1, arg2)
1002671c      
10026726      if (eax_1 s> 0)
10026740          return 1
10026740      
10026728      if (eax_1 s> 0 && j_sub_1002f890(eax_1, arg1, arg2) s> 0)
10026740          return 1
10026740  
10026745  return 0

10026746                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10026760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10026770    int32_t sub_10026770(void* arg1, char* arg2, int32_t* arg3)

10026786  if (j_sub_10026700(arg2, arg3) != 0)
1002678f      return 1
1002678f  
1002679c  int32_t* eax_3 = j_sub_10021b50(*(arg1 + 0x11c0), arg2)
1002679c  
100267a6  if (eax_3 == 0)
100267be      return 0
100267be  
100267b0  __builtin_memcpy(dest: arg3, src: &eax_3[1], n: 0x38)
100267b9  return 1

100267bf                                                                                               90                                 .
100267c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100267e0    long double sub_100267e0(void* arg1)

100267f1  if ((*(arg1 + 0x9c) & 0x10) != 0)
100267ff      char var_188[0x98]
100267ff      j_sub_1002ca20(arg1, 5, &var_188)
1002681d      char var_f0[0x98]
1002681d      
1002681d      if (j_sub_1002c930(&var_188, &var_f0, 8) != 0)
1002682e          j_sub_1002ca20(&var_f0, 5, &var_188)
10026840          float var_18c
10026840          int32_t var_58
10026840          int32_t eax_1
10026840          
10026840          if (var_58 == 0x69)
10026847              long double st0_1
10026847              st0_1, eax_1 = sub_10044373(&var_188)
10026869              var_18c = fconvert.s(st0_1 * fconvert.t(60.0))
10026840          else if (var_58 == 0x6a)
10026861              long double st0_2
10026861              st0_2, eax_1 = sub_10044373(&var_188)
10026869              var_18c = fconvert.s(st0_2)
10026869          
1002686d          long double x87_r7_3 = fconvert.t(var_18c)
10026871          long double temp0_1 = fconvert.t(0f)
10026871          x87_r7_3 - temp0_1
10026877          eax_1.w = (x87_r7_3 < temp0_1 ? 1 : 0) << 8
10026877              | (is_unordered.t(x87_r7_3, temp0_1) ? 1 : 0) << 0xa
10026877              | (x87_r7_3 == temp0_1 ? 1 : 0) << 0xe
10026877          
1002687c          if ((eax_1:1.b & 0x41) == 0)
1002688d              return j_sub_1000e120() + fconvert.t(var_18c)
1002688d  
1002689a  return fconvert.t(0f)

1002689b                                                                                   90 90 90 90 90                             .....
100268a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100268c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100268d0    int32_t sub_100268d0(char* arg1)

100268d0  int32_t eax_2 = data_10064028
100268db  int32_t esi = 0
100268db  
100268e0  if (eax_2 s> 0)
100268e2      void* edi_1 = nullptr
100268e2      
10026908      do
100268e4          int32_t eax = data_100643a8
100268ea          char* ecx_1 = edi_1 + eax
100268ee          int32_t eax_1
100268ee          int32_t edx
100268ee          eax_1, edx = sub_10045cb0(eax, edx, ecx_1, ecx_1, arg1)
100268ee          
100268f8          if (eax_1 == 0)
10026945              return esi
10026945          
100268fa          eax_2 = data_10064028
100268ff          esi += 1
10026900          edi_1 += 0x90
10026908      while (esi s< eax_2)
10026908  
1002690a  int32_t i = 0
1002690a  
1002690e  if (eax_2 s<= 0)
10026952      return 0xffffffff
10026952  
10026910  void* esi_1 = nullptr
10026910  
10026937  do
10026927      if (j_sub_100217c0(esi_1 + data_100643a8, arg1) != 0)
1002694b          return i
1002694b      
1002692e      i += 1
1002692f      esi_1 += 0x90
10026937  while (i s< data_10064028)
10026937  
1002693f  return 0xffffffff

10026953                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10026960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10026990    int32_t sub_10026990(void* arg1, int32_t arg2)

100269a8  int32_t* esi = nullptr
100269aa  int32_t edi = 0
100269ac  char var_188[0x98]
100269ac  j_sub_1002ca20(arg2, 4, &var_188)
100269ac  
100269ca  while (true)
100269d4      char var_f0[0x9c]
100269d4      
100269d4      if (j_sub_1002c930(&var_188, &var_f0, 0x40) == 0)
10026a95          j_sub_100370c0(*(arg1 + 4), "what do you say?")
10026a9b          j_sub_10021b90(esi)
10026aa3          *(arg1 + 0x11c4) = 0
10026ab5          return 0
10026ab5      
100269e9      j_sub_1002ca20(&var_f0, 4, &var_188)
10026a03      void var_1c0
10026a03      
10026a03      if (j_sub_10026770(arg1, &var_188, &var_1c0) == 0)
10026aba          int32_t var_1d4_4 = 0
10026ac1          char (* var_1d8_4)[0x98] = &var_188
10026ac8          j_sub_1002e510(arg1 + 0xf8c, "cannotfind")
10026ad4          j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10026ada          j_sub_10021b90(esi)
10026ae2          *(arg1 + 0x11c4) = 0
10026af4          return 0
10026af4      
10026a18      int32_t var_1b4
10026a18      int32_t* eax_3 = j_sub_10021a90(&var_188, &var_1c0, var_1b4)
10026a22      eax_3[0xf] = 0
10026a25      int32_t* ecx = esi
10026a25      
10026a27      if (esi == 0)
10026a41          esi = eax_3
10026a43          eax_3[0x10] = 0
10026a27      else
10026a29          while (true)
10026a29              int32_t* edx_2 = ecx[0xf]
10026a29              
10026a2e              if (edx_2 == 0)
10026a2e                  break
10026a2e              
10026a30              ecx = edx_2
10026a30              
10026a34              if (ecx == 0)
10026a36                  esi = eax_3
10026a38                  eax_3[0x10] = 0
10026a3b                  goto label_10026a55
10026a3b          
10026a3f          if (ecx != 0)
10026a48              ecx[0xf] = eax_3
10026a4b              eax_3[0x10] = ecx
10026a3f          else
10026a41              esi = eax_3
10026a43              eax_3[0x10] = 0
10026a43      
10026a55      label_10026a55:
10026a58      int16_t var_54
10026a58      
10026a58      if ((var_54:1.b & 2) != 0)
10026af5          edi = 1
10026afa          break
10026afa      
10026a61      if ((var_54:1.b & 4) != 0)
10026afc          edi = 2
10026afc          break
10026afc      
10026a6a      if ((var_54:1.b & 1) == 0)
10026a6a          break
10026a6a      
10026a7f      j_sub_1002ca20(&var_f0, 5, &var_188)
10026a7f  
10026b08  if (esi == 0 || esi[0xf] == 0)
10026b44      j_sub_100370c0(*(arg1 + 4), "I need more key points to patrol…")
10026b4a      j_sub_10021b90(esi)
10026b5e      return 0
10026b5e  
10026b11  j_sub_10021b90(*(arg1 + 0x11c4))
10026b19  *(arg1 + 0x11cc) = edi
10026b1f  *(arg1 + 0x11c4) = esi
10026b25  *(arg1 + 0x11c8) = esi
10026b3a  return 1

10026b5f                                                                                               90                                 .
10026b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10026be0    int32_t sub_10026be0(void* arg1, void* arg2)

10026bfa  char var_98[0x98]
10026bfa  j_sub_1002ca20(arg2, 0, &var_98)
10026c07  int32_t eax = j_sub_10028ea0(&var_98)
10026c07  
10026c11  if (eax s< 0)
10026c1d      return 0
10026c1d  
10026c28  int32_t eax_3 = j_sub_10023550(arg1, eax + 1)
10026c28  
10026c32  if (eax_3 == 0)
10026c3c      return eax_3
10026c3c  
10026c44  if ((*(arg2 + 0x9c) & 2) == 0)
10026d7d      float var_2bc_1 =
10026d7d          fconvert.s(float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f))
10026d92      long double x87_r7_4 = fconvert.t(1f) / float.t(j_sub_100238f0(arg1) - 1)
10026d98      long double temp0_1 = fconvert.t(var_2bc_1)
10026d98      x87_r7_4 - temp0_1
10026d9c      int32_t eax_17
10026d9c      eax_17.w = (x87_r7_4 < temp0_1 ? 1 : 0) << 8
10026d9c          | (is_unordered.t(x87_r7_4, temp0_1) ? 1 : 0) << 0xa
10026d9c          | (x87_r7_4 == temp0_1 ? 1 : 0) << 0xe
10026d9c      
10026da1      if ((eax_17:1.b & 1) != 0)
10026dad          return 0
10026c44  else
10026c55      char var_220[0x98]
10026c55      j_sub_1002ca20(arg2, 1, &var_220)
10026c5e      int32_t eax_5 = j_sub_10028f30(*(arg1 + 4))
10026c81      char var_188[0x98]
10026c81      
10026c81      if (j_sub_1002c930(&var_220, &var_188, 0x20) == 0)
10026d63          return 0
10026d63      
10026c91      char var_2b8[0x98]
10026c91      uint32_t eax_11
10026c91      
10026c91      while (true)
10026c91          int32_t var_f0
10026c91          
10026c91          if (var_f0 == 0x65)
10026dbb              return 1
10026dbb          
10026c9e          char (* var_2cc_3)[0x98] = &var_2b8
10026ca8          char (* var_2d4_2)[0x98] = &var_188
10026ca8          
10026ca9          if (var_f0 != 0x66)
10026d27              j_sub_1002ca20(var_2d4_2, 3, var_2cc_3)
10026d34              eax_11 = j_sub_1002acf0(eax_5, &var_2b8, 0)
10026d3e              break
10026d3e          
10026cab          j_sub_1002ca20(var_2d4_2, 3, var_2cc_3)
10026cb8          uint32_t eax_8 = j_sub_1002acf0(eax_5, &var_2b8, 0)
10026cb8          
10026cc2          if (eax_8 != 0)
10026dbb              return 1
10026dbb          
10026cdf          if (j_sub_1002acf0(arg1 + 0x1100, &var_2b8, eax_8) != 0)
10026dbb              return 1
10026dbb          
10026cf7          j_sub_1002ca20(&var_188, 5, &var_220)
10026d0e          int32_t eax_10 = j_sub_1002c930(&var_220, &var_188, 0x20)
10026d0e          
10026d18          if (eax_10 == 0)
10026d26              return eax_10
10026d26      
10026d3e      if (eax_11 == 0 && j_sub_1002acf0(arg1 + 0x1100, &var_2b8, eax_11) == 0)
10026d63          return 0
10026d63  
10026dbb  return 1

10026dbc                                                                                      90 90 90 90                              ....
10026dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10026e40    int32_t sub_10026e40(int32_t arg1, int32_t arg2)

10026e41  void* ebx = arg2
10026e4c  char* esi = nullptr
10026e4e  int32_t ebp = 3
10026e4e  
10026e53  while (true)
10026e53      int32_t eax
10026e53      eax.b = esi[arg1]
10026e56      int32_t ecx_1 = 0
10026e5a      arg2 = 0
10026e5a      
10026e5e      while (eax.b == 0x20)
10026e60          eax.b = esi[arg1 + 1]
10026e64          esi = &esi[1]
10026e64      
10026e6d      int32_t edx_1
10026e6d      
10026e6d      if (esi[arg1] != 0x2d)
10026e75          edx_1 = 1
10026e6d      else
10026e6f          esi = &esi[1]
10026e70          edx_1 = 0xffffffff
10026e70      
10026e7a      eax.b = esi[arg1]
10026e7a      
10026e83      if (eax.b != 0)
10026e8b          while (true)
10026e8b              if (eax.b s< 0x30 || eax.b s> 0x39)
10026ea5                  arg2 = ecx_1
10026ea9                  esi = &esi[1]
10026ea9                  break
10026ea9              
10026e93              esi = &esi[1]
10026e94              ecx_1 = sx.d(eax.b) + ecx_1 * 0xa - 0x30
10026e98              eax.b = esi[arg1]
10026e98              
10026e9d              if (eax.b != 0)
10026e9d                  continue
10026e9d              
10026e9f              arg2 = ecx_1
10026ea3              break
10026ea3      
10026eb5      data_10063fe8(1, &data_1005ca18, edx_1 * ecx_1)
10026ec2      ebx += 4
10026ec5      int32_t temp0_1 = ebp
10026ec5      ebp -= 1
10026eca      *(ebx - 4) = fconvert.s(float.t(edx_1) * float.t(arg2))
10026eca      
10026ecd      if (temp0_1 == 1)
10026ecd          break
10026ecd  
10026ed8  return 1

10026ed9                                                                             90 90 90 90 90 90 90                           .......
10026ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10026f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10026f10    void sub_10026f10(void* arg1, char* arg2)

10026f2b  int32_t var_51c = 0
10026f3c  char var_5b4[0x98]
10026f3c  
10026f3c  if (j_sub_1002c930(arg2, &var_5b4, 7) != 0)
10026f58      if (var_51c - 1 u> 0x14)
1002810d          data_10063fe8(1, "unknown match type\n")
10028125          return 
10028125      
10026f5e      int32_t var_518
10026f5e      char var_4c4[0x1c]
10026f5e      int32_t var_42c
10026f5e      float var_41c
10026f5e      int32_t var_418
10026f5e      int32_t var_414
10026f5e      char var_3b0[0x98]
10026f5e      char var_318[0x98]
10026f5e      char var_280[0x98]
10026f5e      int32_t eax_2
10026f5e      
10026f5e      switch (var_51c)
10026f73          case 1
10026f73              j_sub_1002ca20(&var_5b4, 0, &var_318)
10026f80              int32_t eax_3 = j_sub_10028ea0(&var_318)
10026f80              
10026f92              if (eax_3 == *(arg1 + 4))
10026f9c                  *(arg1 + 0xad4) = var_518
10026fb0                  return 
10026fb0              
10026fba              if (eax_3 + 1 != *(arg1 + 0x1064))
10028125                  return 
10028125              
10026fc7              *(arg1 + 0xad0) = var_518
10026fd2              *(arg1 + 0xb38) = fconvert.s(j_sub_1000e120())
10026fe8          case 3, 4
10026fef              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0)
10027021                  j_sub_1002ca20(&var_5b4, 3, &var_3b0)
1002704c                  char var_f0[0x98]
1002704c                  int32_t var_58
1002704c                  int32_t eax_12
1002704c                  int32_t ebx_2
1002704c                  
1002704c                  if (j_sub_1002c930(&var_3b0, &var_f0, 0x10) == 0 || var_58 != 0x64)
1002708d                      ebx_2 = j_sub_100268d0(&var_3b0) + 1
1002708d                      
10027090                      if (ebx_2 != *(arg1 + 8))
10027096                          eax_12 = 1
10027096                          goto label_1002709b
1002704c                  else
1002705c                      j_sub_1002ca20(&var_5b4, 0, &var_4c4)
10027073                      ebx_2 = j_sub_10028ea0(&var_4c4) + 1
10027074                      eax_12 = 0
1002709b                      label_1002709b:
1002709b                      
100270a1                      if (ebx_2 == 0)
100270ab                          int32_t var_5d8_6 = 0
100270ab                          
100270ac                          if (eax_12 == 0)
100270bf                              char (* var_5dc_3)[0x1c] = &var_4c4
100270ac                          else
100270b5                              char (* var_5dc_2)[0x98] = &var_3b0
100270b5                          
100270c6                          j_sub_1002e510(arg1 + 0xf8c, "whois")
100270d5                          j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
100270ec                          return 
100270ec                      
100270f6                      *(arg1 + 0x10d4) = 0
10027116                      void var_1e8
10027116                      __builtin_memcpy(dest: &var_42c, 
10027116                          src: j_sub_1000abe0(&var_1e8, ebx_2), n: 0x7c)
10027116                      
10027121                      if (var_42c != 0)
1002712f                          int32_t eax_18 = j_sub_1001ae60(&var_41c)
1002712f                          
1002713b                          if (eax_18 != 0 && j_sub_10011040(eax_18) != 0)
10027151                              float ecx_4 = var_41c
1002715f                              *(arg1 + 0x10b4) = var_414
1002716a                              *(arg1 + 0x10d4) = ebx_2
10027170                              *(arg1 + 0x10bc) = 0xc1000000
10027176                              *(arg1 + 0x10c0) = 0xc1000000
1002717c                              *(arg1 + 0x10c4) = 0xc1000000
10027187                              *(arg1 + 0x10b8) = eax_18
1002718d                              *(arg1 + 0x10ac) = ecx_4
10027193                              *(arg1 + 0x10b0) = var_418
10027199                              *(arg1 + 0x10c8) = 0x41000000
1002719f                              *(arg1 + 0x10cc) = 0x41000000
100271a5                              *(arg1 + 0x10d0) = 0x41000000
100271a5                      
100271b3                      if (*(arg1 + 0x10d4) == 0)
100271c1                          if ((var_518.b & 1) != 0)
100271d2                              j_sub_1002ca20(&var_5b4, 2, &var_280)
100271e7                              int32_t eax_23 = j_sub_10026770(arg1, &var_280, arg1 + 0x10ac)
100271e7                              
100271f1                              if (eax_23 == 0)
100271fa                                  int32_t var_5d8_11 = eax_23
10027201                                  char (* var_5dc_6)[0x98] = &var_280
10027208                                  j_sub_1002e510(arg1 + 0xf8c, "cannotfind")
10027214                                  j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1002722b                                  return 
1002722b                          
10027234                          if (*(arg1 + 0x10d4) == 0)
10027242                              int32_t var_5d8_12 = 0
10027244                              int32_t var_5e0_6
10027244                              
10027244                              if (eax_12 == 0)
1002725c                                  char (* var_5dc_8)[0x1c] = &var_4c4
1002725d                                  var_5e0_6 = "whereareyou"
10027244                              else
1002724d                                  char (* var_5dc_7)[0x98] = &var_3b0
1002724e                                  var_5e0_6 = "whereis"
1002724e                              
10027263                              j_sub_1002e510(arg1 + 0xf8c, var_5e0_6)
10027272                              j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10027289                              return 
10027289                      
1002728a                      *(arg1 + 0x10a8) = ebx_2
10027295                      *(arg1 + 0x10ec) = fconvert.s(j_sub_1000e120())
100272ad                      long double x87_r7_4 =
100272ad                          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100272c7                      *(arg1 + 0x10e4) = fconvert.s(j_sub_1000e120()
100272c7                          + fconvert.t(fconvert.s(x87_r7_4 + x87_r7_4)))
100272cd                      long double st0_4 = j_sub_100267e0(&var_5b4)
100272dc                      *(arg1 + 0x10e8) = fconvert.s(st0_4)
100272e5                      int32_t eax_32
100272e5                      
100272e5                      if (var_51c != 3)
10027323                          long double temp9 = fconvert.t(0f)
10027323                          st0_4 - temp9
10027329                          *(arg1 + 0x10a4) = 2
10027333                          eax_32.w = (st0_4 < temp9 ? 1 : 0) << 8
10027333                              | (is_unordered.t(st0_4, temp9) ? 1 : 0) << 0xa
10027333                              | (st0_4 == temp9 ? 1 : 0) << 0xe
10027333                          
10027338                          if ((eax_32:1.b & 0x40) != 0)
10027345                              *(arg1 + 0x10e8) =
10027345                                  fconvert.s(j_sub_1000e120() + fconvert.t(240f))
10027345                          
1002734c                          *(arg1 + 0x1120) = 0x42e00000
10027356                          *(arg1 + 0xb3c) = 0
1002736e                          return 
1002736e                      
100272e7                      long double temp10_1 = fconvert.t(0f)
100272e7                      st0_4 - temp10_1
100272ed                      *(arg1 + 0x10a4) = 1
100272f7                      eax_32.w = (st0_4 < temp10_1 ? 1 : 0) << 8
100272f7                          | (is_unordered.t(st0_4, temp10_1) ? 1 : 0) << 0xa
100272f7                          | (st0_4 == temp10_1 ? 1 : 0) << 0xe
100272f7                      
100272fc                      if ((eax_32:1.b & 0x40) != 0)
10027314                          *(arg1 + 0x10e8) = fconvert.s(j_sub_1000e120() + fconvert.t(60f))
1002736f          case 5
10027376              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0)
100273a8                  j_sub_1002ca20(&var_5b4, 4, &var_280)
100273a8                  
100273c7                  if (j_sub_10026770(arg1, &var_280, arg1 + 0x10ac) == 0)
100273d0                      int32_t var_5d8_16 = 0
100273d7                      char (* var_5dc_11)[0x98] = &var_280
100273de                      j_sub_1002e510(arg1 + 0xf8c, "cannotfind")
100273ea                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10027401                      return 
10027401                  
10027414                  long double x87_r7_14 =
10027414                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10027425                  long double x87_r7_17 =
10027425                      j_sub_1000e120() + fconvert.t(fconvert.s(x87_r7_14 + x87_r7_14))
1002742d                  *(arg1 + 0x10a4) = 3
10027438                  *(arg1 + 0x10e4) = fconvert.s(x87_r7_17)
1002743e                  long double st0_8 = j_sub_100267e0(&var_5b4)
10027443                  *(arg1 + 0x10e8) = fconvert.s(st0_8)
10027449                  long double temp3 = fconvert.t(0f)
10027449                  st0_8 - temp3
10027449                  
10027457                  if ((((st0_8 < temp3 ? 1 : 0) << 8
10027457                          | (is_unordered.t(st0_8, temp3) ? 1 : 0) << 0xa
10027457                          | (st0_8 == temp3 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10027464                      *(arg1 + 0x10e8) = fconvert.s(j_sub_1000e120() + fconvert.t(120f))
10027464                  
1002746a                  *(arg1 + 0xb2c) = 0
10027905          case 6
10027905              long double x87_r7_45 = fconvert.t(*(data_100643ac + 0x10))
10027908              long double temp1_1 = fconvert.t(0f)
10027908              x87_r7_45 - temp1_1
1002790e              eax_2.w = (x87_r7_45 < temp1_1 ? 1 : 0) << 8
1002790e                  | (is_unordered.t(x87_r7_45, temp1_1) ? 1 : 0) << 0xa
1002790e                  | (x87_r7_45 == temp1_1 ? 1 : 0) << 0xe
1002790e              
1002792b              if ((eax_2:1.b & 0x40) == 0 && data_1006442c != 0 && data_100643ec != 0
1002792b                      && j_sub_10026be0(arg1, &var_5b4) != 0)
10027960                  long double x87_r7_47 =
10027960                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10027971                  long double x87_r7_50 =
10027971                      j_sub_1000e120() + fconvert.t(fconvert.s(x87_r7_47 + x87_r7_47))
10027975                  *(arg1 + 0x10a4) = 5
1002797f                  *(arg1 + 0x10e4) = fconvert.s(x87_r7_50)
1002798a                  long double x87_r7_52 = j_sub_1000e120() + fconvert.t(120f)
10027990                  *(arg1 + 0xb30) = 0
1002799b                  *(arg1 + 0x10e8) = fconvert.s(x87_r7_52)
1002785e          case 7
1002785e              long double x87_r7_37 = fconvert.t(*(data_100643ac + 0x10))
10027861              long double temp0_1 = fconvert.t(0f)
10027861              x87_r7_37 - temp0_1
10027867              eax_2.w = (x87_r7_37 < temp0_1 ? 1 : 0) << 8
10027867                  | (is_unordered.t(x87_r7_37, temp0_1) ? 1 : 0) << 0xa
10027867                  | (x87_r7_37 == temp0_1 ? 1 : 0) << 0xe
10027867              
10027884              if ((eax_2:1.b & 0x40) == 0 && data_1006442c != 0 && data_100643ec != 0
10027884                      && j_sub_10026be0(arg1, &var_5b4) != 0)
100278b9                  long double x87_r7_39 =
100278b9                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100278ca                  long double x87_r7_42 =
100278ca                      j_sub_1000e120() + fconvert.t(fconvert.s(x87_r7_39 + x87_r7_39))
100278ce                  *(arg1 + 0x10a4) = 4
100278d8                  *(arg1 + 0x10e4) = fconvert.s(x87_r7_42)
100278ef                  *(arg1 + 0x10e8) = fconvert.s(j_sub_1000e120() + fconvert.t(180f))
10027df9          case 8
10027e00              if (j_sub_10026690() != 0)
10027e15                  j_sub_1002ca20(&var_5b4, 3, &var_3b0)
10027e15                  
10027e26                  if ((var_518.b & 0x80) != 0)
10027e40                      StrCopyFixed(arg1 + 0x10f0, &var_3b0, 0x10)
10027e48                      *(arg1 + 0x10ff) = 0
10027e5e                      return 
10027e5e                  
10027e67                  int32_t eax_114 = j_sub_100268d0(&var_3b0)
10027e67                  
10027e71                  if (eax_114 s>= 0)
10027e84                      int32_t edi_10 = j_sub_10028f30(eax_114)
10027e91                      int32_t i = 0xffffffff
10027e91                      
10027e94                      while (i != 0)
10027e94                          bool cond:1_1 = 0 != *edi_10
10027e94                          edi_10 += 1
10027e94                          i -= 1
10027e94                          
10027e94                          if (not(cond:1_1))
10027e94                              break
10027e94                      
10027e96                      int32_t ecx_22 = not.d(i)
10027ea3                      int32_t esi_15
10027ea3                      int32_t edi_13
10027ea3                      edi_13, esi_15 = __builtin_memcpy(dest: arg1 + 0x10f0, 
10027ea3                          src: edi_10 - ecx_22, n: ecx_22 u>> 2 << 2)
10027eaf                      __builtin_memcpy(dest: edi_13, src: esi_15, n: ecx_22 & 3)
10027ebc          case 9
10027ec3              if (j_sub_10026690() != 0)
10027ed8                  j_sub_1002ca20(&var_5b4, 3, &var_3b0)
10027ee9                  int32_t eax_120
10027ee9                  
10027ee9                  if ((var_518.b & 0x80) == 0)
10027f18                      eax_120 = j_sub_100268d0(&var_3b0)
10027ee9                  else
10027ef9                      j_sub_1002ca20(&var_5b4, 0, &var_4c4)
10027f06                      eax_120 = j_sub_100268d0(&var_4c4)
10027f06                  
10027f22                  if (eax_120 s>= 0)
10027f36                      char* eax_121
10027f36                      int32_t ecx_27
10027f36                      int32_t edx_18
10027f36                      eax_121, ecx_27, edx_18 = j_sub_10028f30(eax_120)
10027f3d                      int32_t eax_122 =
10027f3d                          sub_10045cb0(eax_121, edx_18, ecx_27, arg1 + 0x10f0, eax_121)
10027f3d                      
10027f47                      if (eax_122 == 0)
10027f4d                          *(arg1 + 0x10f0) = eax_122.b
1002810d          case 0xa
1002810d              data_10063fe8(1, "unknown match type\n")
10027f6c          case 0xb
10027f76              if (j_sub_10026be0(arg1, &var_5b4) == 0)
10028125                  return 
10028125              
10027f8c              int32_t var_5dc_41
10027f8c              void* esi_20
10027f8c              
10027f8c              switch (*(arg1 + 0x10a4) - 1)
10027fa2                  case 0
10027fa2                      j_sub_1002ca20(&var_5b4, 0, &var_4c4)
10027fb7                      j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_4c4)
10027fc3                      int32_t var_5ec_11 = 0
10027fcb                      char (* var_5f0_5)[0x1c] = &var_4c4
10027fd2                      j_sub_1002e510(arg1 + 0xf8c, "helping")
10027fe1                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10028008                  case 1
10028008                      j_sub_1002ca20(&var_5b4, 0, &var_4c4)
1002801d                      j_sub_10021860(*(arg1 + 0x10a8) - 1, &var_4c4)
10028029                      int32_t var_5ec_12 = 0
10028031                      char (* var_5f0_6)[0x1c] = &var_4c4
10028038                      j_sub_1002e510(arg1 + 0xf8c, "accompanying")
10028047                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10028065                  case 2
10028065                      int32_t var_5d8_61 = 0
10028076                      int32_t var_5dc_39 = j_sub_1002f6a0(*(arg1 + 0x10d8))
1002807d                      j_sub_1002e510(arg1 + 0xf8c, "defending")
1002808c                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
100280c2                  case 3
100280c2                      int32_t var_5d8_64 = 0
100280c4                      esi_20 = arg1 + 0xf8c
100280ca                      var_5dc_41 = "capturingflag"
100280cf                      goto label_100280df
100280d1                  case 4
100280d1                      int32_t var_5d8_65 = 0
100280d3                      esi_20 = arg1 + 0xf8c
100280d9                      var_5dc_41 = "rushingbase"
100280d9                      goto label_100280df
100280a4                  case 5
100280a4                      int32_t var_5d8_62 = 0
100280a6                      esi_20 = arg1 + 0xf8c
100280ac                      var_5dc_41 = "camping"
100280df                      label_100280df:
100280df                      j_sub_1002e510(esi_20, var_5dc_41)
100280ee                      j_sub_1002ea80(esi_20, *(arg1 + 4), 1)
100280b3                  case 6
100280b3                      int32_t var_5d8_63 = 0
100280b5                      esi_20 = arg1 + 0xf8c
100280bb                      var_5dc_41 = "patrolling"
100280c0                      goto label_100280df
100279ac          case 0xc
100279b3              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0)
100279e5                  j_sub_1002ca20(&var_5b4, 3, &var_3b0)
100279fb                  StrCopyFixed(arg1 + 0x1100, &var_3b0, 0x20)
10027a07                  int32_t var_5f0_4 = 0
10027a0e                  char (* var_5f4_1)[0x98] = &var_3b0
10027a15                  *(arg1 + 0x111f) = 0
10027a1c                  j_sub_1002e510(arg1 + 0xf8c, "joinedteam")
10027a28                  j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10027a40          case 0xd
10027a47              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0)
10027a70                  int32_t i_1 = 0xffffffff
10027a73                  void* edi_6 = arg1 + 0x1100
10027a73                  
10027a77                  while (i_1 != 0)
10027a77                      bool cond:0_1 = 0 != *edi_6
10027a77                      edi_6 += 1
10027a77                      i_1 -= 1
10027a77                      
10027a77                      if (not(cond:0_1))
10027a77                          break
10027a77                  
10027a7c                  if (not.d(i_1) != 1)
10027a7e                      int32_t var_5d8_38 = 0
10027a7f                      void* var_5dc_24 = arg1 + 0x1100
10027a8c                      j_sub_1002e510(arg1 + 0xf8c, "leftteam")
10027a8c                  
10027aa1                  j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10027aaf                  *(arg1 + 0x1100) = data_1006294c
10027cb3          case 0xe
10027cb3              j_sub_100370c0(*(arg1 + 4), "the part of my brain to create f…")
10027cdb          case 0xf
10027cdb              j_sub_100370c0(*(arg1 + 4), "the part of my brain to create f…")
10027cf3          case 0x10
10027cfa              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0)
10027d2c                  j_sub_1002ca20(&var_5b4, 4, &var_318)
10027d3d                  long double x87_r7_59
10027d3d                  
10027d3d                  if ((var_518.b & 8) == 0)
10027d64                      x87_r7_59 = sub_10044373(&var_318) * fconvert.t(32.0)
10027d3d                  else
10027d4c                      x87_r7_59 = sub_10044373(&var_318) * fconvert.t(9.7536000000000005)
10027d4c                  
10027d6d                  long double temp6 = fconvert.t(48f)
10027d6d                  x87_r7_59 - temp6
10027d78                  long double temp8_1
10027d78                  
10027d78                  if ((((x87_r7_59 < temp6 ? 1 : 0) << 8
10027d78                          | (is_unordered.t(x87_r7_59, temp6) ? 1 : 0) << 0xa
10027d78                          | (x87_r7_59 == temp6 ? 1 : 0) << 0xe | 0x3800):1.b & 1) == 0)
10027d7a                      temp8_1 = fconvert.t(500f)
10027d7a                      x87_r7_59 - temp8_1
10027d7a                  
10027d85                  if ((((x87_r7_59 < temp6 ? 1 : 0) << 8
10027d85                          | (is_unordered.t(x87_r7_59, temp6) ? 1 : 0) << 0xa
10027d85                          | (x87_r7_59 == temp6 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0 || ((
10027d85                          (x87_r7_59 < temp8_1 ? 1 : 0) << 8
10027d85                          | (is_unordered.t(x87_r7_59, temp8_1) ? 1 : 0) << 0xa
10027d85                          | (x87_r7_59 == temp8_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10027d89                      x87_r7_59 = fconvert.t(100f)
10027d89                  
10027d8f                  *(arg1 + 0x1120) = fconvert.s(x87_r7_59)
10027da5          case 0x12
10027dac              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0)
10027dcf                  int32_t eax_109 = *(arg1 + 0x10a4)
10027dcf                  
10027ddd                  if (eax_109 == 2 || eax_109 == 1)
10027de3                      *(arg1 + 0x10a4) = 0
10027480          case 0x13
10027487              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0)
100274b8                  j_sub_1002ca20(&var_5b4, 0, &var_4c4)
100274c5                  int32_t eax_45 = j_sub_100268d0(&var_4c4)
100274d0                  int32_t var_5e0_10
100274d0                  void* edi_3
100274d0                  
100274d0                  if (eax_45 == 0xffffffff)
100274d9                      int32_t var_5d8_20 = 0
100274da                      char (* var_5dc_13)[0x1c] = &var_4c4
100274db                      edi_3 = arg1 + 0xf8c
100274e1                      var_5e0_10 = "whois"
10027778                      label_10027778:
10027778                      j_sub_1002e510(edi_3, var_5e0_10)
10027784                      j_sub_1002ea80(edi_3, *(arg1 + 4), 1)
1002779b                      return 
1002779b                  
100274fa                  j_sub_1002ca20(&var_5b4, 4, &var_280)
100274ff                  char eax_46 = var_518.b
100274ff                  
1002750b                  if ((eax_46 & 0x40) != 0)
10027514                      int32_t ecx_5 = *(arg1 + 0xb80)
1002751a                      int32_t edx_5 = *(arg1 + 0x694)
10027520                      *(arg1 + 0x10d4) = *(arg1 + 8)
10027526                      int32_t eax_48 = *(arg1 + 0x698)
1002752c                      *(arg1 + 0x10b8) = ecx_5
10027532                      int32_t ecx_6 = *(arg1 + 0x69c)
10027538                      *(arg1 + 0x10b0) = eax_48
10027543                      *(arg1 + 0x10ac) = edx_5
10027549                      *(arg1 + 0x10bc) = 0xc1000000
1002754f                      *(arg1 + 0x10c0) = 0xc1000000
10027555                      *(arg1 + 0x10c4) = 0xc1000000
10027560                      *(arg1 + 0x10b4) = ecx_6
10027566                      *(arg1 + 0x10c8) = 0x41000000
1002756c                      *(arg1 + 0x10cc) = 0x41000000
10027572                      *(arg1 + 0x10d0) = 0x41000000
1002758a                      label_1002758a:
1002758a                      long double x87_r7_22 =
1002758a                          float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1002759b                      long double x87_r7_25 =
1002759b                          j_sub_1000e120() + fconvert.t(fconvert.s(x87_r7_22 + x87_r7_22))
100275a3                      *(arg1 + 0x10a4) = 6
100275ae                      *(arg1 + 0x10e4) = fconvert.s(x87_r7_25)
100275b4                      long double st0_11 = j_sub_100267e0(&var_5b4)
100275b9                      *(arg1 + 0x10e8) = fconvert.s(st0_11)
100275bf                      long double temp7 = fconvert.t(0f)
100275bf                      st0_11 - temp7
100275bf                      
100275cd                      if ((((st0_11 < temp7 ? 1 : 0) << 8
100275cd                              | (is_unordered.t(st0_11, temp7) ? 1 : 0) << 0xa
100275cd                              | (st0_11 == temp7 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
100275da                          *(arg1 + 0x10e8) = fconvert.s(j_sub_1000e120() + fconvert.t(300f))
100275da                      
100275e1                      *(arg1 + 0x10a8) = eax_45 + 1
100275e7                      *(arg1 + 0xb3c) = 0
100275ff                      return 
100275ff                  
10027602                  if ((eax_46 & 0x20) == 0)
1002775d                      if (j_sub_10026770(arg1, &var_280, arg1 + 0x10ac) != 0)
1002775d                          goto label_1002758a
1002775d                      
1002776a                      int32_t var_5d8_29 = 0
1002776b                      char (* var_5dc_17)[0x98] = &var_280
1002776c                      edi_3 = arg1 + 0xf8c
10027772                      var_5e0_10 = "cannotfind"
10027772                      goto label_10027778
10027772                  
1002760b                  if (eax_45 + 1 != *(arg1 + 8))
1002761a                      *(arg1 + 0x10d4) = 0
1002763a                      void var_16c
1002763a                      __builtin_memcpy(dest: &var_42c, 
1002763a                          src: j_sub_1000abe0(&var_16c, eax_45 + 1), n: 0x7c)
1002763a                      
10027645                      if (var_42c != 0)
10027653                          int32_t eax_55 = j_sub_1001ae60(&var_41c)
10027653                          
1002765f                          if (eax_55 != 0 && j_sub_10011040(eax_55) != 0 && j_sub_1000b750(
1002765f                                  *(arg1 + 8), arg1 + 0x6b0, arg1 + 0x1080, 360f, 
1002765f                                  eax_45 + 1) != 0)
100276a1                              float ecx_8 = var_41c
100276af                              *(arg1 + 0x10b4) = var_414
100276ba                              *(arg1 + 0x10d4) = eax_45 + 1
100276c0                              *(arg1 + 0x10bc) = 0xc1000000
100276c6                              *(arg1 + 0x10c0) = 0xc1000000
100276cc                              *(arg1 + 0x10c4) = 0xc1000000
100276d7                              *(arg1 + 0x10b8) = eax_55
100276dd                              *(arg1 + 0x10ac) = ecx_8
100276e3                              *(arg1 + 0x10b0) = var_418
100276e9                              *(arg1 + 0x10c8) = 0x41000000
100276ef                              *(arg1 + 0x10cc) = 0x41000000
100276f5                              *(arg1 + 0x10d0) = 0x41000000
100276f5                      
10027703                      if (*(arg1 + 0x10d4) != 0)
10027703                          goto label_1002758a
10027703                      
10027710                      int32_t var_5d8_27 = 0
10027718                      char (* var_5dc_15)[0x1c] = &var_4c4
1002771f                      j_sub_1002e510(arg1 + 0xf8c, "whereareyou")
1002772b                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10027ac2          case 0x14
10027ac9              if (j_sub_10026690() != 0)
10027ade                  j_sub_1002ca20(&var_5b4, 4, &var_318)
10027aeb                  float var_5b8
10027aeb                  int32_t* var_5e4_14 = &var_5b8
10027af0                  int32_t var_5bc
10027af0                  int32_t* var_5e8_6 = &var_5bc
10027af1                  int32_t var_5c0
10027af1                  int32_t* var_5ec_9 = &var_5c0
10027aff                  var_5b8 = 0f
10027b07                  var_5bc = 0
10027b0f                  var_5c0 = 0
10027b17                  sub_1004433f(&var_318, "%f %f %f")
10027b2b                  var_5b8 = fconvert.s(fconvert.t(var_5b8) + fconvert.t(0.5))
10027b2f                  int32_t eax_90 = j_sub_1001ae60(&var_5c0)
10027b2f                  
10027b3b                  if (eax_90 != 0)
10027b9a                      j_sub_1002ca20(&var_5b4, 5, &var_318)
10027bb5                      int32_t* eax_93 = j_sub_10021b50(*(arg1 + 0x11c0), &var_318)
10027bb5                      
10027bbf                      if (eax_93 != 0)
10027bc1                          void* ecx_15 = eax_93[0xf]
10027bc1                          
10027bc6                          if (ecx_15 != 0)
10027bcb                              *(ecx_15 + 0x40) = eax_93[0x10]
10027bcb                          
10027bce                          void* ecx_16 = eax_93[0x10]
10027bce                          
10027bd3                          if (ecx_16 == 0)
10027be0                              *(arg1 + 0x11c0) = eax_93[0xf]
10027bd3                          else
10027bd8                              *(ecx_16 + 0x3c) = eax_93[0xf]
10027bd8                          
10027be7                          j_sub_100390b0(eax_93)
10027be7                      
10027bfd                      int32_t* eax_94 = j_sub_10021a90(&var_318, &var_5c0, eax_90)
10027c0d                      eax_94[0xf] = *(arg1 + 0x11c0)
10027c10                      void* eax_95 = *(arg1 + 0x11c0)
10027c10                      
10027c18                      if (eax_95 != 0)
10027c1a                          *(eax_95 + 0x40) = eax_94
10027c1a                      
10027c21                      *(arg1 + 0x11c0) = eax_94
10027c21                      
10027c33                      if (j_sub_10026be0(arg1, &var_5b4) != 0)
10027c46                          void* var_5dc_28
10027c46                          var_5dc_28.q = fconvert.d(fconvert.t(eax_94[3]))
10027c4f                          char (* var_5e4_15)[0x98]
10027c4f                          var_5e4_15.q = fconvert.d(fconvert.t(eax_94[2]))
10027c58                          var_5ec_9.q = fconvert.d(fconvert.t(eax_94[1]))
10027c61                          sub_10044c56(&var_318, "%1.0f %1.0f %1.0f")
10027c6f                          int32_t var_5f8_2 = 0
10027c71                          char (* var_5fc_1)[0x98] = &var_318
10027c78                          int32_t var_600 = *eax_94
10027c7f                          j_sub_1002e510(arg1 + 0xf8c, "checkpoint_confirm")
10027c8b                          j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
10027b3b                  else if (j_sub_10026be0(arg1, &var_5b4) != 0)
10027b60                      int32_t var_5d8_41 = 0
10027b67                      j_sub_1002e510(arg1 + 0xf8c, "checkpoint_invalid")
10027b73                      j_sub_1002ea80(arg1 + 0xf8c, *(arg1 + 4), 1)
1002779c          case 0x15
100277a3              if (j_sub_10026690() != 0 && j_sub_10026be0(arg1, &var_5b4) != 0
100277a3                      && j_sub_10026990(arg1, &var_5b4) != 0)
100277ee                  long double x87_r7_30 =
100277ee                      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100277ff                  long double x87_r7_33 =
100277ff                      j_sub_1000e120() + fconvert.t(fconvert.s(x87_r7_30 + x87_r7_30))
10027807                  *(arg1 + 0x10a4) = 7
10027812                  *(arg1 + 0x10e4) = fconvert.s(x87_r7_33)
10027818                  long double st0_14 = j_sub_100267e0(&var_5b4)
1002781d                  *(arg1 + 0x10e8) = fconvert.s(st0_14)
10027823                  long double temp4_1 = fconvert.t(0f)
10027823                  st0_14 - temp4_1
10027823                  
10027831                  if ((((st0_14 < temp4_1 ? 1 : 0) << 8
10027831                          | (is_unordered.t(st0_14, temp4_1) ? 1 : 0) << 0xa
10027831                          | (st0_14 == temp4_1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10027848                      *(arg1 + 0x10e8) = fconvert.s(j_sub_1000e120() + fconvert.t(300f))

10028126                    8b ff                                                                                ..
10028128  uint32_t jump_table_10028128[0x15] = 
10028128  {
10028128      [0x00] =  0x10026f65
1002812c      [0x01] =  0x10028116
10028130      [0x02] =  0x10026fe8
10028134      [0x03] =  0x10026fe8
10028138      [0x04] =  0x1002736f
1002813c      [0x05] =  0x100278ff
10028140      [0x06] =  0x10027858
10028144      [0x07] =  0x10027df9
10028148      [0x08] =  0x10027ebc
1002814c      [0x09] =  0x10028106
10028150      [0x0a] =  0x10027f5f
10028154      [0x0b] =  0x100279ac
10028158      [0x0c] =  0x10027a40
1002815c      [0x0d] =  0x10027ca3
10028160      [0x0e] =  0x10027ccb
10028164      [0x0f] =  0x10027cf3
10028168      [0x10] =  0x10028116
1002816c      [0x11] =  0x10027da5
10028170      [0x12] =  0x10027480
10028174      [0x13] =  0x10027ac2
10028178      [0x14] =  0x1002779c
1002817c  }
1002817c  uint32_t jump_table_1002817c[0x7] = 
1002817c  {
1002817c      [0x0] =  0x10027f93
10028180      [0x1] =  0x10027ff9
10028184      [0x2] =  0x1002805f
10028188      [0x3] =  0x100280c2
1002818c      [0x4] =  0x100280d1
10028190      [0x5] =  0x100280a4
10028194      [0x6] =  0x100280b3
10028198  }

10028198                                                                          90 90 90 90 90 90 90 90                          ........
100281a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100281c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100281e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100282a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100282c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100282e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100283a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100283c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100283e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100284a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100284c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100284e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100285a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100285c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100285e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10028650    float* sub_10028650(int32_t arg1)

10028657  int32_t edi = arg1
1002865f  void* eax_1 = j_sub_10028f30(*(edi + 4))
10028664  void* ebp = edi + 0xf8c
1002866f  float* eax_2 = j_sub_1002ab90(ebp)
10028674  float* esi = eax_2
10028674  
1002867b  if (esi != 0)
10028682      while (true)
1002868d          int16_t top
1002868d          
1002868d          if (j_sub_1002abb0(ebp) s< 0xa)
10028693              if (esi[1] != 1)
10028693                  goto label_1002873e
10028693              
10028699              j_sub_1000e120()
10028699              unimplemented  {call j_sub_1000e120}
1002869e              float var_c_1 = fconvert.s(unimplemented  {fstp dword [esp+0x18], st0})
1002869e              unimplemented  {fstp dword [esp+0x18], st0}
100286ac              float* var_10_1 = sub_10045187() & 0x7fff
100286b0              unimplemented  {fild st0, dword [esp+0x14]}
100286b4              unimplemented  {fmul st0, dword [&data_10058218]}
100286ba              unimplemented  {fadd dword [&data_100580c4]}
100286c0              unimplemented  {fsubr st0, dword [esp+0x18]}
100286c4              long double temp1_1 = fconvert.t(*esi)
100286c4              unimplemented  {fcomp st0, dword [esi]} f- temp1_1
100286c4              bool c0_1 = unimplemented  {fcomp st0, dword [esi]} f< temp1_1
100286c4              bool c2_1 = is_unordered.t(unimplemented  {fcomp st0, dword [esi]}, temp1_1)
100286c4              bool c3_1 = unimplemented  {fcomp st0, dword [esi]} f== temp1_1
100286c4              unimplemented  {fcomp st0, dword [esi]}
100286c6              eax_2.w = (c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa | (c3_1 ? 1 : 0) << 0xe
100286c6                  | (top & 7) << 0xb
100286c6              
100286cb              if ((eax_2:1.b & 1) != 0)
100286cb                  break
100286cb              
100286cb              goto label_100286d1
100286cb          
100286d1          label_100286d1:
100286d1          
100286d5          if (esi[1] != 1)
100286d5              goto label_1002873e
100286d5          
100286e0          char* eax_5 = sub_10045630(&esi[2], &data_1005cb74)
100286e0          
100286ea          if (eax_5 == 0)
10028890              j_sub_1002aa20(ebp, esi)
100286ea          else
100286f6              void* edi_2 = eax_5 - esi
100286fe              int32_t eax_6 = StrCompareN(&esi[2], eax_1, edi_2 - 8)
10028708              int32_t eax_8
10028708              
10028708              if (eax_6 != 0)
10028717                  eax_8 = StrCompareN(esi + 9, eax_1, edi_2 - 0xa)
10028717              
10028721              if (eax_6 != 0 && eax_8 != 0)
10028736                  edi = arg1
1002873e                  label_1002873e:
1002873e                  j_sub_1002ac50(&esi[2])
1002874c                  int32_t ecx_3 = 3
10028751                  unimplemented  {fld st0, dword [edx+0x10]}
10028754                  long double temp0_1 = fconvert.t(0f)
10028754                  unimplemented  {fcomp st0, dword [&data_10058000]} f- temp0_1
10028754                  bool c0_2 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp0_1
10028754                  bool c2_2 = is_unordered.t(
10028754                      unimplemented  {fcomp st0, dword [&data_10058000]}, temp0_1)
10028754                  bool c3_2 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp0_1
10028754                  unimplemented  {fcomp st0, dword [&data_10058000]}
10028754                  
1002875f                  if ((((c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa | (c3_2 ? 1 : 0) << 0xe
1002875f                          | (top & 7) << 0xb):1.b & 0x40) == 0)
1002876c                      int32_t ecx_5 = j_sub_10023510(edi) - 1
1002876d                      int32_t ecx_6 = neg.d(ecx_5)
10028774                      ecx_3 = (sbb.d(ecx_6, ecx_6, ecx_5 != 0) & 4) + 7
10028774                  
10028779                  j_sub_1002b7c0(&esi[2], ecx_3)
10028780                  int32_t eax_11 = j_sub_10026f10(edi, &esi[2])
10028780                  top -= 1
10028780                  unimplemented  {call j_sub_10026f10}
10028780                  
10028794                  if (eax_11 == 0 && esi[1] == 1)
1002879f                      unimplemented  {fld st0, dword [eax+0x10]}
100287a2                      long double temp3_1 = fconvert.t(0f)
100287a2                      unimplemented  {fcomp st0, dword [&data_10058000]} f- temp3_1
100287a2                      bool c0_3 =
100287a2                          unimplemented  {fcomp st0, dword [&data_10058000]} f< temp3_1
100287a2                      bool c2_3 = is_unordered.t(
100287a2                          unimplemented  {fcomp st0, dword [&data_10058000]}, temp3_1)
100287a2                      bool c3_3 =
100287a2                          unimplemented  {fcomp st0, dword [&data_10058000]} f== temp3_1
100287a2                      unimplemented  {fcomp st0, dword [&data_10058000]}
100287a2                      
100287bd                      if ((((c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
100287bd                              | (c3_3 ? 1 : 0) << 0xe | (top & 7) << 0xb):1.b & 0x40) != 0
100287bd                              && *(edi + 0x68c) != j_sub_1001ec90
100287bd                              && j_sub_10021bc0(edi) != 0)
100287e4                          j_sub_1002a690(*(edi + 0x688), 0x16, 0f, 1f)
100287e4                          unimplemented  {call j_sub_1002a690}
100287e9                          float var_10_2 =
100287e9                              fconvert.s(unimplemented  {fstp dword [esp+0x24], st0})
100287e9                          unimplemented  {fstp dword [esp+0x24], st0}
100287fa                          int32_t var_c_2 = sub_10045187() & 0x7fff
100287fe                          unimplemented  {fild st0, dword [esp+0x18]}
10028802                          unimplemented  {fmul st0, dword [&data_10058218]}
10028808                          double var_8_1 =
10028808                              fconvert.d(unimplemented  {fstp qword [esp+0x1c], st0})
10028808                          unimplemented  {fstp qword [esp+0x1c], st0}
10028812                          int32_t var_c_3 = j_sub_10028fd0() + 1
10028816                          unimplemented  {fild st0, dword [esp+0x18]}
1002881a                          unimplemented  {fdivr st0, qword [&data_10058070]}
10028820                          long double temp4_1 = fconvert.t(var_8_1)
10028820                          unimplemented  {fcomp st0, qword [esp+0x1c]} f- temp4_1
10028820                          bool c0_4 =
10028820                              unimplemented  {fcomp st0, qword [esp+0x1c]} f< temp4_1
10028820                          bool c2_4 = is_unordered.t(
10028820                              unimplemented  {fcomp st0, qword [esp+0x1c]}, temp4_1)
10028820                          bool c3_4 =
10028820                              unimplemented  {fcomp st0, qword [esp+0x1c]} f== temp4_1
10028820                          unimplemented  {fcomp st0, qword [esp+0x1c]}
10028824                          int32_t eax_17
10028824                          eax_17.w = (c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
10028824                              | (c3_4 ? 1 : 0) << 0xe | (top & 7) << 0xb
10028824                          
10028829                          if ((eax_17:1.b & 0x41) == 0)
10028835                              int32_t var_c_4 = sub_10045187() & 0x7fff
10028839                              unimplemented  {fild st0, dword [esp+0x18]}
1002883d                              unimplemented  {fmul st0, dword [&data_10058218]}
10028843                              long double temp5_1 = fconvert.t(var_10_2)
10028843                              unimplemented  {fcomp st0, dword [esp+0x14]} f- temp5_1
10028843                              bool c0_5 =
10028843                                  unimplemented  {fcomp st0, dword [esp+0x14]} f< temp5_1
10028843                              bool c2_5 = is_unordered.t(
10028843                                  unimplemented  {fcomp st0, dword [esp+0x14]}, temp5_1)
10028843                              bool c3_5 =
10028843                                  unimplemented  {fcomp st0, dword [esp+0x14]} f== temp5_1
10028843                              unimplemented  {fcomp st0, dword [esp+0x14]}
10028847                              int32_t eax_19
10028847                              eax_19.w = (c0_5 ? 1 : 0) << 8 | (c2_5 ? 1 : 0) << 0xa
10028847                                  | (c3_5 ? 1 : 0) << 0xe | (top & 7) << 0xb
10028847                              
1002884c                              if ((eax_19:1.b & 1) != 0)
10028854                                  char* eax_20 = sub_10045630(&esi[2], &data_1005cb74)
10028854                                  
1002885e                                  if (eax_20 != 0)
10028863                                      int32_t i = 0xffffffff
10028866                                      void* edi_4 = &eax_20[1]
10028866                                      
1002886a                                      while (i != 0)
1002886a                                          bool cond:0_1 = 0 != *edi_4
1002886a                                          edi_4 += 1
1002886a                                          i -= 1
1002886a                                          
1002886a                                          if (not(cond:0_1))
1002886a                                              break
1002886a                                      
10028871                                      sub_100452f0(&esi[2], &eax_20[1], not.d(i))
10028877                                      j_sub_1002ac50(&esi[2])
1002887e                                      int32_t eax_21 = j_sub_1002e7d0(ebp, &esi[2])
1002887e                                      top -= 1
1002887e                                      unimplemented  {call j_sub_1002e7d0}
1002887e                                      
10028888                                      if (eax_21 != 0)
100288b5                                          j_sub_1002aa20(ebp, esi)
100288ba                                          int32_t esi_1 = arg1
100288bf                                          j_sub_10022650(esi_1)
100288bf                                          unimplemented  {call j_sub_10022650}
100288c4                                          arg1 = fconvert.s(unimplemented  {fstp dword [esp
100288c4                                              +0x34], st0})
100288c4                                          unimplemented  {fstp dword [esp+0x34], st0}
100288c8                                          j_sub_1000e120()
100288c8                                          unimplemented  {call j_sub_1000e120}
100288cd                                          unimplemented  {fadd dword [esp+0x34]}
100288d2                                          *(esi_1 + 0xafc) = fconvert.s(unimplemented  {fstp
100288d2                                               dword [esi+0xafc], st0})
100288d2                                          unimplemented  {fstp dword [esi+0xafc], st0}
100288d8                                          return j_sub_1001ec50(esi_1)
100288d8                                      
1002888a                                      edi = arg1
1002888a                  
10028890                  j_sub_1002aa20(ebp, esi)
10028721              else
10028725                  j_sub_1002aa20(ebp, esi)
1002872a                  edi = arg1
1002872a          
10028899          float* eax_22 = j_sub_1002ab90(ebp)
1002889e          esi = eax_22
1002889e          
100288a5          if (esi == 0)
100288b2              return eax_22
100288b2  
100288e7  return eax_2

100288e8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
10028900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100289a0    void* sub_100289a0(void* arg1, float arg2)

100289ac  long double x87_r7_1 = fconvert.t(arg2) + fconvert.t(*(arg1 + 0xae0))
100289b2  int32_t edx = *(arg1 + 0x10)
100289b5  *(arg1 + 0x690) = arg2
100289c0  *(arg1 + 0x698) = *(arg1 + 0x14)
100289c6  *(arg1 + 0xae0) = fconvert.s(x87_r7_1)
100289cf  long double x87_r7_3 = fconvert.t(*(arg1 + 0x48)) + fconvert.t(*(arg1 + 0x10))
100289e3  *(arg1 + 0x694) = edx
100289e9  int32_t edx_1 = *(arg1 + 0x18)
100289ec  *(arg1 + 0x6b0) = fconvert.s(x87_r7_3)
100289f5  long double x87_r7_5 = fconvert.t(*(arg1 + 0x4c)) + fconvert.t(*(arg1 + 0x14))
100289f8  __builtin_memcpy(dest: arg1 + 0x6c0, src: arg1 + 0xd8, n: 0x400)
100289fa  *(arg1 + 0x6b4) = fconvert.s(x87_r7_5)
10028a06  *(arg1 + 0x6b8) = fconvert.s(fconvert.t(*(arg1 + 0x50)) + fconvert.t(*(arg1 + 0x18)))
10028a0d  *(arg1 + 0x69c) = edx_1
10028a14  return arg1

10028a15                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10028a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10028a40    int32_t sub_10028a40(void* arg1, int32_t arg2)

10028a4d  j_sub_100375e0(*(arg1 + 4), arg2)
10028a55  return 0

10028a56                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10028a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10028a70    int32_t sub_10028a70(int32_t* arg1, float arg2)

10028a71  float ebp = arg2
10028a7c  j_sub_100289a0(arg1, ebp)
10028a7c  
10028a8b  if (data_1006446c != 0 && j_sub_1000dee0() != 0)
10028a96      data_1006446c = 0
10028a96  
10028aa8  if (arg1[0x2b6] != 0)
10028abb      int32_t var_14_1 = 0
10028abd      int32_t var_18_1 = j_sub_1002a810(arg1[0x1a2], 3)
10028ac4      j_sub_10037200(arg1[1], "gender")
10028ad3      long double st0_1 = j_sub_10038a90("altnames", &data_1005b570)
10028ad8      long double temp0_1 = fconvert.t(0f)
10028ad8      st0_1 - temp0_1
10028ad8      
10028ae6      if ((((st0_1 < temp0_1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
10028ae6              | (st0_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10028af6          int32_t var_14_2 = 0
10028af8          int32_t var_18_2 = j_sub_1002a810(arg1[0x1a2], 1)
10028b02          j_sub_10037200(arg1[1], "name")
10028b02      
10028b0a      arg1[0x2b6] = 0
10028b0a  
10028b15  j_sub_10021020(arg1)
10028b1b  j_sub_10028650(arg1)
10028b1b  
10028b2b  if (arg1[0x1a3] == 0)
10028b2e      j_sub_1001f6e0(arg1)
10028b2e  
10028b3b  long double x87_r7_3 = j_sub_1000e120() - fconvert.t(8f)
10028b41  long double temp1 = fconvert.t(arg1[0x2b9])
10028b41  x87_r7_3 - temp1
10028b47  int32_t eax_8
10028b47  eax_8.w = (x87_r7_3 < temp1 ? 1 : 0) << 8
10028b47      | (is_unordered.t(x87_r7_3, temp1) ? 1 : 0) << 0xa
10028b47      | (x87_r7_3 == temp1 ? 1 : 0) << 0xe
10028b47  
10028b4c  if ((eax_8:1.b & 1) != 0 && j_sub_10021d80(arg1) != 0)
10028b61      arg2 = fconvert.s(j_sub_10022650(arg1))
10028b6f      arg1[0x2bf] = fconvert.s(j_sub_1000e120() + fconvert.t(arg2))
10028b75      j_sub_1001ec50(arg1)
10028b75  
10028b7e  j_sub_1001d2b0()
10028b83  int32_t edi = 0
10028b83  
10028b86  while (true)
10028b91      if (arg1[0x1a3](arg1) == 0)
10028b93          edi += 1
10028b93          
10028b97          if (edi s< 0x32)
10028b97              continue
10028b91      else if (edi s< 0x32)
10028b9e          break
10028b9e      
10028ba7      j_sub_1002fd40(&arg1[0x2f0])
10028bad      j_sub_1002f730(&arg1[0x2f0])
10028bb3      j_sub_1001d2d0(arg1, &arg1[0x2f0], arg1)
10028bb8      break
10028bb8  
10028bbb  int32_t result = *arg1
10028bbb  
10028bc0  if (result == 0)
10028bce      return result
10028bce  
10028bc4  return j_sub_10028a40(arg1, ebp)

10028bcf                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10028be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10028c30    void* sub_10028c30()

10028c49  data_10064470 = j_sub_100389c0("dmflags", &data_1005b570)
10028c5d  data_100643ac = j_sub_100389c0("ctf", &data_1005b570)
10028c71  data_1006445c = j_sub_100389c0("ch", &data_1005b570)
10028c85  data_10064464 = j_sub_100389c0("ra", &data_1005b570)
10028c99  data_1006447c = j_sub_100389c0("fastchat", &data_1005b570)
10028cad  data_10064474 = j_sub_100389c0("nochat", &data_1005b570)
10028cc1  data_10064460 = j_sub_100389c0("teamplay", &data_1005b570)
10028cce  data_10064458 = j_sub_100389c0("usehook", &data_1005b570)
10028cec  data_10064478 = j_sub_100389c0("rocketjump", &data_1005cce4)
10028d00  data_10064468 = j_sub_100389c0("runes", &data_1005b570)
10028d14  data_10064488 = j_sub_100389c0("teamplay_shell", &data_1005b570)
10028d1e  data_10064480 = j_sub_100389c0("assimilation", &data_1005b570)
10028d2b  long double x87_r7 = fconvert.t(*(data_100643ac + 0x10))
10028d2e  long double temp0 = fconvert.t(0f)
10028d2e  x87_r7 - temp0
10028d34  void* result
10028d34  result.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10028d34      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10028d34  
10028d39  if ((result:1.b & 0x40) == 0)
10028d55      if (j_sub_1002f890(0xffffffff, "Red Flag", &data_10064420) s< 0)
10028d5e          data_10063fe8(2, "CTF without Red Flag\n")
10028d5e      
10028d7d      if (j_sub_1002f890(0xffffffff, "Blue Flag", &data_100643e0) s< 0)
10028d86          data_10063fe8(2, "CTF without Blue Flag\n")
10028d86      
10028d9e      data_10064484 = j_sub_1000d990("players/male/flag1.md2")
10028dad      data_1006448c = j_sub_1000d990("players/male/flag2.md2")
10028dbc      data_1006449c = j_sub_1000d990("models/ctf/resistance/tris.md2")
10028dcb      data_10064498 = j_sub_1000d990("models/ctf/strength/tris.md2")
10028dda      data_10064494 = j_sub_1000d990("models/ctf/haste/tris.md2")
10028ddf      result = j_sub_1000d990("models/ctf/regeneration/tris.md2")
10028de7      data_10064490 = result
10028de7  
10028dec  data_1006446c = 1
10028df6  return result

10028df7                                                                       90 90 90 90 90 90 90 90 90                         .........
10028e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10028e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10028e80    int32_t sub_10028e80() __pure

10028e80  return 

10028e81     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

10028ea0    int32_t sub_10028ea0(char* arg1)

10028ea0  int32_t eax_2 = data_10064028
10028ea5  int32_t ebx
10028ea5  int32_t var_4 = ebx
10028ea7  int32_t result = 0
10028ea7  
10028ead  if (eax_2 s> 0)
10028eaf      char* edi_1 = data_100643a8
10028eaf      
10028eb5      while (true)
10028eb5          char* ecx_1 = arg1
10028eb9          char* esi_1 = edi_1
10028ebb          int32_t ecx_3
10028ebb          
10028ebb          while (true)
10028ebb              ebx.b = *ecx_1
10028ebf              char temp0_1 = *esi_1
10028ebf              bool c_1 = ebx.b u< temp0_1
10028ebf              
10028ec1              if (ebx.b == temp0_1)
10028ec5                  if (ebx.b == 0)
10028edb                      ecx_3 = 0
10028edd                      break
10028edd                  
10028ec7                  ebx.b = ecx_1[1]
10028ecc                  char temp3_1 = esi_1[1]
10028ecc                  c_1 = ebx.b u< temp3_1
10028ecc                  
10028ecf                  if (ebx.b == temp3_1)
10028ed1                      ecx_1 = &ecx_1[2]
10028ed4                      esi_1 = &esi_1[2]
10028ed4                      
10028ed9                      if (ebx.b != 0)
10028ed9                          continue
10028ed9                      
10028edb                      ecx_3 = 0
10028edd                      break
10028edd              
10028edf              bool c_2 = unimplemented  {sbb ecx, ecx}
10028ee1              ecx_3 = sbb.d(sbb.d(ecx_1, ecx_1, c_1), 0xffffffff, c_2)
10028ee1              break
10028ee1          
10028ee6          if (ecx_3 == 0)
10028f00              return result
10028f00          
10028ee8          result += 1
10028ee9          edi_1 = &edi_1[0x90]
10028ee9          
10028ef1          if (result s>= eax_2)
10028ef1              break
10028ef1  
10028ef9  return 0

10028f01     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
10028f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10028f30    int32_t sub_10028f30(int32_t arg1)

10028f3e  if (arg1 s>= 0 && arg1 s< data_10064028)
10028f4e      return arg1 * 0x90 + data_100643a8
10028f4e  
10028f57  data_10063fe8(2, "ClientName: client %d out of ran…", arg1)
10028f65  return &data_1006294c

10028f66                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10028f80    int32_t sub_10028f80(int32_t arg1)

10028f8e  if (arg1 s>= 0 && arg1 s< data_10064028)
10028fa0      return arg1 * 0x90 + data_100643a8 + 0x10
10028fa0  
10028fa9  data_10063fe8(2, "ClientSkin: client %d out of ran…", arg1)
10028fb7  return &data_1006294c

10028fb8                                                                          90 90 90 90 90 90 90 90                          ........
10028fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10028fd0    int32_t sub_10028fd0()

10028fd5  return data_10064388

10028fd6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10028fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10028ff0    long double sub_10028ff0(float arg1, float arg2) __pure

10028ff4  long double result = fconvert.t(arg1) - fconvert.t(arg2)
10028ff8  long double x87_r6 = fconvert.t(arg1)
10028ffc  long double temp0 = fconvert.t(arg2)
10028ffc  x87_r6 - temp0
10028ffc  
10029005  if ((((x87_r6 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r6, temp0) ? 1 : 0) << 0xa
10029005          | (x87_r6 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
1002901b      long double temp1_1 = fconvert.t(-180.0)
1002901b      result - temp1_1
1002901b      
10029026      if ((((result < temp1_1 ? 1 : 0) << 8
10029026              | (is_unordered.t(result, temp1_1) ? 1 : 0) << 0xa
10029026              | (result == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10029028          return result + fconvert.t(360.0)
10029005  else
10029007      long double temp2_1 = fconvert.t(180.0)
10029007      result - temp2_1
10029007      
10029012      if ((((result < temp2_1 ? 1 : 0) << 8
10029012              | (is_unordered.t(result, temp2_1) ? 1 : 0) << 0xa
10029012              | (result == temp2_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
1002901a          return result - fconvert.t(360.0)
1002901a  
1002902e  return result

1002902f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

10029040    long double sub_10029040(float arg1, float arg2, float arg3)

1002904a  float ecx = arg2
1002904e  arg1 = fconvert.s(j_sub_10042d40(arg1))
10029058  arg2 = fconvert.s(j_sub_10042d40(ecx))
1002905c  long double x87_r7_2 = fconvert.t(arg1)
10029060  long double temp0 = fconvert.t(arg2)
10029060  x87_r7_2 - temp0
10029060  
1002906c  if ((((x87_r7_2 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp0) ? 1 : 0) << 0xa
1002906c          | (x87_r7_2 == temp0 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10029072      return fconvert.t(arg1)
10029072  
10029077  long double x87_r7_5 = fconvert.t(arg2) - fconvert.t(arg1)
1002907b  long double x87_r6 = fconvert.t(arg2)
1002907f  long double temp1 = fconvert.t(arg1)
1002907f  x87_r6 - temp1
1002907f  
10029088  if ((((x87_r6 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r6, temp1) ? 1 : 0) << 0xa
10029088          | (x87_r6 == temp1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
1002909f      long double temp2_1 = fconvert.t(-180.0)
1002909f      x87_r7_5 - temp2_1
1002909f      
100290aa      if ((((x87_r7_5 < temp2_1 ? 1 : 0) << 8
100290aa              | (is_unordered.t(x87_r7_5, temp2_1) ? 1 : 0) << 0xa
100290aa              | (x87_r7_5 == temp2_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
100290ac          x87_r7_5 = x87_r7_5 + fconvert.t(360.0)
10029088  else
1002908a      long double temp3_1 = fconvert.t(180.0)
1002908a      x87_r7_5 - temp3_1
1002908a      
10029095      if ((((x87_r7_5 < temp3_1 ? 1 : 0) << 8
10029095              | (is_unordered.t(x87_r7_5, temp3_1) ? 1 : 0) << 0xa
10029095              | (x87_r7_5 == temp3_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10029097          x87_r7_5 = x87_r7_5 - fconvert.t(360.0)
10029097  
100290b2  long double temp4 = fconvert.t(0f)
100290b2  x87_r7_5 - temp4
100290b2  
100290bd  if ((((x87_r7_5 < temp4 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_5, temp4) ? 1 : 0) << 0xa
100290bd          | (x87_r7_5 == temp4 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
100290e5      arg2 = fconvert.s(fneg(fconvert.t(arg3)))
100290e9      long double temp5_1 = fconvert.t(arg2)
100290e9      x87_r7_5 - temp5_1
100290e9      
100290f2      if ((((x87_r7_5 < temp5_1 ? 1 : 0) << 8
100290f2              | (is_unordered.t(x87_r7_5, temp5_1) ? 1 : 0) << 0xa
100290f2              | (x87_r7_5 == temp5_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
100290f6          x87_r7_5 = fconvert.t(arg2)
100290bd  else
100290bf      long double temp6_1 = fconvert.t(arg3)
100290bf      x87_r7_5 - temp6_1
100290bf      
100290c8      if ((((x87_r7_5 < temp6_1 ? 1 : 0) << 8
100290c8              | (is_unordered.t(x87_r7_5, temp6_1) ? 1 : 0) << 0xa
100290c8              | (x87_r7_5 == temp6_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
100290d4          float var_4_1 = ecx
100290de          return j_sub_10042d40(fconvert.s(fconvert.t(arg3) + fconvert.t(arg1)))
100290de  
100290fe  float var_4_3 = ecx
10029108  return j_sub_10042d40(fconvert.s(x87_r7_5 + fconvert.t(arg1)))

10029109                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
10029120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10029140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10029150    void sub_10029150(float arg1)

10029156  float edi = arg1
1002915a  long double x87_r7 = fconvert.t(*(edi i+ 0x108c))
10029160  long double temp0 = fconvert.t(180f)
10029160  x87_r7 - temp0
10029160  
1002916b  if ((((x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
1002916b          | (x87_r7 == temp0 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
10029179      *(edi i+ 0x108c) = fconvert.s(fconvert.t(*(edi i+ 0x108c)) - fconvert.t(360f))
10029179  
10029187  long double x87_r7_4
10029187  
10029187  if (*(edi i+ 0x1064) == 0)
100291c2      x87_r7_4 = fconvert.t(150f)
100291c8      arg1 = 100f
10029187  else
100291ac      arg1 = fconvert.s(j_sub_1002a690(*(edi i+ 0x688), 9, 0.100000001f, 1800f))
100291b8      x87_r7_4 = j_sub_1002a690(*(edi i+ 0x688), 0xa, 0.100000001f, 1800f)
100291b8  
100291da  float* esi = edi i+ 0x1098
100291e0  int32_t i_1 = 2
100291e5  arg1 = fconvert.s(fconvert.t(arg1) * fconvert.t(*(edi i+ 0x690)))
100291ef  float var_4 = fconvert.s(x87_r7_4 * fconvert.t(*(edi i+ 0x690)))
1002926d  int32_t i
1002926d  
1002926d  do
10029208      int32_t eax_5
10029208      int32_t edx_2
10029208      int16_t x87control
10029208      edx_2:eax_5 = sx.q(__ftol(x87control, j_sub_10028ff0(esi[-6], esi[-3])))
10029211      long double x87_r7_7 = float.t((eax_5 ^ edx_2) - edx_2)
10029215      long double temp1_1 = fconvert.t(*esi)
10029215      x87_r7_7 - temp1_1
10029217      int32_t eax_7
10029217      eax_7.w = (x87_r7_7 < temp1_1 ? 1 : 0) << 8
10029217          | (is_unordered.t(x87_r7_7, temp1_1) ? 1 : 0) << 0xa
10029217          | (x87_r7_7 == temp1_1 ? 1 : 0) << 0xe | 0x3800
10029217      
1002921c      if ((eax_7:1.b & 0x41) != 0)
10029233          long double temp2_1 = fconvert.t(*esi)
10029233          x87_r7_7 - temp2_1
10029235          eax_7.w = (x87_r7_7 < temp2_1 ? 1 : 0) << 8
10029235              | (is_unordered.t(x87_r7_7, temp2_1) ? 1 : 0) << 0xa
10029235              | (x87_r7_7 == temp2_1 ? 1 : 0) << 0xe | 0x3800
10029235          
1002923a          if ((eax_7:1.b & 1) != 0)
1002923e              long double x87_r6_5 = fconvert.t(*esi) - fconvert.t(var_4)
10029242              *esi = fconvert.s(x87_r6_5)
10029244              x87_r6_5 - x87_r7_7
10029246              eax_7.w = (x87_r6_5 < x87_r7_7 ? 1 : 0) << 8
10029246                  | (is_unordered.t(x87_r6_5, x87_r7_7) ? 1 : 0) << 0xa
10029246                  | (x87_r6_5 == x87_r7_7 ? 1 : 0) << 0xe | 0x3800
10029246              
1002924b              if ((eax_7:1.b & 1) != 0)
1002924d                  *esi = fconvert.s(x87_r7_7)
1002921c      else
10029222          long double x87_r6_3 = fconvert.t(arg1) + fconvert.t(*esi)
10029224          *esi = fconvert.s(x87_r6_3)
10029226          x87_r6_3 - x87_r7_7
10029228          eax_7.w = (x87_r6_3 < x87_r7_7 ? 1 : 0) << 8
10029228              | (is_unordered.t(x87_r6_3, x87_r7_7) ? 1 : 0) << 0xa
10029228              | (x87_r6_3 == x87_r7_7 ? 1 : 0) << 0xe | 0x3800
10029228          
1002922d          if ((eax_7:1.b & 0x41) == 0)
1002922f              *esi = fconvert.s(x87_r7_7)
1002922f      
1002925e      long double st0_4
1002925e      x87control, st0_4 = j_sub_10029040(esi[-6], esi[-3], *esi)
10029263      esi[-6] = fconvert.s(st0_4)
10029269      esi = &esi[1]
1002926c      i = i_1
1002926c      i_1 -= 1
1002926d  while (i != 1)
1002927a  j_sub_100375a0(*(edi i+ 4), edi i+ 0x1080)

10029289                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
100292a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100292c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100292e0    int32_t sub_100292e0()

100292e0  long double st0_1 = j_sub_1000e120()
100292e5  long double temp0 = fconvert.t(data_100643a4)
100292e5  st0_1 - temp0
100292eb  int16_t result = (st0_1 < temp0 ? 1 : 0) << 8
100292eb      | (is_unordered.t(st0_1, temp0) ? 1 : 0) << 0xa | (st0_1 == temp0 ? 1 : 0) << 0xe
100292eb  
100292f0  if ((result:1.b & 0x41) == 0)
100292f2      result = j_sub_1002fa20()
10029302      data_100643a4 = fconvert.s(j_sub_1000e120() + fconvert.t(1f))
10029302  
10029308  return result

10029309                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................

10029320    int32_t sub_10029320(int32_t arg1, float arg2)

10029327  if (j_sub_1000dee0() != 0)
10029341      int32_t* eax_5 = arg1 * 0x11d0 + data_100643a0
10029341      
10029346      if (*eax_5 == 0)
10029350          data_10063fe8(4, "client %d hasn't been setup\n", arg1)
1002935e          return 0x13
1002935e      
10029365      j_sub_10028a70(eax_5, arg2)
1002936d      j_sub_100292e0()
1002936d  
10029374  return 0

10029375                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10029380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100293a0    int32_t sub_100293a0(void* arg1)

100293b9  data_10063fe8(1, "%6d bytes character\n", j_sub_10039120(*(arg1 + 0x688)))
100293d3  data_10063fe8(1, "%6d bytes item weights\n", j_sub_10039120(*(arg1 + 0xbc0)))
100293ed  data_10063fe8(1, "%6d bytes item index\n", j_sub_10039120(*(arg1 + 0xbc4)))
10029407  data_10063fe8(1, "%6d bytes weapon weights\n", j_sub_10039120(*(arg1 + 0x1050)))
10029424  data_10063fe8(1, "%6d bytes weapon index\n", j_sub_10039120(*(arg1 + 0x1054)))
1002943e  data_10063fe8(1, "%6d bytes chat file\n", j_sub_10039120(*(arg1 + 0x1044)))
1002944d  return j_sub_10039150()

1002944e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10029460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10029480    int32_t sub_10029480(int32_t arg1, void* arg2)

1002949b  int32_t* ebx_2 = arg1 * 0x11d0 + data_100643a0
1002949b  
100294a0  if (*ebx_2 != 0)
100294aa      data_10063fe8(4, "client %d already setup\n", arg1)
100294b8      return 0
100294b8  
100294c5  int32_t* eax_4 = j_sub_10029eb0(arg2, arg2 + 0x90)
100294cd  ebx_2[0x1a2] = eax_4
100294cd  
100294d5  if (eax_4 == 0)
100294e0      data_10063fe8(4, "couldn't load bot character %s f…", arg2 + 0x90, arg2)
100294ee      return 0
100294ee  
100294fd  __builtin_memcpy(dest: &ebx_2[0x136], src: arg2, n: 0x1b0)
100294fd  
10029516  if (j_sub_100308d0(&ebx_2[0x2f0], j_sub_1002a810(eax_4, 0x1c)) != 0)
1002951d      return 0
1002951d  
10029542  if (j_sub_10035340(&ebx_2[0x412], j_sub_1002a810(ebx_2[0x1a2], 5)) != 0)
10029545      j_sub_10030950(&ebx_2[0x2f0])
10029552      return 0
10029552  
10029586  if (j_sub_1002dff0(&ebx_2[0x3e3], j_sub_1002a810(ebx_2[0x1a2], 0xc), 
10029586          j_sub_1002a810(ebx_2[0x1a2], 0xd)) != 0)
10029589      j_sub_10030950(&ebx_2[0x2f0])
10029593      j_sub_10035300(&ebx_2[0x412])
100295a0      return 0
100295a0  
100295af  char* eax_18
100295af  eax_18.b = *j_sub_1002a810(ebx_2[0x1a2], 3)
100295af  
100295ba  if (eax_18.b == 0x66 || eax_18.b == 0x46)
100295d4      ebx_2[0x3e3] = 1
100295ba  else if (eax_18.b == 0x6d || eax_18.b == 0x4d)
100295cc      ebx_2[0x3e3] = 2
100295c2  else
100295c4      ebx_2[0x3e3] = 0
100295c4  
100295de  *ebx_2 = 1
100295e4  ebx_2[1] = arg1
100295e8  ebx_2[2] = arg1 + 1
100295eb  ebx_2[0x2b6] = 1
100295fa  ebx_2[0x2b9] = fconvert.s(j_sub_1000e120())
10029608  data_10064388 += 1
10029613  return 1

10029614                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10029620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10029640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10029660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10029680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10029690    int32_t sub_10029690(int32_t arg1)

100296a9  int32_t* s = arg1 * 0x11d0 + data_100643a0
100296a9  
100296ae  if (*s == 0)
100296b8      data_10063fe8(3, "client %d already shutdown\n", arg1)
100296c7      return 0x17
100296c7  
100296d3  if (j_sub_10021e90(s) != 0)
100296e2      j_sub_1002ea80(&s[0x3e3], s[1], 0)
100296e2  
100296f2  j_sub_1002dfb0(&s[0x3e3])
100296fe  j_sub_10035300(&s[0x412])
1002970a  j_sub_10030950(&s[0x2f0])
10029716  j_sub_1002a590(s[0x1a2])
10029722  j_sub_10021b90(s[0x470])
10029727  void* ecx_2 = s[0x471]
1002972d  s[0x470] = 0
10029738  j_sub_10021b90(ecx_2)
10029746  s[0x471] = 0
10029750  __builtin_memset(s, c: 0, n: 0x11d0)
10029752  *s = 0
1002975d  data_10064388 -= 1
10029766  return 0

10029767                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10029780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100297a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100297b0    int32_t sub_100297b0(int32_t arg1, int32_t arg2)

100297b6  void* edi = data_100643a0
100297c7  int32_t edx_1 = arg1 * 0x11d0
100297c7  
100297d2  if (*(edx_1 + edi) == 0)
100297db      data_10063fe8(4, "tried to move inactive bot clien…")
100297eb      return 0x15
100297eb  
100297fe  int32_t* edi_1 = edi + arg2 * 0x11d0
100297fe  
10029803  if (*edi_1 != 0)
1002980c      data_10063fe8(4, "tried to move client to active c…")
1002981c      return 0x16
1002981c  
10029824  __builtin_memcpy(dest: edi_1, src: edx_1 + edi, n: 0x11d0)
10029834  __builtin_memset(s: edx_1 + data_100643a0, c: 0, n: 0x11d0)
1002983e  *(edx_1 + data_100643a0) = 0
10029841  return 0

10029842        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10029860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10029880    int32_t sub_10029880(int32_t arg1, int32_t arg2)

10029898  int32_t* eax_5 = arg1 * 0x11d0 + data_100643a0
10029898  
1002989d  if (*eax_5 == 0)
100298a6      data_10063fe8(4, "tried to updated inactive bot cl…")
100298b4      return 0x18
100298b4  
100298c3  int32_t ecx = __builtin_memcpy(dest: &eax_5[3], src: arg2, n: 0x4cc)
100298c5  void* esi_1 = &eax_5[0x420]
100298cb  int32_t i_1 = 3
100298ea  int32_t i
100298ea  
100298ea  do
100298d8      int32_t var_c_1 = ecx
100298e1      *esi_1 = fconvert.s(j_sub_10042d40(fconvert.s(fconvert.t(*(esi_1 - 0x1050))
100298e1          + fconvert.t(*esi_1))))
100298e6      esi_1 += 4
100298e9      i = i_1
100298e9      i_1 -= 1
100298ea  while (i != 1)
100298f0  return 0

100298f1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10029900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10029920    int32_t sub_10029920(int32_t arg1, int32_t arg2)

1002993c  __builtin_memcpy(dest: arg1 * 0x90 + data_100643a8, src: arg2, n: 0x90)
10029942  return 0

10029943           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

10029960    int32_t sub_10029960(int32_t arg1, int32_t arg2, char* arg3)

10029978  int32_t* eax_5 = arg1 * 0x11d0 + data_100643a0
10029978  
1002997d  if (*eax_5 == 0)
10029986      data_10063fe8(3, "recieved console message for ina…")
10029994      return 0x19
10029994  
100299a5  j_sub_1002aab0(&eax_5[0x3e3], arg2, arg3)
100299af  return 0

100299b0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
100299c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100299d0    int32_t sub_100299d0(int32_t arg1, int32_t arg2)

100299e8  int32_t* eax_5 = arg1 * 0x11d0 + data_100643a0
100299e8  
100299ed  if (*eax_5 == 0)
100299f6      data_10063fe8(4, "tried to update settings of inac…")
10029a04      return 0x1a
10029a04  
10029a18  __builtin_memcpy(dest: &eax_5[0x136], src: arg2, n: 0x1b0)
10029a1c  return 0

10029a1d                                                                                         90 90 90                               ...
10029a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10029a40    int32_t* sub_10029a40(int32_t* arg1)

10029a63  void var_57c
10029a63  __builtin_memcpy(dest: &var_57c, src: &arg1[0x136], n: 0x1b0)
10029a65  int32_t ecx = arg1[1]
10029a7d  void var_6b8
10029a7d  __builtin_memcpy(dest: &var_6b8, src: &arg1[0x2d0], n: 0x80)
10029a95  void var_3cc
10029a95  __builtin_memcpy(dest: &var_3cc, src: &arg1[0x2f0], n: 0x3cc)
10029a97  int32_t eax = *arg1
10029aa8  int32_t edx = arg1[2]
10029aaf  void var_6d4
10029aaf  __builtin_memcpy(dest: &var_6d4, src: &arg1[0x412], n: 0x1c)
10029ac7  int32_t eax_1 = arg1[0x1a2]
10029ad1  void var_638
10029ad1  __builtin_memcpy(dest: &var_638, src: &arg1[0x3e3], n: 0xbc)
10029ade  j_sub_10021b90(arg1[0x470])
10029aea  j_sub_10021b90(arg1[0x471])
10029afc  __builtin_memset(s: arg1, c: 0, n: 0x11d0)
10029b05  __builtin_memcpy(dest: &arg1[0x2d0], src: &var_6b8, n: 0x80)
10029b1b  __builtin_memcpy(dest: &arg1[0x2f0], src: &var_3cc, n: 0x3cc)
10029b2e  __builtin_memcpy(dest: &arg1[0x412], src: &var_6d4, n: 0x1c)
10029b42  *arg1 = eax
10029b49  __builtin_memcpy(dest: &arg1[0x3e3], src: &var_638, n: 0xbc)
10029b5d  arg1[2] = edx
10029b60  __builtin_memcpy(dest: &arg1[0x136], src: &var_57c, n: 0x1b0)
10029b66  arg1[0x1a2] = eax_1
10029b6c  arg1[1] = ecx
10029b6f  j_sub_10034b90(&arg1[0x2d0])
10029b79  j_sub_10030990(&arg1[0x2f0])
10029b83  j_sub_10035640(&arg1[0x412])
10029b89  j_sub_1002f6f0(&arg1[0x2f0])
10029ba1  return j_sub_10034af0(&arg1[0x2d0])

10029ba2        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10029bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10029be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10029c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10029c10    int32_t sub_10029c10()

10029c16  int32_t i = 0
10029c16  
10029c1a  if (data_10064028 s> 0)
10029c1d      void* esi_1 = nullptr
10029c1d      
10029c3e      do
10029c28          j_sub_10029a40(esi_1 + data_100643a0)
10029c35          i += 1
10029c36          esi_1 += 0x11d0
10029c3e      while (i s< data_10064028)
10029c3e  
10029c41  j_sub_1002f360()
10029c46  int32_t* eax_2 = data_10064398
10029c46  
10029c4e  if (eax_2 != 0)
10029c51      j_sub_10006920(eax_2)
10029c51  
10029c5e  data_10064398 = j_sub_100069a0()
10029c63  j_sub_10028c30()
10029c6a  return 0

10029c6b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10029c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10029c90    int32_t sub_10029c90()

10029c99  sub_1004517a(sub_100457bc(nullptr))
10029cad  *sub_10044f86() = j_sub_10035680()
10029cad  
10029cb7  if (*sub_10044f86() != 0)
10029cc1      return *sub_10044f86()
10029cc1  
10029cce  *sub_10044f86() = j_sub_100309d0()
10029cce  
10029cd8  if (*sub_10044f86() != 0)
10029ce2      return *sub_10044f86()
10029ce2  
10029ce3  int16_t x87control = j_sub_1002ebb0()
10029cef  *sub_10044f86() = 0
10029cef  
10029cf9  if (*sub_10044f86() != 0)
10029d03      return *sub_10044f86()
10029d03  
10029d1e  data_100643a0 = j_sub_10039000(data_10064028 * 0x11d0)
10029d3e  data_100643a8 = j_sub_10039000(data_10064028 * 0x90)
10029d50  data_1006439c = __ftol(x87control, j_sub_10038a90("gametype", &data_1005b570))
10029d58  return 0

10029d59                                                                             90 90 90 90 90 90 90                           .......
10029d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10029d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10029da0    void* sub_10029da0()

10029da0  j_sub_10028e80()
10029da5  j_sub_1002ec80()
10029daa  j_sub_10030a20()
10029daf  j_sub_100356d0()
10029db4  void* eax = data_100643a8
10029db4  
10029dbb  if (eax != 0)
10029dbe      j_sub_100390b0(eax)
10029dbe  
10029dc6  void* result = data_100643a0
10029dcb  data_100643a8 = 0
10029dcb  
10029dd7  if (result != 0)
10029dda      result = j_sub_100390b0(result)
10029dda  
10029de2  data_100643a0 = 0
10029dec  return result

10029ded                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10029e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10029e10    int32_t* sub_10029e10(int32_t* arg1)

10029e17  j_sub_10038d80(&data_1005ab58)
10029e23  int32_t i = 0
10029e23  
10029e28  if (*arg1 s> 0)
10029e2b      void* edi_1 = &arg1[2]
10029e2b      
10029e77      do
10029e2e          int32_t eax_1 = sx.d(*(edi_1 - 4))
10029e33          int32_t i_2
10029e33          
10029e33          if (eax_1 == 1)
10029e60              int32_t var_10_2 = *edi_1
10029e61              i_2 = i
10029e67              j_sub_10038d80(" %4d %d")
10029e33          else if (eax_1 == 2)
10029e4b              i_2.q = fconvert.d(fconvert.t(*edi_1))
10029e4e              int32_t i_1 = i
10029e54              j_sub_10038d80(" %4d %f")
10029e36          else if (eax_1 == 3)
10029e3d              int32_t var_10_1 = *edi_1
10029e3e              i_2 = i
10029e67              j_sub_10038d80(" %4d %s")
10029e71          i += 1
10029e72          edi_1 += 8
10029e77      while (i s< *arg1)
10029e77  
10029e89  return j_sub_10038d80(&data_1005ab54)

10029e8a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10029ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10029eb0    int32_t* sub_10029eb0(char* arg1, char* arg2)
// This function has unresolved stack usage. View graph of stack usage to resolve.

10029ecc  int32_t* result = nullptr
10029ece  char var_104[0x104]
10029ece  StrCopyFixed(&var_104, arg1, 0x104)
10029eea  void* var_5cc
10029eea  
10029eea  if (j_sub_10041f60(&var_104, &var_5cc) == 0)
10029efb      data_10063fe8(3, "couldn't find %s\n", &var_104)
10029f10      return 0
10029f10  
10029f11  int32_t ebp = 0
10029f13  int32_t var_5d8 = 0
10029f2b  void* var_5c8
10029f2b  char var_5c4[0x90]
10029f2b  
10029f2b  while (true)
10029f2b      char* edi_1 = j_sub_1003de60(&var_5c4, var_5cc, var_5c8)
10029f32      char* var_5e4_1 = edi_1
10029f32      
10029f36      if (edi_1 == 0)
1002a322          data_10063fe8(3, "counldn't load %s\n", &var_5c4)
1002a337          return 0
1002a337      
10029f43      int32_t esi_1 = 0
10029f47      int32_t var_5dc_1 = 0
10029f4b      int32_t var_5e0_1 = 0
10029f4f      int32_t var_5d4_1 = 0
10029f5d      void* var_5d0
10029f5d      char var_534[0x400]
10029f5d      
10029f5d      if (j_sub_1003d580(edi_1, &var_534) != 0)
10029f63          while (true)
10029f63              char* esi_2 = "character"
10029f68              char (* eax_5)[0x400] = &var_534
10029f6f              int32_t eax_7
10029f6f              
10029f6f              while (true)
10029f6f                  char edx_2 = *eax_5
10029f73                  char temp0_1 = *esi_2
10029f73                  bool c_1 = edx_2 u< temp0_1
10029f73                  
10029f75                  if (edx_2 == temp0_1)
10029f79                      if (edx_2 == 0)
10029f8f                          eax_7 = 0
10029f91                          break
10029f91                      
10029f7b                      edx_2 = (*eax_5)[1]
10029f80                      char temp3_1 = esi_2[1]
10029f80                      c_1 = edx_2 u< temp3_1
10029f80                      
10029f83                      if (edx_2 == temp3_1)
10029f85                          eax_5 = &(*eax_5)[2]
10029f88                          esi_2 = &esi_2[2]
10029f88                          
10029f8d                          if (edx_2 != 0)
10029f8d                              continue
10029f8d                          
10029f8f                          eax_7 = 0
10029f91                          break
10029f91                  
10029f93                  bool c_2 = unimplemented  {sbb eax, eax}
10029f95                  eax_7 = sbb.d(sbb.d(eax_5, eax_5, c_1), 0xffffffff, c_2)
10029f95                  break
10029f95              
10029f9a              void* var_5fc_9
10029f9a              
10029f9a              if (eax_7 != 0)
1002a3b9                  char (* var_5f8_21)[0x400] = &var_534
1002a3ba                  var_5fc_9 = "unknown definition %s\n"
1002a3c4                  label_1002a3c4:
1002a3c4                  j_sub_10039200(var_5e4_1, var_5fc_9)
1002a3ca                  j_sub_1003e000(var_5e4_1)
1002a3de                  return 0
1002a3de              
10029fb1              int32_t eax_8 = j_sub_1003d740(var_5e4_1, 1, 0, &var_534)
10029fbb              int32_t eax_9
10029fbb              
10029fbb              if (eax_8 != 0)
10029fc9                  j_sub_1003fcb0(&var_534)
10029fd4                  eax_9 = j_sub_1003d650(var_5e4_1, U"{")
10029fd4              
10029fde              if (eax_8 == 0 || eax_9 == 0)
1002a339                  j_sub_1003e000(var_5e4_1)
1002a34d                  return 0
1002a34d              
10029fe4              char* esi_4 = arg2
10029feb              char (* eax_10)[0x400] = &var_534
10029ff2              int32_t eax_12
10029ff2              
10029ff2              while (true)
10029ff2                  char edx_3 = *eax_10
10029ff6                  char temp4_1 = *esi_4
10029ff6                  bool c_3 = edx_3 u< temp4_1
10029ff6                  
10029ff8                  if (edx_3 == temp4_1)
10029ffc                      if (edx_3 == 0)
1002a012                          eax_12 = 0
1002a014                          break
1002a014                      
10029ffe                      edx_3 = (*eax_10)[1]
1002a003                      char temp7_1 = esi_4[1]
1002a003                      c_3 = edx_3 u< temp7_1
1002a003                      
1002a006                      if (edx_3 == temp7_1)
1002a008                          eax_10 = &(*eax_10)[2]
1002a00b                          esi_4 = &esi_4[2]
1002a00b                          
1002a010                          if (edx_3 != 0)
1002a010                              continue
1002a010                          
1002a012                          eax_12 = 0
1002a014                          break
1002a014                  
1002a016                  bool c_4 = unimplemented  {sbb eax, eax}
1002a018                  eax_12 = sbb.d(sbb.d(eax_10, eax_10, c_3), 0xffffffff, c_4)
1002a018                  break
1002a018              
1002a01d              if (eax_12 != 0)
1002a1cf                  int32_t edi_8 = 1
1002a1cf                  
1002a1e1                  while (true)
1002a1eb                      if (j_sub_1003dae0(var_5e4_1, &var_534) == 0)
1002a39d                          j_sub_1003e000(var_5e4_1)
1002a3b1                          return 0
1002a3b1                      
1002a1f1                      void* esi_10 = &data_1005ab58
1002a1f6                      char (* eax_26)[0x400] = &var_534
1002a1fd                      int32_t eax_28
1002a1fd                      char edx_8
1002a1fd                      
1002a1fd                      while (true)
1002a1fd                          edx_8 = *eax_26
1002a201                          char temp9_1 = *esi_10
1002a201                          bool c_7 = edx_8 u< temp9_1
1002a201                          
1002a203                          if (edx_8 == temp9_1)
1002a207                              if (edx_8 == 0)
1002a21d                                  eax_28 = 0
1002a21f                                  break
1002a21f                              
1002a209                              edx_8 = (*eax_26)[1]
1002a20e                              char temp15_1 = *(esi_10 + 1)
1002a20e                              c_7 = edx_8 u< temp15_1
1002a20e                              
1002a211                              if (edx_8 == temp15_1)
1002a213                                  eax_26 = &(*eax_26)[2]
1002a216                                  esi_10 += 2
1002a216                                  
1002a21b                                  if (edx_8 != 0)
1002a21b                                      continue
1002a21b                                  
1002a21d                                  eax_28 = 0
1002a21f                                  break
1002a21f                          
1002a221                          bool c_8 = unimplemented  {sbb eax, eax}
1002a223                          eax_28 = sbb.d(sbb.d(eax_26, eax_26, c_7), 0xffffffff, c_8)
1002a223                          break
1002a223                      
1002a228                      if (eax_28 != 0)
1002a22d                          void* esi_11 = &data_1005ab54
1002a232                          void* eax_29 = &var_534
1002a239                          int32_t eax_31
1002a239                          
1002a239                          while (true)
1002a239                              edx_8 = *eax_29
1002a23d                              char temp16_1 = *esi_11
1002a23d                              bool c_9 = edx_8 u< temp16_1
1002a23d                              
1002a23f                              if (edx_8 == temp16_1)
1002a243                                  if (edx_8 == 0)
1002a259                                      eax_31 = 0
1002a25b                                      break
1002a25b                                  
1002a245                                  edx_8 = *(eax_29 + 1)
1002a24a                                  char temp19_1 = *(esi_11 + 1)
1002a24a                                  c_9 = edx_8 u< temp19_1
1002a24a                                  
1002a24d                                  if (edx_8 == temp19_1)
1002a24f                                      eax_29 += 2
1002a252                                      esi_11 += 2
1002a252                                      
1002a257                                      if (edx_8 != 0)
1002a257                                          continue
1002a257                                      
1002a259                                      eax_31 = 0
1002a25b                                      break
1002a25b                              
1002a25d                              bool c_10 = unimplemented  {sbb eax, eax}
1002a25f                              eax_31 = sbb.d(sbb.d(eax_29, eax_29, c_9), 0xffffffff, c_10)
1002a25f                              break
1002a25f                          
1002a264                          if (eax_31 == 0)
1002a266                              edi_8 -= 1
1002a228                      else
1002a22a                          edi_8 += 1
1002a22a                      
1002a269                      if (edi_8 == 0)
1002a269                          break
1002a01d              else
1002a030                  var_5d4_1 = 1
1002a030                  
1002a042                  if (j_sub_1003dae0(var_5e4_1, &var_534) != 0)
1002a048                      while (true)
1002a048                          void* esi_5 = &data_1005ab54
1002a04d                          char (* eax_14)[0x400] = &var_534
1002a054                          int32_t eax_16
1002a054                          
1002a054                          while (true)
1002a054                              char edx_4 = *eax_14
1002a058                              char temp8_1 = *esi_5
1002a058                              bool c_5 = edx_4 u< temp8_1
1002a058                              
1002a05a                              if (edx_4 == temp8_1)
1002a05e                                  if (edx_4 == 0)
1002a074                                      eax_16 = 0
1002a076                                      break
1002a076                                  
1002a060                                  edx_4 = (*eax_14)[1]
1002a065                                  char temp14_1 = *(esi_5 + 1)
1002a065                                  c_5 = edx_4 u< temp14_1
1002a065                                  
1002a068                                  if (edx_4 == temp14_1)
1002a06a                                      eax_14 = &(*eax_14)[2]
1002a06d                                      esi_5 += 2
1002a06d                                      
1002a072                                      if (edx_4 != 0)
1002a072                                          continue
1002a072                                      
1002a074                                      eax_16 = 0
1002a076                                      break
1002a076                              
1002a078                              bool c_6 = unimplemented  {sbb eax, eax}
1002a07a                              eax_16 = sbb.d(sbb.d(eax_14, eax_14, c_5), 0xffffffff, c_6)
1002a07a                              break
1002a07a                          
1002a07f                          if (eax_16 == 0)
1002a07f                              break
1002a07f                          
1002a09d                          int32_t var_134
1002a09d                          int16_t var_130
1002a09d                          
1002a09d                          if (var_134 != 3 || (var_130:1.b & 0x10) == 0)
1002a394                              char (* var_5f8_19)[0x400] = &var_534
1002a395                              var_5fc_9 = "expected integer index, found %s…"
1002a39a                              goto label_1002a3c4
1002a39a                          
1002a0b0                          int32_t var_12c
1002a0b0                          
1002a0b0                          if (var_12c s> var_5e0_1)
1002a0b2                              var_5e0_1 = var_12c
1002a0b2                          
1002a0bc                          if (var_5d8 != 0)
1002a0be                              int32_t eax_18
1002a0be                              eax_18.b = result[var_12c * 2 + 1].b
1002a0be                              
1002a0c4                              if (eax_18.b != 0)
1002a34e                                  int32_t var_5f8_17 = var_12c
1002a34f                                  var_5fc_9 = "characteristic %d already initia…"
1002a354                                  goto label_1002a3c4
1002a354                          
1002a0e1                          if (j_sub_1003dae0(var_5e4_1, &var_534) == 0)
1002a357                              j_sub_1003e000(var_5e4_1)
1002a36b                              return 0
1002a36b                          
1002a0f1                          if (var_134 != 3)
1002a139                              if (var_134 != 1)
1002a372                                  j_sub_10039200(var_5e4_1, 
1002a372                                      "expected integer, float or strin…")
1002a378                                  j_sub_1003e000(var_5e4_1)
1002a38c                                  return 0
1002a38c                              
1002a13f                              j_sub_1003fcb0(&var_534)
1002a147                              char (* edi_3)[0x400] = &var_534
1002a147                              
1002a150                              if (var_5d8 == 0)
1002a197                                  int32_t i = 0xffffffff
1002a197                                  
1002a19c                                  while (i != 0)
1002a19c                                      bool cond:4_1 = 0 != *edi_3
1002a19c                                      edi_3 = &(*edi_3)[1]
1002a19c                                      i -= 1
1002a19c                                      
1002a19c                                      if (not(cond:4_1))
1002a19c                                          break
1002a19c                                  
1002a1a9                                  var_5dc_1 = var_5dc_1 + not.d(i) - 1 + 1
1002a150                              else
1002a152                                  int32_t i_1 = 0xffffffff
1002a152                                  
1002a157                                  while (i_1 != 0)
1002a157                                      bool cond:5_1 = 0 != *edi_3
1002a157                                      edi_3 = &(*edi_3)[1]
1002a157                                      i_1 -= 1
1002a157                                      
1002a157                                      if (not(cond:5_1))
1002a157                                          break
1002a157                                  
1002a15d                                  int32_t ecx_6 = not.d(i_1)
1002a16a                                  int32_t esi_8
1002a16a                                  int32_t edi_6
1002a16a                                  edi_6, esi_8 = __builtin_memcpy(dest: var_5d0, 
1002a16a                                      src: edi_3 - ecx_6, n: ecx_6 u>> 2 << 2)
1002a173                                  __builtin_memcpy(dest: edi_6, src: esi_8, n: ecx_6 & 3)
1002a175                                  result[var_12c * 2 + 2] = var_5d0
1002a179                                  char (* edi_7)[0x400] = &var_534
1002a180                                  int32_t i_2 = 0xffffffff
1002a183                                  result[var_12c * 2 + 1].b = 3
1002a183                                  
1002a188                                  while (i_2 != 0)
1002a188                                      bool cond:6_1 = 0 != *edi_7
1002a188                                      edi_7 = &(*edi_7)[1]
1002a188                                      i_2 -= 1
1002a188                                      
1002a188                                      if (not(cond:6_1))
1002a188                                          break
1002a188                                  
1002a191                                  var_5d0 = var_5d0 + not.d(i_2) - 1 + 1
1002a0f1                          else if (var_5d8 != 0)
1002a105                              if ((var_130:1.b & 8) == 0)
1002a123                                  result[var_12c * 2 + 2] = var_12c
1002a127                                  result[var_12c * 2 + 1].b = 1
1002a105                              else
1002a10e                                  double var_124
1002a10e                                  result[var_12c * 2 + 2] = fconvert.s(fconvert.t(var_124))
1002a112                                  result[var_12c * 2 + 1].b = 2
1002a112                          
1002a1c4                          if (j_sub_1003dae0(var_5e4_1, &var_534) == 0)
1002a1c4                              break
1002a1c4                          
1002a1c4                          continue
1002a1c4              
1002a26f              edi_1 = var_5e4_1
1002a26f              
1002a286              if (j_sub_1003d580(edi_1, &var_534) == 0)
1002a286                  break
1002a286          
1002a28c          esi_1 = var_5e0_1
1002a290          ebp = var_5d8
1002a290      
1002a295      j_sub_1003e000(edi_1)
1002a295      
1002a2a3      if (var_5d4_1 == 0)
1002a3f3          data_10063fe8(3, "couldn't find character %s in %s…", arg2, &var_5c4)
1002a408          return 0
1002a408      
1002a2ab      if (ebp == 0)
1002a2bb          result = j_sub_10039000(var_5dc_1 + (esi_1 << 3) + 0xc)
1002a2c4          *result = esi_1
1002a2c6          var_5d0 = &result[esi_1 * 2 + 3]
1002a2c6      
1002a2ca      ebp += 1
1002a2ce      var_5d8 = ebp
1002a2ce      
1002a2d2      if (ebp s>= 2)
1002a2d2          break
1002a2d2  
1002a2e5  char (* var_5f8_14)[0x104] = &var_104
1002a2e5  
1002a2e6  if (var_5c8 == 0)
1002a418      data_10063fe8(1, "loaded %s from %s\n", arg2, var_5f8_14)
1002a42d      return result
1002a42d  
1002a300  data_10063fe8(1, "loaded %s from %s\%s\n", arg2, &var_5c4, var_5f8_14)
1002a315  return result

1002a42e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1002a440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a4a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a4c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a4e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002a590    void* sub_1002a590(void* arg1)

1002a59b  return j_sub_100390b0(arg1)

1002a59c                                                                                      90 90 90 90                              ....
1002a5a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002a5b0    int32_t sub_1002a5b0(int32_t* arg1, int32_t arg2)

1002a5be  if (arg2 s< 0 || arg2 s>= *arg1)
1002a5ea      data_10063fe8(3, "characteristic %d does not exist…", arg2)
1002a5f5      return 0
1002a5f5  
1002a5c6  if (arg1[arg2 * 2 + 1].b != 0)
1002a5e1      return 1
1002a5e1  
1002a5d0  data_10063fe8(3, "characteristic %d is not initial…", arg2)
1002a5db  return 0

1002a5f6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1002a600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002a620    long double sub_1002a620(int32_t* arg1, int32_t arg2)

1002a636  if (j_sub_1002a5b0(arg1, arg2) != 0)
1002a638      int32_t eax
1002a638      eax.b = arg1[arg2 * 2 + 1].b
1002a638      
1002a63e      if (eax.b == 1)
1002a646          return float.t(arg1[arg2 * 2 + 2])
1002a646      
1002a649      if (eax.b == 2)
1002a651          return fconvert.t(arg1[arg2 * 2 + 2])
1002a651      
1002a65a      data_10063fe8(3, "characteristic %d is not a float…", arg2)
1002a65a  
1002a66b  return fconvert.t(0f)

1002a66c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
1002a680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002a690    long double sub_1002a690(int32_t* arg1, int32_t arg2, float arg3, float arg4)

1002a690  long double x87_r7 = fconvert.t(arg3)
1002a694  long double temp0 = fconvert.t(arg4)
1002a694  x87_r7 - temp0
1002a694  
1002a69d  if ((((x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
1002a69d          | (x87_r7 == temp0 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1002a6aa      int32_t var_8
1002a6aa      var_8.q = fconvert.d(fconvert.t(arg4))
1002a6bf      data_10063fe8(3, "cannot bound characteristic %d b…", arg2, 
1002a6bf          fconvert.d(fconvert.t(arg3)), var_8)
1002a6ce      return fconvert.t(0f)
1002a6ce  
1002a6d9  long double result = j_sub_1002a620(arg1, arg2)
1002a6de  long double temp1 = fconvert.t(arg3)
1002a6de  result - temp1
1002a6de  
1002a6ea  if ((((result < temp1 ? 1 : 0) << 8 | (is_unordered.t(result, temp1) ? 1 : 0) << 0xa
1002a6ea          | (result == temp1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
1002a6f2      return fconvert.t(arg3)
1002a6f2  
1002a6f3  long double temp2 = fconvert.t(arg4)
1002a6f3  result - temp2
1002a6f3  
1002a6fc  if ((((result < temp2 ? 1 : 0) << 8 | (is_unordered.t(result, temp2) ? 1 : 0) << 0xa
1002a6fc          | (result == temp2 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
1002a704      return result
1002a704  
1002a700  return fconvert.t(arg4)

1002a705                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1002a720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002a730    int32_t sub_1002a730(int32_t* arg1, int32_t arg2)

1002a746  if (j_sub_1002a5b0(arg1, arg2) != 0)
1002a748      int32_t eax
1002a748      eax.b = arg1[arg2 * 2 + 1].b
1002a748      
1002a74e      if (eax.b == 1)
1002a756          return arg1[arg2 * 2 + 2]
1002a756      
1002a759      int16_t x87control
1002a759      
1002a759      if (eax.b == 2)
1002a766          return __ftol(x87control, fconvert.t(arg1[arg2 * 2 + 2]))
1002a76f      data_10063fe8(3, "characteristic %d is not a integ…", arg2)
1002a76f  
1002a77c  return 0

1002a77d                                                                                         90 90 90                               ...
1002a780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002a7a0    int32_t sub_1002a7a0(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

1002a7ac  if (arg3 s> arg4)
1002a7bc      data_10063fe8(3, "cannot bound characteristic %d b…", arg2, arg3, arg4)
1002a7c9      return 0
1002a7c9  
1002a7d4  int32_t eax_2 = j_sub_1002a730(arg1, arg2)
1002a7d4  
1002a7de  if (eax_2 s< arg3)
1002a7e4      return arg3
1002a7e4  
1002a7e7  if (eax_2 s<= arg4)
1002a7ed      return eax_2
1002a7ed  
1002a7e9  return arg4

1002a7ee                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1002a800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002a810    int32_t sub_1002a810(int32_t* arg1, int32_t arg2)

1002a826  if (j_sub_1002a5b0(arg1, arg2) == 0)
1002a82f      return &data_1006294c
1002a82f  
1002a835  if (arg1[arg2 * 2 + 1].b == 3)
1002a83d      return arg1[arg2 * 2 + 2]
1002a83d  
1002a846  data_10063fe8(3, "characteristic %d is not a strin…", arg2)
1002a853  return 0

1002a854                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1002a860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002a880    int32_t sub_1002a880()

1002a880  void* eax_9 = data_10064374
1002a880  
1002a887  if (eax_9 != 0)
1002a88a      j_sub_100390b0(eax_9)
1002a88a  
1002a8a3  int16_t x87control
1002a8a3  int32_t eax = __ftol(x87control, j_sub_10038a90("max_messages", "1024"))
1002a8b6  int32_t esi_1 = eax * 0xa8
1002a8ba  void* eax_3 = j_sub_10038f90(esi_1)
1002a8bf  data_10064374 = eax_3
1002a8c4  *(eax_3 + 0xa0) = 0
1002a8ce  void* eax_4 = data_10064374
1002a8dc  *(eax_4 + 0xa4) = eax_4 + 0xa8
1002a8dc  
1002a8e8  if (eax - 1 s> 1)
1002a8eb      int32_t eax_5 = 0xa8
1002a8f0      int32_t i_1 = eax - 2
1002a921      int32_t i
1002a921      
1002a921      do
1002a8f3          int32_t ecx_2 = data_10064374
1002a900          *(eax_5 + ecx_2 + 0xa0) = eax_5 + ecx_2 - 0xa8
1002a907          int32_t ecx_3 = data_10064374
1002a914          *(eax_5 + ecx_3 + 0xa4) = eax_5 + ecx_3 + 0xa8
1002a91b          eax_5 += 0xa8
1002a920          i = i_1
1002a920          i_1 -= 1
1002a921      while (i != 1)
1002a921  
1002a934  int32_t eax_8 = data_10064374
1002a93c  *(esi_1 + eax_8 - 8) = eax_8 + (eax - 2) * 0xa8
1002a946  *(esi_1 + data_10064374 - 4) = 0
1002a94e  int32_t result = data_10064374
1002a953  data_10064364 = result
1002a959  return result

1002a95a                                                                                90 90 90 90 90 90                            ......
1002a960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002a980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002a9a0    void* sub_1002a9a0()

1002a9a0  void* result = data_10064364
1002a9a0  
1002a9a7  if (result != 0)
1002a9a9      void* ecx_1 = *(result + 0xa4)
1002a9b1      data_10064364 = ecx_1
1002a9b1      
1002a9b7      if (ecx_1 != 0)
1002a9b9          *(ecx_1 + 0xa0) = 0
1002a9b9  
1002a9c3  return result

1002a9c4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................

1002a9e0    void* sub_1002a9e0(void* arg1)

1002a9e0  void* ecx_1 = data_10064364
1002a9e0  
1002a9ec  if (ecx_1 != 0)
1002a9ee      *(ecx_1 + 0xa0) = arg1
1002a9ee  
1002a9f4  *(arg1 + 0xa0) = 0
1002aa04  *(arg1 + 0xa4) = data_10064364
1002aa0a  data_10064364 = arg1
1002aa0f  return arg1

1002aa10                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

1002aa20    int32_t sub_1002aa20(void* arg1, void* arg2)

1002aa29  void* ecx = *(arg2 + 0xa4)
1002aa29  
1002aa31  if (ecx == 0)
1002aa47      *(arg1 + 0xb0) = *(arg2 + 0xa0)
1002aa31  else
1002aa39      *(ecx + 0xa0) = *(arg2 + 0xa0)
1002aa39  
1002aa4d  void* ecx_2 = *(arg2 + 0xa0)
1002aa4d  
1002aa55  if (ecx_2 == 0)
1002aa6b      *(arg1 + 0xac) = *(arg2 + 0xa4)
1002aa55  else
1002aa5d      *(ecx_2 + 0xa4) = *(arg2 + 0xa4)
1002aa5d  
1002aa72  j_sub_1002a9e0(arg2)
1002aa80  int32_t result = *(arg1 + 0xb4) - 1
1002aa81  *(arg1 + 0xb4) = result
1002aa88  return result

1002aa89                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1002aaa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002aab0    void* sub_1002aab0(void* arg1, int32_t arg2, char* arg3)

1002aab1  float* eax = j_sub_1002a9a0()
1002aab1  
1002aaba  if (eax == 0)
1002aacd      return data_10063fe8(3, "empty console message heap\n")
1002aacd  
1002aadb  *eax = fconvert.s(j_sub_1000e120())
1002aae7  eax[1] = arg2
1002aaea  StrCopyFixed(&eax[2], arg3, 0x96)
1002aaf3  eax[0x29] = 0
1002ab00  void* ecx_1 = *(arg1 + 0xb0)
1002ab00  
1002ab08  if (ecx_1 == 0)
1002ab31      *(arg1 + 0xb0) = eax
1002ab37      *(arg1 + 0xac) = eax
1002ab3d      eax[0x28] = 0
1002ab4f      *(arg1 + 0xb4) += 1
1002ab55      return arg1
1002ab55  
1002ab0a  *(ecx_1 + 0xa4) = eax
1002ab16  eax[0x28] = *(arg1 + 0xb0)
1002ab22  int32_t ecx_4 = *(arg1 + 0xb4) + 1
1002ab23  *(arg1 + 0xb0) = eax
1002ab29  *(arg1 + 0xb4) = ecx_4
1002ab30  return arg1

1002ab56                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1002ab60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002ab80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002ab90    int32_t sub_1002ab90(void* arg1)

1002ab9a  return *(arg1 + 0xac)

1002ab9b                                                                                   90 90 90 90 90                             .....
1002aba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002abb0    int32_t sub_1002abb0(void* arg1)

1002abba  return *(arg1 + 0xb4)

1002abbb                                                                                   90 90 90 90 90                             .....
1002abc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002abd0    int32_t sub_1002abd0(char arg1) __pure

1002ac16  if ((arg1 s< 0x61 || arg1 s> 0x7a) && (arg1 s< 0x41 || arg1 s> 0x5a)
1002ac16          && (arg1 s< 0x30 || arg1 s> 0x39) && arg1 != 0x28 && arg1 != 0x29 && arg1 != 0x3f
1002ac16          && arg1 != 0x27 && arg1 != 0x3a && arg1 != 0x5b && arg1 != 0x5d && arg1 != 0x2d
1002ac16          && arg1 != 0x5f && arg1 != 0x2b && arg1 != 0x3d)
1002ac1d      return 1
1002ac1d  
1002ac20  return 0

1002ac21     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1002ac40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002ac50    void sub_1002ac50(char* arg1)

1002ac57  char* ebx = arg1
1002ac59  char* esi = arg1
1002ac59  
1002ac5f  if (*arg1 != 0)
1002acc9      char* eax
1002acc9      
1002acc9      do
1002ac62          eax.b = *esi
1002ac62          
1002ac66          while (eax.b != 0)
1002ac73              if (j_sub_1002abd0(eax.b) == 0)
1002ac73                  break
1002ac73              
1002ac75              eax.b = esi[1]
1002ac78              esi = &esi[1]
1002ac78          
1002ac7f          if (esi u> ebx)
1002ac88              if (ebx u> arg1 && *esi != 0)
1002ac8a                  *ebx = 0x20
1002ac8d                  ebx = &ebx[1]
1002ac8d              
1002ac90              if (esi u> ebx)
1002ac92                  char* edi_1 = esi
1002ac94                  int32_t i = 0xffffffff
1002ac94                  
1002ac99                  while (i != 0)
1002ac99                      bool cond:0_1 = 0 != *edi_1
1002ac99                      edi_1 = &edi_1[1]
1002ac99                      i -= 1
1002ac99                      
1002ac99                      if (not(cond:0_1))
1002ac99                          break
1002ac99                  
1002aca0                  sub_100452f0(ebx, esi, not.d(i))
1002aca0          
1002aca8          eax.b = *esi
1002aca8          
1002acac          while (eax.b != 0)
1002acb9              if (j_sub_1002abd0(eax.b) != 0)
1002acb9                  break
1002acb9              
1002acbb              eax.b = esi[1]
1002acbe              esi = &esi[1]
1002acbe          
1002acc3          eax.b = *esi
1002acc5          ebx = esi
1002acc9      while (eax.b != 0)

1002acd0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
1002ace0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002acf0    int32_t sub_1002acf0(int32_t arg1, char* arg2, uint32_t arg3)

1002acf7  int32_t edi = arg1
1002acfb  int32_t i = 0xffffffff
1002ad00  char* ebx = arg2
1002ad00  
1002ad04  while (i != 0)
1002ad04      bool cond:0_1 = 0 != *edi
1002ad04      edi += 1
1002ad04      i -= 1
1002ad04      
1002ad04      if (not(cond:0_1))
1002ad04          break
1002ad04  
1002ad09  char* edi_1 = ebx
1002ad0d  int32_t i_1 = 0xffffffff
1002ad0d  
1002ad10  while (i_1 != 0)
1002ad10      bool cond:1_1 = 0 != *edi_1
1002ad10      edi_1 = &edi_1[1]
1002ad10      i_1 -= 1
1002ad10      
1002ad10      if (not(cond:1_1))
1002ad10          break
1002ad10  
1002ad15  int32_t var_8 = 0
1002ad15  
1002ad1f  if (not.d(i) - 1 - (not.d(i_1) - 1) s>= 0)
1002ad99      bool cond:3_1
1002ad99      
1002ad99      do
1002ad21          int32_t eax
1002ad21          eax.b = *ebx
1002ad23          arg2 = nullptr
1002ad23          
1002ad2d          if (eax.b != 0)
1002ad33              char* esi_1 = ebx
1002ad35              void* edi_3 = arg1 - ebx
1002ad75              uint32_t eax_1
1002ad75              
1002ad75              do
1002ad3d                  int32_t ecx_3
1002ad3d                  
1002ad3d                  if (arg3 == 0)
1002ad4f                      uint32_t eax_2 = sub_100451b1(sx.d(*(edi_3 + esi_1)))
1002ad5a                      eax_1, ecx_3 = sub_100451b1(sx.d(*esi_1))
1002ad5a                      
1002ad64                      if (eax_2 != eax_1)
1002ad64                          break
1002ad3d                  else
1002ad3f                      eax_1.b = *(edi_3 + esi_1)
1002ad42                      ecx_3.b = *esi_1
1002ad42                      
1002ad46                      if (eax_1.b != ecx_3.b)
1002ad46                          break
1002ad6a                  eax_1.b = esi_1[1]
1002ad6e                  esi_1 = &esi_1[1]
1002ad71                  arg2 = &arg2[1]
1002ad75              while (eax_1.b != 0)
1002ad75          
1002ad7f          if (*(arg2 + ebx) == 0)
1002adb0              return arg1
1002adb0          
1002ad8f          cond:3_1 = var_8 + 1 s<= not.d(i) - 1 - (not.d(i_1) - 1)
1002ad91          var_8 += 1
1002ad95          arg1 += 1
1002ad99      while (cond:3_1)
1002ad99  
1002ada4  return 0

1002adb1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1002adc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002ade0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002ae00    char* sub_1002ae00(char* arg1, char* arg2, uint32_t arg3)

1002ae04  char* result = arg1
1002ae0b  char* result_1 = result
1002ae0d  int32_t i = 0xffffffff
1002ae10  int32_t i_2 = 0
1002ae10  
1002ae12  while (i != 0)
1002ae12      bool cond:0_1 = 0 != *result_1
1002ae12      result_1 = &result_1[1]
1002ae12      i -= 1
1002ae12      
1002ae12      if (not(cond:0_1))
1002ae12          break
1002ae12  
1002ae14  char* edx = arg2
1002ae18  int32_t i_3 = 0
1002ae1f  char* edi = edx
1002ae23  int32_t i_1 = 0xffffffff
1002ae23  
1002ae26  while (i_1 != 0)
1002ae26      bool cond:1_1 = 0 != *edi
1002ae26      edi = &edi[1]
1002ae26      i_1 -= 1
1002ae26      
1002ae26      if (not(cond:1_1))
1002ae26          break
1002ae26  
1002ae31  if (not.d(i) - 1 - (not.d(i_1) - 1) s>= 0)
1002aed4      do
1002ae39          if (i_2 != 0)
1002ae3b              i_2.b = *result
1002ae3b              
1002ae3f              if (i_2.b != 0)
1002ae43                  while (i_2.b != 0x20)
1002ae45                      i_2.b = result[1]
1002ae48                      result = &result[1]
1002ae48                      
1002ae4b                      if (i_2.b == 0)
1002ae4b                          break
1002ae4b              
1002ae50              if (*result == 0)
1002ae50                  break
1002ae50              
1002ae56              result = &result[1]
1002ae56          
1002ae57          i_2.b = *edx
1002ae59          arg1 = nullptr
1002ae59          
1002ae63          if (i_2.b != 0)
1002ae67              char* esi_2 = edx
1002ae69              void* edi_2 = result - edx
1002aead              uint32_t eax
1002aead              
1002aead              do
1002ae71                  int32_t ecx_3
1002ae71                  
1002ae71                  if (arg3 == 0)
1002ae83                      uint32_t eax_1 = sub_100451b1(sx.d(*(edi_2 + esi_2)))
1002ae8e                      eax, ecx_3 = sub_100451b1(sx.d(*esi_2))
1002ae93                      edx = arg2
1002ae93                      
1002ae9c                      if (eax_1 != eax)
1002ae9c                          break
1002ae71                  else
1002ae73                      eax.b = *(edi_2 + esi_2)
1002ae76                      ecx_3.b = *esi_2
1002ae76                      
1002ae7a                      if (eax.b != ecx_3.b)
1002ae7a                          break
1002aea2                  eax.b = esi_2[1]
1002aea6                  esi_2 = &esi_2[1]
1002aea9                  arg1 = &arg1[1]
1002aead              while (eax.b != 0)
1002aead          
1002aeb7          if (*(arg1 + edx) == 0)
1002aeb9              char* eax_2
1002aeb9              eax_2.b = *(arg1 + result)
1002aeb9              
1002aec2              if (eax_2.b == 0 || eax_2.b == 0x20)
1002aeed                  return result
1002aeed          
1002aecc          i_2 = i_3 + 1
1002aecd          result = &result[1]
1002aed0          i_3 = i_2
1002aed4      while (i_2 s<= not.d(i) - 1 - (not.d(i_1) - 1))
1002aed4  
1002aee3  return 0

1002aeee                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1002af00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002af20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002af30    char* sub_1002af30(char* arg1, char* arg2, char* arg3)

1002af36  char* esi = arg2
1002af3e  char* result = j_sub_1002ae00(arg1, esi, 0)
1002af3e  
1002af4a  for (char* i = result; i != 0; i = result)
1002af63      char* edx_1 = j_sub_1002ae00(arg1, arg3, 0)
1002af63      
1002af6a      if (edx_1 == 0)
1002af9b          label_1002af9b:
1002af9b          char* edi_2 = esi
1002af9d          int32_t j = 0xffffffff
1002af9d          
1002afa2          while (j != 0)
1002afa2              bool cond:0_1 = 0 != *edi_2
1002afa2              edi_2 = &edi_2[1]
1002afa2              j -= 1
1002afa2              
1002afa2              if (not(cond:0_1))
1002afa2                  break
1002afa2          
1002afa9          int32_t j_1 = 0xffffffff
1002afac          void* edi_4 = not.d(j) - 1 + i
1002afac          
1002afae          while (j_1 != 0)
1002afae              bool cond:1_1 = 0 != *edi_4
1002afae              edi_4 += 1
1002afae              j_1 -= 1
1002afae              
1002afae              if (not(cond:1_1))
1002afae                  break
1002afae          
1002afb3          char* edi_5 = esi
1002afb6          int32_t j_2 = 0xffffffff
1002afb6          
1002afb9          while (j_2 != 0)
1002afb9              bool cond:2_1 = 0 != *edi_5
1002afb9              edi_5 = &edi_5[1]
1002afb9              j_2 -= 1
1002afb9              
1002afb9              if (not(cond:2_1))
1002afb9                  break
1002afb9          
1002afbe          char* edi_6 = arg3
1002afc3          int32_t j_3 = 0xffffffff
1002afc3          
1002afc6          while (j_3 != 0)
1002afc6              bool cond:3_1 = 0 != *edi_6
1002afc6              edi_6 = &edi_6[1]
1002afc6              j_3 -= 1
1002afc6              
1002afc6              if (not(cond:3_1))
1002afc6                  break
1002afc6          
1002afce          sub_100452f0(not.d(j_3) - 1 + i, not.d(j_2) - 1 + i, not.d(j_1) - 1)
1002afd3          char* edi_7 = arg3
1002afd5          int32_t j_4 = 0xffffffff
1002afd5          
1002afdd          while (j_4 != 0)
1002afdd              bool cond:4_1 = 0 != *edi_7
1002afdd              edi_7 = &edi_7[1]
1002afdd              j_4 -= 1
1002afdd              
1002afdd              if (not(cond:4_1))
1002afdd                  break
1002afdd          
1002afeb          int32_t esi_2
1002afeb          int32_t edi_9
1002afeb          edi_9, esi_2 =
1002afeb              __builtin_memcpy(dest: i, src: arg3, n: (not.d(j_4) - 1) u>> 2 << 2)
1002aff2          __builtin_memcpy(dest: edi_9, src: esi_2, n: (not.d(j_4) - 1) & 3)
1002aff4          esi = arg2
1002af6a      else
1002af6e          while (true)
1002af6e              if (edx_1 u<= i)
1002af70                  char* edi_1 = arg3
1002af72                  int32_t j_5 = 0xffffffff
1002af72                  
1002af77                  while (j_5 != 0)
1002af77                      bool cond:5_1 = 0 != *edi_1
1002af77                      edi_1 = &edi_1[1]
1002af77                      j_5 -= 1
1002af77                      
1002af77                      if (not(cond:5_1))
1002af77                          break
1002af77                  
1002af80                  if (i u< not.d(j_5) - 1 + edx_1)
1002af80                      break
1002af80              
1002af8c              edx_1 = j_sub_1002ae00(&edx_1[1], arg3, 0)
1002af8c              
1002af93              if (edx_1 == 0)
1002af93                  goto label_1002af9b
1002af93          
1002af99          if (edx_1 == 0)
1002af99              goto label_1002af9b
1002af99      
1002aff8      char* edi_10 = arg3
1002affa      int32_t j_6 = 0xffffffff
1002affa      
1002b001      while (j_6 != 0)
1002b001          bool cond:6_1 = 0 != *edi_10
1002b001          edi_10 = &edi_10[1]
1002b001          j_6 -= 1
1002b001          
1002b001          if (not(cond:6_1))
1002b001              break
1002b001      
1002b00a      result = j_sub_1002ae00(not.d(j_6) - 1 + i, esi, 0)
1002b00a  
1002b020  return result

1002b021     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1002b040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002b070    int32_t* sub_1002b070(int32_t* arg1)

1002b072  int32_t* result = j_sub_10038ec0()
1002b077  int32_t* result_1 = result
1002b077  
1002b07b  if (result_1 != 0)
1002b083      for (int32_t* i = arg1; i != 0; i = i[3])
1002b088          int32_t var_10_1 = *i
1002b089          char* var_14_1 = "%d : ["
1002b08f          sub_10045898(result_1, "%d : [")
1002b08f          
1002b09c          for (int32_t* j = i[2]; j != 0; j = j[2])
1002b0a6              var_14_1.q = fconvert.d(fconvert.t(j[1]))
1002b0a9              int32_t var_18_2 = *j
1002b0b0              sub_10045898(result_1, "("%s", %1.2f)")
1002b0b0              
1002b0bd              if (j[2] != 0)
1002b0c5                  sub_10045898(result_1, &data_1005d280)
1002b0c5          
1002b0da          result = sub_10045898(result_1, &data_1005d27c)
1002b0da  
1002b0ec  return result

1002b0ed                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
1002b100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002b110    int32_t* sub_1002b110(char* arg1)

1002b131  void* var_548
1002b131  
1002b131  if (j_sub_10041f60(arg1, &var_548) == 0)
1002b13b      data_10063fe8(3, "couldn't find %s\n", arg1)
1002b150      return 0
1002b150  
1002b151  int32_t* result_5
1002b151  int32_t* result_4 = result_5
1002b155  int32_t edi = 0
1002b157  int32_t ebp = 0
1002b159  int32_t var_56c = 0
1002b15d  int32_t var_560 = 0
1002b167  int32_t* result
1002b167  void* var_544
1002b167  char var_540[0x90]
1002b167  
1002b167  while (true)
1002b167      if (ebp != 0 && edi != 0)
1002b172          result_4 = j_sub_10039000(edi)
1002b172      
1002b188      char* esi_1 = j_sub_1003de60(&var_540, var_548, var_544)
1002b191      char* var_574_1 = esi_1
1002b191      
1002b195      if (esi_1 == 0)
1002b52a          data_10063fe8(3, "counldn't load %s\n", &var_540)
1002b53f          return 0
1002b53f      
1002b1a2      int32_t var_570_1 = 0
1002b1a8      int32_t var_568_1 = 0
1002b1ac      result = nullptr
1002b1b0      int32_t* result_2 = nullptr
1002b1be      char var_4b0[0x400]
1002b1be      
1002b1be      if (j_sub_1003d580(esi_1, &var_4b0) != 0)
1002b1cb          void var_80
1002b1cb          void* var_564_1 = &var_80
1002b1cb          
1002b1d9          while (true)
1002b1d9              int32_t var_b0
1002b1d9              
1002b1d9              if (var_b0 == 3)
1002b1ec                  int32_t var_a8
1002b1ec                  *var_564_1 = var_a8
1002b1f6                  var_570_1 |= var_a8
1002b1fa                  bool cond:2_1 = var_568_1 + 1 s>= 0x20
1002b1fd                  var_568_1 += 1
1002b201                  var_564_1 += 4
1002b201                  
1002b205                  if (cond:2_1)
1002b546                      j_sub_10039200(esi_1, "more than 32 context levels")
1002b54c                      j_sub_1003e000(esi_1)
1002b560                      return 0
1002b560                  
1002b21b                  if (j_sub_1003d650(esi_1, U"{") == 0)
1002b562                      label_1002b562:
1002b562                      j_sub_1003e000(esi_1)
1002b576                      return 0
1002b1d9              else if (var_b0 == 5)
1002b22f                  void* esi_2 = &data_1005ab54
1002b234                  char (* eax_10)[0x400] = &var_4b0
1002b23b                  int32_t eax_12
1002b23b                  char edx_2
1002b23b                  
1002b23b                  while (true)
1002b23b                      edx_2 = *eax_10
1002b23f                      char temp0_1 = *esi_2
1002b23f                      bool c_1 = edx_2 u< temp0_1
1002b23f                      
1002b241                      if (edx_2 == temp0_1)
1002b245                          if (edx_2 == 0)
1002b25b                              eax_12 = 0
1002b25d                              break
1002b25d                          
1002b247                          edx_2 = (*eax_10)[1]
1002b24c                          char temp3_1 = *(esi_2 + 1)
1002b24c                          c_1 = edx_2 u< temp3_1
1002b24c                          
1002b24f                          if (edx_2 == temp3_1)
1002b251                              eax_10 = &(*eax_10)[2]
1002b254                              esi_2 += 2
1002b254                              
1002b259                              if (edx_2 != 0)
1002b259                                  continue
1002b259                              
1002b25b                              eax_12 = 0
1002b25d                              break
1002b25d                      
1002b25f                      bool c_2 = unimplemented  {sbb eax, eax}
1002b261                      eax_12 = sbb.d(sbb.d(eax_10, eax_10, c_1), 0xffffffff, c_2)
1002b261                      break
1002b261                  
1002b266                  if (eax_12 != 0)
1002b299                      void* esi_3 = &data_1005c65c
1002b29e                      void* eax_18 = &var_4b0
1002b2a5                      int32_t eax_20
1002b2a5                      
1002b2a5                      while (true)
1002b2a5                          edx_2 = *eax_18
1002b2a9                          char temp4_1 = *esi_3
1002b2a9                          bool c_3 = edx_2 u< temp4_1
1002b2a9                          
1002b2ab                          if (edx_2 == temp4_1)
1002b2af                              if (edx_2 == 0)
1002b2c5                                  eax_20 = 0
1002b2c7                                  break
1002b2c7                              
1002b2b1                              edx_2 = *(eax_18 + 1)
1002b2b6                              char temp7_1 = *(esi_3 + 1)
1002b2b6                              c_3 = edx_2 u< temp7_1
1002b2b6                              
1002b2b9                              if (edx_2 == temp7_1)
1002b2bb                                  eax_18 += 2
1002b2be                                  esi_3 += 2
1002b2be                                  
1002b2c3                                  if (edx_2 != 0)
1002b2c3                                      continue
1002b2c3                                  
1002b2c5                                  eax_20 = 0
1002b2c7                                  break
1002b2c7                          
1002b2c9                          bool c_4 = unimplemented  {sbb eax, eax}
1002b2cb                          eax_20 = sbb.d(sbb.d(eax_18, eax_18, c_3), 0xffffffff, c_4)
1002b2cb                          break
1002b2cb                      
1002b2ce                      int32_t* result_7 = nullptr
1002b2d2                      void* var_58c_13
1002b2d2                      
1002b2d2                      if (eax_20 != 0)
1002b5e6                          esi_1 = var_574_1
1002b5f1                          char (* var_588_15)[0x400] = &var_4b0
1002b5f2                          var_58c_13 = "unexpected %s"
1002b5f8                          label_1002b5f8:
1002b5f8                          j_sub_10039200(esi_1, var_58c_13)
1002b5fe                          j_sub_1003e000(esi_1)
1002b612                          return 0
1002b612                      
1002b2e5                      var_56c += 0x10
1002b2e9                      int32_t* result_3
1002b2e9                      
1002b2e9                      if (var_560 != 0)
1002b2ef                          int32_t* result_1 = result_4
1002b2f1                          result_4 = &result_4[4]
1002b2f4                          result_3 = result_1
1002b2f8                          *result_1 = var_570_1
1002b300                          result_1[2] = 0
1002b303                          result_1[3] = 0
1002b303                          
1002b306                          if (result_2 == 0)
1002b30d                              result = result_1
1002b306                          else
1002b308                              result_2[3] = result_1
1002b308                          
1002b311                          result_2 = result_1
1002b311                      
1002b315                      int32_t var_55c_1 = 0
1002b315                      
1002b319                      while (true)
1002b319                          esi_1 = var_574_1
1002b319                          
1002b32d                          if (j_sub_1003d650(esi_1, U"(") == 0)
1002b32d                              goto label_1002b562
1002b32d                          
1002b34a                          if (j_sub_1003d740(esi_1, 1, 0, &var_4b0) == 0)
1002b34a                              goto label_1002b562
1002b34a                          
1002b358                          j_sub_1003fcb0(&var_4b0)
1002b35d                          char (* edi_1)[0x400] = &var_4b0
1002b364                          int32_t i = 0xffffffff
1002b364                          
1002b36c                          while (i != 0)
1002b36c                              bool cond:6_1 = 0 != *edi_1
1002b36c                              edi_1 = &(*edi_1)[1]
1002b36c                              i -= 1
1002b36c                              
1002b36c                              if (not(cond:6_1))
1002b36c                                  break
1002b36c                          
1002b371                          if (not.d(i) == 1)
1002b5a3                              char (* var_588_13)[0x400] = &var_4b0
1002b5a4                              var_58c_13 = "empty string"
1002b5a9                              goto label_1002b5f8
1002b5a9                          
1002b377                          char (* edi_2)[0x400] = &var_4b0
1002b37e                          int32_t i_1 = 0xffffffff
1002b37e                          
1002b381                          while (i_1 != 0)
1002b381                              bool cond:7_1 = 0 != *edi_2
1002b381                              edi_2 = &(*edi_2)[1]
1002b381                              i_1 -= 1
1002b381                              
1002b381                              if (not(cond:7_1))
1002b381                                  break
1002b381                          
1002b38e                          var_56c = var_56c + not.d(i_1) - 1 + 0xd
1002b38e                          
1002b398                          if (var_560 != 0)
1002b39a                              int32_t* result_6 = result_4
1002b39f                              char (* edi_3)[0x400] = &var_4b0
1002b3a6                              int32_t i_2 = 0xffffffff
1002b3ab                              *result_6 = &result_4[3]
1002b3ab                              
1002b3ad                              while (i_2 != 0)
1002b3ad                                  bool cond:8_1 = 0 != *edi_3
1002b3ad                                  edi_3 = &(*edi_3)[1]
1002b3ad                                  i_2 -= 1
1002b3ad                                  
1002b3ad                                  if (not(cond:8_1))
1002b3ad                                      break
1002b3ad                              
1002b3b2                              char (* edi_4)[0x400] = &var_4b0
1002b3b9                              result_5 = result_6
1002b3bd                              result_4 = &result_4[3] + not.d(i_2) - 1 + 1
1002b3c1                              int32_t i_3 = 0xffffffff
1002b3c1                              
1002b3c4                              while (i_3 != 0)
1002b3c4                                  bool cond:9_1 = 0 != *edi_4
1002b3c4                                  edi_4 = &(*edi_4)[1]
1002b3c4                                  i_3 -= 1
1002b3c4                                  
1002b3c4                                  if (not(cond:9_1))
1002b3c4                                      break
1002b3c4                              
1002b3c6                              int32_t ecx_16 = not.d(i_3)
1002b3d3                              int32_t esi_5
1002b3d3                              int32_t edi_7
1002b3d3                              edi_7, esi_5 = __builtin_memcpy(dest: *result_6, 
1002b3d3                                  src: edi_4 - ecx_16, n: ecx_16 u>> 2 << 2)
1002b3dc                              __builtin_memcpy(dest: edi_7, src: esi_5, n: ecx_16 & 3)
1002b3dc                              
1002b3de                              if (result_7 == 0)
1002b3e9                                  result_3[2] = result_6
1002b3de                              else
1002b3e0                                  result_7[2] = result_6
1002b3e0                              
1002b3ec                              esi_1 = var_574_1
1002b3f0                              result_7 = result_6
1002b3f0                          
1002b3fd                          var_55c_1 += 1
1002b3fd                          
1002b40b                          if (j_sub_1003d650(esi_1, U",(") != 0
1002b40b                                  && j_sub_1003d740(esi_1, 3, 0, &var_4b0) != 0
1002b40b                                  && j_sub_1003d650(esi_1, U"),(") != 0)
1002b44a                              if (var_560 != 0)
1002b44c                                  double var_a0
1002b44c                                  long double x87_r7_1 = fconvert.t(var_a0)
1002b459                                  result_5[1] = fconvert.s(x87_r7_1)
1002b463                                  result_3[1] =
1002b463                                      fconvert.s(x87_r7_1 + fconvert.t(result_3[1]))
1002b463                              
1002b476                              if (j_sub_1003db20(esi_1, U"][ ") != 0)
1002b498                                  if (var_55c_1 s>= 2)
1002b498                                      break
1002b498                                  
1002b5cb                                  j_sub_10039200(var_574_1, 
1002b5cb                                      "synonym must have at least to en…")
1002b5d1                                  j_sub_1003e000(var_574_1)
1002b5e5                                  return 0
1002b5e5                              
1002b488                              if (j_sub_1003d650(esi_1, U",(") != 0)
1002b488                                  continue
1002b488                          
1002b5ac                          j_sub_1003e000(esi_1)
1002b5c0                          return 0
1002b266                  else
1002b271                      void* edx_4 = var_564_1 - 4
1002b274                      bool cond:3_1 = var_568_1 - 1 s< 0
1002b276                      var_568_1 -= 1
1002b27a                      var_564_1 = edx_4
1002b27a                      
1002b27e                      if (cond:3_1)
1002b581                          j_sub_10039200(var_574_1, "too many }")
1002b587                          j_sub_1003e000(var_574_1)
1002b59b                          return 0
1002b59b                      
1002b290                      var_570_1 &= not.d(*edx_4)
1002b290                  
1002b49e                  esi_1 = var_574_1
1002b49e              
1002b4b5              if (j_sub_1003d580(esi_1, &var_4b0) == 0)
1002b4bb                  ebp = var_560
1002b4bf                  edi = var_56c
1002b4bf                  break
1002b4bf      
1002b4c4      j_sub_1003e000(esi_1)
1002b4c4      
1002b4d2      if (var_568_1 s> 0)
1002b619          j_sub_10039200(esi_1, "missing }")
1002b62d          return 0
1002b62d      
1002b4d8      ebp += 1
1002b4dc      var_560 = ebp
1002b4dc      
1002b4e0      if (ebp s>= 2)
1002b4e0          break
1002b4e0  
1002b4ec  if (var_544 == 0)
1002b63d      data_10063fe8(1, "loaded %s\n", arg1)
1002b654      return result
1002b654  
1002b506  data_10063fe8(1, "loaded %s\%s\n", &var_540, arg1)
1002b51d  return result

1002b655                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
1002b660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b6a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b6c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b6e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002b7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002b7c0    void sub_1002b7c0(char* arg1, int32_t arg2)

1002b7c9  for (int32_t* i = data_10064384; i != 0; i = i[3])
1002b7d8      if ((*i & arg2) != 0)
1002b7e2          for (int32_t* j = *(i[2] + 8); j != 0; j = j[2])
1002b7ee              j_sub_1002af30(arg1, *j, *i[2])

1002b809                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1002b820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002b830    void sub_1002b830(int32_t arg1, int32_t arg2)

1002b831  int32_t* i = data_10064384
1002b831  
1002b839  if (i != 0)
1002b840      char* ebp_1 = arg1
1002b840      
1002b8ba      do
1002b84e          if ((arg2 & *i) != 0)
1002b855              int32_t eax_3 = sub_10045187() & 0x7fff
1002b85a              int32_t* j_1 = i[2]
1002b861              int32_t* j = j_1
1002b872              arg1 = fconvert.s(float.t(eax_3) * fconvert.t(3.05185094e-05f)
1002b872                  * fconvert.t(i[1]))
1002b876              long double x87_r7_4 = fconvert.t(0f)
1002b876              
1002b87c              for (; j != 0; j = j[2])
1002b87e                  x87_r7_4 = x87_r7_4 + fconvert.t(j[1])
1002b881                  long double x87_r6_1 = fconvert.t(arg1)
1002b885                  x87_r6_1 - x87_r7_4
1002b887                  eax_3.w = (x87_r6_1 < x87_r7_4 ? 1 : 0) << 8
1002b887                      | (is_unordered.t(x87_r6_1, x87_r7_4) ? 1 : 0) << 0xa
1002b887                      | (x87_r6_1 == x87_r7_4 ? 1 : 0) << 0xe | 0x3800
1002b887                  
1002b88c                  if ((eax_3:1.b & 1) != 0)
1002b88c                      break
1002b88c              
1002b899              for (; j_1 != 0; j_1 = j_1[2])
1002b89d                  if (j_1 != j)
1002b8a6                      j_sub_1002af30(ebp_1, *j_1, *j)
1002b8a6          
1002b8b5          i = i[3]
1002b8ba      while (i != 0)

1002b8c1     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1002b8e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002b900    int32_t* sub_1002b900(int32_t* arg1)

1002b902  int32_t* result = j_sub_10038ec0()
1002b907  int32_t* result_1 = result
1002b907  
1002b90b  if (result_1 != 0)
1002b913      for (int32_t* i = arg1; i != 0; i = i[3])
1002b918          int32_t var_10_1 = *i
1002b91f          result = sub_10045898(result_1, "%s = {")
1002b91f          
1002b92c          for (int32_t* j = i[2]; j != 0; j = j[1])
1002b930              int32_t var_10_2 = *j
1002b937              sub_10045898(result_1, ""%s"")
1002b944              void* var_10_3
1002b944              
1002b944              if (j[1] == 0)
1002b94d                  var_10_3 = &data_1005d338
1002b944              else
1002b946                  var_10_3 = &data_1005d280
1002b946              
1002b953              result = sub_10045898(result_1, var_10_3)
1002b953  
1002b96c  return result

1002b96d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
1002b980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002b990    int32_t* sub_1002b990(char* arg1)

1002b9b1  void* var_4c8
1002b9b1  
1002b9b1  if (j_sub_10041f60(arg1, &var_4c8) == 0)
1002b9bb      data_10063fe8(3, "couldn't find %s\n", arg1)
1002b9d0      return 0
1002b9d0  
1002b9d1  int32_t* result_2
1002b9d1  int32_t* result_4 = result_2
1002b9d5  int32_t* result_1 = result_2
1002b9d9  int32_t eax_2 = 0
1002b9db  int32_t edi = 0
1002b9dd  int32_t var_4dc = 0
1002b9e1  int32_t var_4d8 = 0
1002b9f1  int32_t* result
1002b9f1  void* var_4c4
1002b9f1  char var_4c0[0x90]
1002b9f1  
1002b9f1  while (true)
1002b9f1      if (edi != 0 && eax_2 != 0)
1002b9fc          result_4 = j_sub_10039000(eax_2)
1002b9fc      
1002ba12      char* esi_1 = j_sub_1003de60(&var_4c0, var_4c8, var_4c4)
1002ba1b      char* var_4d0_1 = esi_1
1002ba1b      
1002ba1f      if (esi_1 == 0)
1002bc67          data_10063fe8(3, "counldn't load %s\n", &var_4c0)
1002bc7c          return 0
1002bc7c      
1002ba2c      result = nullptr
1002ba32      int32_t* result_3 = nullptr
1002ba40      char var_430[0x400]
1002ba40      
1002ba40      if (j_sub_1003d580(esi_1, &var_430) != 0)
1002bc02          int32_t i
1002bc02          
1002bc02          do
1002ba4e              int32_t var_30
1002ba4e              
1002ba4e              if (var_30 != 4)
1002bc84                  char (* var_4f0_12)[0x400] = &var_430
1002bc8b                  j_sub_10039200(esi_1, "unknown random %s")
1002bc91                  j_sub_1003e000(esi_1)
1002bca5                  return 0
1002bca5              
1002ba54              char (* edi_1)[0x400] = &var_430
1002ba5b              int32_t j = 0xffffffff
1002ba5b              
1002ba64              while (j != 0)
1002ba64                  bool cond:2_1 = 0 != *edi_1
1002ba64                  edi_1 = &(*edi_1)[1]
1002ba64                  j -= 1
1002ba64                  
1002ba64                  if (not(cond:2_1))
1002ba64                      break
1002ba64              
1002ba6d              var_4dc = var_4dc + not.d(j) - 1 + 0x11
1002ba6d              
1002ba77              if (var_4d8 != 0)
1002ba79                  result_1 = result_4
1002ba7e                  char (* edi_2)[0x400] = &var_430
1002ba85                  int32_t j_1 = 0xffffffff
1002ba8a                  *result_1 = &result_4[4]
1002ba8a                  
1002ba8d                  while (j_1 != 0)
1002ba8d                      bool cond:3_1 = 0 != *edi_2
1002ba8d                      edi_2 = &(*edi_2)[1]
1002ba8d                      j_1 -= 1
1002ba8d                      
1002ba8d                      if (not(cond:3_1))
1002ba8d                          break
1002ba8d                  
1002ba92                  char (* edi_3)[0x400] = &var_430
1002ba99                  result_4 = &result_4[4] + not.d(j_1) - 1 + 1
1002ba9d                  int32_t j_2 = 0xffffffff
1002ba9d                  
1002baa0                  while (j_2 != 0)
1002baa0                      bool cond:4_1 = 0 != *edi_3
1002baa0                      edi_3 = &(*edi_3)[1]
1002baa0                      j_2 -= 1
1002baa0                      
1002baa0                      if (not(cond:4_1))
1002baa0                          break
1002baa0                  
1002baa2                  int32_t ecx_6 = not.d(j_2)
1002bab4                  int32_t esi_3
1002bab4                  int32_t edi_6
1002bab4                  edi_6, esi_3 = __builtin_memcpy(dest: *result_1, src: edi_3 - ecx_6, 
1002bab4                      n: ecx_6 u>> 2 << 2)
1002babb                  __builtin_memcpy(dest: edi_6, src: esi_3, n: ecx_6 & 3)
1002bac1                  result_1[2] = 0
1002bac4                  result_1[1] = 0
1002bac4                  
1002bac7                  if (result_3 == 0)
1002bace                      result = result_1
1002bac7                  else
1002bac9                      result_3[3] = result_1
1002bac9                  
1002bad2                  esi_1 = var_4d0_1
1002bad6                  result_3 = result_1
1002bad6              
1002bae0              int32_t eax_9 = j_sub_1003d650(esi_1, U"=")
1002baea              int32_t eax_10
1002baea              
1002baea              if (eax_9 != 0)
1002baf6                  eax_10 = j_sub_1003d650(esi_1, U"{")
1002baf6              
1002bb00              if (eax_9 == 0 || eax_10 == 0)
1002bca7                  label_1002bca7:
1002bca7                  j_sub_1003e000(esi_1)
1002bcbb                  return 0
1002bcbb              
1002bb1d              if (j_sub_1003d740(esi_1, 1, 0, &var_430) != 0)
1002bbe9                  int32_t j_3
1002bbe9                  
1002bbe9                  do
1002bb2b                      j_sub_1003fcb0(&var_430)
1002bb30                      char (* edi_7)[0x400] = &var_430
1002bb37                      int32_t k = 0xffffffff
1002bb37                      
1002bb3f                      while (k != 0)
1002bb3f                          bool cond:6_1 = 0 != *edi_7
1002bb3f                          edi_7 = &(*edi_7)[1]
1002bb3f                          k -= 1
1002bb3f                          
1002bb3f                          if (not(cond:6_1))
1002bb3f                              break
1002bb3f                      
1002bb4c                      var_4dc = var_4dc + not.d(k) - 1 + 9
1002bb4c                      
1002bb56                      if (var_4d8 != 0)
1002bb58                          int32_t* result_5 = result_4
1002bb5d                          char (* edi_8)[0x400] = &var_430
1002bb64                          int32_t k_1 = 0xffffffff
1002bb69                          *result_5 = &result_4[2]
1002bb69                          
1002bb6b                          while (k_1 != 0)
1002bb6b                              bool cond:7_1 = 0 != *edi_8
1002bb6b                              edi_8 = &(*edi_8)[1]
1002bb6b                              k_1 -= 1
1002bb6b                              
1002bb6b                              if (not(cond:7_1))
1002bb6b                                  break
1002bb6b                          
1002bb70                          char (* edi_9)[0x400] = &var_430
1002bb77                          result_4 = &result_4[2] + not.d(k_1) - 1 + 1
1002bb7b                          int32_t k_2 = 0xffffffff
1002bb7b                          
1002bb7e                          while (k_2 != 0)
1002bb7e                              bool cond:8_1 = 0 != *edi_9
1002bb7e                              edi_9 = &(*edi_9)[1]
1002bb7e                              k_2 -= 1
1002bb7e                              
1002bb7e                              if (not(cond:8_1))
1002bb7e                                  break
1002bb7e                          
1002bb80                          int32_t ecx_14 = not.d(k_2)
1002bb8d                          int32_t esi_5
1002bb8d                          int32_t edi_12
1002bb8d                          edi_12, esi_5 = __builtin_memcpy(dest: *result_5, 
1002bb8d                              src: edi_9 - ecx_14, n: ecx_14 u>> 2 << 2)
1002bb94                          __builtin_memcpy(dest: edi_12, src: esi_5, n: ecx_14 & 3)
1002bb99                          int32_t ecx_18 = result_1[2]
1002bb9c                          esi_1 = var_4d0_1
1002bba1                          result_1[1] += 1
1002bba4                          result_5[1] = ecx_18
1002bba7                          result_1[2] = result_5
1002bba7                      
1002bbba                      if (j_sub_1003db20(esi_1, U"}{") != 0)
1002bbba                          break
1002bbba                      
1002bbcc                      if (j_sub_1003d650(esi_1, U",(") == 0)
1002bbcc                          goto label_1002bca7
1002bbcc                      
1002bbdf                      j_3 = j_sub_1003d740(esi_1, 1, 0, &var_430)
1002bbe9                  while (j_3 != 0)
1002bbe9              
1002bbf8              i = j_sub_1003d580(esi_1, &var_430)
1002bc02          while (i != 0)
1002bc08          edi = var_4d8
1002bc08      
1002bc0d      j_sub_1003e000(esi_1)
1002bc15      edi += 1
1002bc19      var_4d8 = edi
1002bc19      
1002bc1d      if (edi s>= 2)
1002bc1d          break
1002bc1d      
1002b9e7      eax_2 = var_4dc
1002b9e7  
1002bc29  if (var_4c4 == 0)
1002bccb      data_10063fe8(1, "loaded %s\n", arg1)
1002bce2      return result
1002bce2  
1002bc43  data_10063fe8(1, "loaded %s\%s\n", &var_4c0, arg1)
1002bc5a  return result

1002bce3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
1002bd00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002bd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002bd40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002bd60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002bd80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002bda0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002bdc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002bdd0    int32_t sub_1002bdd0(int32_t arg1)

1002bdd0  int32_t ebx
1002bdd0  int32_t var_4 = ebx
1002bdd4  int32_t* edi = data_1006437c
1002bdd4  
1002bddc  if (edi != 0)
1002bde2      while (true)
1002bde2          char* eax_1 = *edi
1002bde4          char* esi_1 = arg1
1002bde6          int32_t eax_3
1002bde6          int32_t* i
1002bde6          
1002bde6          while (true)
1002bde6              char edx = *eax_1
1002bde8              ebx.b = *esi_1
1002bdea              i.b = edx
1002bdec              bool c_1 = edx u< ebx.b
1002bdec              
1002bdee              if (edx == ebx.b)
1002bdf2                  if (i.b == 0)
1002be0a                      eax_3 = 0
1002be0c                      break
1002be0c                  
1002bdf4                  edx = eax_1[1]
1002bdf7                  ebx.b = esi_1[1]
1002bdfa                  i.b = edx
1002bdfc                  c_1 = edx u< ebx.b
1002bdfc                  
1002bdfe                  if (edx == ebx.b)
1002be00                      eax_1 = &eax_1[2]
1002be03                      esi_1 = &esi_1[2]
1002be03                      
1002be08                      if (i.b != 0)
1002be08                          continue
1002be08                      
1002be0a                      eax_3 = 0
1002be0c                      break
1002be0c              
1002be0e              bool c_2 = unimplemented  {sbb eax, eax}
1002be10              eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1002be10              break
1002be10          
1002be15          if (eax_3 == 0)
1002be32              int32_t eax_6
1002be32              int16_t x87control
1002be32              eax_6, x87control = __ftol(x87control, 
1002be32                  float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1002be32                      * float.t(edi[1]))
1002be32              
1002be3c              for (i = edi[2]; i != 0; i = i[1])
1002be3e                  int32_t temp2_1 = eax_6
1002be3e                  eax_6 -= 1
1002be3e                  
1002be3f                  if (temp2_1 - 1 s< 0)
1002be4c                      if (i != 0)
1002be62                          return *i
1002be62                      
1002be4c                      break
1002be4c          
1002be4e          edi = edi[3]
1002be4e          
1002be53          if (edi == 0)
1002be53              break
1002be53  
1002be5b  return 0

1002be63           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
1002be80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002bea0    int32_t* sub_1002bea0(int32_t* arg1)

1002bea2  int32_t* result = j_sub_10038ec0()
1002bea7  int32_t* result_1 = result
1002bea7  
1002beab  if (result_1 != 0)
1002beb1      result = arg1
1002beb7      int32_t* i = result
1002beb7      
1002beb9      if (result != 0)
1002bf61          do
1002bec7              sub_10045898(result_1, "%8d { ")
1002bec7              
1002bed4              for (int32_t* j = i[3]; j != 0; j = j[3])
1002bed6                  int32_t eax = *j
1002bed6                  
1002bedb                  if (eax == 2)
1002bee2                      for (int32_t* k = j[1]; k != 0; k = k[1])
1002bee6                          int32_t var_14_1 = *k
1002beed                          sub_10045898(result_1, ""%s"")
1002beed                          
1002befa                          if (k[1] != 0)
1002bf02                              sub_10045898(result_1, &data_1005d380)
1002bedb                  else if (eax == 1)
1002bf1b                      int32_t var_14_2 = j[2]
1002bf22                      sub_10045898(result_1, &data_1005d37c)
1002bf22                  
1002bf2f                  if (j[3] != 0)
1002bf37                      sub_10045898(result_1, &data_1005d280)
1002bf37              
1002bf4c              int32_t var_14_3 = i[2]
1002bf4d              int32_t var_18_4 = i[1]
1002bf54              result = sub_10045898(result_1, " = (%d, %d);}\n")
1002bf59              i = i[4]
1002bf61          while (i != 0)
1002bf61  
1002bf6b  return result

1002bf6c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
1002bf80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002bfa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002bfb0    void sub_1002bfb0(int32_t* arg1)

1002bfb1  int32_t* i_1 = arg1
1002bfb1  
1002bfb7  if (i_1 != 0)
1002bfeb      int32_t* i
1002bfeb      
1002bfeb      do
1002bfbd          i = i_1[3]
1002bfbd          
1002bfc3          if (*i_1 == 2)
1002bfc5              void* j_1 = i_1[1]
1002bfc5              
1002bfca              if (j_1 != 0)
1002bfdc                  void* j
1002bfdc                  
1002bfdc                  do
1002bfcc                      j = *(j_1 + 4)
1002bfd0                      j_sub_100390b0(j_1)
1002bfd8                      j_1 = j
1002bfdc                  while (j != 0)
1002bfdc          
1002bfdf          j_sub_100390b0(i_1)
1002bfe7          i_1 = i
1002bfeb      while (i != 0)

1002bff1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1002c000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002c020    int32_t* sub_1002c020(void* arg1, char* arg2)

1002c02a  void* edi = arg1
1002c039  int32_t* result = nullptr
1002c03d  int32_t* result_4 = nullptr
1002c03f  int32_t var_440 = 0
1002c04d  char var_430[0x400]
1002c04d  
1002c04d  if (j_sub_1003d580(edi, &var_430) != 0)
1002c063      while (true)
1002c063          int32_t* result_3
1002c063          int32_t var_30
1002c063          
1002c063          if (var_30 != 3)
1002c0d2              if (var_30 != 1)
1002c2e2                  label_1002c2e2:
1002c2e2                  char (* var_458_8)[0x400] = &var_430
1002c2e9                  j_sub_10039200(edi, "invalid token %s\n")
1002c2ef                  j_sub_1003e000(edi)
1002c2f9                  j_sub_1002bfb0(result)
1002c30d                  return 0
1002c30d              
1002c0da              int32_t* result_2 = j_sub_10038f90(0x10)
1002c0e6              result_2[1] = 0
1002c0e9              *result_2 = 2
1002c0f0              result_2[2] = 0
1002c0f3              result_2[3] = 0
1002c0f6              int32_t var_438_1
1002c0f6              int32_t* var_434_1
1002c0f6              
1002c0f6              if (result_4 == 0)
1002c109                  result = result_2
1002c10d                  result_3 = result_2
1002c111                  var_434_1 = nullptr
1002c115                  var_438_1 = 0
1002c0f6              else
1002c0f8                  result_4[3] = result_2
1002c0fb                  result_3 = result_2
1002c0ff                  var_434_1 = nullptr
1002c103                  var_438_1 = 0
1002c103              
1002c127              while (true)
1002c127                  if (result_2[1] != 0 && j_sub_1003d740(edi, 1, 0, &var_430) == 0)
1002c29f                      j_sub_1003e000(edi)
1002c2a9                      j_sub_1002bfb0(result)
1002c2bd                      return 0
1002c2bd                  
1002c147                  j_sub_1003fcb0(&var_430)
1002c14c                  char (* edi_1)[0x400] = &var_430
1002c150                  int32_t i = 0xffffffff
1002c150                  
1002c155                  while (i != 0)
1002c155                      bool cond:2_1 = 0 != *edi_1
1002c155                      edi_1 = &(*edi_1)[1]
1002c155                      i -= 1
1002c155                      
1002c155                      if (not(cond:2_1))
1002c155                          break
1002c155                  
1002c15d                  int32_t* eax_4 = j_sub_10038f90(not.d(i) + 8)
1002c164                  char (* edi_2)[0x400] = &var_430
1002c168                  int32_t i_1 = 0xffffffff
1002c173                  *eax_4 = &eax_4[2]
1002c173                  
1002c175                  while (i_1 != 0)
1002c175                      bool cond:3_1 = 0 != *edi_2
1002c175                      edi_2 = &(*edi_2)[1]
1002c175                      i_1 -= 1
1002c175                      
1002c175                      if (not(cond:3_1))
1002c175                          break
1002c175                  
1002c177                  int32_t ecx_4 = not.d(i_1)
1002c184                  int32_t esi_1
1002c184                  int32_t edi_5
1002c184                  edi_5, esi_1 = __builtin_memcpy(dest: &eax_4[2], src: edi_2 - ecx_4, 
1002c184                      n: ecx_4 u>> 2 << 2)
1002c18d                  __builtin_memcpy(dest: edi_5, src: esi_1, n: ecx_4 & 3)
1002c18f                  char (* edi_6)[0x400] = &var_430
1002c193                  int32_t i_2 = 0xffffffff
1002c193                  
1002c196                  while (i_2 != 0)
1002c196                      bool cond:4_1 = 0 != *edi_6
1002c196                      edi_6 = &(*edi_6)[1]
1002c196                      i_2 -= 1
1002c196                      
1002c196                      if (not(cond:4_1))
1002c196                          break
1002c196                  
1002c19b                  if (not.d(i_2) == 1)
1002c19d                      var_438_1 = 1
1002c19d                  
1002c1a9                  eax_4[1] = 0
1002c1a9                  
1002c1b2                  if (var_434_1 == 0)
1002c1b9                      result_2[1] = eax_4
1002c1b2                  else
1002c1b4                      var_434_1[1] = eax_4
1002c1b4                  
1002c1c9                  var_434_1 = eax_4
1002c1c9                  
1002c1d7                  if (j_sub_1003db20(arg1, U"|") == 0)
1002c1d7                      break
1002c1d7                  
1002c11b                  edi = arg1
1002c11b              
1002c1e3              if (var_438_1 == 0)
1002c1e5                  var_440 = 0
1002c1e5              
1002c1ed              edi = arg1
1002c063          else
1002c06f              int16_t var_2c
1002c06f              
1002c06f              if ((var_2c:1.b & 0x10) == 0)
1002c06f                  goto label_1002c2e2
1002c06f              
1002c07d              int32_t var_28
1002c07d              
1002c07d              if (var_28 u>= 0xa)
1002c271                  int32_t var_458_5 = 0xa
1002c279                  j_sub_10039200(edi, "can't have more than %d match va…")
1002c27f                  j_sub_1003e000(edi)
1002c289                  j_sub_1002bfb0(result)
1002c29d                  return 0
1002c29d              
1002c087              if (var_440 != 0)
1002c24c                  j_sub_10039200(edi, "not allowed to have adjacent var…")
1002c252                  j_sub_1003e000(edi)
1002c25c                  j_sub_1002bfb0(result)
1002c270                  return 0
1002c270              
1002c08f              var_440 = 1
1002c097              int32_t* result_1 = j_sub_10038f90(0x10)
1002c09c              *result_1 = 1
1002c0ae              result_1[2] = var_28
1002c0b1              result_1[3] = 0
1002c0b1              
1002c0b4              if (result_4 == 0)
1002c0c2                  result = result_1
1002c0c6                  result_3 = result_1
1002c0b4              else
1002c0b6                  result_4[3] = result_1
1002c0b9                  result_3 = result_1
1002c0b9          
1002c209          if (j_sub_1003db20(edi, arg2) != 0)
1002c209              break
1002c209          
1002c21b          if (j_sub_1003d650(edi, U",(") == 0)
1002c2bf              j_sub_1003e000(edi)
1002c2c9              j_sub_1002bfb0(result)
1002c2dd              return 0
1002c2dd          
1002c231          if (j_sub_1003d580(edi, &var_430) == 0)
1002c231              break
1002c231          
1002c055          result_4 = result_3
1002c055  
1002c245  return result

1002c30e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1002c320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c3a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c3c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002c3d0    void sub_1002c3d0(void* arg1)

1002c3d1  void* i_1 = arg1
1002c3d1  
1002c3d7  if (i_1 != 0)
1002c3f3      void* i
1002c3f3      
1002c3f3      do
1002c3dd          i = *(i_1 + 0x10)
1002c3e1          j_sub_1002bfb0(*(i_1 + 0xc))
1002c3e7          j_sub_100390b0(i_1)
1002c3ef          i_1 = i
1002c3f3      while (i != 0)

1002c3f8                                                                          90 90 90 90 90 90 90 90                          ........
1002c400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002c410    int32_t* sub_1002c410(char* arg1)

1002c431  void* var_4c8
1002c431  
1002c431  if (j_sub_10041f60(arg1, &var_4c8) == 0)
1002c43b      data_10063fe8(3, "couldn't find %s\n", arg1)
1002c450      return 0
1002c450  
1002c460  void* var_4c4
1002c460  char var_4c0[0x90]
1002c460  char* eax_2 = j_sub_1003de60(&var_4c0, var_4c8, var_4c4)
1002c460  
1002c46e  if (eax_2 == 0)
1002c47c      data_10063fe8(3, "counldn't load %s\n", &var_4c0)
1002c491      return 0
1002c491  
1002c499  int32_t* result = nullptr
1002c49d  int32_t* result_2 = nullptr
1002c4a1  int32_t* result_4 = nullptr
1002c4ad  char var_430[0x400]
1002c4ad  
1002c4ad  if (j_sub_1003d580(eax_2, &var_430) != 0)
1002c4cb      while (true)
1002c4cb          int32_t var_30
1002c4cb          int16_t var_2c
1002c4cb          
1002c4cb          if (var_30 != 3 || (var_2c:1.b & 0x10) == 0)
1002c6d5              char (* var_4e4_13)[0x400] = &var_430
1002c6dc              j_sub_10039200(eax_2, "expected integer, found %s\n")
1002c6e2              j_sub_1002c3d0(result)
1002c6e8              j_sub_1003e000(eax_2)
1002c6fc              return 0
1002c6fc          
1002c4ec          int32_t* result_1
1002c4ec          
1002c4ec          if (j_sub_1003d650(eax_2, U"{") == 0)
1002c69d              result_1 = result
1002c6a5              label_1002c6a5:
1002c6a5              j_sub_1002c3d0(result_1)
1002c6ab              j_sub_1003e000(eax_2)
1002c6bf              return 0
1002c6bf          
1002c505          if (j_sub_1003d580(eax_2, &var_430) != 0)
1002c50b              while (true)
1002c50b                  void* esi_1 = &data_1005ab54
1002c510                  char (* eax_9)[0x400] = &var_430
1002c517                  int32_t eax_11
1002c517                  
1002c517                  while (true)
1002c517                      char edx_1 = *eax_9
1002c51b                      char temp0_1 = *esi_1
1002c51b                      bool c_1 = edx_1 u< temp0_1
1002c51b                      
1002c51d                      if (edx_1 == temp0_1)
1002c521                          if (edx_1 == 0)
1002c537                              eax_11 = 0
1002c539                              break
1002c539                          
1002c523                          edx_1 = (*eax_9)[1]
1002c528                          char temp3_1 = *(esi_1 + 1)
1002c528                          c_1 = edx_1 u< temp3_1
1002c528                          
1002c52b                          if (edx_1 == temp3_1)
1002c52d                              eax_9 = &(*eax_9)[2]
1002c530                              esi_1 += 2
1002c530                              
1002c535                              if (edx_1 != 0)
1002c535                                  continue
1002c535                              
1002c537                              eax_11 = 0
1002c539                              break
1002c539                      
1002c53b                      bool c_2 = unimplemented  {sbb eax, eax}
1002c53d                      eax_11 = sbb.d(sbb.d(eax_9, eax_9, c_1), 0xffffffff, c_2)
1002c53d                      break
1002c53d                  
1002c542                  if (eax_11 != 0)
1002c549                      j_sub_1003dd40(eax_2)
1002c550                      int32_t* result_3 = j_sub_10038f90(0x14)
1002c561                      int32_t var_28
1002c561                      *result_3 = var_28
1002c563                      result_3[4] = 0
1002c570                      result_3[3] = j_sub_1002c020(eax_2, U"=")
1002c570                      
1002c573                      if (result_4 == 0)
1002c57a                          result_2 = result_3
1002c573                      else
1002c575                          result_4[4] = result_3
1002c575                      
1002c584                      result_4 = result_3
1002c586                      int32_t eax_14 = j_sub_1003d650(eax_2, U"(")
1002c590                      int32_t eax_15
1002c590                      
1002c590                      if (eax_14 != 0)
1002c5a6                          eax_15 = j_sub_1003d740(eax_2, 3, 0x1000, &var_430)
1002c5a6                      
1002c5b0                      if (eax_14 == 0 || eax_15 == 0)
1002c6cb                          result_1 = result_2
1002c6cc                          goto label_1002c6a5
1002c6cc                      
1002c5c3                      result_3[1] = var_28
1002c5c6                      int32_t eax_16 = j_sub_1003d650(eax_2, U",(")
1002c5d0                      int32_t eax_17
1002c5d0                      
1002c5d0                      if (eax_16 != 0)
1002c5e6                          eax_17 = j_sub_1003d740(eax_2, 3, 0x1000, &var_430)
1002c5e6                      
1002c5f0                      if (eax_16 == 0 || eax_17 == 0)
1002c6c4                          result_1 = result_2
1002c6c5                          goto label_1002c6a5
1002c6c5                      
1002c603                      result_3[2] = var_28
1002c606                      int32_t eax_18 = j_sub_1003d650(eax_2, U"),(")
1002c610                      int32_t eax_19
1002c610                      
1002c610                      if (eax_18 != 0)
1002c61c                          eax_19 = j_sub_1003d650(eax_2, U";")
1002c61c                      
1002c626                      if (eax_18 == 0 || eax_19 == 0)
1002c6a4                          result_1 = result_2
1002c6a4                          goto label_1002c6a5
1002c6a4                      
1002c63b                      if (j_sub_1003d580(eax_2, &var_430) != 0)
1002c63b                          continue
1002c63b                  
1002c641                  result = result_2
1002c641                  break
1002c641          
1002c658          if (j_sub_1003d580(eax_2, &var_430) == 0)
1002c658              break
1002c658          
1002c658          continue
1002c658  
1002c65f  j_sub_1003e000(eax_2)
1002c65f  
1002c66d  if (var_4c4 != 0)
1002c687      data_10063fe8(1, "loaded %s\%s\n", &var_4c0, arg1)
1002c69c      return result
1002c69c  
1002c70c  data_10063fe8(1, "loaded %s\n", arg1)
1002c721  return result

1002c722        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1002c740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c7e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002c800    int32_t sub_1002c800(int32_t* arg1, int32_t arg2)

1002c802  int32_t* i = arg1
1002c807  int32_t esi = arg2
1002c80b  int32_t ebx = 0xffffffff
1002c80f  int32_t edi = esi
1002c80f  
1002c813  if (i != 0)
1002c819      int32_t edx_1 = arg2
1002c819      
1002c8a3      do
1002c81d          int32_t eax_1 = *i
1002c81d          
1002c823          if (eax_1 == 2)
1002c825              int32_t* esi_1 = i[1]
1002c825              
1002c82a              if (esi_1 != 0)
1002c837                  while (true)
1002c837                      edx_1 = j_sub_1002acf0(edi, *esi_1, 0)
1002c837                      
1002c83e                      if (edx_1 != 0)
1002c83e                          break
1002c83e                      
1002c840                      esi_1 = esi_1[1]
1002c840                      
1002c845                      if (esi_1 == 0)
1002c8e5                          return 0
1002c82a              else if (edx_1 == 0)
1002c8e5                  return 0
1002c8e5              
1002c857              if (ebx s>= 0)
1002c866                  *(arg2 + (ebx << 3) + 0xa4) = edx_1 - *(arg2 + (ebx << 3) + 0xa0)
1002c86d                  ebx = 0xffffffff
1002c857              else if (edx_1 != edi)
1002c8e5                  return 0
1002c8e5              
1002c876              int32_t edi_1 = *esi_1
1002c878              int32_t j = 0xffffffff
1002c87d              esi = arg2
1002c87d              
1002c881              while (j != 0)
1002c881                  bool cond:2_1 = 0 != *edi_1
1002c881                  edi_1 += 1
1002c881                  j -= 1
1002c881                  
1002c881                  if (not(cond:2_1))
1002c881                      break
1002c881              
1002c888              edi = not.d(j) - 1 + edx_1
1002c823          else if (eax_1 == 1)
1002c894              *(esi + (i[2] << 3) + 0xa0) = edi
1002c89b              ebx = i[2]
1002c89b          
1002c89e          i = i[3]
1002c8a3      while (i != 0)
1002c8a3      
1002c8ab      if (ebx s>= 0)
1002c8ab          goto label_1002c8bd
1002c8ab  
1002c8ad  int32_t i_1 = 0xffffffff
1002c8ad  
1002c8b2  while (i_1 != 0)
1002c8b2      bool cond:0_1 = 0 != *edi
1002c8b2      edi += 1
1002c8b2      i_1 -= 1
1002c8b2      
1002c8b2      if (not(cond:0_1))
1002c8b2          break
1002c8b2  
1002c8b7  if (not.d(i_1) != 1)
1002c8e5      return 0
1002c8e5  
1002c8bb  if (ebx s>= 0)
1002c8bd      label_1002c8bd:
1002c8bd      int32_t edi_3 = *(esi + (ebx << 3) + 0xa0)
1002c8c4      int32_t i_2 = 0xffffffff
1002c8c4      
1002c8c9      while (i_2 != 0)
1002c8c9          bool cond:1_1 = 0 != *edi_3
1002c8c9          edi_3 += 1
1002c8c9          i_2 -= 1
1002c8c9          
1002c8c9          if (not(cond:1_1))
1002c8c9              break
1002c8c9      
1002c8ce      *(esi + (ebx << 3) + 0xa4) = not.d(i_2) - 1
1002c8ce  
1002c8de  return 1

1002c8e6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
1002c900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002c920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002c930    int32_t sub_1002c930(char* arg1, char* arg2, int32_t arg3)

1002c942  StrCopyFixed(arg2, arg1, 0x96)
1002c947  char* edi = arg2
1002c949  int32_t i = 0xffffffff
1002c949  
1002c951  while (i != 0)
1002c951      bool cond:0_1 = 0 != *edi
1002c951      edi = &edi[1]
1002c951      i -= 1
1002c951      
1002c951      if (not(cond:0_1))
1002c951          break
1002c951  
1002c956  if (not.d(i) != 1)
1002c985      int32_t i_3
1002c985      
1002c985      do
1002c958          char* edi_1 = arg2
1002c95a          int32_t i_1 = 0xffffffff
1002c95a          
1002c95f          while (i_1 != 0)
1002c95f              bool cond:1_1 = 0 != *edi_1
1002c95f              edi_1 = &edi_1[1]
1002c95f              i_1 -= 1
1002c95f              
1002c95f              if (not(cond:1_1))
1002c95f                  break
1002c95f          
1002c969          if (arg2[not.d(i_1) - 2] != 0xa)
1002c969              break
1002c969          
1002c96b          char* edi_2 = arg2
1002c96d          int32_t i_2 = 0xffffffff
1002c96d          
1002c972          while (i_2 != 0)
1002c972              bool cond:2_1 = 0 != *edi_2
1002c972              edi_2 = &edi_2[1]
1002c972              i_2 -= 1
1002c972              
1002c972              if (not(cond:2_1))
1002c972                  break
1002c972          
1002c977          char* edi_3 = arg2
1002c979          arg2[not.d(i_2) - 2] = 0
1002c97d          i_3 = 0xffffffff
1002c97d          
1002c980          while (i_3 != 0)
1002c980              bool cond:3_1 = 0 != *edi_3
1002c980              edi_3 = &edi_3[1]
1002c980              i_3 -= 1
1002c980              
1002c980              if (not(cond:3_1))
1002c980                  break
1002c985      while (not.d(i_3) != 1)
1002c985  
1002c98f  for (int32_t* i_4 = data_10064378; i_4 != 0; i_4 = i_4[4])
1002c997      if ((*i_4 & arg3) != 0)
1002c999          void* eax = &arg2[0xa0]
1002c99f          int32_t j_1 = 0xa
1002c9ae          int32_t j
1002c9ae          
1002c9ae          do
1002c9a4              *eax = 0
1002c9aa              eax += 8
1002c9ad              j = j_1
1002c9ad              j_1 -= 1
1002c9ae          while (j != 1)
1002c9ae          
1002c9bf          if (j_sub_1002c800(i_4[3], arg2) != 0)
1002c9d1              *(arg2 + 0x98) = i_4[1]
1002c9da              *(arg2 + 0x9c) = i_4[2]
1002c9e8              return 1
1002c9e8  
1002c9cd  return 0

1002c9e9                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1002ca00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002ca20    char* sub_1002ca20(int32_t arg1, int32_t arg2, char* arg3)

1002ca2c  if (arg2 s< 0 || arg2 s>= 0xa)
1002ca7e      data_10063fe8(4, "BotMatchVariable: variable out o…")
1002ca91      *arg3 = data_1006294c
1002ca94      return arg3
1002ca94  
1002ca34  char* eax = *(arg1 + (arg2 << 3) + 0xa0)
1002ca34  
1002ca3d  if (eax == 0)
1002ca6a      eax.b = data_1006294c
1002ca70      *arg3 = eax.b
1002ca76      return arg3
1002ca76  
1002ca4d  StrCopyFixed(arg3, eax, *(arg1 + (arg2 << 3) + 0xa4))
1002ca5e  *(*(arg1 + (arg2 << 3) + 0xa4) + arg3) = 0
1002ca65  return arg3

1002ca95                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
1002caa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002cac0    int32_t* sub_1002cac0(int32_t* arg1, char* arg2)

1002cac4  int32_t ebx
1002cac4  int32_t var_4 = ebx
1002cac8  int32_t* result = arg1
1002cac8  
1002cacc  if (arg1 != 0)
1002cad2      while (true)
1002cad2          char* ecx_1 = *result
1002cad4          char* esi_1 = arg2
1002cad6          int32_t ecx_3
1002cad6          
1002cad6          while (true)
1002cad6              int32_t* eax
1002cad6              eax.b = *ecx_1
1002cad8              ebx.b = *esi_1
1002cadc              bool c_1 = eax.b u< ebx.b
1002cadc              
1002cade              if (eax.b == ebx.b)
1002cae2                  if (eax.b == 0)
1002cafa                      ecx_3 = 0
1002cafc                      break
1002cafc                  
1002cae4                  eax.b = ecx_1[1]
1002cae7                  ebx.b = esi_1[1]
1002caec                  c_1 = eax.b u< ebx.b
1002caec                  
1002caee                  if (eax.b == ebx.b)
1002caf0                      ecx_1 = &ecx_1[2]
1002caf3                      esi_1 = &esi_1[2]
1002caf3                      
1002caf8                      if (eax.b != 0)
1002caf8                          continue
1002caf8                      
1002cafa                      ecx_3 = 0
1002cafc                      break
1002cafc              
1002cafe              bool c_2 = unimplemented  {sbb ecx, ecx}
1002cb00              ecx_3 = sbb.d(sbb.d(ecx_1, ecx_1, c_1), 0xffffffff, c_2)
1002cb00              break
1002cb00          
1002cb05          if (ecx_3 == 0)
1002cb1b              return result
1002cb1b          
1002cb07          result = result[1]
1002cb07          
1002cb0c          if (result == 0)
1002cb0c              break
1002cb0c  
1002cb14  return 0

1002cb1c                                                                                      90 90 90 90                              ....
1002cb20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002cb40    int32_t* sub_1002cb40(char* arg1, int32_t* arg2)

1002cb48  char* esi = arg1
1002cb4f  char* ebp = esi
1002cb4f  
1002cb54  if (*esi == 0)
1002cc87      return arg2
1002cc87  
1002cba0  do
1002cb60      if (*ebp != 1)
1002cb9b          ebp = &ebp[1]
1002cb60      else
1002cb62          int32_t* eax
1002cb62          eax.b = ebp[1]
1002cb65          ebp = &ebp[1]
1002cb65          
1002cb68          if (eax.b == 0x72)
1002cbb4              eax.b = ebp[1]
1002cbb7              ebp = &ebp[1]
1002cbb8              int32_t ecx_1 = 0
1002cbbc              char var_98[0x98]
1002cbbc              
1002cbbc              if (eax.b != 0)
1002cbc0                  while (eax.b != 1)
1002cbc2                      ebp = &ebp[1]
1002cbc3                      var_98[ecx_1] = eax.b
1002cbc7                      ecx_1 += 1
1002cbc8                      eax.b = *ebp
1002cbc8                      
1002cbcd                      if (eax.b == 0)
1002cbcd                          break
1002cbcd              
1002cbcf              eax.b = *ebp
1002cbd2              var_98[ecx_1] = 0
1002cbd2              
1002cbd9              if (eax.b != 0)
1002cbdb                  ebp = &ebp[1]
1002cbdb              
1002cbeb              if (j_sub_1002bdd0(&var_98) == 0 && j_sub_1002cac0(arg2, &var_98) == 0)
1002cc0e                  char (* var_ac_4)[0x98] = &var_98
1002cc0f                  char (* var_b0_2)[0x98] = &var_98
1002cc15                  j_sub_10038d80("%s = {"%s"} //MISSING RANDOM")
1002cc1a                  char (* edi_1)[0x98] = &var_98
1002cc1e                  int32_t i = 0xffffffff
1002cc1e                  
1002cc23                  while (i != 0)
1002cc23                      bool cond:0_1 = 0 != *edi_1
1002cc23                      edi_1 = &(*edi_1)[1]
1002cc23                      i -= 1
1002cc23                      
1002cc23                      if (not(cond:0_1))
1002cc23                          break
1002cc23                  
1002cc2b                  int32_t* eax_2 = j_sub_10039000(not.d(i) + 8)
1002cc32                  char (* edi_2)[0x98] = &var_98
1002cc36                  int32_t i_1 = 0xffffffff
1002cc41                  *eax_2 = &eax_2[2]
1002cc41                  
1002cc43                  while (i_1 != 0)
1002cc43                      bool cond:1_1 = 0 != *edi_2
1002cc43                      edi_2 = &(*edi_2)[1]
1002cc43                      i_1 -= 1
1002cc43                      
1002cc43                      if (not(cond:1_1))
1002cc43                          break
1002cc43                  
1002cc45                  int32_t ecx_4 = not.d(i_1)
1002cc52                  int32_t esi_2
1002cc52                  int32_t edi_5
1002cc52                  edi_5, esi_2 = __builtin_memcpy(dest: &eax_2[2], src: edi_2 - ecx_4, 
1002cc52                      n: ecx_4 u>> 2 << 2)
1002cc59                  __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx_4 & 3)
1002cc62                  esi = arg1
1002cc69                  eax_2[1] = arg2
1002cc6c                  arg2 = eax_2
1002cb68          else if (eax.b == 0x76)
1002cb81              eax.b = ebp[1]
1002cb84              ebp = &ebp[1]
1002cb84              
1002cb87              if (eax.b != 0)
1002cb8b                  while (eax.b != 1)
1002cb8d                      eax.b = ebp[1]
1002cb90                      ebp = &ebp[1]
1002cb90                      
1002cb93                      if (eax.b == 0)
1002cb93                          break
1002cb93              
1002cb99              if (*ebp == 0)
1002cb99                  break
1002cb99              
1002cb9b              ebp = &ebp[1]
1002cb6c          else
1002cb76              data_10063fe8(4, "BotCheckChatMessageIntegrety: me…", esi)
1002cba0  while (*ebp != 0)
1002cba0  
1002cbb3  return arg2

1002cc88                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1002cca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002ccc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002cce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002ccf0    int32_t* sub_1002ccf0(void* arg1)

1002ccf2  void* i = arg1
1002ccf6  int32_t* result = nullptr
1002ccf6  
1002ccfa  for (; i != 0; i = *(i + 0x10))
1002cd01      for (int32_t* j = *(i + 0xc); j != 0; j = j[2])
1002cd07          result = j_sub_1002cb40(*j, result)
1002cd07  
1002cd1f  if (result != 0)
1002cd31      int32_t* i_1
1002cd31      
1002cd31      do
1002cd21          i_1 = result[1]
1002cd25          j_sub_100390b0(result)
1002cd2d          result = i_1
1002cd31      while (i_1 != 0)
1002cd31  
1002cd35  return result

1002cd36                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1002cd40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002cd60    int32_t* sub_1002cd60(int32_t* arg1)

1002cd66  int32_t* result = nullptr
1002cd66  
1002cd6c  for (void* i = *arg1; i != 0; i = *(i + 0x28))
1002cd73      for (int32_t* j = *(i + 0x24); j != 0; j = j[2])
1002cd79          result = j_sub_1002cb40(*j, result)
1002cd79  
1002cd91  if (result != 0)
1002cda3      int32_t* i_1
1002cda3      
1002cda3      do
1002cd93          i_1 = result[1]
1002cd97          j_sub_100390b0(result)
1002cd9f          result = i_1
1002cda3      while (i_1 != 0)
1002cda3  
1002cda7  return result

1002cda8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1002cdc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002cdd0    int32_t sub_1002cdd0(void* arg1, char* arg2)

1002cde8  *arg2 = 0
1002cde8  
1002cdf1  while (true)
1002cdfb      char var_430[0x400]
1002cdfb      int32_t var_30
1002cdfb      
1002cdfb      if (j_sub_1003dae0(arg1, &var_430) != 0)
1002ce0b          if (var_30 == 1)
1002ce12              j_sub_1003fcb0(&var_430)
1002ce17              char (* edi_1)[0x400] = &var_430
1002ce1b              int32_t i = 0xffffffff
1002ce1b              
1002ce23              while (i != 0)
1002ce23                  bool cond:0_1 = 0 != *edi_1
1002ce23                  edi_1 = &(*edi_1)[1]
1002ce23                  i -= 1
1002ce23                  
1002ce23                  if (not(cond:0_1))
1002ce23                      break
1002ce23              
1002ce25              int32_t ecx_1 = not.d(i)
1002ce2d              char* edi_3 = arg2
1002ce2f              int32_t i_1 = 0xffffffff
1002ce2f              
1002ce32              while (i_1 != 0)
1002ce32                  bool cond:1_1 = 0 != *edi_3
1002ce32                  edi_3 = &edi_3[1]
1002ce32                  i_1 -= 1
1002ce32                  
1002ce32                  if (not(cond:1_1))
1002ce32                      break
1002ce32              
1002ce3a              int32_t esi_2
1002ce3a              int32_t edi_5
1002ce3a              edi_5, esi_2 =
1002ce3a                  __builtin_memcpy(dest: edi_3 - 1, src: edi_1 - ecx_1, n: ecx_1 u>> 2 << 2)
1002ce41              __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx_1 & 3)
1002ce99              label_1002ce99:
1002ce99              
1002cea3              if (j_sub_1003db20(arg1, U";") != 0)
1002cea3                  break
1002cea3              
1002ceb5              if (j_sub_1003d650(arg1, U",(") != 0)
1002ceb5                  continue
1002ce0b          else
1002ce48              void* var_450_1
1002ce48              char (* var_444_5)[0x400]
1002ce48              
1002ce48              if (var_30 != 3)
1002ce6c                  if (var_30 == 4)
1002ce72                      int32_t var_444_4 = 1
1002ce74                      char (* var_448_3)[0x400] = &var_430
1002ce75                      int32_t var_44c_2 = 1
1002ce77                      var_450_1 = "%cr%s%c"
1002ce7c                      label_1002ce7c:
1002ce7c                      char* edi_6 = arg2
1002ce7e                      int32_t i_2 = 0xffffffff
1002ce7e                      
1002ce83                      while (i_2 != 0)
1002ce83                          bool cond:2_1 = 0 != *edi_6
1002ce83                          edi_6 = &edi_6[1]
1002ce83                          i_2 -= 1
1002ce83                          
1002ce83                          if (not(cond:2_1))
1002ce83                              break
1002ce83                      
1002ce8b                      sub_10044c56(not.d(i_2) - 1 + arg2, var_450_1)
1002ce90                      goto label_1002ce99
1002ce90                  
1002cec0                  var_444_5 = &var_430
1002cec7                  j_sub_10039200(arg1, "unknown message component %s\n")
1002ce48              else
1002ce54                  int16_t var_2c
1002ce54                  
1002ce54                  if ((var_2c:1.b & 0x10) != 0)
1002ce5d                      int32_t var_444_3 = 1
1002ce5f                      int32_t var_28
1002ce5f                      int32_t var_448_2 = var_28
1002ce60                      int32_t var_44c_1 = 1
1002ce62                      var_450_1 = "%cv%d%c"
1002ce67                      goto label_1002ce7c
1002ce67                  
1002cec0                  var_444_5 = &var_430
1002cec7                  j_sub_10039200(arg1, "unknown message component %s\n")
1002cedb      return 0
1002cedb  
1002ceeb  return 1

1002ceec                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
1002cf00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002cf20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002cf40    int32_t* sub_1002cf40(int32_t* arg1)

1002cf46  int32_t ecx
1002cf46  int32_t var_c = ecx
1002cf4a  int32_t* result = j_sub_10038ec0()
1002cf4f  int32_t* result_3 = result
1002cf4f  
1002cf53  if (result_3 != 0)
1002cf5f      sub_10045898(result_3, "BotDumpReplyChat:\n")
1002cf64      result = arg1
1002cf6a      int32_t* result_2 = result
1002cf6e      int32_t* result_1 = result_2
1002cf6e      
1002cf72      if (result != 0)
1002cf84          while (true)
1002cf84              sub_10045898(result_3, &data_1005c65c)
1002cf84              
1002cf90              for (int32_t* i = *result_2; i != 0; i = i[3])
1002cf96                  char eax = (*i).b
1002cf96                  
1002cf9a                  if ((eax & 1) != 0)
1002cfad                      sub_10045898(result_3, &data_1005d548)
1002cf9a                  else if ((eax & 2) != 0)
1002cfad                      sub_10045898(result_3, &data_1005d544)
1002cfad                  
1002cfb5                  char eax_1 = (*i).b
1002cfb9                  int32_t* var_20_2
1002cfb9                  
1002cfb9                  if ((eax_1 & 4) != 0)
1002cfc1                      sub_10045898(result_3, "name")
1002cfb9                  else if ((eax_1 & 0x20) != 0)
1002cfd8                      sub_10045898(result_3, "female")
1002cfd0                  else if ((eax_1 & 0x40) != 0)
1002cfef                      sub_10045898(result_3, "male")
1002cfe7                  else if ((eax_1 & 0x80) != 0)
1002d006                      sub_10045898(result_3, &data_1005d530)
1002cffe                  else if ((eax_1 & 0x10) != 0)
1002d01d                      sub_10045898(result_3, &data_1005d334)
1002d01d                      
1002d02a                      for (int32_t* j = i[2]; j != 0; j = j[3])
1002d02f                          void* var_20_4
1002d02f                          
1002d02f                          if (*j != 2)
1002d041                              int32_t var_1c_3 = j[2]
1002d042                              var_20_4 = &data_1005d37c
1002d02f                          else
1002d036                              int32_t var_1c_2 = *j[1]
1002d037                              var_20_4 = ""%s""
1002d037                          
1002d048                          sub_10045898(result_3, var_20_4)
1002d048                          
1002d055                          if (j[3] != 0)
1002d05d                              sub_10045898(result_3, &data_1005d280)
1002d05d                      
1002d072                      sub_10045898(result_3, &data_1005d32c)
1002d077                      result_2 = result_1
1002d015                  else if ((eax_1 & 8) != 0)
1002d087                      int32_t var_1c_4 = i[1]
1002d088                      var_20_2 = ""%s""
1002d08e                      sub_10045898(result_3, ""%s"")
1002d08e                  
1002d09b                  if (i[3] == 0)
1002d0b3                      var_20_2.q = fconvert.d(fconvert.t(result_2[1]))
1002d0bc                      sub_10045898(result_3, "] = %1.0f\n")
1002d09b                  else
1002d0a3                      sub_10045898(result_3, &data_1005d280)
1002d0a3              
1002d0d5              sub_10045898(result_3, &data_1005d51c)
1002d0d5              
1002d0e2              for (int32_t* i_1 = result_2[3]; i_1 != 0; i_1 = i_1[2])
1002d0e6                  int32_t var_1c_5 = *i_1
1002d0ed                  sub_10045898(result_3, "\t"%s";\n")
1002d0ed              
1002d102              sub_10045898(result_3, &data_1005d338)
1002d10e              result = result_1[4]
1002d113              result_1 = result
1002d113              
1002d117              if (result == 0)
1002d117                  break
1002d117              
1002cf7a              result_2 = result_1
1002cf7a  
1002d123  return result

1002d124              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
1002d140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d1a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002d1b0    void* sub_1002d1b0(void* arg1)

1002d1b0  void* result = arg1
1002d1b7  int32_t* i = result
1002d1b7  
1002d1b9  if (result != 0)
1002d22f      do
1002d1be          void* j_3 = *i
1002d1c1          void* i_1 = i[4]
1002d1c1          
1002d1ca          if (j_3 != 0)
1002d205              void* j
1002d205              
1002d205              do
1002d1cc                  void* k_1 = *(j_3 + 8)
1002d1cf                  j = *(j_3 + 0xc)
1002d1cf                  
1002d1d4                  if (k_1 != 0)
1002d1e6                      void* k
1002d1e6                      
1002d1e6                      do
1002d1d6                          k = *(k_1 + 0xc)
1002d1da                          j_sub_100390b0(k_1)
1002d1e2                          k_1 = k
1002d1e6                      while (k != 0)
1002d1e6                  
1002d1e8                  void* eax = *(j_3 + 4)
1002d1e8                  
1002d1ed                  if (eax != 0)
1002d1f0                      j_sub_100390b0(eax)
1002d1f0                  
1002d1f9                  j_sub_100390b0(j_3)
1002d201                  j_3 = j
1002d205              while (j != 0)
1002d205          
1002d207          void* j_2 = i[3]
1002d207          
1002d20c          if (j_2 != 0)
1002d21e              void* j_1
1002d21e              
1002d21e              do
1002d20e                  j_1 = *(j_2 + 8)
1002d212                  j_sub_100390b0(j_2)
1002d21a                  j_2 = j_1
1002d21e              while (j_1 != 0)
1002d21e          
1002d221          result = j_sub_100390b0(i)
1002d226          i = i_1
1002d22f      while (i != 0)
1002d22f  
1002d235  return result

1002d236                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1002d240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002d270    int32_t* sub_1002d270(char* arg1)

1002d27d  char* esi = arg1
1002d291  void* var_560
1002d291  
1002d291  if (j_sub_10041f60(esi, &var_560) == 0)
1002d29b      data_10063fe8(3, "couldn't find %s\n", esi)
1002d2b0      return 0
1002d2b0  
1002d2c0  void* var_55c
1002d2c0  char var_558[0x90]
1002d2c0  char* eax_2 = j_sub_1003de60(&var_558, var_560, var_55c)
1002d2c0  
1002d2cc  if (eax_2 == 0)
1002d2da      data_10063fe8(3, "counldn't load %s\n", &var_558)
1002d2ef      return 0
1002d2ef  
1002d2f7  int32_t* result = nullptr
1002d305  char var_430[0x408]
1002d305  
1002d305  if (j_sub_1003d580(eax_2, &var_430) != 0)
1002d30b      while (true)
1002d30b          void* ebp_1 = &data_1005c65c
1002d310          char (* esi_1)[0x408] = &var_430
1002d317          int32_t eax_6
1002d317          
1002d317          while (true)
1002d317              char ecx_1 = *esi_1
1002d319              char edx_1 = *ebp_1
1002d31c              int32_t eax_4
1002d31c              eax_4.b = ecx_1
1002d31e              bool c_1 = ecx_1 u< edx_1
1002d31e              
1002d320              if (ecx_1 == edx_1)
1002d324                  if (eax_4.b == 0)
1002d33c                      eax_6 = 0
1002d33e                      break
1002d33e                  
1002d326                  edx_1 = (*esi_1)[1]
1002d329                  ecx_1 = *(ebp_1 + 1)
1002d32c                  eax_4.b = edx_1
1002d32e                  c_1 = edx_1 u< ecx_1
1002d32e                  
1002d330                  if (edx_1 == ecx_1)
1002d332                      esi_1 = &(*esi_1)[2]
1002d335                      ebp_1 += 2
1002d335                      
1002d33a                      if (eax_4.b != 0)
1002d33a                          continue
1002d33a                      
1002d33c                      eax_6 = 0
1002d33e                      break
1002d33e              
1002d340              bool c_2 = unimplemented  {sbb eax, eax}
1002d342              eax_6 = sbb.d(sbb.d(eax_4, eax_4, c_1), 0xffffffff, c_2)
1002d342              break
1002d342          
1002d347          if (eax_6 != 0)
1002d63a              char (* var_580_13)[0x408] = &var_430
1002d641              j_sub_10039200(eax_2, "expected [, found %s")
1002d647              j_sub_1002d1b0(result)
1002d64d              j_sub_1003e000(eax_2)
1002d661              return 0
1002d661          
1002d34f          int32_t* result_1 = j_sub_10039000(0x14)
1002d35d          *result_1 = 0
1002d364          result_1[4] = result
1002d364          
1002d369          while (true)
1002d369              int32_t* eax_7 = j_sub_10039000(0x10)
1002d378              *eax_7 = 0
1002d37a              eax_7[1] = 0
1002d37d              eax_7[2] = 0
1002d383              eax_7[3] = *result_1
1002d386              *result_1 = eax_7
1002d393              int32_t eax_10
1002d393              
1002d393              if (j_sub_1003db20(eax_2, U"&") == 0)
1002d3ab                  if (j_sub_1003db20(eax_2, U"!&") != 0)
1002d3af                      eax_10.b = (*eax_7).b | 2
1002d3b1                      *eax_7 = eax_10
1002d393              else
1002d397                  eax_10.b = (*eax_7).b | 1
1002d3b1                  *eax_7 = eax_10
1002d3b1              
1002d3c3              if (j_sub_1003db20(eax_2, "name") == 0)
1002d3e0                  if (j_sub_1003db20(eax_2, "female") != 0)
1002d3e4                      int32_t eax_15
1002d3e4                      eax_15.b = (*eax_7).b | 0x20
1002d3e6                      *eax_7 = eax_15
1002d3e8                      goto label_1002d4c7
1002d3e8                  
1002d3fd                  if (j_sub_1003db20(eax_2, "male") != 0)
1002d401                      int32_t eax_17
1002d401                      eax_17.b = (*eax_7).b | 0x40
1002d403                      *eax_7 = eax_17
1002d405                      goto label_1002d4c7
1002d405                  
1002d41a                  if (j_sub_1003db20(eax_2, "it") != 0)
1002d41e                      int32_t eax_19
1002d41e                      eax_19.b = (*eax_7).b | 0x80
1002d420                      *eax_7 = eax_19
1002d422                      goto label_1002d4c7
1002d422                  
1002d435                  bool cond:1_1 = j_sub_1003db20(eax_2, U"(") == 0
1002d437                  int32_t eax_21 = *eax_7
1002d437                  
1002d439                  if (not(cond:1_1))
1002d43b                      eax_21.b |= 0x10
1002d443                      *eax_7 = eax_21
1002d44d                      eax_7[2] = j_sub_1002c020(eax_2, U"),(")
1002d450                      goto label_1002d4c7
1002d450                  
1002d459                  eax_21.b |= 8
1002d460                  *eax_7 = eax_21
1002d460                  
1002d46c                  if (j_sub_1003d740(eax_2, 1, 0, &var_430) != 0)
1002d47a                      j_sub_1003fcb0(&var_430)
1002d47f                      char (* edi)[0x408] = &var_430
1002d486                      int32_t i = 0xffffffff
1002d486                      
1002d48b                      while (i != 0)
1002d48b                          bool cond:2_1 = 0 != *edi
1002d48b                          edi = &(*edi)[1]
1002d48b                          i -= 1
1002d48b                          
1002d48b                          if (not(cond:2_1))
1002d48b                              break
1002d48b                      
1002d490                      int32_t eax_24 = j_sub_10039000(not.d(i))
1002d497                      char (* edi_1)[0x408] = &var_430
1002d49e                      int32_t i_1 = 0xffffffff
1002d4a6                      eax_7[1] = eax_24
1002d4a6                      
1002d4a9                      while (i_1 != 0)
1002d4a9                          bool cond:3_1 = 0 != *edi_1
1002d4a9                          edi_1 = &(*edi_1)[1]
1002d4a9                          i_1 -= 1
1002d4a9                          
1002d4a9                          if (not(cond:3_1))
1002d4a9                              break
1002d4a9                      
1002d4ab                      int32_t ecx_3 = not.d(i_1)
1002d4b8                      int32_t esi_4
1002d4b8                      int32_t edi_4
1002d4b8                      edi_4, esi_4 = __builtin_memcpy(dest: eax_24, src: edi_1 - ecx_3, 
1002d4b8                          n: ecx_3 u>> 2 << 2)
1002d4bf                      __builtin_memcpy(dest: edi_4, src: esi_4, n: ecx_3 & 3)
1002d4a9                      goto label_1002d4c7
1002d3c3              else
1002d3c7                  int32_t eax_13
1002d3c7                  eax_13.b = (*eax_7).b | 4
1002d3c9                  *eax_7 = eax_13
1002d4c7                  label_1002d4c7:
1002d4c7                  j_sub_1003db20(eax_2, U",(")
1002d4c7                  
1002d4dc                  if (j_sub_1003db20(eax_2, U"][ ") == 0)
1002d4dc                      continue
1002d4dc                  else if (j_sub_1003d650(eax_2, U"=") != 0
1002d4dc                          && j_sub_1003d740(eax_2, 3, 0, &var_430) != 0)
1002d51d                      int32_t var_564_1 = 0
1002d52f                      int32_t var_28
1002d52f                      result_1[1] = fconvert.s(float.t(var_28.q))
1002d52f                      
1002d53c                      if (j_sub_1003d650(eax_2, U"{") != 0)
1002d53c                          break
1002d53c              
1002d663              label_1002d663:
1002d663              j_sub_1002d1b0(result_1)
1002d669              j_sub_1003e000(eax_2)
1002d67d              return 0
1002d67d          
1002d548          result_1[2] = 0
1002d548          
1002d555          if (j_sub_1003db20(eax_2, U"}{") == 0)
1002d5e0              int32_t i_2
1002d5e0              
1002d5e0              do
1002d56e                  void var_4c8
1002d56e                  
1002d56e                  if (j_sub_1002cdd0(eax_2, &var_4c8) == 0)
1002d56e                      goto label_1002d663
1002d56e                  
1002d574                  void* edi_5 = &var_4c8
1002d57b                  int32_t j = 0xffffffff
1002d57b                  
1002d580                  while (j != 0)
1002d580                      bool cond:4_1 = 0 != *edi_5
1002d580                      edi_5 += 1
1002d580                      j -= 1
1002d580                      
1002d580                      if (not(cond:4_1))
1002d580                          break
1002d580                  
1002d588                  int32_t* eax_32 = j_sub_10039000(not.d(j) + 0xc)
1002d58f                  void* edi_6 = &var_4c8
1002d596                  int32_t j_1 = 0xffffffff
1002d5a2                  *eax_32 = &eax_32[3]
1002d5a2                  
1002d5a6                  while (j_1 != 0)
1002d5a6                      bool cond:5_1 = 0 != *edi_6
1002d5a6                      edi_6 += 1
1002d5a6                      j_1 -= 1
1002d5a6                      
1002d5a6                      if (not(cond:5_1))
1002d5a6                          break
1002d5a6                  
1002d5a8                  int32_t ecx_9 = not.d(j_1)
1002d5b6                  int32_t esi_6
1002d5b6                  int32_t edi_9
1002d5b6                  edi_9, esi_6 = __builtin_memcpy(dest: &eax_32[3], src: edi_6 - ecx_9, 
1002d5b6                      n: ecx_9 u>> 2 << 2)
1002d5bd                  __builtin_memcpy(dest: edi_9, src: esi_6, n: ecx_9 & 3)
1002d5bf                  eax_32[1] = 0xc2200000
1002d5c9                  eax_32[2] = result_1[3]
1002d5cf                  int32_t eax_36 = result_1[2] + 1
1002d5d0                  result_1[3] = eax_32
1002d5d3                  result_1[2] = eax_36
1002d5d6                  i_2 = j_sub_1003db20(eax_2, U"}{")
1002d5e0              while (i_2 == 0)
1002d5e0          
1002d5f4          result = result_1
1002d5f4          
1002d5fd          if (j_sub_1003d580(eax_2, &var_430) == 0)
1002d5fd              break
1002d5fd      
1002d603      esi = arg1
1002d603  
1002d60b  j_sub_1003e000(eax_2)
1002d60b  
1002d61a  if (var_55c == 0)
1002d685      data_10063fe8(1, "loaded %s\n", esi)
1002d61a  else
1002d628      data_10063fe8(1, "loaded %s\%s\n", &var_558, esi)
1002d628  
1002d68f  j_sub_1002ccf0(result)
1002d68f  
1002d699  if (result == 0)
1002d6a2      data_10063fe8(1, "no rchats\n")
1002d6a2  
1002d6b7  return result

1002d6b8                                                                          90 90 90 90 90 90 90 90                          ........
1002d6c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d6e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002d7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002d7e0    int32_t* sub_1002d7e0(int32_t* arg1)

1002d7e6  j_sub_10038d80(&data_1005ab58)
1002d7e6  
1002d7f6  for (void* i = *arg1; i != 0; i = *(i + 0x28))
1002d7f9      void* i_1 = i
1002d7ff      j_sub_10038d80(" type "%s"")
1002d809      j_sub_10038d80(&data_1005d5b8)
1002d811      int32_t var_18_1 = *(i + 0x20)
1002d817      j_sub_10038d80("  numchatmessages = %d")
1002d817      
1002d824      for (int32_t* j = *(i + 0x24); j != 0; j = j[2])
1002d828          int32_t var_c_1 = *j
1002d82e          j_sub_10038d80("  "%s"")
1002d82e      
1002d842      j_sub_10038d80(&data_1005d590)
1002d842  
1002d860  return j_sub_10038d80(&data_1005ab54)

1002d861     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1002d880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002d8a0    int32_t* sub_1002d8a0(char* arg1, char* arg2)
// This function has unresolved stack usage. View graph of stack usage to resolve.

1002d8b5  char* result_2 = nullptr
1002d8b9  int32_t* result = nullptr
1002d8c7  void* var_560
1002d8c7  
1002d8c7  if (j_sub_10041f60(arg1, &var_560) == 0)
1002d8d1      data_10063fe8(3, "couldn't find %s\n", arg1)
1002d8e6      return 0
1002d8e6  
1002d8e7  int32_t var_570
1002d8e7  int32_t edi = var_570
1002d8eb  int32_t var_564 = 0
1002d8ef  char* result_1 = nullptr
1002d8f3  int32_t eax_2 = 0
1002d8f5  int32_t var_56c = 0
1002d8ff  void* var_55c
1002d8ff  char var_558[0x90]
1002d8ff  
1002d8ff  while (true)
1002d8ff      if (eax_2 != 0 && edi != 0)
1002d90a          result_1 = j_sub_10039000(edi)
1002d90a      
1002d920      char* esi_1 = j_sub_1003de60(&var_558, var_560, var_55c)
1002d927      char* var_574_1 = esi_1
1002d927      
1002d92b      if (esi_1 == 0)
1002dd3b          data_10063fe8(3, "counldn't load %s\n", &var_558)
1002dd50          return 0
1002dd50      
1002d937      if (var_56c != 0)
1002d939          result = result_1
1002d93d          result_1 = &result_1[4]
1002d93d      
1002d947      edi = 4
1002d94e      int32_t var_570_1 = 4
1002d95c      char var_430[0x430]
1002d95c      
1002d95c      if (j_sub_1003d580(esi_1, &var_430) != 0)
1002d962          while (true)
1002d962              char* esi_2 = "chat"
1002d967              char (* eax_7)[0x430] = &var_430
1002d96e              int32_t eax_9
1002d96e              
1002d96e              while (true)
1002d96e                  char edx_2 = *eax_7
1002d972                  char temp0_1 = *esi_2
1002d972                  bool c_1 = edx_2 u< temp0_1
1002d972                  
1002d974                  if (edx_2 == temp0_1)
1002d978                      if (edx_2 == 0)
1002d98e                          eax_9 = 0
1002d990                          break
1002d990                      
1002d97a                      edx_2 = (*eax_7)[1]
1002d97f                      char temp3_1 = esi_2[1]
1002d97f                      c_1 = edx_2 u< temp3_1
1002d97f                      
1002d982                      if (edx_2 == temp3_1)
1002d984                          eax_7 = &(*eax_7)[2]
1002d987                          esi_2 = &esi_2[2]
1002d987                          
1002d98c                          if (edx_2 != 0)
1002d98c                              continue
1002d98c                          
1002d98e                          eax_9 = 0
1002d990                          break
1002d990                  
1002d992                  bool c_2 = unimplemented  {sbb eax, eax}
1002d994                  eax_9 = sbb.d(sbb.d(eax_7, eax_7, c_1), 0xffffffff, c_2)
1002d994                  break
1002d994              
1002d9a1              char* var_58c_12
1002d9a1              
1002d9a1              if (eax_9 != 0)
1002dd8c                  var_58c_12 = "unknown definition %s\n"
1002dd96                  label_1002dd96:
1002dd96                  j_sub_10039200(var_574_1, var_58c_12)
1002dd9c                  j_sub_1003e000(var_574_1)
1002ddb0                  return 0
1002ddb0              
1002d9a7              char* esi_3 = var_574_1
1002d9b0              int32_t eax_10 = j_sub_1003d740(esi_3, 1, 0, &var_430)
1002d9ba              int32_t eax_11
1002d9ba              
1002d9ba              if (eax_10 != 0)
1002d9c8                  j_sub_1003fcb0(&var_430)
1002d9d3                  eax_11 = j_sub_1003d650(esi_3, U"{")
1002d9d3              
1002d9dd              if (eax_10 == 0 || eax_11 == 0)
1002dd52                  label_1002dd52:
1002dd52                  j_sub_1003e000(esi_3)
1002dd66                  return 0
1002dd66              
1002d9e3              char* esi_4 = arg2
1002d9ea              char (* eax_12)[0x430] = &var_430
1002d9f1              int32_t eax_14
1002d9f1              
1002d9f1              while (true)
1002d9f1                  char edx_3 = *eax_12
1002d9f5                  char temp4_1 = *esi_4
1002d9f5                  bool c_3 = edx_3 u< temp4_1
1002d9f5                  
1002d9f7                  if (edx_3 == temp4_1)
1002d9fb                      if (edx_3 == 0)
1002da11                          eax_14 = 0
1002da13                          break
1002da13                      
1002d9fd                      edx_3 = (*eax_12)[1]
1002da02                      char temp7_1 = esi_4[1]
1002da02                      c_3 = edx_3 u< temp7_1
1002da02                      
1002da05                      if (edx_3 == temp7_1)
1002da07                          eax_12 = &(*eax_12)[2]
1002da0a                          esi_4 = &esi_4[2]
1002da0a                          
1002da0f                          if (edx_3 != 0)
1002da0f                              continue
1002da0f                          
1002da11                          eax_14 = 0
1002da13                          break
1002da13                  
1002da15                  bool c_4 = unimplemented  {sbb eax, eax}
1002da17                  eax_14 = sbb.d(sbb.d(eax_12, eax_12, c_3), 0xffffffff, c_4)
1002da17                  break
1002da17              
1002da1c              if (eax_14 != 0)
1002dc11                  int32_t edi_7 = 1
1002dc11                  
1002dc16                  while (true)
1002dc16                      esi_3 = var_574_1
1002dc16                      
1002dc2d                      if (j_sub_1003dae0(esi_3, &var_430) == 0)
1002dc2d                          goto label_1002dd77
1002dc2d                      
1002dc33                      void* esi_9 = &data_1005ab58
1002dc38                      char (* eax_34)[0x430] = &var_430
1002dc3f                      int32_t eax_36
1002dc3f                      char edx_7
1002dc3f                      
1002dc3f                      while (true)
1002dc3f                          edx_7 = *eax_34
1002dc43                          char temp8_1 = *esi_9
1002dc43                          bool c_9 = edx_7 u< temp8_1
1002dc43                          
1002dc45                          if (edx_7 == temp8_1)
1002dc49                              if (edx_7 == 0)
1002dc5f                                  eax_36 = 0
1002dc61                                  break
1002dc61                              
1002dc4b                              edx_7 = (*eax_34)[1]
1002dc50                              char temp12_1 = *(esi_9 + 1)
1002dc50                              c_9 = edx_7 u< temp12_1
1002dc50                              
1002dc53                              if (edx_7 == temp12_1)
1002dc55                                  eax_34 = &(*eax_34)[2]
1002dc58                                  esi_9 += 2
1002dc58                                  
1002dc5d                                  if (edx_7 != 0)
1002dc5d                                      continue
1002dc5d                                  
1002dc5f                                  eax_36 = 0
1002dc61                                  break
1002dc61                          
1002dc63                          bool c_10 = unimplemented  {sbb eax, eax}
1002dc65                          eax_36 = sbb.d(sbb.d(eax_34, eax_34, c_9), 0xffffffff, c_10)
1002dc65                          break
1002dc65                      
1002dc6a                      if (eax_36 != 0)
1002dc6f                          void* esi_10 = &data_1005ab54
1002dc74                          void* eax_37 = &var_430
1002dc7b                          int32_t eax_39
1002dc7b                          
1002dc7b                          while (true)
1002dc7b                              edx_7 = *eax_37
1002dc7f                              char temp16_1 = *esi_10
1002dc7f                              bool c_11 = edx_7 u< temp16_1
1002dc7f                              
1002dc81                              if (edx_7 == temp16_1)
1002dc85                                  if (edx_7 == 0)
1002dc9b                                      eax_39 = 0
1002dc9d                                      break
1002dc9d                                  
1002dc87                                  edx_7 = *(eax_37 + 1)
1002dc8c                                  char temp20_1 = *(esi_10 + 1)
1002dc8c                                  c_11 = edx_7 u< temp20_1
1002dc8c                                  
1002dc8f                                  if (edx_7 == temp20_1)
1002dc91                                      eax_37 += 2
1002dc94                                      esi_10 += 2
1002dc94                                      
1002dc99                                      if (edx_7 != 0)
1002dc99                                          continue
1002dc99                                      
1002dc9b                                      eax_39 = 0
1002dc9d                                      break
1002dc9d                              
1002dc9f                              bool c_12 = unimplemented  {sbb eax, eax}
1002dca1                              eax_39 = sbb.d(sbb.d(eax_37, eax_37, c_11), 0xffffffff, c_12)
1002dca1                              break
1002dca1                          
1002dca6                          if (eax_39 == 0)
1002dca8                              edi_7 -= 1
1002dc6a                      else
1002dc6c                          edi_7 += 1
1002dc6c                      
1002dcab                      if (edi_7 == 0)
1002dcab                          break
1002da1c              else
1002da22                  var_564 = 1
1002da2a                  label_1002da2a:
1002da2a                  esi_3 = var_574_1
1002da2a                  
1002da37                  while (true)
1002da41                      if (j_sub_1003dae0(esi_3, &var_430) == 0)
1002da41                          goto label_1002dd52
1002da41                      
1002da47                      void* esi_5 = &data_1005ab54
1002da4c                      char (* eax_16)[0x430] = &var_430
1002da53                      int32_t eax_18
1002da53                      char edx_4
1002da53                      
1002da53                      while (true)
1002da53                          edx_4 = *eax_16
1002da57                          char temp11_1 = *esi_5
1002da57                          bool c_5 = edx_4 u< temp11_1
1002da57                          
1002da59                          if (edx_4 == temp11_1)
1002da5d                              if (edx_4 == 0)
1002da73                                  eax_18 = 0
1002da75                                  break
1002da75                              
1002da5f                              edx_4 = (*eax_16)[1]
1002da64                              char temp15_1 = *(esi_5 + 1)
1002da64                              c_5 = edx_4 u< temp15_1
1002da64                              
1002da67                              if (edx_4 == temp15_1)
1002da69                                  eax_16 = &(*eax_16)[2]
1002da6c                                  esi_5 += 2
1002da6c                                  
1002da71                                  if (edx_4 != 0)
1002da71                                      continue
1002da71                                  
1002da73                                  eax_18 = 0
1002da75                                  break
1002da75                          
1002da77                          bool c_6 = unimplemented  {sbb eax, eax}
1002da79                          eax_18 = sbb.d(sbb.d(eax_16, eax_16, c_5), 0xffffffff, c_6)
1002da79                          break
1002da79                      
1002da7e                      if (eax_18 == 0)
1002da7e                          break
1002da7e                      
1002da84                      char* esi_6 = "type"
1002da89                      char (* eax_19)[0x430] = &var_430
1002da90                      int32_t eax_21
1002da90                      
1002da90                      while (true)
1002da90                          edx_4 = *eax_19
1002da94                          char temp19_1 = *esi_6
1002da94                          bool c_7 = edx_4 u< temp19_1
1002da94                          
1002da96                          if (edx_4 == temp19_1)
1002da9a                              if (edx_4 == 0)
1002dab0                                  eax_21 = 0
1002dab2                                  break
1002dab2                              
1002da9c                              edx_4 = (*eax_19)[1]
1002daa1                              char temp23_1 = esi_6[1]
1002daa1                              c_7 = edx_4 u< temp23_1
1002daa1                              
1002daa4                              if (edx_4 == temp23_1)
1002daa6                                  eax_19 = &(*eax_19)[2]
1002daa9                                  esi_6 = &esi_6[2]
1002daa9                                  
1002daae                                  if (edx_4 != 0)
1002daae                                      continue
1002daae                                  
1002dab0                                  eax_21 = 0
1002dab2                                  break
1002dab2                          
1002dab4                          bool c_8 = unimplemented  {sbb eax, eax}
1002dab6                          eax_21 = sbb.d(sbb.d(eax_19, eax_19, c_7), 0xffffffff, c_8)
1002dab6                          break
1002dab6                      
1002dabb                      if (eax_21 != 0)
1002dd6e                          char (* var_588_17)[0x430] = &var_430
1002dd6f                          var_58c_12 = "expected type found %s\n"
1002dd74                          goto label_1002dd96
1002dd74                      
1002dac1                      esi_3 = var_574_1
1002dad2                      int32_t eax_22 = j_sub_1003d740(esi_3, 1, 0, &var_430)
1002dadc                      int32_t eax_23
1002dadc                      
1002dadc                      if (eax_22 != 0)
1002dae8                          eax_23 = j_sub_1003d650(esi_3, U"{")
1002dae8                      
1002daf2                      if (eax_22 == 0 || eax_23 == 0)
1002dd77                          label_1002dd77:
1002dd77                          j_sub_1003e000(esi_3)
1002dd8b                          return 0
1002dd8b                      
1002db00                      j_sub_1003fcb0(&var_430)
1002db00                      
1002db0e                      if (var_56c != 0)
1002db1b                          result_2 = result_1
1002db1d                          StrCopyFixed(result_1, &var_430, 0x20)
1002db26                          *(result_1 + 0x24) = 0
1002db32                          *(result_1 + 0x28) = *result
1002db35                          *result = result_1
1002db37                          result_1 = &result_1[0x2c]
1002db37                      
1002db47                      var_570_1 += 0x2c
1002db47                      
1002db55                      if (j_sub_1003db20(esi_3, U"}{") == 0)
1002dc06                          int32_t i
1002dc06                          
1002dc06                          do
1002db5b                              esi_3 = var_574_1
1002db72                              void var_4c8
1002db72                              
1002db72                              if (j_sub_1002cdd0(esi_3, &var_4c8) == 0)
1002db72                                  goto label_1002dd77
1002db72                              
1002db7e                              if (var_56c != 0)
1002db80                                  *(result_1 + 4) = 0xc2200000
1002db8a                                  *(result_1 + 8) = *(result_2 + 0x24)
1002db8f                                  *(result_2 + 0x24) = result_1
1002db95                                  *result_1 = &result_1[0xc]
1002db97                                  void* edi_1 = &var_4c8
1002db9e                                  int32_t j = 0xffffffff
1002db9e                                  
1002dba3                                  while (j != 0)
1002dba3                                      bool cond:5_1 = 0 != *edi_1
1002dba3                                      edi_1 += 1
1002dba3                                      j -= 1
1002dba3                                      
1002dba3                                      if (not(cond:5_1))
1002dba3                                          break
1002dba3                                  
1002dba5                                  int32_t ecx_9 = not.d(j)
1002dbb2                                  int32_t esi_8
1002dbb2                                  int32_t edi_4
1002dbb2                                  edi_4, esi_8 = __builtin_memcpy(dest: &result_1[0xc], 
1002dbb2                                      src: edi_1 - ecx_9, n: ecx_9 u>> 2 << 2)
1002dbb9                                  __builtin_memcpy(dest: edi_4, src: esi_8, n: ecx_9 & 3)
1002dbbb                                  void* edi_5 = &var_4c8
1002dbc2                                  int32_t j_1 = 0xffffffff
1002dbc2                                  
1002dbc5                                  while (j_1 != 0)
1002dbc5                                      bool cond:6_1 = 0 != *edi_5
1002dbc5                                      edi_5 += 1
1002dbc5                                      j_1 -= 1
1002dbc5                                      
1002dbc5                                      if (not(cond:6_1))
1002dbc5                                          break
1002dbc5                                  
1002dbce                                  *(result_2 + 0x20) += 1
1002dbd1                                  result_1 = &result_1[not.d(j_1) + 0xc]
1002dbd1                              
1002dbd5                              void* edi_6 = &var_4c8
1002dbdc                              int32_t j_2 = 0xffffffff
1002dbdc                              
1002dbe5                              while (j_2 != 0)
1002dbe5                                  bool cond:4_1 = 0 != *edi_6
1002dbe5                                  edi_6 += 1
1002dbe5                                  j_2 -= 1
1002dbe5                                  
1002dbe5                                  if (not(cond:4_1))
1002dbe5                                      break
1002dbe5                              
1002dbf8                              var_570_1 = var_570_1 + not.d(j_2) - 1 + 0xd
1002dbfc                              i = j_sub_1003db20(var_574_1, U"}{")
1002dc06                          while (i == 0)
1002db72                          goto label_1002da2a
1002db72              
1002dcb1              esi_1 = var_574_1
1002dcb1              
1002dcc8              if (j_sub_1003d580(esi_1, &var_430) == 0)
1002dcc8                  break
1002dcc8          
1002dcce          edi = var_570_1
1002dcce      
1002dcd3      j_sub_1003e000(esi_1)
1002dcd3      
1002dce1      if (var_564 == 0)
1002ddc5          data_10063fe8(3, "couldn't find chat %s in %s\n", arg2, &var_558)
1002ddda          return 0
1002ddda      
1002dceb      eax_2 = var_56c + 1
1002dcef      var_56c = eax_2
1002dcef      
1002dcf3      if (eax_2 s>= 2)
1002dcf3          break
1002dcf3  
1002dd07  if (var_55c == 0)
1002ddea      data_10063fe8(1, "loaded %s from %s\n", arg2, arg1)
1002dd07  else
1002dd21      data_10063fe8(1, "loaded %s from %s\%s\n", arg2, &var_558, arg1)
1002dd21  
1002ddf8  j_sub_1002cd60(result)
1002de0c  return result

1002de0d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
1002de20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002de40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002de60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002de80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002dea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002dec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002dee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002df00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002df20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002df40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002df60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002df70    void* sub_1002df70(void* arg1)

1002df75  void* result = *(arg1 + 0xb8)
1002df75  
1002df7d  if (result != 0)
1002df80      result = j_sub_100390b0(result)
1002df80  
1002df88  *(arg1 + 0xb8) = 0
1002df93  return result

1002df94                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1002dfa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002dfb0    void* sub_1002dfb0(void* arg1)

1002dfb6  j_sub_1002df70(arg1)
1002dfc6  void* i
1002dfc6  
1002dfc6  for (i = j_sub_1002ab90(arg1); i != 0; i = j_sub_1002ab90(arg1))
1002dfca      j_sub_1002aa20(arg1, i)
1002dfca  
1002dfdd  return i

1002dfde                                                                                            90 90                                ..
1002dfe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002dff0    int32_t sub_1002dff0(void* arg1, char* arg2, char* arg3)

1002dff8  j_sub_1002df70(arg1)
1002e007  int32_t* eax = j_sub_1002d8a0(arg2, arg3)
1002e00f  *(arg1 + 0xb8) = eax
1002e00f  
1002e017  if (eax != 0)
1002e039      return 0
1002e039  
1002e022  data_10063fe8(4, "couldn't load chat %s from %s\n", arg3, arg2)
1002e033  return 0x1b

1002e03a                                                                                90 90 90 90 90 90                            ......
1002e040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002e060    int32_t sub_1002e060(int32_t arg1, char* arg2, int32_t arg3, int32_t arg4, int32_t arg5)

1002e06d  char* edx = arg2
1002e077  int32_t esi = arg1 + 0x14
1002e07a  int32_t eax
1002e07a  eax.b = *edx
1002e07c  char* ebx = nullptr
1002e081  char* ebp = edx
1002e083  int32_t var_a0 = esi
1002e083  
1002e087  if (eax.b != 0)
1002e096      while (true)
1002e096          eax.b = *ebp
1002e096          
1002e09b          if (eax.b != 1)
1002e229              ebx[esi] = eax.b
1002e22c              ebx = &ebx[1]
1002e22d              ebp = &ebp[1]
1002e22d              
1002e234              if (ebx s>= 0x96)
1002e2d4                  data_10063fe8(3, "BotConstructChat: message "%s" t…", edx)
1002e2da                  break
1002e09b          else
1002e0a1              eax.b = ebp[1]
1002e0a4              ebp = &ebp[1]
1002e0a7              void* var_9c
1002e0a7              char var_98[0x98]
1002e0a7              char (* edi_7)[0x98]
1002e0a7              
1002e0a7              if (eax.b == 0x72)
1002e1a4                  eax.b = ebp[1]
1002e1a7                  ebp = &ebp[1]
1002e1a8                  int32_t ecx_9 = 0
1002e1a8                  
1002e1ac                  if (eax.b != 0)
1002e1b0                      while (eax.b != 1)
1002e1b2                          ebp = &ebp[1]
1002e1b3                          var_98[ecx_9] = eax.b
1002e1b7                          ecx_9 += 1
1002e1b8                          eax.b = *ebp
1002e1b8                          
1002e1bd                          if (eax.b == 0)
1002e1bd                              break
1002e1bd                  
1002e1bf                  eax.b = *ebp
1002e1c2                  var_98[ecx_9] = 0
1002e1c2                  
1002e1c9                  if (eax.b != 0)
1002e1cb                      ebp = &ebp[1]
1002e1cb                  
1002e1d1                  char (* eax_5)[0x98] = j_sub_1002bdd0(&var_98)
1002e1d1                  
1002e1dd                  if (eax_5 == 0)
1002e2a8                      return data_10063fe8(3, "BotConstructChat: unknown random…", &var_98)
1002e2a8                  
1002e1e3                  char (* edi_8)[0x98] = eax_5
1002e1e5                  int32_t i = 0xffffffff
1002e1e5                  
1002e1ea                  while (i != 0)
1002e1ea                      bool cond:1_1 = 0 != *edi_8
1002e1ea                      edi_8 = &(*edi_8)[1]
1002e1ea                      i -= 1
1002e1ea                      
1002e1ea                      if (not(cond:1_1))
1002e1ea                          break
1002e1ea                  
1002e1f7                  if (not.d(i) - 1 + ebx u>= 0x96)
1002e2cb                      return data_10063fe8(3, "BotConstructChat: message "%s" t…", arg2)
1002e2cb                  
1002e1fd                  char (* edi_9)[0x98] = eax_5
1002e1ff                  int32_t i_1 = 0xffffffff
1002e1ff                  
1002e204                  while (i_1 != 0)
1002e204                      bool cond:2_1 = 0 != *edi_9
1002e204                      edi_9 = &(*edi_9)[1]
1002e204                      i_1 -= 1
1002e204                      
1002e204                      if (not(cond:2_1))
1002e204                          break
1002e204                  
1002e206                  int32_t ecx_13 = not.d(i_1)
1002e20a                  var_9c = &ebx[esi]
1002e219                  int32_t esi_7
1002e219                  int32_t edi_12
1002e219                  edi_12, esi_7 = __builtin_memcpy(dest: var_9c, src: edi_9 - ecx_13, 
1002e219                      n: ecx_13 u>> 2 << 2)
1002e220                  __builtin_memcpy(dest: edi_12, src: esi_7, n: ecx_13 & 3)
1002e222                  edi_7 = eax_5
1002e18f                  label_1002e18f:
1002e18f                  int32_t i_2 = 0xffffffff
1002e18f                  
1002e194                  while (i_2 != 0)
1002e194                      bool cond:3_1 = 0 != *edi_7
1002e194                      edi_7 = &(*edi_7)[1]
1002e194                      i_2 -= 1
1002e194                      
1002e194                      if (not(cond:3_1))
1002e194                          break
1002e194                  
1002e196                  esi = var_a0
1002e19d                  ebx = &ebx[not.d(i_2) - 1]
1002e0a7              else
1002e0af                  int32_t ecx
1002e0af                  
1002e0af                  if (eax.b == 0x76)
1002e0c7                      ecx.b = ebp[1]
1002e0ca                      ebp = &ebp[1]
1002e0cb                      eax = 0
1002e0cb                      
1002e0cf                      if (ecx.b != 0)
1002e0d4                          while (ecx.b != 1)
1002e0dc                              ebp = &ebp[1]
1002e0dd                              eax = sx.d(ecx.b) + eax * 0xa - 0x30
1002e0e1                              ecx.b = *ebp
1002e0e1                              
1002e0e6                              if (ecx.b == 0)
1002e0e6                                  break
1002e0e6                      
1002e0ec                      if (*ebp != 0)
1002e0ee                          ebp = &ebp[1]
1002e0ee                      
1002e0f2                      if (eax s> 0xa)
1002e265                          return data_10063fe8(3, "BotConstructChat: message %s var…", edx, 
1002e265                              eax)
1002e265                      
1002e0ff                      int32_t edi_1 = *(arg4 + (eax << 3))
1002e0ff                      
1002e104                      if (edi_1 != 0)
1002e10e                          int32_t i_3 = 0
1002e10e                          
1002e113                          if (*(arg4 + (eax << 3) + 4) s> 0)
1002e12d                              do
1002e11d                                  void* edx_2 = edi_1 - &var_98 + i_3
1002e120                                  i_3 += 1
1002e121                                  edx_2.b = *(&var_98 + edx_2)
1002e125                                  *(&var_9c:3 + i_3) = edx_2.b
1002e12d                              while (i_3 s< *(arg4 + (eax << 3) + 4))
1002e12d                              
1002e12f                              esi = var_a0
1002e12f                          
1002e13a                          var_98[i_3] = 0
1002e145                          j_sub_1002b7c0(&var_98, arg5)
1002e14a                          char (* edi_2)[0x98] = &var_98
1002e14e                          int32_t i_4 = 0xffffffff
1002e14e                          
1002e156                          while (i_4 != 0)
1002e156                              bool cond:4_1 = 0 != *edi_2
1002e156                              edi_2 = &(*edi_2)[1]
1002e156                              i_4 -= 1
1002e156                              
1002e156                              if (not(cond:4_1))
1002e156                                  break
1002e156                          
1002e163                          if (not.d(i_4) - 1 + ebx u>= 0x96)
1002e288                              return data_10063fe8(3, "BotConstructChat: message %s too…", 
1002e288                                  arg2)
1002e288                          
1002e169                          char (* edi_3)[0x98] = &var_98
1002e16d                          int32_t i_5 = 0xffffffff
1002e16d                          
1002e170                          while (i_5 != 0)
1002e170                              bool cond:5_1 = 0 != *edi_3
1002e170                              edi_3 = &(*edi_3)[1]
1002e170                              i_5 -= 1
1002e170                              
1002e170                              if (not(cond:5_1))
1002e170                                  break
1002e170                          
1002e172                          int32_t ecx_4 = not.d(i_5)
1002e182                          int32_t esi_4
1002e182                          int32_t edi_6
1002e182                          edi_6, esi_4 = __builtin_memcpy(dest: &ebx[esi], 
1002e182                              src: edi_3 - ecx_4, n: ecx_4 u>> 2 << 2)
1002e189                          __builtin_memcpy(dest: edi_6, src: esi_4, n: ecx_4 & 3)
1002e18b                          edi_7 = &var_98
1002e156                          goto label_1002e18f
1002e0af                  else
1002e0b9                      eax, ecx = data_10063fe8(4, "BotConstructChat: message "%s" i…", edx)
1002e0b9          
1002e23e          if (*ebp == 0)
1002e23e              break
1002e23e          
1002e08f          edx = arg2
1002e08f  
1002e2e4  ebx[esi] = 0
1002e2ea  int32_t result
1002e2ea  int80_t st0
1002e2ea  result, st0 = j_sub_1002b830(esi, arg3)
1002e2fc  return result

1002e2fd                                                                                         90 90 90                               ...
1002e300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e3a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002e3b0    int32_t sub_1002e3b0(int32_t* arg1, int32_t arg2)

1002e3b0  int32_t* eax = arg1
1002e3b0  
1002e3bb  for (char* i = *eax; i != 0; i = *(i + 0x28))
1002e3c3      int32_t ecx
1002e3c3      int32_t edx
1002e3c3      eax, ecx, edx = sub_10045cb0(eax, edx, ecx, i, arg2)
1002e3c3      
1002e3cd      if (eax == 0)
1002e3dc          void* j_1 = *(i + 0x24)
1002e3df          int32_t* ebx_1 = nullptr
1002e3e3          arg1 = nullptr
1002e3e3          
1002e3e7          if (j_1 == 0)
1002e408              label_1002e408:
1002e408              int32_t* j = *(i + 0x24)
1002e40b              int32_t* j_3 = nullptr
1002e40f              arg1 = nullptr
1002e40f              
1002e417              if (j != 0)
1002e446                  do
1002e419                      long double x87_r7_2 = fconvert.t(arg1)
1002e41d                      long double temp1_1 = fconvert.t(0f)
1002e41d                      x87_r7_2 - temp1_1
1002e423                      eax.w = (x87_r7_2 < temp1_1 ? 1 : 0) << 8
1002e423                          | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
1002e423                          | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe
1002e423                      
1002e428                      if ((eax:1.b & 0x40) != 0)
1002e43b                          j_3 = j
1002e43d                          arg1 = j[1]
1002e428                      else
1002e42a                          long double x87_r7_3 = fconvert.t(j[1])
1002e42d                          long double temp2_1 = fconvert.t(arg1)
1002e42d                          x87_r7_3 - temp2_1
1002e431                          eax.w = (x87_r7_3 < temp2_1 ? 1 : 0) << 8
1002e431                              | (is_unordered.t(x87_r7_3, temp2_1) ? 1 : 0) << 0xa
1002e431                              | (x87_r7_3 == temp2_1 ? 1 : 0) << 0xe
1002e431                          
1002e436                          if ((eax:1.b & 1) != 0)
1002e43b                              j_3 = j
1002e43d                              arg1 = j[1]
1002e43d                      
1002e441                      j = j[2]
1002e446                  while (j != 0)
1002e446                  
1002e44a                  if (j_3 != 0)
1002e451                      return *j_3
1002e3e7          else
1002e3fe              do
1002e3e9                  long double st0_1 = j_sub_1000e120()
1002e3ee                  long double temp0_1 = fconvert.t(*(j_1 + 4))
1002e3ee                  st0_1 - temp0_1
1002e3f1                  eax.w = (st0_1 < temp0_1 ? 1 : 0) << 8
1002e3f1                      | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
1002e3f1                      | (st0_1 == temp0_1 ? 1 : 0) << 0xe
1002e3f1                  
1002e3f6                  if ((eax:1.b & 1) == 0)
1002e3f8                      ebx_1 += 1
1002e3f8                  
1002e3f9                  j_1 = *(j_1 + 8)
1002e3fe              while (j_1 != 0)
1002e3fe              
1002e406              if (ebx_1 s<= 0)
1002e406                  goto label_1002e408
1002e406              
1002e46e              int16_t x87control
1002e46e              int32_t eax_5 = __ftol(x87control, 
1002e46e                  float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
1002e46e                      * float.t(ebx_1))
1002e473              int32_t* j_2 = *(i + 0x24)
1002e476              int32_t edi_2 = eax_5
1002e476              
1002e47a              if (j_2 != 0)
1002e497                  do
1002e480                      long double st0_2 = j_sub_1000e120()
1002e485                      long double temp3_1 = fconvert.t(j_2[1])
1002e485                      st0_2 - temp3_1
1002e488                      eax_5.w = (st0_2 < temp3_1 ? 1 : 0) << 8
1002e488                          | (is_unordered.t(st0_2, temp3_1) ? 1 : 0) << 0xa
1002e488                          | (st0_2 == temp3_1 ? 1 : 0) << 0xe
1002e488                      
1002e48d                      if ((eax_5:1.b & 1) == 0)
1002e48f                          int32_t temp4_1 = edi_2
1002e48f                          edi_2 -= 1
1002e48f                          
1002e490                          if (temp4_1 - 1 s< 0)
1002e4a4                              long double x87_r7_9 = j_sub_1000e120() + fconvert.t(20f)
1002e4aa                              int32_t result = *j_2
1002e4ad                              j_2[1] = fconvert.s(x87_r7_9)
1002e4b2                              return result
1002e4b2                      
1002e492                      j_2 = j_2[2]
1002e497                  while (j_2 != 0)
1002e497                  
1002e49e                  return 0
1002e49e          
1002e3e7          break
1002e3e7  
1002e3db  return 0

1002e4b3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1002e4c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e4e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002e510    int32_t* sub_1002e510(void* arg1, int32_t arg2)

1002e517  int32_t* result = *(arg1 + 0xb8)
1002e517  
1002e520  if (result != 0)
1002e528      result = j_sub_1002e3b0(result, arg2)
1002e528      
1002e534      if (result != 0)
1002e544          void s
1002e544          __builtin_memset(&s, c: 0, n: 0x50)
1002e546          int32_t i_1
1002e546          int32_t i = i_1
1002e54a          int32_t ebx_1 = 0
1002e54c          int32_t* esi_1 = &i_1
1002e550          void var_4c
1002e550          void* edx_1 = &var_4c
1002e550          
1002e556          while (i != 0)
1002e558              int32_t j = 0xffffffff
1002e55d              *(edx_1 - 4) = i
1002e560              esi_1 = &esi_1[1]
1002e560              
1002e563              while (j != 0)
1002e563                  bool cond:0_1 = 0 != *i
1002e563                  i += 1
1002e563                  j -= 1
1002e563                  
1002e563                  if (not(cond:0_1))
1002e563                      break
1002e563              
1002e565              i = *esi_1
1002e567              edx_1 += 8
1002e56d              ebx_1 += 1
1002e56e              *(edx_1 - 8) = not.d(j) - 1
1002e56e              
1002e574              if (ebx_1 s>= 0xa)
1002e574                  break
1002e574          
1002e585          return j_sub_1002e060(arg1, result, 0, &s, 0)
1002e585  
1002e594  return result

1002e595                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
1002e5a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e5c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002e5d0    int32_t sub_1002e5d0(int32_t* arg1)

1002e5d7  void* var_10 = 1
1002e5d9  data_10063fe8(1, &data_1005c65c)
1002e5d9  
1002e5ea  for (int32_t* i = *arg1; i != 0; i = i[3])
1002e5f1      char eax_1 = (*i).b
1002e5f5      char* var_14
1002e5f5      
1002e5f5      if ((eax_1 & 1) != 0)
1002e5f7          var_10 = &data_1005d548
1002e607          var_14 = 1
1002e609          data_10063fe8(1, var_10)
1002e5f5      else if ((eax_1 & 2) != 0)
1002e602          var_10 = &data_1005d544
1002e607          var_14 = 1
1002e609          data_10063fe8(1, var_10)
1002e609      
1002e612      char eax_2 = (*i).b
1002e612      
1002e616      if ((eax_2 & 4) != 0)
1002e618          var_10 = "name"
1002e61d          var_14 = 1
1002e61f          data_10063fe8(1, "name")
1002e616      else if ((eax_2 & 0x20) != 0)
1002e631          var_10 = "female"
1002e636          var_14 = 1
1002e638          data_10063fe8(1, "female")
1002e62f      else if ((eax_2 & 0x40) != 0)
1002e64a          var_10 = "male"
1002e64f          var_14 = 1
1002e651          data_10063fe8(1, "male")
1002e648      else if ((eax_2 & 0x80) != 0)
1002e663          var_10 = &data_1005d530
1002e668          var_14 = 1
1002e66a          data_10063fe8(1, &data_1005d530)
1002e661      else if ((eax_2 & 0x10) != 0)
1002e683          data_10063fe8(1, &data_1005d334)
1002e683          
1002e691          for (int32_t* j = i[2]; j != 0; j = j[3])
1002e696              char* var_14_1
1002e696              int32_t var_10_1
1002e696              
1002e696              if (*j != 2)
1002e6a8                  var_10_1 = j[2]
1002e6a9                  var_14_1 = &data_1005d37c
1002e696              else
1002e69d                  var_10_1 = *j[1]
1002e69e                  var_14_1 = ""%s""
1002e69e              
1002e6b0              data_10063fe8(1, var_14_1, var_10_1)
1002e6b0              
1002e6be              if (j[3] != 0)
1002e6c7                  data_10063fe8(1, &data_1005d280)
1002e6c7          
1002e6d7          var_10 = &data_1005d32c
1002e6dc          var_14 = 1
1002e6de          data_10063fe8(1, &data_1005d32c)
1002e67a      else if ((eax_2 & 8) != 0)
1002e6f0          var_10 = i[1]
1002e6f1          var_14 = ""%s""
1002e6f8          data_10063fe8(1, ""%s"", var_10)
1002e6f8      
1002e706      if (i[3] == 0)
1002e720          var_14.q = fconvert.d(fconvert.t(arg1[1]))
1002e72a          data_10063fe8(1, "] = %1.0f\n", var_14, var_10)
1002e706      else
1002e708          var_10 = &data_1005d280
1002e70d          var_14 = 1
1002e70f          data_10063fe8(1, &data_1005d280)
1002e70f  
1002e751  return data_10063fe8(1, &data_1005d51c)

1002e752                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1002e760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002e7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002e7d0    void sub_1002e7d0(int32_t* arg1, int32_t arg2)

1002e7e9  void s
1002e7e9  __builtin_memset(&s, c: 0, n: 0xf0)
1002e7eb  int32_t edi = arg2
1002e7f2  int32_t i = 0xffffffff
1002e7f2  
1002e7f5  while (i != 0)
1002e7f5      bool cond:0_1 = 0 != *edi
1002e7f5      edi += 1
1002e7f5      i -= 1
1002e7f5      
1002e7f5      if (not(cond:0_1))
1002e7f5          break
1002e7f5  
1002e7f7  int32_t ecx = not.d(i)
1002e7fb  int32_t* i_1 = data_10064380
1002e807  int32_t var_fc = 0
1002e812  int32_t esi_1
1002e812  int32_t edi_2
1002e812  edi_2, esi_1 = __builtin_memcpy(dest: &s, src: edi - ecx, n: ecx u>> 2 << 2)
1002e816  char** j_2 = nullptr
1002e823  __builtin_memcpy(dest: edi_2, src: esi_1, n: ecx & 3)
1002e823  
1002e825  if (i_1 != 0)
1002e974      do
1002e832          int32_t* esi_2 = *i_1
1002e834          int32_t edi_3 = 0
1002e834          
1002e838          if (esi_2 != 0)
1002e83e              while (true)
1002e83e                  char ecx_4 = (*esi_2).b
1002e840                  int32_t eax_1 = 0
1002e840                  
1002e845                  if ((ecx_4 & 0x20) != 0)
1002e84b                      eax_1.b = *arg1 == 1
1002e845                  else if ((ecx_4 & 0x40) != 0)
1002e85d                      eax_1.b = *arg1 == 2
1002e853                  else if ((ecx_4 & 0x80) != 0)
1002e86e                      eax_1.b = *arg1 == 0
1002e865                  else if ((ecx_4 & 0x10) != 0)
1002e881                      eax_1 = j_sub_1002c800(esi_2[2], &s)
1002e876                  else if ((ecx_4 & 8) != 0)
1002e89e                      int32_t eax_3 = j_sub_1002acf0(arg2, esi_2[1], 0)
1002e8a6                      int32_t eax_4 = neg.d(eax_3)
1002e8aa                      eax_1 = neg.d(sbb.d(eax_4, eax_4, eax_3 != 0))
1002e8aa                  
1002e8ac                  char ecx_8 = (*esi_2).b
1002e8ac                  
1002e8b1                  if ((ecx_8 & 1) != 0)
1002e8b5                      if (eax_1 == 0)
1002e8b5                          break
1002e8b5                      
1002e8d0                      edi_3 = 1
1002e8b1                  else if ((ecx_8 & 2) == 0)
1002e8ce                      if (eax_1 != 0)
1002e8d0                          edi_3 = 1
1002e8c0                  else if (eax_1 != 0)
1002e8c4                      break
1002e8c4                  
1002e8d5                  esi_2 = esi_2[3]
1002e8d5                  
1002e8da                  if (esi_2 == 0)
1002e8e2                      if (edi_3 != 0)
1002e8e8                          long double x87_r7_1 = float.t(var_fc)
1002e8ec                          long double temp1_1 = fconvert.t(i_1[1])
1002e8ec                          x87_r7_1 - temp1_1
1002e8ef                          eax_1.w = (x87_r7_1 < temp1_1 ? 1 : 0) << 8
1002e8ef                              | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
1002e8ef                              | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe
1002e8ef                          
1002e8f4                          if ((eax_1:1.b & 1) != 0)
1002e8f6                              void* j = i_1[3]
1002e8f9                              int32_t edi_4 = 0
1002e8fd                              int32_t var_f8_1 = 0
1002e8fd                              
1002e901                              if (j != 0)
1002e918                                  do
1002e903                                      long double st0_1 = j_sub_1000e120()
1002e908                                      long double temp2_1 = fconvert.t(*(j + 4))
1002e908                                      st0_1 - temp2_1
1002e90b                                      eax_1.w = (st0_1 < temp2_1 ? 1 : 0) << 8
1002e90b                                          | (is_unordered.t(st0_1, temp2_1) ? 1 : 0) << 0xa
1002e90b                                          | (st0_1 == temp2_1 ? 1 : 0) << 0xe
1002e90b                                      
1002e910                                      if ((eax_1:1.b & 1) == 0)
1002e912                                          edi_4 += 1
1002e912                                      
1002e913                                      j = *(j + 8)
1002e918                                  while (j != 0)
1002e918                                  
1002e91a                                  var_f8_1 = edi_4
1002e91a                              
1002e93a                              int32_t eax_8
1002e93a                              int16_t x87control
1002e93a                              eax_8, x87control = __ftol(x87control, 
1002e93a                                  float.t(sub_10045187() & 0x7fff)
1002e93a                                      * fconvert.t(3.05185094e-05f) * float.t(var_f8_1))
1002e93f                              char** j_1 = i_1[3]
1002e942                              int32_t edi_5 = eax_8
1002e942                              
1002e946                              for (; j_1 != 0; j_1 = j_1[2])
1002e948                                  int32_t temp3_1 = edi_5
1002e948                                  edi_5 -= 1
1002e948                                  
1002e949                                  if (temp3_1 - 1 s< 0)
1002e95d                                      if (j_1 != 0)
1002e962                                          j_2 = j_1
1002e966                                          int32_t eax_9
1002e966                                          eax_9, x87control =
1002e966                                              __ftol(x87control, fconvert.t(i_1[1]))
1002e96b                                          var_fc = eax_9
1002e96b                                      
1002e95d                                      break
1002e95d                                  
1002e94b                                  j_sub_1000e120()
1002e94b                      
1002e8e2                      break
1002e8e2          
1002e96f          i_1 = i_1[4]
1002e974      while (i_1 != 0)
1002e974      
1002e980      if (j_2 != 0)
1002e998          int32_t var_114_3 = 0x10
1002e99a          void var_50
1002e99a          void* var_118_3 = &var_50
1002e99c          j_2[1] = fconvert.s(j_sub_1000e120() + fconvert.t(20f))
1002e9a3          j_sub_1002e060(arg1, *j_2, i_1, var_118_3, var_114_3)

1002e9c8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1002e9e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002ea00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002ea20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002ea40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002ea50    int32_t sub_1002ea50(int32_t arg1)

1002ea55  int32_t i = 0xffffffff
1002ea58  int32_t edi = arg1 + 0x14
1002ea58  
1002ea5d  while (i != 0)
1002ea5d      bool cond:0_1 = 0 != *edi
1002ea5d      edi += 1
1002ea5d      i -= 1
1002ea5d      
1002ea5d      if (not(cond:0_1))
1002ea5d          break
1002ea5d  
1002ea65  return not.d(i) - 1

1002ea66                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

1002ea80    int32_t sub_1002ea80(void* arg1, int32_t arg2, int32_t arg3)

1002ea86  int32_t i = 0xffffffff
1002ea8c  char eax = 0
1002ea8e  char* edi = arg1 + 0x14
1002ea8e  
1002ea90  while (i != 0)
1002ea90      bool cond:0_1 = 0 != *edi
1002ea90      edi = &edi[1]
1002ea90      i -= 1
1002ea90      
1002ea90      if (not(cond:0_1))
1002ea90          break
1002ea90  
1002ea95  if (not.d(i) != 1)
1002ea9f      if (arg3 == 1)
1002eaa6          j_sub_100370c0(arg2, arg1 + 0x14)
1002eaab          char eax_2 = data_1006294c
1002eab3          *(arg1 + 0x14) = eax_2
1002eab7          return eax_2
1002eab7      
1002eabd      j_sub_10037090(arg2, arg1 + 0x14)
1002eac2      eax = data_1006294c
1002eaca      *(arg1 + 0x14) = eax
1002eaca  
1002eace  return eax

1002eacf                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1002eae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002eaf0    int32_t* sub_1002eaf0(int32_t* arg1, int32_t arg2)

1002eaf5  if (arg2 == 1)
1002eb14      *arg1 = 1
1002eb1a      return arg2 - 1
1002eb1a  
1002eaf8  if (arg2 != 2)
1002eafe      *arg1 = 0
1002eb04      return arg1
1002eb04  
1002eb09  *arg1 = 2
1002eb0f  return arg2 - 2

1002eb1b                                                                                   90 90 90 90 90                             .....
1002eb20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002eb30    char* sub_1002eb30(void* arg1, char* arg2)

1002eb3d  *(arg1 + 4) = 0
1002eb3f  *(arg1 + 8) = 0
1002eb42  *(arg1 + 0xc) = 0
1002eb45  *(arg1 + 0x10) = 0
1002eb49  *(arg1 + 0x12) = 0
1002eb5a  return StrCopyFixed(arg1 + 4, arg2, 0xf)

1002eb5b                                                                                   90 90 90 90 90                             .....
1002eb60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002eb70    void sub_1002eb70()

1002eb7a  for (void* i = data_10064380; i != 0; i = *(i + 0x10))
1002eb81      for (void* j = *(i + 0xc); j != 0; j = *(j + 8))
1002eb83          *(j + 4) = 0

1002eb95                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
1002eba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002ebb0    int32_t sub_1002ebb0()

1002ebcf  data_10064384 = j_sub_1002b110(j_sub_10038a60("synfile", "syn.c"))
1002ebe9  data_1006437c = j_sub_1002b990(j_sub_10038a60("rndfile", "rnd.c"))
1002ec03  data_10064378 = j_sub_1002c410(j_sub_10038a60("matchfile", "match.c"))
1002ec08  long double st0 = j_sub_10038a90("nochat", &data_1005b570)
1002ec0d  long double temp0 = fconvert.t(0f)
1002ec0d  st0 - temp0
1002ec0d  
1002ec1b  if ((((st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
1002ec1b          | (st0 == temp0 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
1002ec35      data_10064380 = j_sub_1002d270(j_sub_10038a60("rchatfile", "rchat.c"))
1002ec35  
1002ec3a  j_sub_1002a880()
1002ec41  return 0

1002ec42        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1002ec60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002ec80    void* sub_1002ec80()

1002ec80  void* eax_3 = data_10064374
1002ec80  
1002ec8a  if (eax_3 != 0)
1002ec8d      j_sub_100390b0(eax_3)
1002ec8d  
1002ec95  void* eax = data_10064378
1002ec9a  data_10064374 = 0
1002ec9a  
1002eca2  if (eax != 0)
1002eca5      j_sub_1002c3d0(eax)
1002eca5  
1002ecad  void* eax_1 = data_1006437c
1002ecb2  data_10064378 = 0
1002ecb2  
1002ecba  if (eax_1 != 0)
1002ecbd      j_sub_100390b0(eax_1)
1002ecbd  
1002ecc5  void* eax_2 = data_10064384
1002ecca  data_1006437c = 0
1002ecca  
1002ecd2  if (eax_2 != 0)
1002ecd5      j_sub_100390b0(eax_2)
1002ecd5  
1002ecdd  void* result = data_10064380
1002ece2  data_10064384 = 0
1002ece2  
1002ecea  if (result != 0)
1002eced      result = j_sub_1002d1b0(result)
1002eced  
1002ecf5  data_10064380 = 0
1002ecfc  return result

1002ecfd                                                                                         90 90 90                               ...
1002ed00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002ed20    int32_t* sub_1002ed20(char* arg1)

1002ed41  int16_t x87control
1002ed41  int32_t esi = __ftol(x87control, j_sub_10038a90("max_iteminfo", &data_1005c268))
1002ed45  int32_t var_55c = esi
1002ed45  
1002ed49  if (esi s< 0)
1002ed53      data_10063fe8(3, "max_iteminfo = %d\n", esi)
1002ed63      var_55c = 0x100
1002ed6b      j_sub_10038ac0("max_iteminfo", &data_1005c268)
1002ed70      esi = var_55c
1002ed70  
1002ed82  int32_t var_570_2 = 0x90
1002ed87  void* s
1002ed87  __builtin_memset(&s, c: 0, n: 0x98)
1002ed99  char var_4c0[0x90]
1002ed99  StrCopyFixed(&var_4c0, arg1, var_570_2)
1002ed99  
1002edb5  if (j_sub_10041f60(&var_4c0, &s) == 0)
1002edc6      data_10063fe8(3, "couldn't find %s\n", &var_4c0)
1002eddb      return 0
1002eddb  
1002edeb  void* var_554
1002edeb  char var_550[0x90]
1002edeb  char* eax_5 = j_sub_1003de60(&var_550, s, var_554)
1002edeb  
1002edf7  if (eax_5 == 0)
1002ee08      data_10063fe8(3, "counldn't load %s\n", &var_4c0)
1002ee1d      return 0
1002ee1d  
1002ee2e  int32_t* result = j_sub_10039000(esi * 0x11c + 8)
1002ee3c  char var_430[0x430]
1002ee3c  char (* var_574_6)[0x430] = &var_430
1002ee41  *result = 0
1002ee48  result[1] = &result[2]
1002ee48  
1002ee55  if (j_sub_1003d580(eax_5, var_574_6) != 0)
1002ee5b      while (true)
1002ee5b          char* esi_1 = "iteminfo"
1002ee60          char (* eax_11)[0x430] = &var_430
1002ee67          int32_t eax_13
1002ee67          
1002ee67          while (true)
1002ee67              char edx_2 = *eax_11
1002ee6b              char temp0_1 = *esi_1
1002ee6b              bool c_1 = edx_2 u< temp0_1
1002ee6b              
1002ee6d              if (edx_2 == temp0_1)
1002ee71                  if (edx_2 == 0)
1002ee87                      eax_13 = 0
1002ee89                      break
1002ee89                  
1002ee73                  edx_2 = (*eax_11)[1]
1002ee78                  char temp3_1 = esi_1[1]
1002ee78                  c_1 = edx_2 u< temp3_1
1002ee78                  
1002ee7b                  if (edx_2 == temp3_1)
1002ee7d                      eax_11 = &(*eax_11)[2]
1002ee80                      esi_1 = &esi_1[2]
1002ee80                      
1002ee85                      if (edx_2 != 0)
1002ee85                          continue
1002ee85                      
1002ee87                      eax_13 = 0
1002ee89                      break
1002ee89              
1002ee8b              bool c_2 = unimplemented  {sbb eax, eax}
1002ee8d              eax_13 = sbb.d(sbb.d(eax_11, eax_11, c_1), 0xffffffff, c_2)
1002ee8d              break
1002ee8d          
1002ee92          char* var_574_12
1002ee92          
1002ee92          if (eax_13 != 0)
1002efda              char (* var_570_16)[0x430] = &var_430
1002efdb              var_574_12 = "unknown definition %s\n"
1002ee92          else
1002ee98              int32_t eax_14 = *result
1002ee98              
1002eea1              if (eax_14 s>= var_55c)
1002ef93                  int32_t var_570_13 = var_55c
1002ef94                  var_574_12 = "more than %d item info defined\n"
1002eea1              else
1002eeb4                  void* s_1 = result[1] + eax_14 * 0x11c
1002eebe                  __builtin_memset(s: s_1, c: 0, n: 0x11c)
1002eebe                  
1002eed7                  if (j_sub_1003d740(eax_5, 1, 0, &var_430) == 0)
1002ef9c                      j_sub_100390b0(result)
1002efa2                      j_sub_100390b0(eax_5)
1002efb6                      return 0
1002efb6                  
1002eee5                  j_sub_1003fcb0(&var_430)
1002eef8                  StrCopyFixed(s_1 + 0x50, &var_430, 0x50)
1002eef8                  
1002ef0e                  if (j_sub_10040ad0(eax_5, &data_1005d890, s_1) == 0)
1002efb8                      j_sub_100390b0(result)
1002efbe                      j_sub_1003e000(eax_5)
1002efd2                      return 0
1002efd2                  
1002ef1e                  *(s_1 + 0x118) = *result
1002ef28                  char* var_570_9 = &var_430
1002ef2a                  *result += 1
1002ef2a                  
1002ef37                  if (j_sub_1003d580(eax_5, var_570_9) == 0)
1002ef37                      break
1002ef37                  
1002ef37                  continue
1002ef37          
1002efe1          j_sub_10039200(eax_5, var_574_12)
1002efe7          j_sub_100390b0(result)
1002efed          j_sub_1003e000(eax_5)
1002f001          return 0
1002f001  
1002ef3e  j_sub_1003e000(eax_5)
1002ef3e  
1002ef4b  if (*result == 0)
1002ef54      data_10063fe8(2, "no item info loaded\n")
1002ef54  
1002ef63  if (var_554 != 0)
1002ef7d      data_10063fe8(1, "loaded %s\%s\n", &var_550, &var_4c0)
1002ef92      return result
1002ef92  
1002f011  data_10063fe8(1, "loaded %s\n", &var_4c0)
1002f026  return result

1002f027                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
1002f040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f0a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f0c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f0e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002f100    int32_t* sub_1002f100(int32_t* arg1, int32_t* arg2)

1002f10c  int32_t* result = j_sub_10039000(*arg2 << 2)
1002f116  int32_t i = 0
1002f116  
1002f11e  if (*arg2 s<= 0)
1002f170      return result
1002f170  
1002f122  int32_t edi_1 = 0
1002f124  int32_t* result_1 = result
1002f124  
1002f166  do
1002f133      int32_t eax_3 = j_sub_100369c0(arg1, arg2[1] + edi_1 + 0x50)
1002f13b      *result_1 = eax_3
1002f13b      
1002f140      if (eax_3 s< 0)
1002f149          int32_t var_14_2 = arg2[1] + edi_1 + 0x50
1002f14a          int32_t i_1 = i
1002f150          j_sub_10038d80("item info %d "%s" has no fuzzy w…")
1002f150      
1002f15a      i += 1
1002f15b      result_1 = &result_1[1]
1002f15e      edi_1 += 0x11c
1002f166  while (i s< *arg2)
1002f166  
1002f168  return result

1002f171                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1002f180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002f1a0    int32_t sub_1002f1a0()

1002f1a0  void* eax_4 = data_10064358
1002f1a0  
1002f1a7  if (eax_4 != 0)
1002f1aa      j_sub_100390b0(eax_4)
1002f1aa  
1002f1c3  int16_t x87control
1002f1c3  int32_t eax = __ftol(x87control, j_sub_10038a90("max_levelitems", &data_1005d9ac))
1002f1d0  int32_t edi_1 = eax * 0x34
1002f1d4  int32_t eax_2 = j_sub_10038f90(edi_1)
1002f1d9  int32_t edx = eax - 2
1002f1e1  data_10064358 = eax_2
1002f1e1  
1002f1e6  if (edx s<= 0)
1002f21c      *(edi_1 + eax_2 - 4) = 0
1002f224      int32_t eax_3 = data_10064358
1002f22a      data_10064344 = eax_3
1002f230      return eax_3
1002f230  
1002f1e8  int32_t ecx = 0
1002f1e8  
1002f1f5  while (true)
1002f1f5      *(ecx + eax_2 + 0x30) = ecx + eax_2 + 0x34
1002f1f9      ecx += 0x34
1002f1fc      int32_t temp0_1 = edx
1002f1fc      edx -= 1
1002f1fc      
1002f1fd      if (temp0_1 == 1)
1002f1fd          break
1002f1fd      
1002f1ec      eax_2 = data_10064358
1002f1ec  
1002f205  *(edi_1 + data_10064358 - 4) = 0
1002f214  data_10064344 = data_10064358
1002f21b  return eax_2

1002f231                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1002f240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002f270    void* sub_1002f270()

1002f270  void* result = data_10064344
1002f270  
1002f277  if (result == 0)
1002f280      data_10063fe8(4, "out of level items\n")
1002f28b      return 0
1002f28b  
1002f28f  data_10064344 = *(result + 0x30)
1002f295  return result

1002f296                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1002f2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002f2b0    void* sub_1002f2b0(void* arg1)

1002f2ba  *(arg1 + 0x30) = data_10064344
1002f2bd  data_10064344 = arg1
1002f2c2  return arg1

1002f2c3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

1002f2e0    void* sub_1002f2e0(void* arg1)

1002f2e0  void* ecx_1 = data_10064360
1002f2e0  
1002f2ec  if (ecx_1 != 0)
1002f2ee      *(ecx_1 + 0x2c) = arg1
1002f2ee  
1002f2f1  *(arg1 + 0x2c) = 0
1002f2fe  *(arg1 + 0x30) = data_10064360
1002f301  data_10064360 = arg1
1002f306  return arg1

1002f307                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................

1002f320    void* sub_1002f320(void* arg1)

1002f324  void* ecx = *(arg1 + 0x2c)
1002f324  
1002f329  if (ecx == 0)
1002f336      data_10064360 = *(arg1 + 0x30)
1002f329  else
1002f32e      *(ecx + 0x30) = *(arg1 + 0x30)
1002f32e  
1002f33c  void* ecx_2 = *(arg1 + 0x30)
1002f33c  
1002f341  if (ecx_2 != 0)
1002f346      *(ecx_2 + 0x2c) = *(arg1 + 0x2c)
1002f346  
1002f349  return arg1

1002f34a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

1002f360    int32_t* sub_1002f360()

1002f360  int32_t ebp
1002f360  int32_t var_4 = ebp
1002f369  int32_t __saved_ebx_1
1002f369  int32_t __saved_ebx = __saved_ebx_1
1002f36b  int32_t __saved_esi_1
1002f36b  int32_t __saved_esi = __saved_esi_1
1002f36c  int32_t __saved_edi_1
1002f36c  int32_t __saved_edi = __saved_edi_1
1002f36d  int32_t* result = j_sub_1002f1a0()
1002f372  int32_t* ebx = data_1006435c
1002f378  int32_t esi = 0
1002f37c  data_10064360 = 0
1002f382  data_10064354 = 0
1002f382  
1002f388  if (ebx != 0)
1002f38e      int32_t* eax
1002f38e      int16_t x87control_1
1002f38e      eax, x87control_1 = j_sub_100069a0()
1002f393      char* var_34_1 = "2048"
1002f398      char* var_38_1 = "notspawnflags"
1002f3a7      int32_t eax_1 = __ftol(x87control_1, j_sub_10038a90("notspawnflags", "2048"))
1002f3a7      int16_t top_1 = 0
1002f3b2      int32_t i = 0
1002f3b2      
1002f3b6      if (*ebx s> 0)
1002f400          do
1002f3ce              *(ebx[1] + esi + 0xf0) = j_sub_1000d990(ebx[1] + esi + 0xa0)
1002f3d8              void* eax_6 = ebx[1] + esi
1002f3d8              
1002f3e2              if (*(eax_6 + 0xf0) == 0)
1002f3e7                  void* var_34_3 = eax_6 + 0x50
1002f3e8                  char* var_38_2 = "item %s has modelindex 0"
1002f3ed                  j_sub_10038d80("item %s has modelindex 0")
1002f3ed              
1002f3f7              i += 1
1002f3f8              esi += 0x11c
1002f400          while (i s< *ebx)
1002f400      
1002f404      int32_t* var_1c_1 = eax
1002f404      
1002f408      if (eax != 0)
1002f412          while (true)
1002f412              char* var_34_4 = "classname"
1002f418              char* eax_9 = j_sub_10006760(var_1c_1, "classname")
1002f418              
1002f426              if (eax_9 != 0)
1002f42c                  char* var_34_5 = "spawnflags"
1002f42c                  
1002f440                  if ((eax_1 & j_sub_100068e0(var_1c_1, "spawnflags")) == 0)
1002f448                      int32_t ebp_2 = 0
1002f448                      
1002f44c                      if (*ebx s> 0)
1002f455                          char* edi_1 = ebx[1] + 0x50
1002f455                          
1002f458                          while (true)
1002f458                              char* eax_12 = eax_9
1002f45c                              char* esi_2 = edi_1
1002f45e                              int32_t eax_14
1002f45e                              
1002f45e                              while (true)
1002f45e                                  char edx_2 = *eax_12
1002f460                                  int32_t ecx_3
1002f460                                  ecx_3.b = edx_2
1002f462                                  char temp0_1 = *esi_2
1002f462                                  bool c_1 = edx_2 u< temp0_1
1002f462                                  
1002f464                                  if (edx_2 == temp0_1)
1002f468                                      if (ecx_3.b == 0)
1002f47e                                          eax_14 = 0
1002f480                                          break
1002f480                                      
1002f46a                                      edx_2 = eax_12[1]
1002f46d                                      ecx_3.b = edx_2
1002f46f                                      char temp3_1 = esi_2[1]
1002f46f                                      c_1 = edx_2 u< temp3_1
1002f46f                                      
1002f472                                      if (edx_2 == temp3_1)
1002f474                                          eax_12 = &eax_12[2]
1002f477                                          esi_2 = &esi_2[2]
1002f477                                          
1002f47c                                          if (ecx_3.b != 0)
1002f47c                                              continue
1002f47c                                          
1002f47e                                          eax_14 = 0
1002f480                                          break
1002f480                                  
1002f482                                  bool c_2 = unimplemented  {sbb eax, eax}
1002f484                                  eax_14 =
1002f484                                      sbb.d(sbb.d(eax_12, eax_12, c_1), 0xffffffff, c_2)
1002f484                                  break
1002f484                              
1002f489                              if (eax_14 == 0)
1002f4a6                                  char* var_38_5 = "origin"
1002f4b6                                  float var_14
1002f4b6                                  
1002f4b6                                  if (j_sub_100067e0(var_1c_1, "origin", &var_14) == 0)
1002f58f                                      char* var_38_8 = "item %s without origin\n"
1002f594                                      int32_t var_3c_4 = 3
1002f596                                      data_10063fe8(3, "item %s without origin\n", eax_9)
1002f59c                                      goto label_1002f59f
1002f59c                                  
1002f4bc                                  result = j_sub_1002f270()
1002f4bc                                  
1002f4c7                                  if (result == 0)
1002f4c7                                      goto label_1002f36a
1002f4c7                                  
1002f4d6                                  int32_t eax_18 = data_10064354 + 1
1002f4da                                  data_10064354 = eax_18
1002f4e1                                  *result = eax_18
1002f4e3                                  result[0xa] = 0
1002f4e6                                  result[9] = 0
1002f4ec                                  int32_t edi_5 = ebp_2 * 0x11c
1002f4ef                                  int32_t eax_19 = ebx[1] + edi_5
1002f4ef                                  
1002f50e                                  if (j_sub_1000afd0(&var_14, eax_19 + 0x100, 
1002f50e                                          eax_19 + 0x10c) == 0)
1002f510                                      unimplemented  {fld st0, dword [esp+0x24]}
1002f51b                                      int32_t var_38_6
1002f51b                                      var_38_6.q =
1002f51b                                          fconvert.d(unimplemented  {fstp qword [esp], st0})
1002f51b                                      unimplemented  {fstp qword [esp], st0}
1002f51e                                      unimplemented  {fld st0, dword [esp+0x28]}
1002f525                                      float* var_40
1002f525                                      var_40.q =
1002f525                                          fconvert.d(unimplemented  {fstp qword [esp], st0})
1002f525                                      unimplemented  {fstp qword [esp], st0}
1002f528                                      unimplemented  {fld st0, dword [esp+0x2c]}
1002f52f                                      double var_48_1 =
1002f52f                                          fconvert.d(unimplemented  {fstp qword [esp], st0})
1002f52f                                      unimplemented  {fstp qword [esp], st0}
1002f533                                      char* var_50_1 = "%s in solid at (%1.1f %1.1f %1.1…"
1002f538                                      int32_t var_54_1 = 1
1002f53a                                      data_10063fe8(1, "%s in solid at (%1.1f %1.1f %1.1…", 
1002f53a                                          eax_9, var_48_1, var_40)
1002f53a                                  
1002f543                                  result[1] = ebp_2
1002f54a                                  result[2] = var_14
1002f551                                  int32_t var_10
1002f551                                  result[3] = var_10
1002f558                                  int32_t var_c
1002f558                                  result[4] = var_c
1002f561                                  void* eax_24 = ebx[1] + edi_5
1002f577                                  int32_t eax_26 = j_sub_1000b300(&var_14, eax_24 + 0x100, 
1002f577                                      eax_24 + 0x10c, &result[6])
1002f577                                  top_1 -= 1
1002f577                                  unimplemented  {call j_sub_1000b300}
1002f57c                                  int32_t* result_1 = result
1002f57d                                  result[5] = eax_26
1002f580                                  j_sub_1002f2e0()
1002f588                                  goto label_1002f59f
1002f588                              
1002f48d                              ebp_2 += 1
1002f48e                              edi_1 = &edi_1[0x11c]
1002f48e                              
1002f496                              if (ebp_2 s>= *ebx)
1002f496                                  break
1002f496                      
1002f59f                      label_1002f59f:
1002f59f                      
1002f5a1                      if (ebp_2 s>= *ebx)
1002f5a7                          char* var_34_10 = eax_9
1002f5a8                          char* var_38_9 = "entity %s unkown item"
1002f5ad                          j_sub_10038d80("entity %s unkown item")
1002f5ad              
1002f5b9              int32_t* eax_28 = var_1c_1[1]
1002f5be              var_1c_1 = eax_28
1002f5be              
1002f5c2              if (eax_28 == 0)
1002f5c2                  break
1002f5c2      
1002f5ce      char* var_38_10 = "found %d level items\n"
1002f5d3      int32_t var_3c_5 = 1
1002f5d5      result = data_10063fe8(1, "found %d level items\n", data_10064354)
1002f5d5  
1002f36a  label_1002f36a:
1002f36a  var_4
1002f5e5  return result

1002f5e6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
1002f600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002f680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002f6a0    int32_t sub_1002f6a0(int32_t arg1)

1002f6a0  void* edx_1 = data_1006435c
1002f6a0  
1002f6a8  if (edx_1 != 0)
1002f6b1      for (int32_t* i = data_10064360; i != 0; i = i[0xc])
1002f6b9          if (*i == arg1)
1002f6d9              return *(edx_1 + 4) + i[1] * 0x11c
1002f6d9  
1002f6c7  return &data_1006294c

1002f6da                                                                                90 90 90 90 90 90                            ......
1002f6e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002f6f0    int32_t sub_1002f6f0(int32_t arg1)

1002f702  __builtin_memset(s: arg1 + 0x1cc, c: 0, n: 0x100)
1002f70f  __builtin_memset(s: arg1 + 0x2cc, c: 0, n: 0x100)
1002f712  return 0

1002f713                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1002f720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002f730    int32_t* sub_1002f730(int32_t* arg1)

1002f737  int32_t* esi = &arg1[0x73]
1002f73d  int32_t i_1 = 0x40
1002f783  int32_t* result
1002f783  int32_t i
1002f783  
1002f783  do
1002f742      long double st0_1 = j_sub_1000e120()
1002f747      long double temp0_1 = fconvert.t(esi[0x40])
1002f747      st0_1 - temp0_1
1002f74d      result.w = (st0_1 < temp0_1 ? 1 : 0) << 8
1002f74d          | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
1002f74d          | (st0_1 == temp0_1 ? 1 : 0) << 0xe
1002f74d      
1002f752      if ((result:1.b & 0x41) != 0)
1002f754          int32_t edi_1 = *esi
1002f756          long double st0_2 = j_sub_1000e120()
1002f764          double var_14_1 = fconvert.d(fconvert.t(esi[0x40]) - st0_2)
1002f767          int32_t var_18_1 = edi_1
1002f771          int32_t var_1c_2 = j_sub_1002f6a0(edi_1)
1002f777          result = j_sub_10038d80("avoid goal %s, number %d for %f …")
1002f777      
1002f77f      esi = &esi[1]
1002f782      i = i_1
1002f782      i_1 -= 1
1002f783  while (i != 1)
1002f788  return result

1002f789                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1002f7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002f7b0    int32_t sub_1002f7b0(void* arg1, int32_t arg2, float arg3)

1002f7b7  int32_t i = 0
1002f7b9  float* edi = arg1 + 0x2cc
1002f7d4  int16_t eax
1002f7d4  
1002f7d4  do
1002f7bf      long double st0_1 = j_sub_1000e120()
1002f7c4      long double temp0_1 = fconvert.t(*edi)
1002f7c4      st0_1 - temp0_1
1002f7c6      eax = (st0_1 < temp0_1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
1002f7c6          | (st0_1 == temp0_1 ? 1 : 0) << 0xe
1002f7c6      
1002f7cb      if ((eax:1.b & 0x41) == 0)
1002f7de          *(arg1 + (i << 2) + 0x1cc) = arg2
1002f7ef          *(arg1 + (i << 2) + 0x2cc) = fconvert.s(j_sub_1000e120() + fconvert.t(arg3))
1002f7f8          return arg2
1002f7f8      
1002f7cd      i += 1
1002f7ce      edi = &edi[1]
1002f7d4  while (i s< 0x40)
1002f7d4  
1002f7d9  return eax

1002f7f9                                                                             90 90 90 90 90 90 90                           .......
1002f800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002f820    long double sub_1002f820(void* arg1, int32_t arg2)

1002f82c  int32_t i = 0
1002f82e  float* edi = arg1 + 0x2cc
1002f82e  
1002f851  do
1002f83a      if (edi[-0x40] == arg2)
1002f83c          long double st0_1 = j_sub_1000e120()
1002f841          long double temp0_1 = fconvert.t(*edi)
1002f841          st0_1 - temp0_1
1002f841          
1002f848          if ((((st0_1 < temp0_1 ? 1 : 0) << 8
1002f848                  | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
1002f848                  | (st0_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
1002f85e              long double st0_2 = j_sub_1000e120()
1002f86e              return fconvert.t(*(arg1 + (i << 2) + 0x2cc)) - st0_2
1002f86e      
1002f84a      i += 1
1002f84b      edi = &edi[1]
1002f851  while (i s< 0x40)
1002f851  
1002f85d  return fconvert.t(0f)

1002f86f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1002f880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002f890    int32_t sub_1002f890(int32_t arg1, char* arg2, int32_t* arg3)

1002f89a  if (data_1006435c != 0)
1002f8a4      for (int32_t* i = data_10064360; i != 0; i = i[0xc])
1002f8b0          if (*i s> arg1)
1002f8b5              void* edx_1 = data_1006435c
1002f8c3              int32_t eax_1 = *(edx_1 + 4)
1002f8c6              char* ecx_4 = eax_1 + i[1] * 0x11c
1002f8c6              
1002f8d5              if (sub_10045cb0(eax_1, edx_1, ecx_4, arg2, ecx_4) == 0)
1002f8ed                  arg3[3] = i[5]
1002f8f3                  *arg3 = i[6]
1002f8f8                  arg3[1] = i[7]
1002f8fe                  arg3[2] = i[8]
1002f904                  arg3[0xa] = i[9]
1002f922                  arg3[4] = *(*(data_1006435c + 4) + i[1] * 0x11c + 0x100)
1002f940                  arg3[5] = *(*(data_1006435c + 4) + i[1] * 0x11c + 0x104)
1002f95e                  arg3[6] = *(*(data_1006435c + 4) + i[1] * 0x11c + 0x108)
1002f97c                  arg3[7] = *(*(data_1006435c + 4) + i[1] * 0x11c + 0x10c)
1002f99a                  arg3[8] = *(*(data_1006435c + 4) + i[1] * 0x11c + 0x110)
1002f9b8                  arg3[9] = *(*(data_1006435c + 4) + i[1] * 0x11c + 0x114)
1002f9bd                  arg3[0xb] = *i
1002f9c4                  return *i
1002f9c4  
1002f8e4  return 0xffffffff

1002f9c5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1002f9e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002fa00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002fa20    int32_t* sub_1002fa20()

1002fa28  void* i_2 = data_10064360
1002fa31  int16_t top
1002fa31  
1002fa31  if (i_2 != 0)
1002fa68      void* i
1002fa68      
1002fa68      do
1002fa33          long double x87_r7_1 = fconvert.t(*(i_2 + 0x28))
1002fa36          long double temp0_1 = fconvert.t(0f)
1002fa36          x87_r7_1 - temp0_1
1002fa36          top = 0
1002fa3c          i = *(i_2 + 0x30)
1002fa3c          
1002fa44          if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
1002fa44                  | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
1002fa44                  | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
1002fa46              long double st0_1 = j_sub_1000e120()
1002fa4b              long double temp1_1 = fconvert.t(*(i_2 + 0x28))
1002fa4b              st0_1 - temp1_1
1002fa4b              top = 0
1002fa4b              
1002fa53              if ((((st0_1 < temp1_1 ? 1 : 0) << 8
1002fa53                      | (is_unordered.t(st0_1, temp1_1) ? 1 : 0) << 0xa
1002fa53                      | (st0_1 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1002fa56                  j_sub_1002f320(i_2)
1002fa5c                  j_sub_1002f2b0(i_2)
1002fa5c          
1002fa66          i_2 = i
1002fa68      while (i != 0)
1002fa68  
1002fa6a  int32_t* result = data_1006435c
1002fa71  int32_t* result_1 = result
1002fa71  
1002fa75  if (result != 0)
1002fa7d      result = j_sub_1000bb30(0)
1002fa82      int32_t* i_1 = result
1002fa82      
1002fa89      if (i_1 != 0)
1002fa90          int32_t var_108
1002fa90          int32_t ebx_1 = var_108
1002fa90          
1002fc8e          do
1002fa95              int32_t j = j_sub_1000ad40(i_1)
1002fa95              
1002faa3              if (j != 0)
1002fac5                  void var_f8
1002fac5                  void var_7c
1002fac5                  __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_7c, i_1), 
1002fac5                      n: 0x7c)
1002fac7                  unimplemented  {fld st0, dword [esp+0x34]}
1002facb                  float var_c4
1002facb                  long double temp2_1 = fconvert.t(var_c4)
1002facb                  unimplemented  {fcomp st0, dword [esp+0x58]} f- temp2_1
1002facb                  bool c0_3 = unimplemented  {fcomp st0, dword [esp+0x58]} f< temp2_1
1002facb                  bool c2_3 =
1002facb                      is_unordered.t(unimplemented  {fcomp st0, dword [esp+0x58]}, temp2_1)
1002facb                  bool c3_3 = unimplemented  {fcomp st0, dword [esp+0x58]} f== temp2_1
1002facb                  unimplemented  {fcomp st0, dword [esp+0x58]}
1002facf                  int32_t eax_1
1002facf                  eax_1.w = (c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
1002facf                      | (c3_3 ? 1 : 0) << 0xe | (top & 7) << 0xb
1002facf                  
1002fad4                  if ((eax_1:1.b & 0x40) != 0)
1002fada                      unimplemented  {fld st0, dword [esp+0x38]}
1002fade                      float var_c0
1002fade                      long double temp3_1 = fconvert.t(var_c0)
1002fade                      unimplemented  {fcomp st0, dword [esp+0x5c]} f- temp3_1
1002fade                      bool c0_4 = unimplemented  {fcomp st0, dword [esp+0x5c]} f< temp3_1
1002fade                      bool c2_4 = is_unordered.t(
1002fade                          unimplemented  {fcomp st0, dword [esp+0x5c]}, temp3_1)
1002fade                      bool c3_4 = unimplemented  {fcomp st0, dword [esp+0x5c]} f== temp3_1
1002fade                      unimplemented  {fcomp st0, dword [esp+0x5c]}
1002fae2                      eax_1.w = (c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
1002fae2                          | (c3_4 ? 1 : 0) << 0xe | (top & 7) << 0xb
1002fae2                      
1002fae7                      if ((eax_1:1.b & 0x40) != 0)
1002faed                          unimplemented  {fld st0, dword [esp+0x3c]}
1002faf1                          float var_bc
1002faf1                          long double temp4_1 = fconvert.t(var_bc)
1002faf1                          unimplemented  {fcomp st0, dword [esp+0x60]} f- temp4_1
1002faf1                          bool c0_5 =
1002faf1                              unimplemented  {fcomp st0, dword [esp+0x60]} f< temp4_1
1002faf1                          bool c2_5 = is_unordered.t(
1002faf1                              unimplemented  {fcomp st0, dword [esp+0x60]}, temp4_1)
1002faf1                          bool c3_5 =
1002faf1                              unimplemented  {fcomp st0, dword [esp+0x60]} f== temp4_1
1002faf1                          unimplemented  {fcomp st0, dword [esp+0x60]}
1002faf5                          eax_1.w = (c0_5 ? 1 : 0) << 8 | (c2_5 ? 1 : 0) << 0xa
1002faf5                              | (c3_5 ? 1 : 0) << 0xe | (top & 7) << 0xb
1002faf5                          
1002fafa                          if ((eax_1:1.b & 0x40) != 0)
1002fb00                              void* esi_1 = data_10064360
1002fb08                              int32_t var_e8
1002fb08                              int32_t var_e4
1002fb08                              int32_t var_e0
1002fb08                              int32_t* result_2
1002fb08                              
1002fb08                              if (esi_1 == 0)
1002fbe5                                  label_1002fbe5:
1002fbe5                                  result_2 = result_1
1002fbe9                                  label_1002fbe9:
1002fbe9                                  int32_t ecx_12 = *result_2
1002fbeb                                  ebx_1 = 0
1002fbeb                                  
1002fbef                                  if (ecx_12 s> 0)
1002fbf8                                      int32_t* eax_10 = result_2[1] + 0xf0
1002fbf8                                      
1002fbff                                      while (*eax_10 != j)
1002fc01                                          ebx_1 += 1
1002fc02                                          eax_10 = &eax_10[0x47]
1002fc02                                          
1002fc09                                          if (ebx_1 s>= ecx_12)
1002fc09                                              break
1002fc09                                  
1002fc0d                                  if (ebx_1 s< ecx_12)
1002fc0f                                      void** eax_11 = j_sub_1002f270()
1002fc1e                                      eax_11[9] = i_1
1002fc26                                      void* eax_13 = data_10064354 + i_1
1002fc28                                      eax_11[2] = var_e8
1002fc2f                                      *eax_11 = eax_13
1002fc34                                      eax_11[3] = var_e4
1002fc37                                      eax_11[4] = var_e0
1002fc41                                      eax_11[1] = ebx_1
1002fc4c                                      void* ecx_17 = result_1[1] + ebx_1 * 0x11c
1002fc62                                      int32_t eax_15 = j_sub_1000b300(&eax_11[2], 
1002fc62                                          ecx_17 + 0x100, ecx_17 + 0x10c, &eax_11[6])
1002fc62                                      unimplemented  {call j_sub_1000b300}
1002fc67                                      eax_11[5] = eax_15
1002fc6a                                      j_sub_1000e120()
1002fc6a                                      unimplemented  {call j_sub_1000e120}
1002fc6f                                      unimplemented  {fadd dword [&data_100580f8]}
1002fc76                                      eax_11[0xa] = fconvert.s(unimplemented  {fstp dword [
1002fc76                                          esi+0x28], st0})
1002fc76                                      unimplemented  {fstp dword [esi+0x28], st0}
1002fc76                                      top -= 1
1002fc79                                      j_sub_1002f2e0(eax_11)
1002fb08                              else
1002fb0e                                  while (true)
1002fb11                                      result_2 = result_1
1002fb11                                      
1002fb2d                                      if (*(result_2[1] + *(esi_1 + 4) * 0x11c + 0xf0) == j)
1002fb2f                                          int32_t eax_4 = *(esi_1 + 0x24)
1002fb2f                                          
1002fb34                                          if (eax_4 == 0)
1002fb3c                                              unimplemented  {fld st0, dword [esi+0x8]}
1002fb3f                                              unimplemented  {fsub st0, dword [esp+0x34]}
1002fb47                                              float var_104
1002fb47                                              float* var_120_4 = &var_104
1002fb48                                              var_104 = fconvert.s(unimplemented  {fstp 
1002fb48                                                  dword [esp+0x1c], st0})
1002fb48                                              unimplemented  {fstp dword [esp+0x1c], st0}
1002fb4c                                              unimplemented  {fld st0, dword [esi+0xc]}
1002fb4f                                              unimplemented  {fsub st0, dword [esp+0x3c]}
1002fb53                                              float var_100_1 = fconvert.s(unimplemented  {
1002fb53                                                  fstp dword [esp+0x20], st0})
1002fb53                                              unimplemented  {fstp dword [esp+0x20], st0}
1002fb57                                              unimplemented  {fld st0, dword [esi+0x10]}
1002fb5a                                              unimplemented  {fsub st0, dword [esp+0x40]}
1002fb5e                                              float var_fc_1 = fconvert.s(unimplemented  {
1002fb5e                                                  fstp dword [esp+0x24], st0})
1002fb5e                                              unimplemented  {fstp dword [esp+0x24], st0}
1002fb62                                              j_sub_10043500(var_120_4)
1002fb62                                              unimplemented  {call j_sub_10043500}
1002fb67                                              long double temp5_1 = fconvert.t(20f)
1002fb67                                              unimplemented  {fcomp st0, dword [
1002fb67                                                  &data_1005825c]} f- temp5_1
1002fb67                                              bool c0_6 = unimplemented  {fcomp st0, dword [
1002fb67                                                  &data_1005825c]} f< temp5_1
1002fb67                                              bool c2_6 = is_unordered.t(
1002fb67                                                  unimplemented  {fcomp st0, dword [
1002fb67                                                      &data_1005825c]}, 
1002fb67                                                  temp5_1)
1002fb67                                              bool c3_6 = unimplemented  {fcomp st0, dword [
1002fb67                                                  &data_1005825c]} f== temp5_1
1002fb67                                              unimplemented  {fcomp st0, dword [
1002fb67                                                  &data_1005825c]}
1002fb67                                              
1002fb75                                              if ((((c0_6 ? 1 : 0) << 8
1002fb75                                                      | (c2_6 ? 1 : 0) << 0xa
1002fb75                                                      | (c3_6 ? 1 : 0) << 0xe
1002fb75                                                      | (top & 7) << 0xb):1.b & 1) != 0)
1002fba2                                                  *(esi_1 + 0xc) = var_e4
1002fba8                                                  *(esi_1 + 0x24) = i_1
1002fbab                                                  *(esi_1 + 8) = var_e8
1002fbb4                                                  *(esi_1 + 0x10) = var_e0
1002fbbc                                                  void* ecx_10 = result_2[1] + ebx_1 * 0x11c
1002fbd2                                                  int32_t eax_8 = j_sub_1000b300(esi_1 + 8, 
1002fbd2                                                      ecx_10 + 0x100, ecx_10 + 0x10c, 
1002fbd2                                                      esi_1 + 0x18)
1002fbd2                                                  top -= 1
1002fbd2                                                  unimplemented  {call j_sub_1000b300}
1002fbda                                                  *(esi_1 + 0x14) = eax_8
1002fbda                                                  break
1002fb34                                          else if (eax_4 == i_1)
1002fb8c                                              *(esi_1 + 8) = var_e8
1002fb8f                                              *(esi_1 + 0xc) = var_e4
1002fb92                                              *(esi_1 + 0x10) = var_e0
1002fb95                                              break
1002fb95                                      
1002fb77                                      esi_1 = *(esi_1 + 0x30)
1002fb77                                      
1002fb7c                                      if (esi_1 == 0)
1002fb7c                                          goto label_1002fbe9
1002fb7c                                  
1002fbdf                                  if (esi_1 == 0)
1002fbdf                                      goto label_1002fbe5
1002fbdf              
1002fc82              result = j_sub_1000bb30(i_1)
1002fc87              i_1 = result
1002fc8e          while (i_1 != 0)
1002fc8e  
1002fc9e  return result

1002fc9f                                                                                               90                                 .
1002fca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002fcc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002fce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002fd00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1002fd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002fd40    void sub_1002fd40(void* arg1)

1002fd46  int32_t i = 1
1002fd46  
1002fd51  if (*(arg1 + 0x1c8) s>= 1)
1002fd54      void* edi_1 = arg1 + 0x6c
1002fd54      
1002fd7a      do
1002fd5f          int32_t var_14_1 = j_sub_1002f6a0(*edi_1)
1002fd60          int32_t i_1 = i
1002fd66          j_sub_10038d80("%d: %s")
1002fd74          i += 1
1002fd75          edi_1 += 0x38
1002fd7a      while (i s<= *(arg1 + 0x1c8))

1002fd80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002fd90    int32_t sub_1002fd90(void* arg1, int32_t arg2)

1002fd95  int32_t eax = *(arg1 + 0x1c8)
1002fd95  
1002fd9e  if (eax s>= 7)
1002fda7      data_10063fe8(3, "goal heap overflow\n")
1002fdb7      return j_sub_1002fd40(arg1)
1002fdb7  
1002fdba  *(arg1 + 0x1c8) = eax + 1
1002fdd6  __builtin_memcpy(dest: arg1 + (eax + 1) * 0x38 + 8, src: arg2, n: 0x38)
1002fdda  return eax + 1

1002fddb                                                                                   90 90 90 90 90                             .....
1002fde0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1002fe00    int32_t sub_1002fe00(void* arg1)

1002fe04  int32_t result = *(arg1 + 0x1c8)
1002fe04  
1002fe0c  if (result s> 0)
1002fe0e      result -= 1
1002fe0f      *(arg1 + 0x1c8) = result
1002fe0f  
1002fe15  return result

1002fe16                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1002fe20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002fe30    void* sub_1002fe30(void* arg1)

1002fe34  *(arg1 + 0x1c8) = 0
1002fe3e  return arg1

1002fe3f                                                                                               90                                 .
1002fe40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002fe50    void* sub_1002fe50(void* arg1)

1002fe54  int32_t result = *(arg1 + 0x1c8)
1002fe54  
1002fe5c  if (result != 0)
1002fe6c      return arg1 + result * 0x38 + 8
1002fe6c  
1002fe5e  return result

1002fe6d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................

1002fe80    void* sub_1002fe80(void* arg1)

1002fe84  int32_t eax = *(arg1 + 0x1c8)
1002fe84  
1002fe8d  if (eax s> 1)
1002fe9f      return arg1 + eax * 0x38 - 0x30
1002fe9f  
1002fe91  return 0

1002fea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1002feb0    float* sub_1002feb0(float arg1, int32_t* arg2, int32_t arg3, float arg4)

1002feb5  int32_t* ebp = arg1
1002feb5  
1002febf  if (*ebp == 0)
1002feca      return 0
1002feca  
1002fed0  int32_t eax_1 = j_sub_1000efc0(arg2)
1002fed5  int32_t eax_2 = neg.d(eax_1)
1002fedc  float* eax_5
1002fedc  int80_t st0
1002fedc  eax_5, st0 = j_sub_10030aa0(arg2, sbb.d(eax_2, eax_2, eax_1 != 0) + 1)
1002fedc  int16_t top = 0xffff
1002fedc  
1002feec  if (eax_5 == 0)
1002fef5      return eax_5
1002fef5  
1002fef7  int32_t eax_6 = j_sub_10011040(eax_5)
1002fef7  
1002ff01  if (eax_6 == 0)
1002ff0a      return eax_6
1002ff0a  
1002ff0b  void* eax_7 = data_1006435c
1002ff0b  
1002ff16  if (eax_7 != 0)
1002ff22      int32_t* i = data_10064360
1002ff35      arg2 = nullptr
1002ff3d      int32_t* i_1 = nullptr
1002ff45      float s
1002ff45      __builtin_memset(&s, c: 0, n: 0x38)
1002ff47      int32_t var_2c
1002ff47      
1002ff47      if (i != 0)
1003009e          do
1002ff51              j_sub_1002f820(ebp, *i)
1002ff51              unimplemented  {call j_sub_1002f820}
1002ff56              long double temp1_1 = fconvert.t(0f)
1002ff56              unimplemented  {fcomp st0, dword [&data_10058000]} f- temp1_1
1002ff56              bool c0_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp1_1
1002ff56              bool c2_1 = is_unordered.t(
1002ff56                  unimplemented  {fcomp st0, dword [&data_10058000]}, temp1_1)
1002ff56              bool c3_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp1_1
1002ff56              unimplemented  {fcomp st0, dword [&data_10058000]}
1002ff56              
1002ff64              if ((((c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa | (c3_1 ? 1 : 0) << 0xe
1002ff64                      | (top & 7) << 0xb):1.b & 0x41) != 0)
1002ff6a                  float* ebx_1 = i[5]
1002ff6a                  
1002ff6f                  if (ebx_1 != 0)
1002ff82                      int32_t ecx_3 = i[1] * 0x47
1002ff84                      int32_t eax_12 = *(eax_7 + 4)
1002ff8a                      void* edi_1 = eax_12 + (ecx_3 << 2)
1002ff94                      int32_t eax_13 = *(ebp[1] + (*(eax_12 + (ecx_3 << 2) + 0x118) << 2))
1002ff94                      
1002ff99                      if (eax_13 s>= 0)
1002ffac                          j_sub_10036ca0(arg3, *ebp + (eax_13 << 3) + 4)
1002ffb1                          arg1 = fconvert.s(unimplemented  {fst dword [esp+0x64], st0})
1002ffb5                          long double temp3_1 = fconvert.t(0f)
1002ffb5                          unimplemented  {fcomp st0, dword [&data_10058000]} f- temp3_1
1002ffb5                          bool c0_2 =
1002ffb5                              unimplemented  {fcomp st0, dword [&data_10058000]} f< temp3_1
1002ffb5                          bool c2_2 = is_unordered.t(
1002ffb5                              unimplemented  {fcomp st0, dword [&data_10058000]}, temp3_1)
1002ffb5                          bool c3_2 =
1002ffb5                              unimplemented  {fcomp st0, dword [&data_10058000]} f== temp3_1
1002ffb5                          unimplemented  {fcomp st0, dword [&data_10058000]}
1002ffb5                          top += 1
1002ffb5                          
1002ffc3                          if ((((c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
1002ffc3                                  | (c3_2 ? 1 : 0) << 0xe | (top & 7) << 0xb):1.b & 0x41) == 0)
1002ffdc                              uint32_t eax_17 = zx.d(j_sub_10019fa0(eax_5, ebx_1, arg4))
1002ffe1                              uint32_t var_3c_1 = eax_17
1002ffe1                              
1002ffe5                              if (eax_17 s> 0)
1002ffeb                                  unimplemented  {fld st0, dword [esp+0x5c]}
1002ffef                                  unimplemented  {fild st0, dword [esp+0x1c]}
1002fff3                                  unimplemented  {fmul st0, qword [&data_10058370]}
1002fff9                                  unimplemented  {fdivp st1, st0}
1002fff9                                  unimplemented  {fdivp st1, st0}
1002fffb                                  unimplemented  {fld st0, dword [esi+0x28]}
1002fffe                                  long double temp4_1 = fconvert.t(0f)
1002fffe                                  unimplemented  {fcomp st0, dword [&data_10058000]}
1002fffe                                      f- temp4_1
1002fffe                                  bool c0_3 =
1002fffe                                      unimplemented  {fcomp st0, dword [&data_10058000]}
1002fffe                                      f< temp4_1
1002fffe                                  bool c2_3 = is_unordered.t(
1002fffe                                      unimplemented  {fcomp st0, dword [&data_10058000]}, 
1002fffe                                      temp4_1)
1002fffe                                  bool c3_3 =
1002fffe                                      unimplemented  {fcomp st0, dword [&data_10058000]}
1002fffe                                      f== temp4_1
1002fffe                                  unimplemented  {fcomp st0, dword [&data_10058000]}
10030004                                  eax_17.w = (c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
10030004                                      | (c3_3 ? 1 : 0) << 0xe | ((top - 1) & 7) << 0xb
10030004                                  
10030009                                  if ((eax_17:1.b & 0x40) == 0)
1003000b                                      unimplemented  {fadd dword [&data_1005825c]}
1003000b                                  
10030011                                  long double temp5_1 = fconvert.t(arg2)
10030011                                  unimplemented  {fcom st0, dword [esp+0x60]} f- temp5_1
10030011                                  bool c0_4 =
10030011                                      unimplemented  {fcom st0, dword [esp+0x60]} f< temp5_1
10030011                                  bool c2_4 = is_unordered.t(
10030011                                      unimplemented  {fcom st0, dword [esp+0x60]}, temp5_1)
10030011                                  bool c3_4 = unimplemented  {fcom st0, dword [esp+0x60]}
10030011                                      f== temp5_1
10030015                                  eax_17.w = (c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
10030015                                      | (c3_4 ? 1 : 0) << 0xe | ((top - 1) & 7) << 0xb
10030015                                  
1003001a                                  if ((eax_17:1.b & 0x41) != 0)
10030097                                      unimplemented  {fstp st0, st0}
10030097                                      unimplemented  {fstp st0, st0}
1003001a                                  else
1003001f                                      i_1 = i
10030023                                      s = i[6]
1003002a                                      int32_t var_34_1 = i[7]
10030031                                      int32_t var_30_1 = i[8]
1003003b                                      int32_t var_28_1 = *(edi_1 + 0x100)
10030045                                      int32_t var_24_1 = *(edi_1 + 0x104)
1003004f                                      int32_t var_20_1 = *(edi_1 + 0x108)
10030059                                      int32_t var_1c_1 = *(edi_1 + 0x10c)
10030063                                      int32_t var_18_1 = *(edi_1 + 0x110)
1003006d                                      int32_t var_14_1 = *(edi_1 + 0x114)
10030071                                      var_2c = ebx_1
10030078                                      arg2 = fconvert.s(unimplemented  {fstp dword [esp
10030078                                          +0x60], st0})
10030078                                      unimplemented  {fstp dword [esp+0x60], st0}
1003007c                                      int32_t var_10_1 = i[9]
10030082                                      int32_t var_c_1 = *i
10030086                                      int32_t var_8_1 = 1
10030091                                      int32_t var_4_1 = i[1]
10030091              
10030099              i = i[0xc]
1003009e          while (i != 0)
1003009e          
100300aa          if (i_1 != 0)
10030151              unimplemented  {fld st0, dword [eax+edx*4+0xfc]}
10030158              arg4 = fconvert.s(unimplemented  {fst dword [esp+0x68], st0})
1003015c              long double temp2 = fconvert.t(0f)
1003015c              unimplemented  {fcomp st0, dword [&data_10058000]} f- temp2
1003015c              bool c0_5 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp2
1003015c              bool c2_5 =
1003015c                  is_unordered.t(unimplemented  {fcomp st0, dword [&data_10058000]}, temp2)
1003015c              bool c3_5 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp2
1003015c              unimplemented  {fcomp st0, dword [&data_10058000]}
1003015c              
10030167              if ((((c0_5 ? 1 : 0) << 8 | (c2_5 ? 1 : 0) << 0xa | (c3_5 ? 1 : 0) << 0xe
10030167                      | (top & 7) << 0xb):1.b & 0x40) != 0)
10030169                  arg4 = 30f
10030169              
1003017a              j_sub_1002f7b0(ebp, *i_1, arg4)
10030185              j_sub_1002fd90(ebp, &s)
10030199              return 1
10030199      
100300ce      if (j_sub_1001a410(eax_5, arg4, &var_2c, &s) != 0)
100300d8          int32_t var_28_2
100300d8          __builtin_memcpy(dest: &var_28_2, 
100300d8              src: "\x00\x00\x70\xc1\x00\x00\x70\xc1\x00\x00\x70\xc1\x00\x00\x70\x41\x00\x00\x70\x41\x00\x00\x70\x41", 
100300d8              n: 0x18)
1003010a          int32_t var_10_2 = 0
10030112          int32_t var_c_2 = 0
1003011a          int32_t var_8_2 = 2
10030122          int32_t var_4_2 = 0
1003012a          j_sub_1002fd90(ebp, &s)
1003013e          return 1
1003013e  
1002ff21  return 0

1003019a                                                                                90 90 90 90 90 90                            ......
100301a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100301c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100301e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10030260    float* sub_10030260(float arg1, int32_t* arg2, int32_t arg3, float arg4, void* arg5, float arg6)

10030264  int32_t* ebp = arg1
10030264  
1003026e  if (*ebp == 0)
10030278      return 0
10030278  
1003027e  int32_t eax_1 = j_sub_1000efc0(arg2)
10030283  int32_t eax_2 = neg.d(eax_1)
1003028a  float* eax_5
1003028a  int80_t st0
1003028a  eax_5, st0 = j_sub_10030aa0(arg2, sbb.d(eax_2, eax_2, eax_1 != 0) + 1)
1003028a  int16_t top = 0xffff
1003028a  
1003029a  if (eax_5 == 0)
100302a2      return eax_5
100302a2  
100302a4  int32_t eax_6 = j_sub_10011040(eax_5)
100302a4  
100302ae  if (eax_6 == 0)
100302b6      return eax_6
100302b6  
100302bd  if (arg5 == 0)
100302dc      arg2 = 0x1869f
100302bd  else
100302d6      arg2 = zx.d(j_sub_10019fa0(eax_5, *(arg5 + 0xc), arg4))
100302d6  
100302e4  void* eax_10 = data_1006435c
100302e4  
100302ef  if (eax_10 == 0)
100302f7      return eax_10
100302f7  
100302f8  int32_t* i = data_10064360
1003030b  float var_4c = 0f
10030313  int32_t* i_1 = nullptr
1003031b  int32_t s
1003031b  __builtin_memset(&s, c: 0, n: 0x38)
1003031b  
1003031d  if (i != 0)
100304c9      do
10030328          j_sub_1002f820(ebp, *i)
10030328          unimplemented  {call j_sub_1002f820}
1003032d          long double temp2_1 = fconvert.t(0f)
1003032d          unimplemented  {fcomp st0, dword [&data_10058000]} f- temp2_1
1003032d          bool c0_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp2_1
1003032d          bool c2_1 =
1003032d              is_unordered.t(unimplemented  {fcomp st0, dword [&data_10058000]}, temp2_1)
1003032d          bool c3_1 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp2_1
1003032d          unimplemented  {fcomp st0, dword [&data_10058000]}
1003032d          
1003033b          if ((((c0_1 ? 1 : 0) << 8 | (c2_1 ? 1 : 0) << 0xa | (c3_1 ? 1 : 0) << 0xe
1003033b                  | (top & 7) << 0xb):1.b & 0x41) != 0)
10030341              float* ebx_1 = i[5]
10030341              
10030346              if (ebx_1 != 0)
10030359                  int32_t ecx_4 = i[1] * 0x47
1003035b                  int32_t eax_14 = *(eax_10 + 4)
10030361                  void* edi_1 = eax_14 + (ecx_4 << 2)
1003036b                  int32_t eax_15 = *(ebp[1] + (*(eax_14 + (ecx_4 << 2) + 0x118) << 2))
1003036b                  
10030370                  if (eax_15 s>= 0)
10030383                      j_sub_10036ca0(arg3, *ebp + (eax_15 << 3) + 4)
10030388                      arg1 = fconvert.s(unimplemented  {fst dword [esp+0x68], st0})
1003038c                      long double temp4_1 = fconvert.t(0f)
1003038c                      unimplemented  {fcomp st0, dword [&data_10058000]} f- temp4_1
1003038c                      bool c0_2 =
1003038c                          unimplemented  {fcomp st0, dword [&data_10058000]} f< temp4_1
1003038c                      bool c2_2 = is_unordered.t(
1003038c                          unimplemented  {fcomp st0, dword [&data_10058000]}, temp4_1)
1003038c                      bool c3_2 =
1003038c                          unimplemented  {fcomp st0, dword [&data_10058000]} f== temp4_1
1003038c                      unimplemented  {fcomp st0, dword [&data_10058000]}
1003038c                      top += 1
1003038c                      
1003039a                      if ((((c0_2 ? 1 : 0) << 8 | (c2_2 ? 1 : 0) << 0xa
1003039a                              | (c3_2 ? 1 : 0) << 0xe | (top & 7) << 0xb):1.b & 0x41) == 0)
100303b3                          uint32_t eax_19 = zx.d(j_sub_10019fa0(eax_5, ebx_1, arg4))
100303b8                          uint32_t var_3c_1 = eax_19
100303b8                          
100303bc                          if (eax_19 s> 0)
100303c2                              unimplemented  {fild st0, dword [esp+0x20]}
100303c6                              long double temp5_1 = fconvert.t(arg6)
100303c6                              unimplemented  {fcom st0, dword [esp+0x74]} f- temp5_1
100303c6                              bool c0_3 =
100303c6                                  unimplemented  {fcom st0, dword [esp+0x74]} f< temp5_1
100303c6                              bool c2_3 = is_unordered.t(
100303c6                                  unimplemented  {fcom st0, dword [esp+0x74]}, temp5_1)
100303c6                              bool c3_3 =
100303c6                                  unimplemented  {fcom st0, dword [esp+0x74]} f== temp5_1
100303ca                              eax_19.w = (c0_3 ? 1 : 0) << 8 | (c2_3 ? 1 : 0) << 0xa
100303ca                                  | (c3_3 ? 1 : 0) << 0xe | ((top - 1) & 7) << 0xb
100303ca                              
100303cf                              if ((eax_19:1.b & 1) == 0)
100304c2                                  unimplemented  {fstp st0, st0}
100304c2                                  unimplemented  {fstp st0, st0}
100303cf                              else
100303d5                                  unimplemented  {fld st0, dword [esp+0x60]}
100303d9                                  unimplemented  {fxch st0, st1}
100303d9                                  unimplemented  {fxch st0, st1}
100303db                                  unimplemented  {fmul st0, qword [&data_10058370]}
100303e1                                  unimplemented  {fdivp st1, st0}
100303e1                                  unimplemented  {fdivp st1, st0}
100303e3                                  arg1 = fconvert.s(unimplemented  {fstp dword [esp+0x60], 
100303e3                                      st0})
100303e3                                  unimplemented  {fstp dword [esp+0x60], st0}
100303e7                                  unimplemented  {fld st0, dword [esi+0x28]}
100303ea                                  long double temp6_1 = fconvert.t(0f)
100303ea                                  unimplemented  {fcomp st0, dword [&data_10058000]}
100303ea                                      f- temp6_1
100303ea                                  bool c0_4 =
100303ea                                      unimplemented  {fcomp st0, dword [&data_10058000]}
100303ea                                      f< temp6_1
100303ea                                  bool c2_4 = is_unordered.t(
100303ea                                      unimplemented  {fcomp st0, dword [&data_10058000]}, 
100303ea                                      temp6_1)
100303ea                                  bool c3_4 =
100303ea                                      unimplemented  {fcomp st0, dword [&data_10058000]}
100303ea                                      f== temp6_1
100303ea                                  unimplemented  {fcomp st0, dword [&data_10058000]}
100303f0                                  eax_19.w = (c0_4 ? 1 : 0) << 8 | (c2_4 ? 1 : 0) << 0xa
100303f0                                      | (c3_4 ? 1 : 0) << 0xe | (top & 7) << 0xb
100303f0                                  
100303f5                                  if ((eax_19:1.b & 0x40) == 0)
100303f7                                      unimplemented  {fld st0, dword [esp+0x60]}
100303fb                                      unimplemented  {fadd dword [&data_1005825c]}
10030401                                      arg1 = fconvert.s(unimplemented  {fstp dword [esp
10030401                                          +0x60], st0})
10030401                                      unimplemented  {fstp dword [esp+0x60], st0}
10030401                                  
10030405                                  unimplemented  {fld st0, dword [esp+0x60]}
10030409                                  long double temp7_1 = fconvert.t(var_4c)
10030409                                  unimplemented  {fcomp st0, dword [esp+0x10]} f- temp7_1
10030409                                  bool c0_5 = unimplemented  {fcomp st0, dword [esp+0x10]}
10030409                                      f< temp7_1
10030409                                  bool c2_5 = is_unordered.t(
10030409                                      unimplemented  {fcomp st0, dword [esp+0x10]}, temp7_1)
10030409                                  bool c3_5 = unimplemented  {fcomp st0, dword [esp+0x10]}
10030409                                      f== temp7_1
10030409                                  unimplemented  {fcomp st0, dword [esp+0x10]}
10030409                                  top = top
1003040d                                  eax_19.w = (c0_5 ? 1 : 0) << 8 | (c2_5 ? 1 : 0) << 0xa
1003040d                                      | (c3_5 ? 1 : 0) << 0xe | (top & 7) << 0xb
1003040d                                  
10030412                                  if ((eax_19:1.b & 0x41) == 0)
1003041c                                      uint32_t eax_20 = 0
1003041c                                      
10030420                                      if (arg5 != 0)
10030434                                          eax_20 = zx.d(j_sub_10019fa0(ebx_1, 
10030434                                              *(arg5 + 0xc), arg4))
10030434                                      
1003043d                                      if (eax_20 s<= arg2)
1003044a                                          s = i[6]
10030451                                          var_4c = arg1
10030455                                          int32_t var_34_1 = i[7]
1003045c                                          i_1 = i
10030460                                          int32_t var_30_1 = i[8]
1003046a                                          int32_t var_28_1 = *(edi_1 + 0x100)
10030474                                          int32_t var_24_1 = *(edi_1 + 0x104)
1003047e                                          int32_t var_20_1 = *(edi_1 + 0x108)
10030488                                          int32_t var_1c_1 = *(edi_1 + 0x10c)
10030492                                          int32_t var_18_1 = *(edi_1 + 0x110)
1003049c                                          int32_t var_14_1 = *(edi_1 + 0x114)
100304a0                                          float* var_2c_1 = ebx_1
100304a7                                          int32_t var_10_1 = i[9]
100304ad                                          int32_t var_c_1 = *i
100304b1                                          int32_t var_8_1 = 1
100304bc                                          int32_t var_4_1 = i[1]
100304bc          
100304c4          i = i[0xc]
100304c9      while (i != 0)
100304c9      
100304d6      if (i_1 != 0)
100304f3          unimplemented  {fld st0, dword [eax+edx*4+0xfc]}
100304fa          arg4 = fconvert.s(unimplemented  {fst dword [esp+0x68], st0})
100304fe          long double temp3 = fconvert.t(0f)
100304fe          unimplemented  {fcomp st0, dword [&data_10058000]} f- temp3
100304fe          bool c0_6 = unimplemented  {fcomp st0, dword [&data_10058000]} f< temp3
100304fe          bool c2_6 =
100304fe              is_unordered.t(unimplemented  {fcomp st0, dword [&data_10058000]}, temp3)
100304fe          bool c3_6 = unimplemented  {fcomp st0, dword [&data_10058000]} f== temp3
100304fe          unimplemented  {fcomp st0, dword [&data_10058000]}
100304fe          
10030509          if ((((c0_6 ? 1 : 0) << 8 | (c2_6 ? 1 : 0) << 0xa | (c3_6 ? 1 : 0) << 0xe
10030509                  | (top & 7) << 0xb):1.b & 0x40) != 0)
1003050b              arg4 = 30f
1003050b          
1003051c          j_sub_1002f7b0(ebp, *i_1, arg4)
10030527          j_sub_1002fd90(ebp, &s)
1003053a          return 1
1003053a  
100304e0  return 0

1003053b                                                                                   90 90 90 90 90                             .....
10030540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100305a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100305c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100305e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10030600    int32_t sub_10030600(float* arg1, float* arg2)

10030611  float var_24
10030611  float var_c
10030611  j_sub_1000dda0(4, &var_c, &var_24)
1003061a  float* ecx = arg1
10030629  long double x87_r7_1 = fconvert.t(arg2[4]) - fconvert.t(var_24)
10030637  int32_t i = 0
10030639  float var_18
10030639  void* esi = &var_18 - ecx
1003063b  void* edi = &var_24 - ecx
1003063d  float var_20
1003063d  float var_14 = fconvert.s(fconvert.t(arg2[5]) - fconvert.t(var_20))
10030648  float var_1c
10030648  float var_10 = fconvert.s(fconvert.t(arg2[6]) - fconvert.t(var_1c))
10030653  var_24 = fconvert.s(fconvert.t(arg2[7]) - fconvert.t(var_c))
1003066d  long double x87_r7_2 = x87_r7_1 + fconvert.t(*arg2)
10030676  float var_14_1 = fconvert.s(fconvert.t(var_14) + fconvert.t(arg2[1]))
1003067e  long double x87_r6_13 = fconvert.t(var_10) + fconvert.t(arg2[2])
1003068e  float var_8
1003068e  float var_20_2 = fconvert.s(
1003068e      fconvert.t(fconvert.s(fconvert.t(arg2[8]) - fconvert.t(var_8))) + fconvert.t(arg2[1]))
10030699  float var_4
10030699  float var_1c_2 = fconvert.s(
10030699      fconvert.t(fconvert.s(fconvert.t(arg2[9]) - fconvert.t(var_4))) + fconvert.t(arg2[2]))
100306a3  var_24 = fconvert.s(fconvert.t(var_24) + fconvert.t(*arg2) - fconvert.t(4f))
100306b1  float var_20_3 = fconvert.s(fconvert.t(var_20_2) - fconvert.t(4f))
100306bf  float var_1c_3 = fconvert.s(fconvert.t(var_1c_2) - fconvert.t(10f))
100306cb  var_18 = fconvert.s(x87_r7_2 - fconvert.t(-4f))
100306d9  float var_14_2 = fconvert.s(fconvert.t(var_14_1) - fconvert.t(-4f))
100306dd  float var_10_1 = fconvert.s(x87_r6_13)
100306dd  
10030700  do
100306e1      long double x87_r7_4 = fconvert.t(*ecx)
100306e3      long double temp1_1 = fconvert.t(*(esi + ecx))
100306e3      x87_r7_4 - temp1_1
100306e6      float* eax
100306e6      eax.w = (x87_r7_4 < temp1_1 ? 1 : 0) << 8
100306e6          | (is_unordered.t(x87_r7_4, temp1_1) ? 1 : 0) << 0xa
100306e6          | (x87_r7_4 == temp1_1 ? 1 : 0) << 0xe
100306e6      
100306eb      if ((eax:1.b & 1) != 0)
10030714          return 0
10030714      
100306ed      long double x87_r7_5 = fconvert.t(*ecx)
100306ef      long double temp2_1 = fconvert.t(*(edi + ecx))
100306ef      x87_r7_5 - temp2_1
100306f2      eax.w = (x87_r7_5 < temp2_1 ? 1 : 0) << 8
100306f2          | (is_unordered.t(x87_r7_5, temp2_1) ? 1 : 0) << 0xa
100306f2          | (x87_r7_5 == temp2_1 ? 1 : 0) << 0xe
100306f2      
100306f7      if ((eax:1.b & 0x41) == 0)
10030714          return 0
10030714      
100306f9      i += 1
100306fa      ecx = &ecx[1]
10030700  while (i s< 3)
10030700  
1003070c  return 1

10030715                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10030720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10030770    int32_t sub_10030770(int32_t arg1, int32_t arg2, float* arg3)

10030784  if ((arg3[0xc].b & 1) != 0)
1003078a      long double x87_r7_1 = fconvert.t(arg3[4])
10030797      float var_88
10030797      float* var_98_1 = &var_88
10030798      float var_9c_1 = 0.5f
1003079d      float* var_a0_1 = &var_88
1003079e      var_88 = fconvert.s(x87_r7_1 + x87_r7_1)
100307a2      long double x87_r7_3 = fconvert.t(arg3[5])
100307a7      float var_84_1 = fconvert.s(x87_r7_3 + x87_r7_3)
100307ab      long double x87_r7_5 = fconvert.t(arg3[6])
100307b0      float var_80_1 = fconvert.s(x87_r7_5 + x87_r7_5)
100307b4      j_sub_10043570(var_a0_1, var_9c_1, var_98_1)
100307cd      int32_t var_a4_1 = 3
100307d4      float* var_ac_1 = &var_88
100307d5      var_88 = fconvert.s(fconvert.t(var_88) + fconvert.t(*arg3))
100307ea      float var_84_2 = fconvert.s(fconvert.t(var_84_1) + fconvert.t(arg3[1]))
100307f5      float var_80_2 = fconvert.s(fconvert.t(var_80_1) + fconvert.t(arg3[2]))
1003080c      int32_t var_7c
1003080c      __builtin_memcpy(dest: &var_7c, 
1003080c          src: j_sub_10003010(&var_7c, arg2, 0, 0, var_ac_1, arg1, var_a4_1), n: 0x54)
1003080e      float var_74
1003080e      long double x87_r7_13 = fconvert.t(var_74)
10030812      long double temp0_1 = fconvert.t(1f)
10030812      x87_r7_13 - temp0_1
10030818      int32_t eax_1
10030818      eax_1.w = (x87_r7_13 < temp0_1 ? 1 : 0) << 8
10030818          | (is_unordered.t(x87_r7_13, temp0_1) ? 1 : 0) << 0xa
10030818          | (x87_r7_13 == temp0_1 ? 1 : 0) << 0xe
10030818      
1003081d      if ((eax_1:1.b & 1) == 0)
1003081f          int32_t ebx_1 = arg3[0xa]
1003081f          
10030824          if (ebx_1 s<= 0)
10030834              return 1
10030834          
1003084e          __builtin_memcpy(dest: &var_7c, src: j_sub_1000abe0(&var_7c, ebx_1), n: 0x7c)
1003084e          
10030856          if (var_7c == 0)
10030866              return 1
10030866  
10030872  return 0

10030873                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10030880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100308a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100308c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100308d0    int32_t sub_100308d0(int32_t** arg1, char* arg2)

100308d6  int32_t* eax = j_sub_10035fa0(arg2)
100308e4  *arg1 = eax
100308e4  
100308e6  if (eax == 0)
100308ef      data_10063fe8(4, "couldn't load weights\n")
100308fe      return 0x1c
100308fe  
100308ff  int32_t* ecx = data_1006435c
100308ff  
10030907  if (ecx == 0)
1003090f      return 0x1c
1003090f  
1003091a  arg1[1] = j_sub_1002f100(eax, ecx)
10030920  return 0

10030921     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
10030940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10030950    void* sub_10030950(int32_t* arg1)

10030955  int32_t* eax = *arg1
10030955  
10030959  if (eax != 0)
1003095c      j_sub_100359b0(eax)
1003095c  
10030964  void* result = arg1[1]
10030964  
1003096a  if (result != 0)
1003096d      result = j_sub_100390b0(result)
1003096d  
10030973  return result

10030974                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10030980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10030990    int32_t sub_10030990(void* arg1)

100309a0  __builtin_memset(s: arg1 + 8, c: 0, n: 0x1c0)
100309a2  *(arg1 + 0x1c8) = 0
100309a8  j_sub_1002f6f0(arg1)
100309b1  return 0

100309b2                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
100309c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100309d0    int32_t sub_100309d0()

100309e0  int32_t* eax_1 = j_sub_1002ed20(j_sub_10038a60("itemconfig", "items.c"))
100309e8  data_1006435c = eax_1
100309e8  
100309ef  if (eax_1 != 0)
10030a09      return 0
10030a09  
100309f8  data_10063fe8(4, "couldn't load item config\n")
10030a06  return 0x1d

10030a0a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

10030a20    void* sub_10030a20()

10030a20  void* result = data_1006435c
10030a20  
10030a27  if (result != 0)
10030a2a      result = j_sub_100390b0(result)
10030a2a  
10030a32  data_1006435c = 0
10030a3c  return result

10030a3d                                                                                         90 90 90                               ...
10030a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10030a50    long double sub_10030a50(float arg1, float arg2) __pure

10030a54  long double result = fconvert.t(arg1) - fconvert.t(arg2)
10030a58  long double x87_r6 = fconvert.t(arg1)
10030a5c  long double temp0 = fconvert.t(arg2)
10030a5c  x87_r6 - temp0
10030a5c  
10030a65  if ((((x87_r6 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r6, temp0) ? 1 : 0) << 0xa
10030a65          | (x87_r6 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
10030a7b      long double temp1_1 = fconvert.t(-180.0)
10030a7b      result - temp1_1
10030a7b      
10030a86      if ((((result < temp1_1 ? 1 : 0) << 8
10030a86              | (is_unordered.t(result, temp1_1) ? 1 : 0) << 0xa
10030a86              | (result == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10030a88          return result + fconvert.t(360.0)
10030a65  else
10030a67      long double temp2_1 = fconvert.t(180.0)
10030a67      result - temp2_1
10030a67      
10030a72      if ((((result < temp2_1 ? 1 : 0) << 8
10030a72              | (is_unordered.t(result, temp2_1) ? 1 : 0) << 0xa
10030a72              | (result == temp2_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10030a7a          return result - fconvert.t(360.0)
10030a7a  
10030a8e  return result

10030a8f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

10030aa0    void sub_10030aa0(int32_t* arg1, int32_t arg2)

10030aa8  int32_t i = 0
10030aac  int32_t i_1 = 0
10030aac  
10030c48  do
10030abb      float var_98 = *arg1
10030ac2      float var_94 = arg1[1]
10030ac9      float var_90_1 = arg1[2]
10030acd      float var_84
10030acd      
10030acd      if (i s> 0)
10030ad1          int32_t edx_4 = arg1[1]
10030ad4          long double x87_r7_1 = fconvert.t(arg1[2])
10030ad7          var_84 = *arg1
10030ae7          int32_t var_80_1 = edx_4
10030af6          float var_7c_1 = fconvert.s(x87_r7_1 - fconvert.t(800f))
10030b0e          int32_t var_70
10030b0e          void var_24
10030b0e          __builtin_memcpy(dest: &var_70, 
10030b0e              src: j_sub_1001b260(&var_24, arg1, &var_84, 4, 0xffffffff), n: 0x24)
10030b0e          
10030b16          if (var_70 == 0)
10030b24              float var_68
10030b24              var_98 = var_68
10030b28              float var_64
10030b28              var_94 = var_64
10030b2c              float var_60
10030b2c              var_90_1 = var_60
10030b2c      
10030b34      int32_t var_a4_1 = 0
10030b3d      int32_t eax_5 = j_sub_1001ae60(&var_98)
10030b3d      
10030b49      if (eax_5 != 0)
10030b4c          var_a4_1 = eax_5
10030b4c          
10030b5a          if (j_sub_10011040(eax_5) != 0)
10030c69              return 
10030c69      
10030b60      int32_t var_9c_1 = 5
10030c2b      bool cond:2_1
10030c2b      
10030c2b      do
10030b6c          int32_t var_a0_1 = 5
10030b74          float var_78_1 = fconvert.s(float.t(var_9c_1))
10030c17          bool cond:1_1
10030c17          
10030c17          do
10030b7c              int32_t j = 5
10030b81              int32_t j_1 = 5
10030b85              float var_74_1 = fconvert.s(float.t(var_a0_1))
10030b85              
10030c07              do
10030ba1                  var_84 = fconvert.s(fconvert.t(var_78_1) + fconvert.t(var_98))
10030bae                  float var_80_2 = fconvert.s(fconvert.t(var_74_1) + fconvert.t(var_94))
10030bba                  float var_7c_2 = fconvert.s(float.t(j_1) + fconvert.t(var_90_1))
10030bbe                  int32_t var_4c[0xa]
10030bbe                  int32_t eax_7
10030bbe                  int80_t st0_1
10030bbe                  eax_7, st0_1 = j_sub_1001ba00(&var_98, &var_84, &var_4c, 0xa)
10030bbe                  
10030bca                  if (eax_7 s> 0)
10030bd2                      if (var_a4_1 == 0)
10030bd8                          var_a4_1 = var_4c[0]
10030bd8                      
10030bdc                      int32_t esi_3 = 0
10030bdc                      
10030be0                      if (eax_7 s> 0)
10030be2                          int32_t (* ebx_1)[0xa] = &var_4c
10030be2                          
10030bfb                          do
10030bf3                              if (j_sub_10011040(*ebx_1) != 0)
10030c6a                                  var_4c[esi_3]
10030c78                                  return 
10030c78                              
10030bf5                              esi_3 += 1
10030bf6                              ebx_1 = &(*ebx_1)[1]
10030bfb                          while (esi_3 s< eax_7)
10030bfb                  
10030bfd                  j -= 5
10030c03                  j_1 = j
10030c07              while (j s>= 0xfffffffb)
10030c07              
10030c10              cond:1_1 = var_a0_1 - 5 s>= 0xfffffffb
10030c13              var_a0_1 -= 5
10030c17          while (cond:1_1)
10030c24          cond:2_1 = var_9c_1 - 5 s>= 0xfffffffb
10030c27          var_9c_1 -= 5
10030c2b      while (cond:2_1)
10030c2b      
10030c3a      if (arg2 == 0)
10030c3a          break
10030c3a      
10030c40      i = i_1 + 1
10030c44      i_1 = i
10030c48  while (i s< 2)

10030c79                                                                             90 90 90 90 90 90 90                           .......
10030c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10030d00    int32_t sub_10030d00(float* arg1, int32_t arg2, void* arg3)

10030d14  bool cond:0 = *(arg3 + 0x24) != 0xb
10030d17  int32_t var_a8 = 0
10030d1f  int32_t var_a4 = 0
10030d27  int32_t var_a0 = 0
10030d2f  int32_t var_9c
10030d2f  __builtin_memcpy(dest: &var_9c, 
10030d2f      src: "\x00\x00\x80\xc1\x00\x00\x80\xc1\x00\x00\x00\xc1\x00\x00\x80\x41\x00\x00\x80\x41\x00\x00\x00\x41", 
10030d2f      n: 0x18)
10030d2f  
10030d5f  if (not(cond:0))
10030d7d      void var_78
10030d7d      void var_6c
10030d7d      float var_60
10030d7d      j_sub_10005e60(*(arg3 + 4), &var_a8, &var_60, &var_78, &var_6c)
10030d98      int32_t edi_1 = 0
10030d9e      float* ecx_1 = arg1
10030da0      float* esi_1 = &var_6c - arg1
10030da0      
10030da8      while (true)
10030da8          long double x87_r6_3 = fconvert.t(*(&var_78 - arg1 + ecx_1))
10030da8              + fconvert.t(*(esi_1 + ecx_1)) + fconvert.t(16f)
10030dae          long double temp0_1 = fconvert.t(*ecx_1)
10030dae          x87_r6_3 - temp0_1
10030dae          
10030db5          if ((((x87_r6_3 < temp0_1 ? 1 : 0) << 8
10030db5                  | (is_unordered.t(x87_r6_3, temp0_1) ? 1 : 0) << 0xa
10030db5                  | (x87_r6_3 == temp0_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10030db5              break
10030db5          
10030dc1          long double x87_r6_6 = fconvert.t(*(ecx_1 + &var_60 - arg1))
10030dc1              + fconvert.t(*(esi_1 + ecx_1)) - fconvert.t(16f)
10030dc7          long double temp1_1 = fconvert.t(*ecx_1)
10030dc7          x87_r6_6 - temp1_1
10030dc7          
10030dce          if ((((x87_r6_6 < temp1_1 ? 1 : 0) << 8
10030dce                  | (is_unordered.t(x87_r6_6, temp1_1) ? 1 : 0) << 0xa
10030dce                  | (x87_r6_6 == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10030dce              break
10030dce          
10030dd4          edi_1 += 1
10030dd5          ecx_1 = &ecx_1[1]
10030dd5          
10030ddb          if (edi_1 s>= 2)
10030de0              float ecx_2 = *arg1
10030de2              int32_t eax_3 = arg1[1]
10030de5              long double x87_r6_8 = fconvert.t(arg1[2]) + fconvert.t(24f)
10030deb              float var_b4 = ecx_2
10030def              float var_84 = ecx_2
10030dfa              int32_t var_b0_1 = eax_3
10030dfe              int32_t var_80_1 = eax_3
10030e07              float var_ac_1 = fconvert.s(x87_r6_8)
10030e28              float var_7c_1 = fconvert.s(fconvert.t(arg1[2]) - fconvert.t(48f))
10030e4b              int32_t var_90
10030e4b              int32_t var_54
10030e4b              __builtin_memcpy(dest: &var_54, 
10030e4b                  src: j_sub_10003010(&var_54, &var_b4, &var_9c, &var_90, &var_84, arg2, 
10030e4b                      0x2010003), 
10030e4b                  n: 0x54)
10030e66              int32_t var_50
10030e66              int32_t var_4
10030e66              
10030e66              if (var_50 == 0 && var_54 == 0 && var_4 != 0
10030e66                      && j_sub_1000ade0(var_4) == *(arg3 + 4))
10030e8c                  return 1
10030e8c              
10030e66              break
10030e66  
10030e99  return 0

10030e9a                                                                                90 90 90 90 90 90                            ......
10030ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10030f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10030f10    int32_t sub_10030f10(void* arg1)

10030f18  int32_t var_30 = 0
10030f20  int32_t var_2c = 0
10030f2b  int32_t var_28 = 0
10030f2b  
10030f36  if (*(arg1 + 0x24) == 0xb)
10030f50      void var_24
10030f50      void var_18
10030f50      float var_c
10030f50      j_sub_10005e60(*(arg1 + 4), &var_30, &var_c, &var_18, &var_24)
10030f50      
10030f68      if (j_sub_1000ae30(*(arg1 + 4), &var_24) != 0)
10030f89          float var_1c
10030f89          float var_10
10030f89          long double x87_r6_2 = fconvert.t(var_10) + fconvert.t(var_1c)
10030f8d          long double temp0_1 = fconvert.t(*(arg1 + 0x14))
10030f8d          x87_r6_2 - temp0_1
10030f90          int32_t eax_2
10030f90          eax_2.w = (x87_r6_2 < temp0_1 ? 1 : 0) << 8
10030f90              | (is_unordered.t(x87_r6_2, temp0_1) ? 1 : 0) << 0xa
10030f90              | (x87_r6_2 == temp0_1 ? 1 : 0) << 0xe | 0x3800
10030f90          
10030f95          if ((eax_2:1.b & 1) != 0)
10030fa0              return 1
10030f68      else
10030f75          data_10063fe8(1, "no entity with model %d\n", *(arg1 + 4))
10030f75  
10030f84  return 0

10030fa1     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
10030fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10030fe0    int32_t sub_10030fe0(void* arg1, int32_t arg2)

10030ff6  int32_t eax_1 = j_sub_10018dc0(*(arg1 + 0x24)) & not.d(arg2)
10030ff8  int32_t eax_2 = neg.d(eax_1)
10030ffd  return sbb.d(eax_2, eax_2, eax_1 != 0) + 1

10030ffe                                                                                            90 90                                ..
10031000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10031010    int32_t* sub_10031010(void* arg1, int32_t arg2, float arg3)

10031017  int32_t i = 0
10031019  int32_t* result = arg1 + 0x74
10031019  
1003102d  do
10031024      if (*result == arg2)
1003104f          long double st0_2 = j_sub_1000e120()
10031054          long double temp0 = fconvert.t(*(arg1 + (i << 2) + 0x78))
10031054          st0_2 - temp0
10031058          result.w = (st0_2 < temp0 ? 1 : 0) << 8
10031058              | (is_unordered.t(st0_2, temp0) ? 1 : 0) << 0xa
10031058              | (st0_2 == temp0 ? 1 : 0) << 0xe
10031058          
1003105d          if ((result:1.b & 1) != 0)
1003105f              *(arg1 + (i << 2) + 0x7c) += 1
1003106c              *(arg1 + (i << 2) + 0x78) = fconvert.s(j_sub_1000e120() + fconvert.t(arg3))
10031073              return result
10031073          
10031074          *(arg1 + (i << 2) + 0x7c) = 1
10031085          *(arg1 + (i << 2) + 0x78) = fconvert.s(j_sub_1000e120() + fconvert.t(arg3))
1003108c          return result
1003108c      
10031026      i += 1
10031027      result = &result[1]
1003102d  while (i s< 1)
1003102d  
1003102f  int32_t i_1 = 0
10031031  float* ebx = arg1 + 0x78
10031031  
10031049  do
10031034      long double st0_1 = j_sub_1000e120()
10031039      long double temp1_1 = fconvert.t(*ebx)
10031039      st0_1 - temp1_1
1003103b      result.w = (st0_1 < temp1_1 ? 1 : 0) << 8
1003103b          | (is_unordered.t(st0_1, temp1_1) ? 1 : 0) << 0xa
1003103b          | (st0_1 == temp1_1 ? 1 : 0) << 0xe
1003103b      
10031040      if ((result:1.b & 0x41) == 0)
10031091          *(arg1 + (i_1 << 2) + 0x74) = arg2
1003109e          *(arg1 + (i_1 << 2) + 0x78) = fconvert.s(j_sub_1000e120() + fconvert.t(arg3))
100310a2          *(arg1 + (i_1 << 2) + 0x7c) = 1
100310ad          return result
100310ad      
10031042      i_1 += 1
10031043      ebx = &ebx[1]
10031049  while (i_1 s< 1)
10031049  
1003104e  return result

100310ae                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
100310c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100310e0    int32_t sub_100310e0(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, float* arg7, int32_t arg8, void* arg9, int32_t arg10)

100310ed  uint32_t var_60 = 0
100310f1  int32_t result = 0
100310fa  int32_t i = j_sub_1001a370(arg2, 0)
100310fa  
10031101  if (i == 0)
10031214      return 0
10031214  
100311fb  do
10031109      float* edi_1 = arg7
10031117      int32_t j = 0
10031119      int32_t* ebx_2 = arg6 - edi_1
10031119      
10031135      do
1003111e          if (*(ebx_2 + edi_1) == i)
10031120              long double st0_1 = j_sub_1000e120()
10031125              long double temp0_1 = fconvert.t(*edi_1)
10031125              st0_1 - temp0_1
10031127              int32_t eax_1
10031127              eax_1.w = (st0_1 < temp0_1 ? 1 : 0) << 8
10031127                  | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
10031127                  | (st0_1 == temp0_1 ? 1 : 0) << 0xe
10031127              
1003112c              if ((eax_1:1.b & 0x41) != 0)
1003112c                  break
1003112c          
1003112e          j += 1
1003112f          edi_1 = &edi_1[1]
10031135      while (j s< 1)
10031135      
10031147      if (j == 1 || *(arg8 + (j << 2)) s<= 4)
1003116a          float* var_58
1003116a          void var_2c
1003116a          __builtin_memcpy(dest: &var_58, src: j_sub_1001a2e0(&var_2c, i), n: 0x2c)
1003116a          
10031188          if (arg3 != *(arg9 + 0xc) || var_58 != arg4)
100311a0              int32_t var_74_2 = arg10
100311a1              int32_t* var_78_2 = &var_58
100311a1              
100311ae              if (j_sub_10030fe0(arg1, arg5) != 0)
100311c2                  uint32_t eax_9 = zx.d(j_sub_10019fa0(var_58, *(arg9 + 0xc), arg10))
100311c2                  
100311c7                  if (eax_9 != 0)
100311d3                      int16_t var_30
100311d3                      uint32_t eax_10 = eax_9 + zx.d(var_30)
100311d3                      
100311df                      if (var_60 == 0 || eax_10 s< var_60)
100311e1                          var_60 = eax_10
100311e5                          result = i
100311e5      
100311f4      i = j_sub_1001a370(arg2, i)
100311fb  while (i != 0)
100311fb  
1003120c  return result

10031215                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10031220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10031270    int32_t sub_10031270(void* arg1, void* arg2, int32_t arg3, float* arg4)

1003127a  int32_t eax = *(arg1 + 0x4c)
1003127a  
1003128c  if (eax != 0 && arg2 != 0)
100312ab      int32_t var_58
100312ab      void var_2c
100312ab      __builtin_memcpy(dest: &var_58, src: j_sub_1001a2e0(&var_2c, eax), n: 0x2c)
100312b7      int32_t edx_2 = *(arg1 + 0x24)
100312bd      float* var_80_1 = arg1 + 0x78
100312be      int32_t eax_3 = *(arg1 + 0x44)
100312c1      void* var_84 = arg1 + 0x74
100312d2      float var_40
100312d2      int32_t eax_4 = j_sub_100310e0(&var_40, var_58, *(arg1 + 0x48), eax_3, edx_2, var_84, 
100312d2          var_80_1, arg1 + 0x7c, arg2, arg3)
100312d2      
100312dc      if (eax_4 != 0)
100312fb          __builtin_memcpy(dest: &var_58, src: j_sub_1001a2e0(&var_2c, eax_4), n: 0x2c)
10031301          *arg4 = fconvert.s(fconvert.t(var_40))
1003130d          float var_38
1003130d          arg4[2] = fconvert.s(fconvert.t(var_38) - fconvert.t(15f))
10031317          int32_t var_3c
10031317          arg4[1] = var_3c
10031326          return 1
10031326  
10031330  return 0

10031331                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10031340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10031380    float* sub_10031380(void* arg1, float* arg2)

10031388  int32_t var_3c = 0
10031390  int32_t var_38 = 0
10031398  float* result = *(arg1 + 0x24)
1003139b  int32_t var_34 = 0
1003139b  
100313a6  if (result == 0xb)
100313c1      float var_30
100313c1      float var_24
100313c1      void var_c
100313c1      j_sub_10005e60(*(arg1 + 4), &var_3c, &var_24, &var_30, &var_c)
100313e1      float var_18 = fconvert.s(fconvert.t(var_30) + fconvert.t(var_24))
100313ee      float var_2c
100313ee      float var_20
100313ee      float var_14_1 = fconvert.s(fconvert.t(var_2c) + fconvert.t(var_20))
100313fa      float var_28
100313fa      float var_1c
100313fa      float var_10_1 = fconvert.s(fconvert.t(var_28) + fconvert.t(var_1c))
100313fe      result = j_sub_10043380(&var_c, 0.5f, &var_18, arg2)
10031409      arg2[2] = *(arg1 + 0x14)
10031409  
10031411  return result

10031412                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10031420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10031450    long double sub_10031450(float arg1, float* arg2)

10031454  int32_t* ebx = arg1
1003145d  float eax = *ebx
1003145f  long double x87_r7 = fconvert.t(ebx[2])
10031462  int32_t ecx = ebx[1]
10031466  int32_t var_4c = ebx[2]
1003146a  float var_54 = eax
10031474  float var_60 = eax
10031482  int32_t var_5c = ecx
10031488  float var_58 = fconvert.s(x87_r7 - fconvert.t(60f))
100314ae  float var_48
100314ae  __builtin_memcpy(dest: &var_48, 
100314ae      src: j_sub_1001b260(&var_48, &var_54, &var_60, 4, 0xffffffff), n: 0x24)
100314ba  float var_38
100314ba  float var_64 = fconvert.s(fconvert.t(var_38) + fconvert.t(1f))
100314c1  arg1 = 8f
10031586  float eax_5
10031586  
10031586  do
100314d5      j_sub_10043380(ebx, arg1, arg2, &var_54)
100314ec      var_60 = var_54
100314f6      int32_t var_5c_1 = ecx
100314fc      float var_4c_1 = fconvert.s(fconvert.t(var_64) + fconvert.t(24f))
10031508      float var_58_1 = var_4c_1
10031526      float var_58_2 = fconvert.s(fconvert.t(var_4c_1)
10031526          - (fconvert.t(*(data_10064060 + 0x10)) + fconvert.t(48f)))
1003153d      void var_24
1003153d      __builtin_memcpy(dest: &var_48, 
1003153d          src: j_sub_1001b260(&var_24, &var_54, &var_60, 4, 0xffffffff), n: 0x24)
1003153d      
10031545      if (var_48 == 0)
10031554          long double x87_r7_11 =
10031554              fconvert.t(var_64) - fconvert.t(*(data_1006405c + 0x10)) - fconvert.t(8f)
1003155a          long double temp1_1 = fconvert.t(var_38)
1003155a          x87_r7_11 - temp1_1
1003155e          eax_5.w = (x87_r7_11 < temp1_1 ? 1 : 0) << 8
1003155e              | (is_unordered.t(x87_r7_11, temp1_1) ? 1 : 0) << 0xa
1003155e              | (x87_r7_11 == temp1_1 ? 1 : 0) << 0xe
1003155e          
10031563          if ((eax_5:1.b & 0x41) == 0)
100315b0              float var_40
100315b0              var_60 = var_40
100315b5              int32_t var_3c
100315b5              int32_t var_5c_2 = var_3c
100315b9              float var_58_3 = fconvert.s(fconvert.t(var_38) - fconvert.t(20f))
100315b9              
100315c7              if ((j_sub_10003080(&var_60) & 0x20) == 0)
100315d4                  return fconvert.t(arg1)
100315d4              
100315c7              break
100315c7          
10031569          var_64 = var_38
10031569      
10031571      long double x87_r7_13 = fconvert.t(arg1) + fconvert.t(8f)
10031577      arg1 = fconvert.s(x87_r7_13)
1003157b      long double temp0_1 = fconvert.t(100f)
1003157b      x87_r7_13 - temp0_1
10031581      eax_5.w = (x87_r7_13 < temp0_1 ? 1 : 0) << 8
10031581          | (is_unordered.t(x87_r7_13, temp0_1) ? 1 : 0) << 0xa
10031581          | (x87_r7_13 == temp0_1 ? 1 : 0) << 0xe
10031586  while ((eax_5:1.b & 0x41) != 0)
10031599  return fconvert.t(0f)

100315d5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
100315e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10031650    int32_t sub_10031650(int32_t* arg1, int32_t* arg2, float arg3)

1003165c  int32_t ecx = arg1[1]
1003165f  float edx = arg1[2]
10031662  int32_t var_6c = *arg1
1003166b  int32_t var_68 = ecx
1003168a  float var_64_1 = fconvert.s(fconvert.t(edx) + fconvert.t(*(data_10064060 + 0x10)))
100316a2  int32_t var_48
100316a2  __builtin_memcpy(dest: &var_48, src: j_sub_1001b260(&var_48, arg1, &var_6c, 2, arg1[9]), 
100316a2      n: 0x24)
100316a2  
100316aa  if (var_48 != 0)
100316b4      return 0
100316b4  
100316b9  float var_38
100316b9  long double x87_r7_3 = fconvert.t(var_38) - fconvert.t(arg1[2])
100316c2  long double temp0 = fconvert.t(*(data_1006405c + 0x10))
100316c2  x87_r7_3 - temp0
100316c5  int32_t eax_3
100316c5  eax_3.w = (x87_r7_3 < temp0 ? 1 : 0) << 8
100316c5      | (is_unordered.t(x87_r7_3, temp0) ? 1 : 0) << 0xa
100316c5      | (x87_r7_3 == temp0 ? 1 : 0) << 0xe
100316c5  
100316ca  if ((eax_3:1.b & 1) != 0)
100316d4      return 0
100316d4  
100316e1  int32_t var_4c = 0
100316eb  int32_t eax_7 = arg2[1]
100316ee  float var_54 = *arg2
100316f2  int32_t var_50 = eax_7
100316f6  int32_t ecx_3
100316f6  int80_t st0
100316f6  ecx_3, st0 = j_sub_10043290(&var_54)
1003171a  int32_t var_84_1 = ecx_3
1003171f  j_sub_10043380(arg1, 
1003171f      fconvert.s(fconvert.t(arg3) * fconvert.t(arg1[0xb]) * fconvert.t(0.5)), &var_54, 
1003171f      &var_6c)
10031730  int32_t var_40
10031730  int32_t var_60 = var_40
10031734  int32_t var_3c
10031734  int32_t var_5c = var_3c
1003173d  float var_58 = var_38
10031741  float var_64_2 = var_38
1003176a  void var_24
1003176a  __builtin_memcpy(dest: &var_48, 
1003176a      src: j_sub_1001b260(&var_24, &var_60, &var_6c, 2, arg1[9]), n: 0x24)
1003176a  
10031772  if (var_48 != 0)
1003177c      return 0
1003177c  
10031789  var_60 = var_40
1003178d  float var_58_1 = var_38
10031791  int32_t edx_5 = arg1[2]
10031794  var_6c = var_40
1003179b  int32_t var_5c_1 = var_3c
1003179f  int32_t var_68_1 = var_3c
100317a3  int32_t var_64_3 = edx_5
100317cc  __builtin_memcpy(dest: &var_48, 
100317cc      src: j_sub_1001b260(&var_24, &var_60, &var_6c, 2, arg1[9]), n: 0x24)
100317cc  
100317d4  if (var_48 != 0)
100317de      return 0
100317de  
100317df  float var_44
100317df  long double x87_r7_8 = fconvert.t(var_44)
100317e3  long double temp1 = fconvert.t(1.0)
100317e3  x87_r7_8 - temp1
100317e9  int32_t eax_15
100317e9  eax_15.w = (x87_r7_8 < temp1 ? 1 : 0) << 8
100317e9      | (is_unordered.t(x87_r7_8, temp1) ? 1 : 0) << 0xa
100317e9      | (x87_r7_8 == temp1 ? 1 : 0) << 0xe
100317e9  
100317ee  if ((eax_15:1.b & 1) == 0)
100317f8      return 0
100317f8  
100317fd  long double x87_r7_10 = fconvert.t(var_38) - fconvert.t(arg1[2])
10031806  long double temp2 = fconvert.t(*(data_1006405c + 0x10))
10031806  x87_r7_10 - temp2
10031809  eax_15.w = (x87_r7_10 < temp2 ? 1 : 0) << 8
10031809      | (is_unordered.t(x87_r7_10, temp2) ? 1 : 0) << 0xa
10031809      | (x87_r7_10 == temp2 ? 1 : 0) << 0xe
10031809  
1003180e  if ((eax_15:1.b & 1) != 0)
10031818      return 0
10031818  
1003181d  j_sub_10037350(arg1[0xa])
10031833  j_sub_10037520(arg1[0xa], &var_54, arg3)
10031846  arg1[0x18] |= 1
1003184e  return 1

1003184f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10031860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100318a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100318c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100318d0    int32_t sub_100318d0(void* arg1, int32_t* arg2, float arg3)

100318d9  int32_t edx = arg2[1]
100318dc  int32_t eax_1 = arg2[2]
100318df  int32_t var_c = *arg2
100318e7  int32_t var_8 = edx
100318ec  int32_t var_4 = eax_1
100318f0  j_sub_10043290(&var_c)
10031909  j_sub_10037520(*(arg1 + 0x28), &var_c, arg3)
10031916  return 1

10031917                                                                       90 90 90 90 90 90 90 90 90                         .........
10031920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10031940    int32_t sub_10031940(float arg1, int32_t* arg2, float arg3, int32_t arg4)

10031949  int16_t eax = (*(arg1 i+ 0x60)).w
10031949  
1003194e  if ((eax.b & 2) != 0)
10031969      if (j_sub_10031650(arg1, arg2, arg3) == 0)
10031970          int32_t ebx_1 = arg4
1003197b          int32_t edi_1
1003197b          
1003197b          if ((ebx_1.b & 2) != 0)
10031980              edi_1 = 4
10031980          
10031985          if ((ebx_1.b & 2) == 0 || (ebx_1.b & 4) != 0)
10031987              edi_1 = 2
10031987          
1003198e          int32_t edx_1 = arg2[1]
10031995          float var_68 = *arg2
1003199a          int32_t var_64_1 = edx_1
1003199e          int32_t var_60_1 = 0
100319a6          j_sub_10043290(&var_68)
100319a6          
100319b3          if ((ebx_1.b & 4) == 0)
100319bb              long double st0_2 = j_sub_10031450(arg1, &var_68)
100319c0              long double temp1_1 = fconvert.t(0f)
100319c0              st0_2 - temp1_1
100319c0              
100319ce              if ((((st0_2 < temp1_1 ? 1 : 0) << 8
100319ce                      | (is_unordered.t(st0_2, temp1_1) ? 1 : 0) << 0xa
100319ce                      | (st0_2 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
100319d0                  ebx_1 |= 4
100319d3                  arg4 = ebx_1
100319d3          
100319ec          float var_5c
100319ec          j_sub_10043570(&var_68, arg3, &var_5c)
100319f4          float ebx_2 = ebx_1 & 4
100319fb          long double x87_r7_3
100319fb          
100319fb          if (ebx_2 == 0)
10031a1f              x87_r7_3 = fconvert.t(2f)
10031a25              arg2 = *(arg1 i+ 0x2c)
100319fb          else
10031a06              x87_r7_3 = fconvert.t(3f)
10031a0f              arg2 = *(arg1 i+ 0x2c)
10031a16              int32_t var_54_1 = *(data_10064068 + 0x10)
10031a16          
10031a33          int16_t x87control
10031a33          int32_t eax_6 = __ftol(x87control, x87_r7_3 / fconvert.t(arg2))
10031a41          int32_t var_7c_5 = 0
10031a43          char var_80_3 = 0x3d
10031a46          float* eax_8 = *(arg1 i+ 0x24)
10031a52          float* var_90_1 = &var_5c
10031a54          int32_t var_98_1 = 1
10031a57          int32_t* var_a0 = arg1
10031a5e          float var_50
10031a5e          int32_t eax_9
10031a5e          int80_t st0_3
10031a5e          eax_9, st0_3 = j_sub_1000f840(&var_50, eax_8, var_a0, edi_1, var_98_1, 
10031a5e              arg1 i+ 0xc, var_90_1, eax_6, eax_6, arg2, var_80_3, var_7c_5)
10031a71          __builtin_memcpy(dest: &var_50, src: eax_9, n: 0x50)
10031a7b          int32_t var_4
10031a7b          
10031a7b          if (var_4 s>= eax_6)
10031a84              return 0
10031a84          
10031a8a          char var_10
10031a8a          
10031a8a          if ((var_10 & 0x38) != 0)
10031a93              return 0
10031a93          
10031a9f          int32_t var_60_2 = 0
10031aa7          float* __saved_ebx_2 = &var_68
10031aa8          var_68 = fconvert.s(fconvert.t(var_50) - fconvert.t(*arg1))
10031ab3          float var_4c
10031ab3          float var_64_2 = fconvert.s(fconvert.t(var_4c) - fconvert.t(*(arg1 i+ 4)))
10031ab7          long double st0_4 = j_sub_10043500(__saved_ebx_2)
10031ac9          long double x87_r5_3 =
10031ac9              fconvert.t(arg3) * fconvert.t(*(arg1 i+ 0x2c)) * fconvert.t(0.5)
10031acf          x87_r5_3 - st0_4
10031acf          
10031ad6          if ((((x87_r5_3 < st0_4 ? 1 : 0) << 8
10031ad6                  | (is_unordered.t(x87_r5_3, st0_4) ? 1 : 0) << 0xa
10031ad6                  | (x87_r5_3 == st0_4 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10031adf              return 0
10031adf          
10031ae6          if (ebx_2 != 0)
10031aec              j_sub_10037350(*(arg1 i+ 0x28))
10031aec          
10031afc          if ((arg4.b & 2) != 0)
10031b02              j_sub_100373d0(*(arg1 i+ 0x28))
10031b02          
10031b37          j_sub_10037520(*(arg1 i+ 0x28), &var_68, arg3)
1003194e  else if ((eax.b & 1) != 0)
10031b19      long double x87_r7_6 = fconvert.t(*(arg1 i+ 0x14))
10031b1c      long double temp0_1 = fconvert.t(50f)
10031b1c      x87_r7_6 - temp0_1
10031b1c      
10031b27      if ((((x87_r7_6 < temp0_1 ? 1 : 0) << 8
10031b27              | (is_unordered.t(x87_r7_6, temp0_1) ? 1 : 0) << 0xa
10031b27              | (x87_r7_6 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10031b37          j_sub_10037520(*(arg1 i+ 0x28), arg2, arg3)
10031b37  
10031b49  return 1

10031b4a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10031b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10031be0    int32_t sub_10031be0(int32_t* arg1, int32_t* arg2, float arg3, int32_t arg4)

10031c00  if (j_sub_1000efc0(arg1) == 0)
10031c15      return j_sub_10031940(arg1, arg2, arg3, arg4)
10031c15  
10031c02  j_sub_100318d0(arg1, arg2, arg3)
10031c0b  return 1

10031c16                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10031c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10031c30    int32_t sub_10031c30(int32_t arg1, float arg2, float* arg3, float* arg4, float* arg5)

10031c30  float* eax_5 = arg2
10031c34  float* ecx = arg1
10031c3e  long double x87_r7_1 = fconvert.t(*eax_5) - fconvert.t(*ecx)
10031c47  long double x87_r6_1 = fconvert.t(eax_5[1]) - fconvert.t(ecx[1])
10031c4c  long double x87_r5_1 = fconvert.t(*arg4) - fconvert.t(*arg3)
10031c51  long double x87_r4_1 = fconvert.t(arg4[1]) - fconvert.t(arg3[1])
10031c5c  long double x87_r3_2 = x87_r5_1 * x87_r6_1 - x87_r4_1 * x87_r7_1
10031c5e  arg2 = fconvert.s(x87_r3_2)
10031c62  long double temp1 = fconvert.t(0f)
10031c62  x87_r3_2 - temp1
10031c68  float* eax
10031c68  eax.w = (x87_r3_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r3_2, temp1) ? 1 : 0) << 0xa
10031c68      | (x87_r3_2 == temp1 ? 1 : 0) << 0xe | 0x2000
10031c68  
10031c6d  if ((eax:1.b & 0x40) != 0)
10031cdc      return 0
10031cdc  
10031c79  long double x87_r3_5 = x87_r7_1 * fconvert.t(ecx[1]) - x87_r6_1 * fconvert.t(*ecx)
10031c84  long double x87_r2_6 = x87_r5_1 * fconvert.t(arg3[1]) - x87_r4_1 * fconvert.t(*arg3)
10031c94  int32_t eax_1
10031c94  int16_t x87control
10031c94  int16_t x87control_1
10031c94  eax_1, x87control_1 =
10031c94      __ftol(x87control, (x87_r2_6 * x87_r7_1 - x87_r3_5 * x87_r5_1) / fconvert.t(arg2))
10031ca5  *arg5 = fconvert.s(float.t(eax_1))
10031ccd  arg5[1] = fconvert.s(float.t(__ftol(x87control_1, 
10031ccd      (x87_r2_6 * x87_r6_1 - x87_r3_5 * x87_r4_1) / fconvert.t(arg2))))
10031cd1  return 1

10031cdd                                                                                         90 90 90                               ...
10031ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10031d10    void* sub_10031d10(float* arg1, float* arg2, void* arg3)

10031d2a  void var_78
10031d2a  void var_6c
10031d2a  j_sub_1000dda0(arg1[0xc], &var_6c, &var_78)
10031d3c  long double x87_r7_1 = fabs(fconvert.t(arg2[2]))
10031d3e  long double temp0 = fconvert.t(0.69999999999999996)
10031d3e  x87_r7_1 - temp0
10031d3e  
10031d49  if ((((x87_r7_1 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_1, temp0) ? 1 : 0) << 0xa
10031d49          | (x87_r7_1 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
10031d57      float var_64
10031d57      float var_64_1 = fconvert.s(fconvert.t(var_64) + fconvert.t(*(data_1006405c + 0x10)))
10031d65      float var_70
10031d65      float var_70_1 = fconvert.s(fconvert.t(var_70) - fconvert.t(10f))
10031d65  
10031d75  float var_60
10031d75  j_sub_10043380(arg1, 3f, arg2, &var_60)
10031d7a  int32_t eax_2 = arg1[9]
10031d7d  int32_t var_94 = 0x2010003
10031d8b  float* var_9c = &var_60
10031d90  void* var_a0 = &var_78
10031d91  void* var_a4 = &var_6c
10031d96  float* var_a8 = arg1
10031dab  void var_54
10031dab  __builtin_memcpy(dest: &var_54, 
10031dab      src: j_sub_10003010(&var_54, var_a8, var_a4, var_a0, var_9c, eax_2, var_94), n: 0x54)
10031dad  void* result_1
10031dad  void* result = result_1
10031dbd  int32_t var_4
10031dbd  
10031dbd  if (result == 0 && var_4 != 0)
10031dbf      result = arg3
10031dc6      *(result + 8) = 1
10031dcd      *(result + 0xc) = var_4
10031dcd  
10031dd3  return result

10031dd4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10031de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10031e20    int32_t sub_10031e20(int32_t arg1)

10031e26  __builtin_memset(s: arg1, c: 0, n: 0x18)
10031e37  return arg1

10031e38                                                                          90 90 90 90 90 90 90 90                          ........
10031e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10031e50    void sub_10031e50(int32_t arg1, float* arg2, float arg3)

10031e5a  void var_30
10031e5a  j_sub_10031e20(&var_30)
10031e5f  int32_t* edi = arg3
10031e6b  int32_t var_34 = 0
10031e78  float var_3c
10031e78  int32_t* var_4c = &var_3c
10031e79  var_3c = fconvert.s(fconvert.t(edi[3]) - fconvert.t(*arg2))
10031e83  float var_38 = fconvert.s(fconvert.t(edi[4]) - fconvert.t(arg2[1]))
10031e8c  arg3 = fconvert.s(j_sub_10043290(var_4c))
10031e9b  j_sub_10031d10(arg2, &var_3c, &var_30)
10031ea0  long double x87_r7_5 = fconvert.t(arg3)
10031ea4  long double temp0 = fconvert.t(10f)
10031ea4  x87_r7_5 - temp0
10031ea4  
10031eb2  if ((((x87_r7_5 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_5, temp0) ? 1 : 0) << 0xa
10031eb2          | (x87_r7_5 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
10031ebd      var_34 = 0
10031ec5      float* var_48_1 = &var_3c
10031ec6      var_3c = fconvert.s(fconvert.t(edi[6]) - fconvert.t(*arg2))
10031ed0      var_38 = fconvert.s(fconvert.t(edi[7]) - fconvert.t(arg2[1]))
10031ed9      arg3 = fconvert.s(j_sub_10043290(var_48_1))
10031ed9  
10031eed  if ((j_sub_1001af50(*edi).b & 2) == 0)
10031eef      long double x87_r7_11 = fconvert.t(arg3)
10031ef3      long double temp2_1 = fconvert.t(20f)
10031ef3      x87_r7_11 - temp2_1
10031ef3      
10031efe      if ((((x87_r7_11 < temp2_1 ? 1 : 0) << 8
10031efe              | (is_unordered.t(x87_r7_11, temp2_1) ? 1 : 0) << 0xa
10031efe              | (x87_r7_11 == temp2_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10031f04          j_sub_100373d0(arg2[0xa])
10031f04  
10031f12  long double st0_2 = j_sub_10031450(arg2, &var_3c)
10031f17  long double temp1 = fconvert.t(0f)
10031f17  st0_2 - temp1
10031f17  
10031f25  if ((((st0_2 < temp1 ? 1 : 0) << 8 | (is_unordered.t(st0_2, temp1) ? 1 : 0) << 0xa
10031f25          | (st0_2 == temp1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
10031f3d      arg3 = 400f
10031f25  else
10031f35      arg3 = fconvert.s(fconvert.t(300f) - (fconvert.t(300f) - (st0_2 + st0_2)))
10031f35  
10031f53  j_sub_10037520(arg2[0xa], &var_3c, arg3)
10031f64  float var_14 = var_38
10031f6c  int32_t var_10 = var_34
10031f7e  float var_18 = var_3c
10031f82  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

10031f8a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10031fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10031fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10031fe0    void sub_10031fe0(int32_t arg1, float* arg2, void* arg3)

10031fea  void var_30
10031fea  j_sub_10031e20(&var_30)
10031ffb  int32_t var_34 = 0
10032008  float var_3c
10032008  int32_t* var_4c = &var_3c
10032009  var_3c = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2))
10032013  float var_38 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
10032017  int32_t ecx
10032017  long double st0
10032017  ecx, st0 = j_sub_10043290(var_4c)
10032017  long double x87_r7_4 = st0
1003201c  long double temp0 = fconvert.t(100f)
1003201c  x87_r7_4 - temp0
1003201c  
1003202a  if ((((x87_r7_4 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_4, temp0) ? 1 : 0) << 0xa
1003202a          | (x87_r7_4 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
1003202e      x87_r7_4 = fconvert.t(100f)
1003202e  
1003203d  int32_t var_48_1 = ecx
10032053  j_sub_10037520(arg2[0xa], &var_3c, 
10032053      fconvert.s(fconvert.t(400f) - (fconvert.t(400f) - x87_r7_4 * fconvert.t(3f))))
10032064  int32_t var_10 = var_34
1003206c  float var_18 = var_3c
1003207e  float var_14 = var_38
10032082  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

1003208a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
100320a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100320c0    int32_t sub_100320c0(int32_t arg1, float* arg2, void* arg3)

100320ca  void var_30
100320ca  j_sub_10031e20(&var_30)
100320db  int32_t var_34 = 0
100320e8  float var_3c
100320e8  int32_t* var_4c = &var_3c
100320e9  var_3c = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2))
100320f3  float var_38 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
100320f7  j_sub_10043290(var_4c)
10032109  j_sub_10031d10(arg2, &var_3c, &var_30)
10032112  j_sub_100373d0(arg2[0xa])
10032117  int32_t eax_1 = arg2[0xa]
1003211e  float var_60 = 400f
10032125  j_sub_10037520(eax_1, &var_3c, var_60)
10032136  int32_t var_10 = var_34
1003213e  float var_18 = var_3c
10032150  float var_14 = var_38
10032154  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
1003215b  return arg1

1003215c                                                                                      90 90 90 90                              ....
10032160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10032190    int32_t sub_10032190(int32_t arg1, float* arg2, float arg3)

1003219a  void var_30
1003219a  j_sub_10031e20(&var_30)
100321ab  int32_t var_34 = 0
100321b8  float var_3c
100321b8  int32_t* var_4c = &var_3c
100321b9  var_3c = fconvert.s(fconvert.t(*(arg3 i+ 0xc)) - fconvert.t(*arg2))
100321c3  float var_38 = fconvert.s(fconvert.t(*(arg3 i+ 0x10)) - fconvert.t(arg2[1]))
100321cc  arg3 = fconvert.s(j_sub_10043290(var_4c))
100321db  int32_t ecx = j_sub_10031d10(arg2, &var_3c, &var_30)
100321e0  long double x87_r7_5 = fconvert.t(arg3)
100321e4  long double temp0 = fconvert.t(7f)
100321e4  x87_r7_5 - temp0
100321e4  
100321f2  if ((((x87_r7_5 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_5, temp0) ? 1 : 0) << 0xa
100321f2          | (x87_r7_5 == temp0 ? 1 : 0) << 0xe):1.b & 1) == 0)
10032202      long double x87_r7_6 = fconvert.t(arg3)
10032206      long double temp1_1 = fconvert.t(60f)
10032206      x87_r7_6 - temp1_1
10032206      
10032211      if ((((x87_r7_6 < temp1_1 ? 1 : 0) << 8
10032211              | (is_unordered.t(x87_r7_6, temp1_1) ? 1 : 0) << 0xa
10032211              | (x87_r7_6 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
10032213          arg3 = 60f
10032213      
10032228      int32_t var_48_2 = ecx
1003223e      j_sub_10037520(arg2[0xa], &var_3c, 
1003223e          fconvert.s(fconvert.t(360f)
1003223e              - (fconvert.t(360f) - fconvert.t(arg3) * fconvert.t(6f))))
100321f2  else
100321f8      j_sub_10037350(arg2[0xa])
100321f8  
10032252  int32_t var_10 = var_34
1003225a  float var_18 = var_3c
10032269  float var_14 = var_38
1003226d  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
10032274  return arg1

10032275                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10032280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100322a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100322c0    int32_t sub_100322c0(int32_t arg1, float arg2, void* arg3)

100322ca  void var_30
100322ca  j_sub_10031e20(&var_30)
100322cf  float* esi = arg2
100322d6  long double x87_r7 = fconvert.t(esi[5])
100322d9  long double temp0 = fconvert.t(250f)
100322d9  x87_r7 - temp0
100322d9  
100322e4  if ((((x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100322e4          | (x87_r7 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
100322f2      float var_3c
100322f2      int32_t* var_48_1 = &var_3c
100322f3      int32_t var_34_1 = 0
10032300      var_3c = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*esi))
1003230a      float var_38_1 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(esi[1]))
10032313      arg2 = fconvert.s(j_sub_10043290(var_48_1))
10032322      int32_t ecx_1 = j_sub_10031d10(esi, &var_3c, &var_30)
10032327      long double x87_r7_6 = fconvert.t(arg2)
1003232b      long double temp1_1 = fconvert.t(60f)
1003232b      x87_r7_6 - temp1_1
1003232b      
10032339      if ((((x87_r7_6 < temp1_1 ? 1 : 0) << 8
10032339              | (is_unordered.t(x87_r7_6, temp1_1) ? 1 : 0) << 0xa
10032339              | (x87_r7_6 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
1003233b          arg2 = 60f
1003233b      
10032350      int32_t var_48_2 = ecx_1
10032366      j_sub_10037520(esi[0xa], &var_3c, 
10032366          fconvert.s(fconvert.t(400f)
10032366              - (fconvert.t(400f) - fconvert.t(arg2) * fconvert.t(6f))))
1003237a      float var_18_1 = var_3c
1003237e      float var_14_1 = var_38_1
10032382      int32_t var_10_1 = var_34_1
10032382  
10032395  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
1003239c  return arg1

1003239d                                                                                         90 90 90                               ...
100323a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100323c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100323e0    int32_t sub_100323e0(int32_t arg1, float* arg2, void* arg3)

100323ea  void var_30
100323ea  j_sub_10031e20(&var_30)
10032400  float var_3c
10032400  float* var_4c = &var_3c
10032401  var_3c = fconvert.s(fconvert.t(*(arg3 + 0xc)) - fconvert.t(*arg2))
1003240b  float var_38 = fconvert.s(fconvert.t(*(arg3 + 0x10)) - fconvert.t(arg2[1]))
10032415  float var_34 = fconvert.s(fconvert.t(*(arg3 + 0x14)) - fconvert.t(arg2[2]))
10032419  j_sub_10043290(var_4c)
1003242b  j_sub_10031d10(arg2, &var_3c, &var_30)
10032430  int32_t edx = arg2[0xa]
10032437  float var_5c = 400f
1003243c  float* var_60 = &var_3c
1003243e  j_sub_10037520(edx, var_60, var_5c)
1003244f  float var_18 = var_3c
10032453  float var_14 = var_38
10032461  float var_10 = var_34
10032465  float var_c
10032465  j_sub_10041790(&var_3c, &var_c)
10032471  int32_t var_1c
10032471  int32_t eax_2
10032471  eax_2.b = var_1c.b | 2
10032478  int32_t var_1c_1 = eax_2
10032486  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
1003248d  return arg1

1003248e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
100324a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100324c0    int32_t sub_100324c0(int32_t arg1, float* arg2, int32_t arg3)

100324ca  void var_30
100324ca  j_sub_10031e20(&var_30)
100324d7  int32_t var_34 = 0
100324e2  long double x87_r7_1 = fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2)
100324e4  float var_48 = fconvert.s(x87_r7_1)
100324ee  float var_44 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
100324fc  float var_38 = var_44
10032500  float var_40 = fconvert.s(fconvert.t(*(arg3 + 0x20)) - fconvert.t(arg2[2]))
10032504  float var_3c = fconvert.s(x87_r7_1)
1003251a  float* var_58 = &var_48
10032525  long double x87_r7_4 =
10032525      float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f) - fconvert.t(0.5)
1003253d  float var_40_1 = fconvert.s((x87_r7_4 + x87_r7_4) * fconvert.t(40.0) + fconvert.t(var_40)
1003253d      + fconvert.t(15.0))
10032541  j_sub_10043290(var_58)
1003254d  long double st0_1 = j_sub_10043290(&var_3c)
10032559  int32_t var_60 = arg2[0xa]
1003255a  j_sub_10037460(var_60)
1003255f  long double x87_r7_11 = fconvert.t(fconvert.s(st0_1))
10032563  long double temp0 = fconvert.t(40f)
10032563  x87_r7_11 - temp0
10032563  
10032571  if ((((x87_r7_11 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_11, temp0) ? 1 : 0) << 0xa
10032571          | (x87_r7_11 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
10032577      j_sub_10037400(arg2[0xa])
10032577  
10032589  float var_c
10032589  j_sub_10041790(&var_48, &var_c)
1003259d  int32_t var_1c
1003259d  int32_t eax_4
1003259d  eax_4.b = var_1c.b | 1
1003259f  float var_10 = var_40_1
100325a3  int32_t var_1c_1 = eax_4
100325ab  float var_14 = var_44
100325be  float var_18 = var_48
100325c2  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
100325c9  return arg1

100325ca                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
100325e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10032620    void sub_10032620(int32_t arg1, int32_t arg2, void* arg3)

1003262a  void var_30
1003262a  j_sub_10031e20(&var_30)
1003262f  int32_t* esi = arg2
1003262f  
1003263a  if ((esi[0x18].b & 0x10) == 0)
10032645      int32_t edx_1 = esi[1]
10032648      long double x87_r7_2 = fconvert.t(esi[2]) - fconvert.t(32f)
10032652      int32_t var_3c = *esi
10032657      int32_t var_38_1 = edx_1
1003265b      float var_34_1 = fconvert.s(x87_r7_2)
1003265b      
10032669      if ((j_sub_10003080(&var_3c) & 0x38) != 0)
10032678          float var_48 = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*esi))
10032682          float var_44_1 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(esi[1]))
1003268c          float var_40_1 = fconvert.s(fconvert.t(*(arg3 + 0x20)) - fconvert.t(esi[2]))
100326a8          long double x87_r7_11 =
100326a8              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100326a8              - fconvert.t(0.5)
100326ba          var_48 =
100326ba              fconvert.s((x87_r7_11 + x87_r7_11) * fconvert.t(10.0) + fconvert.t(var_48))
100326d6          long double x87_r7_17 =
100326d6              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
100326d6              - fconvert.t(0.5)
100326e8          float var_44_2 =
100326e8              fconvert.s((x87_r7_17 + x87_r7_17) * fconvert.t(10.0) + fconvert.t(var_44_1))
100326fe          float* var_54_2 = &var_48
10032709          long double x87_r7_23 =
10032709              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10032709              - fconvert.t(0.5)
10032721          float var_40_2 = fconvert.s((x87_r7_23 + x87_r7_23) * fconvert.t(10.0)
10032721              + fconvert.t(var_40_1) + fconvert.t(70.0))
10032725          j_sub_10043290(var_54_2)
10032731          float var_58_1 = 400f
10032736          float* var_5c_1 = &var_48
10032737          int32_t var_60 = esi[0xa]
1003273a          j_sub_10037520(var_60, var_5c_1, var_58_1)
10032749          float var_c
10032749          j_sub_10041790(&var_48, &var_c)
1003275d          int32_t var_1c
1003275d          int32_t eax_10
1003275d          eax_10.b = var_1c.b | 1
1003275f          float var_14_1 = var_44_2
10032763          int32_t var_1c_1 = eax_10
1003276b          float var_18_1 = var_48
1003276f          float var_10_1 = var_40_2
1003276f  
10032782  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

1003278a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
100327a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100327c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100327e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100327f0    void sub_100327f0(int32_t arg1, float* arg2, float arg3)

100327fb  void var_30
100327fb  void* var_60 = &var_30
100327fc  j_sub_10031e20(var_60)
10032801  float esi = arg3
1003281c  float var_3c = fconvert.s(fconvert.t(*(esi i+ 0x18)) - fconvert.t(*arg2))
10032826  float var_38 = fconvert.s(fconvert.t(*(esi i+ 0x1c)) - fconvert.t(arg2[1]))
10032830  float var_34 = fconvert.s(fconvert.t(*(esi i+ 0x20)) - fconvert.t(arg2[2]))
10032834  j_sub_10031d10(arg2, &var_3c, &var_30)
10032845  float var_48 = var_3c
1003284a  float var_44 = var_38
1003284e  int32_t var_40 = 0
10032856  long double st0 = j_sub_10043290(&var_48)
1003285b  arg3 = fconvert.s(st0)
1003285f  long double temp0 = fconvert.t(60f)
1003285f  st0 - temp0
1003286d  float var_4c
1003286d  
1003286d  if ((((st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
1003286d          | (st0 == temp0 ? 1 : 0) << 0xe):1.b & 1) == 0)
1003292a      var_4c = 400f
1003286d  else
10032875      long double x87_r7_8 = fconvert.t(*(esi i+ 0x18)) - fconvert.t(*arg2)
1003287b      var_40 = 0
10032883      var_60 = &var_48
10032884      var_48 = fconvert.s(x87_r7_8)
1003288e      var_44 = fconvert.s(fconvert.t(*(esi i+ 0x1c)) - fconvert.t(arg2[1]))
10032892      j_sub_10043290(var_60)
100328a6      int32_t var_34_1 = 0
100328ae      var_3c = fconvert.s(fconvert.t(*(esi i+ 0x18)) - fconvert.t(*(esi i+ 0xc)))
100328b8      float var_38_1 = fconvert.s(fconvert.t(*(esi i+ 0x1c)) - fconvert.t(*(esi i+ 0x10)))
100328bc      long double st0_2 = j_sub_10043500(&var_3c)
100328c1      long double temp1_1 = fconvert.t(15f)
100328c1      st0_2 - temp1_1
100328c1      
100328cf      if ((((st0_2 < temp1_1 ? 1 : 0) << 8 | (is_unordered.t(st0_2, temp1_1) ? 1 : 0) << 0xa
100328cf              | (st0_2 == temp1_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
1003290f          var_60 = &var_4c
1003290f          
1003291e          if (j_sub_10010780(0f, esi i+ 0xc, esi i+ 0x18, var_60) == 0)
10032920              var_4c = 200f
100328cf      else
100328d1          long double x87_r7_17 = fconvert.t(arg3)
100328d5          long double temp2_1 = fconvert.t(0f)
100328d5          x87_r7_17 - temp2_1
100328d5          
100328e0          if ((((x87_r7_17 < temp2_1 ? 1 : 0) << 8
100328e0                  | (is_unordered.t(x87_r7_17, temp2_1) ? 1 : 0) << 0xa
100328e0                  | (x87_r7_17 == temp2_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
1003292a              var_4c = 400f
100328e0          else
100328e2              long double x87_r7_18 = fconvert.t(arg3)
100328e6              long double temp3_1 = fconvert.t(150f)
100328e6              x87_r7_18 - temp3_1
100328e6              
100328f1              if ((((x87_r7_18 < temp3_1 ? 1 : 0) << 8
100328f1                      | (is_unordered.t(x87_r7_18, temp3_1) ? 1 : 0) << 0xa
100328f1                      | (x87_r7_18 == temp3_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
1003292a                  var_4c = 400f
100328f1              else
100328f3                  long double x87_r7_19 = fconvert.t(arg3)
10032905                  var_4c = fconvert.s(fconvert.t(380f)
10032905                      - (fconvert.t(300f) - (x87_r7_19 + x87_r7_19)))
10032905  
1003293a  var_60 = &var_30
1003293d  j_sub_10031d10(arg2, &var_48, var_60)
10032950  j_sub_10037520(arg2[0xa], &var_48, var_4c)
10032961  float var_14 = var_44
10032969  int32_t var_10 = var_40
1003297b  float var_18 = var_48
1003297f  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

10032989                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
100329a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100329c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100329e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10032a00    int32_t sub_10032a00(int32_t arg1, float* arg2, void* arg3)

10032a0a  void var_30
10032a0a  j_sub_10031e20(&var_30)
10032a22  long double x87_r7_1 = fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2)
10032a24  void* var_58 = &var_30
10032a25  float var_3c
10032a25  float* var_5c = &var_3c
10032a26  float* var_60 = arg2
10032a27  var_3c = fconvert.s(x87_r7_1)
10032a31  float var_38 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
10032a3b  float var_34 = fconvert.s(fconvert.t(*(arg3 + 0x20)) - fconvert.t(arg2[2]))
10032a3f  j_sub_10031d10(var_60, var_5c, var_58)
10032a50  float var_48 = var_3c
10032a59  int32_t var_40 = 0
10032a61  j_sub_10043290(&var_48)
10032a76  j_sub_10037520(arg2[0xa], &var_48, 400f)
10032a87  float var_14 = var_38
10032a8f  int32_t var_10 = var_40
10032aa1  float var_18 = var_48
10032aa5  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
10032aac  return arg1

10032aad                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10032ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10032ae0    int80_t sub_10032ae0(int32_t arg1, float* arg2, void* arg3)

10032aee  void var_30
10032aee  j_sub_10031e20(&var_30)
10032b00  float var_6c
10032b00  j_sub_1000f010(arg3, &var_6c)
10032b14  int32_t var_70 = 0
10032b1c  float var_78 = fconvert.s(fconvert.t(var_6c) - fconvert.t(*(arg3 + 0xc)))
10032b27  float var_68
10032b27  float var_74 = fconvert.s(fconvert.t(var_68) - fconvert.t(*(arg3 + 0x10)))
10032b2b  j_sub_10043290(&var_78)
10032b32  int32_t ecx = *(arg3 + 0x10)
10032b37  long double x87_r6_5 = fconvert.t(*(arg3 + 0x14))
10032b3a  float var_48 = *(arg3 + 0xc)
10032b54  int32_t var_44 = ecx
10032b58  float var_40 = fconvert.s(x87_r6_5 + fconvert.t(1f))
10032b5c  j_sub_10043380(arg3 + 0xc, 80f, &var_78, &var_6c)
10032b6b  float var_80 = 0f
10032bd3  float eax_3
10032bd3  
10032bd3  do
10032b8b      float var_7c_1 = fconvert.s(fconvert.t(var_80) + fconvert.t(10f))
10032b95      float var_3c
10032b95      j_sub_10043380(&var_48, var_7c_1, &var_78, &var_3c)
10032ba9      float var_34 = fconvert.s(fconvert.t(var_34) + fconvert.t(1f))
10032ba9      
10032bba      if (j_sub_1001ae60(&var_3c) != arg2[0x17])
10032bd7          long double x87_r6_12 = fconvert.t(var_80)
10032bdb          long double temp0_1 = fconvert.t(80f)
10032bdb          x87_r6_12 - temp0_1
10032be1          int32_t eax_2
10032be1          eax_2.w = (x87_r6_12 < temp0_1 ? 1 : 0) << 8
10032be1              | (is_unordered.t(x87_r6_12, temp0_1) ? 1 : 0) << 0xa
10032be1              | (x87_r6_12 == temp0_1 ? 1 : 0) << 0xe | 0x3800
10032be1          
10032be6          if ((eax_2:1.b & 1) != 0)
10032bf8              j_sub_10043380(arg3 + 0xc, var_80, &var_78, &var_6c)
10032bf8          
10032be6          break
10032be6      
10032bc0      var_80 = var_7c_1
10032bc4      long double x87_r6_11 = fconvert.t(var_80)
10032bc8      long double temp1_1 = fconvert.t(80f)
10032bc8      x87_r6_11 - temp1_1
10032bce      eax_3.w = (x87_r6_11 < temp1_1 ? 1 : 0) << 8
10032bce          | (is_unordered.t(x87_r6_11, temp1_1) ? 1 : 0) << 0xa
10032bce          | (x87_r6_11 == temp1_1 ? 1 : 0) << 0xe | 0x3800
10032bd3  while ((eax_3:1.b & 1) != 0)
10032c08  float var_4c = 0f
10032c11  float var_54 = fconvert.s(fconvert.t(*arg2) - fconvert.t(*(arg3 + 0xc)))
10032c1b  float var_50 = fconvert.s(fconvert.t(arg2[1]) - fconvert.t(*(arg3 + 0x10)))
10032c24  float var_80_1 = fconvert.s(j_sub_10043290(&var_54))
10032c32  float var_58 = 0f
10032c3b  float var_60 = fconvert.s(fconvert.t(*arg2) - fconvert.t(var_6c))
10032c46  float var_5c = fconvert.s(fconvert.t(arg2[1]) - fconvert.t(var_68))
10032c4f  float var_7c_2 = fconvert.s(j_sub_10043290(&var_60))
10032c70  long double x87_r6_26 = fconvert.t(var_58) * fconvert.t(var_4c)
10032c70      + fconvert.t(var_5c) * fconvert.t(var_50) + fconvert.t(var_60) * fconvert.t(var_54)
10032c72  long double temp2 = fconvert.t(-0.80000000000000004)
10032c72  x87_r6_26 - temp2
10032c7d  long double x87_r6_27
10032c7d  long double temp4_1
10032c7d  
10032c7d  if ((((x87_r6_26 < temp2 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_26, temp2) ? 1 : 0) << 0xa
10032c7d          | (x87_r6_26 == temp2 ? 1 : 0) << 0xe | 0x3800):1.b & 1) == 0)
10032c83      x87_r6_27 = fconvert.t(var_7c_2)
10032c87      temp4_1 = fconvert.t(5f)
10032c87      x87_r6_27 - temp4_1
10032c87  
10032c92  float var_74_1
10032c92  int32_t var_70_1
10032c92  int80_t result
10032c92  
10032c92  if ((((x87_r6_26 < temp2 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_26, temp2) ? 1 : 0) << 0xa
10032c92          | (x87_r6_26 == temp2 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0 || ((
10032c92          (x87_r6_27 < temp4_1 ? 1 : 0) << 8
10032c92          | (is_unordered.t(x87_r6_27, temp4_1) ? 1 : 0) << 0xa
10032c92          | (x87_r6_27 == temp4_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10032d0f      var_70_1 = 0
10032d18      var_78 = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2))
10032d22      var_74_1 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
10032d2b      result = j_sub_10043290(&var_78)
10032d2d      long double x87_r6_43 = fconvert.t(var_80_1)
10032d31      long double temp3_1 = fconvert.t(24f)
10032d31      x87_r6_43 - temp3_1
10032d31      
10032d3f      if ((((x87_r6_43 < temp3_1 ? 1 : 0) << 8
10032d3f              | (is_unordered.t(x87_r6_43, temp3_1) ? 1 : 0) << 0xa
10032d3f              | (x87_r6_43 == temp3_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) == 0)
10032d4c          long double x87_r6_44 = fconvert.t(var_80_1)
10032d50          long double temp5_1 = fconvert.t(32f)
10032d50          x87_r6_44 - temp5_1
10032d50          
10032d5b          if ((((x87_r6_44 < temp5_1 ? 1 : 0) << 8
10032d5b                  | (is_unordered.t(x87_r6_44, temp5_1) ? 1 : 0) << 0xa
10032d5b                  | (x87_r6_44 == temp5_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10032d61              j_sub_10037390(arg2[0xa])
10032d3f      else
10032d45          j_sub_10037350(arg2[0xa])
10032d45      
10032d77      j_sub_10037520(arg2[0xa], &var_78, 600f)
10032d82      arg2[0x19] = arg2[0x13]
10032c92  else
10032c9e      var_70_1 = 0
10032ca7      var_78 = fconvert.s(fconvert.t(var_6c) - fconvert.t(*arg2))
10032cb2      var_74_1 = fconvert.s(fconvert.t(var_68) - fconvert.t(arg2[1]))
10032cb6      int32_t ecx_2
10032cb6      int80_t result_1
10032cb6      ecx_2, result_1 = j_sub_10043290(&var_78)
10032cbb      result = result_1
10032cbd      long double x87_r6_33 = fconvert.t(var_7c_2)
10032cc1      long double temp6_1 = fconvert.t(80f)
10032cc1      x87_r6_33 - temp6_1
10032cc1      
10032ccf      if ((((x87_r6_33 < temp6_1 ? 1 : 0) << 8
10032ccf              | (is_unordered.t(x87_r6_33, temp6_1) ? 1 : 0) << 0xa
10032ccf              | (x87_r6_33 == temp6_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10032cd1          var_7c_2 = 80f
10032cd1      
10032ce6      int32_t var_90_5 = ecx_2
10032cfc      j_sub_10037520(arg2[0xa], &var_78, 
10032cfc          fconvert.s(fconvert.t(400f)
10032cfc              - (fconvert.t(400f) - fconvert.t(var_7c_2) * fconvert.t(5f))))
10032cfc  
10032d91  float var_18 = var_78
10032d9c  float var_14 = var_74_1
10032dab  int32_t var_10 = var_70_1
10032daf  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
10032dba  return result

10032dbb                                                                                   90 90 90 90 90                             .....
10032dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10032e80    void sub_10032e80(int32_t arg1, float arg2, void* arg3)

10032e8a  void var_30
10032e8a  j_sub_10031e20(&var_30)
10032e8f  float* edi = arg2
10032e8f  
10032e9b  if (edi[0x19] != 0)
10032ea9      float var_48
10032ea9      int32_t* var_54_1 = &var_48
10032eaa      float var_40_1 = 0f
10032eb7      var_48 = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*edi))
10032ec1      float var_44_1 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(edi[1]))
10032eca      arg2 = fconvert.s(j_sub_10043290(var_54_1))
10032ed8      float var_34_1 = 0f
10032ee0      float var_3c
10032ee0      float* var_58_1 = &var_3c
10032ee1      var_3c = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*(arg3 + 0xc)))
10032eeb      float var_38_1 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(*(arg3 + 0x10)))
10032eef      j_sub_10043290(var_58_1)
10032f13      long double x87_r7_14 = fconvert.t(var_34_1) * fconvert.t(var_40_1)
10032f13          + fconvert.t(var_38_1) * fconvert.t(var_44_1)
10032f13          + fconvert.t(var_3c) * fconvert.t(var_48)
10032f15      long double temp0_1 = fconvert.t(-0.5)
10032f15      x87_r7_14 - temp0_1
10032f20      long double x87_r7_15
10032f20      long double temp1_1
10032f20      
10032f20      if ((((x87_r7_14 < temp0_1 ? 1 : 0) << 8
10032f20              | (is_unordered.t(x87_r7_14, temp0_1) ? 1 : 0) << 0xa
10032f20              | (x87_r7_14 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10032f22          x87_r7_15 = fconvert.t(arg2)
10032f26          temp1_1 = fconvert.t(24f)
10032f26          x87_r7_15 - temp1_1
10032f26      
10032f31      if ((((x87_r7_14 < temp0_1 ? 1 : 0) << 8
10032f31              | (is_unordered.t(x87_r7_14, temp0_1) ? 1 : 0) << 0xa
10032f31              | (x87_r7_14 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) == 0 || ((
10032f31              (x87_r7_15 < temp1_1 ? 1 : 0) << 8
10032f31              | (is_unordered.t(x87_r7_15, temp1_1) ? 1 : 0) << 0xa
10032f31              | (x87_r7_15 == temp1_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
10032f41          j_sub_10037520(edi[0xa], &var_48, 800f)
10032f55          float var_18_1 = var_48
10032f59          float var_14_1 = var_44_1
10032f5d          float var_10_1 = var_40_1
10032f5d  
10032f70  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

10032f78                                                                          90 90 90 90 90 90 90 90                          ........
10032f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10032fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10032fc0    int32_t sub_10032fc0(int32_t arg1, float* arg2, void* arg3)

10032fc9  void var_30
10032fc9  void* var_60 = &var_30
10032fca  int32_t var_3c = 0
10032fd2  int32_t var_38 = 0
10032fda  int32_t var_34 = 0
10032fe2  j_sub_10031e20(var_60)
10032ff9  float var_54 = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2))
10033003  float var_50 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
1003300d  float var_4c = fconvert.s(fconvert.t(*(arg3 + 0x20)) - fconvert.t(arg2[2]))
10033011  j_sub_10043290(&var_54)
1003302a  float var_48 = var_54
10033038  float var_44 = var_50
1003303c  float var_40 = fconvert.s(fconvert.t(var_4c) * fconvert.t(3f))
10033040  float var_c
10033040  j_sub_10041790(&var_48, &var_c)
10033050  j_sub_10037520(arg2[0xa], &var_3c, 0f)
10033059  j_sub_10037460(arg2[0xa])
1003306d  int32_t var_1c
1003306d  int32_t eax_2
1003306d  eax_2.b = var_1c.b | 1
1003306f  float var_14 = var_50
10033073  int32_t var_1c_1 = eax_2
1003307b  float var_18 = var_54
1003308e  float var_10 = var_4c
10033092  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
10033099  return arg1

1003309a                                                                                90 90 90 90 90 90                            ......
100330a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100330c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100330e0    int32_t sub_100330e0(int32_t arg1, float arg2, void* arg3)

100330ea  void var_30
100330ea  j_sub_10031e20(&var_30)
100330ef  float* esi = arg2
100330f6  char ecx = (esi[0x18]).b
100330f6  
100330fc  if ((ecx & 0x20) == 0)
1003310e      float var_3c = fconvert.s(fconvert.t(*(arg3 + 0xc)) - fconvert.t(*esi))
10033118      float var_38_1 = fconvert.s(fconvert.t(*(arg3 + 0x10)) - fconvert.t(esi[1]))
10033122      float var_34_1 = fconvert.s(fconvert.t(*(arg3 + 0x14)) - fconvert.t(esi[2]))
10033122      
10033126      if ((ecx & 4) == 0)
10033128          var_34_1 = 0f
10033128      
1003313a      arg2 = fconvert.s(j_sub_10043290(&var_3c))
10033149      j_sub_10031d10(esi, &var_3c, &var_30)
1003314e      long double x87_r7_8 = fconvert.t(arg2)
10033152      long double temp0_1 = fconvert.t(30f)
10033152      x87_r7_8 - temp0_1
10033160      int32_t var_50_2
10033160      float* var_4c_2
10033160      float var_48_2
10033160      
10033160      if ((((x87_r7_8 < temp0_1 ? 1 : 0) << 8
10033160              | (is_unordered.t(x87_r7_8, temp0_1) ? 1 : 0) << 0xa
10033160              | (x87_r7_8 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
10033179          var_48_2 = 400f
1003317e          var_4c_2 = &var_3c
1003317f          var_50_2 = esi[0xa]
10033160      else
10033169          var_48_2 = 200f
1003316e          var_4c_2 = &var_3c
1003316f          var_50_2 = esi[0xa]
1003316f      
10033180      j_sub_10037520(var_50_2, var_4c_2, var_48_2)
10033180      
1003318d      if ((esi[0x18].b & 4) != 0)
10033193          int32_t var_1c
10033193          int32_t eax_4
10033193          eax_4.b = var_1c.b | 2
10033195          int32_t var_1c_1 = eax_4
10033195      
100331a5      float var_18_1 = var_3c
100331a9      float var_14_1 = var_38_1
100331ad      float var_10_1 = var_34_1
100331ad  
100331c0  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
100331c7  return arg1

100331c8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
100331e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10033210    void sub_10033210(int32_t arg1, float arg2, int32_t arg3)

1003321b  void var_30
1003321b  j_sub_10031e20(&var_30)
10033220  float* esi = arg2
1003323e  float var_3c
1003323e  float var_38
1003323e  
1003323e  if (j_sub_10030d00(esi, esi[9], arg3) == 0)
10033387      int32_t eax
10033387      eax.b = esi[0x18].b
10033391      float var_54 = fconvert.s(fconvert.t(*(arg3 + 0xc)) - fconvert.t(*esi))
1003339b      float var_50_1 = fconvert.s(fconvert.t(*(arg3 + 0x10)) - fconvert.t(esi[1]))
100333a5      float var_4c_1 = fconvert.s(fconvert.t(*(arg3 + 0x14)) - fconvert.t(esi[2]))
100333a5      
100333a9      if ((4 & eax.b) == 0)
100333ab          var_4c_1 = 0f
100333ab      
100333bd      arg2 = fconvert.s(j_sub_10043290(&var_54))
100333cf      float var_6c
100333cf      int32_t var_1c
100333cf      
100333cf      if (j_sub_10030f10(arg3) != 0)
100334d9          j_sub_10031380(arg3, &var_3c)
100334ea          bool cond:1_1 = (4 & esi[0x18].b) != 0
100334ec          float var_48 = fconvert.s(fconvert.t(var_3c) - fconvert.t(*esi))
100334f7          float var_44_1 = fconvert.s(fconvert.t(var_38) - fconvert.t(esi[1]))
10033502          float var_34
10033502          float var_40_1 = fconvert.s(fconvert.t(var_34) - fconvert.t(esi[2]))
10033502          
10033506          if (not(cond:1_1))
10033508              var_40_1 = 0f
10033508          
10033515          long double st0_3 = j_sub_10043290(&var_48)
1003351a          long double x87_r6_1 = fconvert.t(arg2)
10033521          long double temp4_1 = fconvert.t(20f)
10033521          x87_r6_1 - temp4_1
1003352f          float var_68_2
1003352f          float eax_23
1003352f          
1003352f          if ((((x87_r6_1 < temp4_1 ? 1 : 0) << 8
1003352f                  | (is_unordered.t(x87_r6_1, temp4_1) ? 1 : 0) << 0xa
1003352f                  | (x87_r6_1 == temp4_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10033596              label_10033596:
10033596              arg3 = fconvert.s(st0_3)
1003359d              eax_23 = var_40_1
100335a1              var_6c = var_48
100335a5              var_68_2 = var_44_1
1003352f          else
10033531              long double temp5_1 = fconvert.t(arg2)
10033531              st0_3 - temp5_1
10033531              
1003353d              if ((((st0_3 < temp5_1 ? 1 : 0) << 8
1003353d                      | (is_unordered.t(st0_3, temp5_1) ? 1 : 0) << 0xa
1003353d                      | (st0_3 == temp5_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
1003353d                  goto label_10033596
1003353d              
10033559              long double x87_r6_5 = fconvert.t(var_40_1) * fconvert.t(var_4c_1)
10033559                  + fconvert.t(var_44_1) * fconvert.t(var_50_1)
10033559                  + fconvert.t(var_48) * fconvert.t(var_54)
1003355b              long double temp7_1 = fconvert.t(0f)
1003355b              x87_r6_5 - temp7_1
1003355b              
10033566              if ((((x87_r6_5 < temp7_1 ? 1 : 0) << 8
10033566                      | (is_unordered.t(x87_r6_5, temp7_1) ? 1 : 0) << 0xa
10033566                      | (x87_r6_5 == temp7_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10033566                  goto label_10033596
10033566              
10033577              arg3 = arg2
1003357e              eax_23 = var_4c_1
10033582              var_6c = var_54
10033588              var_68_2 = var_50_1
10033588          
100335b8          j_sub_10031d10(esi, &var_6c, &var_30)
100335bd          long double x87_r7_36 = fconvert.t(arg3)
100335c4          long double temp6_1 = fconvert.t(60f)
100335c4          x87_r7_36 - temp6_1
100335c4          
100335d2          if ((((x87_r7_36 < temp6_1 ? 1 : 0) << 8
100335d2                  | (is_unordered.t(x87_r7_36, temp6_1) ? 1 : 0) << 0xa
100335d2                  | (x87_r7_36 == temp6_1 ? 1 : 0) << 0xe):1.b & 0x41) == 0)
100335d4              arg3 = 0x42700000
100335d4          
100335e2          if ((esi[0x18].b & 4) == 0)
100335ef              int32_t eax_25
100335ef              int32_t ecx_10
100335ef              eax_25, ecx_10 = j_sub_10031650(esi, &var_6c, 50f)
100335ef              
100335f9              if (eax_25 == 0)
1003360b                  int32_t var_7c_11 = ecx_10
10033621                  j_sub_10037520(esi[0xa], &var_6c, 
10033621                      fconvert.s(fconvert.t(400f)
10033621                          - (fconvert.t(400f) - fconvert.t(arg3) * fconvert.t(6f))))
10033621          
10033635          float var_18_4 = var_6c
10033639          float eax_26
10033639          eax_26.b = esi[0x18].b
1003363c          float var_14_4 = var_68_2
10033642          float var_10_4 = eax_23
10033642          
10033646          if ((4 & eax_26.b) != 0)
1003364c              int32_t eax_27
1003364c              eax_27.b = var_1c.b | 2
1003364e              int32_t var_1c_2 = eax_27
100333cf      else
100333e4          var_6c = var_54
10033406          j_sub_10031d10(esi, &var_6c, &var_30)
1003340b          long double x87_r7_23 = fconvert.t(arg2)
10033412          long double temp2_1 = fconvert.t(60f)
10033412          x87_r7_23 - temp2_1
10033420          long double x87_r7_24
10033420          
10033420          if ((((x87_r7_23 < temp2_1 ? 1 : 0) << 8
10033420                  | (is_unordered.t(x87_r7_23, temp2_1) ? 1 : 0) << 0xa
10033420                  | (x87_r7_23 == temp2_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
1003342a              x87_r7_24 = fconvert.t(arg2)
10033420          else
10033422              x87_r7_24 = fconvert.t(60f)
10033422          
10033446          arg3 =
10033446              fconvert.s(fconvert.t(360f) - (fconvert.t(360f) - x87_r7_24 * fconvert.t(6f)))
10033446          
1003344d          if ((esi[0x18].b & 4) == 0 && j_sub_10031650(esi, &var_6c, 50f) == 0)
10033466              long double x87_r7_28 = fconvert.t(arg3)
1003346d              long double temp8_1 = fconvert.t(5f)
1003346d              x87_r7_28 - temp8_1
10033473              int32_t eax_14
10033473              eax_14.w = (x87_r7_28 < temp8_1 ? 1 : 0) << 8
10033473                  | (is_unordered.t(x87_r7_28, temp8_1) ? 1 : 0) << 0xa
10033473                  | (x87_r7_28 == temp8_1 ? 1 : 0) << 0xe
10033473              
10033478              if ((eax_14:1.b & 0x41) == 0)
1003348b                  j_sub_10037520(esi[0xa], &var_6c, arg3)
1003348b          
1003349f          float var_10_3 = var_4c_1
100334a3          float eax_16
100334a3          eax_16.b = esi[0x18].b
100334a6          float var_18_3 = var_6c
100334ac          float var_14_3 = var_50_1
100334ac          
100334b0          if ((4 & eax_16.b) != 0)
100334b6              int32_t eax_17
100334b6              eax_17.b = var_1c.b | 2
100334b8              var_1c = eax_17
100334b8          
100334c0          int32_t var_2c_1 = 1
100334ca          int32_t var_1c_1 = var_1c | 4
1003323e  else
1003324f      int32_t eax_2
1003324f      int32_t edx
1003324f      int16_t x87control
1003324f      edx:eax_2 = sx.q(__ftol(x87control, fconvert.t(esi[2]) - fconvert.t(*(arg3 + 0x20))))
10033261      long double x87_r7_2 = float.t((eax_2 ^ edx) - edx)
10033268      long double temp0_1 = fconvert.t(*(data_10064060 + 0x10))
10033268      x87_r7_2 - temp0_1
1003326b      int32_t eax_4
1003326b      eax_4.w = (x87_r7_2 < temp0_1 ? 1 : 0) << 8
1003326b          | (is_unordered.t(x87_r7_2, temp0_1) ? 1 : 0) << 0xa
1003326b          | (x87_r7_2 == temp0_1 ? 1 : 0) << 0xe
10033270      float var_60
10033270      
10033270      if ((eax_4:1.b & 1) == 0)
100332e9          j_sub_10031380(arg3, &var_3c)
100332f8          int32_t var_58_2 = 0
10033301          var_60 = fconvert.s(fconvert.t(var_3c) - fconvert.t(*esi))
1003330c          float var_5c_2 = fconvert.s(fconvert.t(var_38) - fconvert.t(esi[1]))
10033310          int32_t ecx_2
10033310          long double st0_1
10033310          ecx_2, st0_1 = j_sub_10043290(&var_60)
10033310          long double x87_r7_12 = st0_1
10033315          long double temp1_1 = fconvert.t(5f)
10033315          x87_r7_12 - temp1_1
10033315          
10033323          if ((((x87_r7_12 < temp1_1 ? 1 : 0) << 8
10033323                  | (is_unordered.t(x87_r7_12, temp1_1) ? 1 : 0) << 0xa
10033323                  | (x87_r7_12 == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10033329              long double temp3_1 = fconvert.t(100f)
10033329              x87_r7_12 - temp3_1
10033329              
10033334              if ((((x87_r7_12 < temp3_1 ? 1 : 0) << 8
10033334                      | (is_unordered.t(x87_r7_12, temp3_1) ? 1 : 0) << 0xa
10033334                      | (x87_r7_12 == temp3_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10033338                  x87_r7_12 = fconvert.t(100f)
10033338              
10033344              int32_t var_7c_3 = ecx_2
1003335d              j_sub_10037520(esi[0xa], &var_60, 
1003335d                  fconvert.s(fconvert.t(400f)
1003335d                      - (fconvert.t(400f) - x87_r7_12 * fconvert.t(4f))))
10033371              float var_18_2 = var_60
10033375              float var_14_2 = var_5c_2
10033379              int32_t var_10_2 = var_58_2
10033270      else
1003327b          int32_t var_58_1 = 0
10033284          var_60 = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*esi))
1003328e          float var_5c_1 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(esi[1]))
10033292          j_sub_10043290(&var_60)
10033292          
100332ae          if (j_sub_10031650(esi, &var_60, 100f) == 0)
100332be              j_sub_10037520(esi[0xa], &var_60, 400f)
100332be          
100332d2          float var_18_1 = var_60
100332d6          float var_14_1 = var_5c_1
100332da          int32_t var_10_1 = var_58_1
10033665  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

1003366e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10033680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100336a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100336c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100336e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10033790    int32_t sub_10033790(int32_t arg1, float* arg2, void* arg3)

10033799  void var_30
10033799  void* var_60 = &var_30
1003379a  j_sub_10031e20(var_60)
100337a9  float var_3c
100337a9  j_sub_10031380(arg3, &var_3c)
100337bb  float var_54 = fconvert.s(fconvert.t(var_3c) - fconvert.t(*arg2))
100337c6  float var_38
100337c6  float var_50 = fconvert.s(fconvert.t(var_38) - fconvert.t(arg2[1]))
100337d1  float var_34
100337d1  float var_4c = fconvert.s(fconvert.t(var_34) - fconvert.t(arg2[2]))
100337da  float var_48 = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2))
100337e4  float var_44 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
100337f6  long double x87_r7_13 = fabs(fconvert.t(var_4c))
100337fc  long double x87_r6_1 =
100337fc      fabs(fconvert.t(fconvert.s(fconvert.t(*(arg3 + 0x20)) - fconvert.t(arg2[2]))))
100337fe  x87_r6_1 - x87_r7_13
10033805  float* eax_1
10033805  
10033805  if ((((x87_r6_1 < x87_r7_13 ? 1 : 0) << 8
10033805          | (is_unordered.t(x87_r6_1, x87_r7_13) ? 1 : 0) << 0xa
10033805          | (x87_r6_1 == x87_r7_13 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10033822      var_60 = &var_48
10033823      j_sub_10043290(var_60)
1003382a      int32_t var_64_2 = 0x43960000
1003382f      eax_1 = &var_48
10033805  else
1003380b      var_60 = &var_54
1003380c      j_sub_10043290(var_60)
10033813      int32_t var_64_1 = 0x43960000
10033818      eax_1 = &var_54
10033818  
10033838  j_sub_10037520(arg2[0xa], eax_1, 300f)
1003384f  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
10033856  return arg1

10033857                                                                       90 90 90 90 90 90 90 90 90                         .........
10033860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100338a0    int32_t sub_100338a0(void* arg1)

100338a0  int32_t* eax = data_10062960
100338a0  
100338ad  if (eax == 0)
100338b9      eax = j_sub_100389c0("laserhook", &data_1005b570)
100338c1      data_10062960 = eax
100338c1  
100338c6  long double x87_r7 = fconvert.t(eax[4])
100338c9  long double temp0 = fconvert.t(0f)
100338c9  x87_r7 - temp0
100338cf  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100338cf      | (x87_r7 == temp0 ? 1 : 0) << 0xe
100338cf  
100338dd  if ((eax:1.b & 0x40) != 0 && data_1006295c == 0)
100338ec      data_1006295c = j_sub_1000d990("models/weapons/grapple/hook/tris…")
100338ec  
10033903  for (int32_t i = j_sub_1000bb30(0); i != 0; i = j_sub_1000bb30(i))
10033915      long double x87_r7_1 = fconvert.t(*(data_10062960 + 0x10))
10033918      long double temp1_1 = fconvert.t(0f)
10033918      x87_r7_1 - temp1_1
1003391e      void* eax_4
1003391e      eax_4.w = (x87_r7_1 < temp1_1 ? 1 : 0) << 8
1003391e          | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
1003391e          | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe
1003391e      
10033923      if ((eax_4:1.b & 0x40) == 0)
1003393e          label_1003393e:
1003393e          long double x87_r7_2 = fconvert.t(*(data_10062960 + 0x10))
10033941          long double temp2_1 = fconvert.t(0f)
10033941          x87_r7_2 - temp2_1
10033947          eax_4.w = (x87_r7_2 < temp2_1 ? 1 : 0) << 8
10033947              | (is_unordered.t(x87_r7_2, temp2_1) ? 1 : 0) << 0xa
10033947              | (x87_r7_2 == temp2_1 ? 1 : 0) << 0xe
10033947          
1003394c          if ((eax_4:1.b & 0x40) == 0 && (j_sub_1000ad90(i) & 0x80) != 0)
10033959              goto label_10033964
10033923      else
10033936          if (j_sub_1000ad40(i) != data_1006295c)
10033936              goto label_1003393e
10033936          
10033964          label_10033964:
10033978          void var_f8
10033978          void var_7c
10033978          __builtin_memcpy(dest: &var_f8, src: j_sub_1000abe0(&var_7c, i), n: 0x7c)
1003398a          float var_e8
1003398a          float var_c4[0x12]
1003398a          
1003398a          if (j_sub_10043240(&var_e8, &var_c4) == 0)
10033a06              return 1
10033a06          
10033997          float var_104
10033997          float* var_118_4 = &var_104
10033998          var_104 = fconvert.s(fconvert.t(var_e8) - fconvert.t(*(arg1 + 0x18)))
100339a3          float var_e4
100339a3          float var_100_1 = fconvert.s(fconvert.t(var_e4) - fconvert.t(*(arg1 + 0x1c)))
100339ae          float var_e0
100339ae          float var_fc_1 = fconvert.s(fconvert.t(var_e0) - fconvert.t(*(arg1 + 0x20)))
100339b2          long double st0_1 = j_sub_10043500(var_118_4)
100339b7          long double temp3_1 = fconvert.t(32f)
100339b7          st0_1 - temp3_1
100339b7          
100339c5          if ((((st0_1 < temp3_1 ? 1 : 0) << 8
100339c5                  | (is_unordered.t(st0_1, temp3_1) ? 1 : 0) << 0xa
100339c5                  | (st0_1 == temp3_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
100339f6              return 2
100339f6  
100339e6  return 0

10033a07                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10033a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10033a70    int32_t sub_10033a70(void* arg1)

10033a83  void var_2c
10033a83  int32_t result = j_sub_1001a2e0(&var_2c, *(arg1 + 0x4c))
10033a96  __builtin_memcpy(dest: &var_2c, src: result, n: 0x2c)
10033a9d  int32_t var_8
10033a9d  
10033a9d  if (var_8 != 0xe)
10033aa3      if ((*(arg1 + 0x60) & 0x40) == 0)
10033aa5          long double x87_r7_1 = fconvert.t(*(arg1 + 0x68))
10033aa8          long double temp0_1 = fconvert.t(0f)
10033aa8          x87_r7_1 - temp0_1
10033aae          result.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
10033aae              | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
10033aae              | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
10033aae      
10033ab3      if ((*(arg1 + 0x60) & 0x40) != 0 || (result:1.b & 0x40) == 0)
10033ab8          int32_t var_3c_1 = 0
10033ac0          j_sub_10037200(*(arg1 + 0x28), "hookoff")
10033acb          result.b = (*(arg1 + 0x60)).b & 0xbf
10033acd          *(arg1 + 0x68) = 0
10033ad4          *(arg1 + 0x60) = result
10033ad4  
10033add  return result

10033ade                                                                                            90 90                                ..
10033ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10033b00    void sub_10033b00(int32_t arg1, float* arg2, float arg3)

10033b0b  void var_30
10033b0b  j_sub_10031e20(&var_30)
10033b17  char eax = (arg2[0x18]).b
10033b17  
10033b1c  if ((eax & 0x80) != 0)
10033b21      int32_t var_64_1 = 0
10033b29      j_sub_10037200(arg2[0xa], "hookoff")
10033b34      int32_t eax_1
10033b34      eax_1.b = arg2[0x18].b & 0xbf
10033b36      arg2[0x18] = eax_1
10033b1c  else
10033b40      float var_48
10033b40      
10033b40      if ((eax & 0x40) == 0)
10033c42          long double st0_4 = j_sub_1000e120()
10033c4b          char ecx_1 = arg2[0x18].b
10033c4e          arg2[0x1a] = fconvert.s(st0_4)
10033c59          var_48 = fconvert.s(fconvert.t(*(arg3 i+ 0xc)) - fconvert.t(*arg2))
10033c63          float var_44_2 = fconvert.s(fconvert.t(*(arg3 i+ 0x10)) - fconvert.t(arg2[1]))
10033c6d          float var_40_2 = fconvert.s(fconvert.t(*(arg3 i+ 0x14)) - fconvert.t(arg2[2]))
10033c6d          
10033c71          if ((ecx_1 & 4) == 0)
10033c73              var_40_2 = 0f
10033c73          
10033c8b          float var_50_1 = fconvert.s(fconvert.t(arg2[7]) + fconvert.t(arg2[1]))
10033c95          float var_4c_1 = fconvert.s(fconvert.t(arg2[8]) + fconvert.t(arg2[2]))
10033c9e          float var_3c = fconvert.s(fconvert.t(*(arg3 i+ 0x18))
10033c9e              - (fconvert.t(arg2[6]) + fconvert.t(*arg2)))
10033cab          float var_38_1 = fconvert.s(fconvert.t(*(arg3 i+ 0x1c)) - fconvert.t(var_50_1))
10033cb6          float var_34_1 = fconvert.s(fconvert.t(*(arg3 i+ 0x20)) - fconvert.t(var_4c_1))
10033cbf          arg3 = fconvert.s(j_sub_10043290(&var_48))
10033ccd          float var_c
10033ccd          j_sub_10041790(&var_3c, &var_c)
10033cd2          long double x87_r7_29 = fconvert.t(arg3)
10033cdd          long double temp0_1 = fconvert.t(5f)
10033cdd          x87_r7_29 - temp0_1
10033ce3          int32_t var_1c
10033ce3          int32_t eax_7
10033ce3          eax_7.b = var_1c.b | 1
10033ce7          int32_t var_1c_1 = eax_7
10033ceb          eax_7.w = (x87_r7_29 < temp0_1 ? 1 : 0) << 8
10033ceb              | (is_unordered.t(x87_r7_29, temp0_1) ? 1 : 0) << 0xa
10033ceb              | (x87_r7_29 == temp0_1 ? 1 : 0) << 0xe
10033ceb          
10033cf0          if ((eax_7:1.b & 1) == 0)
10033d55              label_10033d55:
10033d55              long double x87_r7_34 = fconvert.t(arg3)
10033d59              long double temp3_1 = fconvert.t(70f)
10033d59              x87_r7_34 - temp3_1
10033d5f              eax_7.w = (x87_r7_34 < temp3_1 ? 1 : 0) << 8
10033d5f                  | (is_unordered.t(x87_r7_34, temp3_1) ? 1 : 0) << 0xa
10033d5f                  | (x87_r7_34 == temp3_1 ? 1 : 0) << 0xe
10033d5f              
10033d64              if ((eax_7:1.b & 1) == 0)
10033d82                  arg3 = 400f
10033d64              else
10033d7c                  arg3 = fconvert.s(fconvert.t(300f)
10033d7c                      - (fconvert.t(300f) - fconvert.t(arg3) * fconvert.t(4f)))
10033d7c              
10033d95              j_sub_10031d10(arg2, &var_48, &var_30)
10033da8              j_sub_10037520(arg2[0xa], &var_48, arg3)
10033dbc              float var_18_1 = var_48
10033dc0              float var_14_1 = var_44_2
10033dc4              float var_10_1 = var_40_2
10033cf0          else
10033cfb              long double st0_6
10033cfb              eax_7, st0_6 = j_sub_10030a50(var_c, arg2[0xd])
10033d00              long double x87_r7_31 = fabs(st0_6)
10033d02              long double temp4_1 = fconvert.t(2.0)
10033d02              x87_r7_31 - temp4_1
10033d0b              eax_7.w = (x87_r7_31 < temp4_1 ? 1 : 0) << 8
10033d0b                  | (is_unordered.t(x87_r7_31, temp4_1) ? 1 : 0) << 0xa
10033d0b                  | (x87_r7_31 == temp4_1 ? 1 : 0) << 0xe
10033d0b              
10033d10              if ((eax_7:1.b & 1) == 0)
10033d10                  goto label_10033d55
10033d10              
10033d1b              float var_8
10033d1b              long double st0_7
10033d1b              eax_7, st0_7 = j_sub_10030a50(var_8, arg2[0xe])
10033d20              long double x87_r7_33 = fabs(st0_7)
10033d22              long double temp6_1 = fconvert.t(2.0)
10033d22              x87_r7_33 - temp6_1
10033d2b              eax_7.w = (x87_r7_33 < temp6_1 ? 1 : 0) << 8
10033d2b                  | (is_unordered.t(x87_r7_33, temp6_1) ? 1 : 0) << 0xa
10033d2b                  | (x87_r7_33 == temp6_1 ? 1 : 0) << 0xe
10033d2b              
10033d30              if ((eax_7:1.b & 1) == 0)
10033d30                  goto label_10033d55
10033d30              
10033d35              int32_t var_64_8 = 0
10033d3c              j_sub_10037200(arg2[0xa], "hookon")
10033d47              int32_t eax_10
10033d47              eax_10.b = arg2[0x18].b | 0x40
10033d49              arg2[0x1b] = 0x497423f0
10033d50              arg2[0x18] = eax_10
10033d50          
10033dc9          int32_t eax_13 = j_sub_1001ae60(arg2)
10033dc9          
10033dd8          if (eax_13 != 0 && eax_13 != arg2[0x17])
10033dda              arg2[0x1c] = 0
10033b40      else
10033b4a          float var_64_2 = arg3
10033b4c          int32_t eax_2 = j_sub_100338a0(arg2)
10033b5d          int32_t var_40_1 = 0
10033b65          var_48 = fconvert.s(fconvert.t(*(arg3 i+ 0x18)) - fconvert.t(*arg2))
10033b6f          float var_44_1 = fconvert.s(fconvert.t(*(arg3 i+ 0x1c)) - fconvert.t(arg2[1]))
10033b78          arg3 = fconvert.s(j_sub_10043500(&var_48))
10033b78          
10033b83          if (eax_2 == 0)
10033c07              label_10033c07:
10033c07              double var_54_1 = fconvert.d(fconvert.t(arg2[0x1a]))
10033c10              long double x87_r7_14 = j_sub_1000e120() - fconvert.t(0.40000000000000002)
10033c16              long double temp1_1 = fconvert.t(var_54_1)
10033c16              x87_r7_14 - temp1_1
10033c16              
10033c1f              if ((((x87_r7_14 < temp1_1 ? 1 : 0) << 8
10033c1f                      | (is_unordered.t(x87_r7_14, temp1_1) ? 1 : 0) << 0xa
10033c1f                      | (x87_r7_14 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x41) != 0)
10033bcf                  arg2[0x1b] = arg3
10033c1f              else
10033c24                  int32_t var_64_4 = 0
10033c2b                  j_sub_10037200(arg2[0xa], "hookoff")
10033c36                  int32_t eax_5
10033c36                  eax_5.b = arg2[0x18].b & 0xbf
10033c38                  eax_5.b |= 0x80
10033c3a                  arg2[0x18] = eax_5
10033dda                  arg2[0x1c] = 0
10033b83          else
10033b85              long double x87_r7_6 = fconvert.t(arg3)
10033b89              long double temp2_1 = fconvert.t(48f)
10033b89              x87_r7_6 - temp2_1
10033b89              
10033b94              if ((((x87_r7_6 < temp2_1 ? 1 : 0) << 8
10033b94                      | (is_unordered.t(x87_r7_6, temp2_1) ? 1 : 0) << 0xa
10033b94                      | (x87_r7_6 == temp2_1 ? 1 : 0) << 0xe):1.b & 1) == 0)
10033bda                  long double x87_r7_10
10033bda                  long double temp7_1
10033bda                  
10033bda                  if (eax_2 == 2)
10033bdf                      x87_r7_10 = fconvert.t(arg2[0x1b]) - fconvert.t(2f)
10033be5                      temp7_1 = fconvert.t(arg3)
10033be5                      x87_r7_10 - temp7_1
10033be5                  
10033bee                  if (eax_2 == 2 && (((x87_r7_10 < temp7_1 ? 1 : 0) << 8
10033bee                          | (is_unordered.t(x87_r7_10, temp7_1) ? 1 : 0) << 0xa
10033bee                          | (x87_r7_10 == temp7_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10033bee                      goto label_10033c07
10033bee                  
10033bf9                  arg2[0x1a] = fconvert.s(j_sub_1000e120())
10033bfc                  arg2[0x1b] = arg3
10033b94              else
10033b99                  long double x87_r7_8 = fconvert.t(arg2[0x1b]) - fconvert.t(arg3)
10033b9d                  long double temp5_1 = fconvert.t(1f)
10033b9d                  x87_r7_8 - temp5_1
10033b9d                  
10033ba8                  if ((((x87_r7_8 < temp5_1 ? 1 : 0) << 8
10033ba8                          | (is_unordered.t(x87_r7_8, temp5_1) ? 1 : 0) << 0xa
10033ba8                          | (x87_r7_8 == temp5_1 ? 1 : 0) << 0xe):1.b & 1) != 0)
10033bad                      int32_t var_64_3 = 0
10033bb4                      j_sub_10037200(arg2[0xa], "hookoff")
10033bbf                      int32_t ecx_4 = arg2[0x18] & 0xffffffbf
10033bc2                      arg2[0x1c] = 0
10033bc5                      ecx_4.b |= 0x80
10033bc8                      arg2[0x18] = ecx_4
10033bc8                  
10033bcf                  arg2[0x1b] = arg3
10033bcf  
10033dec  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

10033df5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10033e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10033ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10033ec0    void sub_10033ec0(int32_t arg1, float* arg2, void* arg3)

10033eca  void var_30
10033eca  j_sub_10031e20(&var_30)
10033edb  int32_t var_34 = 0
10033ee8  float var_3c
10033ee8  int32_t* var_4c = &var_3c
10033ee9  var_3c = fconvert.s(fconvert.t(*(arg3 + 0xc)) - fconvert.t(*arg2))
10033ef3  float var_38 = fconvert.s(fconvert.t(*(arg3 + 0x10)) - fconvert.t(arg2[1]))
10033ef7  int32_t ecx
10033ef7  long double st0
10033ef7  ecx, st0 = j_sub_10043290(var_4c)
10033ef7  long double x87_r7_4 = st0
10033efc  long double temp0 = fconvert.t(5f)
10033efc  x87_r7_4 - temp0
10033efc  
10033f0a  if ((((x87_r7_4 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_4, temp0) ? 1 : 0) << 0xa
10033f0a          | (x87_r7_4 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 1) == 0)
10033f65      long double temp1_1 = fconvert.t(80f)
10033f65      x87_r7_4 - temp1_1
10033f65      
10033f70      if ((((x87_r7_4 < temp1_1 ? 1 : 0) << 8
10033f70              | (is_unordered.t(x87_r7_4, temp1_1) ? 1 : 0) << 0xa
10033f70              | (x87_r7_4 == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10033f74          x87_r7_4 = fconvert.t(80f)
10033f74      
10033f83      int32_t var_48_2 = ecx
10033f99      j_sub_10037520(arg2[0xa], &var_3c, 
10033f99          fconvert.s(fconvert.t(400f) - (fconvert.t(400f) - x87_r7_4 * fconvert.t(5f))))
10033f0a  else
10033f17      var_34 = 0
10033f1f      float* var_48_1 = &var_3c
10033f20      var_3c = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2))
10033f2a      var_38 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
10033f2e      j_sub_10043290(var_48_1)
10033f39      j_sub_10037350(arg2[0xa])
10033f42      j_sub_100372c0(arg2[0xa])
10033f55      j_sub_10037520(arg2[0xa], &var_3c, 800f)
10033f60      arg2[0x19] = arg2[0x13]
10033f60  
10033faa  j_sub_10041790(&var_3c, &arg2[0xd])
10033faf  int32_t edx = arg2[0xa]
10033fb4  arg2[0xd] = 0x42b40000
10033fba  j_sub_100375a0(edx, &arg2[0xd])
10033fcf  int32_t var_1c
10033fcf  int32_t var_1c_1 = var_1c | 8
10033fd3  j_sub_100370f0(arg2[0xa], "Rocket Launcher")
10033fe4  int32_t var_10 = var_34
10033fec  float var_18 = var_3c
10033ffe  float var_14 = var_38
10034002  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

1003400a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10034020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10034070    int32_t sub_10034070(int32_t arg1)

1003407a  void var_30
1003407a  j_sub_10031e20(&var_30)
10034091  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)
10034098  return arg1

10034099                                                                             90 90 90 90 90 90 90                           .......
100340a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100340b0    void sub_100340b0(int32_t arg1, float* arg2, void* arg3)

100340ba  void var_30
100340ba  j_sub_10031e20(&var_30)
100340ba  
100340cb  if (arg2[0x19] != 0)
100340d5      float var_3c
100340d5      int32_t* var_48_1 = &var_3c
100340d6      int32_t var_34_1 = 0
100340e3      var_3c = fconvert.s(fconvert.t(*(arg3 + 0x18)) - fconvert.t(*arg2))
100340ed      float var_38_1 = fconvert.s(fconvert.t(*(arg3 + 0x1c)) - fconvert.t(arg2[1]))
100340f1      j_sub_10043290(var_48_1)
10034106      j_sub_10037520(arg2[0xa], &var_3c, 800f)
1003411a      float var_18_1 = var_3c
1003411e      float var_14_1 = var_38_1
10034122      int32_t var_10_1 = var_34_1
10034122  
10034135  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

1003413d                                                                                         90 90 90                               ...
10034140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10034170    int32_t sub_10034170(void* arg1)

10034174  int32_t ecx = *(arg1 + 0x24)
10034174  
1003417d  if (ecx - 2 u> 0xc)
100341a0      data_10063fe8(3, "travel type %d not implemented y…", ecx)
100341ae      return 8
100341ae  
1003417d  switch (ecx)
1003418b      case 2, 3, 4, 5, 7, 8, 9, 0xa
1003418b          return 5
10034191      case 6, 0xc
10034191          return 6
10034197      case 0xb
10034197          return 0xa
100341a0      case 0xd
100341a0          data_10063fe8(3, "travel type %d not implemented y…", ecx)
100341ae          return 8
100341ae      case 0xe
100341ae          return 8

100341af                                               90                                                                 .
100341b0  uint32_t jump_table_100341b0[0xd] = 
100341b0  {
100341b0      [0x0] =  0x10034186
100341b4      [0x1] =  0x10034186
100341b8      [0x2] =  0x10034186
100341bc      [0x3] =  0x10034186
100341c0      [0x4] =  0x1003418c
100341c4      [0x5] =  0x10034186
100341c8      [0x6] =  0x10034186
100341cc      [0x7] =  0x10034186
100341d0      [0x8] =  0x10034186
100341d4      [0x9] =  0x10034192
100341d8      [0xa] =  0x1003418c
100341dc      [0xb] =  0x10034198
100341e0      [0xc] =  0x100341a9
100341e4  }

100341e4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10034200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10034210    void sub_10034210(int32_t arg1, float* arg2, float arg3)

1003421a  void var_30
1003421a  j_sub_10031e20(&var_30)
1003421f  float* edi = arg3
1003422e  bool cond:0 = (arg2[0x18].b & 4) == 0
10034232  float var_3c = fconvert.s(fconvert.t(*edi) - fconvert.t(*arg2))
1003423c  float var_38 = fconvert.s(fconvert.t(edi[1]) - fconvert.t(arg2[1]))
10034240  float var_34
10034240  
10034240  if (cond:0)
10034256      var_34 = 0f
1003425e      int32_t var_20_1 = 2
10034240  else
10034248      int32_t var_20 = 8
10034250      var_34 = fconvert.s(fconvert.t(edi[2]) - fconvert.t(arg2[2]))
10034250  
1003426b  long double x87_r7_6 = j_sub_10043290(&var_3c)
10034270  long double temp0 = fconvert.t(100f)
10034270  x87_r7_6 - temp0
10034270  
1003427e  if ((((x87_r7_6 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_6, temp0) ? 1 : 0) << 0xa
1003427e          | (x87_r7_6 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10034282      x87_r7_6 = fconvert.t(100f)
10034282  
10034294  long double x87_r7_9 = fconvert.t(400f) - (fconvert.t(400f) - x87_r7_6 * fconvert.t(4f))
1003429a  arg3 = fconvert.s(x87_r7_9)
1003429e  long double temp1 = fconvert.t(10f)
1003429e  x87_r7_9 - temp1
1003429e  
100342a9  if ((((x87_r7_9 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_9, temp1) ? 1 : 0) << 0xa
100342a9          | (x87_r7_9 == temp1 ? 1 : 0) << 0xe):1.b & 1) != 0)
100342ab      arg3 = 0f
100342ab  
100342be  j_sub_10031d10(arg2, &var_3c, &var_30)
100342d1  j_sub_10037520(arg2[0xa], &var_3c, arg3)
100342e2  float var_10 = var_34
100342e6  float eax_2
100342e6  eax_2.b = arg2[0x18].b
100342ee  float var_18 = var_3c
100342f2  float var_14 = var_38
100342f2  
100342f6  if ((eax_2.b & 4) != 0)
10034302      float var_c
10034302      j_sub_10041790(&var_3c, &var_c)
1003430e      int32_t var_1c
1003430e      int32_t eax_3
1003430e      eax_3.b = var_1c.b | 2
10034310      int32_t var_1c_1 = eax_3
10034310  
10034316  float ecx_2 = *arg2
10034318  int32_t edx_1 = arg2[1]
1003431b  arg2[0x13] = 0
1003431e  arg2[0x11] = 0
10034324  arg2[0x12] = edi[3]
1003432a  arg2[0x16] = arg2[2]
10034331  arg2[0x14] = ecx_2
10034334  arg2[0x15] = edx_1
10034342  __builtin_memcpy(dest: arg1, src: &var_30, n: 0x30)

1003434a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10034360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100343a0    int32_t sub_100343a0(int32_t arg1, int32_t* arg2, float arg3, int32_t arg4)

100343af  int32_t var_270
100343af  j_sub_10031e20(&var_270)
100343bc  j_sub_10033a70(arg2)
100343bc  
100343cd  if (arg3 != 0)
100343df      int32_t edx_1 = arg2[0xc]
100343e5      arg2[0x18] &= 0xfffffff3
100343e5      
100343f8      if (j_sub_1000eeb0(arg2, edx_1, arg2[9]) != 0)
100343fd          int32_t eax_2
100343fd          eax_2.b = arg2[0x18].b | 2
100343ff          arg2[0x18] = eax_2
100343ff      
1003440d      if (j_sub_1000efc0(arg2) != 0)
10034412          int32_t eax_4
10034412          eax_4.b = arg2[0x18].b | 4
10034414          arg2[0x18] = eax_4
10034414      
10034422      if (j_sub_1000f2c0(arg2) != 0)
10034427          int32_t eax_6
10034427          eax_6.b = arg2[0x18].b | 8
10034429          arg2[0x18] = eax_6
10034429      
10034430      int32_t eax_7 = arg2[0x13]
10034433      char* var_2b8_20
10034433      int32_t var_2b4_22
10034433      int32_t var_29c
10034433      int32_t var_278
10034433      void var_240
10034433      void var_210
10034433      void var_1e0
10034433      void var_1b0
10034433      void var_180
10034433      void var_150
10034433      void var_120
10034433      void var_f0
10034433      void var_c0
10034433      void var_90
10034433      void var_60
10034433      int32_t eax_26
10034433      
10034433      if ((arg2[0x18].b & 0xe) == 0)
1003477a          if (eax_7 == 0)
1003477a              goto label_100348ba
1003477a          
10034799          __builtin_memcpy(dest: &var_29c, src: j_sub_1001a2e0(&var_240, eax_7), n: 0x2c)
1003479f          int32_t var_260_2 = var_278
1003479f          
100347a9          if (var_278 - 2 u> 0xc)
100348a3              label_100348a3:
100348a3              var_2b4_22 = var_278
100348a4              var_2b8_20 = "(last) travel type %d not implem…"
100348ab              label_100348ab:
100348ab              data_10063fe8(4, var_2b8_20, var_2b4_22)
100348ba              label_100348ba:
100348ba              int32_t var_268
100348ba              
100348ba              if (var_268 != 0)
100348bc                  unimplemented  {fld st0, dword [ebx+0x2c]}
100348bf                  unimplemented  {fmul st0, dword [&data_1005810c]}
100348c5                  unimplemented  {fsubr st0, dword [ebx+0x70]}
100348c8                  arg2[0x1c] = fconvert.s(unimplemented  {fstp dword [ebx+0x70], st0})
100348c8                  unimplemented  {fstp dword [ebx+0x70], st0}
100348c8              
100348cd              int32_t ecx_17 = arg2[1]
100348d0              int32_t edx_10 = arg2[2]
100348d3              arg2[0x14] = *arg2
100348d6              arg2[0x15] = ecx_17
100348d9              arg2[0x16] = edx_10
100347a9          else
100347af              switch (var_278)
100347c4                  case 2
100347c4                      int80_t st0_13
100347c4                      eax_26, st0_13 = j_sub_10031e50(&var_90, arg2, &var_29c)
10034759                      __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                      goto label_100348ba
100347af                  case 3, 0xa
100347af                      goto label_100348ba
100347d9                  case 4
10034759                      __builtin_memcpy(dest: &var_270, 
10034759                          src: j_sub_100322c0(&var_60, arg2, &var_29c), n: 0x30)
10034759                      goto label_100348ba
10034821                  case 5
10034821                      int80_t st0_14
10034821                      eax_26, st0_14 = j_sub_10032e80(&var_1b0, arg2, &var_29c)
10034759                      __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                      goto label_100348ba
100347f1                  case 6
10034759                      __builtin_memcpy(dest: &var_270, 
10034759                          src: j_sub_10032fc0(&var_f0, arg2, &var_29c), n: 0x30)
10034759                      goto label_100348ba
10034809                  case 7
10034759                      __builtin_memcpy(dest: &var_270, 
10034759                          src: j_sub_10032a00(&var_150, arg2, &var_29c), n: 0x30)
10034759                      goto label_100348ba
10034839                  case 8
10034759                      __builtin_memcpy(dest: &var_270, 
10034759                          src: j_sub_100323e0(&var_1e0, arg2, &var_29c), n: 0x30)
10034759                      goto label_100348ba
10034851                  case 9
10034851                      int80_t st0_15
10034851                      eax_26, st0_15 = j_sub_10032620(&var_120, arg2, &var_29c)
10034759                      __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                      goto label_100348ba
10034869                  case 0xb
10034759                      __builtin_memcpy(dest: &var_270, 
10034759                          src: j_sub_10033790(&var_210, arg2, &var_29c), n: 0x30)
10034759                      goto label_100348ba
10034899                  case 0xc
10034899                      int80_t st0_17
10034899                      eax_26, st0_17 = j_sub_100340b0(&var_c0, arg2, &var_29c)
10034759                      __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                      goto label_100348ba
100347af                  case 0xd
100347af                      goto label_100348a3
10034881                  case 0xe
10034881                      int80_t st0_16
10034881                      eax_26, st0_16 = j_sub_10033b00(&var_180, arg2, &var_29c)
10034759                      __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                      goto label_100348ba
10034433      else
10034451          __builtin_memcpy(dest: &var_240, src: j_sub_1001a2e0(&var_240, eax_7), n: 0x2c)
1003445b          int32_t var_21c
1003445b          int32_t edx_2
1003445b          edx_2.b = var_21c != 0xb
10034460          int32_t eax_9
10034460          int80_t st0_1
10034460          eax_9, st0_1 = j_sub_10030aa0(arg2, edx_2)
10034465          arg2[0x10] = eax_9
10034465          
10034470          if (eax_9 == *(arg3 i+ 0xc))
10034479              int32_t eax_10
10034479              int80_t st0_2
10034479              eax_10, st0_2 = j_sub_10034210(&var_240, arg2, arg3)
10034491              __builtin_memcpy(dest: arg1, src: eax_10, n: 0x30)
1003449d              return arg1
1003449d          
1003449e          int32_t ebp_1 = arg2[0x13]
1003449e          
100344a3          if (ebp_1 == 0)
10034552              label_10034552:
10034552              j_sub_10011040(arg2[0x10])
1003456e              int32_t ecx_11 = arg2[9]
10034575              int32_t edx_7 = arg2[0x11]
10034578              void* var_2c8 = &arg2[0x1d]
1003458f              ebp_1 = j_sub_100310e0(arg2, arg2[0x10], arg2[0x12], edx_7, ecx_11, var_2c8, 
1003458f                  &arg2[0x1e], &arg2[0x1f], arg3, arg4)
10034594              int32_t ecx_13
10034594              ecx_13.b = arg2[0x18].b & 0x7f
10034597              arg2[0x17] = arg2[0x10]
1003459c              arg2[0x19] = 0
100345a3              arg2[0x18] = ecx_13
100345a3              
100345a6              if (ebp_1 != 0)
100345be                  __builtin_memcpy(dest: &var_29c, src: j_sub_1001a2e0(&var_240, ebp_1), 
100345be                      n: 0x2c)
100345ca                  int32_t var_2a0 = j_sub_10034170(&var_29c)
100345d2                  var_2a0 = fconvert.s(float.t(var_2a0))
100345db                  long double x87_r6_7 = j_sub_1000e120() + fconvert.t(var_2a0)
100345df                  float var_2c0_3 = 6f
100345e5                  var_2c8 = arg2
100345e6                  arg2[0x1c] = fconvert.s(x87_r6_7)
100345e9                  j_sub_10031010(var_2c8, ebp_1, var_2c0_3)
100344a3          else
100344bf              __builtin_memcpy(dest: &var_29c, src: j_sub_1001a2e0(&var_240, ebp_1), 
100344bf                  n: 0x2c)
100344bf              
100344d7              if ((j_sub_10018dc0(var_278) & arg4) == 0)
100344d7                  goto label_10034552
100344d7              
100344e0              int32_t eax_14
100344e0              
100344e0              if (var_278 == 0xe)
100344e2                  long double st0_3 = j_sub_1000e120()
100344e7                  long double temp0_1 = fconvert.t(arg2[0x1c])
100344e7                  st0_3 - temp0_1
100344ea                  eax_14.w = (st0_3 < temp0_1 ? 1 : 0) << 8
100344ea                      | (is_unordered.t(st0_3, temp0_1) ? 1 : 0) << 0xa
100344ea                      | (st0_3 == temp0_1 ? 1 : 0) << 0xe | 0x3800
100344ea                  
100344f5                  if ((eax_14:1.b & 0x41) == 0 || (arg2[0x18].b & 0x80) != 0)
100344ef                      goto label_10034552
100344e0              else if (var_278 != 0xb)
1003452f                  if (arg2[0x12] != *(arg3 i+ 0xc))
1003452f                      goto label_10034552
1003452f                  
10034531                  long double st0_5 = j_sub_1000e120()
10034536                  long double temp1_1 = fconvert.t(arg2[0x1c])
10034536                  st0_5 - temp1_1
10034539                  eax_14.w = (st0_5 < temp1_1 ? 1 : 0) << 8
10034539                      | (is_unordered.t(st0_5, temp1_1) ? 1 : 0) << 0xa
10034539                      | (st0_5 == temp1_1 ? 1 : 0) << 0xe | 0x3800
10034539                  
10034548                  if ((eax_14:1.b & 0x41) == 0 || arg2[0x11] != arg2[0x10])
1003453e                      goto label_10034552
10034500              else
1003450b                  if (arg2[0x10] == var_29c)
1003450b                      goto label_10034552
1003450b                  
1003450d                  long double st0_4 = j_sub_1000e120()
10034512                  long double temp2_1 = fconvert.t(arg2[0x1c])
10034512                  st0_4 - temp2_1
10034515                  int32_t eax_15
10034515                  eax_15.w = (st0_4 < temp2_1 ? 1 : 0) << 8
10034515                      | (is_unordered.t(st0_4, temp2_1) ? 1 : 0) << 0xa
10034515                      | (st0_4 == temp2_1 ? 1 : 0) << 0xe | 0x3800
10034515                  
1003451a                  if ((eax_15:1.b & 0x41) == 0)
1003451a                      goto label_10034552
1003451a          
100345f8          int32_t ecx_14 = arg2[0x10]
100345fb          arg2[0x13] = ebp_1
100345fe          int32_t eax_23 = *(arg3 i+ 0xc)
10034601          arg2[0x11] = ecx_14
10034606          arg2[0x12] = eax_23
10034606          
10034609          if (ebp_1 == 0)
1003476b              var_270 = 1
10034773              goto label_100348ba
10034773          
10034628          __builtin_memcpy(dest: &var_29c, src: j_sub_1001a2e0(&var_240, ebp_1), n: 0x2c)
1003462e          int32_t var_260_1 = var_278
1003462e          
10034638          if (var_278 - 2 u> 0xc)
10034760              label_10034760:
10034760              var_2b4_22 = var_278
10034761              var_2b8_20 = "travel type %d not implemented y…"
10034766              goto label_100348ab
10034766          
1003463e          switch (var_278)
10034650              case 2
10034650                  int80_t st0_7
10034650                  eax_26, st0_7 = j_sub_10031e50(&var_240, arg2, &var_29c)
10034759                  __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                  goto label_100348ba
10034668              case 3
10034759                  void var_30
10034759                  __builtin_memcpy(dest: &var_270, 
10034759                      src: j_sub_100320c0(&var_30, arg2, &var_29c), n: 0x30)
10034759                  goto label_100348ba
10034680              case 4
10034759                  __builtin_memcpy(dest: &var_270, 
10034759                      src: j_sub_10032190(&var_c0, arg2, &var_29c), n: 0x30)
10034759                  goto label_100348ba
100346c8              case 5
100346c8                  int80_t st0_9
100346c8                  eax_26, st0_9 = j_sub_10032ae0(&var_120, arg2, &var_29c)
10034759                  __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                  goto label_100348ba
10034698              case 6
10034759                  __builtin_memcpy(dest: &var_270, 
10034759                      src: j_sub_10032fc0(&var_180, arg2, &var_29c), n: 0x30)
10034759                  goto label_100348ba
100346b0              case 7
100346b0                  int80_t st0_8
100346b0                  eax_26, st0_8 = j_sub_100327f0(&var_210, arg2, &var_29c)
10034759                  __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                  goto label_100348ba
100346dd              case 8
10034759                  __builtin_memcpy(dest: &var_270, 
10034759                      src: j_sub_100323e0(&var_1e0, arg2, &var_29c), n: 0x30)
10034759                  goto label_100348ba
100346f2              case 9
10034759                  __builtin_memcpy(dest: &var_270, 
10034759                      src: j_sub_100324c0(&var_1b0, arg2, &var_29c), n: 0x30)
10034759                  goto label_100348ba
10034707              case 0xa
10034759                  __builtin_memcpy(dest: &var_270, 
10034759                      src: j_sub_100330e0(&var_150, arg2, &var_29c), n: 0x30)
10034759                  goto label_100348ba
1003471c              case 0xb
1003471c                  int80_t st0_10
1003471c                  eax_26, st0_10 = j_sub_10033210(&var_f0, arg2, &var_29c)
10034759                  __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                  goto label_100348ba
10034746              case 0xc
10034746                  int80_t st0_12
10034746                  eax_26, st0_12 = j_sub_10033ec0(&var_90, arg2, &var_29c)
10034759                  __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                  goto label_100348ba
1003463e              case 0xd
1003463e                  goto label_10034760
10034731              case 0xe
10034731                  int80_t st0_11
10034731                  eax_26, st0_11 = j_sub_10033b00(&var_60, arg2, &var_29c)
10034759                  __builtin_memcpy(dest: &var_270, src: eax_26, n: 0x30)
10034759                  goto label_100348ba
100343cd  else
100343cf      var_270 = 1
100343cf  
100348ee  __builtin_memcpy(dest: arg1, src: &var_270, n: 0x30)
100348fa  return arg1

100348fb                                                                                   90                                         .
100348fc  uint32_t jump_table_100348fc[0xd] = 
100348fc  {
100348fc      [0x0] =  0x10034645
10034900      [0x1] =  0x1003465a
10034904      [0x2] =  0x10034672
10034908      [0x3] =  0x100346ba
1003490c      [0x4] =  0x1003468a
10034910      [0x5] =  0x100346a2
10034914      [0x6] =  0x100346cf
10034918      [0x7] =  0x100346e4
1003491c      [0x8] =  0x100346f9
10034920      [0x9] =  0x1003470e
10034924      [0xa] =  0x10034738
10034928      [0xb] =  0x10034760
1003492c      [0xc] =  0x10034723
10034930  }
10034930  uint32_t jump_table_10034930[0xd] = 
10034930  {
10034930      [0x0] =  0x100347b6
10034934      [0x1] =  0x100348b4
10034938      [0x2] =  0x100347cb
1003493c      [0x3] =  0x10034813
10034940      [0x4] =  0x100347e3
10034944      [0x5] =  0x100347fb
10034948      [0x6] =  0x1003482b
1003494c      [0x7] =  0x10034843
10034950      [0x8] =  0x100348b4
10034954      [0x9] =  0x1003485b
10034958      [0xa] =  0x1003488b
1003495c      [0xb] =  0x100348a3
10034960      [0xc] =  0x10034873
10034964  }

10034964              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10034980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100349a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100349c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100349e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10034ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10034af0    int32_t* sub_10034af0(void* arg1)

10034afd  *(arg1 + 0x74) = 0
10034b03  *(arg1 + 0x78) = 0
10034b09  *(arg1 + 0x7c) = 0
10034b0f  return arg1 + 0x7c

10034b10                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

10034b20    void sub_10034b20(void* arg1)

10034b24  long double x87_r7 = fconvert.t(0f)
10034b2a  long double x87_r6 = fconvert.t(*(arg1 + 0x78))
10034b2d  long double temp0 = fconvert.t(0f)
10034b2d  x87_r6 - temp0
10034b38  void* const edx
10034b38  
10034b38  if ((((x87_r6 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r6, temp0) ? 1 : 0) << 0xa
10034b38          | (x87_r6 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) != 0)
10034b43      edx = arg1
10034b38  else
10034b3c      x87_r7 = fconvert.t(*(arg1 + 0x78))
10034b3f      edx = nullptr
10034b3f  
10034b47  long double temp1 = fconvert.t(0f)
10034b47  x87_r7 - temp1
10034b47  
10034b52  if ((((x87_r7 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp1) ? 1 : 0) << 0xa
10034b52          | (x87_r7 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) == 0)
10034b54      *(arg1 + (edx << 2) + 0x78) = 0
10034b54      
10034b64      if (*(arg1 + 0x80) s> 0)
10034b66          *(arg1 + (edx << 2) + 0x7c) -= 1

10034b6b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10034b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10034b90    int32_t sub_10034b90(int32_t arg1)

10034b9c  __builtin_memset(s: arg1, c: 0, n: 0x80)
10034b9f  return 0

10034ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10034bb0    int32_t* sub_10034bb0(char* arg1)

10034bcc  void* eax
10034bcc  int16_t x87control
10034bcc  int16_t x87control_1
10034bcc  eax, x87control_1 = __ftol(x87control, j_sub_10038a90("max_weaponinfo", &data_1005e3d0))
10034bd1  void* esi = eax
10034bda  void* var_560 = esi
10034bda  
10034bde  if (esi s< 0)
10034be8      data_10063fe8(3, "max_weaponinfo = %d\n", esi)
10034bf8      var_560 = 0x20
10034bfc      j_sub_10038ac0("max_weaponinfo", &data_1005e3d0)
10034c04      esi = 0x20
10034c04  
10034c1d  int32_t ebp = __ftol(x87control_1, j_sub_10038a90("max_projectileinfo", &data_1005e3d0))
10034c21  int32_t var_564 = ebp
10034c21  
10034c25  if (ebp s< 0)
10034c2f      data_10063fe8(3, "max_projectileinfo = %d\n", ebp)
10034c3f      var_564 = 0x20
10034c43      j_sub_10038ac0("max_projectileinfo", &data_1005e3d0)
10034c4b      ebp = 0x20
10034c4b  
10034c60  void* s
10034c60  __builtin_memset(&s, c: 0, n: 0x98)
10034c6f  char var_558[0x90]
10034c6f  StrCopyFixed(&var_558, arg1, 0x90)
10034c6f  
10034c8b  if (j_sub_10041f60(&var_558, &s) == 0)
10034c99      data_10063fe8(3, "couldn't find %s\n", &var_558)
10034cae      return 0
10034cae  
10034cc7  void* var_4c4
10034cc7  char var_4c0[0x90]
10034cc7  char* eax_6 = j_sub_1003de60(&var_4c0, s, var_4c4)
10034cc7  
10034cd3  if (eax_6 == 0)
10034ce1      data_10063fe8(3, "counldn't load %s\n", &var_558)
10034cf6      return 0
10034cf6  
10034d19  int32_t* result = j_sub_10039000(ebp * 0xd0 + esi * 0x158 + 0x10)
10034d2c  *result = 0
10034d33  result[3] = &result[4]
10034d38  result[2] = &result[4 + esi * 0x56]
10034d3b  result[1] = 0
10034d4c  char var_430[0x430]
10034d4c  
10034d4c  if (j_sub_1003d580(eax_6, &var_430) != 0)
10034d52      while (true)
10034d52          char* esi_3 = "weaponinfo"
10034d57          char (* eax_15)[0x430] = &var_430
10034d5e          int32_t eax_17
10034d5e          char edx_3
10034d5e          
10034d5e          while (true)
10034d5e              edx_3 = *eax_15
10034d62              char temp1_1 = *esi_3
10034d62              bool c_1 = edx_3 u< temp1_1
10034d62              
10034d64              if (edx_3 == temp1_1)
10034d68                  if (edx_3 == 0)
10034d7e                      eax_17 = 0
10034d80                      break
10034d80                  
10034d6a                  edx_3 = (*eax_15)[1]
10034d6f                  char temp4_1 = esi_3[1]
10034d6f                  c_1 = edx_3 u< temp4_1
10034d6f                  
10034d72                  if (edx_3 == temp4_1)
10034d74                      eax_15 = &(*eax_15)[2]
10034d77                      esi_3 = &esi_3[2]
10034d77                      
10034d7c                      if (edx_3 != 0)
10034d7c                          continue
10034d7c                      
10034d7e                      eax_17 = 0
10034d80                      break
10034d80              
10034d82              bool c_2 = unimplemented  {sbb eax, eax}
10034d84              eax_17 = sbb.d(sbb.d(eax_15, eax_15, c_1), 0xffffffff, c_2)
10034d84              break
10034d84          
10034d89          if (eax_17 != 0)
10034def              char* esi_6 = "projectileinfo"
10034df4              void* eax_24 = &var_430
10034dfb              int32_t eax_26
10034dfb              
10034dfb              while (true)
10034dfb                  edx_3 = *eax_24
10034dff                  char temp5_1 = *esi_6
10034dff                  bool c_3 = edx_3 u< temp5_1
10034dff                  
10034e01                  if (edx_3 == temp5_1)
10034e05                      if (edx_3 == 0)
10034e1b                          eax_26 = 0
10034e1d                          break
10034e1d                      
10034e07                      edx_3 = *(eax_24 + 1)
10034e0c                      char temp9_1 = esi_6[1]
10034e0c                      c_3 = edx_3 u< temp9_1
10034e0c                      
10034e0f                      if (edx_3 == temp9_1)
10034e11                          eax_24 += 2
10034e14                          esi_6 = &esi_6[2]
10034e14                          
10034e19                          if (edx_3 != 0)
10034e19                              continue
10034e19                          
10034e1b                          eax_26 = 0
10034e1d                          break
10034e1d                  
10034e1f                  bool c_4 = unimplemented  {sbb eax, eax}
10034e21                  eax_26 = sbb.d(sbb.d(eax_24, eax_24, c_3), 0xffffffff, c_4)
10034e21                  break
10034e21              
10034e26              if (eax_26 != 0)
10034f7b                  data_10063fe8(3, "unknown definition %s in %s\n", &var_430, &var_558)
10034f82                  j_sub_100390b0(result)
10034f88                  j_sub_1003e000(eax_6)
10034f9c                  return 0
10034f9c              
10034e2c              int32_t edx_9 = result[1]
10034e2c              
10034e35              if (edx_9 s>= var_564)
10034f45                  data_10063fe8(3, "more than %d projectiles defined…", var_564, &var_558)
10034f4c                  j_sub_100390b0(result)
10034f52                  j_sub_1003e000(eax_6)
10034f66                  return 0
10034f66              
10034e50              __builtin_memset(s: edx_9 * 0xd0 + result[2], c: 0, n: 0xd0)
10034e50              
10034e74              if (j_sub_10040ad0(eax_6, &data_1005dfe0, result[1] * 0xd0 + result[2]) == 0)
10034e74                  goto label_10034f1d
10034e74              
10034e7a              result[1] += 1
10034d89          else
10034d8b              int32_t esi_4 = *result
10034d8e              void* eax_18 = var_560
10034d8e              
10034d94              if (esi_4 s>= eax_18)
10034efa                  data_10063fe8(3, "more than %d weapons defined in …", eax_18, &var_558)
10034f01                  j_sub_100390b0(result)
10034f07                  j_sub_1003e000(eax_6)
10034f1b                  return 0
10034f1b              
10034db6              __builtin_memset(s: result[3] + esi_4 * 0x158, c: 0, n: 0x158)
10034db6              
10034de1              if (j_sub_10040ad0(eax_6, &data_1005dfd8, result[3] + *result * 0x158) == 0)
10034f1d                  label_10034f1d:
10034f1d                  j_sub_100390b0(result)
10034f23                  j_sub_1003e000(eax_6)
10034f37                  return 0
10034f37              
10034de7              *result += 1
10034de7          
10034e90          if (j_sub_1003d580(eax_6, &var_430) == 0)
10034e90              break
10034e90  
10034e97  j_sub_1003e000(eax_6)
10034e9c  int32_t eax_31 = *result
10034ea2  int32_t ecx_6 = 0
10034ea4  bool cond:3 = eax_31 != 0
10034ea6  int32_t var_564_1 = 0
10034ea6  
10034eaa  if (eax_31 s> 0)
10034eb0      void* eax_32 = nullptr
10034eb2      void* var_55c_1 = nullptr
10034eb9      int32_t edx_19
10034eb9      
10034eb9      while (true)
10034eb9          void* eax_33 = eax_32 + result[3]
10034ebb          var_560 = eax_33
10034ebf          int32_t edx_14
10034ebf          edx_14.b = *(eax_33 + 4)
10034ec4          char* var_580_5
10034ec4          int32_t var_57c_9
10034ec4          char (* var_578_16)[0x90]
10034ec4          
10034ec4          if (edx_14.b == 0)
10035084              var_578_16 = &var_558
10035085              var_57c_9 = ecx_6
10035086              var_580_5 = "weapon %d has no name in %s\n"
100350d3              label_100350d3:
100350d3              data_10063fe8(3, var_580_5, var_57c_9, var_578_16)
100350da              j_sub_100390b0(result)
100350ee              return 0
100350ee          
10034eca          edx_14.b = *(eax_33 + 0xb0)
10034eca          
10034ed2          if (edx_14.b == 0)
1003509a              var_578_16 = &var_558
100350a8              var_57c_9 = result[3] + ecx_6 * 0x158 + 4
100350a9              var_580_5 = "weapon %s has no projectile in %…"
100350ae              goto label_100350d3
100350ae          
10034edb          int32_t edi_5 = 0
10034edb          
10034edf          if (result[1] s> 0)
10034ee5              char* edx_16 = result[2]
10034ee5              
10034fa1              while (true)
10034fa1                  void* esi_8 = eax_33 + 0xb0
10034fa7                  char* eax_38 = edx_16
10034fa9                  int32_t eax_40
10034fa9                  
10034fa9                  while (true)
10034fa9                      char* ebx
10034fa9                      ebx.b = *eax_38
10034fab                      ecx_6.b = ebx.b
10034fad                      char temp8_1 = *esi_8
10034fad                      bool c_5 = ebx.b u< temp8_1
10034fad                      
10034faf                      if (ebx.b == temp8_1)
10034fb3                          if (ecx_6.b == 0)
10034fc9                              eax_40 = 0
10034fcb                              break
10034fcb                          
10034fb5                          ebx.b = eax_38[1]
10034fb8                          ecx_6.b = ebx.b
10034fba                          char temp12_1 = *(esi_8 + 1)
10034fba                          c_5 = ebx.b u< temp12_1
10034fba                          
10034fbd                          if (ebx.b == temp12_1)
10034fbf                              eax_38 = &eax_38[2]
10034fc2                              esi_8 += 2
10034fc2                              
10034fc7                              if (ecx_6.b != 0)
10034fc7                                  continue
10034fc7                              
10034fc9                              eax_40 = 0
10034fcb                              break
10034fcb                      
10034fcd                      bool c_6 = unimplemented  {sbb eax, eax}
10034fcf                      eax_40 = sbb.d(sbb.d(eax_38, eax_38, c_5), 0xffffffff, c_6)
10034fcf                      break
10034fcf                  
10034fd4                  if (eax_40 == 0)
10034ff8                      *(var_560 + 0x154) = edi_5 * 0xd0 + result[2]
10034ff8                      break
10034ff8                  
10034fd9                  edi_5 += 1
10034fda                  edx_16 = &edx_16[0xd0]
10034fda                  
10034fe2                  if (edi_5 s>= result[1])
10034fe2                      break
10034fe2                  
10034f9d                  eax_33 = var_560
10034f9d              
10034ffe              ecx_6 = var_564_1
10034ffe          
10035005          if (edi_5 == result[1])
100350bd              var_578_16 = &var_558
100350cb              var_57c_9 = result[3] + ecx_6 * 0x158 + 4
100350cc              var_580_5 = "weapon %s uses undefined project…"
100350cc              goto label_100350d3
100350cc          
10035012          *(result[3] + var_55c_1) = ecx_6
10035015          edx_19 = *result
10035018          ecx_6 += 1
10035019          eax_32 = var_55c_1 + 0x158
10035020          var_564_1 = ecx_6
10035024          var_55c_1 = eax_32
10035024          
10035028          if (ecx_6 s>= edx_19)
10035028              break
10035028      
10035030      cond:3 = edx_19 != 0
10035030  
10035032  if (not(cond:3))
1003503b      data_10063fe8(2, "no weapon info loaded\n")
1003503b  
1003504d  if (var_4c4 != 0)
1003506a      data_10063fe8(1, "loaded %s\%s\n", &var_4c0, arg1)
1003507f      return result
1003507f  
100350fb  data_10063fe8(1, "loaded %s\n", &var_558)
10035110  return result

10035111                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10035120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100351a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100351c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100351e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10035280    int32_t* sub_10035280(int32_t* arg1, int32_t* arg2)

1003528c  int32_t* result = j_sub_10039000(*arg2 << 2)
10035296  int32_t i = 0
10035296  
1003529e  if (*arg2 s<= 0)
100352d5      return result
100352d5  
100352a2  int32_t edi_1 = 0
100352a4  int32_t* result_1 = result
100352a4  
100352cb  do
100352bb      *result_1 = j_sub_100369c0(arg1, arg2[3] + edi_1 + 4)
100352bf      i += 1
100352c0      edi_1 += 0x158
100352c6      result_1 = &result_1[1]
100352cb  while (i s< *arg2)
100352cb  
100352cd  return result

100352d6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
100352e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10035300    void* sub_10035300(void* arg1)

10035305  int32_t* eax = *(arg1 + 8)
10035305  
1003530a  if (eax != 0)
1003530d      j_sub_100359b0(eax)
1003530d  
10035315  void* result = *(arg1 + 0xc)
10035315  
1003531b  if (result != 0)
1003531e      result = j_sub_100390b0(result)
1003531e  
10035324  return result

10035325                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10035340    int32_t sub_10035340(void* arg1, char* arg2)

10035347  j_sub_10035300(arg1)
10035351  int32_t* eax = j_sub_10035fa0(arg2)
10035359  *(arg1 + 8) = eax
10035359  
1003535e  if (eax == 0)
10035368      data_10063fe8(4, "couldn't load weapon config %s\n", arg2)
10035378      return 0x1e
10035378  
10035379  int32_t* ecx = data_10064080
10035379  
10035381  if (ecx == 0)
1003538a      return 0x1f
1003538a  
10035395  *(arg1 + 0xc) = j_sub_10035280(eax, ecx)
1003539c  return 0

1003539d                                                                                         90 90 90                               ...
100353a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100353c0    int32_t sub_100353c0(char* arg1)

100353c4  int32_t* edi = data_10064080
100353c4  
100353cc  if (edi != 0)
100353d0      int32_t i = 0
100353d0      
100353d4      if (*edi s> 0)
100353d6          int32_t ebx_1 = 0
100353d6          
100353fd          do
100353df              int32_t* esi_2 = edi[3] + ebx_1
100353df              
100353f0              if (j_sub_10043c10(&esi_2[0x15], arg1) == 0)
1003540d                  return *esi_2
1003540d              
100353f4              i += 1
100353f5              ebx_1 += 0x158
100353fd          while (i s< *edi)
100353fd  
10035406  return 0xffffffff

1003540e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10035420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10035430    void* sub_10035430(char* arg1)

10035434  int32_t* edi = data_10064080
10035434  
1003543c  if (edi != 0)
10035440      int32_t i = 0
10035440      
10035444      if (*edi s> 0)
10035446          int32_t ebx_1 = 0
10035446          
1003546d          do
1003544f              void* esi_2 = edi[3] + ebx_1
1003544f              
10035460              if (j_sub_10043c10(esi_2 + 0x54, arg1) == 0)
10035480                  return esi_2 + 4
10035480              
10035464              i += 1
10035465              ebx_1 += 0x158
1003546d          while (i s< *edi)
1003546d  
10035478  return "unknown weapon"

10035481     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
100354a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100354b0    int32_t sub_100354b0(void* arg1)

100354b4  int32_t ecx = *(arg1 + 0x14)
100354b4  
100354b9  if (ecx s< 0)
100354bd      return 0
100354bd  
100354be  void* edx = data_10064080
100354be  
100354c6  if (edx == 0)
100354ca      return 0
100354ca  
100354e0  return *(edx + 0xc) + ecx * 0x158

100354e1     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

10035500    void sub_10035500(int32_t* arg1)

10035500  int32_t ecx
10035500  int32_t var_4_1 = ecx
10035503  int32_t* ebp = data_10064080
1003550b  int32_t* edi = nullptr
1003550f  float var_4 = 0f
1003550f  
10035517  if (ebp != 0)
1003551d      int32_t* esi_1 = arg1
10035521      long double st0_1 = j_sub_1000e120()
10035526      long double temp0_1 = fconvert.t(esi_1[6])
10035526      st0_1 - temp0_1
10035526      
10035539      if ((((st0_1 < temp0_1 ? 1 : 0) << 8 | (is_unordered.t(st0_1, temp0_1) ? 1 : 0) << 0xa
10035539              | (st0_1 == temp0_1 ? 1 : 0) << 0xe):1.b & 1) == 0 && esi_1[2] != 0)
10035542          int32_t i = 0
10035542          
10035546          if (*ebp s> 0)
1003554c              arg1 = nullptr
1003554c              
1003559e              do
10035553                  int32_t eax_4 = *(esi_1[3] + (i << 2))
10035553                  
10035558                  if (eax_4 s>= 0)
10035566                      long double st0_2 =
10035566                          j_sub_10036c70(esi_1[1], esi_1[2] + (eax_4 << 3) + 4)
1003556b                      long double temp1_1 = fconvert.t(var_4)
1003556b                      st0_2 - temp1_1
1003556b                      
10035577                      if ((((st0_2 < temp1_1 ? 1 : 0) << 8
10035577                              | (is_unordered.t(st0_2, temp1_1) ? 1 : 0) << 0xa
10035577                              | (st0_2 == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10035580                          var_4 = fconvert.s(st0_2)
10035584                          edi = ebp[3] + arg1
10035584                  
10035591                  i += 1
1003559a                  arg1 = &arg1[0x56]
1003559e              while (i s< *ebp)
1003559e              
100355a2              if (edi != 0)
100355b6                  if (j_sub_10043c10(&edi[0x15], esi_1[4]) != 0)
100355bf                      j_sub_100370f0(*esi_1, &edi[1])
100355ed                      esi_1[6] = fconvert.s(j_sub_1000e120()
100355ed                          + fconvert.t(*(ebp[3] + *edi * 0x158 + 0x144)) + fconvert.t(3f))
100355ed                  
100355f0                  esi_1[4] = &edi[0x15]
100355f5                  esi_1[5] = *edi

100355fe                                                                                            90 90                                ..
10035600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10035640    int32_t sub_10035640(void* arg1)

10035647  int32_t esi = *(arg1 + 8)
1003564a  int32_t ebx = *(arg1 + 0xc)
10035656  __builtin_memset(s: arg1, c: 0, n: 0x1c)
10035658  *(arg1 + 8) = esi
1003565c  *(arg1 + 0xc) = ebx
10035661  return 0

10035662        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................

10035680    int32_t sub_10035680()

10035690  int32_t* eax_1 = j_sub_10034bb0(j_sub_10038a60("weaponconfig", "weapons.c"))
10035698  data_10064080 = eax_1
10035698  
1003569f  if (eax_1 != 0)
100356b9      return 0
100356b9  
100356a8  data_10063fe8(4, "couldn't load the weapon config\n")
100356b6  return 0x1f

100356ba                                                                                90 90 90 90 90 90                            ......
100356c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100356d0    void* sub_100356d0()

100356d0  void* result = data_10064080
100356d0  
100356d7  if (result != 0)
100356da      result = j_sub_100390b0(result)
100356da  
100356e2  data_10064080 = 0
100356ec  return result

100356ed                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................

10035700    int32_t sub_10035700(void* arg1, float* arg2)

10035714  char var_430[0x400]
10035714  int32_t eax = j_sub_1003dae0(arg1, &var_430)
10035714  
1003571e  if (eax == 0)
10035727      return eax
10035727  
10035728  int32_t ebx
10035728  int32_t var_438_1 = ebx
1003572a  int16_t* esi = &data_1005e498
1003572f  char (* eax_1)[0x400] = &var_430
10035733  int32_t eax_3
10035733  
10035733  while (true)
10035733      char edx_1 = *eax_1
10035735      ebx.b = *esi
10035739      bool c_1 = edx_1 u< ebx.b
10035739      
1003573b      if (edx_1 == ebx.b)
1003573f          if (edx_1 == 0)
10035757              eax_3 = 0
10035759              break
10035759          
10035741          edx_1 = (*eax_1)[1]
10035744          ebx.b = *(esi + 1)
10035749          c_1 = edx_1 u< ebx.b
10035749          
1003574b          if (edx_1 == ebx.b)
1003574d              eax_1 = &(*eax_1)[2]
10035750              esi = &esi[1]
10035750              
10035755              if (edx_1 != 0)
10035755                  continue
10035755              
10035757              eax_3 = 0
10035759              break
10035759      
1003575b      bool c_2 = unimplemented  {sbb eax, eax}
1003575d      eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1003575d      break
1003575d  
10035764  if (eax_3 == 0)
1003576c      j_sub_10039270(arg1, "negative value set to zero\n")
1003577b      int32_t eax_4 = j_sub_1003d740(arg1, 3, 0, &var_430)
1003577b      
10035785      if (eax_4 == 0)
1003578e          return eax_4
1003578e  
10035797  int32_t var_30
10035797  
10035797  if (var_30 == 3)
100357ca      double var_20
100357ca      *arg2 = fconvert.s(fconvert.t(var_20))
100357d2      return 1
100357d2  
1003579d  char (* var_438_2)[0x400] = &var_430
100357a4  j_sub_10039200(arg1, "invalid return value %s\n")
100357b5  return 0

100357d3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
100357e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10035820    int32_t sub_10035820(void* arg1, void* arg2)

1003583b  if (j_sub_1003db20(arg1, "balance") == 0)
100358e2      *(arg2 + 8) = 0
100358eb      int32_t eax_9 = j_sub_10035700(arg1, arg2 + 0xc)
100358eb      
100358f5      if (eax_9 == 0)
100358fa          return eax_9
100358fa      
100358fb      int32_t edx_1 = *(arg2 + 0xc)
100358ff      *(arg2 + 0x10) = edx_1
10035902      *(arg2 + 0x14) = edx_1
1003583b  else
10035847      *(arg2 + 8) = 1
1003584e      int32_t eax_1 = j_sub_1003d650(arg1, U"(")
1003584e      
10035858      if (eax_1 == 0)
1003585d          return eax_1
1003585d      
10035863      int32_t eax_3 = j_sub_10035700(arg1, arg2 + 0xc)
10035863      
1003586d      if (eax_3 == 0)
10035872          return eax_3
10035872      
10035879      int32_t eax_4 = j_sub_1003d650(arg1, U",(")
10035879      
10035883      if (eax_4 == 0)
10035888          return eax_4
10035888      
1003588e      int32_t eax_5 = j_sub_10035700(arg1, arg2 + 0x10)
1003588e      
10035898      if (eax_5 == 0)
1003589d          return eax_5
1003589d      
100358a4      int32_t eax_6 = j_sub_1003d650(arg1, U",(")
100358a4      
100358ae      if (eax_6 == 0)
100358b3          return eax_6
100358b3      
100358b9      int32_t eax_7 = j_sub_10035700(arg1, arg2 + 0x14)
100358b9      
100358c3      if (eax_7 == 0)
100358c8          return eax_7
100358c8      
100358cf      int32_t eax_8 = j_sub_1003d650(arg1, U"),(")
100358cf      
100358d9      if (eax_8 == 0)
100358de          return eax_8
100358de  
1003590b  int32_t eax_11 = j_sub_1003d650(arg1, U";")
10035913  int32_t eax_12 = neg.d(eax_11)
1003591c  return neg.d(sbb.d(eax_12, eax_12, eax_11 != 0))

1003591d                                                                                         90 90 90                               ...
10035920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10035960    void sub_10035960(void* arg1)

10035961  void* esi = arg1
10035961  
10035968  if (esi != 0)
1003596a      while (true)
1003596a          void* eax_1 = *(esi + 0x18)
1003596a          
1003596f          if (eax_1 != 0)
10035972              j_sub_10035960(eax_1)
10035972          
1003597a          void* edi_1 = *(esi + 0x1c)
1003597e          j_sub_100390b0(esi)
1003597e          
10035988          if (edi_1 == 0)
10035988              break
10035988          
1003598a          esi = edi_1

10035991                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
100359a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100359b0    void* sub_100359b0(int32_t* arg1)

100359b6  int32_t i = 0
100359b6  
100359bb  if (*arg1 s> 0)
100359be      void* esi_1 = &arg1[1]
100359be      
100359e4      do
100359c5          j_sub_10035960(*(esi_1 + 4))
100359ca          void* eax_2 = *esi_1
100359ca          
100359d1          if (eax_2 != 0)
100359d4              j_sub_100390b0(eax_2)
100359d4          
100359de          i += 1
100359df          esi_1 += 8
100359e4      while (i s< *arg1)
100359e4  
100359f2  return j_sub_100390b0(arg1)

100359f3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10035a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10035a20    int32_t* sub_10035a20(void* arg1)

10035a39  int32_t var_438 = 0
10035a3d  int32_t* var_440 = nullptr
10035a41  int32_t* var_43c = nullptr
10035a4f  char var_430[0x408]
10035a4f  
10035a4f  if (j_sub_1003d650(arg1, U"(") != 0 && j_sub_1003d740(arg1, 3, 0x1000, &var_430) != 0
10035a4f          && j_sub_1003d650(arg1, U"),(") != 0 && j_sub_1003d650(arg1, U"{") != 0
10035a4f          && j_sub_1003dae0(arg1, &var_430) != 0)
10035abf      while (true)
10035abf          char* esi_1 = "default"
10035ac4          char (* eax_5)[0x408] = &var_430
10035ac8          int32_t eax_7
10035ac8          char edx_1
10035ac8          
10035ac8          while (true)
10035ac8              edx_1 = *eax_5
10035acc              char temp0_1 = *esi_1
10035acc              bool c_1 = edx_1 u< temp0_1
10035acc              
10035ace              if (edx_1 == temp0_1)
10035ad2                  if (edx_1 == 0)
10035ae8                      eax_7 = 0
10035aea                      break
10035aea                  
10035ad4                  edx_1 = (*eax_5)[1]
10035ad9                  char temp3_1 = esi_1[1]
10035ad9                  c_1 = edx_1 u< temp3_1
10035ad9                  
10035adc                  if (edx_1 == temp3_1)
10035ade                      eax_5 = &(*eax_5)[2]
10035ae1                      esi_1 = &esi_1[2]
10035ae1                      
10035ae6                      if (edx_1 != 0)
10035ae6                          continue
10035ae6                      
10035ae8                      eax_7 = 0
10035aea                      break
10035aea              
10035aec              bool c_2 = unimplemented  {sbb eax, eax}
10035aee              eax_7 = sbb.d(sbb.d(eax_5, eax_5, c_1), 0xffffffff, c_2)
10035aee              break
10035aee          
10035af5          int32_t ecx_3
10035af5          ecx_3.b = eax_7 == 0
10035af8          int32_t edi_1 = ecx_3
10035af8          
10035afc          if (edi_1 == 0)
10035afe              char* esi_2 = "case"
10035b03              char (* eax_8)[0x408] = &var_430
10035b07              int32_t eax_10
10035b07              
10035b07              while (true)
10035b07                  edx_1 = *eax_8
10035b09                  ecx_3.b = edx_1
10035b0b                  char temp4_1 = *esi_2
10035b0b                  bool c_3 = edx_1 u< temp4_1
10035b0b                  
10035b0d                  if (edx_1 == temp4_1)
10035b11                      if (ecx_3.b == 0)
10035b27                          eax_10 = 0
10035b29                          break
10035b29                      
10035b13                      edx_1 = (*eax_8)[1]
10035b16                      ecx_3.b = edx_1
10035b18                      char temp7_1 = esi_2[1]
10035b18                      c_3 = edx_1 u< temp7_1
10035b18                      
10035b1b                      if (edx_1 == temp7_1)
10035b1d                          eax_8 = &(*eax_8)[2]
10035b20                          esi_2 = &esi_2[2]
10035b20                          
10035b25                          if (ecx_3.b != 0)
10035b25                              continue
10035b25                          
10035b27                          eax_10 = 0
10035b29                          break
10035b29                  
10035b2b                  bool c_4 = unimplemented  {sbb eax, eax}
10035b2d                  eax_10 = sbb.d(sbb.d(eax_8, eax_8, c_3), 0xffffffff, c_4)
10035b2d                  break
10035b2d              
10035b32              if (eax_10 != 0)
10035d64                  j_sub_10035960(var_440)
10035d74                  char (* var_458_10)[0x408] = &var_430
10035d7b                  j_sub_10039200(arg1, "invalid name %s\n")
10035d8f                  return 0
10035d8f          
10035b3a          int32_t* eax_11 = j_sub_10039000(0x20)
10035b48          int32_t var_28
10035b48          *eax_11 = var_28
10035b51          int32_t* esi_3
10035b51          
10035b51          if (var_43c == 0)
10035b5c              esi_3 = eax_11
10035b5e              var_440 = esi_3
10035b51          else
10035b53              esi_3 = var_440
10035b57              var_43c[7] = eax_11
10035b57          
10035b64          var_43c = eax_11
10035b68          void* edi_2
10035b68          
10035b68          if (edi_1 != 0)
10035b6e              if (var_438 != 0)
10035d9d                  j_sub_10039200(arg1, "switch already has a default\n")
10035da3                  j_sub_10035960(esi_3)
10035db7                  return 0
10035db7              
10035b74              edi_2 = arg1
10035b7b              eax_11[1] = 0xf423f
10035b82              var_438 = 1
10035b6e              goto label_10035bc0
10035b6e          
10035b8c          edi_2 = arg1
10035baa          int32_t* var_454_10
10035baa          
10035baa          if (j_sub_1003d740(edi_2, 3, 0x1000, &var_430) == 0)
10035e62              var_454_10 = esi_3
10035baa          else
10035bb7              eax_11[1] = var_28
10035bc0              label_10035bc0:
10035bc0              
10035bca              if (j_sub_1003d650(edi_2, U":") == 0)
10035e62                  var_454_10 = esi_3
10035bca              else if (j_sub_1003dae0(edi_2, &var_430) == 0)
10035e62                  var_454_10 = esi_3
10035be0              else
10035be6                  int32_t edi_3 = 0
10035be8                  void* esi_4 = &data_1005ab58
10035bed                  char (* eax_17)[0x408] = &var_430
10035bf1                  int32_t eax_19
10035bf1                  char edx_3
10035bf1                  
10035bf1                  while (true)
10035bf1                      edx_3 = *eax_17
10035bf5                      char temp8_1 = *esi_4
10035bf5                      bool c_5 = edx_3 u< temp8_1
10035bf5                      
10035bf7                      if (edx_3 == temp8_1)
10035bfb                          if (edx_3 == 0)
10035c11                              eax_19 = 0
10035c13                              break
10035c13                          
10035bfd                          edx_3 = (*eax_17)[1]
10035c02                          char temp11_1 = *(esi_4 + 1)
10035c02                          c_5 = edx_3 u< temp11_1
10035c02                          
10035c05                          if (edx_3 == temp11_1)
10035c07                              eax_17 = &(*eax_17)[2]
10035c0a                              esi_4 += 2
10035c0a                              
10035c0f                              if (edx_3 != 0)
10035c0f                                  continue
10035c0f                              
10035c11                              eax_19 = 0
10035c13                              break
10035c13                      
10035c15                      bool c_6 = unimplemented  {sbb eax, eax}
10035c17                      eax_19 = sbb.d(sbb.d(eax_17, eax_17, c_5), 0xffffffff, c_6)
10035c17                      break
10035c17                  
10035c1c                  int32_t eax_20
10035c1c                  
10035c1c                  if (eax_19 == 0)
10035c2b                      edi_3 = 1
10035c30                      eax_20 = j_sub_1003dae0(arg1, &var_430)
10035c30                  
10035c3a                  if (eax_19 == 0 && eax_20 == 0)
10035dc6                      var_454_10 = var_440
10035c3a                  else
10035c40                      char* esi_5 = "return"
10035c45                      char (* eax_21)[0x408] = &var_430
10035c49                      int32_t eax_23
10035c49                      
10035c49                      while (true)
10035c49                          edx_3 = *eax_21
10035c4d                          char temp12_1 = *esi_5
10035c4d                          bool c_7 = edx_3 u< temp12_1
10035c4d                          
10035c4f                          if (edx_3 == temp12_1)
10035c53                              if (edx_3 == 0)
10035c69                                  eax_23 = 0
10035c6b                                  break
10035c6b                              
10035c55                              edx_3 = (*eax_21)[1]
10035c5a                              char temp15_1 = esi_5[1]
10035c5a                              c_7 = edx_3 u< temp15_1
10035c5a                              
10035c5d                              if (edx_3 == temp15_1)
10035c5f                                  eax_21 = &(*eax_21)[2]
10035c62                                  esi_5 = &esi_5[2]
10035c62                                  
10035c67                                  if (edx_3 != 0)
10035c67                                      continue
10035c67                                  
10035c69                                  eax_23 = 0
10035c6b                                  break
10035c6b                          
10035c6d                          bool c_8 = unimplemented  {sbb eax, eax}
10035c6f                          eax_23 = sbb.d(sbb.d(eax_21, eax_21, c_7), 0xffffffff, c_8)
10035c6f                          break
10035c6f                      
10035c74                      if (eax_23 != 0)
10035c91                          char* esi_6 = "switch"
10035c96                          void* eax_26 = &var_430
10035c9a                          int32_t eax_28
10035c9a                          
10035c9a                          while (true)
10035c9a                              edx_3 = *eax_26
10035c9e                              char temp16_1 = *esi_6
10035c9e                              bool c_9 = edx_3 u< temp16_1
10035c9e                              
10035ca0                              if (edx_3 == temp16_1)
10035ca4                                  if (edx_3 == 0)
10035cba                                      eax_28 = 0
10035cbc                                      break
10035cbc                                  
10035ca6                                  edx_3 = *(eax_26 + 1)
10035cab                                  char temp19_1 = esi_6[1]
10035cab                                  c_9 = edx_3 u< temp19_1
10035cab                                  
10035cae                                  if (edx_3 == temp19_1)
10035cb0                                      eax_26 += 2
10035cb3                                      esi_6 = &esi_6[2]
10035cb3                                      
10035cb8                                      if (edx_3 != 0)
10035cb8                                          continue
10035cb8                                      
10035cba                                      eax_28 = 0
10035cbc                                      break
10035cbc                              
10035cbe                              bool c_10 = unimplemented  {sbb eax, eax}
10035cc0                              eax_28 = sbb.d(sbb.d(eax_26, eax_26, c_9), 0xffffffff, c_10)
10035cc0                              break
10035cc0                          
10035cc5                          if (eax_28 != 0)
10035e46                              char (* var_454_11)[0x408] = &var_430
10035e4d                              j_sub_10039200(arg1, "invalid name %s\n")
10035e61                              return 0
10035e61                          
10035cd3                          int32_t* eax_30 = j_sub_10035a20(arg1)
10035cdd                          eax_11[6] = eax_30
10035cdd                          
10035ce0                          if (eax_30 != 0)
10035ce0                              goto label_10035ce8
10035ce0                          
10035dbc                          var_454_10 = var_440
10035c74                      else if (j_sub_10035820(arg1, eax_11) == 0)
10035dd0                          var_454_10 = var_440
10035c89                      else
10035ce8                          label_10035ce8:
10035ce8                          int32_t eax_31
10035ce8                          
10035ce8                          if (edi_3 != 0)
10035cf7                              eax_31 = j_sub_1003d650(arg1, U"}{")
10035cf7                          
10035d01                          if (edi_3 != 0 && eax_31 == 0)
10035dc6                              var_454_10 = var_440
10035d01                          else
10035d1e                              if (j_sub_1003dae0(arg1, &var_430) != 0)
10035d24                                  void* esi_7 = &data_1005ab54
10035d29                                  char (* eax_34)[0x408] = &var_430
10035d2d                                  int32_t eax_36
10035d2d                                  
10035d2d                                  while (true)
10035d2d                                      edx_1 = *eax_34
10035d31                                      char temp20_1 = *esi_7
10035d31                                      bool c_11 = edx_1 u< temp20_1
10035d31                                      
10035d33                                      if (edx_1 == temp20_1)
10035d37                                          if (edx_1 == 0)
10035d4d                                              eax_36 = 0
10035d4f                                              break
10035d4f                                          
10035d39                                          edx_1 = (*eax_34)[1]
10035d3e                                          char temp23_1 = *(esi_7 + 1)
10035d3e                                          c_11 = edx_1 u< temp23_1
10035d3e                                          
10035d41                                          if (edx_1 == temp23_1)
10035d43                                              eax_34 = &(*eax_34)[2]
10035d46                                              esi_7 += 2
10035d46                                              
10035d4b                                              if (edx_1 != 0)
10035d4b                                                  continue
10035d4b                                              
10035d4d                                              eax_36 = 0
10035d4f                                              break
10035d4f                                      
10035d51                                      bool c_12 = unimplemented  {sbb eax, eax}
10035d53                                      eax_36 = sbb.d(sbb.d(eax_34, eax_34, c_11), 
10035d53                                          0xffffffff, c_12)
10035d53                                      break
10035d53                                  
10035d58                                  if (eax_36 != 0)
10035d58                                      continue
10035d58                                  
10035dda                                  if (var_438 != 0)
10035e3a                                      return var_440
10035e3a                                  
10035de9                                  j_sub_10039270(arg1, "switch without default\n")
10035df0                                  int32_t* eax_43 = j_sub_10039000(0x20)
10035dfc                                  *eax_43 = var_28
10035e04                                  eax_43[1] = 0xf423f
10035e0b                                  eax_43[3] = 0
10035e0e                                  eax_43[7] = 0
10035e11                                  eax_43[6] = 0
10035e11                                  
10035e14                                  if (var_43c == 0)
10035e28                                      return eax_43
10035e28                                  
10035e18                                  var_43c[7] = eax_43
10035e27                                  return var_440
10035e27                              
10035dd0                              var_454_10 = var_440
10035dd0          
10035e63          j_sub_10035960(var_454_10)
10035e68          break
10035e68  
10035e77  return 0

10035e78                                                                          90 90 90 90 90 90 90 90                          ........
10035e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10035f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10035fa0    int32_t* sub_10035fa0(char* arg1)

10035fb5  int32_t var_574 = 0x90
10035fba  void* s
10035fba  __builtin_memset(&s, c: 0, n: 0x98)
10035fcc  char var_4c0[0x90]
10035fcc  StrCopyFixed(&var_4c0, arg1, var_574)
10035fcc  
10035fe8  if (j_sub_10041f60(&var_4c0, &s) == 0)
10035ff9      data_10063fe8(3, "couldn't find %s\n", &var_4c0)
1003600e      return 0
1003600e  
1003601e  void* var_554
1003601e  char var_550[0x90]
1003601e  char* eax_4 = j_sub_1003de60(&var_550, s, var_554)
1003601e  
1003602c  if (eax_4 == 0)
1003603d      data_10063fe8(3, "counldn't load %s\n", &var_4c0)
10036052      return 0
10036052  
1003605d  int32_t* result = j_sub_10039000(0x404)
10036066  char var_430[0x430]
10036066  char (* var_578_4)[0x430] = &var_430
10036068  int32_t* result_2 = result
1003606c  *result = 0
1003606c  
10036078  if (j_sub_1003d580(eax_4, var_578_4) != 0)
1003607e      while (true)
1003607e          char* esi_1 = "weight"
10036083          char (* eax_8)[0x430] = &var_430
1003608a          int32_t eax_10
1003608a          
1003608a          while (true)
1003608a              char edx_1 = *eax_8
1003608e              char temp0_1 = *esi_1
1003608e              bool c_1 = edx_1 u< temp0_1
1003608e              
10036090              if (edx_1 == temp0_1)
10036094                  if (edx_1 == 0)
100360aa                      eax_10 = 0
100360ac                      break
100360ac                  
10036096                  edx_1 = (*eax_8)[1]
1003609b                  char temp3_1 = esi_1[1]
1003609b                  c_1 = edx_1 u< temp3_1
1003609b                  
1003609e                  if (edx_1 == temp3_1)
100360a0                      eax_8 = &(*eax_8)[2]
100360a3                      esi_1 = &esi_1[2]
100360a3                      
100360a8                      if (edx_1 != 0)
100360a8                          continue
100360a8                      
100360aa                      eax_10 = 0
100360ac                      break
100360ac              
100360ae              bool c_2 = unimplemented  {sbb eax, eax}
100360b0              eax_10 = sbb.d(sbb.d(eax_8, eax_8, c_1), 0xffffffff, c_2)
100360b0              break
100360b0          
100360b5          int32_t* result_1
100360b5          
100360b5          if (eax_10 != 0)
100363ea              char (* var_574_22)[0x430] = &var_430
100363f1              j_sub_10039200(eax_4, "invalid name %s\n")
100363f6              result_1 = result
100360b5          else
100360c1              if (*result s>= 0x80)
10036301                  j_sub_10039270(eax_4, "too many fuzzy weights\n")
10036309                  break
10036309              
100360dd              if (j_sub_1003d740(eax_4, 1, 0, &var_430) == 0)
1003630c                  j_sub_100359b0(result)
10036312                  j_sub_1003e000(eax_4)
10036326                  return 0
10036326              
100360eb              j_sub_1003fcb0(&var_430)
100360f0              char (* edi)[0x430] = &var_430
100360f7              int32_t i = 0xffffffff
100360f7              
100360fc              while (i != 0)
100360fc                  bool cond:0_1 = 0 != *edi
100360fc                  edi = &(*edi)[1]
100360fc                  i -= 1
100360fc                  
100360fc                  if (not(cond:0_1))
100360fc                      break
100360fc              
1003610a              char (* edi_1)[0x430] = &var_430
10036113              result_2[*result_2 * 2 + 1] = j_sub_10038f90(not.d(i))
10036117              int32_t i_1 = 0xffffffff
10036117              
1003611e              while (i_1 != 0)
1003611e                  bool cond:1_1 = 0 != *edi_1
1003611e                  edi_1 = &(*edi_1)[1]
1003611e                  i_1 -= 1
1003611e                  
1003611e                  if (not(cond:1_1))
1003611e                      break
1003611e              
10036120              int32_t ecx_4 = not.d(i_1)
10036137              int32_t esi_4
10036137              int32_t edi_5
10036137              edi_5, esi_4 = __builtin_memcpy(dest: result_2[*result_2 * 2 + 1], 
10036137                  src: edi_1 - ecx_4, n: ecx_4 u>> 2 << 2)
1003613e              __builtin_memcpy(dest: edi_5, src: esi_4, n: ecx_4 & 3)
1003613e              
10036153              if (j_sub_1003dae0(eax_4, &var_430) == 0)
1003632c                  j_sub_100359b0(result_2)
10036332                  j_sub_1003e000(eax_4)
10036346                  return 0
10036346              
10036159              int32_t var_55c_2 = 0
1003615d              void* esi_5 = &data_1005ab58
10036162              char (* eax_15)[0x430] = &var_430
10036169              int32_t eax_17
10036169              char edx_3
10036169              
10036169              while (true)
10036169                  edx_3 = *eax_15
1003616d                  char temp4_1 = *esi_5
1003616d                  bool c_3 = edx_3 u< temp4_1
1003616d                  
1003616f                  if (edx_3 == temp4_1)
10036173                      if (edx_3 == 0)
10036189                          eax_17 = 0
1003618b                          break
1003618b                      
10036175                      edx_3 = (*eax_15)[1]
1003617a                      char temp7_1 = *(esi_5 + 1)
1003617a                      c_3 = edx_3 u< temp7_1
1003617a                      
1003617d                      if (edx_3 == temp7_1)
1003617f                          eax_15 = &(*eax_15)[2]
10036182                          esi_5 += 2
10036182                          
10036187                          if (edx_3 != 0)
10036187                              continue
10036187                          
10036189                          eax_17 = 0
1003618b                          break
1003618b                  
1003618d                  bool c_4 = unimplemented  {sbb eax, eax}
1003618f                  eax_17 = sbb.d(sbb.d(eax_15, eax_15, c_3), 0xffffffff, c_4)
1003618f                  break
1003618f              
10036194              if (eax_17 == 0)
1003619d                  var_55c_2 = 1
1003619d                  
100361b1                  if (j_sub_1003dae0(eax_4, &var_430) == 0)
1003634c                      j_sub_100359b0(result_2)
10036352                      j_sub_1003e000(eax_4)
10036366                      return 0
10036366              
100361b7              char* esi_6 = "switch"
100361bc              char (* eax_19)[0x430] = &var_430
100361c3              int32_t eax_21
100361c3              
100361c3              while (true)
100361c3                  edx_3 = *eax_19
100361c7                  char temp8_1 = *esi_6
100361c7                  bool c_5 = edx_3 u< temp8_1
100361c7                  
100361c9                  if (edx_3 == temp8_1)
100361cd                      if (edx_3 == 0)
100361e3                          eax_21 = 0
100361e5                          break
100361e5                      
100361cf                      edx_3 = (*eax_19)[1]
100361d4                      char temp11_1 = esi_6[1]
100361d4                      c_5 = edx_3 u< temp11_1
100361d4                      
100361d7                      if (edx_3 == temp11_1)
100361d9                          eax_19 = &(*eax_19)[2]
100361dc                          esi_6 = &esi_6[2]
100361dc                          
100361e1                          if (edx_3 != 0)
100361e1                              continue
100361e1                          
100361e3                          eax_21 = 0
100361e5                          break
100361e5                  
100361e7                  bool c_6 = unimplemented  {sbb eax, eax}
100361e9                  eax_21 = sbb.d(sbb.d(eax_19, eax_19, c_5), 0xffffffff, c_6)
100361e9                  break
100361e9              
100361ee              int32_t* result_3
100361ee              
100361ee              if (eax_21 == 0)
100361f1                  int32_t* eax_22 = j_sub_10035a20(eax_4)
100361f1                  
100361fb                  if (eax_22 != 0)
10036201                      result_3 = result_2
10036207                      result_3[*result_3 * 2 + 2] = eax_22
100361fb                      goto label_10036282
100361fb                  
1003636c                  j_sub_100359b0(result_2)
10036372                  j_sub_1003e000(eax_4)
10036386                  return 0
10036386              
1003620d              char* esi_7 = "return"
10036212              void* eax_23 = &var_430
10036219              int32_t eax_25
10036219              
10036219              while (true)
10036219                  edx_3 = *eax_23
1003621d                  char temp12_1 = *esi_7
1003621d                  bool c_7 = edx_3 u< temp12_1
1003621d                  
1003621f                  if (edx_3 == temp12_1)
10036223                      if (edx_3 == 0)
10036239                          eax_25 = 0
1003623b                          break
1003623b                      
10036225                      edx_3 = *(eax_23 + 1)
1003622a                      char temp15_1 = esi_7[1]
1003622a                      c_7 = edx_3 u< temp15_1
1003622a                      
1003622d                      if (edx_3 == temp15_1)
1003622f                          eax_23 += 2
10036232                          esi_7 = &esi_7[2]
10036232                          
10036237                          if (edx_3 != 0)
10036237                              continue
10036237                          
10036239                          eax_25 = 0
1003623b                          break
1003623b                  
1003623d                  bool c_8 = unimplemented  {sbb eax, eax}
1003623f                  eax_25 = sbb.d(sbb.d(eax_23, eax_23, c_7), 0xffffffff, c_8)
1003623f                  break
1003623f              
10036244              if (eax_25 != 0)
100363d0                  char (* var_574_21)[0x430] = &var_430
100363d7                  j_sub_10039200(eax_4, "invalid name %s\n")
100363e0                  result_1 = result_2
10036244              else
1003624c                  int32_t* eax_26 = j_sub_10039000(0x20)
10036255                  *eax_26 = 0
10036257                  eax_26[1] = 0xf423f
1003625e                  eax_26[7] = 0
10036261                  eax_26[6] = 0
10036261                  
1003626e                  if (j_sub_10035820(eax_4, eax_26) == 0)
10036388                      j_sub_100390b0(eax_26)
10036392                      j_sub_100359b0(result_2)
10036398                      j_sub_1003e000(eax_4)
100363ac                      return 0
100363ac                  
10036274                  result_3 = result_2
1003627a                  result_3[*result_3 * 2 + 2] = eax_26
10036282                  label_10036282:
10036282                  
10036282                  if (var_55c_2 != 0 && j_sub_1003d650(eax_4, U"}{") == 0)
100363ae                      j_sub_100359b0(result_3)
100363b4                      j_sub_1003e000(eax_4)
100363c8                      return 0
100363c8                  
100362a4                  char* var_574_11 = &var_430
100362a6                  *result_3 += 1
100362ad                  result = result_2
100362ad                  
100362b6                  if (j_sub_1003d580(eax_4, var_574_11) == 0)
100362b6                      break
100362b6                  
100362b6                  continue
100362b6          
100363f7          j_sub_100359b0(result_1)
100363fd          j_sub_1003e000(eax_4)
10036411          return 0
10036411  
100362bd  j_sub_1003e000(eax_4)
100362bd  
100362cb  if (var_554 != 0)
100362e5      data_10063fe8(1, "loaded %s\%s\n", &var_550, &var_4c0)
100362fa      return result
100362fa  
10036421  data_10063fe8(1, "loaded %s\n", &var_4c0)
10036436  return result

10036437                                                                       90 90 90 90 90 90 90 90 90                         .........
10036440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100364a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100364c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100364e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036570    int32_t sub_10036570(int32_t* arg1, void* arg2)

1003657a  void* var_c_4
1003657a  int32_t* esi
1003657a  
1003657a  if (*(arg2 + 8) != 1)
100365f8      esi = arg1
100365f8      
1003660c      if (sub_10045898(esi, " return ") s< 0)
10036612          return 0
10036612      
10036618      int32_t result = j_sub_10040e80(esi, *(arg2 + 0xc))
10036618      
10036622      if (result == 0)
10036626          return result
10036626      
10036627      var_c_4 = &data_1005e544
1003660c      goto label_1003662d
1003660c  
1003657c  esi = arg1
1003657c  
10036590  if (sub_10045898(esi, " return balance(") s>= 0 && j_sub_10040e80(esi, *(arg2 + 0xc)) != 0
10036590          && sub_10045898(esi, &data_1005d330) s>= 0
10036590          && j_sub_10040e80(esi, *(arg2 + 0x10)) != 0
10036590          && sub_10045898(esi, &data_1005d330) s>= 0
10036590          && j_sub_10040e80(esi, *(arg2 + 0x14)) != 0)
100365f1      var_c_4 = &data_1005e554
1003662d      label_1003662d:
1003662d      
10036637      if (sub_10045898(esi, var_c_4) s>= 0)
10036645          return 1
10036645  
1003663d  return 0

10036646                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10036660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036690    int32_t sub_10036690(int32_t* arg1, int32_t* arg2, int32_t arg3)

100366a7  if (j_sub_10040e30(arg1, arg3) == 0)
100366ae      return 0
100366ae  
100366af  int32_t* edi_1 = arg2
100366b5  int32_t var_10_1 = *edi_1
100366b5  
100366c6  if (sub_10045898(arg1, "switch(%d)\n") s< 0)
100366cd      return 0
100366cd  
100366d0  int32_t eax_5 = j_sub_10040e30(arg1, arg3)
100366d0  
100366da  if (eax_5 == 0)
100366df      return eax_5
100366df  
100366f0  if (sub_10045898(arg1, &data_1005d51c) s< 0)
100366f7      return 0
100366f7  
10036705  if (j_sub_10040e30(arg1, arg3 + 1) == 0)
1003680a      return 0
1003680a  
10036710  while (true)
10036710      if (edi_1[7] == 0)
1003673a          if (sub_10045898(arg1, "default:") s< 0)
100366ae              return 0
10036710      else
10036715          int32_t var_10_4 = edi_1[1]
10036715          
10036726          if (sub_10045898(arg1, "case %d:") s< 0)
100366ae              return 0
100366ae      
10036745      if (edi_1[6] == 0)
100367e6          if (j_sub_10036570(arg1, edi_1) == 0)
100366ae              return 0
10036745      else
1003675b          if (sub_10045898(arg1, &data_1005b02c) s< 0)
100366ae              return 0
100366ae          
1003676d          if (j_sub_10040e30(arg1, arg3 + 1) == 0)
100366ae              return 0
100366ae          
10036783          if (sub_10045898(arg1, &data_1005d51c) s< 0)
100366ae              return 0
100366ae          
1003679c          if (j_sub_10036690(arg1, edi_1[6], arg3 + 2) == 0)
100366ae              return 0
100366ae          
100367ae          if (j_sub_10040e30(arg1, arg3 + 1) == 0)
100366ae              return 0
100366ae          
100367b9          void* var_10_8
100367b9          
100367b9          if (edi_1[7] == 0)
100367d3              var_10_8 = "} //end default\n"
100367b9          else
100367bb              var_10_8 = "} //end case\n"
100367bb          
100367cb          if (sub_10045898(arg1, var_10_8) s< 0)
100366ae              return 0
100366ae      
100367ec      edi_1 = edi_1[7]
100367ec      
100367f1      if (edi_1 == 0)
1003680e          int32_t eax_24 = j_sub_10040e30(arg1, arg3)
1003680e          
10036818          if (eax_24 == 0)
1003681d              return eax_24
1003681d          
10036830          int32_t ecx_2
10036830          ecx_2.b = sub_10045898(arg1, "} //end switch\n") s>= 0
10036838          return ecx_2
10036838      
100367ff      if (j_sub_10040e30(arg1, arg3 + 1) == 0)
1003680a          return 0

10036839                                                                             90 90 90 90 90 90 90                           .......
10036840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100368a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100368b0    int32_t sub_100368b0(PSTR arg1, int32_t* arg2)

100368be  int32_t* eax = sub_10044936(arg1, "wb")
100368be  
100368ca  if (eax == 0)
100368d2      return 0
100368d2  
100368d7  int32_t i = 0
100368d7  
100368dd  if (*arg2 s> 0)
100368e3      void* edi_1 = &arg2[2]
100368e3      
10036963      do
100368e9          int32_t var_14_1 = *(edi_1 - 4)
100368e9          
100368fa          if (sub_10045898(eax, "\nweight "%s"\n") s< 0)
100368d2              return 0
100368d2          
1003690c          if (sub_10045898(eax, &data_1005d51c) s< 0)
100368d2              return 0
100368d2          
1003690e          int32_t* eax_4 = *edi_1
1003690e          
10036915          if (*eax_4 s<= 0)
10036932              if (j_sub_10040e30(eax, 1) == 0)
100368d2                  return 0
100368d2              
10036942              if (j_sub_10036570(eax, *edi_1) == 0)
100368d2                  return 0
10036915          else if (j_sub_10036690(eax, eax_4, 1) == 0)
100368d2              return 0
100368d2          
10036954          if (sub_10045898(eax, "} //end itemweight\n") s< 0)
100368d2              return 0
100368d2          
1003695d          i += 1
1003695e          edi_1 += 8
10036963      while (i s< *arg2)
10036963  
10036966  sub_10044888(eax)
10036977  return 1

10036978                                                                          90 90 90 90 90 90 90 90                          ........
10036980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100369a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100369c0    int32_t sub_100369c0(int32_t* arg1, char* arg2)

100369c4  int32_t ebx
100369c4  int32_t var_4 = ebx
100369c6  int32_t result = 0
100369c8  int32_t eax = *arg1
100369c8  
100369ce  if (eax s> 0)
100369d0      void* edi_1 = &arg1[1]
100369d0      
100369d3      while (true)
100369d3          char* esi_1 = arg2
100369d7          char* ecx = *edi_1
100369d9          int32_t ecx_2
100369d9          
100369d9          while (true)
100369d9              ebx.b = *ecx
100369dd              char temp0_1 = *esi_1
100369dd              bool c_1 = ebx.b u< temp0_1
100369dd              
100369df              if (ebx.b == temp0_1)
100369e3                  if (ebx.b == 0)
100369f9                      ecx_2 = 0
100369fb                      break
100369fb                  
100369e5                  ebx.b = ecx[1]
100369ea                  char temp3_1 = esi_1[1]
100369ea                  c_1 = ebx.b u< temp3_1
100369ea                  
100369ed                  if (ebx.b == temp3_1)
100369ef                      ecx = &ecx[2]
100369f2                      esi_1 = &esi_1[2]
100369f2                      
100369f7                      if (ebx.b != 0)
100369f7                          continue
100369f7                      
100369f9                      ecx_2 = 0
100369fb                      break
100369fb              
100369fd              bool c_2 = unimplemented  {sbb ecx, ecx}
100369ff              ecx_2 = sbb.d(sbb.d(ecx, ecx, c_1), 0xffffffff, c_2)
100369ff              break
100369ff          
10036a04          if (ecx_2 == 0)
10036a1c              return result
10036a1c          
10036a06          result += 1
10036a07          edi_1 += 8
10036a07          
10036a0c          if (result s>= eax)
10036a0c              break
10036a0c  
10036a15  return 0xffffffff

10036a1d                                                                                         90 90 90                               ...
10036a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10036a40    long double sub_10036a40(float arg1, int32_t arg2)

10036a41  int32_t* esi = arg2
10036a46  float edi = arg1
10036a46  
10036a4c  while (true)
10036a4c      int32_t ecx_1 = *(edi i+ (*esi << 2))
10036a4c      
10036a54      if (ecx_1 s>= esi[1])
10036a61          int32_t* eax_4 = esi[7]
10036a61          
10036a66          if (eax_4 != 0)
10036a6b              if (ecx_1 s< eax_4[1])
10036a6b                  break
10036a6b              
10036a6d              esi = eax_4
10036a6f              continue
10036a54      else
10036a56          int32_t* eax_3 = esi[6]
10036a56          
10036a5b          if (eax_3 != 0)
10036a5d              esi = eax_3
10036a5f              continue
10036a5f      
10036add      return fconvert.t(esi[3])
10036add  
10036a71  int32_t eax_5 = esi[6]
10036a71  
10036a76  if (eax_5 == 0)
10036a8b      arg1 = esi[3]
10036a76  else
10036a7f      arg1 = fconvert.s(j_sub_10036a40(edi, eax_5))
10036a7f  
10036a8f  void* ecx_3 = esi[7]
10036a92  int32_t eax_6 = *(ecx_3 + 0x18)
10036a97  long double x87_r7_2
10036a97  
10036a97  if (eax_6 == 0)
10036aa5      x87_r7_2 = fconvert.t(*(ecx_3 + 0xc))
10036a97  else
10036a9b      x87_r7_2 = j_sub_10036a40(edi, eax_6)
10036a9b  
10036aaa  int32_t ecx_4 = esi[1]
10036ac3  long double x87_r6 =
10036ac3      float.t(divs.dp.d(sx.q(*(edi i+ (*esi << 2)) - ecx_4), *(esi[7] + 4) - ecx_4))
10036ad7  return x87_r7_2 * (fconvert.t(1f) - x87_r6) + x87_r6 * fconvert.t(arg1)

10036ade                                                                                            90 90                                ..
10036ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036b10    int32_t* sub_10036b10(int32_t arg1, int32_t arg2)

10036b11  int32_t ebx = arg1
10036b16  int32_t* esi = arg2
10036b16  
10036b1c  while (true)
10036b1c      int32_t ecx_1 = *(ebx + (*esi << 2))
10036b1c      
10036b24      if (ecx_1 s>= esi[1])
10036b31          int32_t* eax_4 = esi[7]
10036b31          
10036b36          if (eax_4 == 0)
10036c13              esi[3]
10036c18              return eax_4
10036c18          
10036b3f          if (ecx_1 s< eax_4[1])
10036b3f              break
10036b3f          
10036b41          esi = eax_4
10036b24      else
10036b26          int32_t* eax_3 = esi[6]
10036b26          
10036b2b          if (eax_3 == 0)
10036b4a              int32_t eax_6 = sub_10045187() & 0x7fff
10036b60              fconvert.t(esi[5]) - fconvert.t(esi[4])
10036b65              esi[4]
10036b6a              return eax_6
10036b6a          
10036b2d          esi = eax_3
10036b2d  
10036b6b  int32_t eax_7 = esi[6]
10036b6b  
10036b70  if (eax_7 == 0)
10036b7e      sub_10045187()
10036b99      fconvert.t(esi[5]) - fconvert.t(esi[4])
10036b9e      esi[4]
10036b70  else
10036b74      j_sub_10036b10(ebx, eax_7)
10036b74  
10036ba4  arg1 = fconvert.s(unimplemented  {fstp dword [esp+0xc], st0})
10036ba4  unimplemented  {fstp dword [esp+0xc], st0}
10036ba8  int32_t eax_10 = *(esi[7] + 0x18)
10036ba8  
10036bad  if (eax_10 == 0)
10036bc9      arg2 = sub_10045187() & 0x7fff
10036bcd      unimplemented  {fild st0, dword [esp+0x14]}
10036bd1      unimplemented  {fmul st0, dword [&data_10058218]}
10036bd7      unimplemented  {fld st0, dword [edi+0x14]}
10036bda      unimplemented  {fsub st0, dword [edi+0x10]}
10036bdd      unimplemented  {fmulp st1, st0}
10036bdd      unimplemented  {fmulp st1, st0}
10036bdf      unimplemented  {fadd dword [edi+0x10]}
10036bad  else
10036bb1      j_sub_10036a40(ebx, eax_10)
10036bb1      unimplemented  {call j_sub_10036a40}
10036bb1  
10036be5  int32_t ecx_3 = esi[1]
10036bf6  int32_t temp0 = divs.dp.d(sx.q(*(ebx + (*esi << 2)) - ecx_3), *(esi[7] + 4) - ecx_3)
10036bfa  arg2 = temp0
10036bfe  unimplemented  {fild st0, dword [esp+0x8]}
10036c02  unimplemented  {fld st0, dword [&data_100580c4]}
10036c08  unimplemented  {fsub st0, st1}
10036c0a  unimplemented  {fmulp st2, st0}
10036c0a  unimplemented  {fmulp st2, st0}
10036c0c  unimplemented  {fmul st0, dword [esp+0x4]}
10036c10  unimplemented  {faddp st1, st0}
10036c10  unimplemented  {faddp st1, st0}
10036c12  return temp0

10036c19                                                                             90 90 90 90 90 90 90                           .......
10036c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036c70    int80_t sub_10036c70(float arg1, void* arg2)

10036c85  return j_sub_10036a40(arg1, *(arg2 + 4))

10036c86                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10036ca0    int32_t* sub_10036ca0(int32_t arg1, void* arg2)

10036cb5  return j_sub_10036b10(arg1, *(arg2 + 4))

10036cb6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10036cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036cd0    int32_t sub_10036cd0(int32_t arg1)

10036cd1  int32_t i = arg1
10036da4  int32_t result
10036da4  
10036da4  do
10036cd5      result = *(i + 0x18)
10036cd5      
10036cda      if (result != 0)
10036cdd          result = j_sub_10036cd0(result)
10036cda      else if (*(i + 8) == 1)
10036d06          long double x87_r7_2 =
10036d06              float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10036d0c          long double temp0_1 = fconvert.t(0.01)
10036d0c          x87_r7_2 - temp0_1
10036d12          int32_t eax_2
10036d12          eax_2.w = (x87_r7_2 < temp0_1 ? 1 : 0) << 8
10036d12              | (is_unordered.t(x87_r7_2, temp0_1) ? 1 : 0) << 0xa
10036d12              | (x87_r7_2 == temp0_1 ? 1 : 0) << 0xe
10036d17          long double x87_r7_7
10036d17          
10036d17          if ((eax_2:1.b & 1) == 0)
10036d5b              long double x87_r7_10 =
10036d5b                  float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10036d5b                  - fconvert.t(0.5)
10036d6b              x87_r7_7 = (x87_r7_10 + x87_r7_10)
10036d6b                  * (fconvert.t(*(i + 0x14)) - fconvert.t(*(i + 0x10))) * fconvert.t(0.5)
10036d17          else
10036d31              long double x87_r7_5 =
10036d31                  float.t(sub_10045187() & 0x7fff) * fconvert.t(3.05185094e-05f)
10036d31                  - fconvert.t(0.5)
10036d3f              x87_r7_7 = (x87_r7_5 + x87_r7_5)
10036d3f                  * (fconvert.t(*(i + 0x14)) - fconvert.t(*(i + 0x10)))
10036d3f          
10036d74          *(i + 0xc) = fconvert.s(x87_r7_7 + fconvert.t(*(i + 0xc)))
10036d77          long double x87_r7_14 = fconvert.t(*(i + 0xc))
10036d7a          long double temp1_1 = fconvert.t(*(i + 0x10))
10036d7a          x87_r7_14 - temp1_1
10036d7d          result.w = (x87_r7_14 < temp1_1 ? 1 : 0) << 8
10036d7d              | (is_unordered.t(x87_r7_14, temp1_1) ? 1 : 0) << 0xa
10036d7d              | (x87_r7_14 == temp1_1 ? 1 : 0) << 0xe
10036d7d          
10036d82          if ((result:1.b & 1) == 0)
10036d8c              long double x87_r7_15 = fconvert.t(*(i + 0xc))
10036d8f              long double temp2_1 = fconvert.t(*(i + 0x14))
10036d8f              x87_r7_15 - temp2_1
10036d92              result.w = (x87_r7_15 < temp2_1 ? 1 : 0) << 8
10036d92                  | (is_unordered.t(x87_r7_15, temp2_1) ? 1 : 0) << 0xa
10036d92                  | (x87_r7_15 == temp2_1 ? 1 : 0) << 0xe
10036d92              
10036d97              if ((result:1.b & 0x41) == 0)
10036d9c                  *(i + 0xc) = *(i + 0x14)
10036d82          else
10036d84              result = *(i + 0x10)
10036d87              *(i + 0xc) = result
10036d87      
10036d9f      i = *(i + 0x1c)
10036da4  while (i != 0)
10036da4  
10036dab  return result

10036dac                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
10036dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036df0    void sub_10036df0(int32_t* arg1)

10036df6  int32_t i = 0
10036df6  
10036dfb  if (*arg1 s> 0)
10036dfe      void* edi_1 = &arg1[2]
10036dfe      
10036e14      do
10036e04          j_sub_10036cd0(*edi_1)
10036e0e          i += 1
10036e0f          edi_1 += 8
10036e14      while (i s< *arg1)

10036e1a                                                                                90 90 90 90 90 90                            ......
10036e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036e30    int32_t sub_10036e30()
// This function is generating excessive incremental updates. Force analysis of this function (this may take a while).

Loading...

10036e8e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10036ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036eb0    int32_t sub_10036eb0(int32_t* arg1, char* arg2, float arg3)

10036eb0  long double x87_r7 = fconvert.t(arg3)
10036eb4  long double temp0 = fconvert.t(0f)
10036eb4  x87_r7 - temp0
10036eba  int16_t eax = (x87_r7 < temp0 ? 1 : 0) << 8
10036eba      | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa | (x87_r7 == temp0 ? 1 : 0) << 0xe
10036eba  
10036ebf  if ((eax:1.b & 1) == 0)
10036ecb      long double x87_r7_1 = fconvert.t(arg3)
10036ecf      long double temp1_1 = fconvert.t(1f)
10036ecf      x87_r7_1 - temp1_1
10036ed5      eax = (x87_r7_1 < temp1_1 ? 1 : 0) << 8
10036ed5          | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
10036ed5          | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe
10036ed5      
10036eda      if ((eax:1.b & 0x41) == 0)
10036edc          arg3 = 1f
10036ebf  else
10036ec1      arg3 = 0f
10036ec1  
10036ee4  int32_t ebx
10036ee4  int32_t var_4 = ebx
10036eec  int32_t ebp = 0
10036eee  int32_t edx = *arg1
10036eee  
10036ef2  if (edx s<= 0)
10036f51      return eax
10036f51  
10036ef4  void* edi_1 = &arg1[1]
10036ef7  int32_t eax_3
10036ef7  
10036ef7  while (true)
10036ef7      char* esi_1 = *edi_1
10036ef9      char* eax_1 = arg2
10036ef9      
10036efd      while (true)
10036efd          ebx.b = *eax_1
10036f01          char temp2_1 = *esi_1
10036f01          bool c_1 = ebx.b u< temp2_1
10036f01          
10036f03          if (ebx.b == temp2_1)
10036f07              if (ebx.b == 0)
10036f1d                  eax_3 = 0
10036f1f                  break
10036f1f              
10036f09              ebx.b = eax_1[1]
10036f0e              char temp5_1 = esi_1[1]
10036f0e              c_1 = ebx.b u< temp5_1
10036f0e              
10036f11              if (ebx.b == temp5_1)
10036f13                  eax_1 = &eax_1[2]
10036f16                  esi_1 = &esi_1[2]
10036f16                  
10036f1b                  if (ebx.b != 0)
10036f1b                      continue
10036f1b                  
10036f1d                  eax_3 = 0
10036f1f                  break
10036f1f          
10036f21          bool c_2 = unimplemented  {sbb eax, eax}
10036f23          eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
10036f23          break
10036f23      
10036f28      if (eax_3 == 0)
10036f45          return j_sub_10036e30(arg1[ebp * 2 + 2], arg3)
10036f45      
10036f2a      ebp += 1
10036f2b      edi_1 += 8
10036f2b      
10036f30      if (ebp s>= edx)
10036f30          break
10036f30  
10036f36  return eax_3

10036f52                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10036f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10036f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10036f90    int32_t sub_10036f90(void* arg1, void* arg2)

10036f92  void* esi = arg1
10036f97  void* const edi = arg2
10036f97  
10036fa0  while (true)
10036fa0      int32_t result = *(esi + 0x18)
10036fa0      
10036fa5      if (result != 0)
10036fa7          void* eax_1 = *(edi + 0x18)
10036fa7          
10036fac          if (eax_1 == 0)
10036fec              return data_10063fe8(3, "can't merge weight configs\n")
10036fec          
10036fb0          result = j_sub_10036f90(eax_1, eax_1)
10036fa5      else if (*(esi + 8) == 1)
10036fc2          if (*(edi + 8) != 1)
10036fec              return data_10063fe8(3, "can't merge weight configs\n")
10036fec          
10036fd0          *(esi + 0xc) = fconvert.s((fconvert.t(*(edi + 0xc)) + fconvert.t(*(esi + 0xc)))
10036fd0              * fconvert.t(0.5f))
10036fd0      
10036fd3      esi = *(esi + 0x1c)
10036fd3      
10036fd8      if (esi == 0)
10036ff8          return result
10036ff8      
10036fdf      if (*(edi + 0x1c) != 0)
10036fec          return data_10063fe8(3, "can't merge weight configs\n")
10036fec      
10036fe1      edi = nullptr

10036ff9                                                                             90 90 90 90 90 90 90                           .......
10037000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10037020    int32_t sub_10037020(int32_t* arg1, int32_t* arg2)

1003702a  int32_t result = *arg1
1003702a  
10037030  if (result != *arg2)
10037045      return data_10063fe8(3, "can't merge weight configs\n")
10037045  
10037046  int32_t edi = 0
10037046  
1003704a  if (result s> 0)
1003704d      int32_t* esi_1 = &arg1[2]
1003704d      
10037069      do
10037059          j_sub_10036f90(*esi_1, *(esi_1 + arg2 - arg1))
1003705e          result = *arg1
10037063          edi += 1
10037064          esi_1 = &esi_1[2]
10037069      while (edi s< result)
10037069  
1003706f  return result

10037070                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
10037080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037090    int32_t sub_10037090(int32_t arg1, int32_t arg2)

100370aa  return data_10063fe4(arg1, &data_1005e618, arg2, 0)

100370ab                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

100370c0    int32_t sub_100370c0(int32_t arg1, int32_t arg2)

100370da  return data_10063fe4(arg1, "say_team", arg2, 0)

100370db                                                                                   90 90 90 90 90                             .....
100370e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100370f0    int32_t sub_100370f0(int32_t arg1, int32_t arg2)

1003710a  return data_10063fe4(arg1, &data_1005e628, arg2, 0)

1003710b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

10037120    int32_t sub_10037120(int32_t arg1, int32_t arg2)

1003713a  return data_10063fe4(arg1, "drop", arg2, 0)

1003713b                                                                                   90 90 90 90 90                             .....
10037140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037150    int32_t sub_10037150(int32_t arg1, int32_t arg2)

1003716a  return data_10063fe4(arg1, "invuse", arg2, 0)

1003716b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

10037180    int32_t sub_10037180(int32_t arg1, int32_t arg2)

1003719a  return data_10063fe4(arg1, "invdrop", arg2, 0)

1003719b                                                                                   90 90 90 90 90                             .....
100371a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100371b0    int32_t sub_100371b0(int32_t arg1, int32_t arg2)

100371be  int32_t var_84 = arg2
100371c5  void var_80
100371c5  sub_10044c56(&var_80, &data_1005d37c)
100371ea  return data_10063fe4(arg1, "wave", &var_80, 0)

100371eb                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

10037200    int32_t sub_10037200(int32_t arg1, int32_t arg2)

10037203  int32_t eax = arg2
1003720c  int32_t esi = 1
10037211  int32_t* edx = &arg2
10037215  int32_t var_24
10037215  int32_t* ecx = &var_24
10037215  
10037219  while (true)
10037219      int32_t eax_1 = edx[1]
1003721c      edx = &edx[1]
10037221      *ecx = eax_1
10037221      
10037223      if (eax_1 != 0)
10037225          esi += 1
10037226          ecx = &ecx[1]
10037226          
1003722c          if (esi s< 0xa)
1003722c              continue
10037223      else if (esi s< 0xa)
10037233          break
10037233      
1003723c      data_10063fe8(3, "EA_Command: too many arguments")
10037242      break
10037242  
1003728b  int32_t var_20
1003728b  int32_t var_1c
1003728b  int32_t var_18
1003728b  int32_t var_14
1003728b  int32_t var_10
1003728b  int32_t var_c
1003728b  int32_t var_8
1003728b  int32_t var_4
1003728b  return data_10063fe4(arg1, eax, var_24, var_20, var_1c, var_18, var_14, var_10, var_c, 
1003728b      var_8, var_4, 0)

1003728c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
100372a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100372c0    void* sub_100372c0(int32_t arg1)

100372cd  void* result = data_10064074 + arg1 * 0x24
100372d0  *(result + 0x20) |= 1
100372d4  return result

100372d5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
100372e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100372f0    void* sub_100372f0(int32_t arg1)

100372fd  void* result = data_10064074 + arg1 * 0x24
10037300  *(result + 0x20) |= 2
10037304  return result

10037305                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10037320    void* sub_10037320(int32_t arg1)

1003732d  void* result = data_10064074 + arg1 * 0x24
10037330  *(result + 0x20) |= 4
10037334  return result

10037335                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10037340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037350    int32_t sub_10037350(int32_t arg1)

1003735d  void* ecx_1 = data_10064074 + arg1 * 0x24
10037360  int32_t result = *(ecx_1 + 0x20)
10037360  
10037365  if ((result.b & 0x80) != 0)
10037367      result.b &= 0xf7
10037369      *(ecx_1 + 0x20) = result
1003736c      return result
1003736c  
1003736d  result.b |= 8
1003736f  *(ecx_1 + 0x20) = result
10037372  return result

10037373                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10037380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037390    int32_t sub_10037390(int32_t arg1)

1003739d  void* ecx_1 = data_10064074 + arg1 * 0x24
100373a0  int32_t result = *(ecx_1 + 0x20)
100373a0  
100373a5  if ((result.b & 0x80) != 0)
100373a7      result:1.b &= 0xfd
100373aa      *(ecx_1 + 0x20) = result
100373ad      return result
100373ad  
100373ae  result:1.b |= 2
100373b1  *(ecx_1 + 0x20) = result
100373b4  return result

100373b5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
100373c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100373d0    void* sub_100373d0(int32_t arg1)

100373dd  void* result = data_10064074 + arg1 * 0x24
100373e0  *(result + 0x20) |= 0x10
100373e4  return result

100373e5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10037400    void* sub_10037400(int32_t arg1)

1003740d  void* result = data_10064074 + arg1 * 0x24
10037410  *(result + 0x20) |= 8
10037414  return result

10037415                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10037420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037430    void* sub_10037430(int32_t arg1)

1003743d  void* result = data_10064074 + arg1 * 0x24
10037440  *(result + 0x20) |= 0x10
10037444  return result

10037445                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10037460    void* sub_10037460(int32_t arg1)

1003746d  void* result = data_10064074 + arg1 * 0x24
10037470  *(result + 0x20) |= 0x20
10037474  return result

10037475                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10037480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037490    void* sub_10037490(int32_t arg1)

1003749d  void* result = data_10064074 + arg1 * 0x24
100374a0  *(result + 0x20) |= 0x40
100374a4  return result

100374a5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

100374c0    void* sub_100374c0(int32_t arg1)

100374cd  void* result = data_10064074 + arg1 * 0x24
100374d3  int32_t ecx_1
100374d3  ecx_1.b = (*(result + 0x20)).b | 0x80
100374d6  *(result + 0x20) = ecx_1
100374d9  return result

100374da                                                                                90 90 90 90 90 90                            ......
100374e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100374f0    void* sub_100374f0(int32_t arg1)

100374fd  void* result = data_10064074 + arg1 * 0x24
10037503  int32_t ecx_1
10037503  ecx_1:1.b = (*(result + 0x20)):1.b | 1
10037506  *(result + 0x20) = ecx_1
10037509  return result

1003750a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

10037520    int32_t sub_10037520(int32_t arg1, int32_t* arg2, float arg3)

1003752a  long double x87_r7 = fconvert.t(arg3)
10037531  long double temp0 = fconvert.t(565f)
10037531  x87_r7 - temp0
10037537  void* ecx_1 = data_10064074 + arg1 * 0x24
10037540  *(ecx_1 + 4) = *arg2
10037546  *(ecx_1 + 8) = arg2[1]
1003754c  *(ecx_1 + 0xc) = arg2[2]
1003754f  int32_t result
1003754f  result.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
1003754f      | (x87_r7 == temp0 ? 1 : 0) << 0xe
1003754f  
10037554  if ((result:1.b & 0x41) == 0)
10037556      *(ecx_1 + 0x10) = 0x440d4000
1003755d      return result
1003755d  
1003755e  long double x87_r7_1 = fconvert.t(arg3)
10037562  long double temp1 = fconvert.t(-565f)
10037562  x87_r7_1 - temp1
10037568  result.w = (x87_r7_1 < temp1 ? 1 : 0) << 8
10037568      | (is_unordered.t(x87_r7_1, temp1) ? 1 : 0) << 0xa
10037568      | (x87_r7_1 == temp1 ? 1 : 0) << 0xe
10037568  
1003756d  if ((result:1.b & 1) == 0)
1003757b      *(ecx_1 + 0x10) = arg3
1003757e      return result
1003757e  
1003756f  *(ecx_1 + 0x10) = 0xc40d4000
10037576  return result

1003757f                                                                                               90                                 .
10037580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100375a0    void* sub_100375a0(int32_t arg1, int32_t* arg2)

100375ad  void* result = data_10064074 + arg1 * 0x24
100375b6  *(result + 0x14) = *arg2
100375bc  *(result + 0x18) = arg2[1]
100375c2  *(result + 0x1c) = arg2[2]
100375c5  return result

100375c6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

100375e0    int32_t sub_100375e0(int32_t arg1, int32_t arg2)

100375ee  int32_t* s = data_10064074 + arg1 * 0x24
100375f6  int32_t ecx_1
100375f6  ecx_1.b = s[8].b & 0x7f
100375f9  s[8] = ecx_1
10037600  *s = arg2
10037602  data_10063fe0(arg1, s)
10037610  int32_t edx_2 = s[8] & 8
10037613  __builtin_memset(s, c: 0, n: 0x14)
10037621  arg1 = edx_2
10037625  s[8] = 0
10037625  
10037628  if (edx_2 != 0)
1003762a      s[8] = 0x80
1003762a  
10037632  return 0

10037633                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10037640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10037660    int32_t sub_10037660()

1003766c  int32_t result = j_sub_10039000(data_10064028 * 0x24)
10037674  data_10064074 = result
10037679  return result

1003767a                                                                                90 90 90 90 90 90                            ......
10037680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037690    void* sub_10037690()

1003769c  return j_sub_100390b0(data_10064074)

1003769d                                                                                         90 90 90                               ...
100376a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100376b0    int32_t sub_100376b0(char* arg1, int16_t arg2)

100376b3  void* esi = data_10063f2c
100376ba  char* edi = arg1
100376c0  int32_t result
100376c0  
100376c0  if (esi == 0)
100376ec      label_100376ec:
100376ec      int16_t* eax_2 = j_sub_10039000(0x98)
100376f8      result = 0
100376fd      *eax_2 = arg2
10037700      int32_t i = 0xffffffff
10037700      
10037703      while (i != 0)
10037703          bool cond:0_1 = 0 != *edi
10037703          edi = &edi[1]
10037703          i -= 1
10037703          
10037703          if (not(cond:0_1))
10037703              break
10037703      
10037705      int32_t ecx_2 = not.d(i)
1003770c      int32_t edx_1 = ecx_2
10037715      int32_t esi_2
10037715      int32_t edi_3
10037715      edi_3, esi_2 =
10037715          __builtin_memcpy(dest: &eax_2[1], src: edi - ecx_2, n: ecx_2 u>> 2 << 2)
1003771c      int32_t ecx_6 = __builtin_memcpy(dest: edi_3, src: esi_2, n: edx_1 & 3)
1003771e      void* i_1 = data_10063f2c
10037724      void* const i_2 = nullptr
10037724      
10037728      if (i_1 != 0)
10037745          do
1003772f              result, ecx_6, edx_1 = sub_10045cb0(i_1 + 2, edx_1, ecx_6, &eax_2[1], i_1 + 2)
1003772f              
10037739              if (result s< 0)
1003775e                  *(eax_2 + 0x94) = i_1
1003775e                  
10037764                  if (i_2 != 0)
10037766                      *(i_2 + 0x94) = eax_2
10037770                      return result
10037770                  
10037773                  data_10063f2c = eax_2
1003777b                  return result
1003777b              
1003773b              i_2 = i_1
1003773d              i_1 = *(i_1 + 0x94)
10037745          while (i_1 != 0)
10037745          
10037749          if (i_2 != 0)
1003774b              *(i_2 + 0x94) = eax_2
10037751              *(eax_2 + 0x94) = i_1
1003775b              return result
1003775b      
1003777c      data_10063f2c = eax_2
10037782      *(eax_2 + 0x94) = 0
100376c0  else
100376c7      while (true)
100376c7          int32_t ecx
100376c7          int32_t edx
100376c7          result, ecx, edx = sub_10045cb0(esi + 2, edx, ecx, edi, esi + 2)
100376c7          
100376d1          if (result == 0)
100376d1              break
100376d1          
100376d3          esi = *(esi + 0x94)
100376d3          
100376db          if (esi == 0)
100376db              goto label_100376ec
100376db      
100376e1      if (esi == 0)
100376e1          goto label_100376ec
100376e1  
10037790  return result

10037791                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
100377a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100377c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100377e0    int32_t sub_100377e0(char* arg1, int16_t arg2)

100377e4  void* eax = &data_1005e678
100377e4  
100377ec  while (arg2 != *eax)
100377ee      eax += 8
100377ee      
100377f6      if (eax s>= 0x1005e958)
100377f6          break
100377f6  
100377fe  j_sub_100376b0(arg1, arg2)
1003780b  return 0x100

1003780c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................

10037820    int32_t sub_10037820(char* arg1, int32_t arg2, int32_t arg3)

10037835  int32_t edx
10037835  j_sub_100377e0(arg1, j_sub_10038640(arg3, edx, arg2, arg2, arg3))
1003783d  return 0x100

1003783e                                                                                            90 90                                ..
10037840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037850    int32_t sub_10037850(char* arg1, int32_t arg2, int32_t arg3)

10037865  int32_t edx
10037865  j_sub_100377e0(arg1, j_sub_10038640(arg3, edx, arg2, arg2, arg3))
1003786d  return 0x100

1003786e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................

10037880    void sub_10037880()

10037889  for (int16_t* i = data_10063f2c; i != 0; i = *(i + 0x94))
10037890      int32_t ecx_1
10037890      ecx_1.w = *i
10037893      void* var_8_1 = &i[1]
10037894      int32_t var_c_1 = ecx_1
1003789a      j_sub_10038d80("\t{0x%04X, 1}, //%s")

100378ae                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................

100378c0    int32_t sub_100378c0()

100378d6  int32_t eax_2
100378d6  int32_t ecx
100378d6  int32_t edx
100378d6  edx:eax_2 = muls.dp.d(0x10624dd3, sub_100458d4(ecx) * 0x3e8)
100378da  int32_t eax_4 = edx s>> 6
100378e4  return eax_4 + (eax_4 u>> 0x1f)

100378e5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10037900    int32_t sub_10037900(int32_t arg1, int32_t arg2)

10037904  int32_t ecx = data_10064028
10037904  
10037910  if (arg1 s>= 0 && arg1 s<= ecx)
10037917      return 1
10037917  
10037926  data_10063fe8(3, "%s: invalid client number %d, [0…", arg2, arg1, ecx)
10037931  return 0

10037932                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10037940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037950    int32_t sub_10037950(int32_t arg1, int32_t arg2)

10037954  int32_t ecx = data_10064024
10037954  
10037960  if (arg1 s>= 0 && arg1 s<= ecx)
10037967      return 1
10037967  
10037976  data_10063fe8(3, "%s: invalid entity number %d, [0…", arg2, arg1, ecx)
10037981  return 0

10037982        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................

100379a0    int32_t sub_100379a0(int32_t arg1)

100379a7  if (data_10064020 != 0)
100379c6      return 1
100379c6  
100379b5  data_10063fe8(3, "%s: bot library used before bein…", arg1)
100379c0  return 0

100379c7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................

100379e0    int32_t sub_100379e0() __pure

100379e5  return "BotLib v0.96"

100379e6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10037a00    int32_t* sub_10037a00()

10037a19  data_10064030 = j_sub_100389c0("sv_friction", &data_1005ec0c)
10037a2d  data_10064034 = j_sub_100389c0("sv_stopspeed", &data_1005bddc)
10037a41  data_10064038 = j_sub_100389c0("sv_gravity", &data_1005ebe8)
10037a55  data_1006403c = j_sub_100389c0("sv_waterfriction", &data_1005cce4)
10037a69  data_10064040 = j_sub_100389c0("sv_watergravity", &data_1005ebc0)
10037a7d  data_10064044 = j_sub_100389c0("sv_maxvelocity", &data_1005eba8)
10037a91  data_10064048 = j_sub_100389c0("sv_maxwalkvelocity", &data_1005eba8)
10037a9e  data_1006404c = j_sub_100389c0("sv_maxcrouchvelocity", &data_1005bddc)
10037abc  data_10064050 = j_sub_100389c0("sv_maxswimvelocity", &data_1005eb5c)
10037ad0  data_10064054 = j_sub_100389c0("sv_maxacceleration", "2200")
10037ae4  data_10064058 = j_sub_100389c0("sv_airaccelerate", &data_1005b570)
10037af8  data_1006405c = j_sub_100389c0("sv_step", &data_1005eb0c)
10037b0c  data_10064060 = j_sub_100389c0("sv_maxbarrier", &data_1005eafc)
10037b20  data_10064064 = j_sub_100389c0("sv_maxsteepness", &data_1005eae8)
10037b34  data_10064068 = j_sub_100389c0("sv_jumpvel", &data_1005ead0)
10037b39  int32_t* result = j_sub_100389c0("sv_maxwaterjump", &data_1005eabc)
10037b41  data_1006406c = result
10037b46  return result

10037b47                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10037b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10037b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10037ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037bb0    int32_t sub_10037bb0()

10037bb8  if (data_10064020 != 0)
10037bc1      data_10063fe8(3, "bot library already setup\n")
10037bd0      return 2
10037bd0  
10037bd6  j_sub_10038be0("botlib.log")
10037be2  data_10063fe8(1, "------- BotLib Initialization --…")
10037bef  data_10063fe8(1, "BotLib v0.96\n")
10037bf5  j_sub_100439f0()
10037c04  data_10064020 = 1
10037c13  int32_t eax_1
10037c13  int16_t x87control
10037c13  int16_t x87control_1
10037c13  eax_1, x87control_1 = __ftol(x87control, j_sub_10038a90("maxclients", &data_1005ec60))
10037c22  data_10064028 = eax_1
10037c31  data_10064024 = __ftol(x87control_1, j_sub_10038a90("maxentities", "1024"))
10037c36  j_sub_10037a00()
10037c48  j_sub_1000edc0(data_10064024, data_10064028)
10037c57  *sub_10044f86() = 0
10037c57  
10037c61  if (*sub_10044f86() != 0)
10037c6b      return *sub_10044f86()
10037c6b  
10037c78  *sub_10044f86() = j_sub_10029c90()
10037c78  
10037c82  if (*sub_10044f86() != 0)
10037c8c      return *sub_10044f86()
10037c8c  
10037c8d  j_sub_10037660()
10037c99  data_10063fe8(1, "--------------------------------…")
10037ca5  return 0

10037ca6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10037cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10037ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037cf0    int32_t sub_10037cf0()

10037cf7  if (data_10064020 == 0)
10037d00      data_10063fe8(3, "bot library already shutdown\n")
10037d0e      return 1
10037d0e  
10037d10  j_sub_10029da0()
10037d15  j_sub_1000ee30()
10037d1a  j_sub_10037690()
10037d1f  j_sub_10038d60()
10037d24  j_sub_100391c0()
10037d35  __builtin_memset(s: &data_10064020, c: 0, n: 0x50)
10037d41  __builtin_memset(s: &data_10063fe0, c: 0, n: 0x28)
10037d4d  __builtin_memset(s: &data_10063f80, c: 0, n: 0x50)
10037d4f  data_10064020 = 0
10037d55  return 0

10037d56                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10037d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10037d80    int32_t j_sub_1000dee0()

10037d80  return j_sub_1000dee0() __tailcall

10037d85                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10037da0    int32_t sub_10037da0(char* arg1, int32_t arg2)

10037daa  j_sub_10038ac0(arg1, arg2)
10037db4  return 0

10037db5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10037dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037dd0    int32_t sub_10037dd0(int32_t arg1)

10037de0  if (j_sub_1003b4a0(arg1) == 0)
10037dea      data_10063fe8(3, "couldn't add define %s\n", arg1)
10037dea  
10037df6  return 0

10037df7                                                                       90 90 90 90 90 90 90 90 90                         .........
10037e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037e10    int32_t sub_10037e10(char* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

10037e20  if (j_sub_100379a0("BotLoadMap") == 0)
10037e28      return 1
10037e28  
10037e2f  if (arg1 == 0)
10037e59      return j_sub_1000ecd0(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
10037e59  
10037e61  data_10063fe8(1, "------------ Map Loading -------…")
10037e95  *sub_10044f86() = j_sub_1000ecd0(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
10037e95  
10037e9f  if (*sub_10044f86() != 0)
10037ea9      return *sub_10044f86()
10037ea9  
10037eaa  j_sub_10029c10()
10037eb6  data_10063fe8(1, "--------------------------------…")
10037ec2  return 0

10037ec3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
10037ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10037f00    int32_t sub_10037f00(int32_t arg1, void* arg2)

10037f06  int32_t eax = j_sub_100379a0("BotSetupClient")
10037f06  
10037f10  if (eax == 0)
10037f13      return eax
10037f13  
10037f1e  int32_t eax_1 = j_sub_10037900(arg1, "BotSetupClient")
10037f1e  
10037f28  if (eax_1 == 0)
10037f2b      return eax_1
10037f2b  
10037f2c  j_sub_100085f0()
10037f37  int32_t eax_3 = j_sub_10029480(arg1, arg2)
10037f3f  int32_t eax_4 = neg.d(eax_3)
10037f46  return neg.d(sbb.d(eax_4, eax_4, eax_3 != 0))

10037f47                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10037f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10037f70    int32_t sub_10037f70(int32_t arg1)

10037f80  if (j_sub_100379a0("BotShutdownClient") == 0)
10037f88      return 1
10037f88  
10037f9d  if (j_sub_10037900(arg1, "BotShutdownClient") != 0)
10037fb0      return j_sub_10029690(arg1)
10037fb0  
10037fa5  return 3

10037fb1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10037fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10037fe0    int32_t sub_10037fe0(int32_t arg1, int32_t arg2)

10037ff1  if (j_sub_100379a0("BotMoveClient") == 0)
10037ffa      return 1
10037ffa  
1003800f  if (j_sub_10037900(arg1, "BotMoveClient, parm0") == 0)
10038018      return 3
10038018  
1003802d  if (j_sub_10037900(arg2, "BotMoveClient, parm1") != 0)
10038043      return j_sub_100297b0(arg1, arg2)
10038043  
10038036  return 3

10038044              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10038060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038070    int32_t sub_10038070(int32_t arg1, int32_t arg2)

10038080  if (j_sub_100379a0("BotClientSettings") == 0)
10038088      return 1
10038088  
1003809d  if (j_sub_10037900(arg1, "BotClientSettings") == 0)
100380a5      return 3
100380a5  
100380ac  j_sub_10029920(arg1, arg2)
100380b5  return 0

100380b6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
100380c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100380e0    int32_t sub_100380e0(int32_t arg1, int32_t arg2)

100380f0  if (j_sub_100379a0("BotSettings") == 0)
100380f8      return 1
100380f8  
1003810d  if (j_sub_10037900(arg1, "BotSettings") != 0)
10038125      return j_sub_100299d0(arg1, arg2)
10038125  
10038115  return 3

10038126                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10038140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038150    int32_t sub_10038150(float arg1)

1003815f  if (j_sub_100379a0("BotStartFrame") == 0)
10038166      return 1
10038166  
1003816d  data_1006402c = arg1
10038173  j_sub_1000e010(arg1)
1003817b  return 0

1003817c                                                                                      90 90 90 90                              ....
10038180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038190    int32_t sub_10038190(int32_t arg1, int32_t arg2)

100381a0  if (j_sub_100379a0("BotUpdateClient") == 0)
100381a8      return 1
100381a8  
100381bd  if (j_sub_10037900(arg1, "BotUpdateClient") != 0)
100381d5      return j_sub_10029880(arg1, arg2)
100381d5  
100381c5  return 3

100381d6                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
100381e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10038200    int32_t sub_10038200(int32_t arg1, int32_t* arg2)

10038210  if (j_sub_100379a0("BotUpdateEntity") == 0)
10038218      return 1
10038218  
1003822d  if (j_sub_10037950(arg1, "BotUpdateEntity") != 0)
10038245      return j_sub_1000a920(arg1, arg2)
10038245  
10038235  return 4

10038246                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10038260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038270    int32_t sub_10038270(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, float arg7)

10038280  if (j_sub_100379a0("BotUpdateSound") == 0)
10038288      return 1
10038288  
1003829d  if (j_sub_10037950(arg2, "BotUpdateSound") != 0)
100382ce      return j_sub_1001ce20(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
100382ce  
100382a5  return 4

100382cf                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
100382e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100382f0    int32_t sub_100382f0(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8)

10038300  if (j_sub_100379a0("BotAddPointLight") == 0)
10038308      return 1
10038308  
1003831d  if (j_sub_10037950(arg2, "BotAddPointLight") == 0)
10038325      return 4
10038325  
1003834a  j_sub_1000d550(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
10038353  return 0

10038354                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10038360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10038380    int32_t sub_10038380(int32_t arg1, float arg2)

10038390  if (j_sub_100379a0("BotAI") == 0)
10038398      return 1
10038398  
100383ad  if (j_sub_10037900(arg1, "BotAI") != 0)
100383c5      return j_sub_10029320(arg1, arg2)
100383c5  
100383b5  return 3

100383c6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
100383e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100383f0    int32_t sub_100383f0(int32_t arg1, int32_t arg2, char* arg3)

10038400  if (j_sub_100379a0("BotConsoleMessage") == 0)
10038408      return 1
10038408  
1003841d  if (j_sub_10037900(arg1, "BotConsoleMessage") != 0)
1003843a      return j_sub_10029960(arg1, arg2, arg3)
1003843a  
10038425  return 3

1003843b                                                                                   90 90 90 90 90                             .....
10038440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10038460    int32_t sub_10038460() __pure

10038462  return 0

10038463           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

10038480    int32_t sub_10038480(int32_t arg1)

10038495  __builtin_memcpy(dest: &data_10063fe0, src: arg1, n: 0x28)
10038498  data_10063f80 = j_sub_100379e0
100384a2  data_10063f84 = j_sub_10037bb0
100384ac  data_10063f88 = j_sub_10037cf0
100384b6  data_10063f8c = j_sub_1000dee0
100384c0  data_10063f90 = j_sub_10037da0
100384ca  data_10063f94 = j_sub_10037dd0
100384d4  data_10063f98 = j_sub_10037e10
100384de  data_10063f9c = j_sub_10037f00
100384e8  data_10063fa0 = j_sub_10037f70
100384f2  data_10063fa4 = j_sub_10037fe0
100384fc  data_10063fa8 = j_sub_10038070
10038506  data_10063fac = j_sub_100380e0
10038510  data_10063fb0 = j_sub_10038150
1003851a  data_10063fb4 = j_sub_10038190
10038524  data_10063fb8 = j_sub_10038200
1003852e  data_10063fbc = j_sub_10038270
10038538  data_10063fc0 = j_sub_100382f0
10038542  data_10063fc4 = j_sub_10038380
1003854c  data_10063fc8 = j_sub_100383f0
10038556  data_10063fcc = j_sub_10038460
10038561  return &data_10063f80

10038562        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10038580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100385a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100385b0    int16_t* sub_100385b0(int16_t* arg1)

100385b4  *arg1 = 0xffff
100385b9  return arg1

100385ba                                                                                90 90 90 90 90 90                            ......
100385c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100385d0    int32_t sub_100385d0(int16_t* arg1, char arg2)

100385da  int16_t result = *arg1
100385ed  int16_t ebx
100385ed  ebx:1.b = result.b
100385fd  result = *(((zx.d(result) u>> 8 ^ zx.d(arg2)) << 1) + &data_1005ee70) ^ ebx
10038601  *arg1 = result
10038604  return result

10038605                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10038620    int32_t sub_10038620(int16_t arg1) __pure

10038620  int32_t result
10038620  result.w = arg1
10038625  return result

10038626                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10038640    int32_t __convention("regparm") sub_10038640(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)

10038640  int32_t var_4 = arg3
10038648  j_sub_100385b0(&var_4)
10038654  char* esi = nullptr
10038654  
10038658  if (arg5 s<= 0)
100386b6      return j_sub_10038620(var_4.w)
100386b6  
1003865a  int32_t ecx = var_4
1003865a  
10038692  do
10038667      int32_t eax
10038667      eax.b = esi[arg4]
10038673      int32_t eax_1 = eax ^ zx.d(ecx.w) u>> 8
10038673      
1003867c      if (eax_1 s< 0 || eax_1 s> 0x100)
1003867e          eax_1 = 0
1003867e      
10038682      int16_t edx_3
10038682      edx_3:1.b = ecx.b
10038684      ecx.w = *((eax_1 << 1) + &data_1005ee70)
1003868c      ecx.w ^= edx_3
1003868f      esi = &esi[1]
10038692  while (esi s< arg5)
10038692  
10038695  var_4 = ecx
100386a5  return j_sub_10038620(ecx.w)

100386b7                                                                       90 90 90 90 90 90 90 90 90                         .........
100386c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100386e0    char* sub_100386e0(int16_t* arg1, int32_t arg2, int32_t arg3)

100386e5  char* result = nullptr
100386e5  
100386e9  if (arg3 s> 0)
10038726      do
100386f6          int16_t ecx = *arg1
100386f9          int32_t edx
100386f9          edx.w = sx.w(result[arg2])
10038713          int16_t ebx_4
10038713          ebx_4:1.b = ecx.b
10038720          result = &result[1]
10038723          *arg1 = *((((edx & 0xffff) ^ zx.d(ecx) u>> 8) << 1) + &data_1005ee70) ^ ebx_4
10038726      while (result s< arg3)
10038726  
1003872c  return result

1003872d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
10038740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038750    long double sub_10038750(char* arg1)

10038750  int32_t ecx
10038750  int32_t var_4_1 = ecx
10038751  char* edx = arg1
10038755  int32_t ecx_1 = 0
10038757  long double result = fconvert.t(0f)
1003875d  char* eax
1003875d  eax.b = *edx
1003875f  int32_t var_4 = 0
1003875f  
10038765  if (eax.b == 0)
100387d1      return result
100387d1  
100387c4  do
1003876d      if (eax.b s< 0x30 || eax.b s> 0x39)
10038775          if (ecx_1 != 0 || eax.b != 0x2e)
100387ca              return fconvert.t(0f)
100387ca          
10038777          ecx_1 = 0xa
1003877c          edx = &edx[1]
1003877d          var_4 = 0xa
10038798          label_10038798:
10038798          ecx_1 *= 0xa
1003879a          long double x87_r6_2 = float.t(sx.d(*edx) - 0x30) / float.t(var_4)
1003879e          var_4 = ecx_1
100387a2          result = result + x87_r6_2
1003876d      else
10038785          if (ecx_1 != 0)
10038785              goto label_10038798
10038785          
100387bc          result = float.t(sx.d(eax.b) - 0x30) + result * fconvert.t(10.0)
100387bc      
100387be      eax.b = edx[1]
100387c1      edx = &edx[1]
100387c4  while (eax.b != 0)
100387c4  
100387c7  return result

100387d2                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
100387e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10038800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038810    int32_t* sub_10038810(int32_t arg1)

10038817  int32_t edi = arg1
10038819  int32_t i = 0xffffffff
10038819  
1003881e  while (i != 0)
1003881e      bool cond:0_1 = 0 != *edi
1003881e      edi += 1
1003881e      i -= 1
1003881e      
1003881e      if (not(cond:0_1))
1003881e          break
1003881e  
10038826  int32_t* s = j_sub_10038f90(not.d(i) + 0x18)
10038836  __builtin_memset(s, c: 0, n: 0x18)
1003883b  int32_t edi_2 = arg1
1003883d  int32_t i_1 = 0xffffffff
10038843  *s = &s[6]
10038843  
10038845  while (i_1 != 0)
10038845      bool cond:1_1 = 0 != *edi_2
10038845      edi_2 += 1
10038845      i_1 -= 1
10038845      
10038845      if (not(cond:1_1))
10038845          break
10038845  
10038847  int32_t ecx_2 = not.d(i_1)
10038854  int32_t esi_2
10038854  int32_t edi_5
10038854  edi_5, esi_2 = __builtin_memcpy(dest: &s[6], src: edi_2 - ecx_2, n: ecx_2 u>> 2 << 2)
1003885d  __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx_2 & 3)
10038866  s[5] = data_10063f20
1003886a  data_10063f20 = s
10038871  return s

10038872                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10038880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100388a0    void* sub_100388a0(void* arg1)

100388a5  void* eax = *(arg1 + 4)
100388a5  
100388aa  if (eax != 0)
100388ad      j_sub_100390b0(eax)
100388ad  
100388bf  return j_sub_100390b0(arg1)

100388c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100388d0    void* sub_100388d0()

100388d7  void* i
100388d7  
100388d7  for (i = data_10063f20; i != 0; i = data_10063f20)
100388dd      data_10063f20 = *(i + 0x14)
100388e3      j_sub_100388a0(i)
100388e3  
100388f4  data_10063f20 = 0
100388fe  return i

100388ff                                                                                               90                                 .
10038900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038910    int32_t* sub_10038910(char* arg1)

1003891a  for (int32_t* i = data_10063f20; i != 0; i = i[5])
10038920      char* eax_1 = *i
10038924      int32_t eax_2
10038924      int32_t ecx
10038924      int32_t edx
10038924      eax_2, ecx, edx = sub_10045cb0(eax_1, edx, ecx, eax_1, arg1)
10038924      
1003892e      if (eax_2 == 0)
10038940          return i
10038940  
1003893b  return 0

10038941     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................

10038960    int32_t sub_10038960(char* arg1)

10038965  int32_t* eax = j_sub_10038910(arg1)
10038965  
1003896f  if (eax == 0)
1003897a      return &data_1006294c
1003897a  
10038974  return eax[1]

1003897b                                                                                   90 90 90 90 90                             .....
10038980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038990    long double sub_10038990(char* arg1)

10038995  int32_t* eax = j_sub_10038910(arg1)
10038995  
1003899f  if (eax == 0)
100389ab      return fconvert.t(0f)
100389ab  
100389a4  return fconvert.t(eax[4])

100389ac                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................

100389c0    int32_t* sub_100389c0(char* arg1, int32_t arg2)

100389c6  int32_t* eax = j_sub_10038910(arg1)
100389c6  
100389d0  if (eax != 0)
10038a30      return eax
10038a30  
100389d5  int32_t* eax_1 = j_sub_10038810(arg1)
100389e0  int32_t edi_1 = arg2
100389e2  int32_t i = 0xffffffff
100389e2  
100389e7  while (i != 0)
100389e7      bool cond:0_1 = 0 != *edi_1
100389e7      edi_1 += 1
100389e7      i -= 1
100389e7      
100389e7      if (not(cond:0_1))
100389e7          break
100389e7  
100389ec  int32_t eax_2 = j_sub_10038f90(not.d(i))
100389f3  int32_t edi_2 = arg2
100389f5  int32_t i_1 = 0xffffffff
100389fa  eax_1[1] = eax_2
100389fa  
100389fd  while (i_1 != 0)
100389fd      bool cond:1_1 = 0 != *edi_2
100389fd      edi_2 += 1
100389fd      i_1 -= 1
100389fd      
100389fd      if (not(cond:1_1))
100389fd          break
100389fd  
100389ff  int32_t ecx_2 = not.d(i_1)
10038a0c  int32_t esi_3
10038a0c  int32_t edi_5
10038a0c  edi_5, esi_3 = __builtin_memcpy(dest: eax_2, src: edi_2 - ecx_2, n: ecx_2 u>> 2 << 2)
10038a13  __builtin_memcpy(dest: edi_5, src: esi_3, n: ecx_2 & 3)
10038a1e  eax_1[4] = fconvert.s(j_sub_10038750(eax_1[1]))
10038a24  eax_1[3] = 1
10038a2b  return eax_1

10038a31                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10038a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10038a60    int32_t sub_10038a60(char* arg1, int32_t arg2)

10038a75  return j_sub_100389c0(arg1, arg2)[1]

10038a76                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10038a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038a90    long double sub_10038a90(char* arg1, int32_t arg2)

10038aa5  return fconvert.t(j_sub_100389c0(arg1, arg2)[4])

10038aa6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10038ac0    int32_t sub_10038ac0(char* arg1, int32_t arg2)

10038acd  int32_t* ebx = j_sub_10038910(arg1)
10038acd  
10038ad4  if (ebx == 0)
10038aed      ebx = j_sub_10038810(arg1)
10038ad4  else
10038ada      j_sub_100390b0(ebx[1])
10038ada  
10038af3  int32_t i = 0xffffffff
10038af6  int32_t edi = arg2
10038af6  
10038afa  while (i != 0)
10038afa      bool cond:0_1 = 0 != *edi
10038afa      edi += 1
10038afa      i -= 1
10038afa      
10038afa      if (not(cond:0_1))
10038afa          break
10038afa  
10038aff  int32_t eax_3 = j_sub_10038f90(not.d(i))
10038b06  int32_t edi_1 = arg2
10038b08  int32_t i_1 = 0xffffffff
10038b0d  ebx[1] = eax_3
10038b0d  
10038b10  while (i_1 != 0)
10038b10      bool cond:1_1 = 0 != *edi_1
10038b10      edi_1 += 1
10038b10      i_1 -= 1
10038b10      
10038b10      if (not(cond:1_1))
10038b10          break
10038b10  
10038b12  int32_t ecx_1 = not.d(i_1)
10038b1f  int32_t esi_3
10038b1f  int32_t edi_4
10038b1f  edi_4, esi_3 = __builtin_memcpy(dest: eax_3, src: edi_1 - ecx_1, n: ecx_1 u>> 2 << 2)
10038b26  __builtin_memcpy(dest: edi_4, src: esi_3, n: ecx_1 & 3)
10038b2c  int32_t result
10038b2c  long double st0
10038b2c  result, st0 = j_sub_10038750(ebx[1])
10038b31  ebx[4] = fconvert.s(st0)
10038b37  ebx[3] = 1
10038b41  return result

10038b42        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
10038b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10038b80    int32_t sub_10038b80(char* arg1)

10038b85  int32_t* eax = j_sub_10038910(arg1)
10038b85  
10038b8f  if (eax == 0)
10038b97      return 0
10038b97  
10038b94  return eax[3]

10038b98                                                                          90 90 90 90 90 90 90 90                          ........
10038ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038bb0    int32_t* sub_10038bb0(char* arg1)

10038bb5  int32_t* result = j_sub_10038910(arg1)
10038bb5  
10038bbf  if (result != 0)
10038bc1      result[3] = 0
10038bc1  
10038bc8  return result

10038bc9                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................

10038be0    int32_t sub_10038be0(PSTR arg1)

10038beb  long double st0 = j_sub_10038a90("log", &data_1005b570)
10038bf0  long double temp0 = fconvert.t(0f)
10038bf0  st0 - temp0
10038bf9  int16_t result = (st0 < temp0 ? 1 : 0) << 8 | (is_unordered.t(st0, temp0) ? 1 : 0) << 0xa
10038bf9      | (st0 == temp0 ? 1 : 0) << 0xe
10038bf9  
10038bfe  if ((result:1.b & 0x40) != 0)
10038ca2      return result
10038ca2  
10038c0a  if (arg1 != 0)
10038c11      PSTR edi_1 = arg1
10038c13      int32_t i = 0xffffffff
10038c13      
10038c18      while (i != 0)
10038c18          bool cond:0_1 = 0 != *edi_1
10038c18          edi_1 = &edi_1[1]
10038c18          i -= 1
10038c18          
10038c18          if (not(cond:0_1))
10038c18              break
10038c18      
10038c1e      if (not.d(i) != 1)
10038c27          if (data_10063e40 != 0)
10038c3f              return data_10063fe8(3, "log file %s is already opened\n", &data_10063a40)
10038c3f          
10038c46          int32_t* eax_2 = sub_10044936(arg1, "wb")
10038c4e          data_10063e40 = eax_2
10038c4e          
10038c55          if (eax_2 == 0)
10038c69              return data_10063fe8(3, "can't open the log file %s\n", arg1)
10038c69          
10038c75          StrCopyFixed(&data_10063a40, arg1, 0x400)
10038c90          return data_10063fe8(1, "Opened log %s\n", &data_10063a40)
10038c90  
10038c98  return data_10063fe8(1, "openlog <filename>\n")

10038ca3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
10038cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10038ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038cf0    int32_t* sub_10038cf0()

10038cf0  int32_t* result = data_10063e40
10038cf0  
10038cf7  if (result == 0)
10038d3b      return result
10038d3b  
10038d04  if (sub_10044888(result) != 0)
10038d1b      return data_10063fe8(3, "can't close log file %s\n", &data_10063a40)
10038d1b  
10038d28  data_10063e40 = 0
10038d32  return data_10063fe8(1, "Closed log %s\n", &data_10063a40)

10038d3c                                                                                      90 90 90 90                              ....
10038d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10038d60    int32_t sub_10038d60()

10038d60  int32_t result = data_10063e40
10038d60  
10038d67  if (result == 0)
10038d6e      return result
10038d6e  
10038d69  return j_sub_10038cf0() __tailcall

10038d6f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

10038d80    int32_t* sub_10038d80(void* arg1)

10038d80  int32_t* result = data_10063e40
10038d80  
10038d87  if (result == 0)
10038db8      return result
10038db8  
10038d94  void arg_8
10038d94  sub_10045ab2(result, arg1, &arg_8)
10038da4  sub_10045898(data_10063e40, &data_1005f188)
10038db0  return sub_1004594c(data_10063e40)

10038db9                                                                             90 90 90 90 90 90 90                           .......
10038dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038dd0    void sub_10038dd0(void* arg1)

10038dd1  int32_t* edi = data_10063e40
10038dd1  
10038dd9  if (edi != 0)
10038de6      int32_t eax_1
10038de6      int16_t x87control
10038de6      int16_t x87control_1
10038de6      eax_1, x87control_1 = __ftol(x87control, fconvert.t(data_1006402c))
10038df9      int32_t eax_2
10038df9      int16_t x87control_2
10038df9      eax_2, x87control_2 =
10038df9          __ftol(x87control_1, fconvert.t(data_1006402c) * fconvert.t(-100f))
10038e1b      int32_t var_c_1 = ((neg.d(eax_1) << 2) - eax_1) * 0x14 - eax_2
10038e1c      int32_t var_10_1 = eax_1
10038e1d      int32_t eax_3
10038e1d      int16_t x87control_3
10038e1d      eax_3, x87control_3 =
10038e1d          __ftol(x87control_2, fconvert.t(data_1006402c) * fconvert.t(0.0166666675f))
10038e2e      int32_t var_14_1 = eax_3
10038e3a      int32_t var_18_1 =
10038e3a          __ftol(x87control_3, fconvert.t(data_1006402c) * fconvert.t(0.000277777785f))
10038e3b      int32_t var_1c_1 = data_10063e44
10038e42      sub_10045898(edi, "%d   %02d:%02d:%02d:%02d   ")
10038e58      void arg_8
10038e58      sub_10045ab2(data_10063e40, arg1, &arg_8)
10038e68      sub_10045898(data_10063e40, &data_1005f188)
10038e73      int32_t* ecx_9 = data_10063e40
10038e7b      data_10063e44 += 1
10038e81      sub_1004594c(ecx_9)

10038e8c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
10038ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10038ec0    int32_t sub_10038ec0()

10038ec5  return data_10063e40

10038ec6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10038ee0    int32_t sub_10038ee0()

10038ee0  int32_t result = data_10063e40
10038ee0  
10038ee7  if (result != 0)
10038eea      result = sub_1004594c(result)
10038eea  
10038ef0  return result

10038ef1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10038f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038f10    void* sub_10038f10(void* arg1)

10038f14  *(arg1 + 0xc) = 0
10038f21  *(arg1 + 0x10) = data_10063a30
10038f24  void* ecx_1 = data_10063a30
10038f24  
10038f2c  if (ecx_1 != 0)
10038f2e      *(ecx_1 + 0xc) = arg1
10038f2e  
10038f31  data_10063a30 = arg1
10038f36  return arg1

10038f37                                                                       90 90 90 90 90 90 90 90 90                         .........
10038f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038f50    void* sub_10038f50(void* arg1)

10038f54  void* ecx = *(arg1 + 0xc)
10038f54  
10038f59  if (ecx == 0)
10038f66      data_10063a30 = *(arg1 + 0x10)
10038f59  else
10038f5e      *(ecx + 0x10) = *(arg1 + 0x10)
10038f5e  
10038f6c  void* ecx_2 = *(arg1 + 0x10)
10038f6c  
10038f71  if (ecx_2 != 0)
10038f76      *(ecx_2 + 0xc) = *(arg1 + 0xc)
10038f76  
10038f79  return arg1

10038f7a                                                                                90 90 90 90 90 90                            ......
10038f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10038f90    int32_t sub_10038f90(int32_t arg1)

10038f9a  int32_t* eax = data_10063ff4(arg1 + 0x14)
10038fa6  *eax = 0x12345678
10038fac  eax[1] = &eax[5]
10038faf  eax[2] = arg1 + 0x14
10038fb2  j_sub_10038f10(eax)
10038fca  int32_t eax_2 = data_10063a2c + 1
10038fcb  data_10063a1c += eax[2]
10038fd1  data_10063a2c = eax_2
10038fdb  return eax[1]

10038fdc                                                                                      90 90 90 90                              ....
10038fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10039000    int32_t sub_10039000(int32_t arg1)

10039007  int32_t s = j_sub_10038f90(arg1)
10039021  __builtin_memset(s: __builtin_memset(s, c: 0, n: arg1 u>> 2 << 2), c: 0, n: arg1 & 3)
10039027  return s

10039028                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................

10039040    void* sub_10039040(void* arg1, int32_t arg2)

10039046  if (arg1 != 0)
1003904b      void* result = arg1 - 0x14
1003904b      
10039054      if (*(arg1 - 0x14) != 0x12345678)
10039062          data_10063fe8(4, "%s: invalid memory block\n", arg2)
1003906d          return 0
1003906d      
10039071      if (*(result + 4) == arg1)
1003908a          return result
1003908a      
1003907f      data_10063fe8(4, "%s: memory block pointer invalid…", arg2)
1003907f  
10039088  return nullptr

1003908b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
100390a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100390b0    void* sub_100390b0(void* arg1)

100390bb  void* result = j_sub_10039040(arg1, "FreeMemory")
100390bb  
100390c7  if (result == 0)
100390f6      return result
100390f6  
100390ca  j_sub_10038f50(result)
100390df  int32_t edx_2 = data_10063a2c - 1
100390e1  data_10063a1c -= *(result + 8)
100390e6  data_10063a2c = edx_2
100390ec  return data_10063ff8(result)

100390f7                                                                       90 90 90 90 90 90 90 90 90                         .........
10039100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10039120    void* sub_10039120(void* arg1)

1003912a  void* result = j_sub_10039040(arg1, "MemoryByteSize")
1003912a  
10039134  if (result != 0)
1003913a      return *(result + 8)
1003913a  
10039136  return result

1003913b                                                                                   90 90 90 90 90                             .....
10039140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039150    int32_t sub_10039150()

10039160  data_10063fe8(1, "total botlib memory: %d KB\n", data_10063a1c s>> 0xa)
1003917d  return data_10063fe8(1, "total memory blocks: %d\n", data_10063a2c)

1003917e                                                                                            90 90                                ..
10039180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039190    void* sub_10039190()

10039190  j_sub_10039150()
1003919c  void* i
1003919c  
1003919c  for (i = data_10063a30; i != 0; i = *(i + 0x10))
1003919c  
100391a5  return i

100391a6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

100391c0    void* sub_100391c0()

100391c7  void* i
100391c7  
100391c7  for (i = data_10063a30; i != 0; i = data_10063a30)
100391cd      j_sub_100390b0(*(i + 4))
100391cd  
100391de  data_10063a1c = 0
100391e8  return i

100391e9                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................

10039200    int32_t sub_10039200(void* arg1, void* arg2)

10039218  void var_400
10039218  void arg_c
10039218  sub_10044c05(&var_400, arg2, &arg_c)
10039229  void* eax_1 = *(arg1 + 0x20c)
1003924a  return data_10063fe8(3, "file %s, line %d: %s\n", eax_1, *(eax_1 + 0x120), &var_400)

1003924b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10039260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039270    int32_t sub_10039270(void* arg1, void* arg2)

10039288  void var_400
10039288  void arg_c
10039288  sub_10044c05(&var_400, arg2, &arg_c)
10039299  void* eax_1 = *(arg1 + 0x20c)
100392ba  return data_10063fe8(2, "file %s, line %d: %s\n", eax_1, *(eax_1 + 0x120), &var_400)

100392bb                                                                                   90 90 90 90 90                             .....
100392c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100392e0    int32_t* sub_100392e0(void* arg1, int32_t arg2, int32_t arg3)

100392e3  int32_t* result = j_sub_10038f90(0x10)
100392f0  *result = arg2
100392ff  result[2] = *(arg1 + 0x20c)
10039306  int32_t edx_1
10039306  edx_1.b = arg3 != 0
10039309  result[1] = edx_1
10039314  int32_t edx_2 = *(arg1 + 0x21c)
1003931a  *(arg1 + 0x220) += edx_1
10039320  result[3] = edx_2
10039323  *(arg1 + 0x21c) = result
1003932a  return result

1003932b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10039340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039350    void* sub_10039350(void* arg1, int32_t* arg2, int32_t* arg3)

1003935d  *arg2 = 0
10039364  *arg3 = 0
1003936a  void* result = *(arg1 + 0x21c)
1003936a  
10039381  if (result == 0 || *(result + 8) != *(arg1 + 0x20c))
100393b7      return result
100393b7  
10039386  *arg2 = *result
1003938b  *arg3 = *(result + 4)
10039393  int32_t esi_1 = *(arg1 + 0x220)
1003939c  *(arg1 + 0x21c) = *(*(arg1 + 0x21c) + 0xc)
100393a7  *(arg1 + 0x220) = esi_1 - *(result + 4)
100393ad  return j_sub_100390b0(result)

100393b8                                                                          90 90 90 90 90 90 90 90                          ........
100393c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100393e0    int32_t sub_100393e0(void* arg1, char* arg2)

100393f3  for (char* i = *(arg1 + 0x20c); i != 0; i = *(i + 0x568))
100393f7      int32_t eax
100393f7      int32_t ecx
100393f7      int32_t edx
100393f7      eax, ecx, edx = sub_10045cb0(eax, edx, ecx, i, arg2)
100393f7      
10039401      if (eax == 0)
10039423          char* var_10_2 = arg2
10039435          return j_sub_10039200(arg1, "%s recursively included")
10039435  
1003940d  int32_t result = *(arg1 + 0x20c)
10039413  *(arg2 + 0x568) = result
10039419  *(arg1 + 0x20c) = arg2
10039422  return result

10039436                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10039440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10039460    void* sub_10039460(int32_t arg1)

10039467  void* result = j_sub_10038f90(0x430)
1003947a  __builtin_memcpy(dest: result, src: arg1, n: 0x430)
1003947d  *(result + 0x428) = 0
10039488  return result

10039489                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................

100394a0    void* sub_100394a0(void* arg1)

100394ab  return j_sub_100390b0(arg1)

100394ac                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................

100394c0    int32_t sub_100394c0(void* arg1, char* arg2)

100394c1  void* ebx = arg1
100394c6  char* edi = arg2
100394c6  
100394d2  while (*(ebx + 0x210) == 0)
100394ea      if (j_sub_1003f2d0(*(ebx + 0x20c), edi) != 0)
100395a8          return 1
100395a8      
10039501      if (j_sub_10040060(*(ebx + 0x20c)) != 0)
10039503          void* eax_4 = *(ebx + 0x21c)
10039503          
1003950b          if (eax_4 != 0)
10039518              while (*(eax_4 + 8) == *(ebx + 0x20c))
10039520                  j_sub_10039270(ebx, "missing #endif")
10039530                  j_sub_10039350(ebx, &arg2, &arg1)
10039535                  eax_4 = *(ebx + 0x21c)
10039535                  
10039540                  if (eax_4 == 0)
10039540                      break
10039540      
10039542      void* eax_6 = *(ebx + 0x20c)
10039548      int32_t ecx_2 = *(eax_6 + 0x568)
10039548      
10039550      if (ecx_2 == 0)
100395ad          return 0
100395ad      
10039553      *(ebx + 0x20c) = ecx_2
10039559      j_sub_10040470(eax_6)
10039559  
1003957b  __builtin_memcpy(dest: edi, src: *(ebx + 0x210), n: 0x430)
1003957d  void* eax_8 = *(ebx + 0x210)
1003958a  *(ebx + 0x210) = *(eax_8 + 0x428)
10039590  j_sub_100394a0(eax_8)
100395a0  return 1

100395ae                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
100395c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100395e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100395f0    int32_t sub_100395f0(void* arg1, int32_t arg2)

100395f5  void* eax = j_sub_10039460(arg2)
10039607  *(eax + 0x428) = *(arg1 + 0x210)
1003960d  *(arg1 + 0x210) = eax
10039618  return 1

10039619                                                                             90 90 90 90 90 90 90                           .......
10039620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039630    int32_t sub_10039630(void* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

10039647  char var_430[0x430]
10039647  int32_t eax
10039647  int32_t edx
10039647  eax, edx = j_sub_100394c0(arg1, &var_430)
10039647  
10039651  if (eax == 0)
1003965c      int32_t var_454_1 = *arg2
10039663      j_sub_10039200(arg1, "define %s missing parms")
10039677      return 0
10039677  
10039678  int32_t* edi = arg2
1003967f  int32_t ebp = arg4
10039686  int32_t* ecx_1 = edi[3]
10039686  
1003968b  if (ecx_1 s> ebp)
1003968d      int32_t var_454_2 = ebp
10039694      j_sub_10039200(arg1, "define with more than %d paramet…")
100396a8      return 0
100396a8  
100396ab  int32_t i = 0
100396ab  
100396af  if (ecx_1 s> 0)
100396b1      ecx_1 = arg3
100396b1      
100396c3      do
100396b8          *ecx_1 = 0
100396bd          i += 1
100396be          ecx_1 = &ecx_1[1]
100396c3      while (i s< edi[3])
100396c3  
100396c5  void* esi_1 = &data_1005d334
100396ca  char (* eax_3)[0x430] = &var_430
100396ce  int32_t eax_5
100396ce  
100396ce  while (true)
100396ce      edx.b = *eax_3
100396d0      ecx_1.b = edx.b
100396d2      char temp0_1 = *esi_1
100396d2      bool c_1 = edx.b u< temp0_1
100396d2      
100396d4      if (edx.b == temp0_1)
100396d8          if (ecx_1.b == 0)
100396ee              eax_5 = 0
100396f0              break
100396f0          
100396da          edx.b = (*eax_3)[1]
100396dd          ecx_1.b = edx.b
100396df          char temp3_1 = *(esi_1 + 1)
100396df          c_1 = edx.b u< temp3_1
100396df          
100396e2          if (edx.b == temp3_1)
100396e4              eax_3 = &(*eax_3)[2]
100396e7              esi_1 += 2
100396e7              
100396ec              if (ecx_1.b != 0)
100396ec                  continue
100396ec              
100396ee              eax_5 = 0
100396f0              break
100396f0      
100396f2      bool c_2 = unimplemented  {sbb eax, eax}
100396f4      eax_5 = sbb.d(sbb.d(eax_3, eax_3, c_1), 0xffffffff, c_2)
100396f4      break
100396f4  
100396f9  if (eax_5 != 0)
10039708      j_sub_100395f0(arg1, &var_430)
1003970f      int32_t var_45c_2 = *edi
10039716      j_sub_10039200(arg1, "define %s missing parms")
1003972a      return 0
1003972a  
10039732  int32_t ecx_3 = 0
10039734  int32_t eax_7 = 0
10039736  int32_t var_434 = 0
1003973a  int32_t var_438 = 0
1003973e  int32_t var_440 = 0
10039742  int32_t* var_43c = arg3
10039742  
10039758  while (true)
10039758      if (eax_7 s>= ebp)
1003992a          int32_t var_454_6 = *edi
10039931          j_sub_10039200(arg1, "define %s with too many parms")
10039945          return 0
10039945      
10039761      if (eax_7 s>= edi[3])
1003994f          int32_t var_454_7 = *edi
10039956          j_sub_10039270(arg1, "define %s has too many parms")
1003996a          return 0
1003996a      
1003976b      void* edi_1 = nullptr
1003976f      int32_t ebp_1 = 1
10039774      *var_43c = 0
10039774      
10039776      if (ecx_3 == 0)
10039789          while (true)
10039793              if (j_sub_100394c0(arg1, &var_430) == 0)
10039974                  int32_t var_454_8 = *arg2
1003997b                  j_sub_10039200(arg1, "define %s incomplete")
1003998f                  return 0
1003998f              
10039799              void* esi_4 = &data_1005d330
1003979e              char (* eax_10)[0x430] = &var_430
100397a2              int32_t eax_12
100397a2              char edx_3
100397a2              
100397a2              while (true)
100397a2                  edx_3 = *eax_10
100397a6                  char temp4_1 = *esi_4
100397a6                  bool c_3 = edx_3 u< temp4_1
100397a6                  
100397a8                  if (edx_3 == temp4_1)
100397ac                      if (edx_3 == 0)
100397c2                          eax_12 = 0
100397c4                          break
100397c4                      
100397ae                      edx_3 = (*eax_10)[1]
100397b3                      char temp7_1 = *(esi_4 + 1)
100397b3                      c_3 = edx_3 u< temp7_1
100397b3                      
100397b6                      if (edx_3 == temp7_1)
100397b8                          eax_10 = &(*eax_10)[2]
100397bb                          esi_4 += 2
100397bb                          
100397c0                          if (edx_3 != 0)
100397c0                              continue
100397c0                          
100397c2                          eax_12 = 0
100397c4                          break
100397c4                  
100397c6                  bool c_4 = unimplemented  {sbb eax, eax}
100397c8                  eax_12 = sbb.d(sbb.d(eax_10, eax_10, c_3), 0xffffffff, c_4)
100397c8                  break
100397c8              
100397d3              if (eax_12 == 0 && var_440 s<= 0)
100398a4                  if (ebp_1 != 0)
100398b3                      j_sub_10039270(arg1, "too many comma's")
100398b3                  
100398a4                  break
100398a4              
100397d9              ebp_1 = 0
100397db              void* esi_5 = &data_1005d334
100397e0              char (* eax_13)[0x430] = &var_430
100397e4              int32_t eax_15
100397e4              
100397e4              while (true)
100397e4                  edx_3 = *eax_13
100397e8                  char temp8_1 = *esi_5
100397e8                  bool c_5 = edx_3 u< temp8_1
100397e8                  
100397ea                  if (edx_3 == temp8_1)
100397ee                      if (edx_3 == 0)
10039804                          eax_15 = 0
10039806                          break
10039806                      
100397f0                      edx_3 = (*eax_13)[1]
100397f5                      char temp11_1 = *(esi_5 + 1)
100397f5                      c_5 = edx_3 u< temp11_1
100397f5                      
100397f8                      if (edx_3 == temp11_1)
100397fa                          eax_13 = &(*eax_13)[2]
100397fd                          esi_5 += 2
100397fd                          
10039802                          if (edx_3 != 0)
10039802                              continue
10039802                          
10039804                          eax_15 = 0
10039806                          break
10039806                  
10039808                  bool c_6 = unimplemented  {sbb eax, eax}
1003980a                  eax_15 = sbb.d(sbb.d(eax_13, eax_13, c_5), 0xffffffff, c_6)
1003980a                  break
1003980a              
1003980f              if (eax_15 != 0)
1003981a                  void* esi_6 = &data_1005d32c
1003981f                  char (* eax_16)[0x430] = &var_430
10039823                  int32_t eax_18
10039823                  
10039823                  while (true)
10039823                      edx_3 = *eax_16
10039827                      char temp12_1 = *esi_6
10039827                      bool c_7 = edx_3 u< temp12_1
10039827                      
10039829                      if (edx_3 == temp12_1)
1003982d                          if (edx_3 == 0)
10039843                              eax_18 = 0
10039845                              break
10039845                          
1003982f                          edx_3 = (*eax_16)[1]
10039834                          char temp15_1 = *(esi_6 + 1)
10039834                          c_7 = edx_3 u< temp15_1
10039834                          
10039837                          if (edx_3 == temp15_1)
10039839                              eax_16 = &(*eax_16)[2]
1003983c                              esi_6 += 2
1003983c                              
10039841                              if (edx_3 != 0)
10039841                                  continue
10039841                              
10039843                              eax_18 = 0
10039845                              break
10039845                      
10039847                      bool c_8 = unimplemented  {sbb eax, eax}
10039849                      eax_18 = sbb.d(sbb.d(eax_16, eax_16, c_7), 0xffffffff, c_8)
10039849                      break
10039849                  
1003984e                  if (eax_18 == 0)
10039855                      bool cond:2_1 = var_440 - 1 s<= 0
10039857                      var_440 -= 1
10039857                      
1003985b                      if (cond:2_1)
100398d2                          if (arg3[arg2[3] - 1] == 0)
100398e1                              j_sub_10039270(arg1, "too few define parms")
100398e1                          
100398e9                          var_434 = 1
100398e9                          break
100398e9                  
1003986b                  if (var_438 s< arg2[3])
10039876                      void* eax_22 = j_sub_10039460(&var_430)
10039880                      *(eax_22 + 0x428) = 0
10039880                      
10039886                      if (edi_1 == 0)
10039899                          edi_1 = eax_22
1003989b                          *var_43c = eax_22
10039886                      else
10039888                          *(edi_1 + 0x428) = eax_22
1003988e                          edi_1 = eax_22
1003980f              else
10039811                  var_440 += 1
10039811      
100398f9      ecx_3 = var_434
100398fd      eax_7 = var_438 + 1
10039903      var_438 = eax_7
10039907      var_43c = &var_43c[1]
10039907      
1003990b      if (ecx_3 != 0)
1003990b          break
1003990b      
10039748      edi = arg2
1003974f      ebp = arg4
1003974f  
10039920  return 1

10039990                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
100399a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100399c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100399e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10039a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10039a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10039a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10039a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039a70    int32_t sub_10039a70(char* arg1, char* arg2)

10039a77  int16_t* edi = &data_1005f588
10039a7c  int32_t i = 0xffffffff
10039a81  *(arg2 + 0x400) = 1
10039a8b  *(arg2 + 0x418) = 0
10039a95  *(arg2 + 0x41c) = 0
10039a9f  *arg2 = 0
10039a9f  
10039aa3  while (i != 0)
10039aa3      bool cond:0_1 = 0 != *edi
10039aa3      edi += 1
10039aa3      i -= 1
10039aa3      
10039aa3      if (not(cond:0_1))
10039aa3          break
10039aa3  
10039aa5  int32_t ecx = not.d(i)
10039aad  char* edi_2 = arg2
10039aaf  int32_t i_1 = 0xffffffff
10039aaf  
10039ab2  while (i_1 != 0)
10039ab2      bool cond:1_1 = 0 != *edi_2
10039ab2      edi_2 = &edi_2[1]
10039ab2      i_1 -= 1
10039ab2      
10039ab2      if (not(cond:1_1))
10039ab2          break
10039ab2  
10039aba  int32_t esi_1
10039aba  int32_t edi_4
10039aba  edi_4, esi_1 = __builtin_memcpy(dest: edi_2 - 1, src: edi - ecx, n: ecx u>> 2 << 2)
10039ac1  __builtin_memcpy(dest: edi_4, src: esi_1, n: ecx & 3)
10039ac1  
10039ac9  for (char* i_2 = arg1; i_2 != 0; i_2 = *(i_2 + 0x428))
10039acb      char* edi_5 = arg2
10039acd      int32_t j = 0xffffffff
10039acd      
10039ad2      while (j != 0)
10039ad2          bool cond:3_1 = 0 != *edi_5
10039ad2          edi_5 = &edi_5[1]
10039ad2          j -= 1
10039ad2          
10039ad2          if (not(cond:3_1))
10039ad2              break
10039ad2      
10039ae1      sub_10044cb0(arg2, i_2, 0x400 - (not.d(j) - 1))
10039ae1  
10039af3  char* edi_6 = arg2
10039af5  int32_t i_3 = 0xffffffff
10039af5  
10039aff  while (i_3 != 0)
10039aff      bool cond:2_1 = 0 != *edi_6
10039aff      edi_6 = &edi_6[1]
10039aff      i_3 -= 1
10039aff      
10039aff      if (not(cond:2_1))
10039aff          break
10039aff  
10039b0d  sub_10044cb0(arg2, &data_1005f588, 0x400 - (not.d(i_3) - 1))
10039b1d  return 1

10039b1e                                                                                            90 90                                ..
10039b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10039b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039b50    int32_t sub_10039b50(void* arg1, void* arg2)

10039b5a  int32_t eax = *(arg1 + 0x400)
10039b5a  
10039b64  if (eax == 4)
10039b66      int32_t ecx_1 = *(arg2 + 0x400)
10039b66      
10039b74      if (ecx_1 == 4 || ecx_1 == 3)
10039b76          void* edi = arg2
10039b78          int32_t i = 0xffffffff
10039b78          
10039b7d          while (i != 0)
10039b7d              bool cond:0_1 = 0 != *edi
10039b7d              edi += 1
10039b7d              i -= 1
10039b7d              
10039b7d              if (not(cond:0_1))
10039b7d                  break
10039b7d          
10039b7f          int32_t ecx_2 = not.d(i)
10039b87          void* edi_2 = arg1
10039b89          int32_t i_1 = 0xffffffff
10039b89          
10039b8c          while (i_1 != 0)
10039b8c              bool cond:1_1 = 0 != *edi_2
10039b8c              edi_2 += 1
10039b8c              i_1 -= 1
10039b8c              
10039b8c              if (not(cond:1_1))
10039b8c                  break
10039b8c          
10039b94          int32_t esi_2
10039b94          int32_t edi_4
10039b94          edi_4, esi_2 =
10039b94              __builtin_memcpy(dest: edi_2 - 1, src: edi - ecx_2, n: ecx_2 u>> 2 << 2)
10039ba0          __builtin_memcpy(dest: edi_4, src: esi_2, n: ecx_2 & 3)
10039ba5          return 1
10039ba5  
10039bb2  if (eax != 1 || *(arg2 + 0x400) != 1)
10039bf8      return 0
10039bf8  
10039bb4  void* edi_5 = arg1
10039bb6  int32_t i_2 = 0xffffffff
10039bb6  
10039bbb  while (i_2 != 0)
10039bbb      bool cond:2_1 = 0 != *edi_5
10039bbb      edi_5 += 1
10039bbb      i_2 -= 1
10039bbb      
10039bbb      if (not(cond:2_1))
10039bbb          break
10039bbb  
10039bc0  void* edi_6 = arg2 + 1
10039bc3  *(not.d(i_2) - 1 + arg1 - 1) = 0
10039bc7  int32_t i_3 = 0xffffffff
10039bc7  
10039bca  while (i_3 != 0)
10039bca      bool cond:3_1 = 0 != *edi_6
10039bca      edi_6 += 1
10039bca      i_3 -= 1
10039bca      
10039bca      if (not(cond:3_1))
10039bca          break
10039bca  
10039bcc  int32_t ecx_9 = not.d(i_3)
10039bd4  void* edi_8 = arg1
10039bd6  int32_t i_4 = 0xffffffff
10039bd6  
10039bd9  while (i_4 != 0)
10039bd9      bool cond:4_1 = 0 != *edi_8
10039bd9      edi_8 += 1
10039bd9      i_4 -= 1
10039bd9      
10039bd9      if (not(cond:4_1))
10039bd9          break
10039bd9  
10039be1  int32_t esi_4
10039be1  int32_t edi_10
10039be1  edi_10, esi_4 = __builtin_memcpy(dest: edi_8 - 1, src: edi_6 - ecx_9, n: ecx_9 u>> 2 << 2)
10039bed  __builtin_memcpy(dest: edi_10, src: esi_4, n: ecx_9 & 3)
10039bf2  return 1

10039bf9                                                                             90 90 90 90 90 90 90                           .......
10039c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10039c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039c30    int32_t __convention("regparm") sub_10039c30(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4)

10039c30  int32_t var_4 = arg3
10039c3a  var_4 = 0
10039c3a  
10039c3e  if (arg4 != 0)
10039c41      int32_t edi_1 = arg4
10039c43      int32_t i = 0xffffffff
10039c43      
10039c46      while (i != 0)
10039c46          bool cond:1_1 = 0 != *edi_1
10039c46          edi_1 += 1
10039c46          i -= 1
10039c46          
10039c46          if (not(cond:1_1))
10039c46              break
10039c46      
10039c4a      int32_t ecx_1 = not.d(i) - 1
10039c4a      
10039c4e      if (ecx_1 s> 4)
10039c50          ecx_1 = 4
10039c61          label_10039c61:
10039c64          int32_t esi_1
10039c64          int32_t edi_2
10039c64          edi_2, esi_1 = __builtin_memcpy(dest: &var_4, src: arg4, n: ecx_1 u>> 2 << 2)
10039c6b          __builtin_memcpy(dest: edi_2, src: esi_1, n: ecx_1 & 3)
10039c72          int32_t eax_2
10039c72          int32_t edx
10039c72          edx:eax_2 = sx.q(var_4)
10039c7e          return ((eax_2 ^ edx) - edx) & 0x3ff
10039c7e      
10039c59      if (ecx_1 != 0)
10039c59          goto label_10039c61
10039c59  
10039c8e  return 0

10039c8f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10039ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039cb0    int32_t sub_10039cb0(int32_t* arg1, int32_t arg2)

10039cb5  int32_t eax = *arg1
10039cb8  int32_t ecx
10039cb8  int32_t edx
10039cb8  int32_t result = j_sub_10039c30(eax, edx, ecx, eax)
10039cc7  arg1[7] = *(arg2 + (result << 2))
10039cca  *(arg2 + (result << 2)) = arg1
10039cce  return result

10039ccf                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

10039ce0    int32_t* sub_10039ce0(int32_t arg1, char* arg2)

10039ce0  int32_t ebx
10039ce0  int32_t var_4 = ebx
10039cf5  int32_t eax
10039cf5  int32_t ecx
10039cf5  int32_t edx
10039cf5  int32_t* result = *(arg1 + (j_sub_10039c30(eax, edx, ecx, arg2) << 2))
10039cf5  
10039cfa  if (result != 0)
10039cfc      while (true)
10039cfc          char* ecx_2 = *result
10039cfe          char* esi_1 = arg2
10039d00          int32_t ecx_4
10039d00          
10039d00          while (true)
10039d00              int32_t eax_1
10039d00              eax_1.b = *ecx_2
10039d02              ebx.b = *esi_1
10039d06              bool c_1 = eax_1.b u< ebx.b
10039d06              
10039d08              if (eax_1.b == ebx.b)
10039d0c                  if (eax_1.b == 0)
10039d24                      ecx_4 = 0
10039d26                      break
10039d26                  
10039d0e                  eax_1.b = ecx_2[1]
10039d11                  ebx.b = esi_1[1]
10039d16                  c_1 = eax_1.b u< ebx.b
10039d16                  
10039d18                  if (eax_1.b == ebx.b)
10039d1a                      ecx_2 = &ecx_2[2]
10039d1d                      esi_1 = &esi_1[2]
10039d1d                      
10039d22                      if (eax_1.b != 0)
10039d22                          continue
10039d22                      
10039d24                      ecx_4 = 0
10039d26                      break
10039d26              
10039d28              bool c_2 = unimplemented  {sbb ecx, ecx}
10039d2a              ecx_4 = sbb.d(sbb.d(ecx_2, ecx_2, c_1), 0xffffffff, c_2)
10039d2a              break
10039d2a          
10039d2f          if (ecx_4 == 0)
10039d45              return result
10039d45          
10039d31          result = result[7]
10039d31          
10039d36          if (result == 0)
10039d36              break
10039d36  
10039d3e  return 0

10039d46                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10039d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039d70    int32_t* sub_10039d70(int32_t* arg1, char* arg2)

10039d74  int32_t ebx
10039d74  int32_t var_4 = ebx
10039d78  int32_t* result = arg1
10039d78  
10039d7c  if (arg1 != 0)
10039d82      while (true)
10039d82          char* ecx_1 = *result
10039d84          char* esi_1 = arg2
10039d86          int32_t ecx_3
10039d86          
10039d86          while (true)
10039d86              int32_t* eax
10039d86              eax.b = *ecx_1
10039d88              ebx.b = *esi_1
10039d8c              bool c_1 = eax.b u< ebx.b
10039d8c              
10039d8e              if (eax.b == ebx.b)
10039d92                  if (eax.b == 0)
10039daa                      ecx_3 = 0
10039dac                      break
10039dac                  
10039d94                  eax.b = ecx_1[1]
10039d97                  ebx.b = esi_1[1]
10039d9c                  c_1 = eax.b u< ebx.b
10039d9c                  
10039d9e                  if (eax.b == ebx.b)
10039da0                      ecx_1 = &ecx_1[2]
10039da3                      esi_1 = &esi_1[2]
10039da3                      
10039da8                      if (eax.b != 0)
10039da8                          continue
10039da8                      
10039daa                      ecx_3 = 0
10039dac                      break
10039dac              
10039dae              bool c_2 = unimplemented  {sbb ecx, ecx}
10039db0              ecx_3 = sbb.d(sbb.d(ecx_1, ecx_1, c_1), 0xffffffff, c_2)
10039db0              break
10039db0          
10039db5          if (ecx_3 == 0)
10039dcb              return result
10039dcb          
10039db7          result = result[6]
10039db7          
10039dbc          if (result == 0)
10039dbc              break
10039dbc  
10039dc4  return 0

10039dcc                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................
10039de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039df0    int32_t sub_10039df0(void* arg1, char* arg2)

10039df4  int32_t ebx
10039df4  int32_t var_4 = ebx
10039df8  char* edi = *(arg1 + 0x10)
10039dfb  int32_t result = 0
10039dfb  
10039dff  if (edi != 0)
10039e05      while (true)
10039e05          char* esi_1 = arg2
10039e07          char* ecx_1 = edi
10039e09          int32_t ecx_3
10039e09          
10039e09          while (true)
10039e09              ebx.b = *ecx_1
10039e0d              char temp0_1 = *esi_1
10039e0d              bool c_1 = ebx.b u< temp0_1
10039e0d              
10039e0f              if (ebx.b == temp0_1)
10039e13                  if (ebx.b == 0)
10039e29                      ecx_3 = 0
10039e2b                      break
10039e2b                  
10039e15                  ebx.b = ecx_1[1]
10039e1a                  char temp3_1 = esi_1[1]
10039e1a                  c_1 = ebx.b u< temp3_1
10039e1a                  
10039e1d                  if (ebx.b == temp3_1)
10039e1f                      ecx_1 = &ecx_1[2]
10039e22                      esi_1 = &esi_1[2]
10039e22                      
10039e27                      if (ebx.b != 0)
10039e27                          continue
10039e27                      
10039e29                      ecx_3 = 0
10039e2b                      break
10039e2b              
10039e2d              bool c_2 = unimplemented  {sbb ecx, ecx}
10039e2f              ecx_3 = sbb.d(sbb.d(ecx_1, ecx_1, c_1), 0xffffffff, c_2)
10039e2f              break
10039e2f          
10039e34          if (ecx_3 == 0)
10039e4f              return result
10039e4f          
10039e36          edi = *(edi + 0x428)
10039e3c          result += 1
10039e3c          
10039e3f          if (edi == 0)
10039e3f              break
10039e3f  
10039e48  return 0xffffffff

10039e50                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
10039e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10039e70    void* sub_10039e70(void* arg1)

10039e76  void* i_2 = *(arg1 + 0x10)
10039e76  
10039e7b  if (i_2 != 0)
10039e90      void* i
10039e90      
10039e90      do
10039e7d          i = *(i_2 + 0x428)
10039e84          j_sub_100394a0(i_2)
10039e8c          i_2 = i
10039e90      while (i != 0)
10039e90  
10039e92  void* i_3 = *(arg1 + 0x14)
10039e92  
10039e97  if (i_3 != 0)
10039eac      void* i_1
10039eac      
10039eac      do
10039e99          i_1 = *(i_3 + 0x428)
10039ea0          j_sub_100394a0(i_3)
10039ea8          i_3 = i_1
10039eac      while (i_1 != 0)
10039eac  
10039eb9  return j_sub_100390b0(arg1)

10039eba                                                                                90 90 90 90 90 90                            ......
10039ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10039ee0    char* sub_10039ee0(void* arg1)

10039ee6  char* i = "__LINE__"
10039eeb  int32_t var_8 = 0
10039eef  int32_t var_4 = 0
10039ef7  char* var_28 = "__LINE__"
10039efb  int32_t var_24 = 1
10039f03  char* var_20 = "__FILE__"
10039f0b  int32_t var_1c = 2
10039f13  char* var_18 = "__DATE__"
10039f1b  int32_t var_14 = 3
10039f23  char* var_10 = "__TIME__"
10039f2b  int32_t var_c = 4
10039f38  char** ebx_1 = &var_28
10039faa  char* result
10039faa  
10039faa  do
10039f3c      char* i_1 = i
10039f3e      int32_t j = 0xffffffff
10039f3e      
10039f43      while (j != 0)
10039f43          bool cond:1_1 = 0 != *i_1
10039f43          i_1 = &i_1[1]
10039f43          j -= 1
10039f43          
10039f43          if (not(cond:1_1))
10039f43              break
10039f43      
10039f4b      int32_t* s = j_sub_10038f90(not.d(j) + 0x20)
10039f5b      __builtin_memset(s, c: 0, n: 0x20)
10039f60      char* i_2 = i
10039f62      int32_t j_1 = 0xffffffff
10039f65      *s = &s[8]
10039f65      
10039f67      while (j_1 != 0)
10039f67          bool cond:2_1 = 0 != *i_2
10039f67          i_2 = &i_2[1]
10039f67          j_1 -= 1
10039f67          
10039f67          if (not(cond:2_1))
10039f67              break
10039f67      
10039f69      int32_t ecx_3 = not.d(j_1)
10039f76      int32_t esi_1
10039f76      int32_t edi_4
10039f76      edi_4, esi_1 = __builtin_memcpy(dest: &s[8], src: i_2 - ecx_3, n: ecx_3 u>> 2 << 2)
10039f81      __builtin_memcpy(dest: edi_4, src: esi_1, n: ecx_3 & 3)
10039f89      int32_t ebp_3 = s[1] | 1
10039f8c      s[2] = ebx_1[1]
10039f8f      s[1] = ebp_3
10039f9a      result = j_sub_10039cb0(s, *(arg1 + 0x218))
10039f9f      i = ebx_1[2]
10039fa2      ebx_1 = &ebx_1[2]
10039faa  while (i != 0)
10039faa  
10039fb3  return result

10039fb4                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10039fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10039fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003a000    int32_t sub_1003a000(void* arg1, void* arg2, int16_t** arg3, int16_t** arg4)

1003a01a  int32_t eax_1 = *(arg2 + 8) - 1
1003a028  int16_t var_430
1003a028  __builtin_memcpy(dest: &var_430, src: arg1 + 0x228, n: 0x430)
1003a028  
1003a02a  if (eax_1 u> 3)
1003a213      *arg3 = nullptr
1003a21a      *arg4 = nullptr
1003a22c      return 1
1003a22c  
1003a030  int32_t var_434
1003a030  
1003a030  switch (eax_1)
1003a041      case 0
1003a041          int32_t var_448 = *(arg1 + 0x648)
1003a048          sub_10044c56(&var_430, &data_1005d37c)
1003a05f          *arg3 = &var_430
1003a06a          *arg4 = &var_430
1003a079          return 1
1003a07a      case 1
1003a07a          int32_t edi = *(arg1 + 0x20c)
1003a080          int32_t i = 0xffffffff
1003a080          
1003a089          while (i != 0)
1003a089              bool cond:1_1 = 0 != *edi
1003a089              edi += 1
1003a089              i -= 1
1003a089              
1003a089              if (not(cond:1_1))
1003a089                  break
1003a089          
1003a08b          int32_t ecx_2 = not.d(i)
1003a09c          int32_t esi_2
1003a09c          int32_t edi_2
1003a09c          edi_2, esi_2 =
1003a09c              __builtin_memcpy(dest: &var_430, src: edi - ecx_2, n: ecx_2 u>> 2 << 2)
1003a0a7          __builtin_memcpy(dest: edi_2, src: esi_2, n: ecx_2 & 3)
1003a0b3          *arg3 = &var_430
1003a0bd          *arg4 = &var_430
1003a0ca          return 1
1003a0d6      case 2
1003a0d6          var_434 = sub_100457bc(nullptr)
1003a0db          void* eax_7 = sub_10045b35(&var_434)
1003a0e9          int32_t var_450_1 = 7
1003a0f2          var_430 = data_1005f588
1003a0f9          sub_10044cb0(&var_430, eax_7 + 4, var_450_1)
1003a109          void var_429
1003a109          sub_10044cb0(&var_429, eax_7 + 0x14, 4)
1003a10e          int16_t* edi_3 = &data_1005f588
1003a113          int32_t i_1 = 0xffffffff
1003a113          
1003a11c          while (i_1 != 0)
1003a11c              bool cond:2_1 = 0 != *edi_3
1003a11c              edi_3 += 1
1003a11c              i_1 -= 1
1003a11c              
1003a11c              if (not(cond:2_1))
1003a11c                  break
1003a11c          
1003a11e          int32_t ecx_7 = not.d(i_1)
1003a127          int16_t* edi_5 = &var_430
1003a129          int32_t i_2 = 0xffffffff
1003a129          
1003a12c          while (i_2 != 0)
1003a12c              bool cond:3_1 = 0 != *edi_5
1003a12c              edi_5 += 1
1003a12c              i_2 -= 1
1003a12c              
1003a12c              if (not(cond:3_1))
1003a12c                  break
1003a12c          
1003a134          int32_t esi_4
1003a134          int32_t edi_7
1003a134          edi_7, esi_4 =
1003a134              __builtin_memcpy(dest: edi_5 - 1, src: edi_3 - ecx_7, n: ecx_7 u>> 2 << 2)
1003a13b          __builtin_memcpy(dest: edi_7, src: esi_4, n: ecx_7 & 3)
1003a13d          Gladiator_Free(eax_7)
1003a154          *arg3 = &var_430
1003a15f          *arg4 = &var_430
1003a16e          return 1
1003a17a      case 3
1003a17a          var_434 = sub_100457bc(nullptr)
1003a17f          void* eax_12 = sub_10045b35(&var_434)
1003a18d          int32_t var_450_2 = 8
1003a196          var_430 = data_1005f588
1003a19d          sub_10044cb0(&var_430, eax_12 + 0xb, var_450_2)
1003a1a2          int16_t* edi_8 = &data_1005f588
1003a1a7          int32_t i_3 = 0xffffffff
1003a1a7          
1003a1b0          while (i_3 != 0)
1003a1b0              bool cond:4_1 = 0 != *edi_8
1003a1b0              edi_8 += 1
1003a1b0              i_3 -= 1
1003a1b0              
1003a1b0              if (not(cond:4_1))
1003a1b0                  break
1003a1b0          
1003a1b2          int32_t ecx_13 = not.d(i_3)
1003a1bb          int16_t* edi_10 = &var_430
1003a1bd          int32_t i_4 = 0xffffffff
1003a1bd          
1003a1c0          while (i_4 != 0)
1003a1c0              bool cond:5_1 = 0 != *edi_10
1003a1c0              edi_10 += 1
1003a1c0              i_4 -= 1
1003a1c0              
1003a1c0              if (not(cond:5_1))
1003a1c0                  break
1003a1c0          
1003a1c8          int32_t esi_6
1003a1c8          int32_t edi_12
1003a1c8          edi_12, esi_6 =
1003a1c8              __builtin_memcpy(dest: edi_10 - 1, src: edi_8 - ecx_13, n: ecx_13 u>> 2 << 2)
1003a1cf          __builtin_memcpy(dest: edi_12, src: esi_6, n: ecx_13 & 3)
1003a1d1          Gladiator_Free(eax_12)
1003a1e8          *arg3 = &var_430
1003a1f3          *arg4 = &var_430
1003a202          return 1

1003a22d                                         8d 49 00                                                               .I.
1003a230  uint32_t jump_table_1003a230[0x4] = 
1003a230  {
1003a230      [0x0] =  0x1003a037
1003a234      [0x1] =  0x1003a07a
1003a238      [0x2] =  0x1003a0cb
1003a23c      [0x3] =  0x1003a16f
1003a240  }

1003a240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003a2d0    int32_t sub_1003a2d0(void* arg1, int32_t* arg2, char** arg3, void** arg4)

1003a2e0  char* ebx = nullptr
1003a2e0  
1003a2e6  if (arg2[2] != 0)
1003a301      j_sub_1003a000(arg1, arg2, arg3, arg4)
1003a313      return 1
1003a313  
1003a317  int32_t var_630[0x80]
1003a317  
1003a317  if (arg2[3] != 0)
1003a32c      int32_t result = j_sub_10039630(arg1, arg2, &var_630, 0x80)
1003a32c      
1003a336      if (result == 0)
1003a342          return result
1003a342  
1003a343  char* edi = arg2[5]
1003a346  char* var_634 = nullptr
1003a34c  char edx
1003a34c  
1003a34c  if (edi != 0)
1003a359      while (true)
1003a359          int32_t eax_2
1003a359          
1003a359          if (*(edi + 0x400) == 4)
1003a364              eax_2 = j_sub_10039df0(arg2, edi)
1003a364          
1003a36e          if (*(edi + 0x400) != 4 || eax_2 s< 0)
1003a3ae              void* esi_1 = &data_1005f630
1003a3b3              char* eax_4 = edi
1003a3b5              int32_t eax_6
1003a3b5              
1003a3b5              while (true)
1003a3b5                  edx = *eax_4
1003a3b9                  char temp0_1 = *esi_1
1003a3b9                  bool c_1 = edx u< temp0_1
1003a3b9                  
1003a3bb                  if (edx == temp0_1)
1003a3bf                      if (edx == 0)
1003a3d5                          eax_6 = 0
1003a3d7                          break
1003a3d7                      
1003a3c1                      edx = eax_4[1]
1003a3c6                      char temp6_1 = *(esi_1 + 1)
1003a3c6                      c_1 = edx u< temp6_1
1003a3c6                      
1003a3c9                      if (edx == temp6_1)
1003a3cb                          eax_4 = &eax_4[2]
1003a3ce                          esi_1 += 2
1003a3ce                          
1003a3d3                          if (edx != 0)
1003a3d3                              continue
1003a3d3                          
1003a3d5                          eax_6 = 0
1003a3d7                          break
1003a3d7                  
1003a3d9                  bool c_2 = unimplemented  {sbb eax, eax}
1003a3db                  eax_6 = sbb.d(sbb.d(eax_4, eax_4, c_1), 0xffffffff, c_2)
1003a3db                  break
1003a3db              
1003a3e0              char* var_648_6
1003a3e0              
1003a3e0              if (eax_6 != 0)
1003a445                  var_648_6 = edi
1003a446                  label_1003a446:
1003a446                  char* eax_10 = j_sub_10039460(var_648_6)
1003a44e                  *(eax_10 + 0x428) = 0
1003a44e                  
1003a45a                  if (ebx == 0)
1003a464                      var_634 = eax_10
1003a45a                  else
1003a45c                      *(ebx + 0x428) = eax_10
1003a45c                  
1003a468                  ebx = eax_10
1003a3e0              else
1003a3e2                  char* eax_7 = *(edi + 0x428)
1003a3ea                  int32_t eax_9
1003a3ea                  
1003a3ea                  if (eax_7 != 0)
1003a3f5                      eax_9 = j_sub_10039df0(arg2, eax_7)
1003a3f5                  
1003a3ff                  if (eax_7 != 0 && eax_9 s>= 0)
1003a405                      edi = *(edi + 0x428)
1003a414                      void var_430
1003a414                      j_sub_10039a70(var_630[eax_9], &var_430)
1003a42b                      var_648_6 = &var_430
1003a42c                      goto label_1003a446
1003a42c                  
1003a43b                  j_sub_10039270(arg1, "stringizing operator without def…")
1003a36e          else
1003a370              void* i = var_630[eax_2]
1003a370              
1003a378              while (i != 0)
1003a37f                  char* eax_3 = j_sub_10039460(i)
1003a389                  *(eax_3 + 0x428) = 0
1003a389                  
1003a38f                  if (ebx == 0)
1003a399                      var_634 = eax_3
1003a38f                  else
1003a391                      *(ebx + 0x428) = eax_3
1003a391                  
1003a39d                  i = *(i + 0x428)
1003a3a3                  ebx = eax_3
1003a3a3          
1003a46a          edi = *(edi + 0x428)
1003a46a          
1003a472          if (edi == 0)
1003a472              break
1003a472  
1003a478  char* edi_1 = var_634
1003a478  
1003a47e  if (edi_1 != 0)
1003a484      while (true)
1003a484          char* ebp_1 = *(edi_1 + 0x428)
1003a484          
1003a48c          if (ebp_1 == 0)
1003a530              edi_1 = ebp_1
1003a48c          else
1003a492              void* esi_2 = &data_1005f5f4
1003a497              char* eax_11 = ebp_1
1003a499              int32_t eax_14
1003a499              
1003a499              while (true)
1003a499                  edx = *eax_11
1003a49d                  char temp1_1 = *esi_2
1003a49d                  bool c_3 = edx u< temp1_1
1003a49d                  
1003a49f                  if (edx == temp1_1)
1003a4a3                      if (edx == 0)
1003a4b9                          eax_14 = 0
1003a4bb                          break
1003a4bb                      
1003a4a5                      edx = eax_11[1]
1003a4aa                      char temp7_1 = *(esi_2 + 1)
1003a4aa                      c_3 = edx u< temp7_1
1003a4aa                      
1003a4ad                      if (edx == temp7_1)
1003a4af                          eax_11 = &eax_11[2]
1003a4b2                          esi_2 += 2
1003a4b2                          
1003a4b7                          if (edx != 0)
1003a4b7                              continue
1003a4b7                          
1003a4b9                          eax_14 = 0
1003a4bb                          break
1003a4bb                  
1003a4df                  bool c_4 = unimplemented  {sbb eax, eax}
1003a4e1                  eax_14 = sbb.d(sbb.d(eax_11, eax_11, c_3), 0xffffffff, c_4)
1003a4e1                  break
1003a4e1              
1003a4e6              if (eax_14 != 0)
1003a530                  edi_1 = ebp_1
1003a4e6              else
1003a4e8                  void* esi_3 = *(ebp_1 + 0x428)
1003a4e8                  
1003a4f0                  if (esi_3 == 0)
1003a530                      edi_1 = ebp_1
1003a4f0                  else
1003a4fe                      if (j_sub_10039b50(edi_1, esi_3) == 0)
1003a5a7                          void* var_648_11 = esi_3
1003a5a8                          char* var_64c_9 = edi_1
1003a5af                          j_sub_10039200(arg1, "can't merge %s with %s")
1003a5c3                          return 0
1003a5c3                      
1003a50b                      j_sub_100394a0(*(edi_1 + 0x428))
1003a51b                      *(edi_1 + 0x428) = *(esi_3 + 0x428)
1003a51b                      
1003a521                      if (esi_3 == ebx)
1003a523                          ebx = edi_1
1003a523                      
1003a526                      j_sub_100394a0(esi_3)
1003a526          
1003a534          if (edi_1 == 0)
1003a534              break
1003a534      
1003a53a      edi_1 = var_634
1003a53a  
1003a553  *arg3 = edi_1
1003a555  *arg4 = ebx
1003a55a  int32_t i_1 = 0
1003a55a  
1003a55e  if (arg2[3] s> 0)
1003a560      int32_t (* ebp_2)[0x80] = &var_630
1003a560      
1003a58e      do
1003a564          void* j_1 = *ebp_2
1003a564          
1003a569          if (j_1 != 0)
1003a57e              void* j
1003a57e              
1003a57e              do
1003a56b                  j = *(j_1 + 0x428)
1003a572                  j_sub_100394a0(j_1)
1003a57a                  j_1 = j
1003a57e              while (j != 0)
1003a57e          
1003a587          i_1 += 1
1003a588          ebp_2 = &(*ebp_2)[1]
1003a58e      while (i_1 s< arg2[3])
1003a58e  
1003a59f  return 1

1003a5c4              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
1003a5e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003a680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003a690    int32_t sub_1003a690(void* arg1, char* arg2)

1003a699  void* esi = arg1
1003a699  
1003a6b7  if (j_sub_1003a2d0(esi, arg2, &arg2, &arg1) != 0 && arg2 != 0)
1003a6b9      void* eax_2 = arg1
1003a6b9      
1003a6bf      if (eax_2 != 0)
1003a6c7          *(eax_2 + 0x428) = *(esi + 0x210)
1003a6d1          *(esi + 0x210) = arg2
1003a6dd          return 1
1003a6dd  
1003a6e1  return 0

1003a6e2        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1003a700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003a710    char* sub_1003a710(char* arg1)

1003a715  char* edx = arg1
1003a715  
1003a71a  if (*arg1 != 0)
1003a759      do
1003a71e          int32_t eax
1003a71e          eax.b = *edx
1003a71e          
1003a726          if (eax.b == 0x5c || eax.b == 0x2f)
1003a728              eax.b = edx[1]
1003a72b              void* edi_1 = &edx[1]
1003a72b              
1003a734              if (eax.b == 0x5c || eax.b == 0x2f)
1003a739                  int32_t i = 0xffffffff
1003a739                  
1003a73e                  while (i != 0)
1003a73e                      bool cond:1_1 = 0 != *edi_1
1003a73e                      edi_1 += 1
1003a73e                      i -= 1
1003a73e                      
1003a73e                      if (not(cond:1_1))
1003a73e                          break
1003a73e                  
1003a740                  int32_t ecx = not.d(i)
1003a74d                  int32_t esi_2
1003a74d                  int32_t edi_4
1003a74d                  edi_4, esi_2 =
1003a74d                      __builtin_memcpy(dest: edx, src: edi_1 - ecx, n: ecx u>> 2 << 2)
1003a754                  __builtin_memcpy(dest: edi_4, src: esi_2, n: ecx & 3)
1003a734              else
1003a736                  edx = &edx[1]
1003a726          else
1003a736              edx = &edx[1]
1003a759      while (*edx != 0)
1003a759  
1003a75f  char* result = arg1
1003a75f  
1003a764  if (*arg1 != 0)
1003a77b      char i_1
1003a77b      
1003a77b      do
1003a766          i_1 = *result
1003a766          
1003a770          if (i_1 == 0x2f || i_1 == 0x5c)
1003a772              *result = 0x5c
1003a772          
1003a775          i_1 = result[1]
1003a778          result = &result[1]
1003a77b      while (i_1 != 0)
1003a77b  
1003a77d  return result

1003a77e                                                                                            90 90                                ..
1003a780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003a7a0    int32_t sub_1003a7a0(void* arg1)

1003a7b9  if (*(arg1 + 0x220) s> 0)
1003a7ca      return 1
1003a7ca  
1003a7ed  char var_430[0x400]
1003a7ed  int32_t var_c
1003a7ed  
1003a7ed  if (j_sub_100394c0(arg1, &var_430) == 0 || var_c s> 0)
1003aa42      label_1003aa42:
1003aa48      j_sub_10039200(arg1, "#include without file name")
1003aa5c      return 0
1003aa5c  
1003a7fd  char var_5cc[0x6c]
1003a7fd  int32_t var_30
1003a7fd  int32_t* eax_7
1003a7fd  
1003a7fd  if (var_30 != 1)
1003a8b5      if (var_30 != 5 || var_430[0] != 0x3c)
1003a8a7          goto label_1003aa42
1003a8a7      
1003a8bb      void* edi_9 = arg1 + 0x104
1003a8c1      int32_t i = 0xffffffff
1003a8c1      
1003a8ca      while (i != 0)
1003a8ca          bool cond:3_1 = 0 != *edi_9
1003a8ca          edi_9 += 1
1003a8ca          i -= 1
1003a8ca          
1003a8ca          if (not(cond:3_1))
1003a8ca              break
1003a8ca      
1003a8cc      int32_t ecx_10 = not.d(i)
1003a8d9      int32_t esi_7
1003a8d9      int32_t edi_11
1003a8d9      edi_11, esi_7 =
1003a8d9          __builtin_memcpy(dest: &var_5cc, src: edi_9 - ecx_10, n: ecx_10 u>> 2 << 2)
1003a8e0      __builtin_memcpy(dest: edi_11, src: esi_7, n: ecx_10 & 3)
1003a8e0      
1003a8f7      if (j_sub_100394c0(arg1, &var_430) != 0)
1003a941          int32_t i_1
1003a941          
1003a941          do
1003a902              if (var_c s> 0)
1003a94e                  j_sub_100395f0(arg1, &var_430)
1003a953                  break
1003a953              
1003a915              if (var_30 == 5 && var_430[0] == 0x3e)
1003a915                  goto label_1003a96d
1003a915              
1003a929              sub_10044cb0(&var_5cc, &var_430, 0x104)
1003a937              i_1 = j_sub_100394c0(arg1, &var_430)
1003a941          while (i_1 != 0)
1003a941      
1003a95d      if (var_430[0] != 0x3e)
1003a965          j_sub_10039270(arg1, "#include missing trailing >")
1003a965      
1003a96d      label_1003a96d:
1003a96d      char (* edi_12)[0x6c] = &var_5cc
1003a971      int32_t i_2 = 0xffffffff
1003a971      
1003a976      while (i_2 != 0)
1003a976          bool cond:4_1 = 0 != *edi_12
1003a976          edi_12 = &(*edi_12)[1]
1003a976          i_2 -= 1
1003a976          
1003a976          if (not(cond:4_1))
1003a976              break
1003a976      
1003a97b      if (not.d(i_2) == 1)
1003aa48          j_sub_10039200(arg1, "#include without file name betwe…")
1003aa5c          return 0
1003aa5c      
1003a98c      j_sub_1003a710(&var_5cc)
1003a99a      eax_7 = j_sub_100401a0(&var_5cc, nullptr, nullptr)
1003a7fd  else
1003a80b      j_sub_1003fcb0(&var_430)
1003a818      j_sub_1003a710(&var_430)
1003a829      int32_t* eax_5 = j_sub_100401a0(&var_430, nullptr, nullptr)
1003a829      
1003a835      if (eax_5 != 0)
1003aa0a          j_sub_100393e0(arg1, eax_5)
1003aa21          return 1
1003aa21      
1003a83b      void* edi_1 = arg1 + 0x104
1003a841      int32_t i_3 = 0xffffffff
1003a841      
1003a844      while (i_3 != 0)
1003a844          bool cond:0_1 = eax_5.b != *edi_1
1003a844          edi_1 += 1
1003a844          i_3 -= 1
1003a844          
1003a844          if (not(cond:0_1))
1003a844              break
1003a844      
1003a846      int32_t ecx_1 = not.d(i_3)
1003a85b      int32_t esi_3
1003a85b      int32_t edi_3
1003a85b      edi_3, esi_3 =
1003a85b          __builtin_memcpy(dest: &var_5cc, src: edi_1 - ecx_1, n: ecx_1 u>> 2 << 2)
1003a865      __builtin_memcpy(dest: edi_3, src: esi_3, n: ecx_1 & 3)
1003a867      char (* edi_4)[0x400] = &var_430
1003a86e      int32_t i_4 = 0xffffffff
1003a86e      
1003a871      while (i_4 != 0)
1003a871          bool cond:1_1 = 0 != *edi_4
1003a871          edi_4 = &(*edi_4)[1]
1003a871          i_4 -= 1
1003a871          
1003a871          if (not(cond:1_1))
1003a871              break
1003a871      
1003a873      int32_t ecx_5 = not.d(i_4)
1003a87c      char (* edi_6)[0x6c] = &var_5cc
1003a87e      int32_t i_5 = 0xffffffff
1003a87e      
1003a881      while (i_5 != 0)
1003a881          bool cond:2_1 = 0 != *edi_6
1003a881          edi_6 = &(*edi_6)[1]
1003a881          i_5 -= 1
1003a881          
1003a881          if (not(cond:2_1))
1003a881              break
1003a881      
1003a889      int32_t esi_5
1003a889      int32_t edi_8
1003a889      edi_8, esi_5 =
1003a889          __builtin_memcpy(dest: edi_6 - 1, src: edi_4 - ecx_5, n: ecx_5 u>> 2 << 2)
1003a895      __builtin_memcpy(dest: edi_8, src: esi_5, n: ecx_5 & 3)
1003a897      eax_7 = j_sub_100401a0(&var_5cc, nullptr, nullptr)
1003a897  
1003a9a2  int32_t* esi_1 = eax_7
1003a9a2  
1003a9a6  if (esi_1 == 0)
1003a9b4      void* var_4c8
1003a9b4      int32_t ecx_16
1003a9b4      int32_t edi_13
1003a9b4      edi_13, ecx_16 = __memfill_u32(&var_4c8, eax_7, 0x26)
1003a9c3      int32_t eax_11 = j_sub_10041f60(&var_5cc, &var_4c8)
1003a9cd      void* var_4c4
1003a9cd      char var_4c0[0x90]
1003a9cd      
1003a9cd      if (eax_11 != 0)
1003a9ec          esi_1 = j_sub_100401a0(&var_4c0, var_4c8, var_4c4)
1003a9ec      
1003a9f3      if (eax_11 == 0 || esi_1 == 0)
1003aa26          char (* var_5e0_9)[0x6c] = &var_5cc
1003aa2d          j_sub_10039200(arg1, "file %s not found")
1003aa41          return 0
1003aa41      
1003aa00      StrCopyFixed(esi_1, &var_5cc, 0x104)
1003aa00  
1003aa0a  j_sub_100393e0(arg1, esi_1)
1003aa21  return 1

1003aa5d                                                                                         90 90 90                               ...
1003aa60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003aa80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003aaa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003aac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003aae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003ab00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003ab10    int32_t sub_1003ab10(void* arg1, char* arg2)

1003ab1e  int32_t ebp = 0
1003ab1e  
1003ab2a  if (j_sub_100394c0(arg1, arg2) != 0)
1003ab32      while (true)
1003ab32          if (*(arg2 + 0x424) s> ebp)
1003ab84              j_sub_100395f0(arg1, arg2)
1003ab92              return 0
1003ab92          
1003ab34          ebp = 1
1003ab39          void* esi_1 = &data_1005f6c0
1003ab3e          char* eax_1 = arg2
1003ab40          int32_t eax_3
1003ab40          
1003ab40          while (true)
1003ab40              char edx_1 = *eax_1
1003ab44              char temp0_1 = *esi_1
1003ab44              bool c_1 = edx_1 u< temp0_1
1003ab44              
1003ab46              if (edx_1 == temp0_1)
1003ab4a                  if (edx_1 == 0)
1003ab60                      eax_3 = 0
1003ab62                      break
1003ab62                  
1003ab4c                  edx_1 = eax_1[1]
1003ab51                  char temp3_1 = *(esi_1 + 1)
1003ab51                  c_1 = edx_1 u< temp3_1
1003ab51                  
1003ab54                  if (edx_1 == temp3_1)
1003ab56                      eax_1 = &eax_1[2]
1003ab59                      esi_1 += 2
1003ab59                      
1003ab5e                      if (edx_1 != 0)
1003ab5e                          continue
1003ab5e                      
1003ab60                      eax_3 = 0
1003ab62                      break
1003ab62              
1003ab64              bool c_2 = unimplemented  {sbb eax, eax}
1003ab66              eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1003ab66              break
1003ab66          
1003ab6b          if (eax_3 != 0)
1003ab9c              return 1
1003ab9c          
1003ab79          if (j_sub_100394c0(arg1, arg2) == 0)
1003ab79              break
1003ab79  
1003ab81  return 0

1003ab9d                                                                                         90 90 90                               ...
1003aba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003abc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003abd0    int32_t sub_1003abd0(void* arg1)

1003abe6  int32_t result
1003abe6  result.b = *(arg1 + 0x41c) - *(arg1 + 0x418) s> 0
1003abe9  return result

1003abea                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

1003ac00    void* sub_1003ac00(void* arg1)

1003ac06  *(arg1 + 0x418) = 0
1003ac0c  *(arg1 + 0x41c) = 0
1003ac12  *(arg1 + 0x424) = 0
1003ac18  return arg1

1003ac19                                                                             90 90 90 90 90 90 90                           .......
1003ac20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003ac30    int32_t sub_1003ac30(void* arg1)

1003ac46  if (*(arg1 + 0x220) s> 0)
1003ac54      return 1
1003ac54  
1003ac5b  char var_430[0x400]
1003ac5b  int32_t eax_2
1003ac5b  int32_t ecx
1003ac5b  int32_t edx
1003ac5b  eax_2, ecx, edx = j_sub_1003ab10(arg1, &var_430)
1003ac5b  
1003ac65  if (eax_2 == 0)
1003ac6d      j_sub_10039200(arg1, "undef without name")
1003ac7e      return 0
1003ac7e  
1003ac87  int32_t var_30
1003ac87  
1003ac87  if (var_30 != 4)
1003ac8f      j_sub_100395f0(arg1, &var_430)
1003ac98      char (* __saved_edi)[0x400] = &var_430
1003ac9f      j_sub_10039200(arg1, "expected name, found %s")
1003acb0      return 0
1003acb0  
1003acb1  int32_t ebx
1003acb1  int32_t var_438_2 = ebx
1003acb9  int32_t eax_6 = j_sub_10039c30(&var_430, edx, ecx, &var_430)
1003acbe  int32_t ecx_1 = *(arg1 + 0x218)
1003acc7  int32_t* ebp = nullptr
1003acc9  int32_t* edi = *(ecx_1 + (eax_6 << 2))
1003accc  int32_t* edx_1 = ecx_1 + (eax_6 << 2)
1003accc  
1003acd1  if (edi != 0)
1003acd7      while (true)
1003acd7          char* eax_7 = *edi
1003acd9          char (* esi_1)[0x400] = &var_430
1003acdd          int32_t eax_9
1003acdd          
1003acdd          while (true)
1003acdd              ebx.b = *eax_7
1003acdf              ecx_1.b = ebx.b
1003ace1              char temp0_1 = *esi_1
1003ace1              bool c_1 = ebx.b u< temp0_1
1003ace1              
1003ace3              if (ebx.b == temp0_1)
1003ace7                  if (ecx_1.b == 0)
1003acfd                      eax_9 = 0
1003acff                      break
1003acff                  
1003ace9                  ebx.b = eax_7[1]
1003acec                  ecx_1.b = ebx.b
1003acee                  char temp3_1 = (*esi_1)[1]
1003acee                  c_1 = ebx.b u< temp3_1
1003acee                  
1003acf1                  if (ebx.b == temp3_1)
1003acf3                      eax_7 = &eax_7[2]
1003acf6                      esi_1 = &(*esi_1)[2]
1003acf6                      
1003acfb                      if (ecx_1.b != 0)
1003acfb                          continue
1003acfb                      
1003acfd                      eax_9 = 0
1003acff                      break
1003acff              
1003ad01              bool c_2 = unimplemented  {sbb eax, eax}
1003ad03              eax_9 = sbb.d(sbb.d(eax_7, eax_7, c_1), 0xffffffff, c_2)
1003ad03              break
1003ad03          
1003ad08          if (eax_9 == 0)
1003ad08              break
1003ad08          
1003ad0a          ebp = edi
1003ad0c          edi = edi[7]
1003ad0c          
1003ad11          if (edi == 0)
1003ad22              return 1
1003ad22      
1003ad27      if ((edi[1].b & 1) != 0)
1003ad34          char (* var_444_1)[0x400] = &var_430
1003ad3b          j_sub_10039270(arg1, "can't undef %s")
1003ad52          return 1
1003ad52      
1003ad55      if (ebp == 0)
1003ad62          *edx_1 = edi[7]
1003ad55      else
1003ad5a          ebp[7] = edi[7]
1003ad5a      
1003ad65      j_sub_10039e70(edi)
1003ad65  
1003ad7c  return 1

1003ad7d                                                                                         90 90 90                               ...
1003ad80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003ada0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003adc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003ade0    int32_t sub_1003ade0(void* arg1)

1003adf9  if (*(arg1 + 0x220) s> 0)
1003ae0a      return 1
1003ae0a  
1003ae1b  char var_430[0x400]
1003ae1b  void* var_448_1
1003ae1b  char* var_444_1
1003ae1b  
1003ae1b  if (j_sub_1003ab10(arg1, &var_430) != 0)
1003ae30      int32_t var_30
1003ae30      
1003ae30      if (var_30 != 4)
1003ae38          j_sub_100395f0(arg1, &var_430)
1003ae41          char (* var_44c_1)[0x400] = &var_430
1003ae48          j_sub_10039200(arg1, "expected name after #define, fou…")
1003ae5c          return 0
1003ae5c      
1003ae69      int32_t* eax_3 = j_sub_10039ce0(*(arg1 + 0x218), &var_430)
1003ae69      
1003ae73      if (eax_3 == 0)
1003ae73          goto label_1003aedb
1003ae73      
1003ae79      if ((eax_3[1].b & 1) != 0)
1003ae7f          char (* var_444_4)[0x400] = &var_430
1003ae86          j_sub_10039200(arg1, "can't redefine %s")
1003ae9a          return 0
1003ae9a      
1003ae9f      char (* var_444_5)[0x400] = &var_430
1003aea6      j_sub_10039270(arg1, "redefinition of %s")
1003aeb1      j_sub_100395f0(arg1, &var_430)
1003aeb1      
1003aec1      if (j_sub_1003ac30(arg1) != 0)
1003aed3          j_sub_10039ce0(*(arg1 + 0x218), &var_430)
1003aedb          label_1003aedb:
1003aedb          char (* edi_1)[0x400] = &var_430
1003aedf          int32_t i = 0xffffffff
1003aedf          
1003aee4          while (i != 0)
1003aee4              bool cond:0_1 = 0 != *edi_1
1003aee4              edi_1 = &(*edi_1)[1]
1003aee4              i -= 1
1003aee4              
1003aee4              if (not(cond:0_1))
1003aee4                  break
1003aee4          
1003aeec          int32_t* s = j_sub_10038f90(not.d(i) + 0x20)
1003aefc          __builtin_memset(s, c: 0, n: 0x20)
1003af01          char (* edi_3)[0x400] = &var_430
1003af05          int32_t i_1 = 0xffffffff
1003af08          *s = &s[8]
1003af08          
1003af0b          while (i_1 != 0)
1003af0b              bool cond:1_1 = 0 != *edi_3
1003af0b              edi_3 = &(*edi_3)[1]
1003af0b              i_1 -= 1
1003af0b              
1003af0b              if (not(cond:1_1))
1003af0b                  break
1003af0b          
1003af0d          int32_t ecx_4 = not.d(i_1)
1003af1a          int32_t esi_2
1003af1a          int32_t edi_6
1003af1a          edi_6, esi_2 =
1003af1a              __builtin_memcpy(dest: &s[8], src: edi_3 - ecx_4, n: ecx_4 u>> 2 << 2)
1003af21          __builtin_memcpy(dest: edi_6, src: esi_2, n: ecx_4 & 3)
1003af32          j_sub_10039cb0(s, *(arg1 + 0x218))
1003af32          
1003af47          if (j_sub_1003ab10(arg1, &var_430) == 0)
1003af58              return 1
1003af58          
1003af68          if (j_sub_1003abd0(&var_430) != 0)
1003b128              label_1003b128:
1003b128              void* esi_10 = nullptr
1003b16d              void* eax_27
1003b16d              int32_t i_2
1003b16d              
1003b16d              do
1003b12f                  eax_27 = j_sub_10039460(&var_430)
1003b137                  j_sub_1003ac00(eax_27)
1003b141                  *(eax_27 + 0x428) = 0
1003b141                  
1003b147                  if (esi_10 == 0)
1003b151                      s[5] = eax_27
1003b147                  else
1003b149                      *(esi_10 + 0x428) = eax_27
1003b149                  
1003b161                  esi_10 = eax_27
1003b163                  i_2 = j_sub_1003ab10(arg1, &var_430)
1003b16d              while (i_2 != 0)
1003b16f              char* eax_28 = s[5]
1003b172              void* esi_11 = &data_1005f5f4
1003b177              int32_t eax_30
1003b177              char edx_6
1003b177              
1003b177              while (true)
1003b177                  edx_6 = *eax_28
1003b17b                  char temp4_1 = *esi_11
1003b17b                  bool c_7 = edx_6 u< temp4_1
1003b17b                  
1003b17d                  if (edx_6 == temp4_1)
1003b181                      if (edx_6 == 0)
1003b197                          eax_30 = 0
1003b199                          break
1003b199                      
1003b183                      edx_6 = eax_28[1]
1003b188                      char temp7_1 = *(esi_11 + 1)
1003b188                      c_7 = edx_6 u< temp7_1
1003b188                      
1003b18b                      if (edx_6 == temp7_1)
1003b18d                          eax_28 = &eax_28[2]
1003b190                          esi_11 += 2
1003b190                          
1003b195                          if (edx_6 != 0)
1003b195                              continue
1003b195                          
1003b197                          eax_30 = 0
1003b199                          break
1003b199                  
1003b19b                  bool c_8 = unimplemented  {sbb eax, eax}
1003b19d                  eax_30 = sbb.d(sbb.d(eax_28, eax_28, c_7), 0xffffffff, c_8)
1003b19d                  break
1003b19d              
1003b1a2              if (eax_30 != 0)
1003b1a4                  void* esi_12 = &data_1005f5f4
1003b1a9                  void* eax_31 = eax_27
1003b1ab                  int32_t eax_33
1003b1ab                  
1003b1ab                  while (true)
1003b1ab                      edx_6 = *eax_31
1003b1af                      char temp8_1 = *esi_12
1003b1af                      bool c_9 = edx_6 u< temp8_1
1003b1af                      
1003b1b1                      if (edx_6 == temp8_1)
1003b1b5                          if (edx_6 == 0)
1003b1cb                              eax_33 = 0
1003b1cd                              break
1003b1cd                          
1003b1b7                          edx_6 = *(eax_31 + 1)
1003b1bc                          char temp11_1 = *(esi_12 + 1)
1003b1bc                          c_9 = edx_6 u< temp11_1
1003b1bc                          
1003b1bf                          if (edx_6 == temp11_1)
1003b1c1                              eax_31 += 2
1003b1c4                              esi_12 += 2
1003b1c4                              
1003b1c9                              if (edx_6 != 0)
1003b1c9                                  continue
1003b1c9                              
1003b1cb                              eax_33 = 0
1003b1cd                              break
1003b1cd                      
1003b1cf                      bool c_10 = unimplemented  {sbb eax, eax}
1003b1d1                      eax_33 = sbb.d(sbb.d(eax_31, eax_31, c_9), 0xffffffff, c_10)
1003b1d1                      break
1003b1d1                  
1003b1d6                  if (eax_33 != 0)
1003b1e7                      return 1
1003b1e7              
1003b1e8              var_444_1 = "define with misplaced ##"
1003af68          else
1003af6e              void* esi_4 = &data_1005d334
1003af73              char (* eax_11)[0x400] = &var_430
1003af77              int32_t eax_13
1003af77              
1003af77              while (true)
1003af77                  char edx_2 = *eax_11
1003af7b                  char temp0_1 = *esi_4
1003af7b                  bool c_1 = edx_2 u< temp0_1
1003af7b                  
1003af7d                  if (edx_2 == temp0_1)
1003af81                      if (edx_2 == 0)
1003af97                          eax_13 = 0
1003af99                          break
1003af99                      
1003af83                      edx_2 = (*eax_11)[1]
1003af88                      char temp3_1 = *(esi_4 + 1)
1003af88                      c_1 = edx_2 u< temp3_1
1003af88                      
1003af8b                      if (edx_2 == temp3_1)
1003af8d                          eax_11 = &(*eax_11)[2]
1003af90                          esi_4 += 2
1003af90                          
1003af95                          if (edx_2 != 0)
1003af95                              continue
1003af95                          
1003af97                          eax_13 = 0
1003af99                          break
1003af99                  
1003af9b                  bool c_2 = unimplemented  {sbb eax, eax}
1003af9d                  eax_13 = sbb.d(sbb.d(eax_11, eax_11, c_1), 0xffffffff, c_2)
1003af9d                  break
1003af9d              
1003afa2              if (eax_13 != 0)
1003afa2                  goto label_1003b128
1003afa2              
1003afa8              void* esi_5 = arg1
1003afb5              void* edi_7 = nullptr
1003afb5              
1003afc1              if (j_sub_1003db20(esi_5, U"),(") != 0)
1003b10c                  label_1003b10c:
1003b10c                  
1003b116                  if (j_sub_1003ab10(esi_5, &var_430) == 0)
1003b127                      return 1
1003b127                  
1003b116                  goto label_1003b128
1003b116              
1003afcd              while (true)
1003afd7                  if (j_sub_1003ab10(esi_5, &var_430) == 0)
1003b0c9                      var_444_1 = "expected define parameter"
1003b0ce                      var_448_1 = esi_5
1003b0cf                      goto label_1003b1f5_1
1003b0cf                  
1003afe5                  if (var_30 != 4)
1003b0d4                      var_444_1 = "invalid define parameter"
1003b0d9                      var_448_1 = esi_5
1003b0da                      goto label_1003b1f5_1
1003b0da                  
1003affb                  if (j_sub_10039df0(s, &var_430) s>= 0)
1003b0df                      var_444_1 = "two the same define parameters"
1003b0e4                      var_448_1 = esi_5
1003b0e5                      goto label_1003b1f5_1
1003b0e5                  
1003b006                  void* eax_17 = j_sub_10039460(&var_430)
1003b00e                  j_sub_1003ac00(eax_17)
1003b018                  *(eax_17 + 0x428) = 0
1003b018                  
1003b01e                  if (edi_7 == 0)
1003b028                      s[4] = eax_17
1003b01e                  else
1003b020                      *(edi_7 + 0x428) = eax_17
1003b020                  
1003b02e                  edi_7 = eax_17
1003b03e                  s[3] += 1
1003b03e                  
1003b04b                  if (j_sub_1003ab10(arg1, &var_430) == 0)
1003b0ea                      var_444_1 = "define parameters not terminated"
1003b0ef                      var_448_1 = arg1
1003b0f0                      goto label_1003b1f5_1
1003b0f0                  
1003b051                  void* esi_8 = &data_1005d32c
1003b056                  char (* eax_19)[0x400] = &var_430
1003b05a                  int32_t eax_21
1003b05a                  char edx_5
1003b05a                  
1003b05a                  while (true)
1003b05a                      edx_5 = *eax_19
1003b05e                      char temp12_1 = *esi_8
1003b05e                      bool c_3 = edx_5 u< temp12_1
1003b05e                      
1003b060                      if (edx_5 == temp12_1)
1003b064                          if (edx_5 == 0)
1003b07a                              eax_21 = 0
1003b07c                              break
1003b07c                          
1003b066                          edx_5 = (*eax_19)[1]
1003b06b                          char temp15_1 = *(esi_8 + 1)
1003b06b                          c_3 = edx_5 u< temp15_1
1003b06b                          
1003b06e                          if (edx_5 == temp15_1)
1003b070                              eax_19 = &(*eax_19)[2]
1003b073                              esi_8 += 2
1003b073                              
1003b078                              if (edx_5 != 0)
1003b078                                  continue
1003b078                              
1003b07a                              eax_21 = 0
1003b07c                              break
1003b07c                      
1003b07e                      bool c_4 = unimplemented  {sbb eax, eax}
1003b080                      eax_21 = sbb.d(sbb.d(eax_19, eax_19, c_3), 0xffffffff, c_4)
1003b080                      break
1003b080                  
1003b085                  if (eax_21 == 0)
1003b0ff                      esi_5 = arg1
1003b0ff                      goto label_1003b10c
1003b0ff                  
1003b087                  void* esi_9 = &data_1005d330
1003b08c                  char (* eax_22)[0x400] = &var_430
1003b090                  int32_t eax_24
1003b090                  
1003b090                  while (true)
1003b090                      edx_5 = *eax_22
1003b094                      char temp16_1 = *esi_9
1003b094                      bool c_5 = edx_5 u< temp16_1
1003b094                      
1003b096                      if (edx_5 == temp16_1)
1003b09a                          if (edx_5 == 0)
1003b0b0                              eax_24 = 0
1003b0b2                              break
1003b0b2                          
1003b09c                          edx_5 = (*eax_22)[1]
1003b0a1                          char temp19_1 = *(esi_9 + 1)
1003b0a1                          c_5 = edx_5 u< temp19_1
1003b0a1                          
1003b0a4                          if (edx_5 == temp19_1)
1003b0a6                              eax_22 = &(*eax_22)[2]
1003b0a9                              esi_9 += 2
1003b0a9                              
1003b0ae                              if (edx_5 != 0)
1003b0ae                                  continue
1003b0ae                              
1003b0b0                              eax_24 = 0
1003b0b2                              break
1003b0b2                      
1003b0b4                      bool c_6 = unimplemented  {sbb eax, eax}
1003b0b6                      eax_24 = sbb.d(sbb.d(eax_22, eax_22, c_5), 0xffffffff, c_6)
1003b0b6                      break
1003b0b6                  
1003b0bb                  if (eax_24 != 0)
1003b0f5                      var_444_1 = "define not terminated"
1003b0fa                      break
1003b0fa                  
1003b0bd                  esi_5 = arg1
1003b0bd          
1003b1f5          label_1003b1f5:
1003b1f5          j_sub_10039200(arg1, var_444_1)
1003ae1b  else
1003ae1d      var_444_1 = "#define without name"
1003ae22      var_448_1 = arg1
1003b1f5      label_1003b1f5_1:
1003b1f5      j_sub_10039200(var_448_1, var_444_1)
1003b209  return 0

1003b20a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
1003b220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b2e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003b320    void* sub_1003b320(int32_t arg1)

1003b330  int32_t edi = arg1
1003b332  int32_t i = 0xffffffff
1003b332  
1003b337  while (i != 0)
1003b337      bool cond:0_1 = 0 != *edi
1003b337      edi += 1
1003b337      i -= 1
1003b337      
1003b337      if (not(cond:0_1))
1003b337          break
1003b337  
1003b343  void* eax = j_sub_10040380(arg1, not.d(i) - 1, "*extern")
1003b355  char s[0x20c]
1003b355  __builtin_memset(&s, c: 0, n: 0x658)
1003b366  StrCopyFixed(&s, "*extern", 0x104)
1003b370  void* var_44c = eax
1003b377  int32_t* eax_1 = j_sub_10039000(0x1000)
1003b388  int32_t eax_2 = j_sub_1003ade0(&s)
1003b39b  void* i_3
1003b39b  void* i_4
1003b39b  
1003b39b  for (void* i_1 = i_3; i_1 != 0; i_1 = i_4)
1003b39d      i_4 = *(i_1 + 0x428)
1003b3ab      j_sub_100394a0(i_1)
1003b3ab  
1003b3c5  void* result = nullptr
1003b3c7  int32_t i_2 = 0
1003b3c9  int32_t* ecx_2 = eax_1
1003b3c9  
1003b3d9  do
1003b3ce      if (*ecx_2 != 0)
1003b3dd          result = eax_1[i_2]
1003b3dd          break
1003b3dd      
1003b3d0      i_2 += 1
1003b3d1      ecx_2 = &ecx_2[1]
1003b3d9  while (i_2 s< 0x400)
1003b3d9  
1003b3e1  j_sub_100390b0(eax_1)
1003b3e7  j_sub_10040470(eax)
1003b3e7  
1003b3f1  if (eax_2 s> 0)
1003b3fe      return result
1003b3fe  
1003b408  int32_t var_444
1003b408  
1003b408  if (var_444 != 0)
1003b40b      j_sub_10039e70(result)
1003b40b  
1003b41e  return 0

1003b41f                                                                                               90                                 .
1003b420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003b460    int32_t* sub_1003b460(void* arg1, int32_t arg2)

1003b465  int32_t* result = j_sub_1003b320(arg2)
1003b465  
1003b46f  if (result == 0)
1003b471      return result
1003b471  
1003b47e  j_sub_10039cb0(result, *(arg1 + 0x218))
1003b48b  return 1

1003b48c                                      90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc              ....................

1003b4a0    void* sub_1003b4a0(int32_t arg1)

1003b4a5  void* result = j_sub_1003b320(arg1)
1003b4a5  
1003b4af  if (result == 0)
1003b4b1      return result
1003b4b1  
1003b4b8  *(result + 0x18) = data_10063a10
1003b4bb  data_10063a10 = result
1003b4c5  return 1

1003b4c6                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

1003b4e0    int32_t sub_1003b4e0(char* arg1)

1003b4ec  int32_t* eax = j_sub_10039d70(data_10063a10, arg1)
1003b4ec  
1003b4f6  if (eax == 0)
1003b509      return 0
1003b509  
1003b4f9  j_sub_10039e70(eax)
1003b506  return 1

1003b50a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

1003b520    void* sub_1003b520()

1003b527  void* i
1003b527  
1003b527  for (i = data_10063a10; i != 0; i = data_10063a10)
1003b52d      data_10063a10 = *(i + 0x18)
1003b533      j_sub_10039e70(i)
1003b533  
1003b544  return i

1003b545                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

1003b560    int32_t* sub_1003b560(int32_t* arg1)

1003b568  int32_t i = 0xffffffff
1003b56b  int32_t edi = *arg1
1003b56b  
1003b570  while (i != 0)
1003b570      bool cond:0_1 = 0 != *edi
1003b570      edi += 1
1003b570      i -= 1
1003b570      
1003b570      if (not(cond:0_1))
1003b570          break
1003b570  
1003b578  int32_t* result = j_sub_10038f90(not.d(i) + 0x20)
1003b57f  int32_t i_1 = 0xffffffff
1003b58a  *result = &result[8]
1003b58c  int32_t edi_1 = *arg1
1003b58c  
1003b58f  while (i_1 != 0)
1003b58f      bool cond:1_1 = 0 != *edi_1
1003b58f      edi_1 += 1
1003b58f      i_1 -= 1
1003b58f      
1003b58f      if (not(cond:1_1))
1003b58f          break
1003b58f  
1003b591  int32_t ecx_2 = not.d(i_1)
1003b59e  int32_t esi_1
1003b59e  int32_t edi_4
1003b59e  edi_4, esi_1 = __builtin_memcpy(dest: &result[8], src: edi_1 - ecx_2, n: ecx_2 u>> 2 << 2)
1003b5a5  __builtin_memcpy(dest: edi_4, src: esi_1, n: ecx_2 & 3)
1003b5aa  void* const edi_5 = nullptr
1003b5ac  result[1] = arg1[1]
1003b5b2  result[2] = arg1[2]
1003b5b8  result[3] = arg1[3]
1003b5bb  result[6] = 0
1003b5be  result[7] = 0
1003b5c1  result[5] = 0
1003b5c4  void* i_2 = arg1[5]
1003b5c4  
1003b5c9  if (i_2 != 0)
1003b5f7      do
1003b5cc          void* eax_2 = j_sub_10039460(i_2)
1003b5d4          *(eax_2 + 0x428) = 0
1003b5d4          
1003b5e0          if (edi_5 == 0)
1003b5ea              result[5] = eax_2
1003b5e0          else
1003b5e2              *(edi_5 + 0x428) = eax_2
1003b5e2          
1003b5ed          i_2 = *(i_2 + 0x428)
1003b5f3          edi_5 = eax_2
1003b5f7      while (i_2 != 0)
1003b5f7      
1003b5f9      edi_5 = nullptr
1003b5f9  
1003b5fb  result[4] = 0
1003b5fe  void* i_3 = arg1[4]
1003b5fe  
1003b603  while (i_3 != 0)
1003b606      void* eax_3 = j_sub_10039460(i_3)
1003b60e      *(eax_3 + 0x428) = 0
1003b60e      
1003b61a      if (edi_5 == 0)
1003b624          result[4] = eax_3
1003b61a      else
1003b61c          *(edi_5 + 0x428) = eax_3
1003b61c      
1003b627      i_3 = *(i_3 + 0x428)
1003b62d      edi_5 = eax_3
1003b62d  
1003b639  return result

1003b63a                                                                                90 90 90 90 90 90                            ......
1003b640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003b680    void sub_1003b680(void* arg1)

1003b689  for (int32_t* i = data_10063a10; i != 0; i = i[6])
1003b69e      j_sub_10039cb0(j_sub_1003b560(i), *(arg1 + 0x218))

1003b6b0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

1003b6c0    int32_t sub_1003b6c0(void* arg1, int32_t arg2)

1003b6de  char var_430[0x400]
1003b6de  
1003b6de  if (j_sub_1003ab10(arg1, &var_430) == 0)
1003b6e6      j_sub_10039200(arg1, "#ifdef without name")
1003b6f7      return 0
1003b6f7  
1003b700  int32_t var_30
1003b700  
1003b700  if (var_30 != 4)
1003b708      j_sub_100395f0(arg1, &var_430)
1003b711      char (* var_440)[0x400] = &var_430
1003b718      j_sub_10039200(arg1, "expected name after #ifdef, foun…")
1003b729      return 0
1003b729  
1003b737  int32_t* eax_3 = j_sub_10039ce0(*(arg1 + 0x218), &var_430)
1003b745  int32_t edx_1 = neg.d(eax_3)
1003b74f  int32_t ecx_1
1003b74f  ecx_1.b = arg2 == 8
1003b756  int32_t ebx
1003b756  ebx.b = ecx_1 == sbb.d(edx_1, edx_1, eax_3 != 0) + 1
1003b75e  j_sub_100392e0(arg1, arg2, ebx)
1003b773  return 1

1003b774                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1003b780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003b7b0    int32_t sub_1003b7b0(void* arg1)

1003b7bf  return j_sub_1003b6c0(arg1, 8)

1003b7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003b7d0    int32_t sub_1003b7d0(void* arg1)

1003b7df  return j_sub_1003b6c0(arg1, 0x10)

1003b7e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003b7f0    int32_t __fastcall sub_1003b7f0(int32_t arg1)

1003b7f0  int32_t var_4 = arg1
1003b7f6  void* arg_4
1003b7f6  void* esi = arg_4
1003b801  j_sub_10039350(esi, &arg_4, &var_4)
1003b806  void* eax = arg_4
1003b806  
1003b80f  if (eax == 0)
1003b817      j_sub_10039200(esi, "misplaced #else")
1003b823      return 0
1003b823  
1003b827  if (eax == 2)
1003b82f      j_sub_10039200(esi, "#else after #else")
1003b83b      return 0
1003b83b  
1003b844  int32_t edx
1003b844  edx.b = var_4 == 0
1003b84b  j_sub_100392e0(esi, 2, edx)
1003b85a  return 1

1003b85b                                                                                   90 90 90 90 90                             .....
1003b860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003b880    int32_t sub_1003b880(void* arg1)

1003b886  void* esi = arg1
1003b891  int32_t __saved_ecx
1003b891  j_sub_10039350(esi, &arg1, &__saved_ecx)
1003b891  
1003b89f  if (arg1 != 0)
1003b8bb      return 1
1003b8bb  
1003b8a7  j_sub_10039200(esi, "misplaced #endif")
1003b8b3  return 0

1003b8bc                                                                                      90 90 90 90                              ....
1003b8c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003b8d0    int32_t sub_1003b8d0(int32_t arg1)

1003b8da  if (arg1 - 5 u<= 0x26)
1003b8de      int32_t ecx_1
1003b8de      ecx_1.b = *(arg1 + &jump_table_1003b938[0xb]:3)
1003b8de      
1003b8e4      switch (ecx_1)
1003b8f0          case 0
1003b8f0              return 7
1003b8f6          case 1
1003b8f6              return 6
1003b902          case 2
1003b902              return 0xc
1003b8fc          case 3
1003b8fc              return 0xb
1003b908          case 4
1003b908              return 0xd
1003b90e          case 5
1003b90e              return 0xf
1003b914          case 6
1003b914              return 0xe
1003b91a          case 7
1003b91a              return 0xa
1003b920          case 8
1003b920              return 8
1003b926          case 9
1003b926              return 9
1003b92c          case 0xa
1003b92c              return 0x10
1003b932          case 0xb
1003b932              return 5
1003b932  
1003b935  return 0

1003b936                                                                    8b ff                                                ..
1003b938  uint32_t jump_table_1003b938[0xd] = 
1003b938  {
1003b938      [0x0] =  0x1003b8eb
1003b93c      [0x1] =  0x1003b8f1
1003b940      [0x2] =  0x1003b8fd
1003b944      [0x3] =  0x1003b8f7
1003b948      [0x4] =  0x1003b903
1003b94c      [0x5] =  0x1003b909
1003b950      [0x6] =  0x1003b90f
1003b954      [0x7] =  0x1003b915
1003b958      [0x8] =  0x1003b91b
1003b95c      [0x9] =  0x1003b921
1003b960      [0xa] =  0x1003b927
1003b964      [0xb] =  0x1003b92d
1003b968      [0xc] =  0x1003b933
1003b96c  }
1003b96c  uint8_t lookup_table_1003b96c[0x27] = 
1003b96c  {
1003b96c      [0x00] =  0x00
1003b96d      [0x01] =  0x01
1003b96e      [0x02] =  0x02
1003b96f      [0x03] =  0x02
1003b970      [0x04] =  0x03
1003b971      [0x05] =  0x03
1003b972      [0x06] =  0x0c
1003b973      [0x07] =  0x0c
1003b974      [0x08] =  0x0c
1003b975      [0x09] =  0x0c
1003b976      [0x0a] =  0x0c
1003b977      [0x0b] =  0x0c
1003b978      [0x0c] =  0x0c
1003b979      [0x0d] =  0x0c
1003b97a      [0x0e] =  0x0c
1003b97b      [0x0f] =  0x0c
1003b97c      [0x10] =  0x04
1003b97d      [0x11] =  0x04
1003b97e      [0x12] =  0x0c
1003b97f      [0x13] =  0x0c
1003b980      [0x14] =  0x0c
1003b981      [0x15] =  0x05
1003b982      [0x16] =  0x05
1003b983      [0x17] =  0x05
1003b984      [0x18] =  0x06
1003b985      [0x19] =  0x06
1003b986      [0x1a] =  0x0c
1003b987      [0x1b] =  0x07
1003b988      [0x1c] =  0x08
1003b989      [0x1d] =  0x09
1003b98a      [0x1e] =  0x0a
1003b98b      [0x1f] =  0x0a
1003b98c      [0x20] =  0x02
1003b98d      [0x21] =  0x02
1003b98e      [0x22] =  0x0c
1003b98f      [0x23] =  0x0c
1003b990      [0x24] =  0x0c
1003b991      [0x25] =  0x0b
1003b992      [0x26] =  0x0b
1003b993  }

1003b993                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1003b9a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003b9c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003b9e0    int32_t sub_1003b9e0(void* arg1, int32_t arg2, int32_t* arg3, int32_t* arg4, int32_t arg5)

1003b9ec  int32_t ebx = 0
1003b9ee  int32_t ecx = 0
1003b9f0  int32_t edx = 0
1003b9f2  int32_t* i_13 = nullptr
1003b9fb  int32_t s
1003b9fb  __builtin_memset(&s, c: 0, n: 0x18)
1003b9fb  
1003ba0f  if (arg3 != 0)
1003ba11      *arg3 = 0
1003ba11  
1003ba19  if (arg4 != 0)
1003ba1b      *arg4 = 0
1003ba1d      arg4[1] = 0
1003ba1d  
1003ba26  void* edi = arg2
1003ba28  int32_t* i_4
1003ba28  int32_t* i_5
1003ba28  void* var_34_3
1003ba28  char* var_30_2
1003ba28  
1003ba28  if (arg2 == 0)
1003be0d      label_1003be0d:
1003be0d      var_30_2 = "trailing operator in #if/#elif"
1003be12      var_34_3 = arg1
1003be27      label_1003be27:
1003be27      j_sub_10039200(var_34_3, var_30_2)
1003be2f      label_1003be2f:
1003be2f      s = 1
1003ba28  else
1003ba2e      while (true)
1003ba2e          int32_t eax_3 = *(edi + 0x400)
1003ba37          int32_t var_18_1
1003ba37          int32_t var_c_1
1003ba37          
1003ba37          if (eax_3 == 3)
1003bcc1              if (ecx != 0)
1003bdfd                  var_30_2 = "syntax error in #if/#elif"
1003be02                  var_34_3 = arg1
1003be03                  goto label_1003be27
1003be03              
1003bcc9              int32_t* i_9 = j_sub_10039000(0x20)
1003bcc9              
1003bcd7              if (var_c_1 == 0)
1003bcf6                  *i_9 = *(edi + 0x408)
1003bcfe                  i_9[2] = *(edi + 0x410)
1003bd07                  i_9[3] = *(edi + 0x414)
1003bcd7              else
1003bce1                  *i_9 = neg.d(*(edi + 0x408))
1003bceb                  *(i_9 + 8) = fconvert.d(fneg(fconvert.t(*(edi + 0x410))))
1003bceb              
1003bd10              i_9[4] = var_18_1
1003bd13              i_9[6] = 0
1003bd16              i_9[5] = i_13
1003bd16              
1003bd19              if (i_13 == 0)
1003bd20                  i_5 = i_9
1003bd19              else
1003bd1b                  i_13[6] = i_9
1003bd1b              
1003bd24              i_13 = i_9
1003bd26              ecx = 1
1003bd2b              var_c_1 = 0
1003bcc1              goto label_1003bd2f
1003bcc1          
1003ba3e          if (eax_3 != 4)
1003ba45              if (eax_3 != 5)
1003bd4c                  void* var_30_1 = edi
1003bd53                  j_sub_10039200(arg1, "unknown %s in #if/#elif")
1003bd5b                  goto label_1003be2f
1003bd5b              
1003ba4d              if (edx != 0)
1003bd60                  var_30_2 = "misplaced minus sign in #if/#eli…"
1003be26                  var_34_3 = arg1
1003be26                  goto label_1003be27
1003be26              
1003ba53              int32_t eax_7 = *(edi + 0x404)
1003ba53              
1003ba5c              if (eax_7 != 0x2c)
1003ba6a                  if (eax_7 == 0x2d)
1003ba70                      bool cond:11_1 = var_18_1 - 1 s< 0
1003ba71                      var_18_1 -= 1
1003ba71                      
1003ba75                      if (cond:11_1)
1003bd6e                          var_30_2 = "too many ) in #if/#elsif"
1003bd73                          var_34_3 = arg1
1003bd74                          goto label_1003be27
1003bd74                      
1003ba75                      goto label_1003bd2f
1003ba75                  
1003babf                  if (arg5 == 0 && (eax_7 == 0x23 || eax_7 == 0x1c || eax_7 == 0x15
1003babf                          || eax_7 == 0x16 || eax_7 == 0x20 || eax_7 == 0x21
1003babf                          || eax_7 == 0x22))
1003bd7d                      void* var_30_3 = edi
1003bd84                      j_sub_10039200(arg1, "illigal operator %s on floating …")
1003bd8c                      goto label_1003be2f
1003bd8c                  
1003bacb                  if (eax_7 - 5 u> 0x26)
1003bdb4                      label_1003bdb4:
1003bdb4                      void* var_30_5 = edi
1003bdbb                      j_sub_10039200(arg1, "invalid operator %s in #if/#elif")
1003bdc3                      goto label_1003be2f
1003bdc3                  
1003bad3                  int32_t edx_1
1003bad3                  edx_1.b = *(eax_7 + &jump_table_1003c308[2]:3)
1003bad3                  
1003bad9                  switch (edx_1)
1003bafa                      case 0
1003bafa                          if (ecx == 0)
1003bd9f                              void* var_30_4 = edi
1003bda6                              j_sub_10039200(arg1, "operator %s after operator in #i…")
1003bdae                              goto label_1003be2f
1003baec                      case 1
1003baec                          if (ecx == 0)
1003baee                              var_c_1 = 1
1003baee                          
1003baec                          goto label_1003bb04
1003bae2                      case 2
1003bae2                          if (ecx != 0)
1003bd91                              var_30_2 = "! or ~ after value in #if/#elif"
1003be26                              var_34_3 = arg1
1003be26                              goto label_1003be27
1003bad9                      case 3
1003bad9                          goto label_1003bdb4
1003bad9                  
1003bb04                  label_1003bb04:
1003bb04                  
1003bb06                  if (var_c_1 != 0)
1003bb06                      goto label_1003bd2f
1003bb06                  
1003bb0e                  int32_t* i_7 = j_sub_10039000(0x14)
1003bb1b                  *i_7 = *(edi + 0x404)
1003bb2d                  i_7[1] = j_sub_1003b8d0(*(edi + 0x404))
1003bb39                  i_7[2] = var_18_1
1003bb3c                  i_7[4] = 0
1003bb43                  int32_t* i_12
1003bb43                  i_7[3] = i_12
1003bb43                  
1003bb46                  if (i_12 == 0)
1003bb56                      i_4 = i_7
1003bb5a                      i_12 = i_7
1003bb5e                      ecx = 0
1003bb46                  else
1003bb48                      i_12[4] = i_7
1003bb4b                      i_12 = i_7
1003bb4f                      ecx = 0
1003bb4f                  
1003bb46                  goto label_1003bd2f
1003bb46              
1003ba5e              var_18_1 += 1
1003bd2f              label_1003bd2f:
1003bd2f              edi = *(edi + 0x428)
1003bd2f              
1003bd37              if (edi == 0)
1003be07                  if (ecx == 0)
1003be07                      goto label_1003be0d
1003be07                  
1003be1b                  if (var_18_1 == 0)
1003be1b                      break
1003be1b                  
1003be1d                  var_30_2 = "too many ( in #if/#elif"
1003bd37              else
1003bd3d                  edx = var_c_1
1003bd43                  continue
1003bd43              
1003be26              var_34_3 = arg1
1003be26              goto label_1003be27
1003be26          
1003bb6f          if (ecx != 0 || edx != 0)
1003bdf2              var_30_2 = "syntax error in #if/#elif"
1003be26              var_34_3 = arg1
1003be26              goto label_1003be27
1003be26          
1003bb75          char* esi_2 = "defined"
1003bb7a          void* eax_15 = edi
1003bb7c          int32_t eax_17
1003bb7c          
1003bb7c          while (true)
1003bb7c              edx.b = *eax_15
1003bb7e              ecx.b = edx.b
1003bb80              char temp5_1 = *esi_2
1003bb80              bool c_1 = edx.b u< temp5_1
1003bb80              
1003bb82              if (edx.b == temp5_1)
1003bb86                  if (ecx.b == 0)
1003bb9c                      eax_17 = 0
1003bb9e                      break
1003bb9e                  
1003bb88                  edx.b = *(eax_15 + 1)
1003bb8b                  ecx.b = edx.b
1003bb8d                  char temp9_1 = esi_2[1]
1003bb8d                  c_1 = edx.b u< temp9_1
1003bb8d                  
1003bb90                  if (edx.b == temp9_1)
1003bb92                      eax_15 += 2
1003bb95                      esi_2 = &esi_2[2]
1003bb95                      
1003bb9a                      if (ecx.b != 0)
1003bb9a                          continue
1003bb9a                      
1003bb9c                      eax_17 = 0
1003bb9e                      break
1003bb9e              
1003bba0              bool c_2 = unimplemented  {sbb eax, eax}
1003bba2              eax_17 = sbb.d(sbb.d(eax_15, eax_15, c_1), 0xffffffff, c_2)
1003bba2              break
1003bba2          
1003bba7          if (eax_17 != 0)
1003bdc9              void* var_30_6 = edi
1003bdd0              j_sub_10039200(arg1, "undefined name %s in #if/#elif")
1003bdd8              goto label_1003be2f
1003bdd8          
1003bbad          edi = *(edi + 0x428)
1003bbb3          void* esi_3 = &data_1005d334
1003bbb8          void* eax_18 = edi
1003bbba          int32_t eax_20
1003bbba          
1003bbba          while (true)
1003bbba              edx.b = *eax_18
1003bbbc              ecx.b = edx.b
1003bbbe              char temp17_1 = *esi_3
1003bbbe              bool c_3 = edx.b u< temp17_1
1003bbbe              
1003bbc0              if (edx.b == temp17_1)
1003bbc4                  if (ecx.b == 0)
1003bbda                      eax_20 = 0
1003bbdc                      break
1003bbdc                  
1003bbc6                  edx.b = *(eax_18 + 1)
1003bbc9                  ecx.b = edx.b
1003bbcb                  char temp25_1 = *(esi_3 + 1)
1003bbcb                  c_3 = edx.b u< temp25_1
1003bbcb                  
1003bbce                  if (edx.b == temp25_1)
1003bbd0                      eax_18 += 2
1003bbd3                      esi_3 += 2
1003bbd3                      
1003bbd8                      if (ecx.b != 0)
1003bbd8                          continue
1003bbd8                      
1003bbda                      eax_20 = 0
1003bbdc                      break
1003bbdc              
1003bbde              bool c_4 = unimplemented  {sbb eax, eax}
1003bbe0              eax_20 = sbb.d(sbb.d(eax_18, eax_18, c_3), 0xffffffff, c_4)
1003bbe0              break
1003bbe0          
1003bbe5          if (eax_20 == 0)
1003bbe7              edi = *(edi + 0x428)
1003bbed              ebx = 1
1003bbed          
1003bc01          if (edi == 0 || *(edi + 0x400) != 4)
1003bdea              var_30_2 = "defined without name in #if/#eli…"
1003bdef              var_34_3 = arg1
1003bdf0              goto label_1003be27
1003bdf0          
1003bc09          int32_t* i_8 = j_sub_10039000(0x20)
1003bc09          
1003bc26          if (j_sub_10039ce0(*(arg1 + 0x218), edi) == 0)
1003bc40              i_8[2] = 0
1003bc43              *i_8 = 0
1003bc45              i_8[3] = 0
1003bc26          else
1003bc28              i_8[2] = 0
1003bc2f              *i_8 = 1
1003bc35              i_8[3] = 0x3ff00000
1003bc35          
1003bc4c          i_8[6] = 0
1003bc55          i_8[4] = var_18_1
1003bc58          i_8[5] = i_13
1003bc58          
1003bc5b          if (i_13 == 0)
1003bc62              i_5 = i_8
1003bc5b          else
1003bc5d              i_13[6] = i_8
1003bc5d          
1003bc68          i_13 = i_8
1003bc68          
1003bc6a          if (ebx != 0)
1003bc6c              edi = *(edi + 0x428)
1003bc74              int32_t eax_25
1003bc74              
1003bc74              if (edi != 0)
1003bc7a                  void* esi_5 = &data_1005d32c
1003bc7f                  void* eax_23 = edi
1003bc7f                  
1003bc81                  while (true)
1003bc81                      int32_t edx_3
1003bc81                      edx_3.b = *eax_23
1003bc83                      ebx.b = *esi_5
1003bc87                      bool c_5 = edx_3.b u< ebx.b
1003bc87                      
1003bc89                      if (edx_3.b == ebx.b)
1003bc8d                          if (edx_3.b == 0)
1003bca5                              eax_25 = 0
1003bca7                              break
1003bca7                          
1003bc8f                          edx_3.b = *(eax_23 + 1)
1003bc92                          ebx.b = *(esi_5 + 1)
1003bc97                          c_5 = edx_3.b u< ebx.b
1003bc97                          
1003bc99                          if (edx_3.b == ebx.b)
1003bc9b                              eax_23 += 2
1003bc9e                              esi_5 += 2
1003bc9e                              
1003bca3                              if (edx_3.b != 0)
1003bca3                                  continue
1003bca3                              
1003bca5                              eax_25 = 0
1003bca7                              break
1003bca7                      
1003bca9                      bool c_6 = unimplemented  {sbb eax, eax}
1003bcab                      eax_25 = sbb.d(sbb.d(eax_23, eax_23, c_5), 0xffffffff, c_6)
1003bcab                      break
1003bcab              
1003bcb0              if (edi == 0 || eax_25 != 0)
1003bdde                  var_30_2 = "defined without ) in #if/#elif"
1003bde3                  var_34_3 = arg1
1003bde4                  goto label_1003be27
1003bde4          
1003bcb6          ebx = 0
1003bcb8          ecx = 1
1003bba7          goto label_1003bd2f
1003be3b  int32_t ebp = 0
1003be3d  int32_t ebx_1 = 0
1003be41  int32_t var_8_1 = 0
1003be45  int32_t var_4 = 0
1003be49  int32_t* i_2
1003be49  
1003be49  if (s != 0)
1003c26e      label_1003c26e:
1003c26e      i_2 = i_4
1003be49  else
1003be4f      while (true)
1003be4f          i_2 = i_4
1003be4f          
1003be55          if (i_2 == 0)
1003be55              break
1003be55          
1003be5b          int32_t* i_11 = i_5
1003be5f          int32_t* i_6 = i_2
1003be61          int32_t* i_10 = i_2[4]
1003be66          void* var_34_4
1003be66          void* var_30_9
1003be66          
1003be66          if (i_10 == 0)
1003bea0              label_1003bea0:
1003bea0              int32_t* ecx_16 = i_11[6]
1003bea3              int32_t eax_31 = *i_6 - 5
1003bea3              
1003bea9              if (eax_31 u> 0x26)
1003bea9                  goto label_1003c1cb
1003bea9              
1003beb1              int32_t edx_13
1003beb1              edx_13.b = lookup_table_1003c39c[eax_31]
1003beb1              
1003beb7              switch (edx_13)
1003bf6a                  case 0
1003bf6a                      int32_t eax_42
1003bf6a                      
1003bf6a                      if (*i_11 == 0 || *ecx_16 == 0)
1003bf73                          eax_42 = 0
1003bf6a                      else
1003bf6c                          eax_42 = 1
1003bf6c                      
1003bf75                      long double x87_r7_13 = fconvert.t(*(i_11 + 8))
1003bf78                      long double temp18_1 = fconvert.t(0.0)
1003bf78                      x87_r7_13 - temp18_1
1003bf7e                      *i_11 = eax_42
1003bf80                      eax_42.w = (x87_r7_13 < temp18_1 ? 1 : 0) << 8
1003bf80                          | (is_unordered.t(x87_r7_13, temp18_1) ? 1 : 0) << 0xa
1003bf80                          | (x87_r7_13 == temp18_1 ? 1 : 0) << 0xe
1003bf80                      
1003bf85                      if ((eax_42:1.b & 0x40) != 0)
1003bf9f                          arg2 = 0
1003bf85                      else
1003bf87                          long double x87_r7_14 = fconvert.t(*(ecx_16 + 8))
1003bf8a                          long double temp23_1 = fconvert.t(0.0)
1003bf8a                          x87_r7_14 - temp23_1
1003bf90                          arg2 = 1
1003bf98                          eax_42.w = (x87_r7_14 < temp23_1 ? 1 : 0) << 8
1003bf98                              | (is_unordered.t(x87_r7_14, temp23_1) ? 1 : 0) << 0xa
1003bf98                              | (x87_r7_14 == temp23_1 ? 1 : 0) << 0xe
1003bf98                          
1003bf9d                          if ((eax_42:1.b & 0x40) != 0)
1003bf9f                              arg2 = 0
1003bf9f                      
1003bfab                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003bf85                      goto label_1003c1cb
1003bfbb                  case 1
1003bfbb                      int32_t eax_43
1003bfbb                      
1003bfbb                      if (*i_11 != 0 || *ecx_16 != 0)
1003bfc1                          eax_43 = 1
1003bfbb                      else
1003bfbd                          eax_43 = 0
1003bfbd                      
1003bfc6                      long double x87_r7_16 = fconvert.t(*(i_11 + 8))
1003bfc9                      long double temp19_1 = fconvert.t(0.0)
1003bfc9                      x87_r7_16 - temp19_1
1003bfcf                      *i_11 = eax_43
1003bfd1                      eax_43.w = (x87_r7_16 < temp19_1 ? 1 : 0) << 8
1003bfd1                          | (is_unordered.t(x87_r7_16, temp19_1) ? 1 : 0) << 0xa
1003bfd1                          | (x87_r7_16 == temp19_1 ? 1 : 0) << 0xe
1003bfd1                      
1003bfd6                      if ((eax_43:1.b & 0x40) == 0)
1003bff0                          arg2 = 1
1003bfd6                      else
1003bfd8                          long double x87_r7_17 = fconvert.t(*(ecx_16 + 8))
1003bfdb                          long double temp24_1 = fconvert.t(0.0)
1003bfdb                          x87_r7_17 - temp24_1
1003bfe1                          arg2 = 0
1003bfe9                          eax_43.w = (x87_r7_17 < temp24_1 ? 1 : 0) << 8
1003bfe9                              | (is_unordered.t(x87_r7_17, temp24_1) ? 1 : 0) << 0xa
1003bfe9                              | (x87_r7_17 == temp24_1 ? 1 : 0) << 0xe
1003bfe9                          
1003bfee                          if ((eax_43:1.b & 0x40) == 0)
1003bff0                              arg2 = 1
1003bff0                      
1003bffc                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003bfd6                      goto label_1003c1cb
1003c00a                  case 2
1003c00a                      arg2 = 1
1003c012                      long double x87_r7_19 = fconvert.t(*(i_11 + 8))
1003c015                      int32_t edx_23
1003c015                      edx_23.b = *i_11 s>= *ecx_16
1003c018                      *i_11 = edx_23
1003c01a                      long double temp11_1 = fconvert.t(*(ecx_16 + 8))
1003c01a                      x87_r7_19 - temp11_1
1003c01d                      int32_t eax_44
1003c01d                      eax_44.w = (x87_r7_19 < temp11_1 ? 1 : 0) << 8
1003c01d                          | (is_unordered.t(x87_r7_19, temp11_1) ? 1 : 0) << 0xa
1003c01d                          | (x87_r7_19 == temp11_1 ? 1 : 0) << 0xe
1003c01d                      
1003c022                      if ((eax_44:1.b & 1) != 0)
1003c024                          arg2 = 0
1003c024                      
1003c030                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003c033                      goto label_1003c1cb
1003c03e                  case 3
1003c03e                      arg2 = 1
1003c046                      long double x87_r7_21 = fconvert.t(*(i_11 + 8))
1003c049                      int32_t edx_24
1003c049                      edx_24.b = *i_11 s<= *ecx_16
1003c04c                      *i_11 = edx_24
1003c04e                      long double temp12_1 = fconvert.t(*(ecx_16 + 8))
1003c04e                      x87_r7_21 - temp12_1
1003c051                      int32_t eax_45
1003c051                      eax_45.w = (x87_r7_21 < temp12_1 ? 1 : 0) << 8
1003c051                          | (is_unordered.t(x87_r7_21, temp12_1) ? 1 : 0) << 0xa
1003c051                          | (x87_r7_21 == temp12_1 ? 1 : 0) << 0xe
1003c051                      
1003c056                      if ((eax_45:1.b & 0x41) == 0)
1003c058                          arg2 = 0
1003c058                      
1003c064                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003c067                      goto label_1003c1cb
1003c072                  case 4
1003c072                      arg2 = 1
1003c07a                      long double x87_r7_23 = fconvert.t(*(i_11 + 8))
1003c07d                      int32_t edx_25
1003c07d                      edx_25.b = *i_11 == *ecx_16
1003c080                      *i_11 = edx_25
1003c082                      long double temp13_1 = fconvert.t(*(ecx_16 + 8))
1003c082                      x87_r7_23 - temp13_1
1003c085                      int32_t eax_46
1003c085                      eax_46.w = (x87_r7_23 < temp13_1 ? 1 : 0) << 8
1003c085                          | (is_unordered.t(x87_r7_23, temp13_1) ? 1 : 0) << 0xa
1003c085                          | (x87_r7_23 == temp13_1 ? 1 : 0) << 0xe
1003c085                      
1003c08a                      if ((eax_46:1.b & 0x40) == 0)
1003c08c                          arg2 = 0
1003c08c                      
1003c098                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003c09b                      goto label_1003c1cb
1003c0a6                  case 5
1003c0a6                      arg2 = 1
1003c0ae                      long double x87_r7_25 = fconvert.t(*(i_11 + 8))
1003c0b1                      int32_t edx_26
1003c0b1                      edx_26.b = *i_11 != *ecx_16
1003c0b4                      *i_11 = edx_26
1003c0b6                      long double temp14_1 = fconvert.t(*(ecx_16 + 8))
1003c0b6                      x87_r7_25 - temp14_1
1003c0b9                      int32_t eax_47
1003c0b9                      eax_47.w = (x87_r7_25 < temp14_1 ? 1 : 0) << 8
1003c0b9                          | (is_unordered.t(x87_r7_25, temp14_1) ? 1 : 0) << 0xa
1003c0b9                          | (x87_r7_25 == temp14_1 ? 1 : 0) << 0xe
1003c0b9                      
1003c0be                      if ((eax_47:1.b & 0x40) != 0)
1003c0c0                          arg2 = 0
1003c0c0                      
1003c0cc                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003c0cf                      goto label_1003c1cb
1003c142                  case 6
1003c142                      *i_11 s>>= (*ecx_16).b
1003c144                      goto label_1003c1cb
1003c14f                  case 7
1003c14f                      *i_11 <<= (*ecx_16).b
1003c151                      goto label_1003c1cb
1003bf05                  case 8
1003bf05                      *i_11 *= *ecx_16
1003bf0d                      *(i_11 + 8) =
1003bf0d                          fconvert.d(fconvert.t(*(ecx_16 + 8)) * fconvert.t(*(i_11 + 8)))
1003bf10                      goto label_1003c1cb
1003bf17                  case 9
1003bf18                      long double x87_r7_7 = fconvert.t(*(i_11 + 8))
1003bf1b                      *ecx_16
1003bf1d                      *i_11 = divs.dp.d(sx.q(*i_11), *ecx_16)
1003bf22                      *(i_11 + 8) = fconvert.d(x87_r7_7 / fconvert.t(*(ecx_16 + 8)))
1003bf25                      goto label_1003c1cb
1003bf2c                  case 0xa
1003bf2d                      *ecx_16
1003bf2f                      *i_11 = mods.dp.d(sx.q(*i_11), *ecx_16)
1003bf31                      goto label_1003c1cb
1003bf3c                  case 0xb
1003bf3c                      *i_11 += *ecx_16
1003bf44                      *(i_11 + 8) =
1003bf44                          fconvert.d(fconvert.t(*(ecx_16 + 8)) + fconvert.t(*(i_11 + 8)))
1003bf47                      goto label_1003c1cb
1003bf50                  case 0xc
1003bf50                      long double x87_r7_11 = fconvert.t(*(i_11 + 8))
1003bf55                      *i_11 -= *ecx_16
1003bf5a                      *(i_11 + 8) = fconvert.d(x87_r7_11 - fconvert.t(*(ecx_16 + 8)))
1003bf5d                      goto label_1003c1cb
1003c159                  case 0xd
1003c159                      *i_11 &= *ecx_16
1003c15b                      goto label_1003c1cb
1003c163                  case 0xe
1003c163                      *i_11 |= *ecx_16
1003c165                      goto label_1003c1cb
1003c16d                  case 0xf
1003c16d                      *i_11 ^= *ecx_16
1003c16f                      goto label_1003c1cb
1003bef9                  case 0x10
1003bef9                      *i_11 = not.d(*i_11)
1003c1cb                      label_1003c1cb:
1003c1cb                      int32_t eax_62 = *i_6
1003c1cb                      
1003c1d5                      if (eax_62 != 0x24 && eax_62 != 0x23)
1003c1da                          if (eax_62 != 0x2b)
1003c1dc                              i_11 = i_11[6]
1003c1dc                          
1003c1df                          void* eax_63 = i_11[5]
1003c1df                          
1003c1e4                          if (eax_63 == 0)
1003c1f1                              i_5 = i_11[6]
1003c1e4                          else
1003c1e9                              *(eax_63 + 0x18) = i_11[6]
1003c1e9                          
1003c1f5                          void* eax_64 = i_11[6]
1003c1f5                          
1003c1fa                          if (eax_64 != 0)
1003c1ff                              *(eax_64 + 0x14) = i_11[5]
1003c1ff                          
1003c203                          j_sub_100390b0(i_11)
1003c203                      
1003c20b                      void* eax_65 = i_6[3]
1003c20b                      
1003c210                      if (eax_65 == 0)
1003c21d                          i_4 = i_6[4]
1003c210                      else
1003c215                          *(eax_65 + 0x10) = i_6[4]
1003c215                      
1003c221                      void* eax_67 = i_6[4]
1003c221                      
1003c226                      if (eax_67 != 0)
1003c22b                          *(eax_67 + 0xc) = i_6[3]
1003c22b                      
1003c22f                      j_sub_100390b0(i_6)
1003c237                      continue
1003bec2                  case 0x11
1003bec2                      long double x87_r7_3 = fconvert.t(*(i_11 + 8))
1003bec5                      long double temp10_1 = fconvert.t(0.0)
1003bec5                      x87_r7_3 - temp10_1
1003becd                      int32_t eax_32
1003becd                      eax_32.b = *i_11 == 0
1003bed0                      *i_11 = eax_32
1003bed2                      arg2 = 1
1003beda                      eax_32.w = (x87_r7_3 < temp10_1 ? 1 : 0) << 8
1003beda                          | (is_unordered.t(x87_r7_3, temp10_1) ? 1 : 0) << 0xa
1003beda                          | (x87_r7_3 == temp10_1 ? 1 : 0) << 0xe
1003beda                      
1003bedf                      if ((eax_32:1.b & 0x40) == 0)
1003bee1                          arg2 = 0
1003bee1                      
1003beed                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003bef0                      goto label_1003c1cb
1003c0da                  case 0x12
1003c0da                      arg2 = 1
1003c0e2                      long double x87_r7_27 = fconvert.t(*(i_11 + 8))
1003c0e5                      int32_t edx_27
1003c0e5                      edx_27.b = *i_11 s> *ecx_16
1003c0e8                      *i_11 = edx_27
1003c0ea                      long double temp15_1 = fconvert.t(*(ecx_16 + 8))
1003c0ea                      x87_r7_27 - temp15_1
1003c0ed                      int32_t eax_48
1003c0ed                      eax_48.w = (x87_r7_27 < temp15_1 ? 1 : 0) << 8
1003c0ed                          | (is_unordered.t(x87_r7_27, temp15_1) ? 1 : 0) << 0xa
1003c0ed                          | (x87_r7_27 == temp15_1 ? 1 : 0) << 0xe
1003c0ed                      
1003c0f2                      if ((eax_48:1.b & 0x41) != 0)
1003c0f4                          arg2 = 0
1003c0f4                      
1003c100                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003c103                      goto label_1003c1cb
1003c10e                  case 0x13
1003c10e                      arg2 = 1
1003c116                      long double x87_r7_29 = fconvert.t(*(i_11 + 8))
1003c119                      int32_t edx_28
1003c119                      edx_28.b = *i_11 s< *ecx_16
1003c11c                      *i_11 = edx_28
1003c11e                      long double temp16_1 = fconvert.t(*(ecx_16 + 8))
1003c11e                      x87_r7_29 - temp16_1
1003c121                      int32_t eax_49
1003c121                      eax_49.w = (x87_r7_29 < temp16_1 ? 1 : 0) << 8
1003c121                          | (is_unordered.t(x87_r7_29, temp16_1) ? 1 : 0) << 0xa
1003c121                          | (x87_r7_29 == temp16_1 ? 1 : 0) << 0xe
1003c121                      
1003c126                      if ((eax_49:1.b & 1) == 0)
1003c128                          arg2 = 0
1003c128                      
1003c134                      *(i_11 + 8) = fconvert.d(float.t(arg2))
1003c137                      goto label_1003c1cb
1003c173                  case 0x14
1003c173                      if (ebp != 0)
1003c17f                          if (arg5 == 0)
1003c18d                              long double x87_r7_31 = fconvert.t(var_8_1.q)
1003c191                              long double temp20_1 = fconvert.t(0.0)
1003c191                              x87_r7_31 - temp20_1
1003c197                              int32_t eax_59
1003c197                              eax_59.w = (x87_r7_31 < temp20_1 ? 1 : 0) << 8
1003c197                                  | (is_unordered.t(x87_r7_31, temp20_1) ? 1 : 0) << 0xa
1003c197                                  | (x87_r7_31 == temp20_1 ? 1 : 0) << 0xe
1003c197                              
1003c19c                              if ((eax_59:1.b & 0x40) != 0)
1003c1a1                                  i_11[2] = ecx_16[2]
1003c1a7                                  i_11[3] = ecx_16[3]
1003c1a7                              
1003c1aa                              ebp = 0
1003c17f                          else if (ebx_1 != 0)
1003c1aa                              ebp = 0
1003c183                          else
1003c187                              ebp = 0
1003c189                              *i_11 = *ecx_16
1003c189                          
1003c17f                          goto label_1003c1cb
1003c17f                      
1003c24c                      var_30_9 = ": without ? in #if/#elif"
1003c251                      var_34_4 = arg1
1003c1b0                  case 0x15
1003c1b0                      if (ebp == 0)
1003c1bc                          ebx_1 = *i_11
1003c1be                          var_8_1 = i_11[2]
1003c1c2                          int32_t var_4_1 = i_11[3]
1003c1c6                          ebp = 1
1003c1c6                          goto label_1003c1cb
1003c1c6                      
1003c258                      var_30_9 = "? after ? in #if/#elif"
1003c25d                      var_34_4 = arg1
1003beb7                  case 0x16
1003beb7                      goto label_1003c1cb
1003be66          else
1003be68              while (true)
1003be68                  int32_t ecx_13 = i_6[2]
1003be6b                  int32_t edx_11 = i_10[2]
1003be6b                  
1003be70                  if (ecx_13 s> edx_11)
1003be70                      goto label_1003bea0
1003be70                  
1003be7c                  if (ecx_13 == edx_11 && i_6[1] s>= i_10[1])
1003be7c                      goto label_1003bea0
1003be7c                  
1003be7e                  int32_t ecx_15 = *i_6
1003be7e                  
1003be88                  if (ecx_15 != 0x24 && ecx_15 != 0x23)
1003be8a                      i_11 = i_11[6]
1003be8a                  
1003be8f                  if (i_11 == 0)
1003c240                      var_30_9 = "mising values in #if/#elif"
1003c245                      var_34_4 = arg1
1003c246                      break
1003c246                  
1003be95                  i_6 = i_10
1003be97                  i_10 = i_6[4]
1003be97                  
1003be9c                  if (i_10 == 0)
1003be9c                      goto label_1003bea0
1003be9c          
1003c25e          j_sub_10039200(var_34_4, var_30_9)
1003c266          s = 1
1003c266          goto label_1003c26e
1003c266  
1003c278  if (i_5 != 0)
1003c280      if (arg3 != 0)
1003c284          *arg3 = *i_5
1003c284      
1003c28c      if (arg4 != 0)
1003c291          *arg4 = i_5[2]
1003c296          arg4[1] = i_5[3]
1003c296  
1003c29b  if (i_2 != 0)
1003c2ad      int32_t* i
1003c2ad      
1003c2ad      do
1003c29d          i = i_2[4]
1003c2a1          j_sub_100390b0(i_2)
1003c2a9          i_2 = i
1003c2ad      while (i != 0)
1003c2ad  
1003c2af  int32_t* i_3 = i_5
1003c2af  
1003c2b5  if (i_3 != 0)
1003c2c7      int32_t* i_1
1003c2c7      
1003c2c7      do
1003c2b7          i_1 = i_3[6]
1003c2bb          j_sub_100390b0(i_3)
1003c2c3          i_3 = i_1
1003c2c7      while (i_1 != 0)
1003c2c7  
1003c2d3  if (s == 0)
1003c2dd      return 1
1003c2dd  
1003c2e4  if (arg3 != 0)
1003c2e6      *arg3 = 0
1003c2e6  
1003c2f2  if (arg4 != 0)
1003c2f4      *arg4 = 0
1003c2fa      arg4[1] = 0
1003c2fa  
1003c306  return 0

1003c307                       90                                                                                 .
1003c308  uint32_t jump_table_1003c308[0x4] = 
1003c308  {
1003c308      [0x0] =  0x1003baf8
1003c30c      [0x1] =  0x1003baea
1003c310      [0x2] =  0x1003bae0
1003c314      [0x3] =  0x1003bdb0
1003c318  }
1003c318  uint8_t lookup_table_1003c318[0x27] = 
1003c318  {
1003c318      [0x00] =  0x00
1003c319      [0x01] =  0x00
1003c31a      [0x02] =  0x00
1003c31b      [0x03] =  0x00
1003c31c      [0x04] =  0x00
1003c31d      [0x05] =  0x00
1003c31e      [0x06] =  0x03
1003c31f      [0x07] =  0x03
1003c320      [0x08] =  0x03
1003c321      [0x09] =  0x03
1003c322      [0x0a] =  0x03
1003c323      [0x0b] =  0x03
1003c324      [0x0c] =  0x03
1003c325      [0x0d] =  0x03
1003c326      [0x0e] =  0x03
1003c327      [0x0f] =  0x03
1003c328      [0x10] =  0x00
1003c329      [0x11] =  0x00
1003c32a      [0x12] =  0x03
1003c32b      [0x13] =  0x03
1003c32c      [0x14] =  0x03
1003c32d      [0x15] =  0x00
1003c32e      [0x16] =  0x00
1003c32f      [0x17] =  0x00
1003c330      [0x18] =  0x00
1003c331      [0x19] =  0x01
1003c332      [0x1a] =  0x03
1003c333      [0x1b] =  0x00
1003c334      [0x1c] =  0x00
1003c335      [0x1d] =  0x00
1003c336      [0x1e] =  0x02
1003c337      [0x1f] =  0x02
1003c338      [0x20] =  0x00
1003c339      [0x21] =  0x00
1003c33a      [0x22] =  0x03
1003c33b      [0x23] =  0x03
1003c33c      [0x24] =  0x03
1003c33d      [0x25] =  0x00
1003c33e      [0x26] =  0x00
1003c33f  }

1003c33f                                                                                               90                                 .
1003c340  uint32_t jump_table_1003c340[0x17] = 
1003c340  {
1003c340      [0x00] =  0x1003bf62
1003c344      [0x01] =  0x1003bfb3
1003c348      [0x02] =  0x1003c004
1003c34c      [0x03] =  0x1003c038
1003c350      [0x04] =  0x1003c06c
1003c354      [0x05] =  0x1003c0a0
1003c358      [0x06] =  0x1003c13c
1003c35c      [0x07] =  0x1003c149
1003c360      [0x08] =  0x1003bf00
1003c364      [0x09] =  0x1003bf15
1003c368      [0x0a] =  0x1003bf2a
1003c36c      [0x0b] =  0x1003bf36
1003c370      [0x0c] =  0x1003bf4c
1003c374      [0x0d] =  0x1003c153
1003c378      [0x0e] =  0x1003c15d
1003c37c      [0x0f] =  0x1003c167
1003c380      [0x10] =  0x1003bef5
1003c384      [0x11] =  0x1003bebe
1003c388      [0x12] =  0x1003c0d4
1003c38c      [0x13] =  0x1003c108
1003c390      [0x14] =  0x1003c171
1003c394      [0x15] =  0x1003c1ae
1003c398      [0x16] =  0x1003c1cb
1003c39c  }
1003c39c  uint8_t lookup_table_1003c39c[0x27] = 
1003c39c  {
1003c39c      [0x00] =  0x00
1003c39d      [0x01] =  0x01
1003c39e      [0x02] =  0x02
1003c39f      [0x03] =  0x03
1003c3a0      [0x04] =  0x04
1003c3a1      [0x05] =  0x05
1003c3a2      [0x06] =  0x16
1003c3a3      [0x07] =  0x16
1003c3a4      [0x08] =  0x16
1003c3a5      [0x09] =  0x16
1003c3a6      [0x0a] =  0x16
1003c3a7      [0x0b] =  0x16
1003c3a8      [0x0c] =  0x16
1003c3a9      [0x0d] =  0x16
1003c3aa      [0x0e] =  0x16
1003c3ab      [0x0f] =  0x16
1003c3ac      [0x10] =  0x06
1003c3ad      [0x11] =  0x07
1003c3ae      [0x12] =  0x16
1003c3af      [0x13] =  0x16
1003c3b0      [0x14] =  0x16
1003c3b1      [0x15] =  0x08
1003c3b2      [0x16] =  0x09
1003c3b3      [0x17] =  0x0a
1003c3b4      [0x18] =  0x0b
1003c3b5      [0x19] =  0x0c
1003c3b6      [0x1a] =  0x16
1003c3b7      [0x1b] =  0x0d
1003c3b8      [0x1c] =  0x0e
1003c3b9      [0x1d] =  0x0f
1003c3ba      [0x1e] =  0x10
1003c3bb      [0x1f] =  0x11
1003c3bc      [0x20] =  0x12
1003c3bd      [0x21] =  0x13
1003c3be      [0x22] =  0x16
1003c3bf      [0x23] =  0x16
1003c3c0      [0x24] =  0x16
1003c3c1      [0x25] =  0x14
1003c3c2      [0x26] =  0x15
1003c3c3  }

1003c3c3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
1003c3e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c4a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c4c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c4e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c5a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c5c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c5e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003c650    int32_t sub_1003c650(void* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

1003c665  int32_t var_434 = 0
1003c665  
1003c669  if (arg2 != 0)
1003c66b      *arg2 = 0
1003c66b  
1003c676  if (arg3 != 0)
1003c678      *arg3 = 0
1003c67a      arg3[1] = 0
1003c67a  
1003c67d  void* esi = arg1
1003c694  char var_430[0x400]
1003c694  
1003c694  if (j_sub_1003ab10(esi, &var_430) == 0)
1003c69c      j_sub_10039200(esi, "no value after #if/#elif")
1003c6b0      return 0
1003c6b0  
1003c6b1  int32_t i_2 = 0
1003c6b3  int32_t i_5 = 0
1003c6b3  
1003c6bf  while (true)
1003c6bf      char (* var_448_1)[0x400]
1003c6bf      int32_t var_30
1003c6bf      
1003c6bf      if (var_30 != 4)
1003c787          if (var_30 == 3 || var_30 == 5)
1003c78d              var_448_1 = &var_430
1003c78d              goto label_1003c78e
1003c78d          
1003c7e7          char (* var_448_7)[0x400] = &var_430
1003c7ee          j_sub_10039200(esi, "can't evaluate %s")
1003c802          return 0
1003c802      
1003c6c9      if (var_434 == 0)
1003c6d9          char* esi_1 = "defined"
1003c6de          char (* eax_5)[0x400] = &var_430
1003c6e2          int32_t eax_7
1003c6e2          
1003c6e2          while (true)
1003c6e2              char edx_1 = *eax_5
1003c6e6              char temp0_1 = *esi_1
1003c6e6              bool c_1 = edx_1 u< temp0_1
1003c6e6              
1003c6e8              if (edx_1 == temp0_1)
1003c6ec                  if (edx_1 == 0)
1003c702                      eax_7 = 0
1003c704                      break
1003c704                  
1003c6ee                  edx_1 = (*eax_5)[1]
1003c6f3                  char temp3_1 = esi_1[1]
1003c6f3                  c_1 = edx_1 u< temp3_1
1003c6f3                  
1003c6f6                  if (edx_1 == temp3_1)
1003c6f8                      eax_5 = &(*eax_5)[2]
1003c6fb                      esi_1 = &esi_1[2]
1003c6fb                      
1003c700                      if (edx_1 != 0)
1003c700                          continue
1003c700                      
1003c702                      eax_7 = 0
1003c704                      break
1003c704              
1003c706              bool c_2 = unimplemented  {sbb eax, eax}
1003c708              eax_7 = sbb.d(sbb.d(eax_5, eax_5, c_1), 0xffffffff, c_2)
1003c708              break
1003c708          
1003c70d          if (eax_7 != 0)
1003c74c              esi = arg1
1003c75f              char* eax_8 = j_sub_10039ce0(*(esi + 0x218), &var_430)
1003c75f              
1003c769              if (eax_8 == 0)
1003c7c7                  char (* var_448_6)[0x400] = &var_430
1003c7ce                  j_sub_10039200(esi, "can't evaluate %s, not defined")
1003c7e2                  return 0
1003c7e2              
1003c777              if (j_sub_1003a690(esi, eax_8) == 0)
1003c777                  break
1003c70d          else
1003c713              var_434 = 1
1003c71c              int32_t i_3 = j_sub_10039460(&var_430)
1003c726              *(i_3 + 0x428) = 0
1003c726              
1003c72c              if (i_5 == 0)
1003c73f                  esi = arg1
1003c746                  i_2 = i_3
1003c748                  i_5 = i_3
1003c72c              else
1003c72e                  esi = arg1
1003c735                  *(i_5 + 0x428) = i_3
1003c73b                  i_5 = i_3
1003c6c9      else
1003c6cf          var_434 = 0
1003c6d3          var_448_1 = &var_430
1003c78e          label_1003c78e:
1003c78e          int32_t i_4 = j_sub_10039460(var_448_1)
1003c798          *(i_4 + 0x428) = 0
1003c798          
1003c79e          if (i_5 == 0)
1003c7a8              i_2 = i_4
1003c79e          else
1003c7a0              *(i_5 + 0x428) = i_4
1003c7a0          
1003c7aa          i_5 = i_4
1003c7aa      
1003c7bc      if (j_sub_1003ab10(esi, &var_430) == 0)
1003c827          if (j_sub_1003b9e0(esi, i_2, arg2, arg3, arg4) == 0)
1003c827              break
1003c827          
1003c838          int32_t i_1 = i_2
1003c838          
1003c83a          if (i_2 != 0)
1003c84f              int32_t i
1003c84f              
1003c84f              do
1003c83c                  i = *(i_1 + 0x428)
1003c843                  j_sub_100394a0(i_1)
1003c84d                  i_1 = i
1003c84f              while (i != 0)
1003c84f          
1003c860          return 1
1003c860  
1003c835  return 0

1003c861     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1003c880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c8a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c8c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003c8e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003c900    int32_t sub_1003c900(void* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4)

1003c915  int32_t var_434 = 0
1003c915  
1003c919  if (arg2 != 0)
1003c91b      *arg2 = 0
1003c91b  
1003c926  if (arg3 != 0)
1003c928      *arg3 = 0
1003c92a      arg3[1] = 0
1003c92a  
1003c92d  void* esi = arg1
1003c944  char var_430[0x400]
1003c944  
1003c944  if (j_sub_100394c0(esi, &var_430) == 0)
1003c94c      j_sub_10039200(esi, "no leading ( after $evalint/$eva…")
1003c960      return 0
1003c960  
1003c971  if (j_sub_100394c0(esi, &var_430) == 0)
1003c979      j_sub_10039200(esi, "nothing to evaluate")
1003c98d      return 0
1003c98d  
1003c98e  int32_t i_2 = 0
1003c990  int32_t var_438 = 1
1003c998  int32_t i_5 = 0
1003c998  
1003c9a4  while (true)
1003c9a4      int32_t var_30
1003c9a4      char (* var_44c_2)[0x400]
1003c9a4      
1003c9a4      if (var_30 != 4)
1003ca72          if (var_30 != 3 && var_30 != 5)
1003caf4              char (* var_44c_8)[0x400] = &var_430
1003cafb              j_sub_10039200(esi, "can't evaluate %s")
1003cb0f              return 0
1003cb0f          
1003ca74          int32_t eax_11
1003ca74          eax_11.b = var_430[0]
1003ca74          
1003ca7a          if (eax_11.b == 0x28)
1003ca8c              var_438 += 1
1003ca7a          else if (eax_11.b == 0x29)
1003ca8c              var_438 -= 1
1003ca8c          
1003ca94          if (var_438 s> 0)
1003ca9a              var_44c_2 = &var_430
1003ca9a              goto label_1003ca9b
1003c9a4      else
1003c9ae          if (var_434 == 0)
1003c9be              char* esi_1 = "defined"
1003c9c3              char (* eax_6)[0x400] = &var_430
1003c9c7              int32_t eax_8
1003c9c7              
1003c9c7              while (true)
1003c9c7                  char edx_1 = *eax_6
1003c9cb                  char temp0_1 = *esi_1
1003c9cb                  bool c_1 = edx_1 u< temp0_1
1003c9cb                  
1003c9cd                  if (edx_1 == temp0_1)
1003c9d1                      if (edx_1 == 0)
1003c9e7                          eax_8 = 0
1003c9e9                          break
1003c9e9                      
1003c9d3                      edx_1 = (*eax_6)[1]
1003c9d8                      char temp3_1 = esi_1[1]
1003c9d8                      c_1 = edx_1 u< temp3_1
1003c9d8                      
1003c9db                      if (edx_1 == temp3_1)
1003c9dd                          eax_6 = &(*eax_6)[2]
1003c9e0                          esi_1 = &esi_1[2]
1003c9e0                          
1003c9e5                          if (edx_1 != 0)
1003c9e5                              continue
1003c9e5                          
1003c9e7                          eax_8 = 0
1003c9e9                          break
1003c9e9                  
1003c9eb                  bool c_2 = unimplemented  {sbb eax, eax}
1003c9ed                  eax_8 = sbb.d(sbb.d(eax_6, eax_6, c_1), 0xffffffff, c_2)
1003c9ed                  break
1003c9ed              
1003c9f2              if (eax_8 != 0)
1003ca37                  esi = arg1
1003ca4a                  char* eax_9 = j_sub_10039ce0(*(esi + 0x218), &var_430)
1003ca4a                  
1003ca54                  if (eax_9 == 0)
1003cad4                      char (* var_44c_7)[0x400] = &var_430
1003cadb                      j_sub_10039200(esi, "can't evaluate %s, not defined")
1003caef                      return 0
1003caef                  
1003ca62                  if (j_sub_1003a690(esi, eax_9) == 0)
1003ca62                      break
1003c9f2              else
1003c9f8                  var_434 = 1
1003ca01                  int32_t i_3 = j_sub_10039460(&var_430)
1003ca0b                  *(i_3 + 0x428) = 0
1003ca0b                  
1003ca11                  if (i_5 == 0)
1003ca27                      esi = arg1
1003ca2e                      i_2 = i_3
1003ca30                      i_5 = i_3
1003ca11                  else
1003ca13                      esi = arg1
1003ca1a                      *(i_5 + 0x428) = i_3
1003ca20                      i_5 = i_3
1003ca20              
1003c9f2              goto label_1003cabf
1003c9f2          
1003c9b4          var_434 = 0
1003c9b8          var_44c_2 = &var_430
1003ca9b          label_1003ca9b:
1003ca9b          int32_t i_4 = j_sub_10039460(var_44c_2)
1003caa5          *(i_4 + 0x428) = 0
1003caa5          
1003caab          if (i_5 == 0)
1003cab5              i_2 = i_4
1003caab          else
1003caad              *(i_5 + 0x428) = i_4
1003caad          
1003cab7          i_5 = i_4
1003cabf          label_1003cabf:
1003cabf          
1003cac9          if (j_sub_100394c0(esi, &var_430) != 0)
1003cac9              continue
1003cac9      
1003cb34      if (j_sub_1003b9e0(esi, i_2, arg2, arg3, arg4) == 0)
1003cb34          break
1003cb34      
1003cb45      int32_t i_1 = i_2
1003cb45      
1003cb47      if (i_2 != 0)
1003cb5c          int32_t i
1003cb5c          
1003cb5c          do
1003cb49              i = *(i_1 + 0x428)
1003cb50              j_sub_100394a0(i_1)
1003cb5a              i_1 = i
1003cb5c          while (i != 0)
1003cb5c      
1003cb6d      return 1
1003cb6d  
1003cb42  return 0

1003cb6e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1003cb80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003cba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003cbc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003cbe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003cc00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003cc10    int32_t sub_1003cc10(void* arg1)

1003cc1c  void* esi = arg1
1003cc23  int32_t var_4
1003cc23  j_sub_10039350(esi, &arg1, &var_4)
1003cc28  void* eax = arg1
1003cc36  int32_t var_8
1003cc36  
1003cc36  if (eax == 0 || eax == 2)
1003cc79      j_sub_10039200(esi, "misplaced #elif")
1003cc36  else if (j_sub_1003c650(esi, &var_8, nullptr, 1) != 0)
1003cc56      int32_t eax_2
1003cc56      eax_2.b = var_8 == 0
1003cc5d      var_4 = eax_2
1003cc61      j_sub_100392e0(esi, 4, eax_2)
1003cc72      return 1
1003cc87  return 0

1003cc88                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................
1003cca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003ccb0    int32_t sub_1003ccb0(void* arg1)

1003ccb1  void* esi = arg1
1003ccbf  int32_t result = j_sub_1003c650(esi, &arg1, nullptr, 1)
1003ccbf  
1003ccc9  if (result == 0)
1003cccc      return result
1003cccc  
1003ccd5  int32_t ecx
1003ccd5  ecx.b = arg1 == 0
1003ccdc  j_sub_100392e0(esi, 1, ecx)
1003ccea  return 1

1003cceb                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

1003cd00    int32_t sub_1003cd00(void* arg1)

1003cd0a  j_sub_10039200(arg1, "#line directive not supported")
1003cd14  return 0

1003cd15                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
1003cd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003cd30    int32_t sub_1003cd30(void* arg1)

1003cd49  char var_430[0x430]
1003cd49  var_430[0] = data_1006294c
1003cd4d  j_sub_100394c0(arg1, &var_430)
1003cd56  char (* var_440)[0x430] = &var_430
1003cd5d  j_sub_10039200(arg1, "#error directive: %s")
1003cd6e  return 0

1003cd6f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

1003cd80    int32_t sub_1003cd80(void* arg1)

1003cd94  j_sub_10039270(arg1, "#pragma directive not supported")
1003cda9  char var_430[0x430]
1003cda9  
1003cda9  if (j_sub_1003ab10(arg1, &var_430) != 0)
1003cdbb      int32_t i
1003cdbb      
1003cdbb      do
1003cdb1          i = j_sub_1003ab10(arg1, &var_430)
1003cdbb      while (i != 0)
1003cdbb  
1003cdc9  return 1

1003cdca                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
1003cde0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003cdf0    int32_t sub_1003cdf0(void* arg1)

1003cdfd  void* eax = *(arg1 + 0x20c)
1003ce09  int32_t var_10 = *(eax + 0x120)
1003ce16  int32_t var_18 = *(eax + 0x108)
1003ce23  int32_t edx_1
1003ce23  edx_1.w = data_1005e498
1003ce2a  int32_t var_14 = *(eax + 0x108)
1003ce35  int32_t var_c = 0
1003ce42  int16_t var_430 = edx_1.w
1003ce47  int32_t var_30 = 5
1003ce52  int32_t var_2c = 0x1e
1003ce5d  j_sub_100395f0(arg1, &var_430)
1003ce68  return 1

1003ce69                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
1003ce80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003ce90    int32_t sub_1003ce90(void* arg1)

1003cea8  int32_t var_434
1003cea8  int32_t result = j_sub_1003c650(arg1, &var_434, nullptr, 1)
1003cea8  
1003ceb2  if (result == 0)
1003cebb      return result
1003cebb  
1003cebc  void* eax = *(arg1 + 0x20c)
1003cec8  int32_t var_10 = *(eax + 0x120)
1003ced5  int32_t var_18 = *(eax + 0x108)
1003cee2  int32_t var_14 = *(eax + 0x108)
1003ceed  int32_t eax_3
1003ceed  int32_t edx_1
1003ceed  edx_1:eax_3 = sx.q(var_434)
1003cef6  int32_t var_c = 0
1003cf01  int32_t var_43c = (eax_3 ^ edx_1) - edx_1
1003cf08  void var_430
1003cf08  sub_10044c56(&var_430, &data_1005d37c)
1003cf11  int32_t var_30 = 3
1003cf1e  int32_t var_2c = 0x3008
1003cf29  j_sub_100395f0(arg1, &var_430)
1003cf29  
1003cf37  if (var_434 s< 0)
1003cf3a      j_sub_1003cdf0(arg1)
1003cf3a  
1003cf4e  return 1

1003cf4f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
1003cf60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003cf80    int32_t sub_1003cf80(void* arg1)

1003cf98  double var_438
1003cf98  int32_t result = j_sub_1003c650(arg1, nullptr, &var_438, 0)
1003cf98  
1003cfa2  if (result == 0)
1003cfab      return result
1003cfab  
1003cfac  void* eax = *(arg1 + 0x20c)
1003cfbf  int32_t var_10 = *(eax + 0x120)
1003cfce  int64_t* var_444
1003cfce  var_444.q = fconvert.d(fabs(fconvert.t(var_438)))
1003cfd1  int32_t var_18 = *(eax + 0x108)
1003cfe8  int32_t var_14 = *(eax + 0x108)
1003cfef  int32_t var_c = 0
1003cffa  void var_430
1003cffa  sub_10044c56(&var_430, "%1.2f")
1003d003  int32_t var_30 = 3
1003d010  int32_t var_2c = 0x2808
1003d01b  j_sub_100395f0(arg1, &var_430)
1003d020  long double x87_r7_2 = fconvert.t(var_438)
1003d024  long double temp0 = fconvert.t(0.0)
1003d024  x87_r7_2 - temp0
1003d024  
1003d032  if ((((x87_r7_2 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_2, temp0) ? 1 : 0) << 0xa
1003d032          | (x87_r7_2 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
1003d035      j_sub_1003cdf0(arg1)
1003d035  
1003d049  return 1

1003d04a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
1003d060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003d080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003d090    int32_t sub_1003d090(void* arg1)

1003d0b1  char var_430[0x400]
1003d0b1  
1003d0b1  if (j_sub_100394c0(arg1, &var_430) == 0)
1003d0b9      j_sub_10039200(arg1, "found # without name")
1003d0cd      return 0
1003d0cd  
1003d0d7  int32_t var_c
1003d0d7  
1003d0d7  if (var_c s> 0)
1003d0df      j_sub_100395f0(arg1, &var_430)
1003d0ea      j_sub_10039200(arg1, "found # at end of line")
1003d0fe      return 0
1003d0fe  
1003d107  int32_t var_30
1003d107  
1003d107  if (var_30 == 4)
1003d109      void* eax_4 = data_1005f260
1003d10e      int32_t ebp_1 = 0
1003d10e      
1003d112      if (eax_4 != 0)
1003d114          void** edi_1 = &data_1005f260
1003d114          
1003d119          while (true)
1003d119              char (* esi_1)[0x400] = &var_430
1003d11d              int32_t eax_6
1003d11d              
1003d11d              while (true)
1003d11d                  char edx_1 = *eax_4
1003d121                  char temp0_1 = *esi_1
1003d121                  bool c_1 = edx_1 u< temp0_1
1003d121                  
1003d123                  if (edx_1 == temp0_1)
1003d127                      if (edx_1 == 0)
1003d13d                          eax_6 = 0
1003d13f                          break
1003d13f                      
1003d129                      edx_1 = *(eax_4 + 1)
1003d12e                      char temp3_1 = (*esi_1)[1]
1003d12e                      c_1 = edx_1 u< temp3_1
1003d12e                      
1003d131                      if (edx_1 == temp3_1)
1003d133                          eax_4 += 2
1003d136                          esi_1 = &(*esi_1)[2]
1003d136                          
1003d13b                          if (edx_1 != 0)
1003d13b                              continue
1003d13b                          
1003d13d                          eax_6 = 0
1003d13f                          break
1003d13f                  
1003d141                  bool c_2 = unimplemented  {sbb eax, eax}
1003d143                  eax_6 = sbb.d(sbb.d(eax_4, eax_4, c_1), 0xffffffff, c_2)
1003d143                  break
1003d143              
1003d148              if (eax_6 == 0)
1003d18a                  return (&data_1005f264)[ebp_1 * 2](arg1)
1003d18a              
1003d14a              eax_4 = edi_1[2]
1003d14d              edi_1 = &edi_1[2]
1003d150              ebp_1 += 1
1003d150              
1003d153              if (eax_4 == 0)
1003d153                  break
1003d153  
1003d159  char (* var_444_2)[0x400] = &var_430
1003d160  j_sub_10039200(arg1, "unknown precompiler directive %s")
1003d174  return 0

1003d18b                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
1003d1a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003d1c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003d1d0    int32_t sub_1003d1d0(void* arg1)

1003d1e8  int32_t var_434
1003d1e8  int32_t result = j_sub_1003c900(arg1, &var_434, nullptr, 1)
1003d1e8  
1003d1f2  if (result == 0)
1003d1fb      return result
1003d1fb  
1003d1fc  void* eax = *(arg1 + 0x20c)
1003d208  int32_t var_10 = *(eax + 0x120)
1003d215  int32_t var_18 = *(eax + 0x108)
1003d222  int32_t var_14 = *(eax + 0x108)
1003d22d  int32_t eax_3
1003d22d  int32_t edx_1
1003d22d  edx_1:eax_3 = sx.q(var_434)
1003d236  int32_t var_c = 0
1003d241  int32_t var_43c = (eax_3 ^ edx_1) - edx_1
1003d248  void var_430
1003d248  sub_10044c56(&var_430, &data_1005d37c)
1003d25b  double var_20 = fconvert.d(float.t(var_434))
1003d262  int32_t var_30 = 3
1003d26d  int32_t var_2c = 0x3008
1003d278  int32_t var_28 = var_434
1003d27f  j_sub_100395f0(arg1, &var_430)
1003d27f  
1003d28d  if (var_434 s< 0)
1003d290      j_sub_1003cdf0(arg1)
1003d290  
1003d2a4  return 1

1003d2a5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1003d2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003d2e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003d2f0    int32_t sub_1003d2f0(void* arg1)

1003d308  double var_438
1003d308  int32_t result
1003d308  int16_t x87control
1003d308  result, x87control = j_sub_1003c900(arg1, nullptr, &var_438, 0)
1003d308  
1003d312  if (result == 0)
1003d31b      return result
1003d31b  
1003d31c  void* eax = *(arg1 + 0x20c)
1003d32f  int32_t var_10 = *(eax + 0x120)
1003d33e  int64_t* var_444
1003d33e  var_444.q = fconvert.d(fabs(fconvert.t(var_438)))
1003d341  int32_t var_18 = *(eax + 0x108)
1003d358  int32_t var_14 = *(eax + 0x108)
1003d35f  int32_t var_c = 0
1003d36a  void var_430
1003d36a  sub_10044c56(&var_430, "%1.2f")
1003d36f  long double x87_r7_2 = fconvert.t(var_438)
1003d375  int32_t var_30 = 3
1003d380  int32_t var_2c = 0x2808
1003d390  double var_20 = fconvert.d(x87_r7_2)
1003d39b  int32_t var_28 = __ftol(x87control, x87_r7_2)
1003d3a4  j_sub_100395f0(arg1, &var_430)
1003d3a9  long double x87_r7_3 = fconvert.t(var_438)
1003d3ad  long double temp0 = fconvert.t(0.0)
1003d3ad  x87_r7_3 - temp0
1003d3ad  
1003d3bb  if ((((x87_r7_3 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_3, temp0) ? 1 : 0) << 0xa
1003d3bb          | (x87_r7_3 == temp0 ? 1 : 0) << 0xe):1.b & 1) != 0)
1003d3be      j_sub_1003cdf0(arg1)
1003d3be  
1003d3d2  return 1

1003d3d3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1003d3e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003d400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003d420    int32_t sub_1003d420(void* arg1)

1003d441  char var_430[0x400]
1003d441  
1003d441  if (j_sub_100394c0(arg1, &var_430) == 0)
1003d449      j_sub_10039200(arg1, "found $ without name")
1003d45d      return 0
1003d45d  
1003d467  int32_t var_c
1003d467  
1003d467  if (var_c s> 0)
1003d46f      j_sub_100395f0(arg1, &var_430)
1003d47a      j_sub_10039200(arg1, "found $ at end of line")
1003d48e      return 0
1003d48e  
1003d497  int32_t var_30
1003d497  
1003d497  if (var_30 == 4)
1003d499      char (* eax_4)[0x8] = data_1005f300
1003d49e      int32_t ebp_1 = 0
1003d49e      
1003d4a2      if (eax_4 != 0)
1003d4a4          char (** edi_1)[0x8] = &data_1005f300
1003d4a4          
1003d4a9          while (true)
1003d4a9              char (* esi_1)[0x400] = &var_430
1003d4ad              int32_t eax_6
1003d4ad              
1003d4ad              while (true)
1003d4ad                  char edx_1 = *eax_4
1003d4b1                  char temp0_1 = *esi_1
1003d4b1                  bool c_1 = edx_1 u< temp0_1
1003d4b1                  
1003d4b3                  if (edx_1 == temp0_1)
1003d4b7                      if (edx_1 == 0)
1003d4cd                          eax_6 = 0
1003d4cf                          break
1003d4cf                      
1003d4b9                      edx_1 = (*eax_4)[1]
1003d4be                      char temp3_1 = (*esi_1)[1]
1003d4be                      c_1 = edx_1 u< temp3_1
1003d4be                      
1003d4c1                      if (edx_1 == temp3_1)
1003d4c3                          eax_4 = &(*eax_4)[2]
1003d4c6                          esi_1 = &(*esi_1)[2]
1003d4c6                          
1003d4cb                          if (edx_1 != 0)
1003d4cb                              continue
1003d4cb                          
1003d4cd                          eax_6 = 0
1003d4cf                          break
1003d4cf                  
1003d4d1                  bool c_2 = unimplemented  {sbb eax, eax}
1003d4d3                  eax_6 = sbb.d(sbb.d(eax_4, eax_4, c_1), 0xffffffff, c_2)
1003d4d3                  break
1003d4d3              
1003d4d8              if (eax_6 == 0)
1003d525                  return (&data_1005f304)[ebp_1 * 2](arg1)
1003d525              
1003d4da              eax_4 = edi_1[2]
1003d4dd              edi_1 = &edi_1[2]
1003d4e0              ebp_1 += 1
1003d4e0              
1003d4e3              if (eax_4 == 0)
1003d4e3                  break
1003d4e3  
1003d4eb  j_sub_100395f0(arg1, &var_430)
1003d4f4  char (* var_44c)[0x400] = &var_430
1003d4fb  j_sub_10039200(arg1, "unknown precompiler directive %s")
1003d50f  return 0

1003d526                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
1003d540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003d560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003d580    int32_t sub_1003d580(void* arg1, char* arg2)

1003d58c  while (true)
1003d596      if (j_sub_100394c0(arg1, arg2) != 0)
1003d598          int32_t eax_2 = *(arg2 + 0x400)
1003d598          
1003d5a1          if (eax_2 != 5)
1003d5d6              label_1003d5d6:
1003d5d6              
1003d5d8              if (*(arg1 + 0x220) != 0)
1003d5d8                  continue
1003d5d8              else
1003d5dd                  if (eax_2 != 4)
1003d5dd                      break
1003d5dd                  
1003d5e7                  char* eax_6 = j_sub_10039ce0(*(arg1 + 0x218), arg2)
1003d5e7                  
1003d5f1                  if (eax_6 == 0)
1003d5f1                      break
1003d5f1                  
1003d5ff                  if (j_sub_1003a690(arg1, eax_6) != 0)
1003d5ff                      continue
1003d5a1          else if (*arg2 != 0x23)
1003d5bf              if (eax_2 != 5 || *arg2 != 0x24)
1003d5ba                  goto label_1003d5d6
1003d5ba              
1003d5cc              if (j_sub_1003d420(arg1) != 0)
1003d5cc                  continue
1003d5a6          else if (j_sub_1003d090(arg1) != 0)
1003d5b3              continue
1003d5b3      
1003d605      return 0
1003d605  
1003d611  __builtin_memcpy(dest: arg1 + 0x228, src: arg2, n: 0x430)
1003d61a  return 1

1003d61b                                                                                   90 90 90 90 90                             .....
1003d620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003d640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003d650    int32_t sub_1003d650(void* arg1, char* arg2)

1003d66f  char var_430[0x430]
1003d66f  
1003d66f  if (j_sub_1003d580(arg1, &var_430) == 0)
1003d678      char* var_43c_1 = arg2
1003d67f      j_sub_10039200(arg1, "couldn't find expected %s")
1003d691      return 0
1003d691  
1003d699  int32_t ebx
1003d699  int32_t var_43c_2 = ebx
1003d69b  char* esi = arg2
1003d69d  char (* eax_2)[0x430] = &var_430
1003d6a1  int32_t eax_4
1003d6a1  
1003d6a1  while (true)
1003d6a1      char edx_1 = *eax_2
1003d6a3      ebx.b = *esi
1003d6a7      bool c_1 = edx_1 u< ebx.b
1003d6a7      
1003d6a9      if (edx_1 == ebx.b)
1003d6ad          if (edx_1 == 0)
1003d6c5              eax_4 = 0
1003d6c7              break
1003d6c7          
1003d6af          edx_1 = (*eax_2)[1]
1003d6b2          ebx.b = esi[1]
1003d6b7          c_1 = edx_1 u< ebx.b
1003d6b7          
1003d6b9          if (edx_1 == ebx.b)
1003d6bb              eax_2 = &(*eax_2)[2]
1003d6be              esi = &esi[2]
1003d6be              
1003d6c3              if (edx_1 != 0)
1003d6c3                  continue
1003d6c3              
1003d6c5              eax_4 = 0
1003d6c7              break
1003d6c7      
1003d6c9      bool c_2 = unimplemented  {sbb eax, eax}
1003d6cb      eax_4 = sbb.d(sbb.d(eax_2, eax_2, c_1), 0xffffffff, c_2)
1003d6cb      break
1003d6cb  
1003d6d2  if (eax_4 == 0)
1003d700      return 1
1003d700  
1003d6d8  char (* var_43c_3)[0x430] = &var_430
1003d6d9  char* __saved_esi_1 = arg2
1003d6e0  j_sub_10039200(arg1, "expected %s, found %s")
1003d6f2  return 0

1003d701     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1003d720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003d740    int32_t sub_1003d740(void* arg1, int32_t arg2, int32_t arg3, char* arg4)

1003d74f  void* ebp = arg1
1003d74f  
1003d762  if (j_sub_1003d580(ebp, arg4) == 0)
1003d76a      j_sub_10039200(ebp, "couldn't read expected token")
1003d77c      return 0
1003d77c  
1003d77d  int32_t eax_2 = *(arg4 + 0x400)
1003d78c  int32_t var_400
1003d78c  int16_t var_3fc
1003d78c  int32_t ecx
1003d78c  
1003d78c  if (eax_2 != arg2)
1003d795      if (arg2 == 1)
1003d79c          ecx.w = (*"ng")[0].w
1003d7a9          var_400 = (*"string")[0].d
1003d7ad          int16_t var_3fc_1 = ecx.w
1003d7b2          char var_3fa_1 = data_1005c16c[6][0]
1003d795      else if (arg2 == 2)
1003d7c8          var_400 = (*"literal")[0].d
1003d7cc          var_3fc.d = (*"ral")[0].d
1003d7bb      else if (arg2 == 3)
1003d7dd          eax_2.w = (*"er")[0].w
1003d7e3          ecx.b = data_1005fdc8[6][0]
1003d7e9          var_400 = (*"number")[0].d
1003d7ed          int16_t var_3fc_2 = eax_2.w
1003d7f2          char var_3fa_2 = ecx.b
1003d7d5      else if (arg2 == 4)
1003d803          eax_2.b = data_1005c1a0[4][0]
1003d808          var_400 = (*"name")[0].d
1003d80c          var_3fc.b = eax_2.b
1003d7fb      else if (arg2 == 5)
1003d828          var_400 = (*"punctuation")[0].d
1003d82c          var_3fc.d = (*"tuation")[0].d
1003d830          int32_t var_3f8_1 = (*"ion")[0].d
1003d830      
1003d838      char* __saved_esi_1 = arg4
1003d839      int32_t* __saved_edi_2 = &var_400
1003d840      j_sub_10039200(ebp, "expected a %s, found %s")
1003d852      return 0
1003d852  
1003d856  if (eax_2 != 3)
1003d9ef      if (eax_2 == 5 && *(arg4 + 0x404) != arg3)
1003d9f1          char* __saved_esi_2 = arg4
1003d9f8          j_sub_10039200(ebp, "found %s")
1003da0a          return 0
1003d856  else if ((*(arg4 + 0x404) & arg3) != arg3)
1003d876      if ((arg3.b & 8) != 0)
1003d883          var_400 = (*"decimal")[0].d
1003d887          var_3fc.d = (*"mal")[0].d
1003d887      
1003d88e      if ((arg3:1.b & 1) != 0)
1003d896          var_400 = data_1005fd8c
1003d896      
1003d89d      if ((arg3:1.b & 2) != 0)
1003d8a4          ecx.w = (*"l")[0].w
1003d8ab          var_400 = (*"octal")[0].d
1003d8af          int16_t var_3fc_3 = ecx.w
1003d8af      
1003d8b7      if ((arg3:1.b & 4) != 0)
1003d8be          ecx.w = (*"ry")[0].w
1003d8c5          var_400 = (*"binary")[0].d
1003d8c9          int32_t eax_11
1003d8c9          eax_11.b = data_1005fd7c[6][0]
1003d8ce          int16_t var_3fc_4 = ecx.w
1003d8d3          char var_3fa_3 = eax_11.b
1003d8d3      
1003d8dc      if ((arg3:1.b & 0x20) != 0)
1003d8de          char* edi_1 = " long"
1003d8e3          int32_t i = 0xffffffff
1003d8e3          
1003d8ec          while (i != 0)
1003d8ec              bool cond:0_1 = 0 != *edi_1
1003d8ec              edi_1 = &edi_1[1]
1003d8ec              i -= 1
1003d8ec              
1003d8ec              if (not(cond:0_1))
1003d8ec                  break
1003d8ec          
1003d8ee          int32_t ecx_3 = not.d(i)
1003d8f4          int32_t* edi_3 = &var_400
1003d8f8          int32_t i_1 = 0xffffffff
1003d8f8          
1003d8fb          while (i_1 != 0)
1003d8fb              bool cond:1_1 = 0 != *edi_3
1003d8fb              edi_3 += 1
1003d8fb              i_1 -= 1
1003d8fb              
1003d8fb              if (not(cond:1_1))
1003d8fb                  break
1003d8fb          
1003d903          int32_t esi_2
1003d903          int32_t edi_5
1003d903          edi_5, esi_2 =
1003d903              __builtin_memcpy(dest: edi_3 - 1, src: edi_1 - ecx_3, n: ecx_3 u>> 2 << 2)
1003d907          ebp = arg1
1003d911          __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx_3 & 3)
1003d911      
1003d916      if ((arg3:1.b & 0x40) != 0)
1003d918          char* edi_6 = " unsigned"
1003d91d          int32_t i_2 = 0xffffffff
1003d91d          
1003d926          while (i_2 != 0)
1003d926              bool cond:2_1 = 0 != *edi_6
1003d926              edi_6 = &edi_6[1]
1003d926              i_2 -= 1
1003d926              
1003d926              if (not(cond:2_1))
1003d926                  break
1003d926          
1003d928          int32_t ecx_8 = not.d(i_2)
1003d92e          int32_t* edi_8 = &var_400
1003d932          int32_t i_3 = 0xffffffff
1003d932          
1003d935          while (i_3 != 0)
1003d935              bool cond:3_1 = 0 != *edi_8
1003d935              edi_8 += 1
1003d935              i_3 -= 1
1003d935              
1003d935              if (not(cond:3_1))
1003d935                  break
1003d935          
1003d93d          int32_t esi_4
1003d93d          int32_t edi_10
1003d93d          edi_10, esi_4 =
1003d93d              __builtin_memcpy(dest: edi_8 - 1, src: edi_6 - ecx_8, n: ecx_8 u>> 2 << 2)
1003d941          ebp = arg1
1003d94b          __builtin_memcpy(dest: edi_10, src: esi_4, n: ecx_8 & 3)
1003d94b      
1003d950      if ((arg3:1.b & 8) != 0)
1003d952          char* edi_11 = " float"
1003d957          int32_t i_4 = 0xffffffff
1003d957          
1003d960          while (i_4 != 0)
1003d960              bool cond:4_1 = 0 != *edi_11
1003d960              edi_11 = &edi_11[1]
1003d960              i_4 -= 1
1003d960              
1003d960              if (not(cond:4_1))
1003d960                  break
1003d960          
1003d962          int32_t ecx_13 = not.d(i_4)
1003d968          int32_t* edi_13 = &var_400
1003d96c          int32_t i_5 = 0xffffffff
1003d96c          
1003d96f          while (i_5 != 0)
1003d96f              bool cond:5_1 = 0 != *edi_13
1003d96f              edi_13 += 1
1003d96f              i_5 -= 1
1003d96f              
1003d96f              if (not(cond:5_1))
1003d96f                  break
1003d96f          
1003d977          int32_t esi_6
1003d977          int32_t edi_15
1003d977          edi_15, esi_6 =
1003d977              __builtin_memcpy(dest: edi_13 - 1, src: edi_11 - ecx_13, n: ecx_13 u>> 2 << 2)
1003d97b          ebp = arg1
1003d985          __builtin_memcpy(dest: edi_15, src: esi_6, n: ecx_13 & 3)
1003d985      
1003d98a      if ((arg3:1.b & 0x10) != 0)
1003d98c          char* edi_16 = " integer"
1003d991          int32_t i_6 = 0xffffffff
1003d991          
1003d99a          while (i_6 != 0)
1003d99a              bool cond:6_1 = 0 != *edi_16
1003d99a              edi_16 = &edi_16[1]
1003d99a              i_6 -= 1
1003d99a              
1003d99a              if (not(cond:6_1))
1003d99a                  break
1003d99a          
1003d99c          int32_t ecx_18 = not.d(i_6)
1003d9a2          int32_t* edi_18 = &var_400
1003d9a6          int32_t i_7 = 0xffffffff
1003d9a6          
1003d9a9          while (i_7 != 0)
1003d9a9              bool cond:7_1 = 0 != *edi_18
1003d9a9              edi_18 += 1
1003d9a9              i_7 -= 1
1003d9a9              
1003d9a9              if (not(cond:7_1))
1003d9a9                  break
1003d9a9          
1003d9b1          int32_t esi_8
1003d9b1          int32_t edi_20
1003d9b1          edi_20, esi_8 =
1003d9b1              __builtin_memcpy(dest: edi_18 - 1, src: edi_16 - ecx_18, n: ecx_18 u>> 2 << 2)
1003d9b8          __builtin_memcpy(dest: edi_20, src: esi_8, n: ecx_18 & 3)
1003d9b8      
1003d9be      char* var_414 = arg4
1003d9bf      int32_t* var_418_1 = &var_400
1003d9c6      j_sub_10039200(ebp, "expected %s, found %s")
1003d9da      return 0
1003d9da  
1003da18  return 1

1003da19                                                                             90 90 90 90 90 90 90                           .......
1003da20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003da40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003da60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003da80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003daa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003dac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003dae0    int32_t sub_1003dae0(void* arg1, char* arg2)

1003daf5  if (j_sub_1003d580(arg1, arg2) != 0)
1003db0f      return 1
1003db0f  
1003dafd  j_sub_10039200(arg1, "couldn't read expected token")
1003db08  return 0

1003db10                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

1003db20    int32_t sub_1003db20(void* arg1, char* arg2)

1003db3e  char var_430[0x430]
1003db3e  
1003db3e  if (j_sub_1003d580(arg1, &var_430) != 0)
1003db40      int32_t ebx
1003db40      int32_t var_438_1 = ebx
1003db42      char* esi_1 = arg2
1003db49      char (* eax_1)[0x430] = &var_430
1003db4d      int32_t eax_3
1003db4d      
1003db4d      while (true)
1003db4d          char edx_1 = *eax_1
1003db4f          ebx.b = *esi_1
1003db53          bool c_1 = edx_1 u< ebx.b
1003db53          
1003db55          if (edx_1 == ebx.b)
1003db59              if (edx_1 == 0)
1003db71                  eax_3 = 0
1003db73                  break
1003db73              
1003db5b              edx_1 = (*eax_1)[1]
1003db5e              ebx.b = esi_1[1]
1003db63              c_1 = edx_1 u< ebx.b
1003db63              
1003db65              if (edx_1 == ebx.b)
1003db67                  eax_1 = &(*eax_1)[2]
1003db6a                  esi_1 = &esi_1[2]
1003db6a                  
1003db6f                  if (edx_1 != 0)
1003db6f                      continue
1003db6f                  
1003db71                  eax_3 = 0
1003db73                  break
1003db73          
1003db75          bool c_2 = unimplemented  {sbb eax, eax}
1003db77          eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1003db77          break
1003db77      
1003db7e      if (eax_3 == 0)
1003db8c          return 1
1003db8c      
1003db93      j_sub_100395f0(arg1, &var_430)
1003db93  
1003dba4  return 0

1003dba5                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
1003dbc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003dbe0    int32_t sub_1003dbe0(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

1003dbfe  char var_430[0x400]
1003dbfe  
1003dbfe  if (j_sub_1003d580(arg1, &var_430) != 0)
1003dc24      int32_t var_30
1003dc24      int32_t var_2c
1003dc24      
1003dc24      if (var_30 == arg2 && (var_2c & arg3) == arg3)
1003dc37          __builtin_memcpy(dest: arg4, src: &var_430, n: 0x430)
1003dc46          return 1
1003dc46      
1003dc4d      j_sub_100395f0(arg1, &var_430)
1003dc4d  
1003dc5e  return 0

1003dc5f                                                                                               90                                 .
1003dc60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003dc80    int32_t sub_1003dc80(void* arg1, char* arg2)

1003dc8a  int32_t ebx
1003dc8a  int32_t var_434 = ebx
1003dca1  char var_430[0x430]
1003dca1  
1003dca1  if (j_sub_1003d580(arg1, &var_430) != 0)
1003dcaa      while (true)
1003dcaa          char* esi_1 = arg2
1003dcac          char (* eax_1)[0x430] = &var_430
1003dcb0          int32_t eax_3
1003dcb0          
1003dcb0          while (true)
1003dcb0              char edx_1 = *eax_1
1003dcb2              ebx.b = *esi_1
1003dcb6              bool c_1 = edx_1 u< ebx.b
1003dcb6              
1003dcb8              if (edx_1 == ebx.b)
1003dcbc                  if (edx_1 == 0)
1003dcd4                      eax_3 = 0
1003dcd6                      break
1003dcd6                  
1003dcbe                  edx_1 = (*eax_1)[1]
1003dcc1                  ebx.b = esi_1[1]
1003dcc6                  c_1 = edx_1 u< ebx.b
1003dcc6                  
1003dcc8                  if (edx_1 == ebx.b)
1003dcca                      eax_1 = &(*eax_1)[2]
1003dccd                      esi_1 = &esi_1[2]
1003dccd                      
1003dcd2                      if (edx_1 != 0)
1003dcd2                          continue
1003dcd2                      
1003dcd4                      eax_3 = 0
1003dcd6                      break
1003dcd6              
1003dcd8              bool c_2 = unimplemented  {sbb eax, eax}
1003dcda              eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1003dcda              break
1003dcda          
1003dcdf          if (eax_3 == 0)
1003dd0f              return 1
1003dd0f          
1003dcf1          if (j_sub_1003d580(arg1, &var_430) == 0)
1003dcf1              break
1003dcf1  
1003dcff  return 0

1003dd10                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................
1003dd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003dd40    int32_t sub_1003dd40(void* arg1)

1003dd4c  j_sub_100395f0(arg1, arg1 + 0x228)
1003dd54  return 1

1003dd55                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
1003dd60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003dd70    int32_t sub_1003dd70(void* arg1, int32_t arg2)

1003dd7a  j_sub_100395f0(arg1, arg2)
1003dd82  return 1

1003dd83           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

1003dda0    int32_t sub_1003dda0(void* arg1, char* arg2)

1003ddb8  StrCopyFixed(arg1 + 0x104, arg2, 0x104)
1003ddbd  char* edi = arg1 + 0x104
1003ddbf  int32_t i = 0xffffffff
1003ddbf  
1003ddc7  while (i != 0)
1003ddc7      bool cond:0_1 = 0 != *edi
1003ddc7      edi = &edi[1]
1003ddc7      i -= 1
1003ddc7      
1003ddc7      if (not(cond:0_1))
1003ddc7          break
1003ddc7  
1003ddd4  if (*(not.d(i) - 1 + arg1 + 0x103) != 0x5c)
1003ddd6      char* edi_1 = arg1 + 0x104
1003ddd8      int32_t i_1 = 0xffffffff
1003ddd8      
1003dddd      while (i_1 != 0)
1003dddd          bool cond:1_1 = 0 != *edi_1
1003dddd          edi_1 = &edi_1[1]
1003dddd          i_1 -= 1
1003dddd          
1003dddd          if (not(cond:1_1))
1003dddd              break
1003dddd      
1003ddea      if (*(not.d(i_1) - 1 + arg1 + 0x103) != 0x2f)
1003ddec          void* edi_2 = &data_1005f6c0
1003ddf1          int32_t i_2 = 0xffffffff
1003ddf1          
1003ddf6          while (i_2 != 0)
1003ddf6              bool cond:2_1 = 0 != *edi_2
1003ddf6              edi_2 += 1
1003ddf6              i_2 -= 1
1003ddf6              
1003ddf6              if (not(cond:2_1))
1003ddf6                  break
1003ddf6          
1003ddf8          int32_t ecx_4 = not.d(i_2)
1003de00          char* edi_4 = arg1 + 0x104
1003de02          int32_t i_3 = 0xffffffff
1003de02          
1003de05          while (i_3 != 0)
1003de05              bool cond:3_1 = 0 != *edi_4
1003de05              edi_4 = &edi_4[1]
1003de05              i_3 -= 1
1003de05              
1003de05              if (not(cond:3_1))
1003de05                  break
1003de05          
1003de0d          int32_t esi_2
1003de0d          int32_t edi_6
1003de0d          edi_6, esi_2 =
1003de0d              __builtin_memcpy(dest: edi_4 - 1, src: edi_2 - ecx_4, n: ecx_4 u>> 2 << 2)
1003de14          __builtin_memcpy(dest: edi_6, src: esi_2, n: ecx_4 & 3)
1003de14  
1003de19  return 0

1003de1a                                                                                90 90 90 90 90 90                            ......
1003de20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003de40    int32_t sub_1003de40(void* arg1, int32_t arg2)

1003de48  *(arg1 + 0x208) = arg2
1003de4e  return arg2

1003de4f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

1003de60    char* sub_1003de60(char* arg1, void* arg2, void* arg3)

1003de71  int32_t* eax = j_sub_100401a0(arg1, arg2, arg3)
1003de71  
1003de7f  if (eax == 0)
1003de85      return 0
1003de85  
1003de8d  eax[0x15a] = 0
1003de93  char* s = j_sub_10038f90(0x658)
1003dea3  __builtin_memset(s, c: 0, n: 0x658)
1003deb0  StrCopyFixed(s, arg1, 0x104)
1003deba  *(s + 0x20c) = eax
1003dec0  *(s + 0x210) = 0
1003dec6  *(s + 0x214) = 0
1003decc  *(s + 0x21c) = 0
1003ded2  *(s + 0x220) = 0
1003dede  *(s + 0x218) = j_sub_10039000(0x1000)
1003dee4  j_sub_1003b680(s)
1003def2  return s

1003def3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1003df00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003df20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003df30    char* sub_1003df30(int32_t arg1, int32_t arg2, char* arg3)

1003df41  void* eax = j_sub_10040380(arg1, arg2, arg3)
1003df41  
1003df4f  if (eax == 0)
1003df55      return 0
1003df55  
1003df5d  *(eax + 0x568) = 0
1003df63  char* s = j_sub_10038f90(0x658)
1003df73  __builtin_memset(s, c: 0, n: 0x658)
1003df80  StrCopyFixed(s, arg3, 0x104)
1003df8a  *(s + 0x20c) = eax
1003df90  *(s + 0x210) = 0
1003df96  *(s + 0x214) = 0
1003df9c  *(s + 0x21c) = 0
1003dfa2  *(s + 0x220) = 0
1003dfae  *(s + 0x218) = j_sub_10039000(0x1000)
1003dfb4  j_sub_1003b680(s)
1003dfc2  return s

1003dfc3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
1003dfe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003e000    void* sub_1003e000(void* arg1)

1003e00d  for (void* i = *(arg1 + 0x20c); i != 0; i = *(arg1 + 0x20c))
1003e016      *(arg1 + 0x20c) = *(i + 0x568)
1003e01c      j_sub_10040470(i)
1003e01c  
1003e036  for (void* i_1 = *(arg1 + 0x210); i_1 != 0; i_1 = *(arg1 + 0x210))
1003e03f      *(arg1 + 0x210) = *(i_1 + 0x428)
1003e045      j_sub_100394a0(i_1)
1003e045  
1003e091  for (int32_t i_2 = 0; i_2 s< 0x1000; i_2 += 4)
1003e05a      int32_t* eax = *(arg1 + 0x218)
1003e060      void* ecx_2 = eax + i_2
1003e068      void** eax_1
1003e068      
1003e068      for (void* j = *(eax + i_2); j != 0; j = *(eax_1 + i_2))
1003e06e          *ecx_2 = *(j + 0x1c)
1003e070          j_sub_10039e70(j)
1003e075          eax_1 = *(arg1 + 0x218)
1003e07e          ecx_2 = eax_1 + i_2
1003e07e  
1003e09c  for (void* i_3 = *(arg1 + 0x21c); i_3 != 0; i_3 = *(arg1 + 0x21c))
1003e0a2      *(arg1 + 0x21c) = *(i_3 + 0xc)
1003e0a8      j_sub_100390b0(i_3)
1003e0a8  
1003e0ba  void* eax_2 = *(arg1 + 0x218)
1003e0ba  
1003e0c2  if (eax_2 != 0)
1003e0c5      j_sub_100390b0(eax_2)
1003e0c5  
1003e0d7  return j_sub_100390b0(arg1)

1003e0d8                                                                          90 90 90 90 90 90 90 90                          ........
1003e0e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003e120    int32_t sub_1003e120(void* arg1, int32_t* arg2)

1003e121  void* ebp = arg1
1003e121  
1003e12f  if (*(ebp + 0x134) == 0)
1003e13e      *(ebp + 0x134) = j_sub_10038f90(0x400)
1003e13e  
1003e14a  int32_t* esi = arg2
1003e153  int32_t result = 0
1003e155  __builtin_memset(s: *(ebp + 0x134), c: 0, n: 0x400)
1003e155  
1003e15a  if (*esi != 0)
1003e161      arg2 = esi
1003e161      
1003e1f6      do
1003e16d          int32_t* ebx_1 = nullptr
1003e16f          result = sx.d(**esi)
1003e172          int32_t* edx_1 = *(*(ebp + 0x134) + (result << 2))
1003e172          
1003e177          if (edx_1 != 0)
1003e179              while (true)
1003e179                  int32_t edi_1 = *edx_1
1003e17b                  int32_t i = 0xffffffff
1003e17e                  result = 0
1003e17e                  
1003e180                  while (i != 0)
1003e180                      bool cond:1_1 = 0 != *edi_1
1003e180                      edi_1 += 1
1003e180                      i -= 1
1003e180                      
1003e180                      if (not(cond:1_1))
1003e180                          break
1003e180                  
1003e182                  int32_t edi_2 = *esi
1003e189                  int32_t i_1 = 0xffffffff
1003e189                  
1003e18c                  while (i_1 != 0)
1003e18c                      bool cond:2_1 = 0 != *edi_2
1003e18c                      edi_2 += 1
1003e18c                      i_1 -= 1
1003e18c                      
1003e18c                      if (not(cond:2_1))
1003e18c                          break
1003e18c                  
1003e193                  if (not.d(i) - 1 u< not.d(i_1) - 1)
1003e1a6                      esi[2] = edx_1
1003e1a6                      
1003e1a9                      if (ebx_1 == 0)
1003e1b6                          ebp = arg1
1003e1ba                          result = sx.d(**esi)
1003e1c3                          *(*(ebp + 0x134) + (result << 2)) = esi
1003e1a9                      else
1003e1ab                          ebp = arg1
1003e1af                          ebx_1[2] = esi
1003e1af                      
1003e1c8                      if (edx_1 != 0)
1003e1c8                          goto label_1003e1ec
1003e1c8                      
1003e1c8                      goto label_1003e1cc
1003e1c8                  
1003e195                  ebx_1 = edx_1
1003e197                  edx_1 = edx_1[2]
1003e197                  
1003e19c                  if (edx_1 == 0)
1003e19e                      ebp = arg1
1003e1a2                      break
1003e1a2          
1003e1cc          label_1003e1cc:
1003e1cc          esi[2] = 0
1003e1cc          
1003e1d3          if (ebx_1 == 0)
1003e1e2              result = sx.d(**esi)
1003e1e5              *(*(ebp + 0x134) + (result << 2)) = esi
1003e1d3          else
1003e1d5              ebx_1[2] = esi
1003e1d5          
1003e1ec          label_1003e1ec:
1003e1ec          esi = &arg2[3]
1003e1ef          arg2 = esi
1003e1f6      while (*esi != 0)
1003e1f6  
1003e200  return result

1003e201     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1003e220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003e250    int32_t sub_1003e250(void* arg1, int32_t arg2)

1003e256  int32_t edx = 0
1003e258  int32_t* esi = *(arg1 + 0x130)
1003e258  
1003e262  if (*esi != 0)
1003e268      int32_t* ecx_1 = esi
1003e26a      int32_t* eax = esi
1003e27c      int32_t i
1003e27c      
1003e27c      do
1003e26f          if (ecx_1[1] == arg2)
1003e290              return esi[edx * 3]
1003e290          
1003e271          i = eax[3]
1003e274          eax = &eax[3]
1003e277          edx += 1
1003e278          ecx_1 = eax
1003e27c      while (i != 0)
1003e27c  
1003e286  return "unkown punctuation"

1003e291                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1003e2a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003e2c0    void sub_1003e2c0(void* arg1, void* arg2)

1003e2d5  if ((*(arg1 + 0x12c) & 1) == 0)
1003e2ec      void var_400
1003e2ec      void arg_c
1003e2ec      sub_10044c05(&var_400, arg2, &arg_c)
1003e305      data_10063fe8(3, "file %s, line %d: %s\n", arg1, *(arg1 + 0x120), &var_400)

1003e316                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1003e320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003e340    void sub_1003e340(void* arg1, void* arg2)

1003e355  if ((*(arg1 + 0x12c) & 2) == 0)
1003e36c      void var_400
1003e36c      void arg_c
1003e36c      sub_10044c05(&var_400, arg2, &arg_c)
1003e385      data_10063fe8(2, "file %s, line %d: %s\n", arg1, *(arg1 + 0x120), &var_400)

1003e396                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
1003e3a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003e3c0    int32_t sub_1003e3c0(void* arg1, int32_t* arg2)

1003e3c7  if (arg2 != 0)
1003e3d0      int32_t eax = j_sub_1003e120(arg1, arg2)
1003e3d8      *(arg1 + 0x130) = arg2
1003e3e0      return eax
1003e3e0  
1003e3eb  int32_t eax_1 = j_sub_1003e120(arg1, &data_1005fe00)
1003e3f3  *(arg1 + 0x130) = &data_1005fe00
1003e3fe  return eax_1

1003e3ff                                                                                               90                                 .
1003e400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003e410    int32_t sub_1003e410(void* arg1)

1003e420  while (true)
1003e420      char i
1003e420      
1003e420      if (**(arg1 + 0x108) s<= 0x20)
1003e447          char* eax_2
1003e447          
1003e447          do
1003e422              eax_2 = *(arg1 + 0x108)
1003e428              i = *eax_2
1003e428              
1003e42c              if (i == 0)
1003e4c9                  return 0
1003e4c9              
1003e435              if (i == 0xa)
1003e437                  *(arg1 + 0x120) += 1
1003e437              
1003e43e              *(arg1 + 0x108) = &eax_2[1]
1003e447          while (eax_2[1] s<= 0x20)
1003e447      
1003e449      char* eax_4 = *(arg1 + 0x108)
1003e449      
1003e451      if (*eax_4 == 0x2f)
1003e453          i = eax_4[1]
1003e456          void* eax_5 = &eax_4[1]
1003e456          
1003e459          if (i == 0x2f)
1003e45b              *(arg1 + 0x108) = eax_5
1003e45b              
1003e471              do
1003e461                  eax_5 += 1
1003e462                  *(arg1 + 0x108) = eax_5
1003e468                  i = *eax_5
1003e468                  
1003e46c                  if (i == 0)
1003e4c9                      return 0
1003e471              while (i != 0xa)
1003e471              
1003e473              *(arg1 + 0x120) += 1
1003e47a              label_1003e47a:
1003e47a              *(arg1 + 0x108) = eax_5 + 1
1003e47a              
1003e483              if (*(eax_5 + 1) == 0)
1003e483                  break
1003e483              
1003e483              continue
1003e459          else if (i == 0x2a)
1003e48c              *(arg1 + 0x108) = eax_5
1003e48c              
1003e492              while (true)
1003e492                  eax_5 += 1
1003e493                  *(arg1 + 0x108) = eax_5
1003e499                  i = *eax_5
1003e499                  
1003e49d                  if (i == 0)
1003e4c9                      return 0
1003e4c9                  
1003e4a2                  if (i == 0xa)
1003e4a4                      *(arg1 + 0x120) += 1
1003e4a4                  
1003e4ad                  if (*eax_5 == 0x2a)
1003e4b2                      if (*(eax_5 + 1) == 0x2f)
1003e4b2                          break
1003e4b2              
1003e4ba              eax_5 = *(arg1 + 0x108) + 1
1003e4bb              *(arg1 + 0x108) = eax_5
1003e4bb              
1003e4c4              if (*eax_5 == 0)
1003e4c4                  break
1003e4c4              
1003e4c4              goto label_1003e47a
1003e4c4      
1003e4d0      return 1
1003e4d0  
1003e4c9  return 0

1003e4d1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1003e4e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003e520    int32_t sub_1003e520(void* arg1, char* arg2)

1003e52c  char* edi_1 = *(arg1 + 0x108) + 1
1003e52f  *(arg1 + 0x108) = edi_1
1003e535  char eax = *edi_1
1003e540  int32_t ecx_1
1003e540  
1003e540  if (sx.d(eax) - 0x22 u> 0x56)
1003e643      label_1003e643:
1003e643      
1003e643      if (eax s< 0x30 || eax s> 0x39)
1003e64b          j_sub_1003e2c0(arg1, "unknown escape char")
1003e64b      
1003e659      ecx_1 = 0
1003e65b      int32_t i = sx.d(**(arg1 + 0x108))
1003e65b      
1003e661      if (i s>= 0x30)
1003e666          while (i s<= 0x39)
1003e671              char* edi_4 = *(arg1 + 0x108) + 1
1003e672              ecx_1 = i + ecx_1 * 0xa - 0x30
1003e678              *(arg1 + 0x108) = edi_4
1003e67e              i = sx.d(*edi_4)
1003e67e              
1003e684              if (i s< 0x30)
1003e684                  break
1003e684      
1003e693      *(arg1 + 0x108) -= 1
1003e693      
1003e699      if (ecx_1 s> 0xff)
1003e6a1          j_sub_1003e340(arg1, "too large value in escape charac…")
1003e6a9          ecx_1 = 0xff
1003e540  else
1003e548      int32_t edx_1
1003e548      edx_1.b = *(sx.d(eax) + &jump_table_1003e6cc[4]:2)
1003e548      
1003e54e      switch (edx_1)
1003e5af          case 0
1003e5af              ecx_1 = 0x22
1003e5a5          case 1
1003e5a5              ecx_1 = 0x27
1003e5b9          case 2
1003e5b9              ecx_1 = 0x3f
1003e555          case 3
1003e555              ecx_1 = 0x5c
1003e59b          case 4
1003e59b              ecx_1 = 7
1003e587          case 5
1003e587              ecx_1 = 8
1003e591          case 6
1003e591              ecx_1 = 0xc
1003e55f          case 7
1003e55f              ecx_1 = 0xa
1003e569          case 8
1003e569              ecx_1 = 0xd
1003e573          case 9
1003e573              ecx_1 = 9
1003e57d          case 0xa
1003e57d              ecx_1 = 0xb
1003e5c4          case 0xb
1003e5c4              *(arg1 + 0x108) = &edi_1[1]
1003e5ca              ecx_1 = 0
1003e5ca              
1003e5cc              while (true)
1003e5cc                  char* edx_2 = *(arg1 + 0x108)
1003e5d2                  int32_t eax_1 = sx.d(*edx_2)
1003e5d2                  
1003e5dd                  if (eax_1 s>= 0x30 && eax_1 s<= 0x39)
1003e5e5                      ecx_1 = (ecx_1 << 4) + eax_1 - 0x30
1003e5e8                      *(arg1 + 0x108) = &edx_2[1]
1003e5ee                      continue
1003e5ee                  
1003e5f8                  if (eax_1 s>= 0x41 && eax_1 s<= 0x5a)
1003e600                      ecx_1 = (ecx_1 << 4) + eax_1 - 0x37
1003e603                      *(arg1 + 0x108) = &edx_2[1]
1003e609                      continue
1003e609                  
1003e60e                  if (eax_1 s< 0x61)
1003e60e                      break
1003e60e                  
1003e613                  if (eax_1 s> 0x7a)
1003e613                      break
1003e613                  
1003e61b                  ecx_1 = (ecx_1 << 4) + eax_1 - 0x57
1003e61e                  *(arg1 + 0x108) = &edx_2[1]
1003e61e              
1003e633              *(arg1 + 0x108) -= 1
1003e633              
1003e639              if (ecx_1 s> 0xff)
1003e6a1                  j_sub_1003e340(arg1, "too large value in escape charac…")
1003e6a9                  ecx_1 = 0xff
1003e54e          case 0xc
1003e54e              goto label_1003e643
1003e54e  
1003e6ba  *(arg1 + 0x108) += 1
1003e6c0  *arg2 = ecx_1.b
1003e6c8  return 1

1003e6c9                             8d 49 00                                                                       .I.
1003e6cc  uint32_t jump_table_1003e6cc[0xd] = 
1003e6cc  {
1003e6cc      [0x0] =  0x1003e5af
1003e6d0      [0x1] =  0x1003e5a5
1003e6d4      [0x2] =  0x1003e5b9
1003e6d8      [0x3] =  0x1003e555
1003e6dc      [0x4] =  0x1003e59b
1003e6e0      [0x5] =  0x1003e587
1003e6e4      [0x6] =  0x1003e591
1003e6e8      [0x7] =  0x1003e55f
1003e6ec      [0x8] =  0x1003e569
1003e6f0      [0x9] =  0x1003e573
1003e6f4      [0xa] =  0x1003e57d
1003e6f8      [0xb] =  0x1003e5c3
1003e6fc      [0xc] =  0x1003e63d
1003e700  }
1003e700  uint8_t lookup_table_1003e700[0x57] = 
1003e700  {
1003e700      [0x00] =  0x00
1003e701      [0x01] =  0x0c
1003e702      [0x02] =  0x0c
1003e703      [0x03] =  0x0c
1003e704      [0x04] =  0x0c
1003e705      [0x05] =  0x01
1003e706      [0x06] =  0x0c
1003e707      [0x07] =  0x0c
1003e708      [0x08] =  0x0c
1003e709      [0x09] =  0x0c
1003e70a      [0x0a] =  0x0c
1003e70b      [0x0b] =  0x0c
1003e70c      [0x0c] =  0x0c
1003e70d      [0x0d] =  0x0c
1003e70e      [0x0e] =  0x0c
1003e70f      [0x0f] =  0x0c
1003e710      [0x10] =  0x0c
1003e711      [0x11] =  0x0c
1003e712      [0x12] =  0x0c
1003e713      [0x13] =  0x0c
1003e714      [0x14] =  0x0c
1003e715      [0x15] =  0x0c
1003e716      [0x16] =  0x0c
1003e717      [0x17] =  0x0c
1003e718      [0x18] =  0x0c
1003e719      [0x19] =  0x0c
1003e71a      [0x1a] =  0x0c
1003e71b      [0x1b] =  0x0c
1003e71c      [0x1c] =  0x0c
1003e71d      [0x1d] =  0x02
1003e71e      [0x1e] =  0x0c
1003e71f      [0x1f] =  0x0c
1003e720      [0x20] =  0x0c
1003e721      [0x21] =  0x0c
1003e722      [0x22] =  0x0c
1003e723      [0x23] =  0x0c
1003e724      [0x24] =  0x0c
1003e725      [0x25] =  0x0c
1003e726      [0x26] =  0x0c
1003e727      [0x27] =  0x0c
1003e728      [0x28] =  0x0c
1003e729      [0x29] =  0x0c
1003e72a      [0x2a] =  0x0c
1003e72b      [0x2b] =  0x0c
1003e72c      [0x2c] =  0x0c
1003e72d      [0x2d] =  0x0c
1003e72e      [0x2e] =  0x0c
1003e72f      [0x2f] =  0x0c
1003e730      [0x30] =  0x0c
1003e731      [0x31] =  0x0c
1003e732      [0x32] =  0x0c
1003e733      [0x33] =  0x0c
1003e734      [0x34] =  0x0c
1003e735      [0x35] =  0x0c
1003e736      [0x36] =  0x0c
1003e737      [0x37] =  0x0c
1003e738      [0x38] =  0x0c
1003e739      [0x39] =  0x0c
1003e73a      [0x3a] =  0x03
1003e73b      [0x3b] =  0x0c
1003e73c      [0x3c] =  0x0c
1003e73d      [0x3d] =  0x0c
1003e73e      [0x3e] =  0x0c
1003e73f      [0x3f] =  0x04
1003e740      [0x40] =  0x05
1003e741      [0x41] =  0x0c
1003e742      [0x42] =  0x0c
1003e743      [0x43] =  0x0c
1003e744      [0x44] =  0x06
1003e745      [0x45] =  0x0c
1003e746      [0x46] =  0x0c
1003e747      [0x47] =  0x0c
1003e748      [0x48] =  0x0c
1003e749      [0x49] =  0x0c
1003e74a      [0x4a] =  0x0c
1003e74b      [0x4b] =  0x0c
1003e74c      [0x4c] =  0x07
1003e74d      [0x4d] =  0x0c
1003e74e      [0x4e] =  0x0c
1003e74f      [0x4f] =  0x0c
1003e750      [0x50] =  0x08
1003e751      [0x51] =  0x0c
1003e752      [0x52] =  0x09
1003e753      [0x53] =  0x0c
1003e754      [0x54] =  0x0a
1003e755      [0x55] =  0x0c
1003e756      [0x56] =  0x0b
1003e757  }

1003e757                                                                       90 90 90 90 90 90 90 90 90                         .........
1003e760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e7a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e7c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e7e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003e7f0    int32_t sub_1003e7f0(void* arg1, char* arg2, int32_t arg3)

1003e7fb  char* ebx
1003e7fb  
1003e7fb  if (arg3 != 0x22)
1003e811      ebx = arg2
1003e813      *(arg2 + 0x400) = 2
1003e7fb  else
1003e7fd      ebx = arg2
1003e801      *(ebx + 0x400) = 1
1003e801  
1003e81d  void* esi = arg1
1003e821  char* edi = 1
1003e826  void* ebp = &ebx[1]
1003e831  *ebx = **(esi + 0x108)
1003e83a  *(esi + 0x108) += 1
1003e83a  
1003e840  while (true)
1003e840      arg1 = ebp
1003e840      
1003e84a      while (true)
1003e84a          if (edi s>= 0x3fe)
1003e8fa              int32_t var_14_3 = 0x400
1003e905              j_sub_1003e2c0(esi, "string longer than MAX_TOKEN = %…")
1003e913              return 0
1003e913          
1003e850          char* ecx_1 = *(esi + 0x108)
1003e856          void* eax_2
1003e856          eax_2.b = *ecx_1
1003e856          
1003e863          if (eax_2.b == 0x5c && (*(esi + 0x12c) & 8) == 0)
1003e867              j_sub_1003e520(esi, ebp)
1003e877              edi = &edi[1]
1003e878              ebp += 1
1003e879              break
1003e879          
1003e882          if (sx.d(eax_2.b) != arg3)
1003e8d5              if (eax_2.b == 0)
1003e951                  *(edi + ebx) = 0
1003e955                  j_sub_1003e2c0(esi, "missing trailing quote")
1003e963                  return 0
1003e963              
1003e8d9              if (eax_2.b == 0xa)
1003e964                  char* var_14_4 = ebx
1003e96b                  *(edi + ebx) = 0
1003e96f                  j_sub_1003e2c0(esi, "newline inside string %s")
1003e97d                  return 0
1003e97d              
1003e8df              *ebp = eax_2.b
1003e8e8              edi = &edi[1]
1003e8e9              ebp += 1
1003e8eb              arg1 = ebp
1003e8ef              *(esi + 0x108) += 1
1003e882          else
1003e884              eax_2.b = *(esi + 0x12c)
1003e88f              *(esi + 0x108) = &ecx_1[1]
1003e88f              
1003e895              if ((eax_2.b & 4) != 0)
1003e895                  goto label_1003e92f
1003e895              
1003e89b              int32_t ebx_1 = *(esi + 0x120)
1003e8a2              int32_t eax_3
1003e8a2              int32_t edx_1
1003e8a2              eax_3, edx_1 = j_sub_1003e410(esi)
1003e8ac              char* eax_4
1003e8ac              
1003e8ac              if (eax_3 != 0)
1003e8ae                  eax_4 = *(esi + 0x108)
1003e8ae              
1003e8bd              if (eax_3 == 0 || sx.d(*eax_4) != arg3)
1003e91f                  *(esi + 0x120) = ebx_1
1003e925                  ebx = arg2
1003e929                  *(esi + 0x108) = &ecx_1[1]
1003e92f                  label_1003e92f:
1003e92f                  edx_1.b = arg3.b
1003e938                  *(edi + ebx) = edx_1.b
1003e93c                  *(&edi[1] + ebx) = 0
1003e940                  *(ebx + 0x404) = &edi[1]
1003e94a                  return 1
1003e94a              
1003e8bf              ebx = arg2
1003e8c3              ebp = arg1
1003e8c8              *(esi + 0x108) = &eax_4[1]

1003e97e                                                                                            90 90                                ..
1003e980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e9a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e9c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003e9e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003e9f0    int32_t sub_1003e9f0(void* arg1, char* arg2)

1003e9f9  *(arg2 + 0x400) = 4
1003ea0b  *arg2 = **(arg1 + 0x108)
1003ea13  char* eax_2 = *(arg1 + 0x108) + 1
1003ea14  char* i = 1
1003ea19  *(arg1 + 0x108) = eax_2
1003ea19  
1003ea54  do
1003ea1f      eax_2.b = *eax_2
1003ea1f      
1003ea3b      if ((eax_2.b s< 0x61 || eax_2.b s> 0x7a) && (eax_2.b s< 0x41 || eax_2.b s> 0x5a)
1003ea3b              && (eax_2.b s< 0x30 || eax_2.b s> 0x39) && eax_2.b != 0x5f)
1003ea6d          *(i + arg2) = 0
1003ea71          *(arg2 + 0x404) = i
1003ea7d          return 1
1003ea7d      
1003ea3d      *(i + arg2) = eax_2.b
1003ea46      i = &i[1]
1003ea47      eax_2 = *(arg1 + 0x108) + 1
1003ea4e      *(arg1 + 0x108) = eax_2
1003ea54  while (i s< 0x400)
1003ea54  
1003ea56  int32_t var_8 = 0x400
1003ea61  j_sub_1003e2c0(arg1, "name longer than MAX_TOKEN = %d")
1003ea6c  return 0

1003ea7e                                                                                            90 90                                ..
1003ea80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003eaa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003eab0    int32_t sub_1003eab0(char* arg1, char* arg2, int32_t* arg3, int32_t* arg4)

1003eab7  int32_t eax = 0
1003eac6  *arg3 = 0
1003eac8  *arg4 = 0
1003eaca  arg4[1] = 0
1003eaca  
1003ead0  if ((arg2:1.b & 8) != 0)
1003ead2      char* edx_1 = arg1
1003ead6      char* ecx
1003ead6      ecx.b = *edx_1
1003ead6      
1003eada      while (ecx.b != 0)
1003eadf          if (ecx.b == 0x2e)
1003eae3              if (eax != 0)
1003ec5e                  return eax
1003ec5e              
1003eae9              eax = 0xa
1003eaee              edx_1 = &edx_1[1]
1003eae3              goto label_1003eb03
1003eae3          
1003eaf3          if (eax == 0)
1003eb34              *arg4 = fconvert.d(float.t(sx.d(ecx.b) - 0x30)
1003eb34                  + fconvert.t(*arg4) * fconvert.t(10.0))
1003eaf3          else
1003eb03              label_1003eb03:
1003eb03              int32_t var_4_1 = 0
1003eb0b              long double x87_r6_1 = float.t(eax.q)
1003eb12              eax *= 0xa
1003eb18              *arg4 =
1003eb18                  fconvert.d(float.t(sx.d(*edx_1) - 0x30) / x87_r6_1 + fconvert.t(*arg4))
1003eb18          
1003eb36          ecx.b = edx_1[1]
1003eb39          edx_1 = &edx_1[1]
1003eb39      
1003eb40      int16_t x87control
1003eb40      int32_t eax_2 = __ftol(x87control, fconvert.t(*arg4))
1003eb45      *arg3 = eax_2
1003eb4d      return eax_2
1003eb4d  
1003eb51  if ((arg2.b & 8) != 0)
1003eb53      char* edx_2 = arg1
1003eb57      eax.b = *edx_2
1003eb57      
1003eb5b      while (eax.b != 0)
1003eb5f          edx_2 = &edx_2[1]
1003eb6a          *arg3 = sx.d(eax.b) + *arg3 * 0xa - 0x30
1003eb6c          eax.b = *edx_2
1003eb6c      
1003eb74      int32_t var_4_2 = 0
1003eb80      *arg4 = fconvert.d(float.t((*arg3).q))
1003eb88      return eax
1003eb88  
1003eb8c  if ((arg2:1.b & 1) != 0)
1003eb92      void* edx_5 = &arg1[2]
1003eb92      
1003eb97      while (*edx_5 != 0)
1003eb9b          int32_t eax_4 = *arg3 << 4
1003eb9e          *arg3 = eax_4
1003eba0          int32_t ecx_6 = eax_4
1003eba2          eax_4.b = *edx_5
1003ebaa          int32_t ecx_7
1003ebaa          
1003ebaa          if (eax_4.b s>= 0x61 && eax_4.b s<= 0x66)
1003ebac              eax = sx.d(eax_4.b)
1003ebaf              ecx_7 = eax + ecx_6 - 0x57
1003ebaa          else if (eax_4.b s< 0x41 || eax_4.b s> 0x46)
1003ebc6              eax = sx.d(eax_4.b)
1003ebc9              ecx_7 = eax + ecx_6 - 0x30
1003ebbb          else
1003ebbd              eax = sx.d(eax_4.b)
1003ebc0              ecx_7 = eax + ecx_6 - 0x37
1003ebc0          
1003ebcd          edx_5 += 1
1003ebce          *arg3 = ecx_7
1003ebce      
1003ebd6      int32_t var_4_3 = 0
1003ebe2      *arg4 = fconvert.d(float.t((*arg3).q))
1003ebea      return eax
1003ebea  
1003ebee  if ((arg2:1.b & 2) != 0)
1003ebf4      char* ecx_9 = &arg1[1]
1003ebf5      eax.b = *ecx_9
1003ebf5      
1003ebf9      while (eax.b != 0)
1003ebfd          ecx_9 = &ecx_9[1]
1003ec05          *arg3 = sx.d(eax.b) + (*arg3 << 3) - 0x30
1003ec07          eax.b = *ecx_9
1003ec07      
1003ec0d      int32_t eax_5 = *arg3
1003ec0f      int32_t var_4_4 = 0
1003ec1b      *arg4 = fconvert.d(float.t(eax_5.q))
1003ec23      return eax_5
1003ec23  
1003ec27  if ((arg2:1.b & 4) != 0)
1003ec2d      char* ecx_11 = &arg1[2]
1003ec30      eax.b = *ecx_11
1003ec30      
1003ec34      while (eax.b != 0)
1003ec38          ecx_11 = &ecx_11[1]
1003ec40          *arg3 = sx.d(eax.b) + (*arg3 << 1) - 0x30
1003ec42          eax.b = *ecx_11
1003ec42      
1003ec48      eax = *arg3
1003ec4a      int32_t var_4_5 = 0
1003ec56      *arg4 = fconvert.d(float.t(eax.q))
1003ec56  
1003ec5e  return eax

1003ec5f                                                                                               90                                 .
1003ec60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003ec80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003eca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003ecc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003ecd0    int32_t sub_1003ecd0(void* arg1, char* arg2)

1003ecd7  char* esi = arg2
1003ecdc  char* ecx = nullptr
1003ecde  *(esi + 0x400) = 3
1003ece8  char* edi = *(arg1 + 0x108)
1003ecee  char edx = *edi
1003ecf3  void* edx_3
1003ecf3  
1003ecf3  if (edx != 0x30)
1003ee23      label_1003ee23:
1003ee23      int32_t edi_5 = 0
1003ee25      int32_t ebp_1 = 0
1003ee25      
1003ee2a      if (edx == 0x30)
1003ee2c          edi_5 = 1
1003ee2c      
1003ee37      while (true)
1003ee37          ecx = &ecx[1]
1003ee38          char* edx_6
1003ee38          edx_6.b = **(arg1 + 0x108)
1003ee3a          *(ecx + esi - 1) = edx_6.b
1003ee44          char* edx_8 = *(arg1 + 0x108) + 1
1003ee4b          *(arg1 + 0x108) = edx_8
1003ee4b          
1003ee51          if (ecx s>= 0x400)
1003ee7b              int32_t var_14_2 = 0x400
1003ee86              j_sub_1003e2c0(arg1, "number longer than MAX_TOKEN = %…")
1003ee94              return 0
1003ee94          
1003ee53          edx_8.b = *edx_8
1003ee53          
1003ee58          if (edx_8.b != 0x2e)
1003ee69              if (edx_8.b != 0x38 && edx_8.b != 0x39)
1003ee6e                  if (edx_8.b s< 0x30)
1003ee6e                      break
1003ee6e                  
1003ee73                  if (edx_8.b s> 0x39)
1003ee73                      break
1003ee73                  
1003ee73                  continue
1003ee73              
1003ee77              edi_5 = 0
1003ee58          else
1003ee5a              ebp_1 = 1
1003ee5a      
1003ee95      edx_3 = *(esi + 0x404)
1003ee95      
1003ee9d      if (edi_5 == 0)
1003eea4          edx_3 |= 8
1003ee9d      else
1003ee9f          edx_3:1.b |= 2
1003ee9f      
1003eea9      *(esi + 0x404) = edx_3
1003eea9      
1003eeaf      if (ebp_1 != 0)
1003eeb1          edx_3:1.b |= 8
1003eeb4          *(esi + 0x404) = edx_3
1003ecf3  else
1003ecf9      int32_t ebx
1003ecf9      ebx.b = edi[1]
1003ecf9      
1003ed04      if (ebx.b == 0x78 || ebx.b == 0x58)
1003ed0a          *esi = 0x30
1003ed13          char* edi_2 = *(arg1 + 0x108) + 1
1003ed16          *(arg1 + 0x108) = edi_2
1003ed1c          char* ecx_1
1003ed1c          ecx_1.b = *edi_2
1003ed1e          esi[1] = ecx_1.b
1003ed27          char* edx_2 = *(arg1 + 0x108) + 1
1003ed28          ecx = 2
1003ed2d          *(arg1 + 0x108) = edx_2
1003ed2d          
1003ed33          while (true)
1003ed33              edx_2.b = *edx_2
1003ed33              
1003ed47              if ((edx_2.b s< 0x30 || edx_2.b s> 0x39)
1003ed47                      && (edx_2.b s< 0x61 || edx_2.b s> 0x66))
1003ed4c                  if (edx_2.b s< 0x41)
1003ed4c                      break
1003ed4c                  
1003ed4e                  if (edx_2.b s> 0x41)
1003ed4e                      break
1003ed4e              
1003ed50              *(ecx + esi) = edx_2.b
1003ed59              ecx = &ecx[1]
1003ed5a              char* ebx_2 = *(arg1 + 0x108) + 1
1003ed61              *(arg1 + 0x108) = ebx_2
1003ed67              edx_2 = ebx_2
1003ed67              
1003ed69              if (ecx s>= 0x400)
1003ed6b                  int32_t var_14 = 0x400
1003ed76                  j_sub_1003e2c0(arg1, "hexadecimal number longer than M…")
1003ed84                  return 0
1003ed84          
1003ed8b          edx_3:1.b = (*(esi + 0x404)):1.b | 1
1003eeb4          *(esi + 0x404) = edx_3
1003ed04      else
1003ed96          if (edx != 0x30)
1003ed96              goto label_1003ee23
1003ed96          
1003ed9c          ebx.b = edi[1]
1003ed9c          
1003eda7          if (ebx.b != 0x62 && ebx.b != 0x42)
1003eda2              goto label_1003ee23
1003eda2          
1003eda9          *esi = 0x30
1003edb2          char* edi_4 = *(arg1 + 0x108) + 1
1003edb5          *(arg1 + 0x108) = edi_4
1003edbd          ecx = 2
1003edc2          esi[1] = *edi_4
1003edcb          char* edx_5 = *(arg1 + 0x108) + 1
1003edcc          *(arg1 + 0x108) = edx_5
1003edcc          
1003edd2          while (true)
1003edd2              edx_5.b = *edx_5
1003edd2              
1003eddc              if (edx_5.b != 0x30 && edx_5.b != 0x31)
1003ee01                  edx_3:1.b = (*(esi + 0x404)):1.b | 4
1003ee04                  break
1003ee04              
1003edde              *(ecx + esi) = edx_5.b
1003ede7              ecx = &ecx[1]
1003ede8              char* ebx_4 = *(arg1 + 0x108) + 1
1003edef              *(arg1 + 0x108) = ebx_4
1003edf5              edx_5 = ebx_4
1003edf5              
1003edf7              if (ecx s>= 0x400)
1003ee09                  int32_t var_14_1 = 0x400
1003ee14                  j_sub_1003e2c0(arg1, "binary number longer than MAX_TO…")
1003ee22                  return 0
1003ee22          
1003eeb4          *(esi + 0x404) = edx_3
1003eeb4  
1003eeba  arg2 = 2
1003ef2c  bool cond:5_1
1003ef2c  
1003ef2c  do
1003eecc      char* edi_6 = *(arg1 + 0x108)
1003eed2      edx_3.b = *edi_6
1003eed2      
1003eed7      if (edx_3.b == 0x6c)
1003ef0f          label_1003ef0f:
1003ef0f          *(arg1 + 0x108) = &edi_6[1]
1003ef1d          *(esi + 0x404) |= 0x2000
1003eed7      else if (edx_3.b != 0x4c)
1003eeeb          if (edx_3.b == 0x75)
1003eefe              label_1003eefe:
1003eefe              *(arg1 + 0x108) = &edi_6[1]
1003ef1d              *(esi + 0x404) |= 0x4000
1003eeeb          else if (edx_3.b == 0x55 && ((*(esi + 0x404)).w:1.b & 0x48) == 0)
1003eefb              goto label_1003eefe
1003eedc      else if ((*(esi + 0x404) & 0x2000) == 0)
1003eee4          goto label_1003ef0f
1003eee4      
1003ef27      cond:5_1 = arg2 != 1
1003ef28      arg2 -= 1
1003ef2c  while (cond:5_1)
1003ef2e  *(ecx + esi) = 0
1003ef48  j_sub_1003eab0(esi, *(esi + 0x404), &esi[0x408], &esi[0x410])
1003ef4d  int32_t eax_4 = *(esi + 0x404)
1003ef4d  
1003ef59  if ((eax_4:1.b & 8) == 0)
1003ef5b      eax_4:1.b |= 0x10
1003ef5e      *(esi + 0x404) = eax_4
1003ef5e  
1003ef6d  return 1

1003ef6e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
1003ef80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003efa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003efc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003efe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003f020    int32_t sub_1003f020(void* arg1, char* arg2)

1003f02b  *(arg2 + 0x400) = 2
1003f03d  *arg2 = **(arg1 + 0x108)
1003f045  char* edx_1 = *(arg1 + 0x108) + 1
1003f048  *(arg1 + 0x108) = edx_1
1003f04e  char* eax_1
1003f04e  eax_1.b = *edx_1
1003f04e  
1003f052  if (eax_1.b == 0)
1003f05a      j_sub_1003e2c0(arg1, "end of file before trailing '")
1003f067      return 0
1003f067  
1003f06d  if (eax_1.b != 0x5c)
1003f081      arg2[1] = eax_1.b
1003f08a      *(arg1 + 0x108) += 1
1003f06d  else
1003f071      j_sub_1003e520(arg1, &arg2[1])
1003f071  
1003f099  if (**(arg1 + 0x108) != 0x27)
1003f0a1      j_sub_1003e340(arg1, "too many characters in literal, …")
1003f0a1      
1003f0b2      if (**(arg1 + 0x108) != 0)
1003f0d0          char* eax_6
1003f0d0          
1003f0d0          do
1003f0b4              eax_6 = *(arg1 + 0x108)
1003f0ba              char ecx_1 = *eax_6
1003f0ba              
1003f0bf              if (ecx_1 == 0x27)
1003f0bf                  break
1003f0bf              
1003f0c4              if (ecx_1 == 0xa)
1003f0c4                  break
1003f0c4              
1003f0c7              *(arg1 + 0x108) = &eax_6[1]
1003f0d0          while (eax_6[1] != 0)
1003f0d0      
1003f0d2      char* eax_8 = *(arg1 + 0x108)
1003f0d2      
1003f0db      if (*eax_8 == 0x27)
1003f0de          *(arg1 + 0x108) = &eax_8[1]
1003f0de  
1003f0ea  char* edx_2
1003f0ea  edx_2.b = **(arg1 + 0x108)
1003f0ec  arg2[2] = edx_2.b
1003f0f6  *(arg1 + 0x108) += 1
1003f0fc  arg2[3] = 0
1003f103  *(arg2 + 0x404) = sx.d(arg2[1])
1003f111  return 1

1003f112                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
1003f120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003f160    int32_t sub_1003f160(void* arg1, char* arg2)

1003f17c  for (int32_t* i = *(*(arg1 + 0x134) + (sx.d(**(arg1 + 0x108)) << 2)); i != 0; i = i[2])
1003f17e      void* esi_1 = *i
1003f181      int32_t j = 0xffffffff
1003f184      void* edi_1 = esi_1
1003f184      
1003f188      while (j != 0)
1003f188          bool cond:0_1 = 0 != *edi_1
1003f188          edi_1 += 1
1003f188          j -= 1
1003f188          
1003f188          if (not(cond:0_1))
1003f188              break
1003f188      
1003f18a      void* eax_1 = *(arg1 + 0x108)
1003f18a      
1003f1a0      if (eax_1 + not.d(j) - 1 u<= *(arg1 + 0x10c)
1003f1a0              && StrCompareN(eax_1, esi_1, not.d(j) - 1) == 0)
1003f1ca          StrCopyFixed(arg2, esi_1, 0x400)
1003f1da          *(arg1 + 0x108) += not.d(j) - 1
1003f1e0          *(arg2 + 0x400) = 5
1003f1ee          *(arg2 + 0x404) = i[1]
1003f1fc          return 1
1003f1fc  
1003f1be  return 0

1003f1fd                                                                                         90 90 90                               ...
1003f200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003f230    int32_t sub_1003f230(void* arg1, int32_t arg2)

1003f234  char* ecx = nullptr
1003f234  
1003f244  if (**(arg1 + 0x108) s> 0x20)
1003f26f      char* edx_3
1003f26f      
1003f26f      do
1003f24c          char* edx_1
1003f24c          edx_1.b = **(arg1 + 0x108)
1003f24c          
1003f251          if (edx_1.b == 0x3b)
1003f251              break
1003f251          
1003f259          if (ecx s>= 0x400)
1003f28b              int32_t __saved_edi = 0x400
1003f296              j_sub_1003e2c0(arg1, "primitive token longer than MAX_…")
1003f2a1              return 0
1003f2a1          
1003f25b          ecx[arg2] = edx_1.b
1003f264          ecx = &ecx[1]
1003f265          edx_3 = *(arg1 + 0x108) + 1
1003f266          *(arg1 + 0x108) = edx_3
1003f26f      while (*edx_3 s> 0x20)
1003f26f  
1003f272  ecx[arg2] = 0
1003f281  __builtin_memcpy(dest: arg1 + 0x138, src: arg2, n: 0x430)
1003f28a  return 1

1003f2a2        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................
1003f2c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003f2d0    int32_t sub_1003f2d0(void* arg1, char* arg2)

1003f2df  if (*(arg1 + 0x128) != 0)
1003f2f0      *(arg1 + 0x128) = 0
1003f2fa      __builtin_memcpy(dest: arg2, src: arg1 + 0x138, n: 0x430)
1003f304      return 1
1003f304  
1003f30b  int32_t ecx = *(arg1 + 0x120)
1003f315  *(arg1 + 0x110) = *(arg1 + 0x108)
1003f31b  *(arg1 + 0x124) = ecx
1003f32a  __builtin_memset(s: arg2, c: 0, n: 0x430)
1003f32c  int32_t eax_3 = *(arg1 + 0x108)
1003f333  *(arg1 + 0x114) = eax_3
1003f339  *(arg2 + 0x418) = eax_3
1003f33f  int32_t eax_4 = j_sub_1003e410(arg1)
1003f33f  
1003f349  if (eax_4 == 0)
1003f34e      return eax_4
1003f34e  
1003f34f  int32_t eax_5 = *(arg1 + 0x108)
1003f355  *(arg1 + 0x118) = eax_5
1003f35b  *(arg2 + 0x41c) = eax_5
1003f367  *(arg2 + 0x420) = *(arg1 + 0x120)
1003f379  *(arg2 + 0x424) = *(arg1 + 0x120) - *(arg1 + 0x124)
1003f37f  char* edi_2 = *(arg1 + 0x108)
1003f385  int32_t eax_7
1003f385  eax_7.b = *edi_2
1003f385  
1003f389  if (eax_7.b == 0x22)
1003f38f      int32_t eax_8 = j_sub_1003e7f0(arg1, arg2, 0x22)
1003f38f      
1003f399      if (eax_8 == 0)
1003f3a2          return eax_8
1003f389  else if (eax_7.b != 0x27)
1003f3c5      char ecx_1
1003f3c5      
1003f3c5      if ((eax_7.b s< 0x30 || eax_7.b s> 0x39) && eax_7.b == 0x2e)
1003f3cb          ecx_1 = edi_2[1]
1003f3cb      
1003f3d6      if ((eax_7.b s< 0x30 || eax_7.b s> 0x39)
1003f3d6              && (eax_7.b != 0x2e || ecx_1 s< 0x30 || ecx_1 s> 0x39))
1003f3f1          if ((*(arg1 + 0x12c) & 0x10) != 0)
1003f400              return j_sub_1003f230(arg1, arg2)
1003f400          
1003f413          if ((eax_7.b s< 0x61 || eax_7.b s> 0x7a) && (eax_7.b s< 0x41 || eax_7.b s> 0x5a)
1003f413                  && eax_7.b != 0x5f)
1003f433              if (j_sub_1003f160(arg1, arg2) == 0)
1003f43b                  j_sub_1003e2c0(arg1, "can't read token")
1003f448                  return 0
1003f413          else
1003f417              int32_t eax_12 = j_sub_1003e9f0(arg1, arg2)
1003f417              
1003f421              if (eax_12 == 0)
1003f426                  return eax_12
1003f3d6      else
1003f3da          int32_t eax_10 = j_sub_1003ecd0(arg1, arg2)
1003f3da          
1003f3e4          if (eax_10 == 0)
1003f3e9              return eax_10
1003f3a5  else
1003f3ab      int32_t eax_9 = j_sub_1003e7f0(arg1, arg2, 0x27)
1003f3ab      
1003f3b5      if (eax_9 == 0)
1003f3be          return eax_9
1003f3be  
1003f454  __builtin_memcpy(dest: arg1 + 0x138, src: arg2, n: 0x430)
1003f45e  return 1

1003f45f                                                                                               90                                 .
1003f460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f4a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f4c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003f4d0    int32_t sub_1003f4d0(void* arg1, char* arg2)

1003f4ef  char var_430[0x430]
1003f4ef  
1003f4ef  if (j_sub_1003f2d0(arg1, &var_430) == 0)
1003f4f8      char* var_43c_1 = arg2
1003f4ff      j_sub_1003e2c0(arg1, "couldn't find expected %s")
1003f511      return 0
1003f511  
1003f519  int32_t ebx
1003f519  int32_t var_43c_2 = ebx
1003f51b  char* esi = arg2
1003f51d  char (* eax_2)[0x430] = &var_430
1003f521  int32_t eax_4
1003f521  
1003f521  while (true)
1003f521      char edx_1 = *eax_2
1003f523      ebx.b = *esi
1003f527      bool c_1 = edx_1 u< ebx.b
1003f527      
1003f529      if (edx_1 == ebx.b)
1003f52d          if (edx_1 == 0)
1003f545              eax_4 = 0
1003f547              break
1003f547          
1003f52f          edx_1 = (*eax_2)[1]
1003f532          ebx.b = esi[1]
1003f537          c_1 = edx_1 u< ebx.b
1003f537          
1003f539          if (edx_1 == ebx.b)
1003f53b              eax_2 = &(*eax_2)[2]
1003f53e              esi = &esi[2]
1003f53e              
1003f543              if (edx_1 != 0)
1003f543                  continue
1003f543              
1003f545              eax_4 = 0
1003f547              break
1003f547      
1003f549      bool c_2 = unimplemented  {sbb eax, eax}
1003f54b      eax_4 = sbb.d(sbb.d(eax_2, eax_2, c_1), 0xffffffff, c_2)
1003f54b      break
1003f54b  
1003f552  if (eax_4 == 0)
1003f580      return 1
1003f580  
1003f558  char (* var_43c_3)[0x430] = &var_430
1003f559  char* __saved_esi_1 = arg2
1003f560  j_sub_1003e2c0(arg1, "expected %s, found %s")
1003f572  return 0

1003f581     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc   ...............................
1003f5a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003f5c0    int32_t sub_1003f5c0(void* arg1, int32_t arg2, int32_t arg3, char* arg4)

1003f5cf  void* ebp = arg1
1003f5cf  
1003f5e4  if (j_sub_1003f2d0(ebp, arg4) == 0)
1003f5ec      j_sub_1003e2c0(ebp, "couldn't read expected token")
1003f600      return 0
1003f600  
1003f601  int32_t eax_2 = *(arg4 + 0x400)
1003f610  int32_t var_400
1003f610  int16_t var_3fc
1003f610  int32_t ecx
1003f610  
1003f610  if (eax_2 != arg2)
1003f619      if (arg2 == 1)
1003f620          ecx.w = (*"ng")[0].w
1003f62d          var_400 = (*"string")[0].d
1003f631          int16_t var_3fc_1 = ecx.w
1003f636          char var_3fa_1 = data_1005c16c[6][0]
1003f619      else if (arg2 == 2)
1003f64c          var_400 = (*"literal")[0].d
1003f650          var_3fc.d = (*"ral")[0].d
1003f63f      else if (arg2 == 3)
1003f661          eax_2.w = (*"er")[0].w
1003f667          ecx.b = data_1005fdc8[6][0]
1003f66d          var_400 = (*"number")[0].d
1003f671          int16_t var_3fc_2 = eax_2.w
1003f676          char var_3fa_2 = ecx.b
1003f659      else if (arg2 == 4)
1003f687          eax_2.b = data_1005c1a0[4][0]
1003f68c          var_400 = (*"name")[0].d
1003f690          var_3fc.b = eax_2.b
1003f67f      else if (arg2 == 5)
1003f6ac          var_400 = (*"punctuation")[0].d
1003f6b0          var_3fc.d = (*"tuation")[0].d
1003f6b4          int32_t var_3f8_1 = (*"ion")[0].d
1003f6b4      
1003f6bc      char* var_414_1 = arg4
1003f6bd      int32_t* var_418_2 = &var_400
1003f6c4      j_sub_1003e2c0(ebp, "expected a %s, found %s")
1003f6d8      return 0
1003f6d8  
1003f6dc  if (eax_2 != 3)
1003f862      if (eax_2 == 5)
1003f86d          if (arg3 s< 0)
1003f875              j_sub_1003e2c0(ebp, "BUG: wrong punctuation subtype")
1003f889              return 0
1003f889          
1003f890          if (*(arg4 + 0x404) != arg3)
1003f89b              char* var_414_3 = arg4
1003f89c              int32_t* eax_15 = *(ebp + 0x130) + arg3 * 0xc
1003f8ab              int32_t var_420_2 = *eax_15
1003f8b1              int32_t var_41c = eax_15[1]
1003f8b7              int32_t var_418_5 = eax_15[2]
1003f8ba              j_sub_1003e2c0(ebp, "expected %s, found %s")
1003f8ce              return 0
1003f6dc  else if ((*(arg4 + 0x404) & arg3) != arg3)
1003f6fc      if ((arg3.b & 8) != 0)
1003f709          var_400 = (*"decimal")[0].d
1003f70d          var_3fc.d = (*"mal")[0].d
1003f70d      
1003f714      if ((arg3:1.b & 1) != 0)
1003f71c          var_400 = data_1005fd8c
1003f71c      
1003f723      if ((arg3:1.b & 2) != 0)
1003f72a          ecx.w = (*"l")[0].w
1003f731          var_400 = (*"octal")[0].d
1003f735          int16_t var_3fc_3 = ecx.w
1003f735      
1003f73d      if ((arg3:1.b & 4) != 0)
1003f744          ecx.w = (*"ry")[0].w
1003f74b          var_400 = (*"binary")[0].d
1003f74f          int32_t eax_11
1003f74f          eax_11.b = data_1005fd7c[6][0]
1003f754          int16_t var_3fc_4 = ecx.w
1003f759          char var_3fa_3 = eax_11.b
1003f759      
1003f760      if ((arg3:1.b & 0x20) != 0)
1003f762          char* edi_1 = " long"
1003f767          int32_t i = 0xffffffff
1003f767          
1003f770          while (i != 0)
1003f770              bool cond:0_1 = 0 != *edi_1
1003f770              edi_1 = &edi_1[1]
1003f770              i -= 1
1003f770              
1003f770              if (not(cond:0_1))
1003f770                  break
1003f770          
1003f772          int32_t ecx_3 = not.d(i)
1003f778          int32_t* edi_3 = &var_400
1003f77c          int32_t i_1 = 0xffffffff
1003f77c          
1003f77f          while (i_1 != 0)
1003f77f              bool cond:1_1 = 0 != *edi_3
1003f77f              edi_3 += 1
1003f77f              i_1 -= 1
1003f77f              
1003f77f              if (not(cond:1_1))
1003f77f                  break
1003f77f          
1003f787          int32_t esi_2
1003f787          int32_t edi_5
1003f787          edi_5, esi_2 =
1003f787              __builtin_memcpy(dest: edi_3 - 1, src: edi_1 - ecx_3, n: ecx_3 u>> 2 << 2)
1003f78b          ebp = arg1
1003f795          __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx_3 & 3)
1003f795      
1003f79a      if ((arg3:1.b & 0x40) != 0)
1003f79c          char* edi_6 = " unsigned"
1003f7a1          int32_t i_2 = 0xffffffff
1003f7a1          
1003f7aa          while (i_2 != 0)
1003f7aa              bool cond:2_1 = 0 != *edi_6
1003f7aa              edi_6 = &edi_6[1]
1003f7aa              i_2 -= 1
1003f7aa              
1003f7aa              if (not(cond:2_1))
1003f7aa                  break
1003f7aa          
1003f7ac          int32_t ecx_8 = not.d(i_2)
1003f7b2          int32_t* edi_8 = &var_400
1003f7b6          int32_t i_3 = 0xffffffff
1003f7b6          
1003f7b9          while (i_3 != 0)
1003f7b9              bool cond:3_1 = 0 != *edi_8
1003f7b9              edi_8 += 1
1003f7b9              i_3 -= 1
1003f7b9              
1003f7b9              if (not(cond:3_1))
1003f7b9                  break
1003f7b9          
1003f7c1          int32_t esi_4
1003f7c1          int32_t edi_10
1003f7c1          edi_10, esi_4 =
1003f7c1              __builtin_memcpy(dest: edi_8 - 1, src: edi_6 - ecx_8, n: ecx_8 u>> 2 << 2)
1003f7c5          ebp = arg1
1003f7cf          __builtin_memcpy(dest: edi_10, src: esi_4, n: ecx_8 & 3)
1003f7cf      
1003f7d4      if ((arg3:1.b & 8) != 0)
1003f7d6          char* edi_11 = " float"
1003f7db          int32_t i_4 = 0xffffffff
1003f7db          
1003f7e4          while (i_4 != 0)
1003f7e4              bool cond:4_1 = 0 != *edi_11
1003f7e4              edi_11 = &edi_11[1]
1003f7e4              i_4 -= 1
1003f7e4              
1003f7e4              if (not(cond:4_1))
1003f7e4                  break
1003f7e4          
1003f7e6          int32_t ecx_13 = not.d(i_4)
1003f7ec          int32_t* edi_13 = &var_400
1003f7f0          int32_t i_5 = 0xffffffff
1003f7f0          
1003f7f3          while (i_5 != 0)
1003f7f3              bool cond:5_1 = 0 != *edi_13
1003f7f3              edi_13 += 1
1003f7f3              i_5 -= 1
1003f7f3              
1003f7f3              if (not(cond:5_1))
1003f7f3                  break
1003f7f3          
1003f7fb          int32_t esi_6
1003f7fb          int32_t edi_15
1003f7fb          edi_15, esi_6 =
1003f7fb              __builtin_memcpy(dest: edi_13 - 1, src: edi_11 - ecx_13, n: ecx_13 u>> 2 << 2)
1003f7ff          ebp = arg1
1003f809          __builtin_memcpy(dest: edi_15, src: esi_6, n: ecx_13 & 3)
1003f809      
1003f80e      if ((arg3:1.b & 0x10) != 0)
1003f810          char* edi_16 = " integer"
1003f815          int32_t i_6 = 0xffffffff
1003f815          
1003f81e          while (i_6 != 0)
1003f81e              bool cond:6_1 = 0 != *edi_16
1003f81e              edi_16 = &edi_16[1]
1003f81e              i_6 -= 1
1003f81e              
1003f81e              if (not(cond:6_1))
1003f81e                  break
1003f81e          
1003f820          int32_t ecx_18 = not.d(i_6)
1003f826          int32_t* edi_18 = &var_400
1003f82a          int32_t i_7 = 0xffffffff
1003f82a          
1003f82d          while (i_7 != 0)
1003f82d              bool cond:7_1 = 0 != *edi_18
1003f82d              edi_18 += 1
1003f82d              i_7 -= 1
1003f82d              
1003f82d              if (not(cond:7_1))
1003f82d                  break
1003f82d          
1003f835          int32_t esi_8
1003f835          int32_t edi_20
1003f835          edi_20, esi_8 =
1003f835              __builtin_memcpy(dest: edi_18 - 1, src: edi_16 - ecx_18, n: ecx_18 u>> 2 << 2)
1003f83c          __builtin_memcpy(dest: edi_20, src: esi_8, n: ecx_18 & 3)
1003f83c      
1003f842      char* var_414_2 = arg4
1003f843      int32_t* var_418_3 = &var_400
1003f84a      j_sub_1003e2c0(ebp, "expected %s, found %s")
1003f85e      return 0
1003f85e  
1003f8de  return 1

1003f8df                                                                                               90                                 .
1003f8e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003f9a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003f9b0    int32_t sub_1003f9b0(void* arg1, char* arg2)

1003f9c5  if (j_sub_1003f2d0(arg1, arg2) != 0)
1003f9df      return 1
1003f9df  
1003f9cd  j_sub_1003e2c0(arg1, "couldn't read expected token")
1003f9d8  return 0

1003f9e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003f9f0    int32_t sub_1003f9f0(void* arg1, char* arg2)

1003fa0e  char var_430[0x430]
1003fa0e  
1003fa0e  if (j_sub_1003f2d0(arg1, &var_430) != 0)
1003fa10      int32_t ebx
1003fa10      int32_t var_438_1 = ebx
1003fa12      char* esi_1 = arg2
1003fa19      char (* eax_1)[0x430] = &var_430
1003fa1d      int32_t eax_3
1003fa1d      
1003fa1d      while (true)
1003fa1d          char edx_1 = *eax_1
1003fa1f          ebx.b = *esi_1
1003fa23          bool c_1 = edx_1 u< ebx.b
1003fa23          
1003fa25          if (edx_1 == ebx.b)
1003fa29              if (edx_1 == 0)
1003fa41                  eax_3 = 0
1003fa43                  break
1003fa43              
1003fa2b              edx_1 = (*eax_1)[1]
1003fa2e              ebx.b = esi_1[1]
1003fa33              c_1 = edx_1 u< ebx.b
1003fa33              
1003fa35              if (edx_1 == ebx.b)
1003fa37                  eax_1 = &(*eax_1)[2]
1003fa3a                  esi_1 = &esi_1[2]
1003fa3a                  
1003fa3f                  if (edx_1 != 0)
1003fa3f                      continue
1003fa3f                  
1003fa41                  eax_3 = 0
1003fa43                  break
1003fa43          
1003fa45          bool c_2 = unimplemented  {sbb eax, eax}
1003fa47          eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1003fa47          break
1003fa47      
1003fa4e      if (eax_3 == 0)
1003fa5c          return 1
1003fa5c      
1003fa63      *(arg1 + 0x108) = *(arg1 + 0x110)
1003fa63  
1003fa72  return 0

1003fa73                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
1003fa80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003faa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fab0    int32_t sub_1003fab0(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4)

1003face  char var_430[0x400]
1003face  
1003face  if (j_sub_1003f2d0(arg1, &var_430) != 0)
1003faf4      int32_t var_30
1003faf4      int32_t var_2c
1003faf4      
1003faf4      if (var_30 == arg2 && (var_2c & arg3) == arg3)
1003fb07          __builtin_memcpy(dest: arg4, src: &var_430, n: 0x430)
1003fb16          return 1
1003fb16      
1003fb1d      *(arg1 + 0x108) = *(arg1 + 0x110)
1003fb1d  
1003fb2c  return 0

1003fb2d                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
1003fb40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fb50    int32_t sub_1003fb50(void* arg1, char* arg2)

1003fb5a  int32_t ebx
1003fb5a  int32_t var_434 = ebx
1003fb71  char var_430[0x430]
1003fb71  
1003fb71  if (j_sub_1003f2d0(arg1, &var_430) != 0)
1003fb7a      while (true)
1003fb7a          char* esi_1 = arg2
1003fb7c          char (* eax_1)[0x430] = &var_430
1003fb80          int32_t eax_3
1003fb80          
1003fb80          while (true)
1003fb80              char edx_1 = *eax_1
1003fb82              ebx.b = *esi_1
1003fb86              bool c_1 = edx_1 u< ebx.b
1003fb86              
1003fb88              if (edx_1 == ebx.b)
1003fb8c                  if (edx_1 == 0)
1003fba4                      eax_3 = 0
1003fba6                      break
1003fba6                  
1003fb8e                  edx_1 = (*eax_1)[1]
1003fb91                  ebx.b = esi_1[1]
1003fb96                  c_1 = edx_1 u< ebx.b
1003fb96                  
1003fb98                  if (edx_1 == ebx.b)
1003fb9a                      eax_1 = &(*eax_1)[2]
1003fb9d                      esi_1 = &esi_1[2]
1003fb9d                      
1003fba2                      if (edx_1 != 0)
1003fba2                          continue
1003fba2                      
1003fba4                      eax_3 = 0
1003fba6                      break
1003fba6              
1003fba8              bool c_2 = unimplemented  {sbb eax, eax}
1003fbaa              eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
1003fbaa              break
1003fbaa          
1003fbaf          if (eax_3 == 0)
1003fbdf              return 1
1003fbdf          
1003fbc1          if (j_sub_1003f2d0(arg1, &var_430) == 0)
1003fbc1              break
1003fbc1  
1003fbcf  return 0

1003fbe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003fc00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fc10    void* sub_1003fc10(void* arg1)

1003fc14  *(arg1 + 0x128) = 1
1003fc1e  return arg1

1003fc1f                                                                                               90                                 .
1003fc20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fc30    void* sub_1003fc30(void* arg1, int32_t arg2)

1003fc45  __builtin_memcpy(dest: arg1 + 0x138, src: arg2, n: 0x430)
1003fc48  *(arg1 + 0x128) = 1
1003fc53  return arg1

1003fc54                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
1003fc60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fc70    int32_t sub_1003fc70(void* arg1)

1003fc74  char* ecx = *(arg1 + 0x114)
1003fc82  int32_t result
1003fc82  
1003fc82  if (ecx == *(arg1 + 0x118))
1003fc8e      result.b = 0
1003fc90      return result
1003fc90  
1003fc84  result.b = *ecx
1003fc87  *(arg1 + 0x114) = &ecx[1]
1003fc8d  return result

1003fc91                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
1003fca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fcb0    int32_t sub_1003fcb0(char* arg1)

1003fcb8  while (*arg1 == 0x22)
1003fcbf      void* edi_1 = &arg1[1]
1003fcc1      int32_t i = 0xffffffff
1003fcc1      
1003fcc6      while (i != 0)
1003fcc6          bool cond:3_1 = 0 != *edi_1
1003fcc6          edi_1 += 1
1003fcc6          i -= 1
1003fcc6          
1003fcc6          if (not(cond:3_1))
1003fcc6              break
1003fcc6      
1003fcc8      int32_t ecx_1 = not.d(i)
1003fcd5      int32_t esi_2
1003fcd5      int32_t edi_4
1003fcd5      edi_4, esi_2 = __builtin_memcpy(dest: arg1, src: edi_1 - ecx_1, n: ecx_1 u>> 2 << 2)
1003fcdc      __builtin_memcpy(dest: edi_4, src: esi_2, n: ecx_1 & 3)
1003fcdc  
1003fce5  char* edi_5 = arg1
1003fce7  int32_t i_1 = 0xffffffff
1003fce7  
1003fcec  while (i_1 != 0)
1003fcec      bool cond:0_1 = 0 != *edi_5
1003fcec      edi_5 = &edi_5[1]
1003fcec      i_1 -= 1
1003fcec      
1003fcec      if (not(cond:0_1))
1003fcec          break
1003fcec  
1003fcf6  if (arg1[not.d(i_1) - 2] == 0x22)
1003fd17      int32_t i_3
1003fd17      
1003fd17      do
1003fcf8          char* edi_6 = arg1
1003fcfa          int32_t i_2 = 0xffffffff
1003fcfa          
1003fcff          while (i_2 != 0)
1003fcff              bool cond:1_1 = 0 != *edi_6
1003fcff              edi_6 = &edi_6[1]
1003fcff              i_2 -= 1
1003fcff              
1003fcff              if (not(cond:1_1))
1003fcff                  break
1003fcff          
1003fd04          char* edi_7 = arg1
1003fd06          arg1[not.d(i_2) - 2] = 0
1003fd0a          i_3 = 0xffffffff
1003fd0a          
1003fd0d          while (i_3 != 0)
1003fd0d              bool cond:2_1 = 0 != *edi_7
1003fd0d              edi_7 = &edi_7[1]
1003fd0d              i_3 -= 1
1003fd0d              
1003fd0d              if (not(cond:2_1))
1003fd0d                  break
1003fd17      while (arg1[not.d(i_3) - 2] == 0x22)
1003fd17  
1003fd1a  return 0

1003fd1b                                                                                   90 90 90 90 90                             .....
1003fd20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003fd40    int32_t sub_1003fd40(char* arg1)

1003fd48  while (*arg1 == 0x27)
1003fd4f      void* edi_1 = &arg1[1]
1003fd51      int32_t i = 0xffffffff
1003fd51      
1003fd56      while (i != 0)
1003fd56          bool cond:3_1 = 0 != *edi_1
1003fd56          edi_1 += 1
1003fd56          i -= 1
1003fd56          
1003fd56          if (not(cond:3_1))
1003fd56              break
1003fd56      
1003fd58      int32_t ecx_1 = not.d(i)
1003fd65      int32_t esi_2
1003fd65      int32_t edi_4
1003fd65      edi_4, esi_2 = __builtin_memcpy(dest: arg1, src: edi_1 - ecx_1, n: ecx_1 u>> 2 << 2)
1003fd6c      __builtin_memcpy(dest: edi_4, src: esi_2, n: ecx_1 & 3)
1003fd6c  
1003fd75  char* edi_5 = arg1
1003fd77  int32_t i_1 = 0xffffffff
1003fd77  
1003fd7c  while (i_1 != 0)
1003fd7c      bool cond:0_1 = 0 != *edi_5
1003fd7c      edi_5 = &edi_5[1]
1003fd7c      i_1 -= 1
1003fd7c      
1003fd7c      if (not(cond:0_1))
1003fd7c          break
1003fd7c  
1003fd86  if (arg1[not.d(i_1) - 2] == 0x27)
1003fda7      int32_t i_3
1003fda7      
1003fda7      do
1003fd88          char* edi_6 = arg1
1003fd8a          int32_t i_2 = 0xffffffff
1003fd8a          
1003fd8f          while (i_2 != 0)
1003fd8f              bool cond:1_1 = 0 != *edi_6
1003fd8f              edi_6 = &edi_6[1]
1003fd8f              i_2 -= 1
1003fd8f              
1003fd8f              if (not(cond:1_1))
1003fd8f                  break
1003fd8f          
1003fd94          char* edi_7 = arg1
1003fd96          arg1[not.d(i_2) - 2] = 0
1003fd9a          i_3 = 0xffffffff
1003fd9a          
1003fd9d          while (i_3 != 0)
1003fd9d              bool cond:2_1 = 0 != *edi_7
1003fd9d              edi_7 = &edi_7[1]
1003fd9d              i_3 -= 1
1003fd9d              
1003fd9d              if (not(cond:2_1))
1003fd9d                  break
1003fda7      while (arg1[not.d(i_3) - 2] == 0x27)
1003fda7  
1003fdaa  return 0

1003fdab                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
1003fdc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fdd0    long double sub_1003fdd0(void* arg1)

1003fdd6  int32_t ebx
1003fdd6  int32_t var_43c = ebx
1003fde4  int32_t var_438 = 0
1003fdee  int32_t var_434 = 0x3ff00000
1003fdf6  char var_430[0x400]
1003fdf6  j_sub_1003f9b0(arg1, &var_430)
1003fdfe  int16_t* esi = &data_1005e498
1003fe03  char (* eax)[0x400] = &var_430
1003fe07  int32_t eax_2
1003fe07  
1003fe07  while (true)
1003fe07      char edx_1 = *eax
1003fe09      ebx.b = *esi
1003fe0d      bool c_1 = edx_1 u< ebx.b
1003fe0d      
1003fe0f      if (edx_1 == ebx.b)
1003fe13          if (edx_1 == 0)
1003fe2b              eax_2 = 0
1003fe2d              break
1003fe2d          
1003fe15          edx_1 = (*eax)[1]
1003fe18          ebx.b = *(esi + 1)
1003fe1d          c_1 = edx_1 u< ebx.b
1003fe1d          
1003fe1f          if (edx_1 == ebx.b)
1003fe21              eax = &(*eax)[2]
1003fe24              esi = &esi[1]
1003fe24              
1003fe29              if (edx_1 != 0)
1003fe29                  continue
1003fe29              
1003fe2b              eax_2 = 0
1003fe2d              break
1003fe2d      
1003fe2f      bool c_2 = unimplemented  {sbb eax, eax}
1003fe31      eax_2 = sbb.d(sbb.d(eax, eax, c_1), 0xffffffff, c_2)
1003fe31      break
1003fe31  
1003fe36  int32_t var_30
1003fe36  
1003fe36  if (eax_2 == 0)
1003fe38      var_438 = eax_2
1003fe46      int32_t var_434_1 = 0xbff00000
1003fe4e      j_sub_1003f5c0(arg1, 3, 0, &var_430)
1003fe36  else if (var_30 != 3)
1003fe66      char (* var_448_2)[0x400] = &var_430
1003fe6d      j_sub_1003e2c0(arg1, "expected float value, found %s\n")
1003fe89  double var_20
1003fe89  return fconvert.t(var_20) * fconvert.t(var_438.q)

1003fe8a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
1003fea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

1003fec0    int32_t sub_1003fec0(void* arg1)

1003feca  int32_t ebx
1003feca  int32_t var_434 = ebx
1003fed7  int32_t ebp = 1
1003fedc  char var_430[0x400]
1003fedc  j_sub_1003f9b0(arg1, &var_430)
1003fee4  int16_t* esi = &data_1005e498
1003fee9  char (* eax)[0x400] = &var_430
1003feed  int32_t eax_2
1003feed  
1003feed  while (true)
1003feed      char edx_1 = *eax
1003feef      ebx.b = *esi
1003fef3      bool c_1 = edx_1 u< ebx.b
1003fef3      
1003fef5      if (edx_1 == ebx.b)
1003fef9          if (edx_1 == 0)
1003ff11              eax_2 = 0
1003ff13              break
1003ff13          
1003fefb          edx_1 = (*eax)[1]
1003fefe          ebx.b = *(esi + 1)
1003ff03          c_1 = edx_1 u< ebx.b
1003ff03          
1003ff05          if (edx_1 == ebx.b)
1003ff07              eax = &(*eax)[2]
1003ff0a              esi = &esi[1]
1003ff0a              
1003ff0f              if (edx_1 != 0)
1003ff0f                  continue
1003ff0f              
1003ff11              eax_2 = 0
1003ff13              break
1003ff13      
1003ff15      bool c_2 = unimplemented  {sbb eax, eax}
1003ff17      eax_2 = sbb.d(sbb.d(eax, eax, c_1), 0xffffffff, c_2)
1003ff17      break
1003ff17  
1003ff1c  int32_t var_30
1003ff1c  int32_t var_2c
1003ff1c  
1003ff1c  if (eax_2 == 0)
1003ff22      ebp = 0xffffffff
1003ff2e      j_sub_1003f5c0(arg1, 3, 0x1000, &var_430)
1003ff1c  else if (var_30 != 3 || var_2c == 0x800)
1003ff53      char (* var_444_2)[0x400] = &var_430
1003ff5a      j_sub_1003e2c0(arg1, "expected integer value, found %s…")
1003ff76  int32_t var_28
1003ff76  return var_28 * ebp

1003ff77                                                                       90 90 90 90 90 90 90 90 90                         .........
1003ff80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
1003ffa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003ffb0    int32_t sub_1003ffb0(void* arg1, int32_t arg2)

1003ffb8  *(arg1 + 0x12c) = arg2
1003ffbe  return arg2

1003ffbf                                                                                               90                                 .
1003ffc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003ffd0    int32_t sub_1003ffd0(void* arg1)

1003ffda  return *(arg1 + 0x12c)

1003ffdb                                                                                   90 90 90 90 90                             .....
1003ffe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

1003fff0    int32_t sub_1003fff0(void* arg1)

1003fffa  int32_t eax = *(arg1 + 0x104)
10040006  *(arg1 + 0x108) = eax
1004000c  *(arg1 + 0x110) = eax
10040014  *(arg1 + 0x114) = 0
1004001a  *(arg1 + 0x118) = 0
10040020  *(arg1 + 0x128) = 0
1004002b  *(arg1 + 0x120) = 1
10040031  *(arg1 + 0x124) = 1
10040039  __builtin_memset(s: arg1 + 0x138, c: 0, n: 0x430)
1004003c  return 0

1004003d                                                                                         90 90 90                               ...
10040040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10040060    int32_t sub_10040060(void* arg1)

10040075  return sbb.d(arg1, arg1, *(arg1 + 0x108) u< *(arg1 + 0x10c)) + 1

10040076                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10040080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10040090    int32_t sub_10040090(void* arg1)

100400a2  return *(arg1 + 0x120) - *(arg1 + 0x124)

100400a3           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

100400c0    int32_t sub_100400c0(void* arg1, char* arg2)

100400c8  char* edi = arg2
100400ca  int32_t i = 0xffffffff
100400ca  
100400cf  while (i != 0)
100400cf      bool cond:0_1 = 0 != *edi
100400cf      edi = &edi[1]
100400cf      i -= 1
100400cf      
100400cf      if (not(cond:0_1))
100400cf          break
100400cf  
100400d5  int32_t ebx
100400d5  ebx.b = *arg2
100400d5  
100400e8  if (j_sub_1003e410(arg1) != 0)
1004011b      int32_t i_1
1004011b      
1004011b      do
100400ea          char* eax_1 = *(arg1 + 0x108)
100400ea          
100400f2          if (*eax_1 == ebx.b && StrCompareN(eax_1, arg2, not.d(i) - 1) == 0)
1004012d              return 1
1004012d          
1004010b          *(arg1 + 0x108) += 1
10040111          i_1 = j_sub_1003e410(arg1)
1004011b      while (i_1 != 0)
1004011b  
10040123  return 0

1004012e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10040140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10040150    void* sub_10040150(int32_t* arg1)

10040158  void* eax = sub_10044a82(arg1)
10040164  sub_100447cf(arg1, nullptr, FILE_END)
1004016a  void* result = sub_10044a82(arg1)
10040175  sub_100447cf(arg1, eax, FILE_BEGIN)
10040182  return result

10040183           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

100401a0    int32_t* sub_100401a0(char* arg1, void* arg2, void* arg3)

100401a7  PSTR esi = arg1
100401b5  int32_t* eax = sub_10044936(esi, "rb")
100401b5  
100401c5  if (eax == 0)
100401cf      return eax
100401cf  
100401da  if (arg2 != 0)
100401e0      sub_100447cf(eax, arg2, FILE_BEGIN)
100401e0  
100401e9  void* ebp = arg3
100401e9  
100401f2  if (ebp == 0)
100401ff      ebp = j_sub_10040150(eax) - arg2
100401ff  
1004020d  void* const s_1 = j_sub_10039000(ebp + 0x571)
10040218  __builtin_memset(s: s_1, c: 0, n: 0x570)
1004021a  PSTR edi_2 = esi
1004021c  int32_t i = 0xffffffff
1004021c  
1004021f  while (i != 0)
1004021f      bool cond:1_1 = 0 != *edi_2
1004021f      edi_2 = &edi_2[1]
1004021f      i -= 1
1004021f      
1004021f      if (not(cond:1_1))
1004021f          break
1004021f  
10040221  int32_t ecx = not.d(i)
10040231  int32_t* var_ac_2 = nullptr
10040236  int32_t esi_2
10040236  int32_t edi_5
10040236  edi_5, esi_2 = __builtin_memcpy(dest: s_1, src: edi_2 - ecx, n: ecx u>> 2 << 2)
1004023e  __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx & 3)
10040240  *(s_1 + 0x104) = s_1 + 0x570
10040246  *(s_1 + 0x570 + ebp) = 0
1004024a  void* eax_5 = *(s_1 + 0x104)
10040255  *(s_1 + 0x108) = eax_5
1004025b  *(s_1 + 0x110) = eax_5
10040263  *(s_1 + 0x11c) = ebp
10040269  *(s_1 + 0x10c) = eax_5 + ebp
1004026f  *(s_1 + 0x128) = 0
10040279  *(s_1 + 0x120) = 1
1004027f  *(s_1 + 0x124) = 1
10040285  j_sub_1003e3c0(s_1, var_ac_2)
10040285  
100402a3  if (sub_100446b8(*(s_1 + 0x104), ebp, 1, eax) != 1)
100402a6      j_sub_100390b0(s_1)
100402ae      s_1 = nullptr
100402ae  
100402b1  sub_10044888(eax)
100402c4  int32_t edx_1 = *(s_1 + 0x104)
100402ca  void var_90
100402ca  __builtin_memcpy(dest: &var_90, src: 0x10060418, n: 0x48)
100402d7  void s
100402d7  __builtin_memset(&s, c: 0, n: 0x48)
100402e9  j_sub_10037850(arg1, edx_1, *(s_1 + 0x11c))
1004031f  return s_1

10040320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10040380    void* sub_10040380(int32_t arg1, int32_t arg2, int32_t arg3)

1004038f  void* s = j_sub_10039000(arg2 + 0x571)
1004039f  __builtin_memset(s, c: 0, n: 0x570)
100403a1  int32_t edi_1 = arg3
100403a5  int32_t i = 0xffffffff
100403a5  
100403a8  while (i != 0)
100403a8      bool cond:0_1 = 0 != *edi_1
100403a8      edi_1 += 1
100403a8      i -= 1
100403a8      
100403a8      if (not(cond:0_1))
100403a8          break
100403a8  
100403aa  int32_t ecx = not.d(i)
100403bf  int32_t esi_1
100403bf  int32_t edi_4
100403bf  edi_4, esi_1 = __builtin_memcpy(dest: s, src: edi_1 - ecx, n: ecx u>> 2 << 2)
100403c7  __builtin_memcpy(dest: edi_4, src: esi_1, n: ecx & 3)
100403c9  *(s + 0x104) = s + 0x570
100403cf  (s + 0x570)[arg2] = 0
100403d3  int32_t eax_2 = *(s + 0x104)
100403d9  *(s + 0x11c) = arg2
100403df  *(s + 0x108) = eax_2
100403e5  *(s + 0x110) = eax_2
100403ed  *(s + 0x128) = 0
100403f7  *(s + 0x10c) = eax_2 + arg2
10040402  *(s + 0x120) = 1
10040408  *(s + 0x124) = 1
1004040e  j_sub_1003e3c0(s, nullptr)
10040427  int32_t esi_3
10040427  int32_t edi_6
10040427  edi_6, esi_3 = __builtin_memcpy(dest: *(s + 0x104), src: arg1, n: arg2 u>> 2 << 2)
10040430  __builtin_memcpy(dest: edi_6, src: esi_3, n: arg2 & 3)
10040436  return s

10040437                                                                       90 90 90 90 90 90 90 90 90                         .........
10040440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10040470    void* sub_10040470(void* arg1)

10040475  void* eax = *(arg1 + 0x134)
10040475  
1004047d  if (eax != 0)
10040480      j_sub_100390b0(eax)
10040480  
10040492  return j_sub_100390b0(arg1)

10040493                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
100404a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100404b0    void* sub_100404b0(int32_t* arg1, char* arg2)

100404b0  int32_t ebx
100404b0  int32_t var_4 = ebx
100404b4  int32_t* edi = arg1
100404b8  int32_t ebp = 0
100404ba  char* eax = *edi
100404ba  
100404be  if (eax != 0)
100404c4      while (true)
100404c4          char* esi_1 = arg2
100404c6          int32_t eax_2
100404c6          
100404c6          while (true)
100404c6              ebx.b = *eax
100404ca              char temp0_1 = *esi_1
100404ca              bool c_1 = ebx.b u< temp0_1
100404ca              
100404cc              if (ebx.b == temp0_1)
100404d0                  if (ebx.b == 0)
100404e6                      eax_2 = 0
100404e8                      break
100404e8                  
100404d2                  ebx.b = eax[1]
100404d7                  char temp3_1 = esi_1[1]
100404d7                  c_1 = ebx.b u< temp3_1
100404d7                  
100404da                  if (ebx.b == temp3_1)
100404dc                      eax = &eax[2]
100404df                      esi_1 = &esi_1[2]
100404df                      
100404e4                      if (ebx.b != 0)
100404e4                          continue
100404e4                      
100404e6                      eax_2 = 0
100404e8                      break
100404e8              
100404ea              bool c_2 = unimplemented  {sbb eax, eax}
100404ec              eax_2 = sbb.d(sbb.d(eax, eax, c_1), 0xffffffff, c_2)
100404ec              break
100404ec          
100404f1          if (eax_2 == 0)
10040519              return &arg1[ebp * 7]
10040519          
100404f3          eax = edi[7]
100404f6          edi = &edi[7]
100404f9          ebp += 1
100404f9          
100404fc          if (eax == 0)
100404fc              break
100404fc  
10040504  return 0

1004051a                                                                                90 90 90 90 90 90                            ......
10040520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10040540    void sub_10040540(void* arg1, void* arg2, float* arg3)

1004054a  int32_t ebx
1004054a  int32_t var_444 = ebx
10040557  int32_t esi = 0
10040559  char var_430[0x400]
10040559  int32_t eax
10040559  int16_t x87control
10040559  eax, x87control = j_sub_1003dae0(arg1, &var_430)
10040563  int32_t var_30
10040563  
10040563  if (eax != 0)
1004057a      if (var_30 != 5)
1004061d          label_1004061d:
1004061d          
10040625          if (var_30 != 3)
1004062b              char (* var_454_4)[0x400] = &var_430
10040632              j_sub_10039200(arg1, "expected number, found %s")
10040646              return 
10040646          
10040651          void* var_458
10040651          int16_t var_2c
10040651          
10040651          if ((var_2c:1.b & 8) != 0)
10040657              int16_t eax_11 = (*(arg2 + 8)).w
10040657              
1004065c              if (eax_11.b != 3)
10040664                  j_sub_10039200(arg1, "unexpected float")
10040678                  return 
10040678              
10040679              double var_20
10040679              long double x87_r7_1 = fconvert.t(var_20)
10040679              
10040682              if (esi != 0)
1004068d                  x87_r7_1 = fneg(fconvert.t(var_20))
1004068d              
10040692              if ((eax_11:1.b & 2) != 0)
10040697                  int32_t var_438
10040697                  var_438.q = fconvert.d(fconvert.t(*(arg2 + 0x10)))
1004069b                  long double temp2_1 = fconvert.t(var_438.q)
1004069b                  x87_r7_1 - temp2_1
100406a4                  long double x87_r6_2
100406a4                  
100406a4                  if ((((x87_r7_1 < temp2_1 ? 1 : 0) << 8
100406a4                          | (is_unordered.t(x87_r7_1, temp2_1) ? 1 : 0) << 0xa
100406a4                          | (x87_r7_1 == temp2_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) == 0)
100406a6                      x87_r6_2 = fconvert.t(*(arg2 + 0x14))
100406ab                      x87_r7_1 - x87_r6_2
100406ab                  
100406b2                  if ((((x87_r7_1 < temp2_1 ? 1 : 0) << 8
100406b2                          | (is_unordered.t(x87_r7_1, temp2_1) ? 1 : 0) << 0xa
100406b2                          | (x87_r7_1 == temp2_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0 || ((
100406b2                          (x87_r7_1 < x87_r6_2 ? 1 : 0) << 8
100406b2                          | (is_unordered.t(x87_r7_1, x87_r6_2) ? 1 : 0) << 0xa
100406b2                          | (x87_r7_1 == x87_r6_2 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
100406c4                      var_458.q = fconvert.d(fconvert.t(*(arg2 + 0x14)))
100406c7                      int32_t var_434
100406c7                      int32_t var_45c_4 = var_434
100406c8                      int32_t var_460_1 = var_438
100406cf                      j_sub_10039200(arg1, "float out of range [%f, %f]")
100406e3                      return 
100406e3              
100406ee              *arg3 = fconvert.s(x87_r7_1)
100406fc              return 
100406fc          
10040704          int32_t var_28
10040704          int32_t ebx_7 = var_28
10040708          int32_t var_438_1 = ebx_7
10040708          
1004070c          if (esi != 0)
10040710              ebx_7 = neg.d(var_28)
10040712              var_438_1 = ebx_7
10040712          
10040716          int16_t ecx_3 = (*(arg2 + 8)).w
1004071b          uint32_t edi_2 = zx.d(ecx_3.b)
10040724          int32_t var_440
10040724          int32_t var_43c
10040724          int32_t eax_18
10040724          int32_t esi_2
10040724          
10040724          if (edi_2 != 1)
10040750              esi_2 = var_43c
10040754              eax_18 = var_440
10040724          else if ((ecx_3:1.b & 4) == 0)
1004073c              esi_2 = 0xffffff80
10040741              eax_18 = 0x7f
10040746              var_43c = 0xffffff80
1004074a              var_440 = 0x7f
10040729          else
1004072b              esi_2 = 0
1004072d              eax_18 = 0xff
10040732              var_43c = 0
10040736              var_440 = 0xff
10040736          
1004075b          if (edi_2 == 2)
10040760              if ((ecx_3:1.b & 4) == 0)
1004076f                  esi_2 = 0xffff8000
10040774                  eax_18 = 0x7fff
10040779                  var_43c = 0xffff8000
10040760              else
10040762                  esi_2 = 0
10040764                  eax_18 = 0xffff
10040769                  var_43c = 0
10040769              
1004077d              var_440 = eax_18
1004077d          
10040789          if (edi_2 != 1 && edi_2 != 2)
10040797              if (edi_2 == 3 && (ecx_3:1.b & 2) != 0)
1004079d                  long double x87_r7_4 = float.t(var_438_1)
100407a1                  long double temp5_1 = fconvert.t(*(arg2 + 0x10))
100407a1                  x87_r7_4 - temp5_1
100407a4                  eax_18.w = (x87_r7_4 < temp5_1 ? 1 : 0) << 8
100407a4                      | (is_unordered.t(x87_r7_4, temp5_1) ? 1 : 0) << 0xa
100407a4                      | (x87_r7_4 == temp5_1 ? 1 : 0) << 0xe | 0x3800
100407a4                  
100407a9                  if ((eax_18:1.b & 1) != 0)
100407c6                      label_100407c6:
100407c6                      var_458.q = fconvert.d(fconvert.t(*(arg2 + 0x14)))
100407cf                      int32_t var_460
100407cf                      var_460.q = fconvert.d(fconvert.t(*(arg2 + 0x10)))
100407d2                      int32_t var_464_1 = ebx_7
100407d9                      j_sub_10039200(arg1, "value %d out of range [%f, %f]")
100407ed                      return 
100407ed                  
100407ab                  long double temp6_1 = fconvert.t(*(arg2 + 0x14))
100407ab                  x87_r7_4 - temp6_1
100407ae                  eax_18.w = (x87_r7_4 < temp6_1 ? 1 : 0) << 8
100407ae                      | (is_unordered.t(x87_r7_4, temp6_1) ? 1 : 0) << 0xa
100407ae                      | (x87_r7_4 == temp6_1 ? 1 : 0) << 0xe
100407ae                  
100407b3                  if ((eax_18:1.b & 0x41) == 0)
100407b3                      goto label_100407c6
100407b3              
10040797              goto label_1004082d
10040797          
100407f1          if ((ecx_3:1.b & 2) != 0)
100407f3              long double x87_r7_7 = float.t(var_43c)
100407f7              long double temp3_1 = fconvert.t(*(arg2 + 0x10))
100407f7              x87_r7_7 - temp3_1
100407fa              eax_18.w = (x87_r7_7 < temp3_1 ? 1 : 0) << 8
100407fa                  | (is_unordered.t(x87_r7_7, temp3_1) ? 1 : 0) << 0xa
100407fa                  | (x87_r7_7 == temp3_1 ? 1 : 0) << 0xe | 0x3800
100407fa              
100407ff              if ((eax_18:1.b & 0x41) != 0)
10040803                  x87_r7_7 = fconvert.t(*(arg2 + 0x10))
10040803              
10040806              int32_t eax_21
10040806              int16_t x87control_1
10040806              eax_21, x87control_1 = __ftol(x87control, x87_r7_7)
1004080b              long double x87_r7_8 = float.t(var_440)
1004080f              esi_2 = eax_21
10040811              long double temp4_1 = fconvert.t(*(arg2 + 0x14))
10040811              x87_r7_8 - temp4_1
10040814              eax_21.w = (x87_r7_8 < temp4_1 ? 1 : 0) << 8
10040814                  | (is_unordered.t(x87_r7_8, temp4_1) ? 1 : 0) << 0xa
10040814                  | (x87_r7_8 == temp4_1 ? 1 : 0) << 0xe | 0x3800
10040814              
10040819              if ((eax_21:1.b & 1) == 0)
1004081d                  x87_r7_8 = fconvert.t(*(arg2 + 0x14))
1004081d              
10040820              eax_18 = __ftol(x87control_1, x87_r7_8)
10040820          
1004082b          if (ebx_7 s>= esi_2 && ebx_7 s<= eax_18)
1004082d              label_1004082d:
1004082d              
10040830              if (edi_2 == 1)
1004083d                  *arg3 = ebx_7.b
10040847                  return 
10040847              
1004084b              if (edi_2 == 2)
10040857                  *arg3 = ebx_7
10040865                  return 
10040865              
10040869              if (edi_2 == 3)
10040876                  *arg3 = fconvert.s(float.t(var_438_1))
10040876              
10040887              return 
10040887          
1004088f          int32_t var_454_5 = eax_18
10040890          int32_t var_458_2 = esi_2
10040891          int32_t var_45c_5 = ebx_7
10040898          j_sub_10039200(arg1, "value %d out of range [%d, %d]")
1004057a      else
10040586          if (((*(arg2 + 8)).w:1.b & 4) != 0)
1004058c              char (* var_454_1)[0x400] = &var_430
10040593              j_sub_10039200(arg1, "expected unsigned value, found %…")
100405a7              return 
100405a7          
100405a8          int16_t* esi_1 = &data_1005e498
100405ad          char (* eax_4)[0x400] = &var_430
100405b1          int32_t eax_6
100405b1          
100405b1          while (true)
100405b1              char edx_1 = *eax_4
100405b3              ebx.b = *esi_1
100405b7              bool c_1 = edx_1 u< ebx.b
100405b7              
100405b9              if (edx_1 == ebx.b)
100405bd                  if (edx_1 == 0)
100405d5                      eax_6 = 0
100405d7                      break
100405d7                  
100405bf                  edx_1 = (*eax_4)[1]
100405c2                  ebx.b = *(esi_1 + 1)
100405c7                  c_1 = edx_1 u< ebx.b
100405c7                  
100405c9                  if (edx_1 == ebx.b)
100405cb                      eax_4 = &(*eax_4)[2]
100405ce                      esi_1 = &esi_1[1]
100405ce                      
100405d3                      if (edx_1 != 0)
100405d3                          continue
100405d3                      
100405d5                      eax_6 = 0
100405d7                      break
100405d7              
100405d9              bool c_2 = unimplemented  {sbb eax, eax}
100405db              eax_6 = sbb.d(sbb.d(eax_4, eax_4, c_1), 0xffffffff, c_2)
100405db              break
100405db          
100405e0          if (eax_6 != 0)
100405e6              char (* var_454_2)[0x400] = &var_430
100405ed              j_sub_10039200(arg1, "unexpected punctuation %s")
10040601              return 
10040601          
10040606          esi = 1
1004060d          int32_t eax_8
1004060d          eax_8, x87control = j_sub_1003dae0(arg1, &var_430)
1004060d          
10040617          if (eax_8 != 0)
10040617              goto label_1004061d

100408ad                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................
100408c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100408e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10040990    int32_t sub_10040990(void* arg1, void* arg2, char* arg3)

100409a4  char var_430[0x400]
100409a4  int32_t eax = j_sub_1003dae0(arg1, &var_430)
100409a4  
100409ae  if (eax == 0)
100409b7      return eax
100409b7  
100409c0  int32_t var_30
100409c0  
100409c0  if (var_30 != 2)
100409ea      j_sub_1003dd40(arg1)
10040a00      int32_t eax_3
10040a00      int80_t st0_1
10040a00      eax_3, st0_1 = j_sub_10040540(arg1, arg2, arg3)
10040a00      
10040a0a      if (eax_3 == 0)
10040a13          return eax_3
100409c0  else
100409c7      j_sub_1003fd40(&var_430)
100409da      *arg3 = var_430[0]
100409da  
100409e8  return 1

10040a14                                                              90 90 90 90 90 90 90 90 90 90 90 90                      ............
10040a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10040a50    int32_t sub_10040a50(void* arg1, char* arg2)

10040a64  char var_430[0x430]
10040a64  int32_t result = j_sub_1003d740(arg1, 1, 0, &var_430)
10040a64  
10040a6e  if (result == 0)
10040a76      return result
10040a76  
10040a7d  j_sub_1003fcb0(&var_430)
10040a91  StrCopyFixed(arg2, &var_430, 0x50)
10040a99  arg2[0x4f] = 0
10040aa9  return 1

10040aaa                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10040ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10040ad0    int32_t sub_10040ad0(void* arg1, void* arg2, int32_t arg3)

10040ae7  int32_t result = j_sub_1003d650(arg1, U"{")
10040ae7  
10040af1  if (result == 0)
10040afd      return result
10040afd  
10040b04  char var_430[0x430]
10040b04  
10040b04  while (true)
10040b0e      if (j_sub_1003dae0(arg1, &var_430) != 0)
10040b14          void* esi_1 = &data_1005ab54
10040b19          char (* eax_1)[0x430] = &var_430
10040b1d          int32_t eax_3
10040b1d          
10040b1d          while (true)
10040b1d              char edx_1 = *eax_1
10040b21              char temp0_1 = *esi_1
10040b21              bool c_1 = edx_1 u< temp0_1
10040b21              
10040b23              if (edx_1 == temp0_1)
10040b27                  if (edx_1 == 0)
10040b3d                      eax_3 = 0
10040b3f                      break
10040b3f                  
10040b29                  edx_1 = (*eax_1)[1]
10040b2e                  char temp3_1 = *(esi_1 + 1)
10040b2e                  c_1 = edx_1 u< temp3_1
10040b2e                  
10040b31                  if (edx_1 == temp3_1)
10040b33                      eax_1 = &(*eax_1)[2]
10040b36                      esi_1 += 2
10040b36                      
10040b3b                      if (edx_1 != 0)
10040b3b                          continue
10040b3b                      
10040b3d                      eax_3 = 0
10040b3f                      break
10040b3f              
10040b41              bool c_2 = unimplemented  {sbb eax, eax}
10040b43              eax_3 = sbb.d(sbb.d(eax_1, eax_1, c_1), 0xffffffff, c_2)
10040b43              break
10040b43          
10040b48          if (eax_3 == 0)
10040d65              return 1
10040d65          
10040b63          char* ebp_1 = j_sub_100404b0(*(arg2 + 4), &var_430)
10040b63          
10040b6a          if (ebp_1 == 0)
10040b6a              break
10040b6a          
10040b76          int32_t esi_2
10040b76          
10040b76          if (((*(ebp_1 + 8)).w:1.b & 1) == 0)
10040b9b              esi_2 = 1
10040ba9              label_10040ba9:
10040ba9              float* edi_2 = *(ebp_1 + 4) + arg3
10040bad              int32_t esi_3 = esi_2 - 1
10040bb0              int32_t var_434_1 = esi_3
10040bb0              
10040bb4              if (esi_2 s<= 0)
10040bb4                  continue
10040bb4              else
10040bc0                  while (((*(ebp_1 + 8)).w:1.b & 1) == 0
10040bc0                          || j_sub_1003db20(arg1, U"}{") == 0)
10040be9                      switch (zx.d((*(ebp_1 + 8)).b) - 1)
10040bf3                          case 0
10040bfd                              if (j_sub_10040990(arg1, ebp_1, edi_2) == 0)
10040d55                                  return 0
10040d55                              
10040c03                              edi_2 += 1
10040c09                          case 1, 2
10040c09                              int32_t eax_13 = j_sub_10040540(arg1, ebp_1, edi_2)
10040c09                              int16_t top = top - 1
10040c09                              unimplemented  {call j_sub_10040540}
10040c09                              
10040c13                              if (eax_13 == 0)
10040d55                                  return 0
10040d55                              
10040c19                              edi_2 = &edi_2[1]
10040c1e                          case 3
10040c1e                              float* var_448_5 = edi_2
10040c1e                              
10040c2b                              if (j_sub_10040a50(arg1, ebp_1) == 0)
10040d55                                  return 0
10040d55                              
10040c31                              edi_2 = &edi_2[0x14]
10040c36                          case 5
10040c36                              void* eax_15 = *(ebp_1 + 0x18)
10040c36                              
10040c3b                              if (eax_15 == 0)
10040d21                                  j_sub_10039200(arg1, "BUG: no sub structure defined")
10040d35                                  return 0
10040d35                              
10040c44                              j_sub_10040ad0(arg1, eax_15, edi_2)
10040c4f                              edi_2 += **(ebp_1 + 0x18)
10040c4f                      
10040c57                      if (((*(ebp_1 + 8)).w:1.b & 1) != 0)
10040c6d                          if (j_sub_1003dae0(arg1, &var_430) == 0)
10040d55                              return 0
10040d55                          
10040c73                          void* esi_4 = &data_1005ab54
10040c78                          char (* eax_18)[0x430] = &var_430
10040c7c                          int32_t eax_20
10040c7c                          char edx_4
10040c7c                          
10040c7c                          while (true)
10040c7c                              edx_4 = *eax_18
10040c80                              char temp4_1 = *esi_4
10040c80                              bool c_3 = edx_4 u< temp4_1
10040c80                              
10040c82                              if (edx_4 == temp4_1)
10040c86                                  if (edx_4 == 0)
10040c9c                                      eax_20 = 0
10040c9e                                      break
10040c9e                                  
10040c88                                  edx_4 = (*eax_18)[1]
10040c8d                                  char temp7_1 = *(esi_4 + 1)
10040c8d                                  c_3 = edx_4 u< temp7_1
10040c8d                                  
10040c90                                  if (edx_4 == temp7_1)
10040c92                                      eax_18 = &(*eax_18)[2]
10040c95                                      esi_4 += 2
10040c95                                      
10040c9a                                      if (edx_4 != 0)
10040c9a                                          continue
10040c9a                                      
10040c9c                                      eax_20 = 0
10040c9e                                      break
10040c9e                              
10040ca0                              bool c_4 = unimplemented  {sbb eax, eax}
10040ca2                              eax_20 = sbb.d(sbb.d(eax_18, eax_18, c_3), 0xffffffff, c_4)
10040ca2                              break
10040ca2                          
10040ca7                          if (eax_20 == 0)
10040ca7                              break
10040ca7                          
10040cad                          void* esi_5 = &data_1005d330
10040cb2                          char (* eax_21)[0x430] = &var_430
10040cb6                          int32_t eax_23
10040cb6                          
10040cb6                          while (true)
10040cb6                              edx_4 = *eax_21
10040cba                              char temp8_1 = *esi_5
10040cba                              bool c_5 = edx_4 u< temp8_1
10040cba                              
10040cbc                              if (edx_4 == temp8_1)
10040cc0                                  if (edx_4 == 0)
10040cd6                                      eax_23 = 0
10040cd8                                      break
10040cd8                                  
10040cc2                                  edx_4 = (*eax_21)[1]
10040cc7                                  char temp11_1 = *(esi_5 + 1)
10040cc7                                  c_5 = edx_4 u< temp11_1
10040cc7                                  
10040cca                                  if (edx_4 == temp11_1)
10040ccc                                      eax_21 = &(*eax_21)[2]
10040ccf                                      esi_5 += 2
10040ccf                                      
10040cd4                                      if (edx_4 != 0)
10040cd4                                          continue
10040cd4                                      
10040cd6                                      eax_23 = 0
10040cd8                                      break
10040cd8                              
10040cda                              bool c_6 = unimplemented  {sbb eax, eax}
10040cdc                              eax_23 = sbb.d(sbb.d(eax_21, eax_21, c_5), 0xffffffff, c_6)
10040cdc                              break
10040cdc                          
10040ce1                          if (eax_23 != 0)
10040d3a                              char (* var_448_9)[0x430] = &var_430
10040d41                              j_sub_10039200(arg1, "expected a comma, found %s")
10040d55                              return 0
10040d55                          
10040ce3                          esi_3 = var_434_1
10040ce3                      
10040ce7                      int32_t eax_24 = esi_3
10040ce9                      esi_3 -= 1
10040cec                      var_434_1 = esi_3
10040cec                      
10040cf0                      if (eax_24 s<= 0)
10040cf0                          break
10040cf0                  
10040be7                  continue
10040b76          else
10040b78              esi_2 = *(ebp_1 + 0xc)
10040b78              
10040b8b              if (j_sub_1003d650(arg1, U"{") != 0)
10040b8b                  goto label_10040ba9
10040b8b      
10040d55      return 0
10040d55  
10040cff  char (* var_448_8)[0x430] = &var_430
10040d06  j_sub_10039200(arg1, "unknown structure field %s")
10040d1a  return 0

10040d66                    8b ff                                                                                ..
10040d68  uint32_t jump_table_10040d68[0x6] = 
10040d68  {
10040d68      [0x0] =  0x10040bf0
10040d6c      [0x1] =  0x10040c06
10040d70      [0x2] =  0x10040c06
10040d74      [0x3] =  0x10040c1e
10040d78      [0x4] =  0x10040c51
10040d7c      [0x5] =  0x10040c36
10040d80  }

10040d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10040e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10040e30    int32_t sub_10040e30(int32_t* arg1, int32_t arg2)

10040e37  int32_t i_1 = arg2 - 1
10040e37  
10040e3b  if (arg2 s> 0)
10040e58      int32_t i
10040e58      
10040e58      do
10040e51          if (sub_10045898(arg1, &data_100605c4) s< 0)
10040e66              return 0
10040e66          
10040e53          i = i_1
10040e55          i_1 -= 1
10040e58      while (i s> 0)
10040e58  
10040e61  return 1

10040e67                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................

10040e80    int32_t sub_10040e80(int32_t arg1, float arg2)

10040e92  double var_8c = fconvert.d(fconvert.t(arg2))
10040e9b  char var_80[0x80]
10040e9b  sub_10044c56(&var_80, &data_100605cc)
10040ea0  char (* edi)[0x80] = &var_80
10040ea4  int32_t i = 0xffffffff
10040ea4  
10040eac  while (i != 0)
10040eac      bool cond:0_1 = 0 != *edi
10040eac      edi = &(*edi)[1]
10040eac      i -= 1
10040eac      
10040eac      if (not(cond:0_1))
10040eac          break
10040eac  
10040eb4  int32_t i_2 = not.d(i) - 2
10040eb4  
10040eb8  if (not.d(i) - 1 s> 1)
10040ed5      int32_t i_1
10040ed5      
10040ed5      do
10040eba          i_1.b = var_80[i_2]
10040eba          
10040ec4          if (i_1.b != 0x30 && i_1.b != 0x2e)
10040ec4              break
10040ec4          
10040ec8          var_80[i_2] = 0
10040ec8          
10040ecd          if (i_1.b == 0x2e)
10040ecd              break
10040ecd          
10040ecf          i_1 = i_2
10040ed1          i_2 -= 1
10040ed5      while (i_1 s> 1)
10040ed5  
10040ee3  var_8c:4.d = &data_100605c8
10040ee8  var_8c.d = arg1
10040ef2  int32_t result
10040ef2  result.b = sub_10045898(var_8c, &var_80) s>= 0
10040efd  return result

10040efe                                                                                            90 90                                ..
10040f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10040f20    int32_t sub_10040f20(int32_t* arg1, void* arg2, int32_t arg3, int32_t arg4)

10040f28  int32_t* edi = arg1
10040f28  
10040f38  if (j_sub_10040e30(edi, arg4) == 0)
10040f40      return 0
10040f40  
10040f51  if (sub_10045898(edi, &data_100605d8) s< 0)
10040f59      return 0
10040f59  
10040f5e  int32_t ecx_2 = arg4 + 1
10040f67  int32_t* ebx_1 = *(arg2 + 4)
10040f67  
10040f6d  if (*ebx_1 != 0)
10040f73      int32_t ebp_1 = 0
10040f73      
10041111      do
10040f85          if (j_sub_10040e30(edi, ecx_2) == 0)
10040f40              return 0
10040f40          
10040f8a          int32_t var_14_2 = *(ebx_1 + ebp_1)
10040f8a          
10040f9b          if (sub_10045898(edi, &data_100605d4) s< 0)
10040f40              return 0
10040f40          
10040fa9          float* esi_2 = *(ebx_1 + ebp_1 + 4) + arg3
10040fa9          
10040fae          if (((*(ebx_1 + ebp_1 + 8)).w:1.b & 1) == 0)
10040fd0              arg1 = 1
10040fae          else
10040fba              arg1 = *(ebx_1 + ebp_1 + 0xc)
10040fba              
10040fc8              if (sub_10045898(edi, &data_1005ab58) s< 0)
10040f40                  return 0
10040f40          
10040fdf          bool cond:1_1 = arg1 s<= 0
10040fe1          arg1 -= 1
10040fe1          
10040fe5          if (not(cond:1_1))
100410e7              bool cond:2_1
100410e7              
100410e7              do
10040ffe                  switch (zx.d((*(ebx_1 + ebp_1 + 8)).b) - 1)
10041008                      case 0
10041008                          int32_t var_14_3 = sx.d(*esi_2)
10041008                          
10041019                          if (sub_10045898(edi, &data_1005d37c) s< 0)
10040f40                              return 0
10040f40                          
1004101f                          esi_2 += 1
10041024                      case 1
10041024                          float var_14_4 = *esi_2
10041024                          
10041035                          if (sub_10045898(edi, &data_1005d37c) s< 0)
10040f40                              return 0
10040f40                          
1004103b                          esi_2 = &esi_2[1]
10041044                      case 2
1004104e                          if (j_sub_10040e80(edi, *esi_2) == 0)
10040f40                              return 0
10040f40                          
10041054                          esi_2 = &esi_2[1]
10041059                      case 3
10041059                          float* var_14_6 = esi_2
10041059                          
1004106a                          if (sub_10045898(edi, ""%s"") s< 0)
10040f40                              return 0
10040f40                          
10041070                          esi_2 = &esi_2[0x14]
10041085                      case 5
1004108f                          if (j_sub_10040f20(edi, *(ebx_1 + ebp_1 + 0x18), arg3, ecx_2)
1004108f                                  == 0)
10040f40                              return 0
10040f40                          
10041099                          esi_2 += **(ebx_1 + ebp_1 + 0x18)
10041099                  
100410a2                  if (((*(ebx_1 + ebp_1 + 8)).w:1.b & 1) != 0)
100410aa                      if (arg1 s<= 0)
100410d4                          if (sub_10045898(edi, &data_1005ab54) s< 0)
10040f40                              return 0
100410aa                      else if (sub_10045898(edi, &data_1005d330) s< 0)
10040f40                          return 0
10040f40                  
100410e1                  cond:2_1 = arg1 s> 0
100410e3                  arg1 -= 1
100410e7              while (cond:2_1)
100410e7          
100410fd          if (sub_10045898(edi, &data_1005f188) s< 0)
10040f40              return 0
10040f40          
10041107          ebp_1 += 0x1c
1004110a          ebx_1 = *(arg2 + 4)
10041111      while (*(ebx_1 + ebp_1) != 0)
10041111  
1004111e  int32_t eax_29 = j_sub_10040e30(edi, ecx_2 - 1)
1004111e  
10041128  if (eax_29 == 0)
1004112e      return eax_29
1004112e  
10041143  int32_t edx_6
10041143  edx_6.b = sub_10045898(edi, &data_100605d0) s>= 0
1004114a  return edx_6

1004114b                                   90                                                                         .
1004114c  uint32_t jump_table_1004114c[0x6] = 
1004114c  {
1004114c      [0x0] =  0x10041005
10041150      [0x1] =  0x10041022
10041154      [0x2] =  0x10041040
10041158      [0x3] =  0x10041059
1004115c      [0x4] =  0x1004109b
10041160      [0x5] =  0x10041075
10041164  }

10041164              90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc      ............................
10041180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100411a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100411c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100411e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10041210    int32_t sub_10041210(int32_t* arg1, void* arg2, int32_t arg3)

10041229  return j_sub_10040f20(arg1, arg2, arg3, 0)

1004122a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

10041240    int32_t sub_10041240(int32_t arg1, int32_t arg2, int32_t arg3)

10041255  if (arg1 != 0)
10041265      HGLOBAL hMem = GlobalAlloc(uFlags: GMEM_ZEROINIT, dwBytes: 0x44)
10041269      data_10062970 = hMem
10041269      
1004126e      if (hMem != 0)
1004127b          int32_t eax_1 = GlobalLock(hMem)
1004127f          data_1006296c = eax_1
1004127f          
10041284          if (eax_1 == 0)
1004128c              GlobalFree(hMem: data_10062970)
1004129e              return 0
1004129e          
100412a3          HGLOBAL hMem_1 = GlobalAlloc(uFlags: GMEM_ZEROINIT, dwBytes: 0x28)
100412a7          data_10062968 = hMem_1
100412a7          
100412ac          if (hMem_1 == 0)
100412b5              GlobalUnlock(hMem: data_10062970)
100412c2              GlobalFree(hMem: data_10062970)
100412d4              return 0
100412d4          
100412d6          void* eax_5 = GlobalLock(hMem: hMem_1)
100412da          data_100639f0 = eax_5
100412da          
100412df          if (eax_5 == 0)
100412e7              GlobalUnlock(hMem: data_10062970)
100412fa              GlobalFree(hMem: data_10062970)
10041303              GlobalFree(hMem: data_10062968)
10041311              return 0
10041311          
10041312          *(eax_5 + 0xc) = j_sub_10041740
1004131e          *data_100639f0 = j_sub_10041760
1004132a          *(data_100639f0 + 4) = 0
10041337          *(data_100639f0 + 8) = j_DBI1::DeleteMod
10041355          *(data_100639f0 + 0x10) = j_sub_10041680
10041364          PSTR filePart
10041364          uint8_t buffer[0x80]
10041364          
10041364          if (SearchPathA(lpPath: nullptr, lpFileName: "UNZIP32.DLL", lpExtension: nullptr, 
10041364                  nBufferLength: 0x80, lpBuffer: &buffer, lpFilePart: &filePart) != 0)
1004136f              HMODULE hModule = LoadLibraryA(lpLibFileName: "UNZIP32.DLL")
10041377              data_10063a0c = hModule
10041377              
1004137c              if (hModule != 0)
1004138e                  data_10063a08 = GetProcAddress(hModule, lpProcName: "windll_unzip")
1004139c                  *(data_1006296c + 0x10) = 0
100413a5                  *(data_1006296c + 0xc) = 2
100413b2                  *(data_1006296c + 0x14) = 0
100413ba                  *(data_1006296c + 0x18) = 0
100413c3                  *(data_1006296c + 0x1c) = 0
100413cc                  *(data_1006296c + 0x20) = 0
100413d4                  *(data_1006296c + 0x24) = 0
100413e2                  *(data_1006296c + 0x28) = 1
100413eb                  *(data_1006296c + 0x2c) = 0
100413f4                  *(data_1006296c + 0x3c) = arg1
10041404                  *(data_1006296c + 0x40) = arg3
1004140d                  *(data_1006296c + 0x34) = 1
10041410                  HGLOBAL hMem_2 = GlobalAlloc(uFlags: GMEM_MOVEABLE, dwBytes: 0x28)
10041410                  
10041416                  if (hMem_2 == 0)
10041418                      j_sub_10041600()
10041423                      FreeLibrary(hLibModule: data_10063a0c)
10041435                      return 0
10041435                  
1004143d                  HGLOBAL hMem_3 = GlobalAlloc(uFlags: GMEM_MOVEABLE, dwBytes: 0x104)
1004143d                  
10041447                  if (hMem_3 == 0)
10041449                      j_sub_10041600()
10041455                      FreeLibrary(hLibModule: data_10063a0c)
10041467                      return 0
10041467                  
10041469                  int32_t* s = GlobalLock(hMem: hMem_2)
10041476                  __builtin_memset(s, c: 0, n: 0x28)
10041479                  int32_t s_1 = GlobalLock(hMem: hMem_3)
10041488                  *s = s_1
1004148a                  __builtin_memset(s: s_1, c: 0, n: 0x104)
1004148c                  int32_t edi_2 = arg2
10041493                  int32_t i = 0xffffffff
10041493                  
10041496                  while (i != 0)
10041496                      bool cond:6_1 = 0 != *edi_2
10041496                      edi_2 += 1
10041496                      i -= 1
10041496                      
10041496                      if (not(cond:6_1))
10041496                          break
10041496                  
10041498                  int32_t ecx_10 = not.d(i)
100414a5                  int32_t esi_2
100414a5                  int32_t edi_5
100414a5                  edi_5, esi_2 =
100414a5                      __builtin_memcpy(dest: *s, src: edi_2 - ecx_10, n: ecx_10 u>> 2 << 2)
100414ac                  __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx_10 & 3)
100414c2                  int32_t eax_19 = data_10063a08(1, s, 0, 0, data_1006296c, data_100639f0)
100414d5                  GlobalUnlock(hMem: hMem_3)
100414de                  GlobalFree(hMem: hMem_3)
100414e1                  GlobalUnlock(hMem: hMem_2)
100414e4                  GlobalFree(hMem: hMem_2)
100414e6                  j_sub_10041600()
100414f2                  FreeLibrary(hLibModule: data_10063a0c)
100414ff                  int32_t result
100414ff                  result.b = eax_19 == 0
10041509                  return result
10041509          
1004150a          j_sub_10041600()
1004150a  
1004151b  return 0

1004151c                                                                                      90 90 90 90                              ....
10041520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100415a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100415c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100415e0    int32_t DBI1::DeleteMod() __pure

100415e5  return 1

100415e8                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................

10041600    HGLOBAL sub_10041600()

10041600  HGLOBAL hMem_1 = data_10062970
10041600  
10041615  if (hMem_1 != 0)
10041618      GlobalUnlock(hMem: hMem_1)
10041620      GlobalFree(hMem: data_10062970)
10041620  
10041622  HGLOBAL hMem = data_10062968
10041622  
10041629  if (hMem == 0)
10041639      return hMem
10041639  
1004162c  GlobalUnlock(hMem)
10041635  return GlobalFree(hMem: data_10062968)

1004163a                                                                                90 90 90 90 90 90                            ......
10041640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10041650    int32_t sub_10041650()

10041650  int32_t result = data_100605dc
10041650  
10041658  if (result == 0xffffffff)
1004165a      uint32_t eax = GetVersion()
10041667      result = neg.d(sbb.d(eax, eax, eax u< 0x80000000))
10041669      data_100605dc = result
10041669  
1004166e  return result

1004166f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

10041680    PSTR __stdcall sub_10041680(int32_t arg1, int32_t arg2, int16_t arg3)

10041695  int32_t var_14 = (*"%c%d%%")[0].d
1004169e  char var_e = data_10060608[6][0]
100416a6  int32_t string2 = (*"100%%")[0].d
100416ae  int16_t var_10 = (*"%%")[0].w
100416bc  int32_t eax_2
100416bc  eax_2.b = sbb.b(arg2.b, arg2.b, arg1 u< arg2)
100416be  int16_t var_18 = (*"%")[0].w
100416c7  eax_2.b &= 0xd
100416c9  eax_2.b += 0x20
100416cf  void string1
100416cf  
100416cf  if (arg3 == 0x64)
100416e4      return lstrcpyA(lpString1: &string1, lpString2: &string2)
100416e4  
100416f4  uint32_t var_20_1 = zx.d(arg3)
100416f5  int32_t var_24_1 = sx.d(eax_2.b)
10041707  return sub_10044c56(&string1, &var_14)

1004170a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10041720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10041740    int32_t sub_10041740() __pure

10041745  return 1

10041748                          90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc          ........................

10041760    int32_t __stdcall sub_10041760(int32_t arg1, int32_t arg2)

10041767  data_10063fe8(1, arg1)
10041774  return arg2

10041777                                                                       90 90 90 90 90 90 90 90 90                         .........
10041780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10041790    float* sub_10041790(int32_t arg1, float* arg2)

10041791  float* esi = arg1
10041795  long double x87_r7 = fconvert.t(esi[1])
10041798  long double temp1 = fconvert.t(0f)
10041798  x87_r7 - temp1
10041798  
100417a3  if ((((x87_r7 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp1) ? 1 : 0) << 0xa
100417a3          | (x87_r7 == temp1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
100417a5      long double x87_r7_1 = fconvert.t(*esi)
100417a7      long double temp3_1 = fconvert.t(0f)
100417a7      x87_r7_1 - temp3_1
100417a7      
100417b2      if ((((x87_r7_1 < temp3_1 ? 1 : 0) << 8
100417b2              | (is_unordered.t(x87_r7_1, temp3_1) ? 1 : 0) << 0xa
100417b2              | (x87_r7_1 == temp3_1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
100417b4          long double x87_r7_2 = fconvert.t(0f)
100417ba          long double x87_r6 = fconvert.t(esi[2])
100417bd          long double temp5 = fconvert.t(0f)
100417bd          x87_r6 - temp5
100417bd          
100417c8          if ((((x87_r6 < temp5 ? 1 : 0) << 8
100417c8                  | (is_unordered.t(x87_r6, temp5) ? 1 : 0) << 0xa
100417c8                  | (x87_r6 == temp5 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
100417d7              *arg2 = fconvert.s(fneg(fconvert.t(90f)))
100417d9              arg2[2] = 0
100417e0              arg2[1] = fconvert.s(x87_r7_2)
100417e3              return arg2
100417e3          
100417f1          *arg2 = fconvert.s(fneg(fconvert.t(270f)))
100417f3          arg2[2] = 0
100417fa          arg2[1] = fconvert.s(x87_r7_2)
100417fd          return arg2
100417fd  
1004180b  int32_t eax_3
1004180b  int16_t x87control
1004180b  int16_t x87control_1
1004180b  eax_3, x87control_1 = __ftol(x87control, 
1004180b      __fpatan(x: fconvert.t(*esi), y: fconvert.t(esi[1])) * fconvert.t(57.295779513082323))
10041814  long double x87_r7_6 = float.t(eax_3)
10041818  long double temp2 = fconvert.t(0f)
10041818  x87_r7_6 - temp2
1004181e  eax_3.w = (x87_r7_6 < temp2 ? 1 : 0) << 8
1004181e      | (is_unordered.t(x87_r7_6, temp2) ? 1 : 0) << 0xa
1004181e      | (x87_r7_6 == temp2 ? 1 : 0) << 0xe | 0x3800
1004182e  long double x87_r5 = fconvert.t(*esi)
10041858  long double x87_r6_8 = float.t(__ftol(x87control_1, 
10041858      __fpatan(x: fconvert.t(esi[1]), y: fconvert.t(esi[2]))
10041858          * fconvert.t(57.295779513082323)))
1004185c  long double temp4 = fconvert.t(0f)
1004185c  x87_r6_8 - temp4
10041862  int32_t eax_4
10041862  eax_4.w = (x87_r6_8 < temp4 ? 1 : 0) << 8
10041862      | (is_unordered.t(x87_r6_8, temp4) ? 1 : 0) << 0xa
10041862      | (x87_r6_8 == temp4 ? 1 : 0) << 0xe | 0x3000
10041862  
10041867  if ((eax_4:1.b & 1) != 0)
10041869      x87_r6_8 = x87_r6_8 + fconvert.t(360f)
10041869  
10041876  *arg2 = fconvert.s(fneg(x87_r6_8))
10041878  arg2[2] = 0
1004187f  arg2[1] = fconvert.s(x87_r5)
10041882  return arg2

10041883           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
100418a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100418c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100418d0    int32_t sub_100418d0(char* arg1)

100418d0  char* ecx = arg1
100418d4  char i = *ecx
100418d4  
100418d8  while (i != 0)
100418e0      if (i == 0x2f || i == 0x5c)
100418e2          *ecx = 0x5c
100418e2      
100418e5      i = ecx[1]
100418e8      ecx = &ecx[1]
100418e8  
100418ed  return i

100418ee                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................

10041900    void* sub_10041900(int32_t arg1, int32_t arg2)

10041906  int32_t edi = arg1
10041908  int32_t i = 0xffffffff
1004190b  void* result = nullptr
1004190b  
1004190d  while (i != 0)
1004190d      bool cond:0_1 = 0 != *edi
1004190d      edi += 1
1004190d      i -= 1
1004190d      
1004190d      if (not(cond:0_1))
1004190d          break
1004190d  
10041912  int32_t edi_1 = arg1
10041916  int32_t i_1 = 0xffffffff
10041916  
10041919  while (i_1 != 0)
10041919      bool cond:1_1 = 0 != *edi_1
10041919      edi_1 += 1
10041919      i_1 -= 1
10041919      
10041919      if (not(cond:1_1))
10041919          break
10041919  
1004191e  if (not.d(i_1) != 1)
10041924      result = arg2 - (not.d(i) - 1)
10041924      
10041929      if (result s> 1)
1004192b          result.b = (not.d(i) - 1)[arg1 - 1]
1004192b          
10041935          if (result.b != 0x2f && result.b != 0x5c)
10041937              (not.d(i) - 1)[arg1] = 0x5c
1004193b              (not.d(i) - 1)[arg1 + 1] = 0
1004193b  
10041942  return result

10041943           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................
10041960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10041970    int32_t sub_10041970(PSTR arg1, int32_t arg2, int32_t* arg3)

10041984  int32_t* eax = sub_10044936(arg1, "rb")
10041984  
10041990  if (eax != 0)
100419b9      int32_t var_9c
100419b9      int32_t var_98
100419b9      
100419b9      if (sub_100446b8(&var_9c, 1, 0xc, eax) == 0xc && var_9c == 0x4b434150
100419b9              && sub_100447cf(eax, j_sub_10043870(var_98), FILE_BEGIN) == 0)
100419ec          int32_t var_94
100419ec          uint32_t ebp_1 = j_sub_10043870(var_94) u>> 6
100419f5          void* eax_6 = j_sub_10038f90(ebp_1 << 6)
100419f5          
10041a10          if (sub_100446b8(eax_6, 0x40, ebp_1, eax) != ebp_1)
10041a12              sub_10044888(eax)
10041a18              j_sub_100390b0(eax_6)
10041a2c              return 0
10041a2c          
10041a2d          sub_10044888(eax)
10041a32          int32_t edi_1 = arg2
10041a39          int32_t i = 0xffffffff
10041a39          
10041a42          while (i != 0)
10041a42              bool cond:1_1 = 0 != *edi_1
10041a42              edi_1 += 1
10041a42              i -= 1
10041a42              
10041a42              if (not(cond:1_1))
10041a42                  break
10041a42          
10041a44          int32_t ecx_2 = not.d(i)
10041a51          void var_90
10041a51          int32_t esi_2
10041a51          int32_t edi_3
10041a51          edi_3, esi_2 =
10041a51              __builtin_memcpy(dest: &var_90, src: edi_1 - ecx_2, n: ecx_2 u>> 2 << 2)
10041a58          __builtin_memcpy(dest: edi_3, src: esi_2, n: ecx_2 & 3)
10041a5f          j_sub_100418d0(&var_90)
10041a67          int32_t ebx = 0
10041a67          
10041a6b          if (ebp_1 s> 0)
10041a6d              void* esi_3 = eax_6
10041a6d              
10041a8f              do
10041a72                  j_sub_100418d0(esi_3)
10041a72                  
10041a87                  if (j_sub_10043cc0(esi_3, &var_90) == 0)
10041aab                      PSTR edi_4 = arg1
10041ab2                      int32_t i_1 = 0xffffffff
10041ab2                      
10041abe                      while (i_1 != 0)
10041abe                          bool cond:2_1 = 0 != *edi_4
10041abe                          edi_4 = &edi_4[1]
10041abe                          i_1 -= 1
10041abe                          
10041abe                          if (not(cond:2_1))
10041abe                              break
10041abe                      
10041ac0                      int32_t ecx_6 = not.d(i_1)
10041ad0                      int32_t esi_5
10041ad0                      int32_t edi_7
10041ad0                      edi_7, esi_5 = __builtin_memcpy(dest: &arg3[2], src: edi_4 - ecx_6, 
10041ad0                          n: ecx_6 u>> 2 << 2)
10041ad7                      __builtin_memcpy(dest: edi_7, src: esi_5, n: ecx_6 & 3)
10041ae0                      void* ebx_2 = (ebx << 6) + eax_6
10041aeb                      *arg3 = j_sub_10043870(*(ebx_2 + 0x38))
10041af8                      arg3[1] = j_sub_10043870(*(ebx_2 + 0x3c))
10041afb                      j_sub_100390b0(eax_6)
10041b12                      return 1
10041b12                  
10041a89                  ebx += 1
10041a8a                  esi_3 += 0x40
10041a8f              while (ebx s< ebp_1)
10041a8f          
10041a96          j_sub_100390b0(eax_6)
10041aaa          return 0
10041aaa      
10041b14      sub_10044888(eax)
10041b14  
10041b28  return 0

10041b29                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
10041b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10041ba0    int32_t sub_10041ba0(char* arg1, char* arg2, char* arg3, int32_t* arg4)

10041ba6  char edx = data_1006294c
10041bbe  char var_1b0 = edx
10041bc5  char var_240 = edx
10041bc9  void s_1
10041bc9  int16_t* edi = __builtin_memset(s: &s_1, c: 0, n: 0x8c)
10041bcb  *edi = 0
10041bcd  edi[1].b = 0
10041bdc  char var_120 = edx
10041be3  void s_2
10041be3  int16_t* edi_3 = __builtin_memset(s: &s_2, c: 0, n: 0x8c)
10041be5  *edi_3 = 0
10041be7  edi_3[1].b = 0
10041bf6  char var_90 = edx
10041bfd  void s_3
10041bfd  int16_t* edi_6 = __builtin_memset(s: &s_3, c: 0, n: 0x8c)
10041bff  *edi_6 = 0
10041c01  edi_6[1].b = 0
10041c0d  void s
10041c0d  int16_t* edi_9 = __builtin_memset(&s, c: 0, n: 0x8c)
10041c0f  *edi_9 = 0
10041c11  edi_9[1].b = 0
10041c1b  char* var_25c
10041c1b  
10041c1b  if (arg2 != 0)
10041c1d      int32_t var_258_1 = 0x90
10041c22      var_25c = arg2
10041c2b      StrCopyFixed(&var_1b0, var_25c, var_258_1)
10041c2b  
10041c33  int32_t var_258_2 = 0x90
10041c3f  var_25c = "baseq2"
10041c45  StrCopyFixed(&var_120, var_25c, var_258_2)
10041c54  int32_t var_244 = 0
10041c5c  char* ebp = &var_1b0
10041c5c  
10041c65  while (true)
10041c65      var_240 = 0
10041c65      
10041c6a      if (arg1 != 0)
10041c6c          char* edi_12 = arg1
10041c6e          int32_t i = 0xffffffff
10041c6e          
10041c73          while (i != 0)
10041c73              bool cond:1_1 = 0 != *edi_12
10041c73              edi_12 = &edi_12[1]
10041c73              i -= 1
10041c73              
10041c73              if (not(cond:1_1))
10041c73                  break
10041c73          
10041c78          if (not.d(i) != 1)
10041c7a              int32_t var_258_3 = 0x90
10041c83              var_25c = arg1
10041c85              StrCopyFixed(&var_240, var_25c, var_258_3)
10041c94              j_sub_10041900(&var_240, 0x90)
10041c94      
10041c9c      char* edi_13 = ebp
10041c9e      int32_t i_1 = 0xffffffff
10041c9e      
10041ca3      while (i_1 != 0)
10041ca3          bool cond:0_1 = 0 != *edi_13
10041ca3          edi_13 = &edi_13[1]
10041ca3          i_1 -= 1
10041ca3          
10041ca3          if (not(cond:0_1))
10041ca3              break
10041ca3      
10041ca8      if (not.d(i_1) != 1)
10041caa          char* edi_14 = &var_240
10041cae          int32_t i_2 = 0xffffffff
10041cae          
10041cb1          while (i_2 != 0)
10041cb1              bool cond:3_1 = 0 != *edi_14
10041cb1              edi_14 = &edi_14[1]
10041cb1              i_2 -= 1
10041cb1              
10041cb1              if (not(cond:3_1))
10041cb1                  break
10041cb1          
10041cc2          var_25c = ebp
10041cc4          sub_10044cb0(&var_240, var_25c, 0x90 - (not.d(i_2) - 1))
10041cd3          j_sub_10041900(&var_240, 0x90)
10041cd3      
10041cdb      char* edi_15 = &var_240
10041cdf      int32_t i_3 = 0xffffffff
10041cdf      
10041ce9      while (i_3 != 0)
10041ce9          bool cond:2_1 = 0 != *edi_15
10041ce9          edi_15 = &edi_15[1]
10041ce9          i_3 -= 1
10041ce9          
10041ce9          if (not(cond:2_1))
10041ce9              break
10041ce9      
10041cfc      var_25c = arg3
10041cfe      sub_10044cb0(&var_240, var_25c, 0x90 - (not.d(i_3) - 1))
10041d08      j_sub_100418d0(&var_240)
10041d11      char* var_268_3 = &var_240
10041d17      j_sub_10038d80("accessing %s")
10041d17      
10041d2d      if (sub_10052e5c(&var_240, 4) == 0)
10041d2d          break
10041d2d      
10041e13      for (int32_t i_4 = 0; i_4 s< 0xa; i_4 += 1)
10041d37          var_240 = 0
10041d37          
10041d3c          if (arg1 != 0)
10041d3e              char* edi_16 = arg1
10041d40              int32_t j = 0xffffffff
10041d40              
10041d45              while (j != 0)
10041d45                  bool cond:6_1 = 0 != *edi_16
10041d45                  edi_16 = &edi_16[1]
10041d45                  j -= 1
10041d45                  
10041d45                  if (not(cond:6_1))
10041d45                      break
10041d45              
10041d4a              if (not.d(j) != 1)
10041d4c                  int32_t var_258_6 = 0x90
10041d55                  var_25c = arg1
10041d57                  StrCopyFixed(&var_240, var_25c, var_258_6)
10041d66                  j_sub_10041900(&var_240, 0x90)
10041d66          
10041d6e          char* edi_17 = ebp
10041d70          int32_t j_1 = 0xffffffff
10041d70          
10041d75          while (j_1 != 0)
10041d75              bool cond:5_1 = 0 != *edi_17
10041d75              edi_17 = &edi_17[1]
10041d75              j_1 -= 1
10041d75              
10041d75              if (not(cond:5_1))
10041d75                  break
10041d75          
10041d7a          if (not.d(j_1) != 1)
10041d7c              char* edi_18 = &var_240
10041d80              int32_t j_2 = 0xffffffff
10041d80              
10041d83              while (j_2 != 0)
10041d83                  bool cond:8_1 = 0 != *edi_18
10041d83                  edi_18 = &edi_18[1]
10041d83                  j_2 -= 1
10041d83                  
10041d83                  if (not(cond:8_1))
10041d83                      break
10041d83              
10041d94              var_25c = ebp
10041d96              sub_10044cb0(&var_240, var_25c, 0x90 - (not.d(j_2) - 1))
10041da5              j_sub_10041900(&var_240, 0x90)
10041da5          
10041dad          char* edi_19 = &var_240
10041db1          int32_t j_3 = 0xffffffff
10041db6          int32_t i_6 = i_4
10041db6          
10041db7          while (j_3 != 0)
10041db7              bool cond:7_1 = 0 != *edi_19
10041db7              edi_19 = &edi_19[1]
10041db7              j_3 -= 1
10041db7              
10041db7              if (not(cond:7_1))
10041db7                  break
10041db7          
10041dbc          var_25c = "pak%d.pak"
10041dc6          sub_10044c56(&var_25c + not.d(j_3) - 1 + 0x1c, var_25c)
10041dc6          
10041ddc          if (sub_10052e5c(&var_240, 4) == 0)
10041de9              char* var_258_8 = &var_240
10041dea              var_25c = arg3
10041df0              j_sub_10038d80("searching %s in %s")
10041df0              
10041e0d              if (j_sub_10041970(&var_240, arg3, arg4) != 0)
10041e99                  return 1
10041e99      
10041e1d      ebp = &ebp[0x90]
10041e24      bool cond:10_1 = var_244 + 1 s< 2
10041e27      var_244 += 1
10041e27      
10041e2b      if (not(cond:10_1))
10041e3b          *arg4 = 0
10041e41          arg4[1] = 0
10041e51          return 0
10041e51  
10041e52  char* edi_21 = &var_240
10041e56  int32_t i_5 = 0xffffffff
10041e56  
10041e62  while (i_5 != 0)
10041e62      bool cond:4_1 = 0 != *edi_21
10041e62      edi_21 = &edi_21[1]
10041e62      i_5 -= 1
10041e62      
10041e62      if (not(cond:4_1))
10041e62          break
10041e62  
10041e64  int32_t ecx_13 = not.d(i_5)
10041e74  int32_t esi_2
10041e74  int32_t edi_24
10041e74  edi_24, esi_2 =
10041e74      __builtin_memcpy(dest: &arg4[2], src: edi_21 - ecx_13, n: ecx_13 u>> 2 << 2)
10041e7b  __builtin_memcpy(dest: edi_24, src: esi_2, n: ecx_13 & 3)
10041e7d  arg4[1] = 0
10041e84  *arg4 = 0
10041e99  return 1

10041e9a                                                                                90 90 90 90 90 90                            ......
10041ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10041f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10041f60    int32_t sub_10041f60(char* arg1, int32_t* arg2)

10041f71  char* eax = j_sub_10038960("gamedir")
10041f71  
10041f92  if (j_sub_10041ba0(j_sub_10038960("basedir"), eax, arg1, arg2) != 0)
10041f9b      return 1
10041f9b  
10041fa3  char* eax_4 = j_sub_10038960("gamedir")
10041fba  int32_t eax_6 = j_sub_10041ba0(j_sub_10038960("cddir"), eax_4, arg1, arg2)
10041fc2  int32_t eax_7 = neg.d(eax_6)
10041fca  return neg.d(sbb.d(eax_7, eax_7, eax_6 != 0))

10041fcb                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................
10041fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10041ff0    int32_t sub_10041ff0(int32_t arg1, PSTR arg2)

1004200f  if (arg2 != 0 && arg1 != 0)
1004201f      HGLOBAL hMem = GlobalAlloc(uFlags: GMEM_ZEROINIT, dwBytes: 0xc)
10042023      data_1006297c = hMem
10042023      
10042028      if (hMem != 0)
10042035          int32_t (** eax)(int32_t arg1) = GlobalLock(hMem)
10042039          data_100639dc = eax
10042039          
1004203e          if (eax == 0)
10042046              GlobalFree(hMem: data_1006297c)
10042058              return 0
10042058          
10042059          *eax = j_sub_100423d0
10042069          *(data_100639dc + 8) = j_sub_100423b0
1004207a          PSTR var_84
1004207a          PSTR* lpFilePart = &var_84
1004207b          uint8_t var_80[0x80]
1004207b          uint8_t (* lpBuffer)[0x80] = &var_80
1004207c          uint32_t nBufferLength = 0x80
10042081          PSTR lpExtension = nullptr
10042082          PSTR lpFileName = "ZIP32.DLL"
10042087          PSTR lpPath = nullptr
10042088          *(data_100639dc + 4) = j_sub_100423f0
10042088          
10042097          if (SearchPathA(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, 
10042097                  lpFilePart) != 0)
1004209e              HMODULE hModule = LoadLibraryA(lpLibFileName: "ZIP32.DLL")
100420a6              data_100639e0 = hModule
100420a6              
100420ab              if (hModule != 0)
100420b9                  int32_t eax_4 = GetProcAddress(hModule, lpProcName: "ZpArchive")
100420bb                  HMODULE hModule_1 = data_100639e0
100420c1                  char* lpProcName = "ZpSetOptions"
100420c7                  data_100639e4 = eax_4
100420cc                  int32_t eax_5 = GetProcAddress(hModule: hModule_1, lpProcName)
100420ce                  int32_t ecx_2 = data_100639e4
100420d4                  data_100639e8 = eax_5
100420d4                  
100420df                  if (ecx_2 != 0 && eax_5 != 0)
100420ec                      int32_t eax_7 =
100420ec                          GetProcAddress(hModule: data_100639e0, lpProcName: "ZpInit")
100420f0                      data_100639ec = eax_7
100420f5                      HMODULE hLibModule
100420f5                      
100420f5                      if (eax_7 != 0)
10042121                          if (eax_7(data_100639dc) != 0)
10042130                              int32_t* var_98_8 = 0x104
10042135                              void* var_9c_5 = &data_10063956
1004213a                              __builtin_memset(s: &data_100638e0, c: 0, n: 0x18)
1004215e                              data_10063900 = 0
10042164                              data_10063904 = 1
1004216a                              data_10063908 = 0
10042170                              data_1006390c = 0
10042176                              data_10063910 = 1
1004217c                              __builtin_memset(s: &data_10063914, c: 0, n: 0x2c)
100421be                              data_1006394d = 0
100421c4                              sub_1004501e(var_9c_5, var_98_8)
100421d3                              data_10063890 = 1
100421d9                              data_10063894 = arg1
100421e6                              HGLOBAL hMem_1 =
100421e6                                  GlobalAlloc(uFlags: GMEM_ZEROINIT, dwBytes: 0x10000)
100421ea                              data_100639d8 = hMem_1
100421ef                              int32_t* esi
100421ef                              
100421ef                              if (hMem_1 == 0)
100421f8                                  esi = var_84
100421ef                              else
100421f4                                  esi = GlobalLock(hMem: hMem_1)
100421f4                              
1004220a                              void* lpString1 = &esi[data_10063890]
1004220d                              lstrlenA(lpString: arg2)
10042215                              lstrcpyA(lpString1, lpString2: arg2)
1004221b                              *esi = lpString1
10042223                              data_10063898 = esi
10042235                              void var_18c
10042235                              __builtin_memcpy(dest: &var_18c, src: &data_100638e0, n: 0xf8)
10042237                              data_100639e8()
1004225c                              int32_t eax_12 =
1004225c                                  data_100639e4(data_10063890, data_10063894, data_10063898)
1004225c                              
10042266                              if (eax_12 != 0)
10042277                                  data_10063fe8(3, "Error during archiving.\nUnable …", 
10042277                                      arg1)
10042277                              
10042286                              GlobalUnlock(hMem: data_100639d8)
10042293                              GlobalFree(hMem: data_100639d8)
10042299                              j_sub_10042380()
100422a5                              FreeLibrary(hLibModule: data_100639e0)
100422b3                              int32_t result
100422b3                              result.b = eax_12 == 0
100422bc                              return result
100422bc                          
10042128                          hLibModule = data_100639e0
100420f5                      else
100420fd                          hLibModule = data_100639e0
100420fd                      
100420fe                      FreeLibrary(hLibModule)
100420fe          
10042104          j_sub_10042380()
10042104  
10042115  return 0

100422bd                                                                                         90 90 90                               ...
100422c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100422e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10042380    HGLOBAL sub_10042380()

10042380  HGLOBAL hMem = data_1006297c
10042380  
10042387  if (hMem == 0)
1004239c      return hMem
1004239c  
1004238a  GlobalUnlock(hMem)
10042396  return GlobalFree(hMem: data_1006297c)

1004239d                                                                                         90 90 90                               ...
100423a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100423b0    int32_t sub_100423b0() __pure

100423b5  return 1

100423b8                                                                          90 90 90 90 90 90 90 90                          ........
100423c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100423d0    int32_t sub_100423d0(int32_t arg1) __pure

100423d4  return arg1

100423d5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
100423e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100423f0    char* __stdcall sub_100423f0(char* arg1)

100423f4  *arg1 = 0
100423f7  return arg1

100423fa                                                                                90 90 90 90 90 90                            ......
10042400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10042410    int32_t sub_10042410() __pure

10042410  return 

10042411                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10042420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10042430    float* sub_10042430(float* arg1, float arg2, float* arg3, float arg4)

10042440  float var_1c = *arg2
10042446  int32_t eax_1 = *(arg2 i+ 4)
1004244f  int32_t edx_1 = *(arg2 i+ 8)
1004245d  float var_10
1004245d  j_sub_10042920(&var_10, arg2)
10042471  float var_28
10042471  j_sub_100434b0(&var_10, &var_1c, &var_28)
1004247c  float var_bc = var_10
10042494  float edx_3 = var_28
100424a0  int32_t var_24
100424a0  int32_t var_ac = var_24
100424af  float edx_4 = var_1c
100424c4  int32_t var_9c = edx_1
100424d8  float var_4c
100424d8  __builtin_memcpy(dest: &var_4c, src: &var_bc, n: 0x24)
100424e0  int32_t var_c
100424e0  int32_t var_48 = var_c
100424e9  int32_t var_8
100424e9  int32_t var_44 = var_8
100424f2  float var_40 = edx_3
100424fb  int32_t var_20
100424fb  int32_t var_38 = var_20
10042504  float var_34 = edx_4
1004250d  int32_t var_30 = eax_1
1004251a  float s
1004251a  __builtin_memset(&s, c: 0, n: 0x24)
1004252c  s = 1f
10042543  s = fconvert.s(sub_10045c00(fconvert.t(arg4) * fconvert.t(3.1415926535897931)
10042543      / fconvert.t(180.0)))
1004255a  float var_70 = fconvert.s(sub_10045b50(fconvert.t(arg4) * fconvert.t(3.1415926535897931)
1004255a      / fconvert.t(180.0)))
10042573  float var_68 = fconvert.s(fneg(sub_10045b50(fconvert.t(arg4)
10042573      * fconvert.t(3.1415926535897931) / fconvert.t(180.0))))
1004258a  float var_64 = fconvert.s(sub_10045c00(fconvert.t(arg4) * fconvert.t(3.1415926535897931)
1004258a      / fconvert.t(180.0)))
1004259f  float var_98[0x9]
1004259f  j_sub_100429c0(&var_bc, &s, &var_98)
100425b9  float var_e0
100425b9  float* result = j_sub_100429c0(&var_98, &var_4c, &var_e0)
100425b9  
100425d7  for (int32_t i = 0; i s< 3; i += 1)
10042613      int32_t var_dc[0x8]
10042613      var_d8
10042613      long double x87_r7_20 = fconvert.t((&var_e0)[i * 3]) * fconvert.t(*arg3)
10042613          + fconvert.t(var_dc[i * 3]) * fconvert.t(arg3[1])
10042613          + fconvert.t(*(&var_d8 + i * 0xc)) * fconvert.t(arg3[2])
10042618      result = arg1
1004261b      result[i] = fconvert.s(x87_r7_20)
1004261b  
10042625  return result

10042626                    cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................
10042640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100426a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100426b0    float* sub_100426b0(float* arg1, float* arg2, float* arg3, float* arg4)

100426b7  long double x87_r7_1 = fconvert.t(arg1[1]) * fconvert.t(0.017453292519943295)
100426bf  long double st0
100426bf  bool c2
100426bf  st0, c2 = __fsin(x87_r7_1)
100426c1  data_100631a8 = fconvert.s(st0)
100426c7  long double st0_1
100426c7  bool c2_1
100426c7  st0_1, c2_1 = __fcos(x87_r7_1)
100426c9  data_1006319c = fconvert.s(st0_1)
100426d1  long double x87_r7_4 = fconvert.t(*arg1) * fconvert.t(0.017453292519943295)
100426d9  long double st0_2
100426d9  bool c2_2
100426d9  st0_2, c2_2 = __fsin(x87_r7_4)
100426db  data_1006298c = fconvert.s(st0_2)
100426e1  long double st0_3
100426e1  bool c2_3
100426e1  st0_3, c2_3 = __fcos(x87_r7_4)
100426e3  data_100631a0 = fconvert.s(st0_3)
100426ec  long double x87_r7_7 = fconvert.t(arg1[2]) * fconvert.t(0.017453292519943295)
100426fa  long double st0_4
100426fa  bool c2_4
100426fa  st0_4, c2_4 = __fsin(x87_r7_7)
100426fc  data_10062984 = fconvert.s(st0_4)
10042702  long double st0_5
10042702  bool c2_5
10042702  st0_5, c2_5 = __fcos(x87_r7_7)
10042704  data_10062988 = fconvert.s(st0_5)
10042704  
1004270a  if (arg2 != 0)
10042718      *arg2 = fconvert.s(fconvert.t(data_100631a0) * fconvert.t(data_1006319c))
10042726      arg2[1] = fconvert.s(fconvert.t(data_100631a0) * fconvert.t(data_100631a8))
10042731      arg2[2] = fconvert.s(fneg(fconvert.t(data_1006298c)))
10042731  
1004273a  if (arg3 != 0)
1004275c      *arg3 = fconvert.s(fconvert.t(data_10062988) * fconvert.t(data_100631a8)
1004275c          - fconvert.t(data_10062984) * fconvert.t(data_1006298c)
1004275c          * fconvert.t(data_1006319c))
10042784      arg3[1] = fconvert.s((
10042784          fconvert.t(data_10062984) * fconvert.t(data_1006298c) * fconvert.t(data_100631a8)
10042784          + fconvert.t(data_10062988) * fconvert.t(data_1006319c)) * fconvert.t(-1f))
10042799      arg3[2] = fconvert.s(fconvert.t(data_10062984) * fconvert.t(data_100631a0)
10042799          * fconvert.t(-1f))
10042799  
100427a2  if (arg4 != 0)
100427c4      *arg4 = fconvert.s(
100427c4          fconvert.t(data_10062988) * fconvert.t(data_1006298c) * fconvert.t(data_1006319c)
100427c4          + fconvert.t(data_10062984) * fconvert.t(data_100631a8))
100427e6      arg4[1] = fconvert.s(
100427e6          fconvert.t(data_10062988) * fconvert.t(data_1006298c) * fconvert.t(data_100631a8)
100427e6          - fconvert.t(data_10062984) * fconvert.t(data_1006319c))
100427f5      arg4[2] = fconvert.s(fconvert.t(data_10062988) * fconvert.t(data_100631a0))
100427f5  
100427f8  return arg4

100427f9                                                                             90 90 90 90 90 90 90                           .......
10042800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10042860    float* sub_10042860(float* arg1, float* arg2, float arg3)

10042863  float* eax = arg3
1004286b  eax[2]
1004286e  eax[1]
10042871  long double x87_r5 = fconvert.t(*eax)
100428a5  arg3 = fconvert.s((fconvert.t(arg2[2]) * fconvert.t(eax[2])
100428a5      + fconvert.t(arg2[1]) * fconvert.t(eax[1]) + fconvert.t(*arg2) * fconvert.t(*eax))
100428a5      * x87_r5)
100428b6  float var_8 = fconvert.s(x87_r5 * fconvert.t(eax[1]))
100428ba  long double x87_r7_2 = x87_r5 * fconvert.t(eax[2])
100428cb  *arg1 = fconvert.s(fconvert.t(*arg2)
100428cb      - fconvert.t(fconvert.s(x87_r5 * fconvert.t(*eax))) * fconvert.t(arg3))
100428d8  arg1[1] = fconvert.s(fconvert.t(arg2[1]) - fconvert.t(var_8) * fconvert.t(arg3))
100428e2  arg1[2] = fconvert.s(fconvert.t(arg2[2]) - x87_r7_2 * fconvert.t(arg3))
100428e8  return arg1

100428e9                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
10042900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10042920    int80_t sub_10042920(float* arg1, float arg2)

10042929  int32_t i_1 = 0
1004292b  float var_10 = 1f
10042933  int32_t i = 0
10042935  float* edx = arg2
10042935  
1004295b  do
10042939      long double x87_r7_2 = fabs(fconvert.t(*edx))
1004293b      long double x87_r6_1 = fconvert.t(var_10)
10042941      x87_r7_2 - x87_r6_1
10042941      
10042948      if ((((x87_r7_2 < x87_r6_1 ? 1 : 0) << 8
10042948              | (is_unordered.t(x87_r7_2, x87_r6_1) ? 1 : 0) << 0xa
10042948              | (x87_r7_2 == x87_r6_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
1004294a          var_10 = fconvert.s(x87_r7_2)
1004294e          i_1 = i
1004294e      
10042954      i += 1
10042955      edx = &edx[1]
1004295b  while (i s< 3)
1004295b  
1004295d  int32_t var_4 = 0
10042965  int32_t var_8 = 0
1004296d  float var_c = 0f
10042975  (&var_c)[i_1] = 0x3f800000
10042988  j_sub_10042860(arg1, &var_c, arg2)
1004299d  return j_sub_10043290(arg1)

1004299e                                                                                            90 90                                ..
100429a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

100429c0    float* sub_100429c0(float* arg1, float* arg2, float* arg3)

100429e0  *arg3 = fconvert.s(fconvert.t(*arg1) * fconvert.t(*arg2)
100429e0      + fconvert.t(arg1[1]) * fconvert.t(arg2[3])
100429e0      + fconvert.t(arg2[6]) * fconvert.t(arg1[2]))
100429f7  arg3[1] = fconvert.s(fconvert.t(arg1[1]) * fconvert.t(arg2[4])
100429f7      + fconvert.t(arg2[7]) * fconvert.t(arg1[2])
100429f7      + fconvert.t(arg2[1]) * fconvert.t(*arg1))
10042a0f  arg3[2] = fconvert.s(fconvert.t(arg1[1]) * fconvert.t(arg2[5])
10042a0f      + fconvert.t(arg2[8]) * fconvert.t(arg1[2])
10042a0f      + fconvert.t(arg2[2]) * fconvert.t(*arg1))
10042a27  arg3[3] = fconvert.s(fconvert.t(arg1[4]) * fconvert.t(arg2[3])
10042a27      + fconvert.t(arg1[3]) * fconvert.t(*arg2)
10042a27      + fconvert.t(arg1[5]) * fconvert.t(arg2[6]))
10042a40  arg3[4] = fconvert.s(fconvert.t(arg1[5]) * fconvert.t(arg2[7])
10042a40      + fconvert.t(arg1[4]) * fconvert.t(arg2[4])
10042a40      + fconvert.t(arg1[3]) * fconvert.t(arg2[1]))
10042a59  arg3[5] = fconvert.s(fconvert.t(arg1[5]) * fconvert.t(arg2[8])
10042a59      + fconvert.t(arg1[4]) * fconvert.t(arg2[5])
10042a59      + fconvert.t(arg1[3]) * fconvert.t(arg2[2]))
10042a71  arg3[6] = fconvert.s(fconvert.t(arg1[6]) * fconvert.t(*arg2)
10042a71      + fconvert.t(arg2[6]) * fconvert.t(arg1[8])
10042a71      + fconvert.t(arg1[7]) * fconvert.t(arg2[3]))
10042a8a  arg3[7] = fconvert.s(fconvert.t(arg2[7]) * fconvert.t(arg1[8])
10042a8a      + fconvert.t(arg2[4]) * fconvert.t(arg1[7])
10042a8a      + fconvert.t(arg2[1]) * fconvert.t(arg1[6]))
10042aa3  arg3[8] = fconvert.s(fconvert.t(arg2[8]) * fconvert.t(arg1[8])
10042aa3      + fconvert.t(arg2[5]) * fconvert.t(arg1[7])
10042aa3      + fconvert.t(arg2[2]) * fconvert.t(arg1[6]))
10042aa6  return arg1

10042aa7                       90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc         .........................
10042ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10042af0    float* sub_10042af0(float* arg1, float* arg2, float* arg3)

10042b10  *arg3 = fconvert.s(fconvert.t(*arg1) * fconvert.t(*arg2)
10042b10      + fconvert.t(arg1[1]) * fconvert.t(arg2[4])
10042b10      + fconvert.t(arg1[2]) * fconvert.t(arg2[8]))
10042b27  arg3[1] = fconvert.s(fconvert.t(arg1[1]) * fconvert.t(arg2[5])
10042b27      + fconvert.t(arg2[1]) * fconvert.t(*arg1)
10042b27      + fconvert.t(arg2[9]) * fconvert.t(arg1[2]))
10042b3f  arg3[2] = fconvert.s(fconvert.t(arg1[1]) * fconvert.t(arg2[6])
10042b3f      + fconvert.t(arg2[2]) * fconvert.t(*arg1)
10042b3f      + fconvert.t(arg2[0xa]) * fconvert.t(arg1[2]))
10042b5a  arg3[3] = fconvert.s(fconvert.t(arg1[1]) * fconvert.t(arg2[7])
10042b5a      + fconvert.t(arg2[3]) * fconvert.t(*arg1)
10042b5a      + fconvert.t(arg2[0xb]) * fconvert.t(arg1[2]) + fconvert.t(arg1[3]))
10042b72  arg3[4] = fconvert.s(fconvert.t(arg1[6]) * fconvert.t(arg2[8])
10042b72      + fconvert.t(arg1[5]) * fconvert.t(arg2[4])
10042b72      + fconvert.t(arg1[4]) * fconvert.t(*arg2))
10042b8b  arg3[5] = fconvert.s(fconvert.t(arg1[6]) * fconvert.t(arg2[9])
10042b8b      + fconvert.t(arg1[5]) * fconvert.t(arg2[5])
10042b8b      + fconvert.t(arg1[4]) * fconvert.t(arg2[1]))
10042ba4  arg3[6] = fconvert.s(fconvert.t(arg1[6]) * fconvert.t(arg2[0xa])
10042ba4      + fconvert.t(arg1[5]) * fconvert.t(arg2[6])
10042ba4      + fconvert.t(arg1[4]) * fconvert.t(arg2[2]))
10042bc0  arg3[7] = fconvert.s(fconvert.t(arg2[0xb]) * fconvert.t(arg1[6])
10042bc0      + fconvert.t(arg1[5]) * fconvert.t(arg2[7])
10042bc0      + fconvert.t(arg1[4]) * fconvert.t(arg2[3]) + fconvert.t(arg1[7]))
10042bd8  arg3[8] = fconvert.s(fconvert.t(arg1[0xa]) * fconvert.t(arg2[8])
10042bd8      + fconvert.t(arg1[9]) * fconvert.t(arg2[4])
10042bd8      + fconvert.t(*arg2) * fconvert.t(arg1[8]))
10042bf1  arg3[9] = fconvert.s(fconvert.t(arg1[0xa]) * fconvert.t(arg2[9])
10042bf1      + fconvert.t(arg1[9]) * fconvert.t(arg2[5])
10042bf1      + fconvert.t(arg2[1]) * fconvert.t(arg1[8]))
10042c0a  arg3[0xa] = fconvert.s(fconvert.t(arg1[0xa]) * fconvert.t(arg2[0xa])
10042c0a      + fconvert.t(arg1[9]) * fconvert.t(arg2[6])
10042c0a      + fconvert.t(arg2[2]) * fconvert.t(arg1[8]))
10042c26  arg3[0xb] = fconvert.s(fconvert.t(arg1[0xa]) * fconvert.t(arg2[0xb])
10042c26      + fconvert.t(arg1[9]) * fconvert.t(arg2[7])
10042c26      + fconvert.t(arg2[3]) * fconvert.t(arg1[8]) + fconvert.t(arg1[0xb]))
10042c29  return arg1

10042c2a                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................
10042c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10042c80    long double sub_10042c80(float arg1) __pure

10042c91  return fconvert.t(arg1 & 0x7fffffff)

10042c92                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10042ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10042cb0    int32_t sub_10042cb0(float arg1)

10042cb4  data_100631a4 = int.d(fconvert.t(arg1))
10042cbf  return data_100631a4

10042cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10042cd0    long double sub_10042cd0(float arg1, float arg2, float arg3) __pure

10042cd0  long double x87_r7 = fconvert.t(arg2)
10042cd6  long double x87_r6_1 = x87_r7 - fconvert.t(arg1)
10042cda  long double temp0 = fconvert.t(180f)
10042cda  x87_r6_1 - temp0
10042cda  
10042ce5  if ((((x87_r6_1 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_1, temp0) ? 1 : 0) << 0xa
10042ce5          | (x87_r6_1 == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
10042ce7      x87_r7 = x87_r7 - fconvert.t(360f)
10042ce7  
10042cef  long double x87_r6_3 = x87_r7 - fconvert.t(arg1)
10042cf3  long double temp1 = fconvert.t(-180f)
10042cf3  x87_r6_3 - temp1
10042cf3  
10042cfe  if ((((x87_r6_3 < temp1 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_3, temp1) ? 1 : 0) << 0xa
10042cfe          | (x87_r6_3 == temp1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10042d00      x87_r7 = x87_r7 + fconvert.t(360f)
10042d00  
10042d12  return (x87_r7 - fconvert.t(arg1)) * fconvert.t(arg3) + fconvert.t(arg1)

10042d13                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
10042d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10042d40    long double sub_10042d40(float arg1)

10042d62  int16_t x87control
10042d62  return float.t(zx.d(__ftol(x87control, 
10042d62      fconvert.t(arg1) * fconvert.t(182.04444444444445)))) * fconvert.t(0.0054931640625)

10042d63           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

10042d80    int32_t sub_10042d80(float* arg1, int32_t arg2, float* arg3)

10042d83  float* ecx = arg1
10042d9d  void* ebp_1 = arg3 - ecx
10042d9f  float var_c
10042d9f  void* edx = &var_c - ecx
10042da1  int32_t* esi_1 = arg2 - ecx
10042da3  float var_18
10042da3  void* edi = &var_18 - ecx
10042da5  arg1 = 3
10042ddf  void* eax
10042ddf  bool cond:1_1
10042ddf  
10042ddf  do
10042dad      long double x87_r7_1 = fconvert.t(*(ecx + ebp_1))
10042db0      long double temp0_1 = fconvert.t(0f)
10042db0      x87_r7_1 - temp0_1
10042db6      eax.w = (x87_r7_1 < temp0_1 ? 1 : 0) << 8
10042db6          | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
10042db6          | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe
10042dbb      float eax_1 = *ecx
10042dbb      
10042dbd      if ((eax:1.b & 1) == 0)
10042dca          *(edx + ecx) = eax_1
10042dd0          *(edi + ecx) = *(esi_1 + ecx)
10042dbd      else
10042dbf          *(edi + ecx) = eax_1
10042dc5          *(edx + ecx) = *(esi_1 + ecx)
10042dc5      
10042dd7      ecx = &ecx[1]
10042dda      cond:1_1 = arg1 != 1
10042ddb      arg1 -= 1
10042ddf  while (cond:1_1)
10042df0  int32_t result = 0
10042dfe  float var_8
10042dfe  float var_4
10042dfe  long double x87_r7_6 = fconvert.t(var_4) * fconvert.t(arg3[2])
10042dfe      + fconvert.t(var_8) * fconvert.t(arg3[1]) + fconvert.t(var_c) * fconvert.t(*arg3)
10042dfe      - fconvert.t(arg3[3])
10042e19  float var_14
10042e19  float var_10
10042e19  long double x87_r6_8 = fconvert.t(var_10) * fconvert.t(arg3[2])
10042e19      + fconvert.t(var_14) * fconvert.t(arg3[1]) + fconvert.t(var_18) * fconvert.t(*arg3)
10042e19      - fconvert.t(arg3[3])
10042e1d  long double temp2 = fconvert.t(0f)
10042e1d  x87_r6_8 - temp2
10042e23  eax.w = (x87_r6_8 < temp2 ? 1 : 0) << 8 | (is_unordered.t(x87_r6_8, temp2) ? 1 : 0) << 0xa
10042e23      | (x87_r6_8 == temp2 ? 1 : 0) << 0xe | 0x3800
10042e23  
10042e28  if ((eax:1.b & 1) == 0)
10042e2a      result = 1
10042e2a  
10042e2f  long double temp3 = fconvert.t(0f)
10042e2f  x87_r7_6 - temp3
10042e35  eax.w = (x87_r7_6 < temp3 ? 1 : 0) << 8 | (is_unordered.t(x87_r7_6, temp3) ? 1 : 0) << 0xa
10042e35      | (x87_r7_6 == temp3 ? 1 : 0) << 0xe
10042e35  
10042e3a  if ((eax:1.b & 1) == 0)
10042e44      return result
10042e44  
10042e3c  return result | 2

10042e45                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
10042e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10042e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10042e90    int32_t sub_10042e90()

10042e98  if (data_10062980 != 1)
10042e9a      data_10062980 = 1
10042ea4      __builtin_memcpy(dest: &data_100631ac, 
10042ea4          src: "\x1d\x2f\x04\x10\x58\x2f\x04\x10\x93\x2f\x04\x10\xce\x2f\x04\x10\x09\x30\x04\x10\x44\x30\x04\x10\x7c\x30\x04\x10\xb4\x30\x04\x10", 
10042ea4          n: 0x20)
10042ea4  
10042ef4  void arg_c
10042ef4  int32_t ds
10042ef4  float* edx = *(ds + &arg_c)
10042ef9  void arg_4
10042ef9  *(ds + &arg_4)
10042f00  void arg_8
10042f00  *(ds + &arg_8)
10042f05  int32_t eax
10042f05  eax.b = *(edx + 0x11)
10042f05  
10042f0b  if (eax.b s>= 8)
1004310d      breakpoint
1004310d  
10042f11  *edx
10042f16  jump((&data_100631ac)[eax])

10042f1d                                                                                         3e d8 0b                               >..
10042f20  3e d9 42 04 d9 ca 3e d8 09 d9 ca d9 c0 3e d8 4b 04 3e d9 42 08 d9 ca 3e d8 49 04 d9 ca d9 c0 3e  >.B...>......>.K.>.B...>.I.....>
10042f40  d8 4b 08 d9 cd de c3 3e d8 49 08 d9 c9 de c3 d9 cb de c2 e9 92 01 00 00 3e d8 09 3e d9 42 04 d9  .K.....>.I..............>..>.B..
10042f60  ca 3e d8 0b d9 ca d9 c0 3e d8 4b 04 3e d9 42 08 d9 ca 3e d8 49 04 d9 ca d9 c0 3e d8 4b 08 d9 cd  .>......>.K.>.B...>.I.....>.K...
10042f80  de c3 3e d8 49 08 d9 c9 de c3 d9 cb de c2 e9 57 01 00 00 3e d8 0b 3e d9 42 04 d9 ca 3e d8 09 d9  ..>.I..........W...>..>.B...>...
10042fa0  ca d9 c0 3e d8 49 04 3e d9 42 08 d9 ca 3e d8 4b 04 d9 ca d9 c0 3e d8 4b 08 d9 cd de c3 3e d8 49  ...>.I.>.B...>.K.....>.K.....>.I
10042fc0  08 d9 c9 de c3 d9 cb de c2 e9 1c 01 00 00 3e d8 09 3e d9 42 04 d9 ca 3e d8 0b d9 ca d9 c0 3e d8  ..............>..>.B...>......>.
10042fe0  49 04 3e d9 42 08 d9 ca 3e d8 4b 04 d9 ca d9 c0 3e d8 4b 08 d9 cd de c3 3e d8 49 08 d9 c9 de c3  I.>.B...>.K.....>.K.....>.I.....
10043000  d9 cb de c2 e9 e1 00 00 00 3e d8 0b 3e d9 42 04 d9 ca 3e d8 09 d9 ca d9 c0 3e d8 4b 04 3e d9 42  .........>..>.B...>......>.K.>.B
10043020  08 d9 ca 3e d8 49 04 d9 ca d9 c0 3e d8 49 08 d9 cd de c3 3e d8 4b 08 d9 c9 de c3 d9 cb de c2 e9  ...>.I.....>.I.....>.K..........
10043040  a6 00 00 00 3e d8 09 3e d9 42 04 d9 ca 3e d8 0b d9 ca d9 c0 3e d8 4b 04 3e d9 42 08 d9 ca 3e d8  ....>..>.B...>......>.K.>.B...>.
10043060  49 04 d9 ca d9 c0 3e d8 49 08 d9 cd de c3 3e d8 4b 08 d9 c9 de c3 d9 cb de c2 eb 6e 3e d8 0b 3e  I.....>.I.....>.K..........n>..>
10043080  d9 42 04 d9 ca 3e d8 09 d9 ca d9 c0 3e d8 49 04 3e d9 42 08 d9 ca 3e d8 4b 04 d9 ca d9 c0 3e d8  .B...>......>.I.>.B...>.K.....>.
100430a0  49 08 d9 cd de c3 3e d8 4b 08 d9 c9 de c3 d9 cb de c2 eb 36 3e d8 09 3e d9 42 04 d9 ca 3e d8 0b  I.....>.K..........6>..>.B...>..
100430c0  d9 ca d9 c0 3e d8 49 04 3e d9 42 08 d9 ca 3e d8 4b 04 d9 ca d9 c0 3e d8 49 08 d9 cd de c3 3e d8  ....>.I.>.B...>.K.....>.I.....>.
100430e0  4b 08 d9 c9 de c3 d9 cb de c2 de c2 3e d8 5a 0c 33 c9 df e0 3e d8 5a 0c 80 e4 01 80 f4 01 02 cc  K...........>.Z.3...>.Z.........
10043100  df e0 80 e4 01 02 e4 02 cc 5b 8b c1 c3                                                           .........[...
1004310e                                            cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10043120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10043140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10043160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10043180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100431a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100431b0    int32_t* sub_100431b0(int32_t* arg1, int32_t* arg2)

100431b9  arg1[2] = 0x47c34f80
100431bc  arg1[1] = 0x47c34f80
100431bf  *arg1 = 0x47c34f80
100431ca  arg2[2] = 0xc7c34f80
100431cd  arg2[1] = 0xc7c34f80
100431d0  *arg2 = 0xc7c34f80
100431d2  return arg2

100431d3                                                           90 90 90 90 90 90 90 90 90 90 90 90 90                     .............
100431e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100431f0    void sub_100431f0(int32_t arg1, float* arg2, int32_t arg3)

100431f0  float* ecx = arg2
100431fe  float* esi_1 = arg1 - ecx
10043200  float* edx_1 = arg3 - ecx
10043202  int32_t i_1 = 3
1004322a  int32_t i
1004322a  
1004322a  do
10043207      long double x87_r7_1 = fconvert.t(*(esi_1 + ecx))
1004320a      long double temp0_1 = fconvert.t(*ecx)
1004320a      x87_r7_1 - temp0_1
1004320a      
10043211      if ((((x87_r7_1 < temp0_1 ? 1 : 0) << 8
10043211              | (is_unordered.t(x87_r7_1, temp0_1) ? 1 : 0) << 0xa
10043211              | (x87_r7_1 == temp0_1 ? 1 : 0) << 0xe | 0x3800):1.b & 1) != 0)
10043213          *ecx = fconvert.s(x87_r7_1)
10043213      
10043215      long double temp1_1 = fconvert.t(*(edx_1 + ecx))
10043215      x87_r7_1 - temp1_1
10043215      
1004321d      if ((((x87_r7_1 < temp1_1 ? 1 : 0) << 8
1004321d              | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
1004321d              | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe | 0x3800):1.b & 0x41) == 0)
1004321f          *(edx_1 + ecx) = fconvert.s(x87_r7_1)
1004321f      
10043226      ecx = &ecx[1]
10043229      i = i_1
10043229      i_1 -= 1
1004322a  while (i != 1)

1004322f                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................

10043240    int32_t sub_10043240(float* arg1, float* arg2)

10043248  long double x87_r7 = fconvert.t(*arg1)
1004324a  long double temp0 = fconvert.t(*arg2)
1004324a  x87_r7 - temp0
1004324a  
10043251  if ((((x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10043251          | (x87_r7 == temp0 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10043253      long double x87_r7_1 = fconvert.t(arg1[1])
10043256      long double temp1_1 = fconvert.t(arg2[1])
10043256      x87_r7_1 - temp1_1
10043256      
1004325e      if ((((x87_r7_1 < temp1_1 ? 1 : 0) << 8
1004325e              | (is_unordered.t(x87_r7_1, temp1_1) ? 1 : 0) << 0xa
1004325e              | (x87_r7_1 == temp1_1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10043260          long double x87_r7_2 = fconvert.t(arg1[2])
10043263          long double temp2_1 = fconvert.t(arg2[2])
10043263          x87_r7_2 - temp2_1
10043263          
1004326b          if ((((x87_r7_2 < temp2_1 ? 1 : 0) << 8
1004326b                  | (is_unordered.t(x87_r7_2, temp2_1) ? 1 : 0) << 0xa
1004326b                  | (x87_r7_2 == temp2_1 ? 1 : 0) << 0xe):1.b & 0x40) != 0)
10043272              return 1
10043272  
10043275  return 0

10043276                                                                    90 90 90 90 90 90 90 90 90 90                        ..........
10043280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043290    long double sub_10043290(float* arg1)

10043294  arg1[2]
10043297  arg1[1]
1004329a  long double result = fconvert.t(*arg1)
100432b4  long double temp0 = fconvert.t(0f)
100432b4  result - temp0
100432b4  
100432bf  if ((((result < temp0 ? 1 : 0) << 8 | (is_unordered.t(result, temp0) ? 1 : 0) << 0xa
100432bf          | (result == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x40) == 0)
100432c7      long double x87_r6_3 = fconvert.t(1f) / result
100432cd      *arg1 = fconvert.s(x87_r6_3 * fconvert.t(*arg1))
100432d4      arg1[1] = fconvert.s(x87_r6_3 * fconvert.t(arg1[1]))
100432da      arg1[2] = fconvert.s(x87_r6_3 * fconvert.t(arg1[2]))
100432da  
100432dd  return result

100432de                                                                                            90 90                                ..
100432e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043300    long double sub_10043300(float* arg1, float* arg2)

10043304  arg1[2]
10043307  arg1[1]
1004330a  long double result = fconvert.t(*arg1)
10043324  long double temp0 = fconvert.t(0f)
10043324  result - temp0
10043324  
1004332f  if ((((result < temp0 ? 1 : 0) << 8 | (is_unordered.t(result, temp0) ? 1 : 0) << 0xa
1004332f          | (result == temp0 ? 1 : 0) << 0xe | 0x3800):1.b & 0x40) == 0)
10043337      long double x87_r6_3 = fconvert.t(1f) / result
10043341      *arg2 = fconvert.s(x87_r6_3 * fconvert.t(*arg1))
10043348      arg2[1] = fconvert.s(x87_r6_3 * fconvert.t(arg1[1]))
1004334e      arg2[2] = fconvert.s(x87_r6_3 * fconvert.t(arg1[2]))
1004334e  
10043351  return result

10043352                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10043360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043380    float* sub_10043380(float* arg1, float arg2, float* arg3, float* arg4)

10043394  *arg4 = fconvert.s(fconvert.t(arg2) * fconvert.t(*arg3) + fconvert.t(*arg1))
100433a0  arg4[1] = fconvert.s(fconvert.t(arg2) * fconvert.t(arg3[1]) + fconvert.t(arg1[1]))
100433ad  arg4[2] = fconvert.s(fconvert.t(arg2) * fconvert.t(arg3[2]) + fconvert.t(arg1[2]))
100433b0  return arg3

100433b1                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
100433c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100433d0    long double sub_100433d0(float* arg1, float* arg2)

100433ec  return fconvert.t(arg1[2]) * fconvert.t(arg2[2])
100433ec      + fconvert.t(arg1[1]) * fconvert.t(arg2[1]) + fconvert.t(*arg1) * fconvert.t(*arg2)

100433ed                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................

10043400    float* sub_10043400(float* arg1, float* arg2, float* arg3)

10043410  *arg3 = fconvert.s(fconvert.t(*arg1) - fconvert.t(*arg2))
10043418  arg3[1] = fconvert.s(fconvert.t(arg1[1]) - fconvert.t(arg2[1]))
10043421  arg3[2] = fconvert.s(fconvert.t(arg1[2]) - fconvert.t(arg2[2]))
10043424  return arg1

10043425                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10043440    float* sub_10043440(float* arg1, float* arg2, float* arg3)

10043450  *arg3 = fconvert.s(fconvert.t(*arg1) + fconvert.t(*arg2))
10043458  arg3[1] = fconvert.s(fconvert.t(arg1[1]) + fconvert.t(arg2[1]))
10043461  arg3[2] = fconvert.s(fconvert.t(arg1[2]) + fconvert.t(arg2[2]))
10043464  return arg1

10043465                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................

10043480    int32_t sub_10043480(int32_t* arg1, int32_t* arg2)

1004348a  *arg2 = *arg1
1004348f  arg2[1] = arg1[1]
10043492  int32_t result = arg1[2]
10043495  arg2[2] = result
10043498  return result

10043499                                                                             90 90 90 90 90 90 90                           .......
100434a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100434b0    float* sub_100434b0(float* arg1, float* arg2, float* arg3)

100434ca  *arg3 = fconvert.s(fconvert.t(arg2[2]) * fconvert.t(arg1[1])
100434ca      - fconvert.t(arg1[2]) * fconvert.t(arg2[1]))
100434d8  arg3[1] = fconvert.s(fconvert.t(arg1[2]) * fconvert.t(*arg2)
100434d8      - fconvert.t(*arg1) * fconvert.t(arg2[2]))
100434e7  arg3[2] = fconvert.s(fconvert.t(*arg1) * fconvert.t(arg2[1])
100434e7      - fconvert.t(*arg2) * fconvert.t(arg1[1]))
100434ea  return arg1

100434eb                                   90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc             .....................

10043500    long double sub_10043500(float* arg1)

10043506  float* eax = arg1
1004350a  int32_t i_1 = 3
1004351d  long double x87_r6_1
1004351d  int32_t i
1004351d  
1004351d  do
1004350f      x87_r6_1 = fconvert.t(*eax)
10043515      eax = &eax[1]
10043518      i = i_1
10043518      i_1 -= 1
1004351d  while (i != 1)
10043521  return sqrt(x87_r6_1)

10043522        90 90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc    ..............................

10043540    float* sub_10043540(float* arg1)

10043548  *arg1 = fconvert.s(fneg(fconvert.t(*arg1)))
1004354f  arg1[1] = fconvert.s(fneg(fconvert.t(arg1[1])))
10043557  arg1[2] = fconvert.s(fneg(fconvert.t(arg1[2])))
1004355a  return arg1

1004355b                                                                                   90 90 90 90 90                             .....
10043560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043570    float* sub_10043570(float* arg1, float arg2, float* arg3)

1004357e  *arg3 = fconvert.s(fconvert.t(arg2) * fconvert.t(*arg1))
10043587  arg3[1] = fconvert.s(fconvert.t(arg2) * fconvert.t(arg1[1]))
10043591  arg3[2] = fconvert.s(fconvert.t(arg2) * fconvert.t(arg1[2]))
10043594  return arg1

10043595                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
100435a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100435b0    int32_t sub_100435b0(int32_t arg1) __pure

100435b4  int32_t result = 0
100435b4  
100435b8  for (int32_t i = arg1 s>> 1; i != 0; i s>>= 1)
100435ba      result += 1
100435ba  
100435bf  return result

100435c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100435d0    void* sub_100435d0(char* arg1)

100435d0  char* result_1 = arg1
100435d4  void* result = result_1
100435d6  char i = *result_1
100435d6  
100435da  while (i != 0)
100435df      if (i == 0x2f)
100435e1          result = &result_1[1]
100435e1      
100435e4      i = result_1[1]
100435e7      result_1 = &result_1[1]
100435e7  
100435ec  return result

100435ed                                         90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc               ...................

10043600    char* sub_10043600(char* arg1, char* arg2)

10043600  char* edx = arg1
10043604  char i = *edx
10043604  
10043608  if (i == 0)
10043625      *arg2 = 0
10043628      return arg2
10043628  
1004360a  char* ecx = arg2
1004360a  
10043610  while (i != 0x2e)
10043612      *ecx = i
10043614      i = edx[1]
10043617      ecx = &ecx[1]
10043618      edx = &edx[1]
10043618      
1004361b      if (i == 0)
1004361b          break
1004361b  
1004361d  *ecx = 0
10043620  return i

10043629                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................

10043640    int32_t sub_10043640(char* arg1)

10043640  char* eax = arg1
10043644  char i = *eax
10043644  
10043648  if (i != 0)
1004364d      while (i != 0x2e)
1004364f          i = eax[1]
10043652          eax = &eax[1]
10043652          
10043655          if (i == 0)
10043655              break
10043655  
1004365a  if (*eax == 0)
10043661      return &data_1006294c
10043661  
10043662  void* eax_2 = &eax[1]
10043676  void* i_1
10043676  
10043676  for (i_1 = nullptr; i_1 s< 7; )
10043665      char edx = *eax_2
10043665      
10043669      if (edx == 0)
10043669          break
10043669      
1004366b      *(i_1 + 0x10062d90) = edx
10043671      i_1 += 1
10043672      eax_2 += 1
10043672  
10043678  *(i_1 + 0x10062d90) = 0
10043684  return 0x10062d90

10043685                 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc       ...........................
100436a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100436b0    char* sub_100436b0(int32_t arg1, char* arg2)

100436b5  int32_t edi = arg1
100436b7  int32_t i = 0xffffffff
100436b7  
100436bc  while (i != 0)
100436bc      bool cond:0_1 = 0 != *edi
100436bc      edi += 1
100436bc      i -= 1
100436bc      
100436bc      if (not(cond:0_1))
100436bc          break
100436bc  
100436c1  char* eax = not.d(i) - 1 + arg1 - 1
100436c1  
100436c7  if (eax != arg1)
100436cc      while (*eax != 0x2e)
100436ce          eax -= 1
100436ce          
100436d1          if (eax == arg1)
100436d1              break
100436d1  
100436d5  char* ecx_2 = eax
100436d5  
100436d7  if (eax != arg1)
100436dc      while (*ecx_2 != 0x2f)
100436de          ecx_2 -= 1
100436de          
100436e1          if (ecx_2 == arg1)
100436e1              break
100436e1  
100436ea  if (eax - ecx_2 s< 2)
100436f1      *arg2 = 0
100436f4      return arg2
100436f4  
100436fd  void* esi_1 = eax - 1 - ecx_2
10043703  char* eax_3 = StrCopyFixed(arg2, &ecx_2[1], esi_1)
1004370b  *(esi_1 + arg2) = 0
10043711  return eax_3

10043712                                                        90 90 90 90 90 90 90 90 90 90 90 90 90 90                    ..............
10043720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043740    char* sub_10043740(char* arg1, char* arg2)

10043746  char* edi = arg1
10043748  int32_t i = 0xffffffff
10043748  
1004374d  while (i != 0)
1004374d      bool cond:0_1 = 0 != *edi
1004374d      edi = &edi[1]
1004374d      i -= 1
1004374d      
1004374d      if (not(cond:0_1))
1004374d          break
1004374d  
10043752  char* eax = &arg1[not.d(i) - 2]
10043752  
10043758  if (eax != arg1)
1004375d      while (*eax != 0x2f)
1004375f          eax -= 1
1004375f          
10043762          if (eax == arg1)
10043762              break
10043762  
1004376a  void* esi_1 = eax - arg1
1004376f  char* result = StrCopyFixed(arg2, arg1, esi_1)
10043777  *(esi_1 + arg2) = 0
1004377d  return result

1004377e                                                                                            90 90                                ..
10043780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043790    void* sub_10043790(int32_t arg1, int32_t arg2)

10043795  int32_t edi = arg1
10043797  int32_t i = 0xffffffff
10043797  
1004379c  while (i != 0)
1004379c      bool cond:0_1 = 0 != *edi
1004379c      edi += 1
1004379c      i -= 1
1004379c      
1004379c      if (not(cond:0_1))
1004379c          break
1004379c  
100437a1  void* result = not.d(i) - 1 + arg1 - 1
100437a5  int32_t ecx_1
100437a5  ecx_1.b = *(not.d(i) - 1 + arg1 - 1)
100437a5  
100437ac  if (ecx_1.b != 0x2f)
100437b0      while (result != arg1)
100437b5          if (ecx_1.b == 0x2e)
100437ee              return result
100437ee          
100437b7          ecx_1.b = *(result - 1)
100437ba          result -= 1
100437ba          
100437be          if (ecx_1.b == 0x2f)
100437be              break
100437be  
100437c0  int32_t edi_1 = arg2
100437c4  int32_t i_1 = 0xffffffff
100437c4  
100437ca  while (i_1 != 0)
100437ca      bool cond:1_1 = 0 != *edi_1
100437ca      edi_1 += 1
100437ca      i_1 -= 1
100437ca      
100437ca      if (not(cond:1_1))
100437ca          break
100437ca  
100437cc  int32_t ecx_2 = not.d(i_1)
100437d5  int32_t edi_3 = arg1
100437d7  int32_t i_2 = 0xffffffff
100437d7  
100437da  while (i_2 != 0)
100437da      bool cond:2_1 = 0 != *edi_3
100437da      edi_3 += 1
100437da      i_2 -= 1
100437da      
100437da      if (not(cond:2_1))
100437da          break
100437da  
100437e2  int32_t esi_2
100437e2  int32_t edi_5
100437e2  edi_5, esi_2 = __builtin_memcpy(dest: edi_3 - 1, src: edi_1 - ecx_2, n: ecx_2 u>> 2 << 2)
100437e9  __builtin_memcpy(dest: edi_5, src: esi_2, n: ecx_2 & 3)
100437ee  return nullptr

100437ef                                               90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                 .................
10043800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043810    int32_t sub_10043810(int32_t arg1)

1004381e  return data_100637dc(arg1)

1004381f                                                                                               90                                 .
10043820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043830    int32_t sub_10043830(int32_t arg1)

1004383e  return data_100637d8(arg1)

1004383f                                                                                               90                                 .
10043840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043850    int32_t sub_10043850(int32_t arg1)

1004385e  return data_100637e0(arg1)

1004385f                                                                                               90                                 .
10043860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043870    int32_t sub_10043870(int32_t arg1)

1004387e  return data_100637d4(arg1)

1004387f                                                                                               90                                 .
10043880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043890    int32_t sub_10043890(int32_t arg1)

1004389c  return data_100637d0(arg1)

1004389d                                                                                         90 90 90                               ...
100438a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100438b0    int32_t sub_100438b0(int32_t arg1)

100438bc  return data_100637cc(arg1)

100438bd                                                                                         90 90 90                               ...
100438c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100438d0    int32_t sub_100438d0(int32_t arg1) __pure

100438e9  return zx.d((arg1 s>> 8).b) + ((arg1 & 0xff) << 8)

100438ea                                90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc            ......................

10043900    int32_t sub_10043900(int16_t arg1) __pure

10043900  int32_t result
10043900  result.w = arg1
10043905  return result

10043906                    90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..........................

10043920    uint32_t sub_10043920(int32_t arg1) __pure

10043959  return ((((zx.d((arg1 s>> 8).b) + (zx.d(arg1.b) << 8)) << 8) + zx.d((arg1 s>> 0x10).b))
10043959      << 8) + zx.d((arg1 s>> 0x18).b)

1004395a                                                                                90 90 90 90 90 90                            ......
10043960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043970    int32_t sub_10043970(int32_t arg1) __pure

10043974  return arg1

10043975                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
10043980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043990    long double sub_10043990(float arg1) __pure

10043990  int32_t ecx
10043990  int32_t var_4_1 = ecx
10043991  float eax = arg1
10043999  arg1:2.b = eax:1.b
1004399d  ecx.b = eax:3.b
100439a5  arg1.b = ecx.b
100439a9  arg1:1.b = eax:2.b
100439ad  arg1:3.b = eax.b
100439b6  return fconvert.t(arg1)

100439b7                                                                       90 90 90 90 90 90 90 90 90                         .........
100439c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100439d0    long double sub_100439d0(float arg1) __pure

100439d4  return fconvert.t(arg1)

100439d5                                                                 90 90 90 90 90 90 90 90 90 90 90                       ...........
100439e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

100439f0    int32_t sub_100439f0()

100439f0  int32_t ecx
100439f0  int32_t var_4 = ecx
100439f8  var_4:2.b = 1
100439fc  var_4:3.b = 0
10043a07  data_10063884 = 0
10043a0d  data_100637dc = j_sub_100438d0
10043a17  data_100637d8 = j_sub_10043900
10043a21  data_100637e0 = j_sub_10043920
10043a2b  data_100637d4 = j_sub_10043970
10043a35  data_100637d0 = j_sub_10043990
10043a3f  data_100637cc = j_sub_100439d0
10043a4a  return 1

10043a8e                                            90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                ..................
10043aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043ac0    int32_t sub_10043ac0(void* arg1)

10043acf  void arg_8
10043acf  sub_10044c05(&data_10062990, arg1, &arg_8)
10043adc  return &data_10062990

10043add                                                                                         90 90 90                               ...
10043ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043af0    int32_t sub_10043af0(int32_t* arg1)

10043af5  int32_t edx = 0
10043af7  char* eax = *arg1
10043af9  data_10063800 = 0
10043af9  
10043b01  if (eax == 0)
10043b03      label_10043b03:
10043b03      *arg1 = 0
10043b0f      return &data_1006294c
10043b0f  
10043b10  while (true)
10043b10      int32_t i = sx.d(*eax)
10043b10      
10043b16      while (i s<= 0x20)
10043b1a          if (i == 0)
10043b1a              goto label_10043b03
10043b1a          
10043b1c          i = sx.d(eax[1])
10043b20          eax = &eax[1]
10043b20      
10043b29      if (i != 0x2f)
10043b48          if (i != 0x22)
10043b48              goto label_10043b69
10043b48          
10043b4a          eax = &eax[1]
10043b4a          
10043b4b          while (true)
10043b4b              int32_t ecx_1 = sx.d(*eax)
10043b4e              eax = &eax[1]
10043b4e              
10043b52              if (ecx_1 == 0x22)
10043b52                  break
10043b52              
10043b56              if (ecx_1 == 0)
10043b56                  break
10043b56              
10043b5e              if (edx s< 0x80)
10043b60                  (&data_10063800)[edx] = ecx_1.b
10043b66                  edx += 1
10043b66          
10043b48          goto label_10043b8c
10043b48      
10043b2e      if (eax[1] != i.b)
10043b71          label_10043b71:
10043b71          (&data_10063800)[edx] = i.b
10043b77          edx += 1
10043b77          
10043b78          while (true)
10043b78              i = sx.d(eax[1])
10043b7c              eax = &eax[1]
10043b7c              
10043b80              if (i s<= 0x20)
10043b88                  if (edx == 0x80)
10043b8a                      edx = 0
10043b8a                  
10043b88                  break
10043b88              
10043b69              label_10043b69:
10043b69              
10043b6f              if (edx s< 0x80)
10043b6f                  goto label_10043b71
10043b6f          
10043b8c          label_10043b8c:
10043b8c          (&data_10063800)[edx] = 0
10043b93          *arg1 = eax
10043b9b          return &data_10063800
10043b9b      
10043b30      i.b = *eax
10043b30      
10043b34      if (i.b != 0)
10043b39          while (i.b != 0xa)
10043b3b              i.b = eax[1]
10043b3e              eax = &eax[1]
10043b3e              
10043b41              if (i.b == 0)
10043b41                  break

10043b9c                                                                                      90 90 90 90                              ....
10043ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10043bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043bd0    char* sub_10043bd0(int32_t arg1, int32_t arg2)

10043bd4  char* i = arg2 - 1
10043bd4  
10043bd7  while (i s> 0)
10043be6      int32_t edx_1
10043be6      edx_1.b = i[arg1]
10043be9      i -= 0x1000
10043bf2      data_10063880 += edx_1
10043bf2  
10043bfb  return i

10043bfc                                                                                      90 90 90 90                              ....
10043c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043c10    int32_t sub_10043c10(char* arg1, char* arg2)

10043c22  int32_t edx
10043c22  return sub_10045cb0(arg2, edx, arg1, arg1, arg2)

10043c23           90 90 90 90 90 90 90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     .............................

10043c40    int32_t sub_10043c40(char* arg1, char* arg2, int32_t arg3)

10043c4a  int32_t eax = sx.d(*arg1)
10043c4d  int32_t ecx = sx.d(*arg2)
10043c55  void* edx = &arg1[1]
10043c56  void* esi_1 = &arg2[1]
10043c59  int32_t i_1 = arg3 - 1
10043c59  
10043c5c  if (arg3 != 0)
10043c91      int32_t i
10043c91      
10043c91      do
10043c60          if (eax != ecx)
10043c6a              if (eax s>= 0x61 && eax s<= 0x7a)
10043c6c                  eax -= 0x20
10043c6c              
10043c77              if (ecx s>= 0x61 && ecx s<= 0x7a)
10043c79                  ecx -= 0x20
10043c79              
10043c7e              if (eax != ecx)
10043c9f                  return 0xffffffff
10043c9f          
10043c82          if (eax == 0)
10043c82              break
10043c82          
10043c84          eax = sx.d(*edx)
10043c87          ecx = sx.d(*esi_1)
10043c8a          edx += 1
10043c8b          esi_1 += 1
10043c8c          i = i_1
10043c8e          i_1 -= 1
10043c91      while (i != 0)
10043c91  
10043c98  return 0

10043ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043cc0    int32_t sub_10043cc0(char* arg1, char* arg2)

10043cd7  return j_sub_10043c40(arg1, arg2, 0x1869f)

10043cd8                                                                          90 90 90 90 90 90 90 90                          ........
10043ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                                                  ................

10043cf0    char* __stdcall sub_10043cf0(char* arg1, int32_t arg2, void* arg3)

10043cf5  sub_10044310(0x10000)
10043d10  void arg_10010
10043d10  int32_t eax = sub_10044c05(&__return_addr, arg3, &arg_10010)
10043d10  
10043d21  if (eax s>= arg2)
10043d23      int32_t var_8_1 = arg2
10043d24      int32_t var_c_1 = eax
10043d25      char* var_10_1 = "Com_sprintf: overflow of %i in %…"
10043d2a      j_sub_10042410()
10043d2a  
10043d50  return StrCopyFixed(arg1, &__return_addr, arg2 - 1)

10043d51                                                     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90                   ...............
10043d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043d80    int32_t sub_10043d80(char* arg1, void* arg2)

10043d86  char* ecx = arg1
10043d8a  int32_t edx = data_10062d98 ^ 1
10043d93  data_10062d98 = edx
10043d99  int32_t eax
10043d99  eax.b = *ecx
10043d99  
10043d9d  if (eax.b == 0x5c)
10043d9f      ecx = &ecx[1]
10043d9f  
10043da0  int32_t ebx
10043da0  int32_t var_204 = ebx
10043da0  
10043dab  while (true)
10043dab      eax.b = *ecx
10043dad      void var_200
10043dad      void* esi_1 = &var_200
10043dad      
10043db3      while (eax.b != 0x5c)
10043db7          if (eax.b == 0)
10043e5d              return &data_1006294c
10043e5d          
10043dbd          *esi_1 = eax.b
10043dbf          eax.b = ecx[1]
10043dc2          esi_1 += 1
10043dc3          ecx = &ecx[1]
10043dc3      
10043dc8      eax.b = ecx[1]
10043dcb      void* ecx_1 = &ecx[1]
10043dcf      char* edx_2 = (edx << 9) + 0x10062d9c
10043dd7      *esi_1 = 0
10043dd7      
10043dda      if (eax.b != 0x5c)
10043dde          while (eax.b != 0)
10043de0              *edx_2 = eax.b
10043de2              eax.b = *(ecx_1 + 1)
10043de5              edx_2 = &edx_2[1]
10043de6              ecx_1 += 1
10043de6              
10043de9              if (eax.b == 0x5c)
10043de9                  break
10043de9      
10043deb      *edx_2 = 0
10043dee      void* edi_1 = &var_200
10043df2      void* esi_2 = arg2
10043df2      
10043df4      while (true)
10043df4          edx_2.b = *esi_2
10043df6          ebx.b = *edi_1
10043df8          eax.b = edx_2.b
10043dfa          bool c_1 = edx_2.b u< ebx.b
10043dfa          
10043dfc          if (edx_2.b == ebx.b)
10043e00              if (eax.b == 0)
10043e18                  eax = 0
10043e1a                  break
10043e1a              
10043e02              edx_2.b = *(esi_2 + 1)
10043e05              ebx.b = *(edi_1 + 1)
10043e08              eax.b = edx_2.b
10043e0a              c_1 = edx_2.b u< ebx.b
10043e0a              
10043e0c              if (edx_2.b == ebx.b)
10043e0e                  esi_2 += 2
10043e11                  edi_1 += 2
10043e11                  
10043e16                  if (eax.b != 0)
10043e16                      continue
10043e16                  
10043e18                  eax = 0
10043e1a                  break
10043e1a          
10043e1c          bool c_2 = unimplemented  {sbb eax, eax}
10043e1e          eax = sbb.d(sbb.d(eax, eax, c_1), 0xffffffff, c_2)
10043e1e          break
10043e1e      
10043e23      if (eax == 0)
10043e23          break
10043e23      
10043e28      if (*ecx_1 == 0)
10043e5d          return &data_1006294c
10043e5d      
10043e2a      edx = data_10062d98
10043e30      ecx = ecx_1 + 1
10043e30  
10043e4d  return (data_10062d98 << 9) + 0x10062d9c

10043e5e                                                                                            90 90                                ..
10043e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10043e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043ea0    char* sub_10043ea0(void* arg1, char* arg2)

10043eb7  char* result = sub_10045630(arg2, &data_1005f6c0)
10043eb7  
10043ec1  if (result == 0)
10043ec7      void* edi_1 = arg1
10043ec7      
10043ece      while (true)
10043ece          result.b = *edi_1
10043ed0          void* ebp_1 = edi_1
10043ed0          
10043ed4          if (result.b == 0x5c)
10043ed6              edi_1 += 1
10043ed6          
10043ed7          result.b = *edi_1
10043ed9          void var_400
10043ed9          void* ecx_1 = &var_400
10043ed9          
10043edf          while (result.b != 0x5c)
10043ee3              if (result.b == 0)
10043f7c                  return result
10043f7c              
10043ee9              *ecx_1 = result.b
10043eeb              result.b = *(edi_1 + 1)
10043eee              ecx_1 += 1
10043eef              edi_1 += 1
10043eef          
10043ef4          result.b = *(edi_1 + 1)
10043ef7          edi_1 += 1
10043ef8          *ecx_1 = 0
10043efd          void var_200
10043efd          void* ecx_2 = &var_200
10043efd          
10043f04          if (result.b != 0x5c)
10043f08              while (result.b != 0)
10043f0a                  *ecx_2 = result.b
10043f0c                  result.b = *(edi_1 + 1)
10043f0f                  ecx_2 += 1
10043f10                  edi_1 += 1
10043f10                  
10043f13                  if (result.b == 0x5c)
10043f13                      break
10043f13          
10043f15          *ecx_2 = 0
10043f18          void* esi_1 = &var_400
10043f1c          char* eax = arg2
10043f1c          
10043f1e          while (true)
10043f1e              char edx_1 = *eax
10043f20              ecx_2.b = edx_1
10043f22              char temp0_1 = *esi_1
10043f22              bool c_1 = edx_1 u< temp0_1
10043f22              
10043f24              if (edx_1 == temp0_1)
10043f28                  if (ecx_2.b == 0)
10043f3e                      result = nullptr
10043f40                      break
10043f40                  
10043f2a                  edx_1 = eax[1]
10043f2d                  ecx_2.b = edx_1
10043f2f                  char temp3_1 = *(esi_1 + 1)
10043f2f                  c_1 = edx_1 u< temp3_1
10043f2f                  
10043f32                  if (edx_1 == temp3_1)
10043f34                      eax = &eax[2]
10043f37                      esi_1 += 2
10043f37                      
10043f3c                      if (ecx_2.b != 0)
10043f3c                          continue
10043f3c                      
10043f3e                      result = nullptr
10043f40                      break
10043f40              
10043f42              bool c_2 = unimplemented  {sbb eax, eax}
10043f44              result = sbb.d(sbb.d(eax, eax, c_1), 0xffffffff, c_2)
10043f44              break
10043f44          
10043f49          if (result == 0)
10043f55              int32_t i = 0xffffffff
10043f55              
10043f5a              while (i != 0)
10043f5a                  bool cond:1_1 = 0 != *edi_1
10043f5a                  edi_1 += 1
10043f5a                  i -= 1
10043f5a                  
10043f5a                  if (not(cond:1_1))
10043f5a                      break
10043f5a              
10043f5c              int32_t result_1 = not.d(i)
10043f60              result = result_1
10043f69              int32_t esi_3
10043f69              int32_t edi_4
10043f69              edi_4, esi_3 = __builtin_memcpy(dest: ebp_1, src: edi_1 - result_1, 
10043f69                  n: result_1 u>> 2 << 2)
10043f70              __builtin_memcpy(dest: edi_4, src: esi_3, n: result & 3)
10043f69              break
10043f69          
10043f4e          if (*edi_1 == 0)
10043f4e              break
10043f4e  
10043f7c  return result

10043f7d                                                                                         90 90 90                               ...
10043f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10043fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................

10043fc0    int32_t sub_10043fc0(char* arg1)

10043fd5  if (sub_10045630(arg1, &data_1005f588) != 0)
10043fda      return 0
10043fda  
10043fe1  char* eax_2 = sub_10045630(arg1, &data_1005d42c)
10043fe9  int32_t eax_3 = neg.d(eax_2)
10043fef  return sbb.d(eax_3, eax_3, eax_2 != 0) + 1

10043ff0                                                  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc                  ................

10044000    char* sub_10044000(void* arg1, char* arg2, char* arg3)

10044017  char* eax = sub_10045630(arg2, &data_1005f6c0)
10044021  char* var_214_6
10044021  
10044021  if (eax != 0)
100441b1      var_214_6 = "Can't use keys or values with a …"
100441b6      j_sub_10042410()
10044021  else
10044034      eax = sub_10045630(arg3, &data_1005f6c0)
10044034      
1004403e      if (eax != 0)
100441b1          var_214_6 = "Can't use keys or values with a …"
100441b6          j_sub_10042410()
1004403e      else
1004404a          char* eax_1 = sub_10045630(arg2, &data_1005d42c)
1004404a          
10044054          if (eax_1 != 0)
10044056              char* var_214 = "Can't use keys or values with a …"
1004405b              j_sub_10042410()
1004406d              return eax_1
1004406d          
10044074          char* eax_2 = sub_10045630(arg2, &data_1005f588)
10044074          
1004407e          if (eax_2 != 0)
10044199              label_10044199:
10044199              char* var_214_5 = "Can't use keys or values with a …"
1004419e              j_sub_10042410()
100441b0              return eax_2
100441b0          
1004408a          eax_2 = sub_10045630(arg3, &data_1005f588)
1004408a          
10044094          if (eax_2 != 0)
10044094              goto label_10044199
10044094          
1004409a          char* edi_1 = arg2
1004409c          int32_t i = 0xffffffff
1004409c          
1004409f          while (i != 0)
1004409f              bool cond:0_1 = eax_2.b != *edi_1
1004409f              edi_1 = &edi_1[1]
1004409f              i -= 1
1004409f              
1004409f              if (not(cond:0_1))
1004409f                  break
1004409f          
100440a7          int32_t i_1
100440a7          
100440a7          if (not.d(i) - 1 u<= 0x3f)
100440ad              char* edi_2 = arg3
100440af              i_1 = 0xffffffff
100440af              
100440b2              while (i_1 != 0)
100440b2                  bool cond:1_1 = eax_2.b != *edi_2
100440b2                  edi_2 = &edi_2[1]
100440b2                  i_1 -= 1
100440b2                  
100440b2                  if (not(cond:1_1))
100440b2                      break
100440b2          
100440ba          if (not.d(i) - 1 u> 0x3f || not.d(i_1) - 1 u> 0x3f)
10044181              char* var_214_4 = "Keys and values must be < 64 cha…"
10044186              j_sub_10042410()
10044198              return eax_2
10044198          
100440c9          eax = j_sub_10043ea0(arg1, arg2)
100440c9          
100440d3          if (arg3 != 0)
100440d9              char* edi_3 = arg3
100440db              int32_t i_2 = 0xffffffff
100440de              eax = nullptr
100440de              
100440e0              while (i_2 != 0)
100440e0                  bool cond:2_1 = 0 != *edi_3
100440e0                  edi_3 = &edi_3[1]
100440e0                  i_2 -= 1
100440e0                  
100440e0                  if (not(cond:2_1))
100440e0                      break
100440e0              
100440e5              if (not.d(i_2) != 1)
100440eb                  char* var_214_2 = arg3
100440ec                  char* var_218_6 = arg2
100440fc                  char var_200[0x200]
100440fc                  j_sub_10043cf0(&var_200, 0x200, "\%s\%s")
10044101                  void* edi_4 = arg1
10044103                  int32_t i_3 = 0xffffffff
10044103                  
1004410b                  while (i_3 != 0)
1004410b                      bool cond:3_1 = 0 != *edi_4
1004410b                      edi_4 += 1
1004410b                      i_3 -= 1
1004410b                      
1004410b                      if (not(cond:3_1))
1004410b                          break
1004410b                  
10044110                  char (* edi_5)[0x200] = &var_200
10044116                  int32_t i_4 = 0xffffffff
10044116                  
10044119                  while (i_4 != 0)
10044119                      bool cond:4_1 = 0 != *edi_5
10044119                      edi_5 = &(*edi_5)[1]
10044119                      i_4 -= 1
10044119                      
10044119                      if (not(cond:4_1))
10044119                          break
10044119                  
10044126                  if (not.d(i_3) - 1 + not.d(i_4) - 1 u> 0x200)
10044128                      char* var_214_3 = "Info string length exceeded\n"
1004412d                      j_sub_10042410()
1004413f                      return 0
1004413f                  
10044140                  void* edi_6 = arg1
10044142                  int32_t i_5 = 0xffffffff
10044142                  
10044147                  while (i_5 != 0)
10044147                      bool cond:5_1 = 0 != *edi_6
10044147                      edi_6 += 1
10044147                      i_5 -= 1
10044147                      
10044147                      if (not(cond:5_1))
10044147                          break
10044147                  
10044149                  int32_t eax_3
10044149                  eax_3.b = var_200[0]
10044150                  void* esi_2 = arg1 + not.d(i_5) - 1
10044152                  char (* ecx_13)[0x200] = &var_200
10044152                  
10044158                  if (eax_3.b != 0)
10044171                      do
1004415d                          eax_3 = sx.d(*ecx_13) & 0x7f
10044160                          ecx_13 = &(*ecx_13)[1]
10044160                          
10044169                          if (eax_3 s>= 0x20 && eax_3 s< 0x7f)
1004416b                              *esi_2 = eax_3.b
1004416d                              esi_2 += 1
10044171                      while (*ecx_13 != 0)
10044171                  
10044173                  *esi_2 = 0
10044180                  return eax_3
100441c8  return eax

100441c9                             90 90 90 90 90 90 90 cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc           .......................
100441e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10044200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10044220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10044240  cc cc cc cc                                                                                      ....

10044244    BOOL __stdcall FreeLibrary(HMODULE hLibModule)

10044244  return FreeLibrary(hLibModule) __tailcall


1004424a    int32_t __stdcall GetProcAddress(HMODULE hModule, PSTR lpProcName)

1004424a  return GetProcAddress(hModule, lpProcName) __tailcall


10044250    HMODULE __stdcall LoadLibraryA(PSTR lpLibFileName)

10044250  return LoadLibraryA(lpLibFileName) __tailcall


10044256    uint32_t __stdcall SearchPathA(PSTR lpPath, PSTR lpFileName, PSTR lpExtension, uint32_t nBufferLength, uint8_t* lpBuffer, PSTR* lpFilePart)

10044256  return SearchPathA(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart)
10044256      __tailcall


1004425c    BOOL __stdcall GlobalUnlock(HGLOBAL hMem)

1004425c  return GlobalUnlock(hMem) __tailcall


10044262    HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)

10044262  return GlobalFree(hMem) __tailcall


10044268    int32_t __stdcall GlobalLock(HGLOBAL hMem)

10044268  return GlobalLock(hMem) __tailcall


1004426e    HGLOBAL __stdcall GlobalAlloc(enum GLOBAL_ALLOC_FLAGS uFlags, uint32_t dwBytes)

1004426e  return GlobalAlloc(uFlags, dwBytes) __tailcall


10044274    uint32_t __stdcall GetVersion()

10044274  return GetVersion() __tailcall


1004427a    PSTR __stdcall lstrcpyA(PSTR lpString1, PSTR lpString2)

1004427a  return lstrcpyA(lpString1, lpString2) __tailcall


10044280    int32_t __stdcall lstrlenA(PSTR lpString)

10044280  return lstrlenA(lpString) __tailcall


10044286    int32_t sub_10044286()

10044286  sub_1004429e()
10044290  data_10063388 = sub_10045f79()
10044295  int32_t result = sub_10045f29()
1004429a  __fnclex()
1004429c  return result


1004429d    int32_t sub_1004429d() __pure

1004429d  return 


1004429e    int32_t sub_1004429e()

100442a3  data_10060978 = sub_10045ffc
100442ad  data_10060974 = sub_10046352
100442b2  data_1006097c = sub_10046062
100442bc  data_10060980 = sub_10045fa2
100442c6  data_10060984 = sub_1004604a
100442d0  data_10060988 = sub_10046352
100442d5  return sub_10046352


100442d6    int32_t sub_100442d6(int32_t arg1)

100442da  int32_t result = data_10063384
100442df  data_10063384 = arg1
100442e5  return result

100442e6                    cc cc                                                                                ..

100442e8    int32_t __ftol(int16_t arg1 @ x87control, long double arg2 @ st0)

100442ef  int16_t x87status
100442ef  int16_t temp0
100442ef  temp0, x87status = __fnstcw_memmem16(arg1)
100442f7  int16_t eax
100442f7  eax:1.b = temp0:1.b | 0xc
100442fe  int16_t x87control
100442fe  int16_t x87status_1
100442fe  x87control, x87status_1 = __fldcw_memmem16(eax)
10044304  int16_t x87control_1
10044304  int16_t x87status_2
10044304  x87control_1, x87status_2 = __fldcw_memmem16(temp0)
1004430e  return int.q(arg2).d

1004430f                                               cc                                                                 .

10044310    void* const __convention("regparm") sub_10044310(int32_t arg1)

10044316  void arg_4
10044316  void* ecx = &arg_4
10044316  
1004431a  while (arg1 u>= 0x1000)
1004431c      ecx -= 0x1000
10044322      arg1 -= 0x1000
10044327      *ecx
10044327  
10044330  void* ecx_1 = ecx - arg1
10044334  *ecx_1
1004433d  *(ecx_1 - 4) = __return_addr
1004433e  return __return_addr


1004433f    int32_t sub_1004433f(char* arg1, char* arg2)

10044348  int32_t var_18 = 0x49
10044350  char* var_1c = arg1
10044353  char* var_24 = arg1
1004435b  void* var_20 = StrLen(arg1)
10044372  void arg_c
10044372  return sub_100463c8(&var_24, arg2, &arg_c)


10044373    long double sub_10044373(char* arg1)

1004437a  char* esi = arg1
1004437a  
10044384  while (true)
10044384      BOOL eax_2
10044384      wchar16 (* ecx)[0x21]
10044384      
10044384      if (data_10060bac s<= 1)
10044398          ecx = data_100609a0
1004439e          uint32_t eax_3
1004439e          eax_3.b = (*ecx)[zx.d(*esi)].b
100443a1          eax_2 = eax_3 & 8
10044384      else
10044386          uint32_t eax_1 = zx.d(*esi)
1004438c          int32_t edx
1004438c          eax_2, edx = sub_10046f7a(eax_1, edx, ecx, eax_1)
10044392          ecx = 8
10044392      
100443a6      if (eax_2 == 0)
100443a6          break
100443a6      
100443a8      esi = &esi[1]
100443a8  
100443ab  int32_t var_24 = 0
100443ad  int32_t var_28_2 = 0
100443b6  void* var_2c_1 = StrLen(esi)
100443c9  void var_1c
100443c9  return fconvert.t(*(sub_10046efb(&var_1c, esi) + 0x10))


100443ca    int32_t sub_100443ca(char* arg1)

100443ce  char* edi = arg1
100443d9  BOOL eax_2
100443d9  wchar16 (* ecx)[0x21]
100443d9  int32_t edx
100443d9  
100443d9  while (true)
100443d9      if (data_10060bac s<= 1)
100443ed          ecx = data_100609a0
100443f3          uint32_t eax_3
100443f3          eax_3.b = (*ecx)[zx.d(*edi)].b
100443f6          eax_2 = eax_3 & 8
100443d9      else
100443db          uint32_t eax_1 = zx.d(*edi)
100443e1          eax_2, edx = sub_10046f7a(eax_1, edx, ecx, eax_1)
100443e7          ecx = 8
100443e7      
100443fb      if (eax_2 == 0)
100443fb          break
100443fb      
100443fd      edi = &edi[1]
100443fd  
10044400  uint32_t esi = zx.d(*edi)
10044403  void* edi_1 = &edi[1]
10044407  uint32_t ebp = esi
10044407  
1004440e  if (esi == 0x2d || esi == 0x2b)
10044410      esi = zx.d(*edi_1)
10044413      edi_1 += 1
10044413  
10044414  int32_t result = 0
10044414  
1004441d  while (true)
1004441d      BOOL eax_4
1004441d      
1004441d      if (data_10060bac s<= 1)
10044430          wchar16 (* eax_5)[0x21]
10044430          eax_5.b = (*data_100609a0)[esi].b
10044433          eax_4 = eax_5 & 4
1004441d      else
10044422          eax_4, edx = sub_10046f7a(eax_2, edx, ecx, esi)
10044428          ecx = 4
10044428      
10044438      if (eax_4 == 0)
10044438          break
10044438      
1004443a      eax_2 = result * 5
1004443d      result = esi + (eax_2 << 1) - 0x30
10044441      esi = zx.d(*edi_1)
10044444      edi_1 += 1
10044444  
1004444c  if (ebp != 0x2d)
10044454      return result
10044454  
1004444e  return neg.d(result)


10044455    int32_t sub_10044455(char* arg1)

1004445f  return sub_100443ca(arg1)


10044460    void* sub_10044460(char* arg1)

10044460  void* result_2
10044460  void* result_3 = result_2
10044465  char* edi = arg1
10044470  BOOL eax_2
10044470  int32_t edx
10044470  
10044470  while (true)
10044470      if (data_10060bac s<= 1)
10044484          result_2 = data_100609a0
1004448a          uint32_t eax_3
1004448a          eax_3.b = *(result_2 + (zx.d(*edi) << 1))
1004448d          eax_2 = eax_3 & 8
10044470      else
10044472          uint32_t eax_1 = zx.d(*edi)
10044478          eax_2, edx = sub_10046f7a(eax_1, edx, result_2, eax_1)
1004447e          result_2 = 8
1004447e      
10044492      if (eax_2 == 0)
10044492          break
10044492      
10044494      edi = &edi[1]
10044494  
10044497  uint32_t esi = zx.d(*edi)
1004449a  void* edi_1 = &edi[1]
1004449e  uint32_t var_4 = esi
1004449e  
100444a7  if (esi == 0x2d || esi == 0x2b)
100444a9      esi = zx.d(*edi_1)
100444ac      edi_1 += 1
100444ac  
100444ad  void* result_1 = nullptr
100444af  int32_t ebp = 0
100444af  
100444b8  while (true)
100444b8      BOOL eax_4
100444b8      
100444b8      if (data_10060bac s<= 1)
100444cb          wchar16 (* eax_5)[0x21]
100444cb          eax_5.b = (*data_100609a0)[esi].b
100444ce          eax_4 = eax_5 & 4
100444b8      else
100444bd          eax_4 = sub_10046f7a(eax_2, edx, result_2, esi)
100444bd      
100444d3      if (eax_4 == 0)
100444d3          break
100444d3      
100444da      char* eax_7
100444da      int32_t edx_1
100444da      edx_1:eax_7 = sx.q(esi - 0x30)
100444e7      eax_2, edx = __allmul(result_1, ebp, 0xa, 0)
100444f0      result_2 = &eax_7[eax_2]
100444f4      result_1 = result_2
100444f6      ebp = adc.d(edx_1, edx, &eax_7[eax_2] u< eax_7)
100444f8      esi = zx.d(*edi_1)
100444fb      edi_1 += 1
100444fb  
10044503  void* result = result_1
10044503  
10044505  if (var_4 == 0x2d)
10044507      result = neg.d(result)
10044507  
10044519  return result


1004451a    long double sub_1004451a(double arg1)

1004451d  int32_t ecx
1004451d  int32_t var_8 = ecx
1004451e  int32_t var_c = ecx
1004452d  int32_t eax
1004452d  int16_t x87control
1004452d  int16_t x87control_1
1004452d  eax, x87control_1 = sub_100479b8(x87control, data_100607d0, 0xffff)
10044549  int32_t var_30
10044549  
10044549  if ((arg1:6.w & 0x7ff0) != 0x7ff0)
100445a5      var_c.q = fconvert.d(__frnd(9.18340949e-41f))
100445a8      long double x87_r7_5 = fconvert.t(var_c.q)
100445ab      long double temp0_1 = fconvert.t(arg1)
100445ab      x87_r7_5 - temp0_1
100445ab      
100445c6      if (test_bit(
100445c6              ((x87_r7_5 < temp0_1 ? 1 : 0) << 8
100445c6                  | (is_unordered.t(x87_r7_5, temp0_1) ? 1 : 0) << 0xa
100445c6                  | (x87_r7_5 == temp0_1 ? 1 : 0) << 0xe):1.b, 
100445c6              6) || (eax.b & 0x20) != 0)
100445b7          sub_100479b8(x87control_1, eax, 0xffff)
100445e8          return fconvert.t(var_c.q)
100445e8      
100445cb      int32_t var_18_3 = eax
100445ce      int32_t var_20_1
100445ce      var_20_1.q = fconvert.d(fconvert.t(var_c.q))
100445d6      int32_t var_28_1
100445d6      var_28_1.q = fconvert.d(fconvert.t(arg1))
100445db      __builtin_memcpy(dest: &var_30, 
100445db          src: "\x10\x00\x00\x00\x0c\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00", 
100445db          n: 0x18)
10044549  else
1004454b      int32_t eax_2 = sub_10047880(0xffff, 0xffff)
1004454b      
10044554      if (eax_2 s> 0)
10044559          if (eax_2 s<= 2)
10044577              sub_100479b8(x87control_1, eax, 0xffff)
100445e8              return fconvert.t(arg1)
100445e8          
1004455e          if (eax_2 == 3)
10044564              int32_t var_1c_1 = 0xffff
1004456b              return sub_10047024(eax_2, 0, 0xffff, 0xc, 9.18340949e-41f, eax)
1004456b      
1004458c      int32_t var_18_2 = eax
1004458f      int32_t var_20
1004458f      var_20.q = fconvert.d(fconvert.t(arg1) + fconvert.t(1.0))
10044597      int32_t var_28
10044597      var_28.q = fconvert.d(fconvert.t(arg1))
1004459c      __builtin_memcpy(dest: &var_30, 
1004459c          src: "\x08\x00\x00\x00\x0c\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00", 
1004459c          n: 0x18)
1004459c  
100445dd  return sub_100470d8(var_30, 0xc, 0xffff)


100445e9    long double sub_100445e9(double arg1)

100445ec  int32_t ecx
100445ec  int32_t var_8 = ecx
100445ed  int32_t var_c = ecx
100445fc  int32_t eax
100445fc  int16_t x87control
100445fc  int16_t x87control_1
100445fc  eax, x87control_1 = sub_100479b8(x87control, data_100607d4, 0xffff)
10044618  int32_t var_30
10044618  
10044618  if ((arg1:6.w & 0x7ff0) != 0x7ff0)
10044674      var_c.q = fconvert.d(__frnd(9.18340949e-41f))
10044677      long double x87_r7_5 = fconvert.t(var_c.q)
1004467a      long double temp0_1 = fconvert.t(arg1)
1004467a      x87_r7_5 - temp0_1
1004467a      
10044695      if (test_bit(
10044695              ((x87_r7_5 < temp0_1 ? 1 : 0) << 8
10044695                  | (is_unordered.t(x87_r7_5, temp0_1) ? 1 : 0) << 0xa
10044695                  | (x87_r7_5 == temp0_1 ? 1 : 0) << 0xe):1.b, 
10044695              6) || (eax.b & 0x20) != 0)
10044686          sub_100479b8(x87control_1, eax, 0xffff)
100446b7          return fconvert.t(var_c.q)
100446b7      
1004469a      int32_t var_18_3 = eax
1004469d      int32_t var_20_1
1004469d      var_20_1.q = fconvert.d(fconvert.t(var_c.q))
100446a5      int32_t var_28_1
100446a5      var_28_1.q = fconvert.d(fconvert.t(arg1))
100446aa      __builtin_memcpy(dest: &var_30, 
100446aa          src: "\x10\x00\x00\x00\x0b\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00", 
100446aa          n: 0x18)
10044618  else
1004461a      int32_t eax_2 = sub_10047880(0xffff, 0xffff)
1004461a      
10044623      if (eax_2 s> 0)
10044628          if (eax_2 s<= 2)
10044646              sub_100479b8(x87control_1, eax, 0xffff)
100446b7              return fconvert.t(arg1)
100446b7          
1004462d          if (eax_2 == 3)
10044633              int32_t var_1c_1 = 0xffff
1004463a              return sub_10047024(eax_2, 0, 0xffff, 0xb, 9.18340949e-41f, eax)
1004463a      
1004465b      int32_t var_18_2 = eax
1004465e      int32_t var_20
1004465e      var_20.q = fconvert.d(fconvert.t(arg1) + fconvert.t(1.0))
10044666      int32_t var_28
10044666      var_28.q = fconvert.d(fconvert.t(arg1))
1004466b      __builtin_memcpy(dest: &var_30, 
1004466b          src: "\x08\x00\x00\x00\x0b\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00", 
1004466b          n: 0x18)
1004466b  
100446ac  return sub_100470d8(var_30, 0xb, 0xffff)


100446b8    uint32_t sub_100446b8(void* arg1, int32_t arg2, uint32_t arg3, int32_t* arg4)

100446bf  sub_10047aed(arg4)
100446d0  uint32_t result = sub_100446e7(arg1, arg2, arg3, arg4)
100446da  sub_10047b3f(arg4)
100446e6  return result


100446e7    uint32_t sub_100446e7(void* arg1, int32_t arg2, uint32_t arg3, int32_t* arg4)

100446ea  int32_t ecx
100446ea  int32_t var_8 = ecx
100446f1  void* edi_1 = arg2 * arg3
100446f5  char* ebx = arg1
100446f8  void* ecx_1 = edi_1
100446fc  void* var_8_1 = edi_1
100446ff  arg1 = ecx_1
100446ff  
10044702  if (edi_1 == 0)
10044704      return 0
10044704  
1004470b  int32_t* esi_1 = arg4
1004470b  
10044714  if ((esi_1[3].w & 0x10c) == 0)
1004471e      arg4 = 0x1000
10044714  else
10044719      arg4 = esi_1[6]
10044719  
10044730  while (true)
10044730      void* eax_3
10044730      
10044730      if ((esi_1[3].w & 0x10c) != 0)
10044732          eax_3 = esi_1[1]
10044732      
10044737      if ((esi_1[3].w & 0x10c) != 0 && eax_3 != 0)
1004473b          void* edi_2 = ecx_1
1004473b          
1004473d          if (ecx_1 u>= eax_3)
1004473f              edi_2 = eax_3
1004473f          
10044745          MemCopyFixedSize(ebx, *esi_1, edi_2)
1004474a          arg1 -= edi_2
1004474d          esi_1[1] -= edi_2
10044750          *esi_1 += edi_2
10044755          ebx += edi_2
10044757          edi_1 = var_8_1
10044737      else if (ecx_1 u< arg4)
10044790          uint32_t eax_7 = sub_10047b91(esi_1)
10044790          
10044799          if (eax_7 == 0xffffffff)
10044799              break
10044799          
1004479b          *ebx = eax_7.b
100447a0          ebx = &ebx[1]
100447a1          arg1 -= 1
100447a4          arg4 = esi_1[6]
1004475f      else
10044765          void* eax_4 = ecx_1
10044765          
10044767          if (arg4 != 0)
10044770              eax_4 = ecx_1 - modu.dp.d(0:eax_4, arg4)
10044770          
10044777          void* eax_6 = sub_10047c6d(esi_1[4], ebx, eax_4)
10044777          
10044781          if (eax_6 == 0)
100447b9              esi_1[3] |= 0x10
100447bd              break
100447bd          
10044786          if (eax_6 == 0xffffffff)
100447bf              esi_1[3] |= 0x20
100447bf              break
100447bf          
10044788          arg1 -= eax_6
1004478b          ebx += eax_6
1004478b      
100447ab      if (arg1 == 0)
100447b1          return arg3
100447b1      
10044727      ecx_1 = arg1
10044727  
100447b8  return divu.dp.d(0:(edi_1 - arg1), arg2)


100447cf    int32_t sub_100447cf(int32_t* arg1, void* arg2, enum SET_FILE_POINTER_MOVE_METHOD arg3)

100447d6  sub_10047aed(arg1)
100447e4  int32_t result = sub_100447fb(arg1, arg2, arg3)
100447ee  sub_10047b3f(arg1)
100447fa  return result


100447fb    int32_t sub_100447fb(int32_t* arg1, void* arg2, enum SET_FILE_POINTER_MOVE_METHOD arg3)

10044801  int32_t eax = arg1[3]
10044801  
10044806  if ((eax.b & 0x83) != 0)
10044808      enum SET_FILE_POINTER_MOVE_METHOD method = arg3
10044808      
10044818      if (method == FILE_BEGIN || method == FILE_CURRENT || method == FILE_END)
1004481a          eax.b &= 0xef
1004481f          arg1[3] = eax
1004481f          
10044822          if (method == FILE_CURRENT)
1004482a              arg2 += sub_10044aa4(arg1)
1004482f              method = FILE_BEGIN
1004482f          
10044832          sub_100459a9(arg1)
10044837          int32_t eax_2 = arg1[3]
10044837          
1004483d          if ((eax_2.b & 0x80) != 0)
1004483f              eax_2.b &= 0xfc
10044841              arg1[3] = eax_2
1004483d          else if ((eax_2.b & 1) != 0 && (eax_2.b & 8) != 0 && (eax_2:1.b & 4) == 0)
10044853              arg1[6] = 0x200
10044853          
1004486f          int32_t ecx_3
1004486f          ecx_3.b = SetStreamPointer(handle: arg1[4], offset: arg2, method) != 0xffffffff
10044873          return ecx_3 - 1
10044873  
1004487c  *sub_10044f86() = 0x16
10044882  return 0xffffffff


10044888    int32_t sub_10044888(int32_t* arg1)

1004488e  int32_t result = 0xffffffff
1004488e  
10044895  if ((arg1[3].b & 0x40) == 0)
1004489e      sub_10047aed(arg1)
100448aa      result = sub_100448b9(arg1)
100448ac      sub_10047b3f(arg1)
10044895  else
10044897      arg1[3] = 0
10044897  
100448b8  return result


100448b9    int32_t sub_100448b9(int32_t* arg1)

100448bf  int32_t result = 0xffffffff
100448bf  
100448c6  if ((arg1[3].b & 0x83) != 0)
100448cf      result = sub_100459a9(arg1)
100448d1      CleanupStreamBuffer(stream: arg1)
100448d1      
100448e3      if (CloseStream(handle: arg1[4]) s>= 0)
100448ea          void* eax_3 = arg1[7]
100448ea          
100448ef          if (eax_3 != 0)
100448f2              Gladiator_Free(eax_3)
100448f7              arg1[7] = 0
100448e3      else
100448e5          result = 0xffffffff
100448e5  
100448fc  arg1[3] = 0
10044904  return result


10044905    int32_t* sub_10044905(PSTR arg1, char* arg2, char arg3)

10044906  int32_t* stream = OpenInternalStream()
10044906  
1004490f  if (stream == 0)
10044912      return stream
10044912  
10044921  int32_t* eax = ParseOpenMode(filename: arg1, modeStr: arg2, binaryMode: arg3, stream)
10044929  sub_10047b3f(stream)
10044935  return eax


10044936    int32_t* sub_10044936(PSTR arg1, char* arg2)

10044948  return sub_10044905(arg1, arg2, 0x40)


10044949    uint32_t sub_10044949(char* arg1, int32_t arg2, uint32_t arg3, int32_t* arg4)

10044950  sub_10047aed(arg4)
10044961  uint32_t result = sub_10044978(arg1, arg2, arg3, arg4)
1004496b  sub_10047b3f(arg4)
10044977  return result


10044978    uint32_t sub_10044978(char* arg1, int32_t arg2, uint32_t arg3, int32_t* arg4)

1004497b  int32_t ecx
1004497b  int32_t var_8 = ecx
10044982  uint32_t edi_1 = arg2 * arg3
10044989  uint32_t var_8_1 = edi_1
10044991  uint32_t ebx = edi_1
10044991  
10044993  if (edi_1 == 0)
10044995      return 0
10044995  
1004499c  int32_t* esi_1 = arg4
1004499c  
100449a5  if ((esi_1[3].w & 0x10c) == 0)
100449af      arg4 = 0x1000
100449a5  else
100449aa      arg4 = esi_1[6]
100449aa  
100449b9  uint32_t eax_12
100449b9  
100449b9  while (true)
100449b9      int32_t ecx_2 = esi_1[3] & 0x108
100449bf      uint32_t eax_3
100449bf      
100449bf      if (ecx_2 != 0)
100449c1          eax_3 = esi_1[1]
100449c1      
100449c6      if (ecx_2 != 0 && eax_3 != 0)
100449ca          uint32_t edi_2 = ebx
100449ca          
100449cc          if (ebx u>= eax_3)
100449ce              edi_2 = eax_3
100449ce          
100449d6          MemCopyFixedSize(*esi_1, arg1, edi_2)
100449db          esi_1[1] -= edi_2
100449de          *esi_1 += edi_2
100449e3          ebx -= edi_2
100449e5          arg1 = &arg1[edi_2]
10044a30          edi_1 = var_8_1
100449c6      else if (ebx u< arg4)
10044a38          int32_t* var_18_4 = esi_1
10044a38          
10044a47          if (FlushInternalStream(stream: sx.d(*arg1)) == 0xffffffff)
10044a77              eax_12 = edi_1
10044a77              break
10044a77          
10044a49          arg1 = &arg1[1]
10044a4c          int32_t* eax_11 = esi_1[6]
10044a4f          ebx -= 1
10044a50          arg4 = eax_11
10044a50          
10044a55          if (eax_11 s<= 0)
10044a57              arg4 = 1
100449ed      else
100449f1          bool cond:3_1
100449f1          
100449f1          if (ecx_2 != 0)
100449f9              cond:3_1 = sub_100459a9(esi_1) != 0
100449f9          
100449fc          if (ecx_2 != 0 && cond:3_1)
10044a77              eax_12 = edi_1
10044a77              break
10044a77          
10044a02          uint32_t edi_4
10044a02          
10044a02          if (arg4 == 0)
10044a11              edi_4 = ebx
10044a02          else
10044a0d              edi_4 = ebx - modu.dp.d(0:ebx, arg4)
10044a0d          
10044a1a          int32_t eax_7 = WriteHandle(esi_1[4], arg1, edi_4)
10044a1a          
10044a25          if (eax_7 != 0xffffffff)
10044a27              arg1 = &arg1[eax_7]
10044a2a              ebx -= eax_7
10044a2a          
10044a2e          if (eax_7 == 0xffffffff || eax_7 u< edi_4)
10044a6e              esi_1[3] |= 0x20
10044a72              eax_12 = var_8_1
10044a75              break
10044a75          
10044a30          edi_1 = var_8_1
10044a30      
10044a60      if (ebx == 0)
10044a66          return arg3
10044a66  
10044a6d  return divu.dp.d(0:(eax_12 - ebx), arg2)


10044a82    void* sub_10044a82(int32_t* arg1)

10044a89  sub_10047aed(arg1)
10044a8f  void* result = sub_10044aa4(arg1)
10044a97  sub_10047b3f(arg1)
10044aa3  return result


10044aa4    void* sub_10044aa4(int32_t* arg1)

10044aad  int32_t* edi = arg1
10044ab2  int32_t handle = edi[4]
10044ab2  
10044abb  if (edi[1] s< 0)
10044abd      edi[1] = 0
10044abd  
10044ac4  uint32_t offset_1 = SetStreamPointer(handle, offset: 0, method: FILE_CURRENT)
10044ace  uint32_t offset = offset_1
10044ace  
10044ad1  if (offset_1 s>= 0)
10044ad3      int16_t ecx_1 = (edi[3]).w
10044ad3      
10044adb      if ((ecx_1 & 0x108) == 0)
10044add          return offset_1 - edi[1]
10044add      
10044ae5      int32_t eax_1 = *edi
10044ae7      char* i_2 = edi[2]
10044af1      void* result = eax_1 - i_2
10044af1      
10044af4      if ((ecx_1.b & 3) != 0)
10044b0f          if ((*((&data_10069f40)[handle s>> 5] + (handle & 0x1f) * 0x24 + 4) & 0x80) != 0)
10044b15              for (char* i = i_2; i u< eax_1; i = &i[1])
10044b1a                  if (*i == 0xa)
10044b1c                      result += 1
10044b1c          
10044b0f          goto label_10044b3a
10044b0f      
10044b25      if ((ecx_1.b & 0x80) != 0)
10044b3a          label_10044b3a:
10044b3a          
10044b3e          if (offset == 0)
10044b40              return result
10044b40          
10044b4c          if ((edi[3].b & 1) != 0)
10044b52              int32_t ecx_5 = edi[1]
10044b52              
10044b57              if (ecx_5 != 0)
10044b65                  arg1 = eax_1 - i_2 + ecx_5
10044b7e                  int32_t esi_1 = (handle & 0x1f) * 0x24
10044b7e                  
10044b86                  if ((*(esi_1 + (&data_10069f40)[handle s>> 5] + 4) & 0x80) != 0)
10044b9a                      bool cond:3_1
10044b9a                      
10044b9a                      if (SetStreamPointer(handle, offset: 0, method: FILE_END) != offset)
10044bc1                          SetStreamPointer(handle, offset, method: FILE_BEGIN)
10044bc6                          int32_t* eax_11 = 0x200
10044bd1                          int16_t ecx_8
10044bd1                          
10044bd1                          if (arg1 u<= 0x200)
10044bd3                              ecx_8 = (edi[3]).w
10044bd3                          
10044bde                          if (arg1 u> 0x200 || (ecx_8.b & 8) == 0 || (ecx_8:1.b & 4) != 0)
10044be0                              eax_11 = edi[6]
10044be0                          
10044be3                          arg1 = eax_11
10044be8                          cond:3_1 =
10044be8                              (*(esi_1 + (&data_10069f40)[handle s>> 5] + 4) & 4) == 0
10044b9a                      else
10044b9c                          char* i_1 = edi[2]
10044b9c                          
10044ba6                          for (void* ecx_7 = arg1 + i_1; i_1 u< ecx_7; i_1 = &i_1[1])
10044bab                              if (*i_1 == 0xa)
10044bad                                  arg1 += 1
10044bad                          
10044bb3                          cond:3_1 = (*(edi + 0xd) & 0x20) == 0
10044bb3                      
10044bed                      if (not(cond:3_1))
10044bef                          arg1 += 1
10044bef                  
10044bf5                  offset -= arg1
10044b57              else
10044b59                  result &= ecx_5
10044b59          
10044bfe          return result + offset
10044bfe      
10044b2c      *sub_10044f86() = 0x16
10044b2c  
10044b32  return 0xffffffff


10044c05    int32_t sub_10044c05(char* arg1, void* arg2, int32_t arg3)

10044c0f  int32_t var_2c = arg3
10044c12  char* var_1c = arg1
10044c15  char* var_24 = arg1
10044c1e  int32_t var_18 = 0x42
10044c25  int32_t var_20 = 0x7fffffff
10044c2d  int32_t result = sub_10048b18(&var_24, arg2)
10044c35  int32_t var_20_1 = var_20 - 1
10044c35  
10044c3a  if (var_20 - 1 s< 0)
10044c47      char** var_2c_1 = &var_24
10044c4a      FlushInternalStream(stream: nullptr)
10044c3a  else
10044c3f      *var_24 = 0
10044c3f  
10044c55  return result


10044c56    int32_t sub_10044c56(char* arg1, void* arg2)

10044c60  char* var_1c = arg1
10044c63  char* var_24 = arg1
10044c69  int32_t var_18 = 0x42
10044c70  void arg_c
10044c70  void* var_2c = &arg_c
10044c77  int32_t var_20 = 0x7fffffff
10044c7f  int32_t result = sub_10048b18(&var_24, arg2)
10044c87  int32_t var_20_1 = var_20 - 1
10044c87  
10044c8c  if (var_20 - 1 s< 0)
10044c99      char** var_2c_1 = &var_24
10044c9c      FlushInternalStream(stream: nullptr)
10044c8c  else
10044c91      *var_24 = 0
10044c91  
10044ca7  return result

10044ca8                          cc cc cc cc cc cc cc cc                                                          ........

10044cb0    char* sub_10044cb0(char* arg1, char* arg2, int32_t arg3)

10044cb0  int32_t i_3 = arg3
10044cb0  
10044cb7  if (i_3 != 0)
10044cbd      char* edi_1 = arg1
10044cc9      void* edi_2
10044cc9      
10044cc9      while ((edi_1 & 3) != 0)
10044ccb          char eax = *edi_1
10044ccd          edi_1 = &edi_1[1]
10044ccd          
10044cd0          if (eax == 0)
10044d0b              label_10044d0b:
10044d0b              edi_2 = edi_1 - 1
10044d0c              goto label_10044d1b
10044d0c      
10044cda      while (true)
10044cda          int32_t eax_1 = *edi_1
10044ce8          edi_1 = &edi_1[4]
10044ce8          
10044cf0          if (((eax_1 ^ 0xffffffff ^ (0x7efefeff + eax_1)) & 0x81010100) != 0)
10044cf2              int32_t eax_4 = *(edi_1 - 4)
10044cf2              
10044cf7              if (eax_4.b == 0)
10044d18                  edi_2 = edi_1 - 4
10044d18                  break
10044d18              
10044cfb              if (eax_4:1.b == 0)
10044d13                  edi_2 = edi_1 - 3
10044d16                  break
10044d16              
10044d02              if ((eax_4 & 0xff0000) == 0)
10044d0e                  edi_2 = edi_1 - 2
10044d11                  break
10044d11              
10044d09              if ((eax_4 & 0xff000000) == 0)
10044d09                  goto label_10044d0b
10044d09      
10044d1b      label_10044d1b:
10044d1b      char* esi_1 = arg2
10044d25      int32_t edx
10044d25      int32_t i_4
10044d25      uint32_t i_2
10044d25      
10044d25      if ((esi_1 & 3) != 0)
10044d43          do
10044d30              edx.b = *esi_1
10044d32              esi_1 = &esi_1[1]
10044d32              
10044d35              if (edx.b == 0)
10044d6a                  label_10044d6a:
10044d6a                  *edi_2 = edx.b
10044d73                  return arg1
10044d73              
10044d37              *edi_2 = edx.b
10044d39              edi_2 += 1
10044d3a              int32_t i_5 = i_3
10044d3a              i_3 -= 1
10044d3a              
10044d3b              if (i_5 == 1)
10044d3b                  goto label_10044d60
10044d43          while ((esi_1 & 3) != 0)
10044d43          
10044d45          i_4 = i_3
10044d47          i_2 = i_3 u>> 2
10044d47          
10044d4a          if (i_2 != 0)
10044d4a              goto label_10044d7a
10044d25      else
10044d27          i_4 = i_3
10044d29          i_2 = i_3 u>> 2
10044d29          
10044d2c          if (i_2 != 0)
10044d7a              label_10044d7a:
10044d7a              uint32_t i
10044d7a              
10044d7a              do
10044d81                  int32_t eax_7 = *esi_1
10044d8a                  edx = *esi_1
10044d8c                  esi_1 = &esi_1[4]
10044d8c                  
10044d94                  if (((eax_7 ^ 0xffffffff ^ (0x7efefeff + eax_7)) & 0x81010100) != 0)
10044d98                      if (edx.b == 0)
10044d98                          goto label_10044d6a
10044d98                      
10044d9c                      if (edx:1.b == 0)
10044dc8                          *edi_2 = edx.w
10044dd2                          return arg1
10044dd2                      
10044da4                      if ((edx & 0xff0000) == 0)
10044db8                          *edi_2 = edx.w
10044dc1                          *(edi_2 + 2) = 0
10044dc7                          return arg1
10044dc7                      
10044dac                      if ((edx & 0xff000000) == 0)
10044dae                          *edi_2 = edx
10044db7                          return arg1
10044db7                  
10044d74                  *edi_2 = edx
10044d76                  edi_2 += 4
10044d79                  i = i_2
10044d79                  i_2 -= 1
10044d7a              while (i != 1)
10044d4e      i_3 = i_4 & 3
10044d4e      
10044d51      if (i_3 != 0)
10044d5e          int32_t i_1
10044d5e          
10044d5e          do
10044d53              edx.b = *esi_1
10044d55              esi_1 = &esi_1[1]
10044d56              *edi_2 = edx.b
10044d58              edi_2 += 1
10044d58              
10044d5b              if (edx.b == 0)
10044d69                  return arg1
10044d69              
10044d5d              i_1 = i_3
10044d5d              i_3 -= 1
10044d5e          while (i_1 != 1)
10044d5e      
10044d60      label_10044d60:
10044d60      *edi_2 = i_3.b
10044d60  
10044d69  return arg1

10044dd3                                                           cc cc cc cc cc cc cc cc cc cc cc cc cc                     .............

10044de0    char* StrCopyFixed(char* arg1, char* arg2, int32_t arg3)

10044de0  int32_t ecx = arg3
10044de0  
10044de7  if (ecx == 0)
10044e68      return arg1
10044e68  
10044deb  int32_t ebx_1 = ecx
10044ded  char* esi_1 = arg2
10044df7  char* edi_1 = arg1
10044dfb  int32_t eax
10044dfb  uint32_t i_2
10044dfb  uint32_t i_3
10044dfb  
10044dfb  if ((esi_1 & 3) != 0)
10044e17      do
10044e04          eax.b = *esi_1
10044e06          esi_1 = &esi_1[1]
10044e07          *edi_1 = eax.b
10044e09          edi_1 = &edi_1[1]
10044e0a          int32_t temp0_1 = ecx
10044e0a          ecx -= 1
10044e0a          
10044e0b          if (temp0_1 == 1)
10044e39              return arg1
10044e39          
10044e0f          if (eax.b == 0)
10044e40              while ((edi_1 & 3) != 0)
10044e42                  *edi_1 = eax.b
10044e44                  edi_1 = &edi_1[1]
10044e45                  int32_t temp2_1 = ecx
10044e45                  ecx -= 1
10044e45                  
10044e46                  if (temp2_1 == 1)
10044edd                      return arg1
10044edd              
10044e54              ebx_1 = ecx
10044e56              i_3 = ecx u>> 2
10044e56              
10044e59              if (i_3 == 0)
10044e59                  goto label_10044e5b
10044e59              
10044ec7              label_10044ec7:
10044ec7              eax = 0
10044ecf              uint32_t i
10044ecf              
10044ecf              do
10044ec9                  *edi_1 = 0
10044ecb                  edi_1 = &edi_1[4]
10044ece                  i = i_3
10044ece                  i_3 -= 1
10044ecf              while (i != 1)
10044ed1              label_10044ed1:
10044ed1              ebx_1 &= 3
10044ed1              
10044ed4              if (ebx_1 != 0)
10044ed4                  goto label_10044e5b
10044ed4              
10044edd              return arg1
10044e17      while ((esi_1 & 3) != 0)
10044e17      
10044e19      ebx_1 = ecx
10044e1b      i_2 = ecx u>> 2
10044e1b      
10044e1e      if (i_2 != 0)
10044e1e          goto label_10044e6f
10044e1e      
10044e20      label_10044e20:
10044e20      ebx_1 &= 3
10044e20      
10044e23      if (ebx_1 != 0)
10044e23          goto label_10044e25
10044dfb  else
10044dfd      i_2 = ecx u>> 2
10044dfd      
10044e00      if (i_2 != 0)
10044e6f          label_10044e6f:
10044e6f          uint32_t i_1
10044e6f          
10044e6f          do
10044e76              int32_t eax_3 = *esi_1
10044e7f              int32_t edx_2 = *esi_1
10044e81              esi_1 = &esi_1[4]
10044e81              
10044e89              if (((eax_3 ^ 0xffffffff ^ (0x7efefeff + eax_3)) & 0x81010100) != 0)
10044e8d                  if (edx_2.b == 0)
10044ebd                      *edi_1 = 0
10044ebf                      label_10044ebf:
10044ebf                      edi_1 = &edi_1[4]
10044ec2                      eax = 0
10044ec4                      i_3 = i_2 - 1
10044ec4                      
10044ec5                      if (i_2 == 1)
10044ec5                          goto label_10044ed1
10044ec5                      
10044ec5                      goto label_10044ec7
10044ec5                  
10044e91                  if (edx_2:1.b == 0)
10044eb7                      *edi_1 = edx_2 & 0xff
10044eb9                      goto label_10044ebf
10044eb9                  
10044e99                  if ((edx_2 & 0xff0000) == 0)
10044ead                      *edi_1 = edx_2 & 0xffff
10044eaf                      goto label_10044ebf
10044eaf                  
10044ea1                  if ((edx_2 & 0xff000000) == 0)
10044ea3                      *edi_1 = edx_2
10044ea5                      goto label_10044ebf
10044ea5              
10044e69              *edi_1 = edx_2
10044e6b              edi_1 = &edi_1[4]
10044e6e              i_1 = i_2
10044e6e              i_2 -= 1
10044e6f          while (i_1 != 1)
10044e6f          goto label_10044e20
10044e6f      
10044e25      label_10044e25:
10044e25      
10044e25      while (true)
10044e25          eax.b = *esi_1
10044e27          esi_1 = &esi_1[1]
10044e28          *edi_1 = eax.b
10044e2a          edi_1 = &edi_1[1]
10044e2a          
10044e2d          if (eax.b == 0)
10044e5e              while (true)
10044e5e                  int32_t temp3_1 = ebx_1
10044e5e                  ebx_1 -= 1
10044e5e                  
10044e5f                  if (temp3_1 == 1)
10044e68                      return arg1
10044e68                  
10044e5b                  label_10044e5b:
10044e5b                  *edi_1 = eax.b
10044e5d                  edi_1 = &edi_1[1]
10044e2d          else
10044e2f              int32_t temp4_1 = ebx_1
10044e2f              ebx_1 -= 1
10044e2f              
10044e30              if (temp4_1 == 1)
10044e30                  break
10044e39  return arg1


10044ede    int32_t sub_10044ede(PSTR arg1)

10044eea  enum WIN32_ERROR eax_1
10044eea  
10044eea  if (DeleteFileA(lpFileName: arg1) != 0)
10044ef4      eax_1 = NO_ERROR
10044eea  else
10044eec      eax_1 = GetLastError()
10044eec  
10044ef8  if (eax_1 == NO_ERROR)
10044f07      return 0
10044f07  
10044efb  sub_10044f13(eax_1)
10044f04  return 0xffffffff


10044f08    int32_t sub_10044f08(PSTR arg1)

10044f12  return sub_10044ede(arg1)


10044f13    void* sub_10044f13(int32_t arg1)

10044f1d  int32_t esi = 0
10044f1f  *sub_10044f8f() = arg1
10044f1f  
10044f33  for (void* i = &data_100607e0; i s< 0x10060948; )
10044f28      if (arg1 == *i)
10044f4c          void* eax_2 = sub_10044f86()
10044f59          *eax_2 = *((esi << 3) + &data_100607e4)
10044f5b          return eax_2
10044f5b      
10044f2a      i += 8
10044f2d      esi += 1
10044f2d  
10044f3d  if (arg1 u>= 0x13 && arg1 u<= 0x24)
10044f3f      void* eax_1 = sub_10044f86()
10044f44      *eax_1 = 0xd
10044f4b      return eax_1
10044f4b  
10044f6a  if (arg1 u< 0xbc || arg1 u> 0xca)
10044f79      void* eax_4 = sub_10044f86()
10044f7e      *eax_4 = 0x16
10044f85      return eax_4
10044f85  
10044f6c  void* eax_3 = sub_10044f86()
10044f71  *eax_3 = 8
10044f78  return eax_3


10044f86    void* sub_10044f86()

10044f8e  return sub_100493a7() + 8


10044f8f    void* sub_10044f8f()

10044f97  return sub_100493a7() + 0xc


10044f98    int32_t sub_10044f98(PSTR arg1)

10044fac  if (SetCurrentDirectoryA(lpPathName: arg1) != 0)
10044fba      uint8_t var_10c
10044fba      uint32_t eax_1
10044fba      int32_t ecx_1
10044fba      eax_1, ecx_1 = GetCurrentDirectoryA(nBufferLength: 0x105, lpBuffer: &var_10c)
10044fba      
10044fc2      if (eax_1 != 0)
10044fc4          eax_1.b = var_10c
10044fcc          char var_10b
10044fcc          
10044fcc          if (eax_1.b == 0x5c)
10044fd8              if (eax_1.b == var_10b)
1004500b                  return 0
10044fcc          else if (eax_1.b == 0x2f && eax_1.b == var_10b)
1004500b              return 0
10044fdd          uint32_t var_110_2 = zx.d(eax_1.b)
10044fde          arg1.b = 0x3d
10044fe2          char eax_3 = sub_100494ba(ecx_1)
10044fe7          arg1:3.b = 0
10044feb          arg1:1.b = eax_3
10044ffa          arg1:2.b = 0x3a
10044ffa          
10045006          if (SetEnvironmentVariableA(lpName: &arg1, lpValue: &var_10c) != 0)
1004500b              return 0
1004500b  
10045013  sub_10044f13(GetLastError())
1004501d  return 0xffffffff


1004501e    char* sub_1004501e(void* arg1, int32_t* arg2)

10045021  LockArenaSection(index: 0xc)
10045030  char* result = sub_1004506e(0, arg1, arg2)
10045039  UnlockArenaSection(index: 0xc)
10045044  return result


10045045    char* sub_10045045(int32_t arg1, void* arg2, int32_t* arg3)

10045048  LockArenaSection(index: 0xc)
10045059  char* result = sub_1004506e(arg1, arg2, arg3)
10045062  UnlockArenaSection(index: 0xc)
1004506d  return result


1004506e    char* sub_1004506e(int32_t arg1, void* arg2, int32_t* arg3)

10045078  int32_t ebx = arg1
1004507d  void buffer
1004507d  uint32_t eax_4
1004507d  
1004507d  if (ebx == 0)
100450df      eax_4 = GetCurrentDirectoryA(nBufferLength: 0x104, lpBuffer: &buffer)
100450e5      label_100450e5:
100450e5      
100450e7      if (eax_4 != 0)
100450e9          int32_t* size = eax_4 + 1
100450e9          
100450ef          if (size u<= 0x104)
100450f6              if (arg2 != 0)
1004511d                  if (size s<= arg3)
100450a4                      return StrDupIntoArena(arg2, &buffer)
100450a4                  
10045124                  *sub_10044f86() = 0x22
100450f6              else
100450fb                  if (size s<= arg3)
100450fd                      size = arg3
100450fd                  
10045107                  void* ecx_2 = ArenaAlloc(size)
10045107                  
1004510b                  if (ecx_2 != 0)
100450a4                      return StrDupIntoArena(ecx_2, &buffer)
100450a4                  
10045112                  *sub_10044f86() = 0xc
1004507d  else
10045088      if (sub_10045143(ebx) != 0)
100450a8          arg1:3.b = 0
100450b7          ebx.b += 0x40
100450c0          arg1.b = ebx.b
100450c3          arg1:1.b = 0x3a
100450c7          arg1:2.b = 0x2e
100450cb          PSTR filePart
100450cb          eax_4 = GetFullPathNameA(lpFileName: &arg1, nBufferLength: 0x104, 
100450cb              lpBuffer: &buffer, lpFilePart: &filePart)
100450d1          goto label_100450e5
100450d1      
1004508f      *sub_10044f8f() = 0xf
1004509a      *sub_10044f86() = 0xd
100450a0  return nullptr


10045143    int32_t sub_10045143(int32_t arg1)

10045146  int32_t eax = arg1
10045146  
1004514b  if (eax != 0)
1004514d      arg1:3.b = 0
10045151      eax.b += 0x40
10045153      arg1.b = eax.b
1004515a      arg1:1.b = 0x3a
1004515e      arg1:2.b = 0x5c
10045162      uint32_t eax_1 = GetDriveTypeA(lpRootPathName: &arg1)
10045162      
1004516f      if (eax_1 == 0 || eax_1 == 1)
10045179          return 0
10045179  
10045175  return 1


1004517a    void* sub_1004517a(int32_t arg1)

1004517a  void* result = sub_100493a7()
10045183  *(result + 0x14) = arg1
10045186  return result


10045187    int32_t sub_10045187()

10045187  void* eax_3 = sub_100493a7()
10045195  int32_t ecx_2 = *(eax_3 + 0x14) * 0x343fd + 0x269ec3
1004519b  *(eax_3 + 0x14) = ecx_2
100451a8  return ecx_2 u>> 0x10 & 0x7fff


100451a9    int32_t sub_100451a9(int32_t arg1) __pure

100451b0  return arg1 - 0x20


100451b1    uint32_t sub_100451b1(uint32_t arg1)

100451b2  int32_t ebx = 0
100451b2  
100451ba  if (data_1006343c == 0)
100451c8      if (arg1 s>= 0x61 && arg1 s<= 0x7a)
100451ce          return arg1 - 0x20
100451ce      
1004521f      return arg1
1004521f  
100451d7  int32_t ecx_1 = InterlockedIncrement(&data_10069f24)
100451d7  
100451e9  if (data_10069f14 != 0)
100451ec      InterlockedDecrement(&data_10069f24)
100451f0      LockArenaSection(index: 0x13)
100451f5      ecx_1 = 0x13
100451f8      ebx = 1
100451f8  
100451f9  uint32_t var_10_1 = arg1
100451fd  uint32_t eax_2 = sub_10045220(ecx_1)
100451fd  
10045209  if (ebx == 0)
10045216      InterlockedDecrement(&data_10069f24)
10045209  else
1004520d      UnlockArenaSection(index: 0x13)
1004520d  
10045218  return eax_2


10045220    uint32_t __fastcall sub_10045220(int32_t arg1)

10045223  int32_t var_8 = arg1
1004522c  uint32_t arg_4
1004522c  
1004522c  if (data_1006343c == 0)
1004522e      uint32_t eax_1 = arg_4
1004522e      
1004523d      if (eax_1 s>= 0x61 && eax_1 s<= 0x7a)
10045243          return eax_1 - 0x20
10045243      
100452eb      return eax_1
100452eb  
1004524b  uint32_t ebx_1 = arg_4
10045254  BOOL eax_2
10045254  
10045254  if (ebx_1 s< 0x100)
1004525d      int32_t eax
1004525d      int32_t edx
1004525d      
1004525d      if (data_10060bac s<= 1)
10045270          wchar16 (* eax_3)[0x21]
10045270          eax_3.b = (*data_100609a0)[ebx_1].b
10045273          eax_2 = eax_3 & 2
1004525d      else
10045262          eax_2 = sub_10046f7a(eax, edx, arg1, ebx_1)
10045262  
10045278  if (ebx_1 s>= 0x100 || eax_2 != 0)
10045286      char eax_5 = (ebx_1 s>> 8).b
10045291      void* var_10_1
10045291      
10045291      if ((*(&(*data_100609a0)[zx.d(eax_5)] + 1) & 0x80) == 0)
100452a1          arg_4:1.b = 0
100452a5          arg_4.b = ebx_1.b
100452a8          var_10_1 = 1
10045291      else
10045293          arg_4:2.b = 0
10045297          arg_4.b = eax_5
1004529a          arg_4:1.b = ebx_1.b
1004529d          var_10_1 = 2
1004529d      
100452c5      int32_t eax_7 =
100452c5          LCMapString_Generic(data_1006343c, 0x200, &arg_4, var_10_1, &var_8, 3, 0, 1)
100452c5      
100452cf      if (eax_7 != 0)
100452d4          if (eax_7 != 1)
100452e7              return zx.d(var_8:1.b) << 8 | zx.d(var_8.b)
100452e7          
100452d6          return zx.d(var_8.b)
100452d6  
1004527a  return ebx_1

100452ec                                      cc cc cc cc                                                              ....

100452f0    char* sub_100452f0(char* arg1, char* arg2, int32_t arg3)

100452f5  char* esi = arg2
100452fb  char* edi = arg1
1004530a  uint32_t eax_1
1004530a  
1004530a  if (edi u> esi && edi u< &esi[arg3])
10045488      void* esi_1 = &esi[arg3 - 4]
1004548c      void* edi_1 = &edi[arg3 - 4]
10045496      uint32_t ecx_4
10045496      
10045496      if ((edi_1 & 3) == 0)
10045498          ecx_4 = arg3 u>> 2
10045498          
100454a1          if (ecx_4 u< 8)
100454b2              jump((&jump_table_10045580)[neg.d(ecx_4)])
100454b2          
100454a4          edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - (ecx_4 << 2), 
100454a4              src: esi_1 - (ecx_4 << 2), n: ecx_4 << 2)
100454a4          
100454a7          switch (arg3 & 3)
100455e6              case 0
100455e6                  return arg1
100454a7              case 1
100454a7                  goto label_100455e8
100454a7              case 2
100454a7                  goto label_100455f8
100454a7              case 3
100454a7                  goto label_1004560c
10045496      else if (arg3 u< 4)
100454c6          switch (arg3)
100455e6              case 0
100455e6                  return arg1
100455e8              case 1
100455e8                  label_100455e8:
100455e8                  eax_1.b = *(esi_1 + 3)
100455eb                  *(edi_1 + 3) = eax_1.b
100455f4                  return arg1
100455f8              case 2
100455f8                  label_100455f8:
100455f8                  eax_1.b = *(esi_1 + 3)
100455fb                  *(edi_1 + 3) = eax_1.b
100455fe                  eax_1.b = *(esi_1 + 2)
10045601                  *(edi_1 + 2) = eax_1.b
1004560a                  return arg1
1004560c              case 3
1004560c                  label_1004560c:
1004560c                  eax_1.b = *(esi_1 + 3)
1004560f                  *(edi_1 + 3) = eax_1.b
10045612                  eax_1.b = *(esi_1 + 2)
10045615                  *(edi_1 + 2) = eax_1.b
10045618                  eax_1.b = *(esi_1 + 1)
1004561b                  *(edi_1 + 1) = eax_1.b
10045624                  return arg1
100454c6      else
100454c8          eax_1 = edi_1 & 3
100454cb          int32_t ecx_6 = arg3 - eax_1
100454cb          
100454cd          switch (jump_table_100454d8[eax_1])
100454e8              case 0x100454e8
100454e8                  eax_1.b = *(esi_1 + 3)
100454ed                  *(edi_1 + 3) = eax_1.b
100454f1                  ecx_4 = ecx_6 u>> 2
100454f1                  
100454f8                  if (ecx_4 u< 8)
100454b2                      jump((&jump_table_10045580)[neg.d(ecx_4)])
100454b2                  
100454fb                  edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - 1 - (ecx_4 << 2), 
100454fb                      src: esi_1 - 1 - (ecx_4 << 2), n: ecx_4 << 2)
100454fb                  
100454fe                  switch (3 & ecx_6)
100455e6                      case 0
100455e6                          return arg1
100454fe                      case 1
100454fe                          goto label_100455e8
100454fe                      case 2
100454fe                          goto label_100455f8
100454fe                      case 3
100454fe                          goto label_1004560c
10045508              case 0x10045508
10045508                  eax_1.b = *(esi_1 + 3)
1004550d                  *(edi_1 + 3) = eax_1.b
10045510                  eax_1.b = *(esi_1 + 2)
10045513                  ecx_4 = ecx_6 u>> 2
10045516                  *(edi_1 + 2) = eax_1.b
10045516                  
10045522                  if (ecx_4 u< 8)
100454b2                      jump((&jump_table_10045580)[neg.d(ecx_4)])
100454b2                  
10045525                  edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - 2 - (ecx_4 << 2), 
10045525                      src: esi_1 - 2 - (ecx_4 << 2), n: ecx_4 << 2)
10045525                  
10045528                  switch (3 & ecx_6)
100455e6                      case 0
100455e6                          return arg1
10045528                      case 1
10045528                          goto label_100455e8
10045528                      case 2
10045528                          goto label_100455f8
10045528                      case 3
10045528                          goto label_1004560c
10045530              case 0x10045530
10045530                  eax_1.b = *(esi_1 + 3)
10045535                  *(edi_1 + 3) = eax_1.b
10045538                  eax_1.b = *(esi_1 + 2)
1004553b                  *(edi_1 + 2) = eax_1.b
1004553e                  eax_1.b = *(esi_1 + 1)
10045541                  ecx_4 = ecx_6 u>> 2
10045544                  *(edi_1 + 1) = eax_1.b
10045544                  
10045550                  if (ecx_4 u< 8)
100454b2                      jump((&jump_table_10045580)[neg.d(ecx_4)])
100454b2                  
10045557                  edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - 3 - (ecx_4 << 2), 
10045557                      src: esi_1 - 3 - (ecx_4 << 2), n: ecx_4 << 2)
10045557                  
1004555a                  switch (3 & ecx_6)
100455e6                      case 0
100455e6                          return arg1
1004555a                      case 1
1004555a                          goto label_100455e8
1004555a                      case 2
1004555a                          goto label_100455f8
1004555a                      case 3
1004555a                          goto label_1004560c
1004555a  
10045316  uint32_t ecx_1
10045316  int32_t edx_1
10045316  
10045316  if ((edi & 3) != 0)
10045336      if (arg3 u< 4)
10045344          jump(*(((arg3 - 4) << 2) + &data_10045448))
10045344      
10045338      eax_1 = edi & 3
1004533b      int32_t ecx_3 = arg3 - 4 + eax_1
1004533b      
1004533d      switch (jump_table_10045350[eax_1])
10045360          case 0x10045360
10045360              edx_1 = 3 & ecx_3
10045362              eax_1.b = *esi
10045364              *edi = eax_1.b
10045366              eax_1.b = esi[1]
10045369              edi[1] = eax_1.b
1004536c              eax_1.b = esi[2]
1004536f              ecx_1 = ecx_3 u>> 2
10045372              edi[2] = eax_1.b
10045375              esi = &esi[3]
10045378              edi = &edi[3]
10045378              
1004537e              if (ecx_1 u>= 8)
10045380                  edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
10045380                  
10045382                  switch (edx_1)
1004544e                      case 0
1004544e                          return arg1
10045382                      case 1
10045382                          goto label_10045450
10045382                      case 2
10045382                          goto label_1004545c
10045382                      case 3
10045382                          goto label_10045470
1004538c          case 0x1004538c
1004538c              edx_1 = 3 & ecx_3
1004538e              eax_1.b = *esi
10045390              *edi = eax_1.b
10045392              eax_1.b = esi[1]
10045395              ecx_1 = ecx_3 u>> 2
10045398              edi[1] = eax_1.b
1004539b              esi = &esi[2]
1004539e              edi = &edi[2]
1004539e              
100453a4              if (ecx_1 u>= 8)
100453a6                  edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
100453a6                  
100453a8                  switch (edx_1)
1004544e                      case 0
1004544e                          return arg1
100453a8                      case 1
100453a8                          goto label_10045450
100453a8                      case 2
100453a8                          goto label_1004545c
100453a8                      case 3
100453a8                          goto label_10045470
100453b0          case 0x100453b0
100453b0              edx_1 = 3 & ecx_3
100453b2              eax_1.b = *esi
100453b4              *edi = eax_1.b
100453b6              esi = &esi[1]
100453b7              ecx_1 = ecx_3 u>> 2
100453ba              edi = &edi[1]
100453ba              
100453be              if (ecx_1 u>= 8)
100453c0                  edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
100453c0                  
100453c2                  switch (edx_1)
1004544e                      case 0
1004544e                          return arg1
100453c2                      case 1
100453c2                          goto label_10045450
100453c2                      case 2
100453c2                          goto label_1004545c
100453c2                      case 3
100453c2                          goto label_10045470
10045316  else
10045318      ecx_1 = arg3 u>> 2
1004531b      edx_1 = arg3 & 3
1004531b      
10045321      if (ecx_1 u>= 8)
10045323          edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
10045323          
10045325          switch (edx_1)
1004544e              case 0
1004544e                  return arg1
10045325              case 1
10045325                  goto label_10045450
10045325              case 2
10045325                  goto label_1004545c
10045325              case 3
10045325                  goto label_10045470
10045325  
1004534c  switch (ecx_1)
1004534c      case 0
1004534c          goto label_1004542f
1004534c      case 1
1004534c          goto label_10045420
1004534c      case 2
1004534c          goto label_10045418
1004534c      case 3
1004534c          goto label_10045410
1004534c      case 4
1004534c          goto label_10045408
1004534c      case 5
1004534c          goto label_10045400
1004534c      case 6
1004534c          goto label_100453f8
100453f0      case 7
100453f0          *(edi + (ecx_1 << 2) - 0x1c) = *(esi + (ecx_1 << 2) - 0x1c)
100453f8          label_100453f8:
100453f8          *(edi + (ecx_1 << 2) - 0x18) = *(esi + (ecx_1 << 2) - 0x18)
10045400          label_10045400:
10045400          *(edi + (ecx_1 << 2) - 0x14) = *(esi + (ecx_1 << 2) - 0x14)
10045408          label_10045408:
10045408          *(edi + (ecx_1 << 2) - 0x10) = *(esi + (ecx_1 << 2) - 0x10)
10045410          label_10045410:
10045410          *(edi + (ecx_1 << 2) - 0xc) = *(esi + (ecx_1 << 2) - 0xc)
10045418          label_10045418:
10045418          *(edi + (ecx_1 << 2) - 8) = *(esi + (ecx_1 << 2) - 8)
10045420          label_10045420:
10045420          *(edi + (ecx_1 << 2) - 4) = *(esi + (ecx_1 << 2) - 4)
10045424          eax_1 = ecx_1 << 2
1004542b          esi = &esi[eax_1]
1004542d          edi = &edi[eax_1]
1004542f          label_1004542f:
1004542f          
1004542f          switch (edx_1)
1004544e              case 0
1004544e                  return arg1
10045450              case 1
10045450                  label_10045450:
10045450                  eax_1.b = *esi
10045452                  *edi = eax_1.b
1004545a                  return arg1
1004545c              case 2
1004545c                  label_1004545c:
1004545c                  eax_1.b = *esi
1004545e                  *edi = eax_1.b
10045460                  eax_1.b = esi[1]
10045463                  edi[1] = eax_1.b
1004546c                  return arg1
10045470              case 3
10045470                  label_10045470:
10045470                  eax_1.b = *esi
10045472                  *edi = eax_1.b
10045474                  eax_1.b = esi[1]
10045477                  edi[1] = eax_1.b
1004547a                  eax_1.b = esi[2]
1004547d                  edi[2] = eax_1.b
10045486                  return arg1

1004534b                                   90                                                                         .
10045353                                                           90 60 53 04 10 8c 53 04 10 b0 53 04 10                     .`S...S...S..
10045389                             8d 49 00                                                                       .I.
100453af                                               90                                                                 .
100453c9                             8d 49 00                                                                       .I.
100453cc  uint32_t jump_table_100453cc[0x8] = 
100453cc  {
100453cc      [0x0] =  0x1004542f
100453d0      [0x1] =  0x1004541c
100453d4      [0x2] =  0x10045414
100453d8      [0x3] =  0x1004540c
100453dc      [0x4] =  0x10045404
100453e0      [0x5] =  0x100453fc
100453e4      [0x6] =  0x100453f4
100453e8      [0x7] =  0x100453ec
100453ec  }

10045436                                                                    8b ff                                                ..
10045438  uint32_t jump_table_10045438[0x4] = 
10045438  {
10045438      [0x0] =  0x10045448
1004543c      [0x1] =  0x10045450
10045440      [0x2] =  0x1004545c
10045444      [0x3] =  0x10045470
10045448  }

1004544f                                               90                                                                 .
1004545b                                                                                   90                                         .
1004546d                                         8d 49 00                                                               .I.
10045487                       90                                                                                 .
100454ae                                            8b ff                                                                ..
100454b9                                                                             8d 49 00                                       .I.
100454db                                                                                   90 e8 54 04 10                             ..T..
100454e0  08 55 04 10 30 55 04 10                                                                          .U..0U..
10045505                 8d 49 00                                                                               .I.
1004552f                                               90                                                                 .
10045561     8d 49 00                                                                                       .I.

10045564  void* data_10045564 = 0x10045584
10045568  void* data_10045568 = 0x1004558c
1004556c  void* data_1004556c = 0x10045594
10045570  void* data_10045570 = 0x1004559c
10045574  void* data_10045574 = 0x100455a4
10045578  void* data_10045578 = 0x100455ac
1004557c  void* data_1004557c = 0x100455b4
10045580  void* jump_table_10045580 = 0x100455c7

10045584              8b 44 8e 1c 89 44 8f 1c 8b 44 8e 18 89 44 8f 18 8b 44 8e 14 89 44 8f 14 8b 44 8e 10      .D...D...D...D...D...D...D..
100455a0  89 44 8f 10 8b 44 8e 0c 89 44 8f 0c 8b 44 8e 08 89 44 8f 08 8b 44 8e 04 89 44 8f 04 8d 04 8d 00  .D...D...D...D...D...D...D......
100455c0  00 00 00 03 f0 03 f8 ff 24 95 d0 55 04 10 8b ff                                                  ........$..U....
100455d0  uint32_t jump_table_100455d0[0x4] = 
100455d0  {
100455d0      [0x0] =  0x100455e0
100455d4      [0x1] =  0x100455e8
100455d8      [0x2] =  0x100455f8
100455dc      [0x3] =  0x1004560c
100455e0  }

100455e7                       90                                                                                 .
100455f5                                                                 8d 49 00                                               .I.
1004560b                                   90                                                                         .
10045625                 cc cc cc cc cc cc cc cc cc cc cc                                                       ...........

10045630    char* sub_10045630(char* arg1, void* arg2)

10045630  char* ecx_1 = arg2
10045637  int16_t edx
10045637  edx.b = *ecx_1
10045639  char* result = arg1
10045639  
1004563f  if (edx.b == 0)
100456af      return result
100456af  
10045641  edx:1.b = ecx_1[1]
10045641  
10045646  if (edx:1.b != 0)
1004564a      while (true)
1004564a          void* ecx = arg2
1004564e          int16_t eax
1004564e          eax.b = *result
10045650          void* esi_2 = &result[1]
10045650          
10045653          if (eax.b != edx.b)
10045657              if (eax.b == 0)
10045669                  return 0
10045669              
10045659              while (true)
10045659                  eax.b = *esi_2
1004565b                  esi_2 += 1
1004565c                  label_1004565c:
1004565c                  
1004565e                  if (eax.b == edx.b)
1004565e                      break
1004565e                  
10045662                  if (eax.b == 0)
10045669                      return 0
10045669          
1004566a          eax.b = *esi_2
1004566c          esi_2 += 1
1004566c          
1004566f          if (eax.b != edx:1.b)
1004566f              break
1004566f          
10045671          result = esi_2 - 1
10045671          
10045674          while (true)
10045674              eax:1.b = *(ecx + 2)
10045674              
10045679              if (eax:1.b != 0)
1004567b                  eax.b = *esi_2
1004567d                  esi_2 += 2
1004567d                  
10045682                  if (eax.b != eax:1.b)
10045682                      break
10045682                  
10045684                  eax.b = *(ecx + 3)
10045684                  
10045689                  if (eax.b != 0)
1004568b                      eax:1.b = *(esi_2 - 1)
1004568e                      ecx += 2
1004568e                      
10045693                      if (eax.b != eax:1.b)
10045693                          break
10045693                      
10045693                      continue
10045693              
100456a9              return &result[0xffffffff]
100456a9      
1004566f      goto label_1004565c
1004566f  
1004569c  int32_t eax_2
1004569c  eax_2.b = edx.b
10045706  int32_t ebx
10045706  int32_t var_4_1 = ebx
1004570c  char* edx_1 = arg1
1004570c  
10045716  while ((edx_1 & 3) != 0)
10045718      ecx_1.b = *edx_1
1004571a      edx_1 = &edx_1[1]
1004571a      
1004571d      if (ecx_1.b == eax_2.b)
100456f4          return &edx_1[0xffffffff]
100456f4      
10045721      if (ecx_1.b == 0)
10045777          return 0
10045777  
1004572b  int32_t ebx_7 = eax_2 | eax_2 << 8
1004572d  int32_t edi
1004572d  int32_t var_8_1 = edi
10045733  int32_t esi
10045733  int32_t var_c_1 = esi
10045734  int32_t ebx_9 = ebx_7 << 0x10 | ebx_7
10045734  
10045736  while (true)
10045736      int32_t ecx_2 = *edx_1
10045741      int32_t ecx_3 = ecx_2 ^ ebx_9
10045751      edx_1 = &edx_1[4]
10045751      
1004575a      if (((ecx_3 ^ 0xffffffff ^ (0x7efefeff + ecx_3)) & 0x81010100) != 0)
10045778          int32_t eax_14 = *(edx_1 - 4)
10045778          
1004577d          if (eax_14.b == ebx_9.b)
100457bb              return &edx_1[0xfffffffc]
100457bb          
10045781          if (eax_14.b == 0)
10045781              break
10045781          
10045785          if (eax_14:1.b == ebx_9.b)
100457b4              return &edx_1[0xfffffffd]
100457b4          
10045789          if (eax_14:1.b == 0)
10045789              break
10045789          
1004578b          uint16_t eax_15 = (eax_14 u>> 0x10).w
1004578b          
10045790          if (eax_15.b == ebx_9.b)
100457ad              return &edx_1[0xfffffffe]
100457ad          
10045794          if (eax_15.b == 0)
10045794              break
10045794          
10045798          if (eax_15:1.b == ebx_9.b)
100457a6              return &edx_1[0xffffffff]
100457a6          
1004579c          if (eax_15:1.b == 0)
1004579c              break
1004575a      else
1004575c          int32_t eax_11 = (ecx_2 ^ 0xffffffff ^ (0x7efefeff + ecx_2)) & 0x81010100
1004575c          
10045761          if (eax_11 != 0)
10045768              if ((eax_11 & 0x1010100) != 0)
10045768                  break
10045768              
10045770              if (((0x7efefeff + ecx_2) & 0x80000000) == 0)
10045770                  break
10045770  
10045777  return 0


100456b0    int32_t StrCompareN(void* arg1, void* arg2, int32_t arg3)

100456b6  int32_t i = arg3
100456b6  
100456b9  if (i != 0)
100456bb      int32_t i_2 = i
100456bd      void* edi_1 = arg1
100456c0      void* esi_1 = edi_1
100456c0      
100456c4      while (i != 0)
100456c4          bool cond:0_1 = 0 != *edi_1
100456c4          edi_1 += 1
100456c4          i -= 1
100456c4          
100456c4          if (not(cond:0_1))
100456c4              break
100456c4      
100456c8      int32_t i_1 = neg.d(i) + i_2
100456ca      void* edi_2 = esi_1
100456cc      void* esi_2 = arg2
100456cc      
100456cf      while (i_1 != 0)
100456cf          bool cond:1_1 = *esi_2 == *edi_2
100456cf          esi_2 += 1
100456cf          edi_2 += 1
100456cf          i_1 -= 1
100456cf          
100456cf          if (not(cond:1_1))
100456cf              break
100456cf      
100456d1      char eax_1 = *(esi_2 - 1)
100456d4      i = 0
100456d6      char temp0_1 = *(edi_2 - 1)
100456d6      
100456d9      if (eax_1 u> temp0_1)
100456df          return not.d(i)
100456df      
100456db      if (eax_1 != temp0_1)
100456df          return not.d(0xfffffffe)
100456df  
100456e7  return i

100456e8                          cc cc cc cc cc cc cc cc                                                          ........
100456f5                                                                 8d a4 24 00 00 00 00 8d 64 24 00                       ..$.....d$.

10045700    void* sub_10045700(char* arg1, char arg2)

10045702  int32_t eax
10045702  eax.b = arg2
1004570c  char* edx = arg1
1004570c  
10045716  while ((edx & 3) != 0)
10045718      char ecx = *edx
1004571a      edx = &edx[1]
1004571a      
1004571d      if (ecx == eax.b)
100456f4          return &edx[0xffffffff]
100456f4      
10045721      if (ecx == 0)
10045777          return 0
10045777  
1004572b  int32_t ebx_1 = eax | eax << 8
10045734  int32_t ebx_3 = ebx_1 << 0x10 | ebx_1
10045734  
10045736  while (true)
10045736      int32_t ecx_1 = *edx
10045741      int32_t ecx_2 = ecx_1 ^ ebx_3
10045751      edx = &edx[4]
10045751      
1004575a      if (((ecx_2 ^ 0xffffffff ^ (0x7efefeff + ecx_2)) & 0x81010100) != 0)
10045778          int32_t eax_9 = *(edx - 4)
10045778          
1004577d          if (eax_9.b == ebx_3.b)
100457bb              return &edx[0xfffffffc]
100457bb          
10045781          if (eax_9.b == 0)
10045781              break
10045781          
10045785          if (eax_9:1.b == ebx_3.b)
100457b4              return &edx[0xfffffffd]
100457b4          
10045789          if (eax_9:1.b == 0)
10045789              break
10045789          
1004578b          uint16_t eax_10 = (eax_9 u>> 0x10).w
1004578b          
10045790          if (eax_10.b == ebx_3.b)
100457ad              return &edx[0xfffffffe]
100457ad          
10045794          if (eax_10.b == 0)
10045794              break
10045794          
10045798          if (eax_10:1.b == ebx_3.b)
100457a6              return &edx[0xffffffff]
100457a6          
1004579c          if (eax_10:1.b == 0)
1004579c              break
1004575a      else
1004575c          int32_t eax_6 = (ecx_1 ^ 0xffffffff ^ (0x7efefeff + ecx_1)) & 0x81010100
1004575c          
10045761          if (eax_6 != 0)
10045768              if ((eax_6 & 0x1010100) != 0)
10045768                  break
10045768              
10045770              if (((0x7efefeff + ecx_1) & 0x80000000) == 0)
10045770                  break
10045770  
10045777  return 0


100457bc    int32_t sub_100457bc(int32_t* arg1)

100457c9  SYSTEMTIME systemTime_1
100457c9  GetLocalTime(lpSystemTime: &systemTime_1)
100457d3  SYSTEMTIME systemTime
100457d3  GetSystemTime(lpSystemTime: &systemTime)
10045818  int32_t eax_1
10045818  
10045818  if (systemTime.wMinute != data_100633a2 || systemTime.wHour != data_100633a0
10045818          || systemTime.wDay != data_1006339e || systemTime.wMonth != data_1006339a
10045818          || systemTime.wYear != data_10063398)
10045828      TIME_ZONE_INFORMATION timeZoneInformation
10045828      uint32_t eax_2 = GetTimeZoneInformation(lpTimeZoneInformation: &timeZoneInformation)
10045828      
10045831      if (eax_2 == 0xffffffff)
1004584e          eax_1 = 0xffffffff
10045831      else if (eax_2 != 2 || timeZoneInformation.DaylightDate.wMonth == 0
10045831              || timeZoneInformation.DaylightBias == 0)
1004584a          eax_1 = 0
10045843      else
10045847          eax_1 = 1
10045847      
1004585b      data_10063398 = systemTime.wYear
1004585b      (&data_10063398)[1] = systemTime.wMonth
1004585b      void* edi_1 = &data_1006339c
1004585b      var_20
1004585b      void* esi_1 = &var_20
1004585c      *edi_1 = *esi_1
1004585c      void* edi_2 = edi_1 + 4
1004585c      void* esi_2 = esi_1 + 4
1004585d      *edi_2 = *esi_2
1004585e      *(edi_2 + 4) = *(esi_2 + 4)
10045860      data_10063390 = eax_1
10045818  else
1004581a      eax_1 = data_10063390
1004581a  
10045885  int32_t result = ComputeTimeOffsetOrIndex(zx.d(systemTime_1.wYear), 
10045885      zx.d(systemTime_1.wMonth), zx.d(systemTime_1.wDay), zx.d(systemTime_1.wHour), 
10045885      zx.d(systemTime_1.wMinute), zx.d(systemTime_1.wSecond), eax_1)
10045885  
10045892  if (arg1 != 0)
10045894      *arg1 = result
10045894  
10045897  return result


10045898    int32_t sub_10045898(int32_t* arg1, void* arg2)

100458a0  sub_10047aed(arg1)
100458a6  int32_t eax = AllocateArenaBufferIfNeeded(arg1)
100458b1  void arg_c
100458b1  void* var_18 = &arg_c
100458b7  int32_t result = sub_10048b18(arg1, arg2)
100458c0  ResetArenaStreamState(eax, arg1)
100458c6  sub_10047b3f(arg1)
100458d3  return result


100458d4    uint32_t __fastcall sub_100458d4(int32_t arg1)

100458d7  FILETIME systemTimeAsFileTime
100458d7  systemTimeAsFileTime.dwHighDateTime = arg1
100458d8  systemTimeAsFileTime.dwLowDateTime = arg1
100458de  GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: &systemTimeAsFileTime)
100458ed  int32_t eax
100458ed  int32_t edx
100458ed  eax, edx = __allmul(systemTimeAsFileTime.dwHighDateTime, 0, 0, 1)
100458f2  int32_t eax_1 = eax - data_100633a8
100458f8  uint32_t dwLowDateTime = systemTimeAsFileTime.dwLowDateTime
10045916  return __aulldiv(eax_1 + dwLowDateTime, 
10045916      adc.d(sbb.d(edx, data_100633ac, eax u< data_100633a8), 0, 
10045916          eax_1 + dwLowDateTime u< eax_1), 
10045916      0x2710, 0)


10045917    int32_t __fastcall sub_10045917(int32_t arg1)

1004591a  FILETIME systemTimeAsFileTime
1004591a  systemTimeAsFileTime.dwHighDateTime = arg1
1004591b  systemTimeAsFileTime.dwLowDateTime = arg1
10045921  GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: &systemTimeAsFileTime)
10045930  int32_t eax
10045930  int32_t edx
10045930  eax, edx = __allmul(systemTimeAsFileTime.dwHighDateTime, 0, 0, 1)
10045935  uint32_t dwLowDateTime = systemTimeAsFileTime.dwLowDateTime
1004593a  int32_t result = eax + dwLowDateTime
1004593e  data_100633a8 = result
10045943  data_100633ac = adc.d(edx, 0, eax + dwLowDateTime u< eax)
1004594b  return result


1004594c    int32_t sub_1004594c(int32_t* arg1)

10045953  if (arg1 == 0)
1004595d      return sub_10045a0e(arg1)
1004595d  
10045960  sub_10047aed(arg1)
10045966  int32_t result = sub_1004597b(arg1)
1004596e  sub_10047b3f(arg1)
1004597a  return result


1004597b    int32_t sub_1004597b(int32_t* arg1)

10045989  if (sub_100459a9(arg1) != 0)
1004598f      return 0xffffffff
1004598f  
10045994  if ((*(arg1 + 0xd) & 0x40) == 0)
100459a8      return 0
100459a8  
10045999  enum WIN32_ERROR eax_2 = sub_1004a288(arg1[4])
1004599e  int32_t eax_3 = neg.d(eax_2)
100459a4  return sbb.d(eax_3, eax_3, eax_2 != NO_ERROR)


100459a9    int32_t sub_100459a9(int32_t* arg1)

100459af  int32_t result = 0
100459b2  int16_t eax = (arg1[3]).w
100459b2  
100459c3  if ((eax.b & 3) == 2 && (eax & 0x108) != 0)
100459c5      char* eax_1 = arg1[2]
100459ca      uint32_t edi_2 = *arg1 - eax_1
100459ca      
100459ce      if (edi_2 s> 0)
100459df          if (WriteHandle(arg1[4], eax_1, edi_2) != edi_2)
100459ef              arg1[3] |= 0x20
100459f3              result = 0xffffffff
100459df          else
100459e1              int32_t eax_3 = arg1[3]
100459e1              
100459e6              if ((eax_3.b & 0x80) != 0)
100459e8                  eax_3.b &= 0xfd
100459ea                  arg1[3] = eax_3
100459ea  
100459f6  int32_t eax_4 = arg1[2]
100459f9  arg1[1] = 0
100459fd  *arg1 = eax_4
10045a04  return result


10045a05    int32_t sub_10045a05()

10045a0d  return sub_10045a0e(1)


10045a0e    int32_t sub_10045a0e(int32_t arg1)

10045a13  int32_t ebx = 0
10045a15  int32_t edi = 0
10045a17  LockArenaSection(index: 2)
10045a1c  int32_t i = 0
10045a1c  
10045a25  if (data_1006b3c0 s> 0)
10045a99      do
10045a2c          void* eax_2 = *(data_1006a080 + (i << 2))
10045a2c          
10045a37          if (eax_2 != 0 && (*(eax_2 + 0xc) & 0x83) != 0)
10045a3b              sub_10047b1c(i, eax_2)
10045a47              int32_t* eax_4 = *(data_1006a080 + (i << 2))
10045a4a              char ecx_1 = (eax_4[3]).b
10045a4a              
10045a50              if ((ecx_1 & 0x83) != 0)
10045a57                  if (arg1 == 1)
10045a63                      if (sub_1004597b(eax_4) != 0xffffffff)
10045a65                          ebx += 1
10045a57                  else if (arg1 == 0 && (ecx_1 & 2) != 0)
10045a75                      int32_t eax_6 = sub_1004597b(eax_4)
10045a75                      
10045a7e                      if (eax_6 == 0xffffffff)
10045a80                          edi |= eax_6
10045a80              
10045a8b              sub_10047b6e(i, *(data_1006a080 + (i << 2)))
10045a8b          
10045a92          i += 1
10045a99      while (i s< data_1006b3c0)
10045a99  
10045a9d  UnlockArenaSection(index: 2)
10045a9d  
10045aaa  if (arg1 == 1)
10045ab1      return ebx
10045ab1  
10045aac  return edi


10045ab2    int32_t sub_10045ab2(int32_t* arg1, void* arg2, int32_t arg3)

10045aba  sub_10047aed(arg1)
10045ac0  int32_t eax = AllocateArenaBufferIfNeeded(arg1)
10045ac5  int32_t var_18 = arg3
10045ad0  int32_t result = sub_10048b18(arg1, arg2)
10045ad9  ResetArenaStreamState(eax, arg1)
10045adf  sub_10047b3f(arg1)
10045aec  return result


10045aed    void Gladiator_Free(void* arg1)

10045af4  if (arg1 != 0)
10045af8      LockArenaSection(index: 9)
10045afe      void* eax_1 = ArenaFindChunkHeader(arg1)
10045afe      
10045b07      if (eax_1 != 0)
10045b0b          ArenaDetachAndFreeOld(eax_1, arg1)
10045b12          UnlockArenaSection(index: 9)
10045b1b          return 
10045b1b      
10045b1e      UnlockArenaSection(index: 9)
10045b2d      HeapFree(hHeap: g_heapHandle, dwFlags: HEAP_NONE, lpMem: arg1)


10045b35    void* sub_10045b35(int32_t* arg1)

10045b39  void* eax = sub_1004b41a(arg1)
10045b39  
10045b41  if (eax == 0)
10045b4d      return 0
10045b4d  
10045b4a  return sub_1004b328(eax)

10045b4e                                            cc cc                                                                ..

10045b50    int80_t sub_10045b50(long double arg1 @ st0)

10045b63  int32_t edx
10045b63  int16_t x87control
10045b63  return start(__checkTOS_withFB((fconvert.d(arg1)).d), x87control, arg1, edx)

10045b64              8d 54 24 04 e8 28 5c 00 00                                                               .T$..(\..

10045b6d    long double __convention("regparm") start(int32_t arg1, int16_t arg2 @ x87control, long double arg3 @ st0, int32_t arg4)

10045b6d  int32_t edx
10045b6d  int32_t var_4 = edx
10045b6f  int16_t x87status
10045b6f  int16_t temp0
10045b6f  temp0, x87status = __fnstcw_memmem16(arg2)
10045b6f  var_4.w = temp0
10045b72  long double result
10045b72  bool z
10045b72  
10045b72  if (z)
10045bd0      int32_t eax
10045bd0      
10045bd0      if ((arg1 & 0xfffff) != 0 || arg4 != 0)
10045bbd          long double result_3
10045bbd          result_3, eax = __convertTOStoQNaN(arg1, arg3)
10045bbd          result = result_3
10045bd0      else
10045bd4          result = data_100611c0
10045bda          eax = 1
10045bda      
10045be6      if (data_10063384 == 0)
10045bfd          return __startOneArgErrorHandling(eax, 0x1e, result, &data_10060950, var_4)
10045b72  else
10045b7a      int16_t x87control
10045b7a      int16_t x87status_1
10045b7a      
10045b7a      if (var_4.w != 0x27f)
10045b7c          x87control, x87status_1 = __fldcw_memmem16(0x27f)
10045b82      long double result_1
10045b82      bool c2_1
10045b82      result_1, c2_1 = __fsin(arg3)
10045b82      result = result_1
10045b82      bool c1_1 = unimplemented  {fsin }
10045b85      bool c0
10045b85      bool c3
10045b85      arg1.w = (c0 ? 1 : 0) << 8 | (c1_1 ? 1 : 0) << 9 | (c2_1 ? 1 : 0) << 0xa
10045b85          | (c3 ? 1 : 0) << 0xe
10045b85      
10045b88      if (test_bit(arg1:1.b, 2))
10045bad          bool c1_2 = false
10045bad          long double result_4 = result
10045bad          long double x87_r0 = data_1005862a
10045bad          
10045bb5          do
10045baf              long double result_5
10045baf              uint8_t temp0_2
10045baf              bool c2_2
10045baf              result_5, c2_2, temp0_2 = __fprem1(result_4, x87_r0)
10045baf              result_4 = result_5
10045baf              
10045baf              if (not(c2_2))
10045baf                  c0 = (temp0_2 & 4) != 0
10045baf                  c1_2 = (temp0_2 & 1) != 0
10045baf                  c3 = (temp0_2 & 2) != 0
10045baf              
10045bb2              arg1.w = (c0 ? 1 : 0) << 8 | (c1_2 ? 1 : 0) << 9 | (c2_2 ? 1 : 0) << 0xa
10045bb2                  | (c3 ? 1 : 0) << 0xe | 0x3800
10045bb5          while (test_bit(arg1:1.b, 2))
10045bb5          
10045bb9          long double result_2
10045bb9          result_2, c2_1 = __fsin(x87_r0)
10045bb9          result = result_2
10045bb9          c1_1 = unimplemented  {fsin }
10045bb9      
10045b91      if (data_10063384 == 0)
1004b7fb          arg1.w = var_4.w
1004b7fb          
1004b803          if (arg1.w != 0x27f)
1004b805              arg1.w &= 0x20
1004b805              
1004b809              if (arg1.w != 0)
1004b80c                  arg1.w = (c0 ? 1 : 0) << 8 | (c1_1 ? 1 : 0) << 9 | (c2_1 ? 1 : 0) << 0xa
1004b80c                      | (c3 ? 1 : 0) << 0xe
1004b80e                  arg1.w &= 0x20
1004b80e                  
1004b812                  if (arg1.w != 0)
1004b81f                      return __startOneArgErrorHandling(8, 0x1e, result, &data_10060950, 
1004b81f                          var_4)
1004b81f              
1004b820              int16_t x87control_2
1004b820              int16_t x87status_3
1004b820              x87control_2, x87status_3 = __fldcw_memmem16(var_4.w)
1004b820          
1004b824          return result
1004b824  
1004b7f4  int16_t x87control_1
1004b7f4  int16_t x87status_2
1004b7f4  
1004b7f4  if (var_4.w != 0x27f)
1004b7f6      x87control_1, x87status_2 = __fldcw_memmem16(var_4.w)
1004b7fa  return result

10045bfe                                                                                            cc cc                                ..

10045c00    int80_t sub_10045c00(long double arg1 @ st0)

10045c13  int32_t edx
10045c13  int16_t x87control
10045c13  return sub_10045c1d(__checkTOS_withFB((fconvert.d(arg1)).d), x87control, arg1, edx)

10045c14                                                              8d 54 24 04 e8 78 5b 00 00                               .T$..x[..

10045c1d    long double __convention("regparm") sub_10045c1d(int32_t arg1, int16_t arg2 @ x87control, long double arg3 @ st0, int32_t arg4)

10045c1d  int32_t edx
10045c1d  int32_t var_4 = edx
10045c1f  int16_t x87status
10045c1f  int16_t temp0
10045c1f  temp0, x87status = __fnstcw_memmem16(arg2)
10045c1f  var_4.w = temp0
10045c22  long double result
10045c22  bool z
10045c22  
10045c22  if (z)
10045c80      int32_t eax
10045c80      
10045c80      if ((arg1 & 0xfffff) != 0 || arg4 != 0)
10045c6d          long double result_3
10045c6d          result_3, eax = __convertTOStoQNaN(arg1, arg3)
10045c6d          result = result_3
10045c80      else
10045c84          result = data_100611c0
10045c8a          eax = 1
10045c8a      
10045c96      if (data_10063384 == 0)
10045cad          return __startOneArgErrorHandling(eax, 0x12, result, &data_10060960, var_4)
10045c22  else
10045c2a      int16_t x87control
10045c2a      int16_t x87status_1
10045c2a      
10045c2a      if (var_4.w != 0x27f)
10045c2c          x87control, x87status_1 = __fldcw_memmem16(0x27f)
10045c32      long double result_1
10045c32      bool c2_1
10045c32      result_1, c2_1 = __fcos(arg3)
10045c32      result = result_1
10045c32      bool c1_1 = unimplemented  {fcos }
10045c35      bool c0
10045c35      bool c3
10045c35      arg1.w = (c0 ? 1 : 0) << 8 | (c1_1 ? 1 : 0) << 9 | (c2_1 ? 1 : 0) << 0xa
10045c35          | (c3 ? 1 : 0) << 0xe
10045c35      
10045c38      if (test_bit(arg1:1.b, 2))
10045c5d          bool c1_2 = false
10045c5d          long double result_4 = result
10045c5d          long double x87_r0 = data_1005862a
10045c5d          
10045c65          do
10045c5f              long double result_5
10045c5f              uint8_t temp0_2
10045c5f              bool c2_2
10045c5f              result_5, c2_2, temp0_2 = __fprem1(result_4, x87_r0)
10045c5f              result_4 = result_5
10045c5f              
10045c5f              if (not(c2_2))
10045c5f                  c0 = (temp0_2 & 4) != 0
10045c5f                  c1_2 = (temp0_2 & 1) != 0
10045c5f                  c3 = (temp0_2 & 2) != 0
10045c5f              
10045c62              arg1.w = (c0 ? 1 : 0) << 8 | (c1_2 ? 1 : 0) << 9 | (c2_2 ? 1 : 0) << 0xa
10045c62                  | (c3 ? 1 : 0) << 0xe | 0x3800
10045c65          while (test_bit(arg1:1.b, 2))
10045c65          
10045c69          long double result_2
10045c69          result_2, c2_1 = __fcos(x87_r0)
10045c69          result = result_2
10045c69          c1_1 = unimplemented  {fcos }
10045c69      
10045c41      if (data_10063384 == 0)
1004b7fb          arg1.w = var_4.w
1004b7fb          
1004b803          if (arg1.w != 0x27f)
1004b805              arg1.w &= 0x20
1004b805              
1004b809              if (arg1.w != 0)
1004b80c                  arg1.w = (c0 ? 1 : 0) << 8 | (c1_1 ? 1 : 0) << 9 | (c2_1 ? 1 : 0) << 0xa
1004b80c                      | (c3 ? 1 : 0) << 0xe
1004b80e                  arg1.w &= 0x20
1004b80e                  
1004b812                  if (arg1.w != 0)
1004b81f                      return __startOneArgErrorHandling(8, 0x12, result, &data_10060960, 
1004b81f                          var_4)
1004b81f              
1004b820              int16_t x87control_2
1004b820              int16_t x87status_3
1004b820              x87control_2, x87status_3 = __fldcw_memmem16(var_4.w)
1004b820          
1004b824          return result
1004b824  
1004b7f4  int16_t x87control_1
1004b7f4  int16_t x87status_2
1004b7f4  
1004b7f4  if (var_4.w != 0x27f)
1004b7f6      x87control_1, x87status_2 = __fldcw_memmem16(var_4.w)
1004b7fa  return result

10045cae                                            cc cc                                                                ..

10045cb0    int32_t __convention("regparm") sub_10045cb0(int32_t arg1, int32_t arg2, int32_t arg3, char* arg4, char* arg5)

10045cb6  char* esi = arg5
10045cb9  char* edi = arg4
10045cb9  
10045cc6  if (data_1006343c == 0)
10045cc8      int16_t eax
10045cc8      eax.b = 0xff
10045cca      char* edi_1 = edi
10045cca      
10045ccc      while (true)
10045ccc          eax.b = eax.b
10045ccc          
10045cce          if (eax.b == 0)
10045cce              break
10045cce          
10045cd0          eax.b = *esi
10045cd2          esi = &esi[1]
10045cd3          eax:1.b = *edi_1
10045cd5          edi_1 = &edi_1[1]
10045cd5          
10045cd8          if (eax:1.b != eax.b)
10045cda              eax.b -= 0x41
10045cde              arg3.b = sbb.b(arg3.b, arg3.b, eax.b u< 0x1a)
10045ce0              arg3.b &= 0x20
10045ce3              eax.b += arg3.b
10045ce5              eax.b += 0x41
10045ce7              char temp0_1 = eax.b
10045ce7              eax.b = eax:1.b
10045ce7              eax:1.b = temp0_1
10045ce9              eax.b -= 0x41
10045ced              arg3.b = sbb.b(arg3.b, arg3.b, eax.b u< 0x1a)
10045cef              arg3.b &= 0x20
10045cf2              eax.b += arg3.b
10045cf4              eax.b += 0x41
10045cf4              
10045cf8              if (eax.b != eax:1.b)
10045cfa                  eax.b = sbb.b(eax.b, eax.b, eax.b u< eax:1.b)
10045cfa                  bool c_4 = unimplemented  {sbb al, al}
10045cfc                  eax.b = sbb.b(eax.b, 0xff, c_4)
10045cfc                  break
10045cfc      
10045cfe      return sx.d(eax.b)
10045cfe  
10045d03  data_10069f24 += 1
10045d11  int32_t var_14_1
10045d11  
10045d11  if (data_10069f14 s> 0)
10045d17      data_10069f24 -= 1
10045d20      arg3 = LockArenaSection(index: 0x13)
10045d25      var_14_1 = 1
10045d11  else
10045d13      var_14_1 = 0
10045d13  
10045d2c  int32_t result = 0xff
10045d2c  
10045d34  while (true)
10045d34      result.b = result.b
10045d34      
10045d36      if (result.b == 0)
10045d36          break
10045d36      
10045d38      result.b = *esi
10045d3a      esi = &esi[1]
10045d3b      uint32_t ebx_1
10045d3b      ebx_1.b = *edi
10045d3d      edi = &edi[1]
10045d3d      
10045d40      if (result.b != ebx_1.b)
10045d42          int32_t result_1 = result
10045d43          uint32_t var_1c_1 = ebx_1
10045d44          uint32_t eax_1
10045d44          int32_t ecx
10045d44          eax_1, ecx = sub_1004b9aa(arg3)
10045d4e          result, arg3 = sub_1004b9aa(ecx)
10045d4e          
10045d58          if (eax_1.b != result.b)
10045d5a              bool c_6 = unimplemented  {sbb eax, eax}
10045d5c              result = sbb.d(sbb.d(result, result, eax_1.b u< result.b), 0xffffffff, c_6)
10045d5c              break
10045d5c  
10045d64  if (var_14_1 != 0)
10045d71      UnlockArenaSection(index: 0x13)
10045d64  else
10045d66      data_10069f24 -= 1
10045d66  
10045d79  return result


10045d80    int32_t __stdcall Gladiator_Init(int32_t arg1)

10045d87  if (arg1 != 1)
10045e19      if (arg1 != 0)
10045e4a          if (arg1 == 3)
10045e4d              sub_1004940e(nullptr)
10045e4d          
10045e55          return 1
10045e55      
10045e21      if (data_100633b0 s> 0)
10045e23          data_100633b0 -= 1
10045e23          
10045e2f          if (data_100634b8 == 0)
10045e31              __cexit()
10045e31          
10045e36          sub_10048ac4()
10045e3b          FreeTlsContext()
10045e40          sub_1004a357()
10045e55          return 1
10045d87  else
10045d95      data_10063480 = GetVersion()
10045d95      
10045da2      if (sub_1004a31b(1) != 0)
10045dab          int32_t ecx_2
10045dab          ecx_2.b = data_10063480:1.b
10045db1          uint32_t eax_3 = zx.d((data_10063480).b)
10045db6          data_10063480 u>>= 0x10
10045dbd          data_10063488 = eax_3
10045dc2          data_1006348c = ecx_2
10045dcd          data_10063484 = (eax_3 << 8) + ecx_2
10045dcd          
10045dd9          if (InitTlsContext() != 0)
10045dea              data_1006b3c4 = GetCommandLineA()
10045df4              data_100633b4 = DuplicateEnvironmentBlock()
10045dfe              sub_1004bc6c(InitHandleTable())
10045e03              sub_1004bbb3()
10045e08              sub_1004ba75()
10045e0d              data_100633b0 += 1
10045e55              return 1
10045e55          
10045ddb          sub_1004a357()
10045ddb  
10045de0  return 0


10045e59    int32_t __stdcall Gladiator_EntryPoint(int32_t param1, int32_t param2, int32_t param3)

10045e61  int32_t param2_1 = param2
10045e6a  bool cond:0_1
10045e6a  
10045e6a  if (param2_1 == 0)
10045e6c      cond:0_1 = data_100633b0 != 0
10045e9b      label_10045e9b:
10045e9b      
10045e9b      if (not(cond:0_1))
10045e9d          return 0
10045e6a  else if (param2_1 == 1 || param2_1 == 2)
10045e7f      int32_t eax_1 = data_1006b3d4
10045e86      int32_t eax_2
10045e86      
10045e86      if (eax_1 != 0)
10045e8b          eax_2 = eax_1(param1, param2_1, param3)
10045e8b      
10045e8f      if (eax_1 != 0 && eax_2 == 0)
10045e9d          return 0
10045e9d      
10045e91      int32_t param3_1 = param3
10045e92      int32_t param2_2 = param2_1
10045e99      cond:0_1 = Gladiator_Init(param1) != 0
10045e99      goto label_10045e9b
10045ea1  int32_t param3_2 = param3
10045ea2  int32_t param2_3 = param2_1
10045ea3  int32_t param1_1 = param1
10045eac  param2 = 1
10045eac  
10045ec4  if (param2_1 != 1 && (param2_1 == 0 || param2_1 == 3))
10045ec6      int32_t param3_3 = param3
10045ec7      int32_t param2_4 = param2_1
10045ec9      int32_t eax_4 = Gladiator_Init(param1)
10045ec9      
10045ed0      if (eax_4 == 0)
10045ed2          param2 = 1 & eax_4
10045ed2      
10045ed9      if (param2 != 0)
10045edb          int32_t eax_5 = data_1006b3d4
10045edb          
10045ee2          if (eax_5 != 0)
10045ee9              return eax_5(param1, param2_1, param3)
10045ee9  
10045eec  return param2


10045ef6    int32_t sub_10045ef6(uint32_t arg1)

10045ef6  int32_t eax_1 = data_100633bc
10045ef6  
10045efe  if (eax_1 == 1)
10045f0d      sub_1004bff1()
10045efe  else if (eax_1 == 0 && data_100633c0 == 1)
10045f0d      sub_1004bff1()
10045f0d  
10045f16  sub_1004c02a(arg1)
10045f28  return data_10060970(0xff)


10045f29    int32_t sub_10045f29()

10045f3a  return sub_1004c20a(0x10000, 0x30000)


10045f3b    int32_t sub_10045f3b() __pure

10045f47  double var_c = fconvert.d(fconvert.t(3145727.0))
10045f50  double var_14 = fconvert.d(fconvert.t(4195835.0))
10045f62  long double x87_r7_6 = fconvert.t(fconvert.d(fconvert.t(var_14)
10045f62      - fconvert.t(var_14) / fconvert.t(var_c) * fconvert.t(var_c)))
10045f65  long double temp0 = fconvert.t(1.0)
10045f65  x87_r7_6 - temp0
10045f6b  int16_t eax = (x87_r7_6 < temp0 ? 1 : 0) << 8
10045f6b      | (is_unordered.t(x87_r7_6, temp0) ? 1 : 0) << 0xa
10045f6b      | (x87_r7_6 == temp0 ? 1 : 0) << 0xe
10045f6b  
10045f6e  if (test_bit(eax:1.b, 6) || test_bit(eax:1.b, 0))
10045f78      return 0
10045f78  
10045f74  return 1


10045f79    int32_t sub_10045f79()

10045f7e  HMODULE hModule = GetModuleHandleA(lpModuleName: "KERNEL32")
10045f7e  
10045f86  if (hModule != 0)
10045f8e      int32_t eax = GetProcAddress(hModule, lpProcName: "IsProcessorFeaturePresent")
10045f8e      
10045f96      if (eax != 0)
10045f9c          return eax(0)
10045f9c  
10045f9d  return sub_10045f3b() __tailcall


10045fa2    uint32_t sub_10045fa2(char* arg1)

10045fa3  char* esi = arg1
10045fa7  int32_t eax = sx.d(*esi)
10045fab  uint32_t i
10045fab  int32_t edx
10045fab  i, edx = sub_1004b93b(eax)
10045fb3  int32_t ecx = eax
10045fb3  
10045fb4  if (i != 0x65)
10045fe0      do
10045fb6          esi = &esi[1]
10045fb6          
10045fbe          if (data_10060bac s<= 1)
10045fd2              ecx = data_100609a0
10045fd8              int32_t eax_2
10045fd8              eax_2.b = *(ecx + (sx.d(*esi) << 1))
10045fdb              i = eax_2 & 4
10045fbe          else
10045fc0              int32_t eax_1 = sx.d(*esi)
10045fc6              i, edx = sub_10046f7a(eax_1, edx, ecx, eax_1)
10045fcc              ecx = 4
10045fe0      while (i != 0)
10045fe0  
10045fe2  ecx.b = data_10060bb0
10045fe8  i.b = *esi
10045fea  *esi = ecx.b
10045fec  char* esi_1 = &esi[1]
10045fec  
10045ff8  do
10045fed      ecx.b = *esi_1
10045fef      *esi_1 = i.b
10045ff1      i.b = ecx.b
10045ff3      ecx.b = *esi_1
10045ff5      esi_1 = &esi_1[1]
10045ff8  while (ecx.b != 0)
10045ff8  
10045ffb  return i


10045ffc    void* sub_10045ffc(char* arg1)

10045ffc  char* eax = arg1
10046000  char i = data_10060bb0
10046006  char ecx = *eax
10046006  
1004600a  if (ecx != 0)
1004600e      while (ecx != i)
10046010          ecx = eax[1]
10046013          eax = &eax[1]
10046013          
10046016          if (ecx == 0)
10046016              break
10046016  
1004601a  void* result = &eax[1]
1004601a  
1004601d  if (*eax != 0)
1004601f      while (true)
1004601f          ecx = *result
1004601f          
10046023          if (ecx == 0)
10046023              break
10046023          
10046028          if (ecx == 0x65)
10046028              break
10046028          
1004602d          if (ecx == 0x45)
1004602d              break
1004602d          
1004602f          result += 1
1004602f      
10046032      void* result_1 = result
10046032      
10046038      do
10046034          result -= 1
10046038      while (*result == 0x30)
10046038      
1004603c      if (*result == i)
1004603e          result -= 1
1004603e      
10046047      do
1004603f          i = *result_1
10046041          result += 1
10046042          result_1 += 1
10046045          *result = i
10046047      while (i != 0)
10046047  
10046049  return result


1004604a    int32_t sub_1004604a(double* arg1)

1004604e  long double x87_r7 = fconvert.t(*arg1)
10046050  long double temp0 = fconvert.t(0.0)
10046050  x87_r7 - temp0
10046056  double* eax
10046056  eax.w = (x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
10046056      | (x87_r7 == temp0 ? 1 : 0) << 0xe
10046056  
10046059  if (test_bit(eax:1.b, 0))
10046061      return 0
10046061  
1004605e  return 1


10046062    int32_t* __convention("regparm") sub_10046062(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5)

10046066  int32_t var_c = arg3
1004606b  void* arg_c
1004606b  void* var_10 = arg_c
1004606b  
1004606e  if (arg4 == 0)
1004608f      sub_1004c802(&arg_c, var_10)
1004609c      *arg5 = arg_c
1004609f      return arg5
1004609f  
10046074  sub_1004c7a7(&var_c, var_10)
10046081  *arg5 = var_c
10046086  arg5[1] = arg3
1004608a  return arg5


100460a0    char* __convention("regparm") sub_100460a0(int32_t arg1, int32_t arg2, char* arg3, double* arg4, char* arg5, void* arg6, int32_t arg7)

100460aa  void var_2c
100460aa  void* var_34 = &var_2c
100460ae  int32_t var_14[0x4]
100460ae  int32_t (* var_38)[0x4] = &var_14
100460b3  int32_t* var_40 = arg3
100460b6  var_40.q = fconvert.d(fconvert.t(*arg4))
100460b9  sub_1004c8a6(var_40, arg3)
100460d2  int32_t eax_2
100460d2  eax_2.b = var_14[0] == 0x2d
100460d9  void* ecx
100460d9  ecx.b = arg6 s> 0
100460e1  sub_1004c82f(ecx + &arg5[eax_2], arg6 + 1, &var_14)
100460f3  sub_10046101(arg5, arg6, arg7, &var_14, 0)
10046100  return arg5


10046101    char* sub_10046101(char* arg1, int32_t arg2, int32_t arg3, int32_t* arg4, char arg5)

10046112  if (arg5 != 0)
10046119      int32_t eax_1
10046119      eax_1.b = arg2 s> 0
10046122      void* eax_2
10046122      eax_2.b = *arg4 == 0x2d
10046128      sub_100463a3(eax_2 + arg1, eax_1)
10046128  
10046132  void* eax_4 = arg1
10046132  
10046134  if (*arg4 == 0x2d)
10046136      *arg1 = 0x2d
10046139      eax_4 = &arg1[1]
10046139  
1004613f  if (arg2 s> 0)
10046147      *eax_4 = *(eax_4 + 1)
10046149      eax_4 += 1
1004614b      void* ecx_2
1004614b      ecx_2.b = data_10060bb0
10046151      *eax_4 = ecx_2.b
10046151  
1004615d  void* const ecx_3
1004615d  ecx_3.b = arg5 == 0
10046166  char* eax_5 = StrDupIntoArena(ecx_3 + eax_4 + arg2, "e+000")
10046166  
10046172  if (arg3 != 0)
10046174      *eax_5 = 0x45
10046174  
1004617e  if (*arg4[3] != 0x30)
10046180      int32_t ebx_1 = arg4[1]
10046183      int32_t ebx_2 = ebx_1 - 1
10046183      
10046184      if (ebx_1 - 1 s< 0)
10046186          ebx_2 = neg.d(ebx_2)
10046188          eax_5[1] = 0x2d
10046188      
1004618f      if (ebx_2 s>= 0x64)
10046199          eax_5[2] += (divs.dp.d(sx.q(ebx_2), 0x64)).b
100461a0          ebx_2 = mods.dp.d(sx.q(ebx_2), 0x64)
100461a0      
100461a6      if (ebx_2 s>= 0xa)
100461b0          eax_5[3] += (divs.dp.d(sx.q(ebx_2), 0xa)).b
100461b7          ebx_2 = mods.dp.d(sx.q(ebx_2), 0xa)
100461b7      
100461b9      eax_5[4] += ebx_2.b
100461b9  
100461c2  return arg1


100461c3    char* __convention("regparm") sub_100461c3(int32_t arg1, int32_t arg2, char* arg3, double* arg4, char* arg5, int32_t arg6)

100461cd  void var_2c
100461cd  void* var_34 = &var_2c
100461d1  int32_t var_14
100461d1  int32_t* var_38 = &var_14
100461d6  int32_t* var_40 = arg3
100461d9  var_40.q = fconvert.d(fconvert.t(*arg4))
100461dc  sub_1004c8a6(var_40, arg3)
100461f4  void* eax_3
100461f4  eax_3.b = var_14 == 0x2d
100461fb  void* var_10
100461fb  sub_1004c82f(eax_3 + arg5, var_10 + arg6, &var_14)
1004620a  sub_10046218(arg5, arg6, &var_14, 0)
10046217  return arg5


10046218    char* sub_10046218(char* arg1, int32_t arg2, int32_t* arg3, char arg4)

10046227  int32_t eax_1 = arg3[1] - 1
10046227  
10046231  if (arg4 != 0 && eax_1 == arg2)
10046238      void* ecx_1
10046238      ecx_1.b = *arg3 == 0x2d
1004623d      char* ecx_3 = ecx_1 + eax_1 + arg1
10046241      *ecx_3 = 0x30
10046244      ecx_3[1] = 0
10046244  
1004624b  void* edi = arg1
1004624b  
1004624d  if (*arg3 == 0x2d)
1004624f      *arg1 = 0x2d
10046252      edi = &arg1[1]
10046252  
10046255  int32_t eax_3 = arg3[1]
1004625a  void* edi_1
1004625a  
1004625a  if (eax_3 s> 0)
1004626c      edi_1 = edi + eax_3
1004625a  else
1004625f      sub_100463a3(edi, 1)
10046265      *edi = 0x30
10046269      edi_1 = edi + 1
10046269  
10046272  if (arg2 s> 0)
10046277      sub_100463a3(edi_1, 1)
10046282      *edi_1 = data_10060bb0
10046284      int32_t esi_1 = arg3[1]
10046284      
1004628b      if (esi_1 s< 0)
10046291          if (arg4 == 0)
10046297              int32_t esi_2 = neg.d(esi_1)
10046297              
1004629c              if (arg2 s>= esi_2)
1004629e                  arg2 = esi_2
10046291          else
1004629e              arg2 = neg.d(esi_1)
1004629e          
100462a5          sub_100463a3(edi_1 + 1, arg2)
100462b0          sub_1004c9c0(edi_1 + 1, 0x30, arg2)
100462b0  
100462be  return arg1


100462bf    char* __convention("regparm") sub_100462bf(int32_t arg1, int32_t arg2, char* arg3, double* arg4, char* arg5, int32_t arg6, int32_t arg7)

100462cb  void var_2c
100462cb  void* var_3c = &var_2c
100462cf  int32_t var_14
100462cf  int32_t* var_40 = &var_14
100462d4  int32_t* var_48 = arg3
100462d7  var_48.q = fconvert.d(fconvert.t(*arg4))
100462da  sub_1004c8a6(var_48, arg3)
100462ee  void* eax_2
100462ee  eax_2.b = var_14 == 0x2d
100462f4  char* edi = eax_2 + arg5
100462fc  sub_1004c82f(edi, arg6, &var_14)
10046314  int32_t var_10
10046314  
10046314  if (var_10 - 1 s< 0xfffffffc || var_10 - 1 s>= arg6)
10046345      return sub_10046101(arg5, arg6, arg7, &var_14, 1)
10046345  
10046318  if (var_10 - 1 s< var_10 - 1 != 0)
1004631f      int32_t eax_5
1004631f      
1004631f      do
1004631a          eax_5.b = *edi
1004631c          edi = &edi[1]
1004631f      while (eax_5.b != 0)
1004631f      
10046321      edi[0xfffffffe] &= eax_5.b
10046321  
1004632e  return sub_10046218(arg5, arg6, &var_14, 1)


10046352    char* sub_10046352(double* arg1, char* arg2, int32_t arg3, int32_t arg4, int32_t arg5)

1004635f  int32_t eax
1004635f  char* ecx
1004635f  int32_t edx
1004635f  
1004635f  if (arg3 == 0x65 || arg3 == 0x45)
10046399      return sub_100460a0(eax, edx, ecx, arg1, arg2, arg4, arg5)
10046399  
10046365  if (arg3 != 0x66)
10046386      return sub_100462bf(eax, edx, ecx, arg1, arg2, arg4, arg5)
10046386  
10046379  return sub_100461c3(eax, edx, ecx, arg1, arg2, arg4)


100463a3    void sub_100463a3(char* arg1, int32_t arg2)

100463aa  if (arg2 != 0)
100463bd      sub_100452f0(&arg1[arg2], arg1, StrLen(arg1) + 1)


100463c8    int32_t sub_100463c8(int32_t* arg1, char* arg2, void* arg3)

100463d1  char var_19 = 0
100463d7  char* esi = arg2
100463dd  void* eax
100463dd  eax.b = *esi
100463df  void* var_8 = nullptr
100463e4  int32_t result = 0
100463e7  void* var_18
100463e7  
100463e7  if (eax.b != 0)
100463ed      int32_t* edi_1 = arg1
100463ed      
100463fe      while (true)
100463fe          BOOL eax_2
100463fe          uint32_t ecx
100463fe          int32_t edx
100463fe          
100463fe          if (data_10060bac s<= 1)
1004640f              ecx = data_100609a0
10046418              uint32_t eax_3
10046418              eax_3.b = *(ecx + (zx.d(eax.b) << 1))
1004641b              eax_2 = eax_3 & 8
100463fe          else
10046400              uint32_t eax_1 = zx.d(eax.b)
10046406              eax_2, edx = sub_10046f7a(eax_1, edx, ecx, eax_1)
1004640c              ecx = 8
1004640c          
10046420          if (eax_2 != 0)
10046422              var_8 -= 1
10046433              sub_10046e3e(sub_10046e55(&var_8, edi_1), edi_1)
10046438              uint32_t eax_5 = zx.d(esi[1])
1004643c              esi = &esi[1]
1004643e              BOOL i
1004643e              i, ecx, edx = sub_1004cc1a(eax_5)
1004643e              
10046448              while (i != 0)
1004644a                  uint32_t eax_6 = zx.d(esi[1])
1004644e                  esi = &esi[1]
10046450                  i, edx = sub_1004cc1a(eax_6)
10046455                  ecx = eax_6
10046455          
1004645b          if (*esi != 0x25)
10046d3a              var_8 += 1
10046d3e              uint32_t eax_58
10046d3e              eax_58, edx = sub_10046e24(edi_1)
10046d46              uint32_t eax_59 = zx.d(*esi)
10046d49              esi = &esi[1]
10046d4c              var_18 = eax_58
10046d4f              arg2 = esi
10046d4f              
10046d52              if (eax_59 != eax_58)
10046da9                  var_8 -= 1
10046dae                  sub_10046e3e(eax_58, edi_1)
10046db5                  break
10046db5              
10046d54              ecx = data_100609a0
10046d54              
10046d62              if ((*(ecx + (zx.d(eax_58.b) << 1) + 1) & 0x80) != 0)
10046d64                  var_8 += 1
10046d68                  eax, edx = sub_10046e24(edi_1)
10046d6e                  ecx = zx.d(*esi)
10046d71                  esi = &esi[1]
10046d74                  arg2 = esi
10046d74                  
10046d77                  if (ecx != eax)
10046db7                      var_8 -= 1
10046dbc                      sub_10046e3e(eax, edi_1)
10046dc1                      var_8 -= 1
10046dc6                      sub_10046e3e(eax_58, edi_1)
10046dcb                      break
10046dcb                  
10046d79                  var_8 -= 1
1004645b          else
10046461              char var_39_1 = 0
10046465              char var_1c_1 = 0
10046469              char var_1b_1 = 0
1004646d              char var_12_1 = 0
10046471              char i_1 = 0
10046475              char var_1a_1 = 0
10046479              void* edi_2 = nullptr
1004647b              char var_9_1 = 0
1004647f              int32_t var_20_1 = 0
10046482              int32_t var_24_1 = 0
10046485              void* var_10_1 = nullptr
10046488              char var_11_1 = 1
1004648c              int32_t var_34_1 = 0
1004653a              void* var_2c
1004653a              uint32_t var_28
1004653a              void* eax_8
1004653a              
1004653a              do
1004648f                  uint32_t ebx_1 = zx.d(esi[1])
10046493                  esi = &esi[1]
10046493                  
1004649b                  if (data_10060bac s<= 1)
100464ac                      ecx = data_100609a0
100464b5                      uint32_t eax_9
100464b5                      eax_9.b = *(ecx + (zx.d(ebx_1.b) << 1))
100464b8                      eax_8 = eax_9 & 4
1004649b                  else
1004649d                      uint32_t eax_7 = zx.d(ebx_1.b)
100464a3                      eax_8, edx = sub_10046f7a(eax_7, edx, ecx, eax_7)
100464a9                      ecx = 4
100464a9                  
100464bd                  if (eax_8 != 0)
100464c2                      var_24_1 += 1
100464cc                      var_10_1 = ebx_1 + var_10_1 * 0xa - 0x30
100464bd                  else if (ebx_1 s> 0x4e)
10046517                      if (ebx_1 == 0x68)
10046530                          var_11_1 -= 1
10046533                          var_9_1 -= 1
10046517                      else if (ebx_1 == 0x6c)
10046528                          var_11_1 += 1
1004652b                          var_9_1 += 1
1004651c                      else if (ebx_1 == 0x77)
1004652b                          var_9_1 += 1
10046521                      else
10046523                          i_1 += 1
100464d4                  else if (ebx_1 != 0x4e)
100464db                      if (ebx_1 == 0x2a)
1004650f                          var_12_1 += 1
100464db                      else if (ebx_1 != 0x46)
100464e5                          if (ebx_1 == 0x49)
100464fe                              if (esi[1] != 0x36 || esi[2] != 0x34)
10046523                                  i_1 += 1
100464fe                              else
10046500                                  var_34_1 += 1
10046503                                  var_2c = nullptr
10046507                                  var_28 = 0
1004650b                                  esi = &esi[2]
100464e5                          else if (ebx_1 != 0x4c)
10046523                              i_1 += 1
100464ea                          else
100464ec                              var_11_1 += 1
1004653a              while (i_1 == 0)
1004653a              
10046544              arg2 = esi
10046547              void* var_48
10046547              void* var_30
10046547              
10046547              if (var_12_1 == 0)
1004654c                  var_48 = arg3
1004654f                  void* eax_13 = arg3 + 4
10046552                  arg3 = eax_13
10046558                  var_30 = *(eax_13 - 4)
10046558              
1004655b              char var_13_1 = 0
1004655b              
10046563              if (var_9_1 == 0)
10046565                  eax_8.b = *esi
10046565                  
1004656d                  if (eax_8.b == 0x53 || eax_8.b == 0x43)
10046575                      var_9_1 = 1
1004656d                  else
1004656f                      var_9_1 = 0xff
1004656f              
1004657f              int32_t esi_2 = zx.d(*arg2) | 0x20
1004657f              
10046588              if (esi_2 != 0x6e)
10046592                  int32_t* var_1d8_3
10046592                  uint32_t eax_14
10046592                  
10046592                  if (esi_2 == 0x63 || esi_2 == 0x7b)
100465a3                      var_1d8_3 = arg1
100465a6                      var_8 += 1
100465a9                      eax_14, edx = sub_10046e24(var_1d8_3)
10046592                  else
10046594                      var_1d8_3 = arg1
1004659b                      eax_14, edx = sub_10046e55(&var_8, var_1d8_3)
1004659b                  
100465ae                  ecx = var_1d8_3
100465af                  var_18 = eax_14
100465af              
100465b2              eax = nullptr
100465b2              
100465bc              if (var_24_1 != 0 && var_10_1 == 0)
10046d9e                  label_10046d9e:
10046da1                  var_8 -= 1
10046dae                  sub_10046e3e(var_18, arg1)
10046db5                  break
10046db5              
100465c5              void* ebx_3
100465c5              void* edi_4
100465c5              
100465c5              if (esi_2 s<= 0x6f)
100465cb                  if (esi_2 == 0x6f)
100465cb                      goto label_10046adb
100465cb                  
100465d4                  if (esi_2 == 0x63)
10046809                      if (var_24_1 == 0)
1004680b                          var_10_1 += 1
1004680e                          var_24_1 = 1
1004680e                      
10046819                      if (var_9_1 s> 0)
1004681b                          var_1a_1 = 1
1004681b                      
1004681f                      edi_4 = &data_10060994
10046819                      goto label_10046934
10046819                  
100465dd                  if (esi_2 == 0x64)
100465dd                      goto label_10046adb
100465dd                  
100465e3                  if (esi_2 s> 0x64)
100465ec                      if (esi_2 s<= 0x67)
10046626                          void* ebx_4 = var_18
10046629                          char var_1c8
10046629                          char* esi_3 = &var_1c8
10046632                          int32_t* edi_3
10046632                          
10046632                          if (ebx_4 != 0x2d)
10046645                              if (ebx_4 == 0x2b)
10046645                                  goto label_10046647
10046645                              
1004665e                              edi_3 = arg1
10046632                          else
10046634                              var_1c8 = ebx_4.b
1004663a                              void var_1c7
1004663a                              esi_3 = &var_1c7
10046647                              label_10046647:
10046647                              edi_3 = arg1
1004664a                              var_10_1 -= 1
1004664d                              var_8 += 1
10046651                              eax, edx = sub_10046e24(edi_3)
10046656                              ebx_4 = eax
10046658                              ecx = edi_3
10046659                              var_18 = ebx_4
10046659                          
1004666e                          if (var_24_1 == 0 || var_10_1 s> 0x15d)
10046670                              var_10_1 = 0x15d
10046670                          
1004667e                          while (true)
1004667e                              BOOL eax_15
1004667e                              
1004667e                              if (data_10060bac s<= 1)
10046691                                  wchar16 (* eax_16)[0x21]
10046691                                  eax_16.b = (*data_100609a0)[ebx_4].b
10046694                                  eax_15 = eax_16 & 4
1004667e                              else
10046683                                  eax_15 = sub_10046f7a(eax, edx, ecx, ebx_4)
10046683                              
10046699                              if (eax_15 == 0)
10046699                                  break
10046699                              
1004669b                              void* eax_17 = var_10_1
1004669e                              var_10_1 -= 1
1004669e                              
100466a3                              if (eax_17 == 0)
100466a3                                  break
100466a3                              
100466a5                              var_20_1 += 1
100466a8                              *esi_3 = ebx_4.b
100466aa                              esi_3 = &esi_3[1]
100466ab                              var_8 += 1
100466af                              eax, edx = sub_10046e24(edi_3)
100466b4                              ebx_4 = eax
100466b6                              ecx = edi_3
100466b7                              var_18 = ebx_4
100466b7                          
100466c2                          if (data_10060bb0 == ebx_4.b)
100466c4                              void* eax_18 = var_10_1
100466c7                              var_10_1 -= 1
100466c7                              
100466cc                              if (eax_18 != 0)
100466ce                                  var_8 += 1
100466d2                                  uint32_t eax_19
100466d2                                  int32_t edx_1
100466d2                                  eax_19, edx_1 = sub_10046e24(edi_3)
100466d7                                  ebx_4 = eax_19
100466d9                                  eax_19.b = data_10060bb0
100466de                                  *esi_3 = eax_19.b
100466e0                                  int32_t* ecx_4 = edi_3
100466e1                                  var_18 = ebx_4
100466e4                                  esi_3 = &esi_3[1]
100466e4                                  
100466ec                                  while (true)
100466ec                                      BOOL eax_20
100466ec                                      
100466ec                                      if (data_10060bac s<= 1)
100466ff                                          wchar16 (* eax_21)[0x21]
100466ff                                          eax_21.b = (*data_100609a0)[ebx_4].b
10046702                                          eax_20 = eax_21 & 4
100466ec                                      else
100466f1                                          eax_20 = sub_10046f7a(eax_19, edx_1, ecx_4, ebx_4)
100466f1                                      
10046707                                      if (eax_20 == 0)
10046707                                          break
10046707                                      
10046709                                      void* eax_22 = var_10_1
1004670c                                      var_10_1 -= 1
1004670c                                      
10046711                                      if (eax_22 == 0)
10046711                                          break
10046711                                      
10046713                                      var_20_1 += 1
10046716                                      *esi_3 = ebx_4.b
10046718                                      esi_3 = &esi_3[1]
10046719                                      var_8 += 1
1004671d                                      eax_19, edx_1 = sub_10046e24(edi_3)
10046722                                      ebx_4 = eax_19
10046724                                      ecx_4 = edi_3
10046725                                      var_18 = ebx_4
10046725                          
1004673c                          if (var_20_1 != 0 && (ebx_4 == 0x65 || ebx_4 == 0x45))
10046745                              void* var_10_2 = var_10_1 - 1
10046745                              
1004674a                              if (var_10_1 != 0)
1004674c                                  *esi_3 = 0x65
1004674f                                  esi_3 = &esi_3[1]
10046750                                  var_8 += 1
10046754                                  uint32_t eax_24
10046754                                  int32_t edx_2
10046754                                  eax_24, edx_2 = sub_10046e24(edi_3)
10046759                                  ebx_4 = eax_24
1004675b                                  int32_t* ecx_6 = edi_3
1004675f                                  var_18 = ebx_4
1004675f                                  
10046762                                  if (ebx_4 == 0x2d)
10046764                                      *esi_3 = eax_24.b
10046766                                      esi_3 = &esi_3[1]
1004676e                                      label_1004676e:
1004676e                                      eax_24 = var_10_2
10046771                                      var_10_2 -= 1
10046771                                      
10046776                                      if (eax_24 != 0)
10046776                                          goto label_1004677d
10046776                                      
10046778                                      var_10_2 &= eax_24
10046762                                  else if (ebx_4 == 0x2b)
1004676c                                      goto label_1004676e
1004676c                                  
10046793                                  while (true)
10046793                                      BOOL eax_25
10046793                                      
10046793                                      if (data_10060bac s<= 1)
100467a6                                          wchar16 (* eax_26)[0x21]
100467a6                                          eax_26.b = (*data_100609a0)[ebx_4].b
100467a9                                          eax_25 = eax_26 & 4
10046793                                      else
10046798                                          eax_25 = sub_10046f7a(eax_24, edx_2, ecx_6, ebx_4)
10046798                                      
100467ae                                      if (eax_25 == 0)
100467ae                                          break
100467ae                                      
100467b0                                      void* eax_27 = var_10_2
100467b3                                      var_10_2 -= 1
100467b3                                      
100467b8                                      if (eax_27 == 0)
100467b8                                          break
100467b8                                      
100467ba                                      var_20_1 += 1
100467bd                                      *esi_3 = ebx_4.b
100467bf                                      esi_3 = &esi_3[1]
1004677d                                      label_1004677d:
1004677d                                      var_8 += 1
10046781                                      eax_24, edx_2 = sub_10046e24(edi_3)
10046786                                      ebx_4 = eax_24
10046788                                      ecx_6 = edi_3
10046789                                      var_18 = ebx_4
10046789                          
100467c2                          var_8 -= 1
100467c7                          eax, edx = sub_10046e3e(ebx_4, edi_3)
100467d1                          ecx = edi_3
100467d1                          
100467d2                          if (var_20_1 == 0)
100467d2                              break
100467d2                          
100467dc                          if (var_12_1 == 0)
100467e2                              result += 1
100467e5                              *esi_3 = 0
100467f8                              eax, edx, ecx =
100467f8                                  data_1006097c(sx.d(var_11_1) - 1, var_30, &var_1c8)
100467f8                          
1004673c                          goto label_10046d2f
1004673c                      
100465f1                      if (esi_2 == 0x69)
10046610                          esi_2 = 0x64
10046611                          label_10046611:
10046611                          ebx_3 = var_18
10046611                          
10046617                          if (ebx_3 == 0x2d)
1004661d                              var_1b_1 = 1
100468a0                              label_100468a0:
100468a0                              void* temp6_1 = var_10_1
100468a0                              var_10_1 -= 1
100468a0                              
100468a9                              if (temp6_1 != 1 || var_24_1 == 0)
100468b4                                  var_8 += 1
100468b7                                  eax, edx = sub_10046e24(arg1)
100468bc                                  ebx_3 = eax
100468be                                  ecx = arg1
100468bf                                  var_18 = ebx_3
100468a9                              else
100468ab                                  var_13_1 = 1
10046617                          else if (ebx_3 == 0x2b)
1004689e                              goto label_100468a0
1004689e                          
100468c5                          if (ebx_3 != 0x30)
100468c5                              goto label_10046b14
100468c5                          
100468ce                          var_8 += 1
100468d1                          eax, edx = sub_10046e24(arg1)
100468d6                          ebx_3 = eax
100468d8                          ecx = arg1
100468dc                          var_18 = ebx_3
100468e4                          int32_t var_1d8_14
100468e4                          
100468e4                          if (ebx_3.b == 0x78 || ebx_3.b == 0x58)
10046913                              var_8 += 1
10046916                              eax, edx = sub_10046e24(arg1)
1004691b                              ecx = arg1
1004691c                              ebx_3 = eax
1004691e                              var_18 = ebx_3
10046921                              var_1d8_14 = 0x78
100468e4                          else
100468e9                              var_20_1 = 1
100468e9                              
100468f0                              if (esi_2 == 0x78)
100468fd                                  var_8 -= 1
10046901                                  eax, edx = sub_10046e3e(ebx_3, arg1)
10046907                                  ecx = arg1
1004690a                                  ebx_3 = 0x30
1004690b                                  goto label_10046b0d
1004690b                              
100468f2                              var_1d8_14 = 0x6f
100468f2                          
100468f4                          esi_2 = var_1d8_14
100468f5                          goto label_10046b14
100468f5                      
100465f6                      if (esi_2 == 0x6e)
10046600                          edi_2 = var_8
10046600                          
10046603                          if (var_12_1 == 0)
10046603                              goto label_10046d09
10046603                          
10046603                          goto label_10046d2f
10046603                  
10046856                  label_10046856:
10046856                  
10046859                  if (zx.d(*arg2) != var_18)
10046859                      goto label_10046d9e
10046859                  
1004685f                  var_19 -= 1
1004685f                  
10046866                  if (var_12_1 == 0)
1004686f                      arg3 = var_48
1004686f                  
10046866                  goto label_10046d2f
10046866              
1004682b              eax = esi_2 - 0x70
1004682b              
1004682e              if (esi_2 != 0x70)
10046837                  if (eax == 3)
10046929                      if (var_9_1 s> 0)
1004692b                          var_1a_1 = 1
1004692b                      
1004692f                      edi_4 = " \t-\r]"
1004692f                      goto label_10046934
1004692f                  
1004683d                  void* eax_32 = eax - 4
1004683e                  eax = eax_32 - 1
1004683e                  
1004683f                  if (eax_32 == 1)
1004683f                      goto label_10046adb
1004683f                  
10046845                  void* temp3_1 = eax
10046845                  eax -= 3
10046845                  
10046848                  if (temp3_1 == 3)
10046848                      goto label_10046611
10046848                  
10046851                  if (eax != 3)
10046851                      goto label_10046856
10046851                  
1004687b                  if (var_9_1 s> 0)
1004687d                      var_1a_1 = 1
1004687d                  
10046884                  edi_4 = &arg2[1]
10046885                  arg2 = edi_4
10046885                  
1004688b                  if (*edi_4 == 0x5e)
10046893                      edi_4 += 1
10046934                      label_10046934:
10046934                      var_1c_1 = 0xff
10046934                  
10046940                  char var_68[0xb]
10046940                  char* eax_35
10046940                  uint32_t edx_3
10046940                  eax_35, edx_3 = sub_1004c9c0(&var_68, 0, 0x20)
10046940                  
10046951                  if (esi_2 != 0x7b || *edi_4 != 0x5d)
1004695c                      edx_3.b = var_39_1
10046951                  else
10046953                      edx_3.b = 0x5d
10046955                      edi_4 += 1
10046956                      char var_5d_1 = 0x20
10046956                  
1004695f                  while (true)
1004695f                      eax_35.b = *edi_4
1004695f                      
10046963                      if (eax_35.b == 0x5d)
10046963                          break
10046963                      
10046965                      edi_4 += 1
1004696c                      int32_t __saved_ebp
1004696c                      char* ebx_2
1004696c                      
1004696c                      if (eax_35.b == 0x2d && edx_3.b != 0)
1004696e                          char ecx_8 = *edi_4
1004696e                          
10046973                          if (ecx_8 != 0x5d)
10046975                              edi_4 += 1
10046975                              
10046978                              if (edx_3.b u>= ecx_8)
1004697e                                  eax_35.b = edx_3.b
10046980                                  edx_3.b = ecx_8
10046978                              else
1004697a                                  eax_35.b = ecx_8
1004697a                              
10046984                              if (edx_3.b u<= eax_35.b)
10046986                                  edx_3 = zx.d(edx_3.b)
1004698e                                  int32_t i_3 = zx.d(eax_35.b) - edx_3 + 1
100469a5                                  int32_t i_2
100469a5                                  
100469a5                                  do
10046996                                      ebx_2.b = 1
1004699b                                      ebx_2.b = 1 << (edx_3.b & 7)
100469a1                                      *(&__saved_ebp + (edx_3 u>> 3) - 0x64) |= ebx_2.b
100469a3                                      edx_3 += 1
100469a4                                      i_2 = i_3
100469a4                                      i_3 -= 1
100469a5                                  while (i_2 != 1)
100469a5                              
100469a7                              edx_3.b = 0
100469a9                              continue
100469a9                      
100469ab                      uint32_t ecx_10 = zx.d(eax_35.b)
100469ae                      edx_3.b = eax_35.b
100469b5                      ebx_2.b = 1
100469ba                      ebx_2.b = 1 << (ecx_10.b & 7)
100469c0                      *(&__saved_ebp + (ecx_10 u>> 3) - 0x64) |= ebx_2.b
100469c0                  
100469c7                  if (*edi_4 == 0)
100469c7                      break
100469c7                  
100469d1                  if (esi_2 == 0x7b)
100469d3                      arg2 = edi_4
100469d3                  
100469d9                  char* esi_6 = var_30
100469dc                  var_8 -= 1
100469e3                  char* var_34_2 = esi_6
100469e6                  edx = sub_10046e3e(var_18, arg1)
100469ec                  ecx = arg1
100469ec                  
100469f1                  while (true)
100469f1                      if (var_24_1 != 0)
100469f3                          eax = var_10_1
100469f6                          var_10_1 -= 1
100469f6                          
100469fb                          if (eax == 0)
100469fb                              break
100469fb                      
10046a01                      var_8 += 1
10046a05                      uint32_t eax_40 = sub_10046e24(arg1)
10046a0e                      var_18 = eax_40
10046a0e                      
10046a11                      if (eax_40 != 0xffffffff)
10046a1f                          edx = 1 << (eax_40.b & 7)
10046a2b                          ecx = sx.d(var_68[eax_40 s>> 3]) ^ sx.d(var_1c_1)
10046a2b                          
10046a2f                          if ((ecx & edx) != 0)
10046a35                              if (var_12_1 != 0)
10046a89                                  var_34_2 = &var_34_2[1]
10046a8c                                  continue
10046a35                              else
10046a3b                                  if (var_1a_1 == 0)
10046a7e                                      *esi_6 = eax_40.b
10046a80                                      esi_6 = &esi_6[1]
10046a3b                                  else
10046a3d                                      wchar16 (* ecx_17)[0x21] = data_100609a0
10046a43                                      char var_3c = eax_40.b
10046a43                                      
10046a4e                                      if ((*(&(*ecx_17)[zx.d(eax_40.b)] + 1) & 0x80) != 0)
10046a50                                          var_8 += 1
10046a5a                                          char var_3b_1 = sub_10046e24(arg1)
10046a5a                                      
10046a6b                                      int16_t var_42
10046a6b                                      ecx, edx =
10046a6b                                          sub_1004ca21(&var_42, &var_3c, data_10060bac)
10046a77                                      *esi_6 = var_42
10046a7b                                      esi_6 = &esi_6[2]
10046a7b                                  
10046a81                                  var_30 = esi_6
10046a84                                  continue
10046a84                      
10046a91                      var_8 -= 1
10046a96                      eax, edx = sub_10046e3e(eax_40, arg1)
10046a9c                      ecx = arg1
10046a9c                      break
10046a9c                  
10046aa0                  if (var_34_2 == esi_6)
10046aa0                      break
10046aa0                  
10046aaa                  if (var_12_1 == 0)
10046ab0                      result += 1
10046ab0                      
10046ab7                      if (esi_2 != 0x63)
10046ac4                          if (var_1a_1 == 0)
10046acf                              *var_30 = 0
10046ac4                          else
10046ac6                              *var_30 = 0
10046ac6                  
100469c7                  goto label_10046d2f
100469c7              
10046ad7              var_11_1 = 1
10046adb              label_10046adb:
10046adb              ebx_3 = var_18
10046adb              
10046ae1              if (ebx_3 != 0x2d)
10046aec                  if (ebx_3 != 0x2b)
10046aec                      goto label_10046b14
10046aec                  
10046aec                  goto label_10046aee
10046aec              
10046ae3              var_1b_1 = 1
10046aee              label_10046aee:
10046aee              void* temp4_1 = var_10_1
10046aee              var_10_1 -= 1
10046aee              
10046af7              if (temp4_1 != 1 || var_24_1 == 0)
10046b02                  var_8 += 1
10046b05                  eax, edx = sub_10046e24(arg1)
10046b0a                  ecx = arg1
10046b0b                  ebx_3 = eax
10046b0d                  label_10046b0d:
10046b0d                  var_18 = ebx_3
10046b0d                  goto label_10046b14
10046b0d              
10046af9              var_13_1 = 1
10046b14              label_10046b14:
10046b14              
10046b14              if (var_34_1 == 0)
10046c2d                  if (var_13_1 == 0)
10046c3b                      while (true)
10046c3b                          int32_t edi_7
10046c3b                          
10046c3b                          if (esi_2 == 0x78 || esi_2 == 0x70)
10046c7e                              BOOL eax_56
10046c7e                              
10046c7e                              if (data_10060bac s<= 1)
10046c94                                  wchar16 (* eax_57)[0x21]
10046c94                                  eax_57.b = (*data_100609a0)[ebx_3].b
10046c97                                  eax_56 = eax_57 & 0x80
10046c7e                              else
10046c86                                  eax_56 = sub_10046f7a(eax, edx, ecx, ebx_3)
10046c86                              
10046c9e                              if (eax_56 == 0)
10046cda                                  label_10046cda:
10046cda                                  var_8 -= 1
10046cde                                  eax, edx = sub_10046e3e(ebx_3, arg1)
10046ce4                                  ecx = arg1
10046ce4                                  break
10046ce4                              
10046ca0                              void* var_1d8_26 = ebx_3
10046ca1                              edi_7 = edi_2 << 4
10046ca4                              eax, edx = sub_10046ded(var_1d8_26)
10046ca9                              ebx_3 = eax
10046cab                              ecx = var_1d8_26
10046cac                              var_18 = ebx_3
10046c3b                          else
10046c44                              if (data_10060bac s<= 1)
10046c57                                  wchar16 (* eax_55)[0x21]
10046c57                                  eax_55.b = (*data_100609a0)[ebx_3].b
10046c5a                                  eax = eax_55 & 4
10046c44                              else
10046c49                                  eax, edx = sub_10046f7a(eax, edx, ecx, ebx_3)
10046c4f                                  ecx = 4
10046c4f                              
10046c5f                              if (eax == 0)
10046c5f                                  goto label_10046cda
10046c5f                              
10046c64                              if (esi_2 != 0x6f)
10046c73                                  edi_7 = edi_2 * 0xa
10046c64                              else
10046c69                                  if (ebx_3 s>= 0x38)
10046c69                                      goto label_10046cda
10046c69                                  
10046c6b                                  edi_7 = edi_2 << 3
10046c6b                          
10046caf                          var_20_1 += 1
10046cb6                          edi_2 = edi_7 + ebx_3 - 0x30
10046cb6                          
10046cba                          if (var_24_1 != 0)
10046cbc                              void* temp9_1 = var_10_1
10046cbc                              var_10_1 -= 1
10046cbc                              
10046cbf                              if (temp9_1 == 1)
10046cbf                                  break
10046cbf                          
10046cc4                          var_8 += 1
10046cc7                          eax, edx = sub_10046e24(arg1)
10046ccc                          ebx_3 = eax
10046cce                          ecx = arg1
10046ccf                          var_18 = ebx_3
10046ccf                  
10046ce9                  if (var_1b_1 != 0)
10046ceb                      edi_2 = neg.d(edi_2)
10046b14              else
10046b1e                  if (var_13_1 == 0)
10046b27                      while (true)
10046b27                          int32_t var_2c_1
10046b27                          int32_t var_28_1
10046b27                          
10046b27                          if (esi_2 != 0x78)
10046b7f                              BOOL eax_49
10046b7f                              
10046b7f                              if (data_10060bac s<= 1)
10046b92                                  wchar16 (* eax_50)[0x21]
10046b92                                  eax_50.b = (*data_100609a0)[ebx_3].b
10046b95                                  eax_49 = eax_50 & 4
10046b7f                              else
10046b84                                  eax_49 = sub_10046f7a(eax, edx, ecx, ebx_3)
10046b84                              
10046b9a                              if (eax_49 == 0)
10046bfc                                  label_10046bfc:
10046bfc                                  var_8 -= 1
10046c00                                  eax, edx = sub_10046e3e(ebx_3, arg1)
10046c06                                  ecx = arg1
10046c06                                  break
10046c06                              
10046b9f                              int32_t eax_52
10046b9f                              int32_t edx_7
10046b9f                              
10046b9f                              if (esi_2 != 0x6f)
10046bc0                                  eax_52, ecx, edx_7 = __allmul(var_2c, var_28, 0xa, 0)
10046bc5                                  var_2c_1 = eax_52
10046bc8                                  var_28_1 = edx_7
10046b9f                              else
10046ba4                                  if (ebx_3 s>= 0x38)
10046ba4                                      goto label_10046bfc
10046ba4                                  
10046baf                                  eax_52, ecx, edx_7 = __allshl(var_2c, var_28, 3)
10046bc5                                  var_2c_1 = eax_52
10046bc8                                  var_28_1 = edx_7
10046b27                          else
10046b30                              BOOL eax_44
10046b30                              
10046b30                              if (data_10060bac s<= 1)
10046b46                                  wchar16 (* eax_45)[0x21]
10046b46                                  eax_45.b = (*data_100609a0)[ebx_3].b
10046b49                                  eax_44 = eax_45 & 0x80
10046b30                              else
10046b38                                  eax_44 = sub_10046f7a(eax, edx, ecx, ebx_3)
10046b38                              
10046b50                              if (eax_44 == 0)
10046b50                                  goto label_10046bfc
10046b50                              
10046b5f                              int32_t eax_47
10046b5f                              int32_t edx_5
10046b5f                              eax_47, edx_5 = __allshl(var_2c, var_28, 4)
10046b64                              void* var_1d8_23 = ebx_3
10046b65                              var_2c_1 = eax_47
10046b68                              var_28_1 = edx_5
10046b70                              ebx_3 = sub_10046ded(var_1d8_23)
10046b72                              ecx = var_1d8_23
10046b73                              var_18 = ebx_3
10046b73                          
10046bcb                          var_20_1 += 1
10046bd1                          edx:eax = sx.q(ebx_3 - 0x30)
10046bd2                          var_2c = var_2c_1 + eax
10046bd5                          var_28 = adc.d(var_28_1, edx, var_2c_1 + eax u< var_2c_1)
10046bd5                          
10046bdc                          if (var_24_1 != 0)
10046bde                              void* temp10_1 = var_10_1
10046bde                              var_10_1 -= 1
10046bde                              
10046be1                              if (temp10_1 == 1)
10046be1                                  break
10046be1                          
10046be6                          var_8 += 1
10046be9                          eax, edx = sub_10046e24(arg1)
10046bee                          ebx_3 = eax
10046bf0                          ecx = arg1
10046bf1                          var_18 = ebx_3
10046bf1                  
10046c0b                  if (var_1b_1 != 0)
10046c19                      int32_t ecx_22 = adc.d(var_28, 0, var_2c != 0)
10046c1c                      var_2c = neg.d(var_2c)
10046c1f                      ecx = neg.d(ecx_22)
10046c21                      var_28 = ecx
10046c21              
10046cf0              if (esi_2 == 0x46)
10046cf2                  var_20_1 = 0
10046cf2              
10046cfa              if (var_20_1 == 0)
10046cfa                  break
10046cfa              
10046d04              if (var_12_1 != 0)
10046d04                  goto label_10046d2f
10046d04              
10046d06              result += 1
10046d09              label_10046d09:
10046d09              
10046d0d              if (var_34_1 == 0)
10046d26                  if (var_11_1 == 0)
10046d2c                      *var_30 = edi_2.w
10046d26                  else
10046d28                      *var_30 = edi_2
10046d28                  
10046d26                  goto label_10046d2f
10046d26              
10046d15              *var_30 = var_2c
10046d17              ecx = var_28
10046d1a              *(var_30 + 4) = ecx
10046d2f              label_10046d2f:
10046d2f              var_19 += 1
10046d32              arg2 = &arg2[1]
10046d35              esi = arg2
10046d35          
10046d80          if (var_18 == 0xffffffff)
10046d85              if (*esi != 0x25)
10046d85                  goto label_10046dd4
10046d85              
10046d87              eax = arg2
10046d87              
10046d8e              if (*(eax + 1) != 0x6e)
10046d8e                  goto label_10046dd4
10046d8e              
10046d90              esi = eax
10046d90          
10046d92          eax.b = *esi
10046d92          
10046d96          if (eax.b == 0)
10046d96              break
10046d96          
100463f2          edi_1 = arg1
100463f2  
10046dd2  if (var_18 != 0xffffffff)
10046de5      return result
10046de5  
10046dd4  label_10046dd4:
10046dd4  
10046dde  if (result == 0 && var_19 == result.b)
10046de0      return 0xffffffff
10046de0  
10046dec  return result


10046ded    int32_t sub_10046ded(int32_t arg1)

10046df5  BOOL eax_1
10046df5  int32_t result
10046df5  
10046df5  if (data_10060bac s<= 1)
10046e07      result = arg1
10046e10      wchar16 (* eax_2)[0x21]
10046e10      eax_2.b = (*data_100609a0)[result].b
10046e13      eax_1 = eax_2 & 4
10046df5  else
10046df7      result = arg1
10046dfe      int32_t eax
10046dfe      int32_t ecx
10046dfe      int32_t edx
10046dfe      eax_1 = sub_10046f7a(eax, edx, ecx, result)
10046dfe  
10046e18  if (eax_1 != 0)
10046e23      return result
10046e23  
10046e1d  return (result & 0xffffffdf) - 7


10046e24    uint32_t sub_10046e24(int32_t* arg1)

10046e28  int32_t temp0 = arg1[1]
10046e28  arg1[1] -= 1
10046e28  
10046e2b  if (temp0 - 1 s< 0)
10046e3d      return sub_10047b91(arg1)
10046e3d  
10046e2d  char* ecx = *arg1
10046e2f  uint32_t result = zx.d(*ecx)
10046e33  *arg1 = &ecx[1]
10046e35  return result


10046e3e    void sub_10046e3e(int32_t arg1, int32_t* arg2)

10046e43  if (arg1 != 0xffffffff)
10046e4d      sub_1004cdf8(arg1, arg2)


10046e55    uint32_t sub_10046e55(int32_t* arg1, int32_t* arg2)

10046e72  uint32_t result
10046e72  bool cond:0_1
10046e72  
10046e72  do
10046e5f      *arg1 += 1
10046e61      result = sub_10046e24(arg2)
10046e6f      cond:0_1 = sub_1004cc1a(result) != 0
10046e72  while (cond:0_1)
10046e78  return result

10046e79                                                                             cc cc cc cc cc cc cc                           .......

10046e80    void* StrLen(char* arg1)

10046e80  char* ecx = arg1
10046e80  
10046e8a  while ((ecx & 3) != 0)
10046e8c      int32_t eax
10046e8c      eax.b = *ecx
10046e8e      ecx = &ecx[1]
10046e8e      
10046e91      if (eax.b == 0)
10046edc          return &ecx[0xffffffff] - arg1
10046edc  
10046ea0  while (true)
10046ea0      int32_t eax_2 = *ecx
10046eae      ecx = &ecx[4]
10046eae      
10046eb6      if (((eax_2 ^ 0xffffffff ^ (0x7efefeff + eax_2)) & 0x81010100) != 0)
10046eb8          int32_t eax_5 = *(ecx - 4)
10046eb8          
10046ebd          if (eax_5.b == 0)
10046efa              return &ecx[0xfffffffc] - arg1
10046efa          
10046ec1          if (eax_5:1.b == 0)
10046ef0              return &ecx[0xfffffffd] - arg1
10046ef0          
10046ec8          if ((eax_5 & 0xff0000) == 0)
10046ee6              return &ecx[0xfffffffe] - arg1
10046ee6          
10046ecf          if ((eax_5 & 0xff000000) == 0)
10046ecf              break
10046ecf  
10046edc  return &ecx[0xffffffff] - arg1


10046efb    int32_t* sub_10046efb(int32_t* arg1, void* arg2)

10046f10  int32_t edi = 0
10046f17  void var_1c
10046f17  char* var_8
10046f17  char eax = sub_1004ce66(&var_1c, &var_8, arg2, 0, 0, 0, 0)
10046f24  int32_t var_10
10046f24  
10046f24  if ((eax & 4) == 0)
10046f3b      int32_t eax_1 = sub_1004c701(&var_1c, &var_10)
10046f3b      
10046f4a      if ((eax & 2) != 0 || eax_1 == 1)
10046f4c          edi = 0x80
10046f4c      
10046f59      if ((eax & 1) != 0 || eax_1 == 2)
10046f5b          edi |= 0x100
10046f24  else
10046f26      edi = 0x200
10046f2b      var_10 = 0
10046f2e      int32_t var_c_1 = 0
10046f2e  
10046f67  void* ecx_3 = var_8 - arg2
10046f6a  long double x87_r7 = fconvert.t(var_10.q)
10046f6d  *arg1 = edi
10046f70  *(arg1 + 0x10) = fconvert.d(x87_r7)
10046f74  arg1[1] = ecx_3
10046f79  return arg1


10046f7a    BOOL __convention("regparm") sub_10046f7a(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4)

10046f7d  int32_t var_8 = arg3
10046f7e  int32_t arg_4
10046f7e  int32_t eax = arg_4
10046f8a  uint32_t eax_1
10046f8a  
10046f8a  if (eax + 1 u> 0x100)
10046fa1      char ecx_3 = (eax s>> 8).b
10046fad      int32_t __saved_esi_1
10046fad      
10046fad      if ((*(&(*data_100609a0)[zx.d(ecx_3)] + 1) & 0x80) == 0)
10046fbd          var_8:1.b = 0
10046fc1          var_8.b = eax.b
10046fc4          __saved_esi_1 = 1
10046fad      else
10046faf          var_8:2.b = 0
10046fb3          var_8.b = ecx_3
10046fb6          var_8:1.b = eax.b
10046fb9          __saved_esi_1 = 2
10046fb9      
10046fd8      BOOL result = sub_1004d373(1, &var_8, __saved_esi_1, &arg_4:2, 0, 0, 1)
10046fd8      
10046fe2      if (result == 0)
10046fe5          return result
10046fe5      
10046fe6      eax_1 = zx.d(arg_4:2.w)
10046f8a  else
10046f92      eax_1 = zx.d((*data_100609a0)[eax])
10046f92  
10046fee  return eax_1 & arg4

10046fef                                               cc                                                                 .

10046ff0    int32_t __stdcall __allmul(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4) __pure

10046ffe  if ((arg4 | arg2) == 0)
10047006      return arg1 * arg3
10047006  
1004701c  int32_t result
1004701c  int32_t edx
1004701c  edx:result = mulu.dp.d(arg1, arg3)
10047021  return result


10047024    long double __convention("regparm") sub_10047024(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, double arg5, int32_t arg6)

1004702e  if (data_100612b0 != 0)
10047063      *sub_10044f86() = 0x21
1004706c      int16_t x87control
1004706c      sub_100479b8(x87control, arg6, 0xffff)
10047077      return fconvert.t(arg5)
10047077  
10047036  int32_t var_c = arg3
10047037  int32_t var_10 = arg3
10047038  var_10.q = fconvert.d(fconvert.t(arg5))
1004703c  int32_t var_18 = arg3
1004703f  var_18.q = fconvert.d(float.t(0))
10047046  int32_t var_20 = arg3
10047047  var_20.q = fconvert.d(fconvert.t(arg5))
10047058  return sub_100476df(1, arg4, var_20, arg3, var_18, arg3, var_10, arg6)


10047078    long double __convention("regparm") sub_10047078(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, double arg5, double arg6, int32_t arg7)

1004707b  int32_t var_8 = arg3
1004707c  int32_t var_c = arg3
1004708a  var_c.q = fconvert.d(fconvert.t(arg5) + fconvert.t(arg6))
1004708a  
1004708d  if (data_100612b0 != 0)
100470c3      *sub_10044f86() = 0x21
100470cc      int16_t x87control
100470cc      sub_100479b8(x87control, arg7, 0xffff)
100470d7      return fconvert.t(var_c.q)
100470d7  
10047095  int32_t var_14 = arg3
10047096  int32_t var_18 = arg3
10047097  var_18.q = fconvert.d(fconvert.t(var_c.q))
1004709e  int32_t var_20 = arg3
1004709f  var_20.q = fconvert.d(fconvert.t(arg6))
100470a6  int32_t var_28 = arg3
100470a7  var_28.q = fconvert.d(fconvert.t(arg5))
100470b8  return sub_100476df(1, arg4, var_28, arg3, var_20, arg3, var_18, arg7)


100470d8    long double sub_100470d8(int32_t arg1, int32_t arg2, int32_t arg3)

100470f2  double arg_c
100470f2  double arg_14
100470f2  
100470f2  if (sub_100474c8(arg1, &arg_14, arg3.b) == 0)
100470f7      int32_t var_24
100470f7      int32_t var_24_1 = var_24 & 0xfffffffe
1004710e      void var_5c
1004710e      sub_10047215(&var_5c, &arg3, arg1.b, arg2, &arg_c, &arg_14)
1004710e      noreturn
1004710e  
10047119  int32_t eax_1 = sub_100477b4(arg1.b)
10047119  
1004712a  if (data_100612b0 != 0 || eax_1 == 0)
10047155      sub_10047767(eax_1)
10047164      int16_t x87control
10047164      sub_100479b8(x87control, arg3, 0xffff)
1004716f      return fconvert.t(arg_14)
1004716f  
10047132  int32_t var_64_2 = arg1
10047133  int32_t var_68_2 = arg1
10047134  var_68_2.q = fconvert.d(fconvert.t(arg_14))
10047138  int32_t var_70_1 = arg1
1004713b  var_70_1.q = fconvert.d(float.t(0))
10047142  int32_t var_78 = arg1
10047143  var_78.q = fconvert.d(fconvert.t(arg_c))
10047153  return sub_100476df(eax_1, arg2, var_78, arg1, var_70_1, arg1, var_68_2, arg3)

10047113                                                           83 c4 18                                                   ...

10047170    long double sub_10047170(int32_t arg1, int32_t arg2, double arg3, int32_t arg4)

1004718a  double arg_c
1004718a  double arg_1c
1004718a  
1004718a  if (sub_100474c8(arg1, &arg_1c, arg4.b) == 0)
1004718f      int32_t var_24
1004718f      int32_t eax_1
1004718f      eax_1.b = var_24.b & 0xe3
10047191      eax_1.b |= 3
10047193      int32_t var_24_1 = eax_1
100471aa      double var_34 = fconvert.d(fconvert.t(arg3))
100471b2      void var_5c
100471b2      sub_10047215(&var_5c, &arg4, arg1.b, arg2, &arg_c, &arg_1c)
100471b2      noreturn
100471b2  
100471bd  int32_t eax_2 = sub_100477b4(arg1.b)
100471bd  
100471ce  if (data_100612b0 != 0 || eax_2 == 0)
100471fa      sub_10047767(eax_2)
10047209      int16_t x87control
10047209      sub_100479b8(x87control, arg4, 0xffff)
10047214      return fconvert.t(arg_1c)
10047214  
100471d6  int32_t var_64_2 = arg1
100471d7  int32_t var_68_2 = arg1
100471d8  var_68_2.q = fconvert.d(fconvert.t(arg_1c))
100471df  int32_t var_70_1 = arg1
100471e0  var_70_1.q = fconvert.d(fconvert.t(arg3))
100471e7  int32_t var_78 = arg1
100471e8  var_78.q = fconvert.d(fconvert.t(arg_c))
100471f8  return sub_100476df(eax_2, arg2, var_78, arg1, var_70_1, arg1, var_68_2, arg4)


100471b7    long double sub_100471b7(int32_t* arg1 @ ebp)

100471ba  int32_t arg_14 = arg1[2]
100471bd  int32_t eax = sub_100477b4(arg_14.b)
100471bd  
100471ce  if (data_100612b0 != 0 || eax == 0)
100471fa      sub_10047767(eax)
10047209      int16_t x87control
10047209      sub_100479b8(x87control, arg1[0xa], 0xffff)
10047213      *arg1
10047214      return fconvert.t(*(arg1 + 0x20))
10047214  
100471d6  int32_t arg_10 = arg_14
100471d7  int32_t arg_c = arg_14
100471d8  arg_c.q = fconvert.d(fconvert.t(*(arg1 + 0x20)))
100471df  int32_t arg_4 = arg_14
100471e0  arg_4.q = fconvert.d(fconvert.t(*(arg1 + 0x18)))
100471e7  int32_t var_4 = arg_14
100471e8  var_4.q = fconvert.d(fconvert.t(*(arg1 + 0x10)))
100471ef  int80_t result =
100471ef      sub_100476df(eax, arg1[3], var_4, arg_14, arg_4, arg_14, arg_c, arg1[0xa])
100471f7  *arg1
100471f8  return result


10047215    void sub_10047215(uint32_t arg1, int32_t* arg2, char arg3, int32_t arg4, double* arg5, double* arg6) __noreturn

1004721f  *(arg1 + 4) = 0
10047228  *(arg1 + 8) = 0
1004722f  *(arg1 + 0xc) = 0
10047232  uint32_t ecx_2
10047232  ecx_2.b = arg3
10047232  
10047238  if ((ecx_2.b & 0x10) != 0)
1004723a      uint32_t eax_1 = arg1
1004723d      arg3.d = 0xc000008f
10047244      *(eax_1 + 4) |= 1
10047244  
1004724a  if ((ecx_2.b & 2) != 0)
1004724c      uint32_t eax_2 = arg1
1004724f      arg3.d = 0xc0000093
10047256      *(eax_2 + 4) |= 2
10047256  
1004725c  if ((1 & ecx_2.b) != 0)
1004725e      uint32_t eax_3 = arg1
10047261      arg3.d = 0xc0000091
10047268      *(eax_3 + 4) |= 4
10047268  
1004726f  if ((ecx_2.b & 4) != 0)
10047271      uint32_t eax_4 = arg1
10047274      arg3.d = 0xc000008e
1004727b      *(eax_4 + 4) |= 8
1004727b  
10047282  if ((ecx_2.b & 8) != 0)
10047284      uint32_t eax_5 = arg1
10047287      arg3.d = 0xc0000090
1004728e      *(eax_5 + 4) |= 0x10
1004728e  
10047295  uint32_t eax_6 = arg1
100472ac  *(eax_6 + 8) = (not.d(*arg2) & 1) << 4 | (*(eax_6 + 8) & 0xffffffef)
100472b1  uint32_t eax_7 = arg1
100472c3  *(eax_7 + 8) = (not.d(*arg2) & 4) << 1 | (*(eax_7 + 8) & 0xfffffff7)
100472c8  uint32_t eax_8 = arg1
100472da  *(eax_8 + 8) = (not.d(*arg2) u>> 1 & 4) | (*(eax_8 + 8) & 0xfffffffb)
100472df  uint32_t eax_9 = arg1
100472f1  *(eax_9 + 8) = (not.d(*arg2) u>> 3 & 2) | (*(eax_9 + 8) & 0xfffffffd)
100472f6  uint32_t eax_10 = arg1
10047308  *(eax_10 + 8) = (not.d(*arg2) u>> 5 & 1) | (*(eax_10 + 8) & 0xfffffffe)
1004730b  char eax_11 = sub_1004799b()
1004730b  
10047312  if ((1 & eax_11) != 0)
10047314      uint32_t ecx_28 = arg1
10047317      *(ecx_28 + 0xc) |= 0x10
10047317  
1004731d  if ((eax_11 & 4) != 0)
1004731f      uint32_t ecx_29 = arg1
10047322      *(ecx_29 + 0xc) |= 8
10047322  
10047328  if ((eax_11 & 8) != 0)
1004732a      uint32_t ecx_30 = arg1
1004732d      *(ecx_30 + 0xc) |= 4
1004732d  
10047333  if ((eax_11 & 0x10) != 0)
10047335      uint32_t ecx_31 = arg1
10047338      *(ecx_31 + 0xc) |= 2
10047338  
1004733d  if ((eax_11 & 0x20) != 0)
1004733f      uint32_t eax_12 = arg1
10047342      *(eax_12 + 0xc) |= 1
10047342  
1004734c  int32_t eax_14 = *arg2 & 0xc00
1004734c  
1004734e  if (eax_14 == 0)
10047384      uint32_t eax_17 = arg1
10047387      *eax_17 &= 0xfffffffc
1004734e  else
10047355      uint32_t eax_16
10047355      
10047355      if (eax_14 == 0x400)
10047376          eax_16 = arg1
10047380          *eax_16 = (*eax_16 & 0xfffffffd) | 1
10047355      else if (eax_14 == 0x800)
1004736a          eax_16 = arg1
10047380          *eax_16 = (*eax_16 & 0xfffffffe) | 2
1004735c      else if (eax_14 == 0xc00)
10047362          uint32_t eax_15 = arg1
10047365          *eax_15 |= 3
10047365  
10047391  int32_t eax_19 = *arg2 & 0x300
10047393  uint32_t eax_21
10047393  
10047393  if (eax_19 == 0)
100473b5      eax_21 = arg1
100473c0      *eax_21 = (*eax_21 & 0xffffffeb) | 8
10047393  else if (eax_19 == 0x200)
100473a8      eax_21 = arg1
100473c0      *eax_21 = (*eax_21 & 0xffffffe7) | 4
1004739a  else if (eax_19 == 0x300)
100473a0      uint32_t eax_20 = arg1
100473a3      *eax_20 &= 0xffffffe3
100473c2  uint32_t eax_22 = arg1
100473db  *eax_22 = (arg4 & 0xfff) << 5 | (*eax_22 & 0xfffe001f)
100473dd  uint32_t eax_23 = arg1
100473e0  *(eax_23 + 0x20) |= 1
100473e3  uint32_t eax_24 = arg1
100473ee  *(eax_24 + 0x20) = (*(eax_24 + 0x20) & 0xffffffe3) | 2
100473f9  *(arg1 + 0x10) = fconvert.d(fconvert.t(*arg5))
100473fc  uint32_t eax_27 = arg1
100473ff  *(eax_27 + 0x50) |= 1
10047402  uint32_t eax_28 = arg1
10047410  *(eax_28 + 0x50) = (*(eax_28 + 0x50) & 0xffffffe3) | 2
10047418  *(arg1 + 0x40) = fconvert.d(fconvert.t(*arg6))
1004741b  sub_100479a9()
1004742a  RaiseException(dwExceptionCode: arg3.d, dwExceptionFlags: 0, nNumberOfArguments: 1, 
1004742a      lpArguments: &arg1)
1004742a  noreturn

10047430                                                  8b 45 08 f6 40 08 10 74 03 83 26 fe f6 40 08 08                  .E..@..t..&..@..
10047440  74 03 83 26 fb f6 40 08 04 74 03 83 26 f7 f6 40 08 02 74 03 83 26 ef 84 58 08 74 03 83 26 df 8b  t..&..@..t..&..@..t..&..X.t..&..
10047460  08 ba ff f3 ff ff 83 e1 03 83 e9 00 74 25 49 74 16 49 74 09 49 75 1e 80 4e 01 0c eb 18 8b 0e 80  ............t%It.It.Iu..N.......
10047480  e5 fb 80 cd 08 eb 08 8b 0e 80 e5 f7 80 cd 04 89 0e eb 02 21 16 8b 08 c1 e9 02 83 e1 07 83 e9 00  ...................!............
100474a0  74 13 49 74 07 49 75 16 21 16 eb 12 8b 0e 23 ca 80 cd 02 eb 07 8b 0e 23 ca 80 cd 03 89 0e dd 40  t.It.Iu.!.....#........#.......@
100474c0  40 dd 1f 5f 5e 5b 5d c3                                                                          @.._^[].

100474c8    int32_t sub_100474c8(int32_t arg1, double* arg2, char arg3)

100474d5  int32_t edi_1 = arg1 & 0x1f
100474e2  long double st0
100474e2  int80_t x87_r0
100474e2  
100474e2  if ((arg1.b & 8) != 0 && (arg3 & 1) != 0)
100474e5      sub_100479db(x87_r0, 1)
100474eb      edi_1 &= 0xfffffff7
100474e2  else if ((arg1.b & 4) != 0 && (arg3 & 4) != 0)
100474ff      sub_100479db(x87_r0, 4)
10047505      edi_1 &= 0xfffffffb
100474fb  else if ((1 & arg1.b) != 0 && (arg3 & 8) != 0)
10047521      sub_100479db(x87_r0, 8)
1004752f      int32_t ecx_4 = arg3.d & 0xc00
10047531      int16_t eax_1
10047531      
10047531      if (ecx_4 == 0)
100475c2          long double x87_r0_10 = fconvert.t(*arg2)
100475c4          long double temp0_1 = fconvert.t(0.0)
100475c4          x87_r0_10 - temp0_1
100475ca          long double x87_r0_11 = fconvert.t(data_10060c98)
100475d0          eax_1 = (x87_r0_10 < temp0_1 ? 1 : 0) << 8
100475d0              | (is_unordered.t(x87_r0_10, temp0_1) ? 1 : 0) << 0xa
100475d0              | (x87_r0_10 == temp0_1 ? 1 : 0) << 0xe
100475d0          
100475d3          if (test_bit(eax_1:1.b, 6) || test_bit(eax_1:1.b, 0))
100475d5              x87_r0_11 = fneg(x87_r0_11)
100475d5          
100475dd          *arg2 = fconvert.d(fconvert.t(fconvert.d(x87_r0_11)))
10047531      else if (ecx_4 == 0x400)
1004759a          long double x87_r0_7 = fconvert.t(*arg2)
1004759c          long double temp2_1 = fconvert.t(0.0)
1004759c          x87_r0_7 - temp2_1
100475a2          eax_1 = (x87_r0_7 < temp2_1 ? 1 : 0) << 8
100475a2              | (is_unordered.t(x87_r0_7, temp2_1) ? 1 : 0) << 0xa
100475a2              | (x87_r0_7 == temp2_1 ? 1 : 0) << 0xe | 0x800
100475a5          long double x87_r0_8
100475a5          
100475a5          if (test_bit(eax_1:1.b, 6) || test_bit(eax_1:1.b, 0))
100475b5              x87_r0_8 = fneg(fconvert.t(data_10060c98))
100475a5          else
100475a7              x87_r0_8 = fconvert.t(data_10060ca8)
100475a7          
100475dd          *arg2 = fconvert.d(fconvert.t(fconvert.d(x87_r0_8)))
1004753d      else if (ecx_4 == 0x800)
10047572          long double x87_r0_4 = fconvert.t(*arg2)
10047574          long double temp3_1 = fconvert.t(0.0)
10047574          x87_r0_4 - temp3_1
1004757a          eax_1 = (x87_r0_4 < temp3_1 ? 1 : 0) << 8
1004757a              | (is_unordered.t(x87_r0_4, temp3_1) ? 1 : 0) << 0xa
1004757a              | (x87_r0_4 == temp3_1 ? 1 : 0) << 0xe | 0x800
1004757d          long double x87_r0_5
1004757d          
1004757d          if (test_bit(eax_1:1.b, 6) || test_bit(eax_1:1.b, 0))
1004758d              x87_r0_5 = fneg(fconvert.t(data_10060ca8))
1004757d          else
1004757f              x87_r0_5 = fconvert.t(data_10060c98)
1004757f          
100475dd          *arg2 = fconvert.d(fconvert.t(fconvert.d(x87_r0_5)))
10047545      else if (ecx_4 == 0xc00)
10047552          long double x87_r0_1 = fconvert.t(*arg2)
10047554          long double temp5_1 = fconvert.t(0.0)
10047554          x87_r0_1 - temp5_1
1004755a          long double x87_r0_2 = fconvert.t(data_10060ca8)
10047560          eax_1 = (x87_r0_1 < temp5_1 ? 1 : 0) << 8
10047560              | (is_unordered.t(x87_r0_1, temp5_1) ? 1 : 0) << 0xa
10047560              | (x87_r0_1 == temp5_1 ? 1 : 0) << 0xe
10047560          
10047563          if (test_bit(eax_1:1.b, 6) || test_bit(eax_1:1.b, 0))
10047565              x87_r0_2 = fneg(x87_r0_2)
10047565          
100475dd          *arg2 = fconvert.d(fconvert.t(fconvert.d(x87_r0_2)))
100475df      edi_1 &= 0xfffffffe
10047519  else if ((arg1.b & 2) != 0 && (arg3 & 0x10) != 0)
100475fa      int32_t esi_1 = 0
100475fa      
100475fe      if ((arg1.b & 0x10) != 0)
10047600          esi_1 = 1
10047600      
10047607      double var_10_5 = fconvert.d(fconvert.t(*arg2))
1004760a      long double x87_r7_2 = fconvert.t(var_10_5)
1004760d      long double temp1_1 = fconvert.t(0.0)
1004760d      x87_r7_2 - temp1_1
10047613      double* eax_2
10047613      eax_2.w = (x87_r7_2 < temp1_1 ? 1 : 0) << 8
10047613          | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
10047613          | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe
10047613      
10047616      if (test_bit(eax_2:1.b, 6))
100476ab          esi_1 = 1
10047616      else
10047623          int32_t ecx
10047623          int32_t var_24_1 = ecx
10047624          int32_t var_28_1 = ecx
10047625          var_28_1.q = fconvert.d(fconvert.t(var_10_5))
10047628          int32_t var_8
10047628          st0 = sub_100478da(esi_1, var_28_1, &var_8)
10047633          double var_10_6 = fconvert.d(st0)
10047633          
10047642          if (var_8 - 0x600 s>= 0xfffffbce)
1004764d              long double x87_r7_6 = fconvert.t(var_10_6)
10047650              long double temp4_1 = fconvert.t(0.0)
10047650              x87_r7_6 - temp4_1
10047656              int32_t eax_3
10047656              eax_3.w = (x87_r7_6 < temp4_1 ? 1 : 0) << 8
10047656                  | (is_unordered.t(x87_r7_6, temp4_1) ? 1 : 0) << 0xa
10047656                  | (x87_r7_6 == temp4_1 ? 1 : 0) << 0xe
10047659              int32_t edx_1
10047659              
10047659              if (not(test_bit(eax_3:1.b, 0)))
1004765f                  edx_1 = 0
10047659              else
1004765b                  edx_1 = 1
1004765b              
10047661              eax_3.b = var_10_6:6.b
10047667              int16_t eax_4
10047667              eax_4.b = (eax_3.w & 0xf).b | 0x10
10047669              var_10_6:6.w = eax_4
10047669              
10047674              if (var_8 - 0x600 s< 0xfffffc03)
10047676                  int32_t i_1 = 0xfffffc03 - (var_8 - 0x600)
10047693                  int32_t i
10047693                  
10047693                  do
1004767f                      if ((var_10_6.b & 1) != 0 && esi_1 == 0)
10047681                          esi_1 = 1
10047681                      
10047683                      var_10_6.d u>>= 1
10047683                      
10047689                      if ((var_10_6:4.b & 1) != 0)
1004768b                          var_10_6:3.b |= 0x80
1004768b                      
1004768f                      var_10_6:4.d u>>= 1
10047692                      i = i_1
10047692                      i_1 -= 1
10047693                  while (i != 1)
10047693              
10047697              if (edx_1 != 0)
1004769e                  var_10_6 = fconvert.d(fneg(fconvert.t(var_10_6)))
10047642          else
10047646              esi_1 = 1
10047648              var_10_6 = fconvert.d(float.t(0))
10047648          
100476a7          *arg2 = fconvert.d(fconvert.t(var_10_6))
100476a7      
100476b0      if (esi_1 != 0)
100476b4          sub_100479db(x87_r0, 0x10)
100476b4      
100476ba      edi_1 &= 0xfffffffd
100476ba  
100476c7  if ((arg1.b & 0x10) != 0 && (arg3 & 0x20) != 0)
100476cb      sub_100479db(st0, 0x20)
100476d1      edi_1 &= 0xffffffef
100476d1  
100476da  int32_t result
100476da  result.b = edi_1 == 0
100476de  return result


100476df    long double sub_100476df(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, double arg7, int32_t arg8)

100476e8  int32_t eax = sub_1004778f(arg2)
100476f0  int32_t var_20 = eax
100476f3  int16_t x87control
100476f3  
100476f3  if (eax == 0)
10047752      sub_100479b8(x87control, arg8, 0xffff)
1004775a      sub_10047767(arg1)
10047766      return fconvert.t(arg7)
10047766  
100476f9  int32_t var_1c = arg3
100476ff  int32_t var_18 = arg4
10047708  int32_t var_14 = arg5
10047716  int32_t var_10 = arg6
1004771c  void* var_24 = arg1
10047725  int32_t var_8 = arg7:4.d
10047728  sub_100479b8(x87control, arg8, 0xffff)
10047730  int32_t* var_34 = &var_24
1004773e  sub_10047767(arg1)
10047749  return fconvert.t(arg7.d.q)


10047767    void* sub_10047767(void* arg1)

10047767  void* eax_1 = arg1
10047767  
1004776e  if (eax_1 == 1)
10047783      eax_1 = sub_10044f86()
10047788      *eax_1 = 0x21
1004776e  else if (eax_1 s> 1 && eax_1 s<= 3)
10047777      void* eax = sub_10044f86()
1004777c      *eax = 0x22
10047782      return eax
10047782  
1004778e  return eax_1


1004778f    int32_t sub_1004778f(int32_t arg1)

1004778f  int32_t ecx = 0
1004778f  
100477a7  for (void* i = &data_10060bc0; i s< &data_10060c98; )
1004779c      if (*i == arg1)
100477b3          return (&data_10060bc4)[ecx * 2]
100477b3      
1004779e      i += 8
100477a1      ecx += 1
100477a1  
100477ab  return 0


100477b4    int32_t sub_100477b4(char arg1) __pure

100477ba  if ((arg1 & 0x20) != 0)
100477bc      return 5
100477bc  
100477c2  if ((arg1 & 8) != 0)
100477c4      return 1
100477c4  
100477ca  if ((arg1 & 4) != 0)
100477cc      return 2
100477cc  
100477d2  if ((arg1 & 1) == 0)
100477e0      return (zx.d(arg1) & 2) << 1
100477e0  
100477d4  return 3


100477e1    long double __frnd(double arg1) __pure

100477e4  int32_t ecx
100477e4  int32_t var_8 = ecx
100477e5  int32_t var_c = ecx
100477eb  var_c.q = fconvert.d(roundint.t(fconvert.t(arg1)))
100477f2  return fconvert.t(var_c.q)


100477f3    long double sub_100477f3(double arg1, int16_t arg2, int32_t arg3) __pure

100477f6  int32_t ecx
100477f6  int32_t var_8 = ecx
100477f7  int32_t var_c = ecx
1004780b  var_c.q = fconvert.d(fconvert.t(arg1))
10047813  var_8:2.w = ((arg3 + 0x3fe) << 4).w | (arg2 & 0x800f)
1004781b  return fconvert.t(var_c.q)


1004781c    int32_t sub_1004781c(int32_t arg1) __pure

1004782f  return sx.d(((arg1 u>> 4).w & 0x7ff) - 0x3fe)


10047830    int80_t sub_10047830(double arg1, int32_t arg2)

1004784e  int32_t var_8 = arg2
1004784f  int32_t var_c = arg2
10047850  var_c.q = fconvert.d(fconvert.t(arg1))
1004785b  return sub_100477f3(var_c, ((arg2 u>> 4).w & 0x7ff) + arg2.w - 0x3fe, __return_addr)


1004785c    long double sub_1004785c(double arg1, int16_t arg2, int32_t arg3) __pure

1004785f  int32_t ecx
1004785f  int32_t var_8 = ecx
10047860  int32_t var_c = ecx
1004786d  var_c.q = fconvert.d(fconvert.t(arg1))
10047877  var_8:2.w = (arg3 << 4).w | (arg2 & 0x800f)
1004787f  return fconvert.t(var_c.q)


10047880    int32_t sub_10047880(int32_t arg1, int32_t arg2) __pure

1004788c  if (arg2 != 0x7ff00000)
100478a3      if (arg2 == 0xfff00000 && arg1 == 0)
100478a5          return 2
1004788c  else if (arg1 == 0)
10047893      return 1
10047893  
100478b1  int16_t ecx_2 = arg2:2.w & 0x7ff8
100478b1  
100478b6  if (ecx_2 == 0x7ff8)
100478b8      return 3
100478b8  
100478cf  if (ecx_2 == 0x7ff0 && ((arg2 & 0x7ffff) != 0 || arg1 != 0))
100478d1      return 4
100478d1  
100478d9  return 0


100478da    long double sub_100478da(int32_t arg1 @ esi, double arg2, int32_t* arg3)

100478dd  int32_t ecx
100478dd  int32_t var_8 = ecx
100478de  int32_t var_c = ecx
100478df  long double x87_r7 = fconvert.t(arg2)
100478e2  long double temp0 = fconvert.t(0.0)
100478e2  x87_r7 - temp0
100478ec  int32_t esi
100478ec  
100478ec  if (test_bit(
100478ec          ((x87_r7 < temp0 ? 1 : 0) << 8 | (is_unordered.t(x87_r7, temp0) ? 1 : 0) << 0xa
100478ec              | (x87_r7 == temp0 ? 1 : 0) << 0xe):1.b, 
100478ec          6))
100478f0      esi = 0
100478f2      var_c.q = fconvert.d(float.t(0))
100478ec  else if ((arg2:6.w & 0x7ff0) != 0 || ((arg2:4.d & 0xfffff) == 0 && arg2.d == 0))
1004796d      int32_t var_18_2 = 0
1004797d      var_c.q = fconvert.d(sub_100477f3(0f, 0, arg1))
1004798a      esi = sx.d((arg2:6.d u>> 4).w & 0x7ff) - 0x3fe
10047910  else
10047912      long double x87_r7_2 = fconvert.t(arg2)
10047915      long double temp1_1 = fconvert.t(0.0)
10047915      x87_r7_2 - temp1_1
1004791b      esi = 0xfffffc03
10047923      int32_t eax_1
10047923      
10047923      if (not(test_bit(
10047923              ((x87_r7_2 < temp1_1 ? 1 : 0) << 8
10047923                  | (is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0) << 0xa
10047923                  | (x87_r7_2 == temp1_1 ? 1 : 0) << 0xe):1.b, 
10047923              0)))
1004792a          eax_1 = 0
10047923      else
10047927          eax_1 = 1
10047927      
10047930      while ((arg2:6.b & 0x10) == 0)
10047932          arg2:4.d <<= 1
10047932          
10047939          if ((arg2:3.b & 0x80) != 0)
1004793b              arg2:4.d |= 1
1004793b          
1004793f          arg2.d <<= 1
10047942          esi -= 1
10047942      
10047945      arg2:6.w &= 0xffef
10047945      
1004794d      if (eax_1 != 0)
1004794f          arg2:7.b |= 0x80
1004794f      
10047957      int32_t var_18_1 = 0
10047961      var_c.q = fconvert.d(sub_100477f3(0f, 0, arg1))
10047961  
10047996  *arg3 = esi
1004799a  return fconvert.t(var_c.q)


1004799b    int32_t sub_1004799b() __pure

1004799e  int32_t ecx
1004799e  int32_t var_8 = ecx
100479a0  bool c0
100479a0  bool c1
100479a0  bool c2
100479a0  bool c3
100479a0  var_8:2.w =
100479a0      (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa | (c3 ? 1 : 0) << 0xe
100479a8  return sx.d(var_8:2.w)


100479a9    int32_t sub_100479a9()

100479ac  int32_t ecx
100479ac  int32_t var_8 = ecx
100479ad  bool c0
100479ad  bool c1
100479ad  bool c2
100479ad  bool c3
100479ad  var_8:2.w =
100479ad      (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa | (c3 ? 1 : 0) << 0xe
100479b0  __fnclex()
100479b7  return sx.d(var_8:2.w)


100479b8    int32_t sub_100479b8(int16_t arg1 @ x87control, int32_t arg2, int32_t arg3)

100479bb  int32_t ecx
100479bb  int32_t var_8 = ecx
100479bd  int16_t x87status
100479bd  int16_t temp0
100479bd  temp0, x87status = __fnstcw_memmem16(arg1)
100479bd  var_8.w = temp0
100479d2  int16_t x87control
100479d2  int16_t x87status_1
100479d2  x87control, x87status_1 = __fldcw_memmem16(((not.d(arg3) & var_8) | (arg3 & arg2)).w)
100479da  return sx.d(var_8.w)


100479db    void sub_100479db(int80_t arg1 @ st0, char arg2)

100479de  int32_t ecx
100479de  int32_t var_8 = ecx
100479df  int32_t var_c = ecx
100479e0  ecx.b = arg2
100479e6  int16_t top
100479e6  bool c1
100479e6  
100479e6  if ((ecx.b & 1) != 0)
100479e8      data_10060cc0
100479ee      arg2.d = int.d(arg1)
100479ee      top = 1
100479ee      c1 = unimplemented  {fistp dword [ebp+0x8], st0}
100479ee  
100479f5  if ((ecx.b & 8) != 0)
100479f8      int32_t eax
100479f8      bool c0
100479f8      bool c2
100479f8      bool c3
100479f8      eax.w = (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa
100479f8          | (c3 ? 1 : 0) << 0xe | (top & 7) << 0xb
100479fa      unimplemented  {fld st0, tword [&data_10060cc0]}
10047a00      int64_t temp1_1 = unimplemented  {fstp qword [ebp-0x8], st0}
10047a00      unimplemented  {fstp qword [ebp-0x8], st0}
10047a00      var_c.q = fconvert.d(temp1_1)
10047a00      bool c1_1 = unimplemented  {fstp qword [ebp-0x8], st0}
10047a05      eax.w = (c0 ? 1 : 0) << 8 | (c1_1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa
10047a05          | (c3 ? 1 : 0) << 0xe | (top & 7) << 0xb
10047a05  
10047a0a  if ((ecx.b & 0x10) != 0)
10047a0c      unimplemented  {fld st0, tword [&data_10060ccc]}
10047a12      var_c.q = fconvert.d(unimplemented  {fstp qword [ebp-0x8], st0})
10047a12      unimplemented  {fstp qword [ebp-0x8], st0}
10047a12  
10047a19  if ((ecx.b & 4) != 0)
10047a1b      unimplemented  {fldz }
10047a1d      unimplemented  {fld1 }
10047a1f      unimplemented  {fdivrp st1, st0}
10047a1f      unimplemented  {fdivrp st1, st0}
10047a21      unimplemented  {fstp st0, st0}
10047a21      unimplemented  {fstp st0, st0}
10047a21  
10047a27  if ((ecx.b & 0x20) != 0)
10047a29      unimplemented  {fldpi }
10047a2b      var_c.q = fconvert.d(unimplemented  {fstp qword [ebp-0x8], st0})
10047a2b      unimplemented  {fstp qword [ebp-0x8], st0}


10047a31    int32_t sub_10047a31()

10047a31  int32_t eax = data_1006b3c0
10047a31  
10047a3c  if (eax == 0)
10047a3e      eax = 0x200
10047a4b      data_1006b3c0 = eax
10047a3c  else if (eax s< 0x14)
10047a49      eax = 0x14
10047a4b      data_1006b3c0 = eax
10047a4b  
10047a53  void* eax_1 = sub_1004d4bf(eax, 4)
10047a59  data_1006a080 = eax_1
10047a59  
10047a61  if (eax_1 == 0)
10047a66      data_1006b3c0 = 0x14
10047a6c      void* eax_2 = sub_1004d4bf(0x14, 4)
10047a72      data_1006a080 = eax_2
10047a72      
10047a7a      if (eax_2 == 0)
10047a7e          sub_10045ef6(0x1a)
10047a7e  
10047a84  void*** ecx_3 = nullptr
10047a84  
10047a9f  for (void** i = &data_10060cd8; i s< 0x10060f58; )
10047a91      *(ecx_3 + data_1006a080) = i
10047a94      i = &i[8]
10047a97      ecx_3 = &ecx_3[1]
10047a97  
10047aa1  int32_t ecx_4 = 0
10047ad5  int32_t result
10047ad5  
10047ad5  for (void* i_1 = &data_10060ce8; i_1 s< 0x10060d48; )
10047abc      result = *((&data_10069f40)[ecx_4 s>> 5] + (ecx_4 & 0x1f) * 0x24)
10047abc      
10047ac6      if (result == 0xffffffff || result == 0)
10047ac8          *i_1 = 0xffffffff
10047ac8      
10047acb      i_1 += 0x20
10047ace      ecx_4 += 1
10047ace  
10047ad8  return result


10047ad9    int32_t sub_10047ad9()

10047ad9  int32_t result = sub_10045a05()
10047ad9  
10047ae5  if (data_100634b4 == 0)
10047aec      return result
10047aec  
10047ae7  return sub_1004d54c() __tailcall


10047aed    int32_t sub_10047aed(void* arg1)

10047aff  if (arg1 u>= &data_10060cd8 && arg1 u<= 0x10060f38)
10047b10      return LockArenaSection(index: ((arg1 - &data_10060cd8) s>> 5) + 0x1c)
10047b10  
10047b1b  return EnterCriticalSection(lpCriticalSection: arg1 + 0x20)


10047b1c    int32_t sub_10047b1c(int32_t arg1, void* arg2)

10047b23  if (arg1 s>= 0x14)
10047b3e      return EnterCriticalSection(lpCriticalSection: arg2 + 0x20)
10047b3e  
10047b2f  return LockArenaSection(index: arg1 + 0x1c)


10047b3f    int32_t sub_10047b3f(void* arg1)

10047b51  if (arg1 u>= &data_10060cd8 && arg1 u<= 0x10060f38)
10047b62      return UnlockArenaSection(index: ((arg1 - &data_10060cd8) s>> 5) + 0x1c)
10047b62  
10047b6d  return LeaveCriticalSection(lpCriticalSection: arg1 + 0x20)


10047b6e    int32_t sub_10047b6e(int32_t arg1, void* arg2)

10047b75  if (arg1 s>= 0x14)
10047b90      return LeaveCriticalSection(lpCriticalSection: arg2 + 0x20)
10047b90  
10047b81  return UnlockArenaSection(index: arg1 + 0x1c)


10047b91    uint32_t sub_10047b91(int32_t* arg1)

10047b96  int32_t eax = arg1[3]
10047b96  
10047ba3  if ((eax.b & 0x83) != 0 && (eax.b & 0x40) == 0)
10047bab      if ((eax.b & 2) == 0)
10047bb7          eax.b |= 1
10047bbd          arg1[3] = eax
10047bbd          
10047bc0          if ((eax.w & 0x10c) != 0)
10047bce              *arg1 = arg1[2]
10047bc0          else
10047bc3              sub_1004d5cd(arg1)
10047bc3          
10047bd9          void* eax_2 = sub_10047c6d(arg1[4], arg1[2], arg1[6])
10047be1          arg1[1] = eax_2
10047be1          
10047beb          if (eax_2 != 0 && eax_2 != 0xffffffff)
10047bed              int32_t edx = arg1[3]
10047bed              
10047bf3              if ((edx.b & 0x82) == 0)
10047bf5                  int32_t ecx_2 = arg1[4]
10047bfc                  void* edi_4
10047bfc                  
10047bfc                  if (ecx_2 == 0xffffffff)
10047c15                      edi_4 = &data_10060f60
10047bfc                  else
10047c10                      edi_4 = (&data_10069f40)[ecx_2 s>> 5] + (ecx_2 & 0x1f) * 0x24
10047c10                  
10047c1a                  ecx_2.b = *(edi_4 + 4)
10047c1e                  ecx_2.b &= 0x82
10047c1e                  
10047c24                  if (ecx_2.b == 0x82)
10047c26                      edx:1.b |= 0x20
10047c29                      arg1[3] = edx
10047c29              
10047c33              if (arg1[6] == 0x200)
10047c35                  int16_t ecx_4 = (arg1[3]).w
10047c35                  
10047c40                  if ((ecx_4.b & 8) != 0 && (ecx_4:1.b & 4) == 0)
10047c42                      arg1[6] = 0x1000
10047c42              
10047c49              char* ecx_5 = *arg1
10047c4c              arg1[1] = eax_2 - 1
10047c4f              uint32_t result = zx.d(*ecx_5)
10047c53              *arg1 = &ecx_5[1]
10047c56              return result
10047c56          
10047c57          int32_t eax_4 = neg.d(eax_2)
10047c61          arg1[3] |= (sbb.d(eax_4, eax_4, eax_2 != 0) & 0x10) + 0x10
10047c64          arg1[1] = 0
10047bab      else
10047bad          eax.b |= 0x20
10047baf          arg1[3] = eax
10047baf  
10047c6c  return 0xffffffff


10047c6d    void* sub_10047c6d(int32_t arg1, uint32_t arg2, uint32_t arg3)

10047c78  if (arg1 u< data_1006a07c
10047c78          && (*((&data_10069f40)[arg1 s>> 5] + (arg1 & 0x1f) * 0x24 + 4) & 1) != 0)
10047c97      sub_1004d918(arg1)
10047ca5      void* result = sub_10047cd2(arg1, arg2, arg3)
10047cad      sub_1004d977(arg1)
10047cb9      return result
10047cb9  
10047cbf  *sub_10044f86() = 9
10047cca  *sub_10044f8f() = 0
10047cd1  return 0xffffffff


10047cd2    void* sub_10047cd2(int32_t arg1, uint32_t arg2, uint32_t arg3)

10047cd8  int32_t var_c = 0
10047ce1  char* lpBuffer_1 = arg2
10047ce6  void* lpBuffer = lpBuffer_1
10047ce6  
10047ce8  if (arg3 != 0)
10047cf6      int32_t ecx_2 = arg1 s>> 5
10047d03      void* edi_1 = &(&data_10069f40)[ecx_2]
10047d0a      int32_t esi_2 = (arg1 & 0x1f) * 0x24
10047d0d      void* eax_4 = (&data_10069f40)[ecx_2] + esi_2
10047d0f      ecx_2.b = *(eax_4 + 4)
10047d0f      
10047d15      if ((ecx_2.b & 2) == 0)
10047d1e          if ((ecx_2.b & 0x48) != 0)
10047d20              eax_4.b = *(eax_4 + 5)
10047d20              
10047d25              if (eax_4.b != 0xa)
10047d27                  arg3 -= 1
10047d2a                  *lpBuffer_1 = eax_4.b
10047d2e                  lpBuffer = &lpBuffer_1[1]
10047d31                  var_c = 1
10047d38                  *(*edi_1 + esi_2 + 5) = 0xa
10047d38          
10047d54          uint32_t numberOfBytesRead
10047d54          
10047d54          if (ReadFile(hFile: (*edi_1)[(arg1 & 0x1f) * 9], lpBuffer, 
10047d54                  nNumberOfBytesToRead: arg3, lpNumberOfBytesRead: &numberOfBytesRead, 
10047d54                  lpOverlapped: nullptr) != 0)
10047d8f              int32_t eax_11 = *edi_1
10047d91              uint32_t numberOfBytesRead_1 = numberOfBytesRead
10047d94              void* result = var_c + numberOfBytesRead_1
10047d97              char* ecx_4 = eax_11 + esi_2 + 4
10047d9b              eax_11.b = *(eax_11 + esi_2 + 4)
10047d9b              
10047da1              if ((eax_11.b & 0x80) == 0)
10047e9f                  return result
10047e9f              
10047dae              if (numberOfBytesRead_1 == 0 || *lpBuffer_1 != 0xa)
10047db4                  eax_11.b &= 0xfb
10047dae              else
10047db0                  eax_11.b |= 4
10047db0              
10047db6              *ecx_4 = eax_11.b
10047dbe              arg3 = arg2
10047dc1              void* ecx_6 = result + arg2
10047dc5              void* var_c_1 = ecx_6
10047dc5              
10047dc8              if (arg2 u< ecx_6)
10047e81                  do
10047dd1                      uint32_t eax_13
10047dd1                      eax_13.b = *arg3
10047dd1                      
10047dd5                      if (eax_13.b == 0x1a)
10047e8b                          char* esi_3 = *edi_1 + esi_2 + 4
10047e8f                          int32_t eax_20
10047e8f                          eax_20.b = *esi_3
10047e8f                          
10047e93                          if ((eax_20.b & 0x40) == 0)
10047e95                              eax_20.b |= 2
10047e97                              *esi_3 = eax_20.b
10047e97                          
10047e93                          break
10047e93                      
10047ddd                      if (eax_13.b != 0xd)
10047ddf                          *lpBuffer_1 = eax_13.b
10047de1                          lpBuffer_1 = &lpBuffer_1[1]
10047de2                          arg3 += 1
10047ddd                      else if (arg3 u>= ecx_6 - 1)
10047e0e                          arg3 += 1
10047e24                          uint8_t buffer
10047e24                          
10047e24                          if (ReadFile(hFile: (*edi_1)[(arg1 & 0x1f) * 9], 
10047e24                                  lpBuffer: &buffer, nNumberOfBytesToRead: 1, 
10047e24                                  lpNumberOfBytesRead: &numberOfBytesRead, 
10047e24                                  lpOverlapped: nullptr) != 0)
10047e34                              if (numberOfBytesRead != 0)
10047e34                                  goto label_10047e38
10047e34                              
10047e77                              *lpBuffer_1 = 0xd
10047e7a                              lpBuffer_1 = &lpBuffer_1[1]
10047e24                          else if (GetLastError() != NO_ERROR || numberOfBytesRead == 0)
10047e77                              *lpBuffer_1 = 0xd
10047e7a                              lpBuffer_1 = &lpBuffer_1[1]
10047e34                          else
10047e38                              label_10047e38:
10047e38                              
10047e3d                              if ((*(*edi_1 + esi_2 + 4) & 0x48) != 0)
10047e3f                                  int32_t eax_19
10047e3f                                  eax_19.b = buffer
10047e3f                                  
10047e44                                  if (eax_19.b == 0xa)
10047e5d                                      *lpBuffer_1 = 0xa
10047e7a                                      lpBuffer_1 = &lpBuffer_1[1]
10047e44                                  else
10047e46                                      *lpBuffer_1 = 0xd
10047e4b                                      lpBuffer_1 = &lpBuffer_1[1]
10047e4c                                      *(*edi_1 + esi_2 + 5) = eax_19.b
10047e3d                              else if (lpBuffer_1 != arg2 || buffer != 0xa)
10047e69                                  SetStreamPointerInternal(handle: arg1, 
10047e69                                      offset: 0xffffffff, method: FILE_CURRENT)
10047e69                                  
10047e75                                  if (buffer != 0xa)
10047e77                                      *lpBuffer_1 = 0xd
10047e7a                                      lpBuffer_1 = &lpBuffer_1[1]
10047e5b                              else
10047e5d                                  *lpBuffer_1 = 0xa
10047e7a                                  lpBuffer_1 = &lpBuffer_1[1]
10047dee                      else if (*(arg3 + 1) != 0xa)
10047dff                          *lpBuffer_1 = 0xd
10047e02                          lpBuffer_1 = &lpBuffer_1[1]
10047e03                          arg3 += 1
10047df7                      else
10047df9                          arg3 += 2
10047e5d                          *lpBuffer_1 = 0xa
10047e7a                          lpBuffer_1 = &lpBuffer_1[1]
10047e7a                      
10047e7b                      ecx_6 = var_c_1
10047e81                  while (arg3 u< ecx_6)
10047e81              
10047e9c              return lpBuffer_1 - arg2
10047e9c          
10047d56          enum WIN32_ERROR eax_8 = GetLastError()
10047d56          
10047d61          if (eax_8 == ERROR_ACCESS_DENIED)
10047d68              *sub_10044f86() = 9
10047d73              *sub_10044f8f() = 5
10047d87              return 0xffffffff
10047d87          
10047d7a          if (eax_8 != ERROR_BROKEN_PIPE)
10047d81              sub_10044f13(eax_8)
10047d87              return 0xffffffff
10047d87  
10047ea4  return nullptr

10047eab                                   cc cc cc cc cc                                                             .....

10047eb0    char* MemCopyFixedSize(char* arg1, char* arg2, int32_t arg3)

10047eb5  char* esi = arg2
10047ebb  char* edi = arg1
10047eca  uint32_t eax_1
10047eca  
10047eca  if (edi u> esi && edi u< &esi[arg3])
10048048      void* esi_1 = &esi[arg3 - 4]
1004804c      void* edi_1 = &edi[arg3 - 4]
10048056      uint32_t ecx_4
10048056      
10048056      if ((edi_1 & 3) == 0)
10048058          ecx_4 = arg3 u>> 2
10048058          
10048061          if (ecx_4 u< 8)
10048072              jump((&jump_table_10048140)[neg.d(ecx_4)])
10048072          
10048064          edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - (ecx_4 << 2), 
10048064              src: esi_1 - (ecx_4 << 2), n: ecx_4 << 2)
10048064          
10048067          switch (arg3 & 3)
100481a6              case 0
100481a6                  return arg1
10048067              case 1
10048067                  goto label_100481a8
10048067              case 2
10048067                  goto label_100481b8
10048067              case 3
10048067                  goto label_100481cc
10048056      else if (arg3 u< 4)
10048086          switch (arg3)
100481a6              case 0
100481a6                  return arg1
100481a8              case 1
100481a8                  label_100481a8:
100481a8                  eax_1.b = *(esi_1 + 3)
100481ab                  *(edi_1 + 3) = eax_1.b
100481b4                  return arg1
100481b8              case 2
100481b8                  label_100481b8:
100481b8                  eax_1.b = *(esi_1 + 3)
100481bb                  *(edi_1 + 3) = eax_1.b
100481be                  eax_1.b = *(esi_1 + 2)
100481c1                  *(edi_1 + 2) = eax_1.b
100481ca                  return arg1
100481cc              case 3
100481cc                  label_100481cc:
100481cc                  eax_1.b = *(esi_1 + 3)
100481cf                  *(edi_1 + 3) = eax_1.b
100481d2                  eax_1.b = *(esi_1 + 2)
100481d5                  *(edi_1 + 2) = eax_1.b
100481d8                  eax_1.b = *(esi_1 + 1)
100481db                  *(edi_1 + 1) = eax_1.b
100481e4                  return arg1
10048086      else
10048088          eax_1 = edi_1 & 3
1004808b          int32_t ecx_6 = arg3 - eax_1
1004808b          
1004808d          switch (jump_table_10048098[eax_1])
100480a8              case 0x100480a8
100480a8                  eax_1.b = *(esi_1 + 3)
100480ad                  *(edi_1 + 3) = eax_1.b
100480b1                  ecx_4 = ecx_6 u>> 2
100480b1                  
100480b8                  if (ecx_4 u< 8)
10048072                      jump((&jump_table_10048140)[neg.d(ecx_4)])
10048072                  
100480bb                  edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - 1 - (ecx_4 << 2), 
100480bb                      src: esi_1 - 1 - (ecx_4 << 2), n: ecx_4 << 2)
100480bb                  
100480be                  switch (3 & ecx_6)
100481a6                      case 0
100481a6                          return arg1
100480be                      case 1
100480be                          goto label_100481a8
100480be                      case 2
100480be                          goto label_100481b8
100480be                      case 3
100480be                          goto label_100481cc
100480c8              case 0x100480c8
100480c8                  eax_1.b = *(esi_1 + 3)
100480cd                  *(edi_1 + 3) = eax_1.b
100480d0                  eax_1.b = *(esi_1 + 2)
100480d3                  ecx_4 = ecx_6 u>> 2
100480d6                  *(edi_1 + 2) = eax_1.b
100480d6                  
100480e2                  if (ecx_4 u< 8)
10048072                      jump((&jump_table_10048140)[neg.d(ecx_4)])
10048072                  
100480e5                  edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - 2 - (ecx_4 << 2), 
100480e5                      src: esi_1 - 2 - (ecx_4 << 2), n: ecx_4 << 2)
100480e5                  
100480e8                  switch (3 & ecx_6)
100481a6                      case 0
100481a6                          return arg1
100480e8                      case 1
100480e8                          goto label_100481a8
100480e8                      case 2
100480e8                          goto label_100481b8
100480e8                      case 3
100480e8                          goto label_100481cc
100480f0              case 0x100480f0
100480f0                  eax_1.b = *(esi_1 + 3)
100480f5                  *(edi_1 + 3) = eax_1.b
100480f8                  eax_1.b = *(esi_1 + 2)
100480fb                  *(edi_1 + 2) = eax_1.b
100480fe                  eax_1.b = *(esi_1 + 1)
10048101                  ecx_4 = ecx_6 u>> 2
10048104                  *(edi_1 + 1) = eax_1.b
10048104                  
10048110                  if (ecx_4 u< 8)
10048072                      jump((&jump_table_10048140)[neg.d(ecx_4)])
10048072                  
10048117                  edi_1, esi_1 = __builtin_memcpy(dest: edi_1 - 3 - (ecx_4 << 2), 
10048117                      src: esi_1 - 3 - (ecx_4 << 2), n: ecx_4 << 2)
10048117                  
1004811a                  switch (3 & ecx_6)
100481a6                      case 0
100481a6                          return arg1
1004811a                      case 1
1004811a                          goto label_100481a8
1004811a                      case 2
1004811a                          goto label_100481b8
1004811a                      case 3
1004811a                          goto label_100481cc
1004811a  
10047ed6  uint32_t ecx_1
10047ed6  int32_t edx_1
10047ed6  
10047ed6  if ((edi & 3) != 0)
10047ef6      if (arg3 u< 4)
10047f04          jump(*(((arg3 - 4) << 2) + &data_10048008))
10047f04      
10047ef8      eax_1 = edi & 3
10047efb      int32_t ecx_3 = arg3 - 4 + eax_1
10047efb      
10047efd      switch (jump_table_10047f10[eax_1])
10047f20          case 0x10047f20
10047f20              edx_1 = 3 & ecx_3
10047f22              eax_1.b = *esi
10047f24              *edi = eax_1.b
10047f26              eax_1.b = esi[1]
10047f29              edi[1] = eax_1.b
10047f2c              eax_1.b = esi[2]
10047f2f              ecx_1 = ecx_3 u>> 2
10047f32              edi[2] = eax_1.b
10047f35              esi = &esi[3]
10047f38              edi = &edi[3]
10047f38              
10047f3e              if (ecx_1 u>= 8)
10047f40                  edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
10047f40                  
10047f42                  switch (edx_1)
1004800e                      case 0
1004800e                          return arg1
10047f42                      case 1
10047f42                          goto label_10048010
10047f42                      case 2
10047f42                          goto label_1004801c
10047f42                      case 3
10047f42                          goto label_10048030
10047f4c          case 0x10047f4c
10047f4c              edx_1 = 3 & ecx_3
10047f4e              eax_1.b = *esi
10047f50              *edi = eax_1.b
10047f52              eax_1.b = esi[1]
10047f55              ecx_1 = ecx_3 u>> 2
10047f58              edi[1] = eax_1.b
10047f5b              esi = &esi[2]
10047f5e              edi = &edi[2]
10047f5e              
10047f64              if (ecx_1 u>= 8)
10047f66                  edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
10047f66                  
10047f68                  switch (edx_1)
1004800e                      case 0
1004800e                          return arg1
10047f68                      case 1
10047f68                          goto label_10048010
10047f68                      case 2
10047f68                          goto label_1004801c
10047f68                      case 3
10047f68                          goto label_10048030
10047f70          case 0x10047f70
10047f70              edx_1 = 3 & ecx_3
10047f72              eax_1.b = *esi
10047f74              *edi = eax_1.b
10047f76              esi = &esi[1]
10047f77              ecx_1 = ecx_3 u>> 2
10047f7a              edi = &edi[1]
10047f7a              
10047f7e              if (ecx_1 u>= 8)
10047f80                  edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
10047f80                  
10047f82                  switch (edx_1)
1004800e                      case 0
1004800e                          return arg1
10047f82                      case 1
10047f82                          goto label_10048010
10047f82                      case 2
10047f82                          goto label_1004801c
10047f82                      case 3
10047f82                          goto label_10048030
10047ed6  else
10047ed8      ecx_1 = arg3 u>> 2
10047edb      edx_1 = arg3 & 3
10047edb      
10047ee1      if (ecx_1 u>= 8)
10047ee3          edi, esi = __builtin_memcpy(dest: edi, src: esi, n: ecx_1 << 2)
10047ee3          
10047ee5          switch (edx_1)
1004800e              case 0
1004800e                  return arg1
10047ee5              case 1
10047ee5                  goto label_10048010
10047ee5              case 2
10047ee5                  goto label_1004801c
10047ee5              case 3
10047ee5                  goto label_10048030
10047ee5  
10047f0c  switch (ecx_1)
10047f0c      case 0
10047f0c          goto label_10047fef
10047f0c      case 1
10047f0c          goto label_10047fe0
10047f0c      case 2
10047f0c          goto label_10047fd8
10047f0c      case 3
10047f0c          goto label_10047fd0
10047f0c      case 4
10047f0c          goto label_10047fc8
10047f0c      case 5
10047f0c          goto label_10047fc0
10047f0c      case 6
10047f0c          goto label_10047fb8
10047fb0      case 7
10047fb0          *(edi + (ecx_1 << 2) - 0x1c) = *(esi + (ecx_1 << 2) - 0x1c)
10047fb8          label_10047fb8:
10047fb8          *(edi + (ecx_1 << 2) - 0x18) = *(esi + (ecx_1 << 2) - 0x18)
10047fc0          label_10047fc0:
10047fc0          *(edi + (ecx_1 << 2) - 0x14) = *(esi + (ecx_1 << 2) - 0x14)
10047fc8          label_10047fc8:
10047fc8          *(edi + (ecx_1 << 2) - 0x10) = *(esi + (ecx_1 << 2) - 0x10)
10047fd0          label_10047fd0:
10047fd0          *(edi + (ecx_1 << 2) - 0xc) = *(esi + (ecx_1 << 2) - 0xc)
10047fd8          label_10047fd8:
10047fd8          *(edi + (ecx_1 << 2) - 8) = *(esi + (ecx_1 << 2) - 8)
10047fe0          label_10047fe0:
10047fe0          *(edi + (ecx_1 << 2) - 4) = *(esi + (ecx_1 << 2) - 4)
10047fe4          eax_1 = ecx_1 << 2
10047feb          esi = &esi[eax_1]
10047fed          edi = &edi[eax_1]
10047fef          label_10047fef:
10047fef          
10047fef          switch (edx_1)
1004800e              case 0
1004800e                  return arg1
10048010              case 1
10048010                  label_10048010:
10048010                  eax_1.b = *esi
10048012                  *edi = eax_1.b
1004801a                  return arg1
1004801c              case 2
1004801c                  label_1004801c:
1004801c                  eax_1.b = *esi
1004801e                  *edi = eax_1.b
10048020                  eax_1.b = esi[1]
10048023                  edi[1] = eax_1.b
1004802c                  return arg1
10048030              case 3
10048030                  label_10048030:
10048030                  eax_1.b = *esi
10048032                  *edi = eax_1.b
10048034                  eax_1.b = esi[1]
10048037                  edi[1] = eax_1.b
1004803a                  eax_1.b = esi[2]
1004803d                  edi[2] = eax_1.b
10048046                  return arg1

10047f0b                                   90                                                                         .
10047f13                                                           90 20 7f 04 10 4c 7f 04 10 70 7f 04 10                     . ...L...p...
10047f49                             8d 49 00                                                                       .I.
10047f6f                                               90                                                                 .
10047f89                             8d 49 00                                                                       .I.
10047f8c  uint32_t jump_table_10047f8c[0x8] = 
10047f8c  {
10047f8c      [0x0] =  0x10047fef
10047f90      [0x1] =  0x10047fdc
10047f94      [0x2] =  0x10047fd4
10047f98      [0x3] =  0x10047fcc
10047f9c      [0x4] =  0x10047fc4
10047fa0      [0x5] =  0x10047fbc
10047fa4      [0x6] =  0x10047fb4
10047fa8      [0x7] =  0x10047fac
10047fac  }

10047ff6                                                                    8b ff                                                ..
10047ff8  uint32_t jump_table_10047ff8[0x4] = 
10047ff8  {
10047ff8      [0x0] =  0x10048008
10047ffc      [0x1] =  0x10048010
10048000      [0x2] =  0x1004801c
10048004      [0x3] =  0x10048030
10048008  }

1004800f                                               90                                                                 .
1004801b                                                                                   90                                         .
1004802d                                         8d 49 00                                                               .I.
10048047                       90                                                                                 .
1004806e                                            8b ff                                                                ..
10048079                                                                             8d 49 00                                       .I.
1004809b                                                                                   90 a8 80 04 10                             .....
100480a0  c8 80 04 10 f0 80 04 10                                                                          ........
100480c5                 8d 49 00                                                                               .I.
100480ef                                               90                                                                 .
10048121     8d 49 00                                                                                       .I.

10048124  void* data_10048124 = 0x10048144
10048128  void* data_10048128 = 0x1004814c
1004812c  void* data_1004812c = 0x10048154
10048130  void* data_10048130 = 0x1004815c
10048134  void* data_10048134 = 0x10048164
10048138  void* data_10048138 = 0x1004816c
1004813c  void* data_1004813c = 0x10048174
10048140  void* jump_table_10048140 = 0x10048187

10048144              8b 44 8e 1c 89 44 8f 1c 8b 44 8e 18 89 44 8f 18 8b 44 8e 14 89 44 8f 14 8b 44 8e 10      .D...D...D...D...D...D...D..
10048160  89 44 8f 10 8b 44 8e 0c 89 44 8f 0c 8b 44 8e 08 89 44 8f 08 8b 44 8e 04 89 44 8f 04 8d 04 8d 00  .D...D...D...D...D...D...D......
10048180  00 00 00 03 f0 03 f8 ff 24 95 90 81 04 10 8b ff                                                  ........$.......
10048190  uint32_t jump_table_10048190[0x4] = 
10048190  {
10048190      [0x0] =  0x100481a0
10048194      [0x1] =  0x100481a8
10048198      [0x2] =  0x100481b8
1004819c      [0x3] =  0x100481cc
100481a0  }

100481a7                       90                                                                                 .
100481b5                                                                 8d 49 00                                               .I.
100481cb                                   90                                                                         .

100481e5    uint32_t SetStreamPointer(int32_t handle, int32_t offset, enum SET_FILE_POINTER_MOVE_METHOD method)

100481f0  if (handle u< data_1006a07c
100481f0          && (*((&data_10069f40)[handle s>> 5] + (handle & 0x1f) * 0x24 + 4) & 1) != 0)
1004820f      sub_1004d918(handle)
1004821d      uint32_t result = SetStreamPointerInternal(handle, offset, method)
10048225      sub_1004d977(handle)
10048231      return result
10048231  
10048237  *sub_10044f86() = 9
10048242  *sub_10044f8f() = 0
10048249  return 0xffffffff


1004824a    uint32_t SetStreamPointerInternal(int32_t handle, int32_t offset, enum SET_FILE_POINTER_MOVE_METHOD method)

10048251  HANDLE hFile = sub_1004d82f(handle)
10048251  
1004825a  if (hFile != 0xffffffff)
10048274      uint32_t result = SetFilePointer(hFile, lDistanceToMove: offset, 
10048274          lpDistanceToMoveHigh: nullptr, dwMoveMethod: method)
1004827f      enum WIN32_ERROR eax_1
1004827f      
1004827f      if (result != 0xffffffff)
10048289          eax_1 = NO_ERROR
1004827f      else
10048281          eax_1 = GetLastError()
10048281      
1004828d      if (eax_1 == NO_ERROR)
100482a5          int32_t ecx_4 = (&data_10069f40)[handle s>> 5]
100482ac          int32_t eax_3 = (handle & 0x1f) * 9
100482af          *(ecx_4 + (eax_3 << 2) + 4) &= 0xfd
100482b8          return result
100482b8      
10048290      sub_10044f13(eax_1)
1004825a  else
10048261      *sub_10044f86() = 9
10048261  
10048296  return 0xffffffff


100482bd    int32_t CloseStream(int32_t handle)

100482c8  if (handle u< data_1006a07c
100482c8          && (*((&data_10069f40)[handle s>> 5] + (handle & 0x1f) * 0x24 + 4) & 1) != 0)
100482e7      sub_1004d918(handle)
100482ed      int32_t result = CloseStreamInternal(handle)
100482f5      sub_1004d977(handle)
10048301      return result
10048301  
10048307  *sub_10044f86() = 9
10048312  *sub_10044f8f() = 0
10048319  return 0xffffffff


1004831a    int32_t CloseStreamInternal(int32_t handle)

1004832a  enum WIN32_ERROR edi_2
1004832a  
1004832a  if (sub_1004d82f(handle) == 0xffffffff)
10048368      edi_2 = NO_ERROR
1004832a  else if (handle == 1 || handle == 2)
10048338      int32_t eax_1 = sub_1004d82f(2)
10048338      
1004834a      if (sub_1004d82f(1) != eax_1)
1004834a          goto label_10048354
1004834a      
10048368      edi_2 = NO_ERROR
10048334  else
10048354      label_10048354:
10048354      
1004835c      if (CloseHandle(hObject: sub_1004d82f(handle)) != 0)
10048368          edi_2 = NO_ERROR
1004835c      else
10048364          edi_2 = GetLastError()
10048364  
1004836b  sub_1004d7b0(handle)
10048383  *((&data_10069f40)[handle s>> 5] + (handle & 0x1f) * 0x24 + 4) = 0
10048383  
1004838a  if (edi_2 == NO_ERROR)
10048398      return 0
10048398  
1004838d  sub_10044f13(edi_2)
10048393  return 0xffffffff


1004839d    char CleanupStreamBuffer(int32_t* stream)

100483a2  char result = (stream[3]).b
100483a2  
100483ab  if ((result & 0x83) != 0 && (result & 8) != 0)
100483b0      Gladiator_Free(stream[2])
100483b5      stream[3].w &= 0xfbf7
100483bb      result = 0
100483be      *stream = 0
100483c0      stream[2] = 0
100483c3      stream[1] = 0
100483c3  
100483c7  return result


100483c8    int32_t* ParseOpenMode(PSTR filename, char* modeStr, char binaryMode, int32_t* stream)

100483cb  int32_t ecx
100483cb  int32_t var_8 = ecx
100483cc  int32_t var_c = ecx
100483cf  int32_t esi = data_100635d0
100483d6  char* modeStr_1 = modeStr
100483db  int32_t var_c_1 = 0
100483de  int32_t var_8_1 = 0
100483e1  int32_t eax
100483e1  eax.b = *modeStr_1
100483e5  int32_t ecx_1
100483e5  int32_t esi_1
100483e5  
100483e5  if (eax.b == 0x61)
10048401      ecx_1 = 0x109
10048406      label_10048406:
10048406      esi_1 = esi | 2
1004840b      label_1004840b:
1004840b      int32_t edx_1 = 1
1004840b      
1004840c      while (true)
1004840c          eax.b = modeStr_1[1]
1004840f          modeStr_1 = &modeStr_1[1]
1004840f          
10048412          if (eax.b == 0)
10048412              break
10048412          
1004841a          if (edx_1 == 0)
1004841a              break
1004841a          
10048420          int32_t eax_1 = sx.d(eax.b)
10048420          
10048426          if (eax_1 s> 0x54)
1004849d              if (eax_1 == 0x62)
100484ea                  if ((ecx_1:1.b & 0xc0) == 0)
100484f3                      ecx_1:1.b |= 0x80
100484f6                      continue
1004849d              else if (eax_1 == 0x63)
100484d3                  if (var_c_1 == 0)
100484d5                      var_c_1 = 1
100484dc                      esi_1 |= 0x4000
100484e2                      continue
100484a0              else if (eax_1 == 0x6e)
100484bc                  if (var_c_1 == 0)
100484be                      var_c_1 = 1
100484c5                      esi_1 &= 0xffffbfff
100484cb                      continue
100484a5              else if (eax_1 == 0x74 && (ecx_1:1.b & 0xc0) == 0)
100484b1                  ecx_1:1.b |= 0x40
100484b4                  continue
10048426          else if (eax_1 == 0x54)
10048491              if ((0x1000 & ecx_1) == 0)
10048493                  ecx_1 |= 0x1000
10048495                  continue
10048428          else if (eax_1 == 0x2b)
10048477              if ((ecx_1.b & 2) == 0)
1004847f                  ecx_1 = (ecx_1 & 0xfffffffe) | 2
10048482                  esi_1 = (esi_1 & 0xfffffffc) | 0x80
10048488                  continue
1004842d          else if (eax_1 == 0x44)
1004846d              if ((ecx_1.b & 0x40) == 0)
1004846f                  ecx_1 |= 0x40
10048472                  continue
10048432          else if (eax_1 == 0x52)
10048458              if (var_8_1 == 0)
1004845e                  var_8_1 = 1
10048465                  ecx_1 |= 0x10
10048468                  continue
10048437          else if (eax_1 == 0x53 && var_8_1 == 0)
10048449              var_8_1 = 1
10048450              ecx_1 |= 0x20
10048453              continue
10048453          
100484ec          edx_1 = 0
100484ec      
100484fb      int32_t var_1c_1 = 0x1a4
10048507      int32_t eax_2 = sub_1004d9b0(filename, ecx_1, binaryMode)
10048507      
10048513      if (eax_2 s>= 0)
1004851c          num_active_arena_streams += 1
10048522          stream[3] = esi_1
10048525          stream[1] = 0
10048528          *stream = 0
1004852a          stream[2] = 0
1004852d          stream[7] = 0
10048530          stream[4] = eax_2
10048537          return stream
100483e5  else
100483e9      if (eax.b == 0x72)
100483fa          ecx_1 = 0
100483fc          esi_1 = esi | 1
100483ff          goto label_1004840b
100483ff      
100483ed      if (eax.b == 0x77)
100483f3          ecx_1 = 0x301
100483f8          goto label_10048406
10048515  return nullptr


10048538    int32_t* OpenInternalStream()

1004853f  int32_t* result = nullptr
10048541  LockArenaSection(index: 2)
10048546  int32_t esi = 0
10048546  
1004854f  if (data_1006b3c0 s> 0)
1004855a      while (true)
1004855a          void* eax_2 = *(data_1006a080 + (esi << 2))
1004855a          
1004855f          if (eax_2 == 0)
1004859a              int32_t esi_1 = esi << 2
100485a9              *(esi_1 + data_1006a080) = ArenaAlloc(size: 0x38)
100485b1              void* eax_6 = *(esi_1 + data_1006a080)
100485b1              
100485b6              if (eax_6 == 0)
100485b6                  break
100485b6              
100485bc              InitializeCriticalSection(lpCriticalSection: eax_6 + 0x20)
100485ce              EnterCriticalSection(lpCriticalSection: *(esi_1 + data_1006a080) + 0x20)
100485d9              result = *(esi_1 + data_1006a080)
1004855f          else
10048565              if ((*(eax_2 + 0xc) & 0x83) != 0)
10048565                  goto label_10048588
10048565              
10048569              sub_10047b1c(esi, eax_2)
10048570              int32_t ecx_1 = data_1006a080
10048576              void* eax_3 = *(ecx_1 + (esi << 2))
10048576              
1004857d              if ((*(eax_3 + 0xc) & 0x83) == 0)
10048593                  result = *(ecx_1 + (esi << 2))
1004857d              else
10048581                  sub_10047b6e(esi, eax_3)
10048588                  label_10048588:
10048588                  esi += 1
10048588                  
1004858f                  if (esi s>= data_1006b3c0)
1004858f                      break
1004858f                  
1004858f                  continue
1004858f          
100485de          if (result == 0)
100485de              break
100485de          
100485e0          result[4] = 0xffffffff
100485e4          result[1] = 0
100485e7          result[3] = 0
100485ea          result[2] = 0
100485ed          *result = 0
100485ef          result[7] = 0
100485ef          break
100485ef  
100485f4  UnlockArenaSection(index: 2)
100485ff  return result


10048600    uint32_t FlushInternalStream(int32_t* stream)

10048605  int32_t* stream_2 = stream
10048608  int32_t eax = stream_2[3]
1004860b  enum WIN32_ERROR handle = stream_2[4]
1004860b  
10048618  if ((eax.b & 0x82) == 0 || (eax.b & 0x40) != 0)
1004870c      eax.b |= 0x20
1004870e      stream_2[3] = eax
10048618  else
10048620      if ((eax.b & 1) == 0)
10048620          goto label_10048638
10048620      
10048622      stream_2[1] = 0
10048622      
10048628      if ((eax.b & 0x10) == 0)
1004870c          eax.b |= 0x20
1004870e          stream_2[3] = eax
10048628      else
10048631          eax.b &= 0xfe
10048633          *stream_2 = stream_2[2]
10048635          stream_2[3] = eax
10048638          label_10048638:
10048638          int32_t eax_1 = stream_2[3]
1004863b          stream_2[1] = 0
1004863f          stream = nullptr
10048643          eax_1.b &= 0xef
10048645          eax_1.b |= 2
1004864b          stream_2[3] = eax_1
1004864b          
1004864e          if ((eax_1.w & 0x10c) == 0)
1004865e              bool cond:3_1
1004865e              
1004865e              if (stream_2 == 0x10060cf8 || stream_2 == 0x10060d18)
10048666                  cond:3_1 = sub_1004dc7f(handle) != 0
10048666              
10048669              if ((stream_2 != 0x10060cf8 && stream_2 != 0x10060d18) || not(cond:3_1))
1004866c                  sub_1004d5cd(stream_2)
1004866c          
10048679          int32_t arg_4
10048679          uint32_t edi_2
10048679          
10048679          if ((stream_2[3].w & 0x108) == 0)
100486e7              edi_2 = 1
100486f3              stream = WriteHandle(handle, &arg_4, 1)
10048679          else
1004867b              char* eax_3 = stream_2[2]
10048680              edi_2 = *stream_2 - eax_3
10048685              *stream_2 = &eax_3[1]
1004868d              stream_2[1] = stream_2[6] - 1
10048690              int32_t ecx_6
10048690              
10048690              if (edi_2 s<= 0)
100486a5                  void* eax_7
100486a5                  
100486a5                  if (handle == ~NO_ERROR)
100486c0                      eax_7 = &data_10060f60
100486a5                  else
100486bb                      eax_7 = (&data_10069f40)[handle s>> 5]
100486bb                          + (handle & ERROR_GEN_FAILURE) * 0x24
100486bb                  
100486c9                  if ((*(eax_7 + 4) & 0x20) != 0)
100486d0                      SetStreamPointer(handle, offset: 0, method: FILE_END)
10048690              else
10048695                  int32_t* stream_1
10048695                  stream_1, ecx_6 = WriteHandle(handle, eax_3, edi_2)
1004869d                  stream = stream_1
1004869d              
100486db              ecx_6.b = arg_4.b
100486de              *stream_2[2] = ecx_6.b
100486de          
100486fa          if (stream == edi_2)
10048705              return zx.d(arg_4.b)
10048705          
100486fc          stream_2[3] |= 0x20
100486fc  
10048711  return 0xffffffff


10048718    int32_t WriteHandle(enum WIN32_ERROR arg1, char* arg2, uint32_t arg3)

10048723  if (arg1 u< data_1006a07c
10048723          && (*((&data_10069f40)[arg1 s>> 5] + (arg1 & ERROR_GEN_FAILURE) * 0x24 + 4) & 1)
10048723          != 0)
10048742      sub_1004d918(arg1)
10048750      int32_t result = WriteHandleInternal(arg1, arg2, arg3)
10048758      sub_1004d977(arg1)
10048764      return result
10048764  
1004876a  *sub_10044f86() = 9
10048775  *sub_10044f8f() = 0
1004877c  return 0xffffffff


1004877d    int32_t WriteHandleInternal(enum WIN32_ERROR arg1, char* arg2, uint32_t arg3)

1004878e  uint32_t numberOfBytesWritten_1 = 0
10048791  int32_t var_14 = 0
10048791  
10048794  if (arg3 != 0)
100487a3      void* ebx_1 = &(&data_10069f40)[arg1 s>> 5]
100487b5      int32_t esi_2 = (arg1 & ERROR_GEN_FAILURE) * 0x24
100487b5      
100487bd      if ((*(*ebx_1 + esi_2 + 4) & 0x20) != 0)
100487c5          SetStreamPointerInternal(handle: arg1, offset: 0, method: FILE_END)
100487c5      
100487cf      int32_t* eax_7 = *ebx_1 + esi_2
100487d5      uint32_t numberOfBytesWritten
100487d5      
100487d5      if ((eax_7[1].b & 0x80) == 0)
100488b1          if (WriteFile(hFile: *eax_7, lpBuffer: arg2, nNumberOfBytesToWrite: arg3, 
100488b1                  lpNumberOfBytesWritten: &numberOfBytesWritten, lpOverlapped: nullptr) == 0)
100488c4              arg1 = GetLastError()
100488b1          else
100488b6              arg1 = NO_ERROR
100488b9              numberOfBytesWritten_1 = numberOfBytesWritten
100488b9          
10048868          label_10048868:
10048868          
1004886a          if (numberOfBytesWritten_1 != 0)
10048900              return numberOfBytesWritten_1 - var_14
10048900          
10048873          if (arg1 != NO_ERROR)
1004887b              if (arg1 != ERROR_ACCESS_DENIED)
100488cc                  sub_10044f13(arg1)
1004887b              else
10048882                  *sub_10044f86() = 9
1004888d                  *sub_10044f8f() = 5
1004888d              
100488d2              return 0xffffffff
100487d5      else
100487e1          char* var_8_1 = arg2
100487e4          arg1 = NO_ERROR
100487e4          
100487e7          if (arg3 u> 0)
10048861              do
100487ed                  uint8_t buffer[0x404]
100487ed                  uint8_t (* eax_9)[0x404] = &buffer
100487ed                  
100487fc                  while (var_8_1 - arg2 u< arg3)
100487fe                      char* ecx_3 = var_8_1
10048801                      var_8_1 = &var_8_1[1]
10048804                      ecx_3.b = *ecx_3
10048804                      
10048809                      if (ecx_3.b == 0xa)
1004880b                          var_14 += 1
1004880e                          *eax_9 = 0xd
10048811                          eax_9 = &(*eax_9)[1]
10048811                      
10048812                      *eax_9 = ecx_3.b
10048814                      eax_9 = &(*eax_9)[1]
10048814                      
10048825                      if (eax_9 - &buffer s>= 0x400)
10048825                          break
10048825                  
1004882f                  uint32_t nNumberOfBytesToWrite = eax_9 - &buffer
1004882f                  
1004884c                  if (WriteFile(hFile: (*ebx_1)[(arg1 & 0x1f) * 9], lpBuffer: &buffer, 
1004884c                          nNumberOfBytesToWrite, 
1004884c                          lpNumberOfBytesWritten: &numberOfBytesWritten, 
1004884c                          lpOverlapped: nullptr) == 0)
10048897                      arg1 = GetLastError()
1004889a                      break
1004889a                  
1004884e                  uint32_t numberOfBytesWritten_2 = numberOfBytesWritten
10048851                  numberOfBytesWritten_1 += numberOfBytesWritten_2
10048851                  
10048856                  if (numberOfBytesWritten_2 s< nNumberOfBytesToWrite)
10048856                      break
10048861              while (var_8_1 - arg2 u< arg3)
10048861              
1004884c              goto label_10048868
1004884c      
100488e6      if ((*(*ebx_1 + esi_2 + 4) & 0x40) == 0 || *arg2 != 0x1a)
100488f1          *sub_10044f86() = 0x1c
100488fc          *sub_10044f8f() = 0
100488d2          return 0xffffffff
100488d2  
10048796  return 0


10048908    uint32_t InitHandleTable()

1004891b  void* esi = ArenaAlloc(size: 0x480)
1004891b  
10048920  if (esi == 0)
10048924      sub_10045ef6(0x1b)
10048924  
1004892a  data_10069f40 = esi
10048930  data_1006a07c = 0x20
10048930  
10048942  for (void* i = esi + 0x480; esi u< i; i = data_10069f40 + 0x480)
10048944      *(esi + 4) = 0
10048948      *esi = 0xffffffff
1004894b      *(esi + 8) = 0
1004894f      *(esi + 5) = 0xa
10048958      esi += 0x24
10048958  
10048966  STARTUPINFOA startupInfo
10048966  GetStartupInfoA(lpStartupInfo: &startupInfo)
10048966  
10048971  if (startupInfo.cbReserved2 != 0)
10048977      BYTE* lpReserved2 = startupInfo.lpReserved2
10048977      
1004897c      if (lpReserved2 != 0)
10048982          int32_t i_1 = *lpReserved2
10048984          void* ebx_1 = &lpReserved2[4]
1004898a          void* var_8_1 = ebx_1 + i_1
1004898a          
10048994          if (i_1 s>= 0x800)
10048996              i_1 = 0x800
10048996          
1004899e          if (data_1006a07c s< i_1)
100489a0              void* esi_1 = &data_10069f44
100489a0              
100489ec              do
100489aa                  void* eax_3 = ArenaAlloc(size: 0x480)
100489aa                  
100489b2                  if (eax_3 == 0)
100489f0                      i_1 = data_1006a07c
100489f0                      break
100489f0                  
100489b4                  data_1006a07c += 0x20
100489bb                  *esi_1 = eax_3
100489bb                  
100489c5                  for (void* j = eax_3 + 0x480; eax_3 u< j; j = *esi_1 + 0x480)
100489c7                      *(eax_3 + 4) = 0
100489cb                      *eax_3 = 0xffffffff
100489ce                      *(eax_3 + 8) = 0
100489d2                      *(eax_3 + 5) = 0xa
100489d8                      eax_3 += 0x24
100489d8                  
100489e3                  esi_1 += 4
100489ec              while (data_1006a07c s< i_1)
100489ec          
100489f6          int32_t esi_2 = 0
100489f6          
100489fa          if (i_1 s> 0)
10048a46              do
100489ff                  HANDLE hFile_1 = *var_8_1
100489ff                  
10048a04                  if (hFile_1 != 0xffffffff)
10048a06                      void* eax_4
10048a06                      eax_4.b = *ebx_1
10048a06                      
10048a0a                      if ((eax_4.b & 1) != 0)
10048a0e                          enum FILE_TYPE eax_5
10048a0e                          
10048a0e                          if ((eax_4.b & 8) == 0)
10048a11                              eax_5 = GetFileType(hFile: hFile_1)
10048a11                          
10048a19                          if ((eax_4.b & 8) != 0 || eax_5 != FILE_TYPE_UNKNOWN)
10048a2f                              int32_t* eax_9 =
10048a2f                                  (&data_10069f40)[esi_2 s>> 5] + (esi_2 & 0x1f) * 0x24
10048a37                              *eax_9 = *var_8_1
10048a39                              int32_t ecx_8
10048a39                              ecx_8.b = *ebx_1
10048a3b                              eax_9[1].b = ecx_8.b
10048a3b                  
10048a3e                  var_8_1 += 4
10048a42                  esi_2 += 1
10048a43                  ebx_1 += 1
10048a46              while (esi_2 s< i_1)
10048a46  
10048ab1  for (int32_t i_2 = 0; i_2 s< 3; i_2 += 1)
10048a4a      int32_t ecx_9 = data_10069f40
10048a50      int32_t eax_10 = i_2 * 9
10048a57      int32_t* esi_3 = ecx_9 + (eax_10 << 2)
10048a57      
10048a5a      if (*(ecx_9 + (eax_10 << 2)) != 0xffffffff)
10048aa9          esi_3[1].b |= 0x80
10048a5a      else
10048a5e          esi_3[1].b = 0x81
10048a62          enum STD_HANDLE nStdHandle
10048a62          
10048a62          if (i_2 != 0)
10048a6c              int32_t eax_13 = neg.d(i_2 - 1)
10048a70              nStdHandle = sbb.d(eax_13, eax_13, i_2 != 1) - 0xb
10048a62          else
10048a66              nStdHandle = STD_INPUT_HANDLE
10048a66          
10048a74          HANDLE hFile = GetStdHandle(nStdHandle)
10048a74          
10048a7f          if (hFile == 0xffffffff)
10048a98              esi_3[1].b |= 0x40
10048a7f          else
10048a82              enum FILE_TYPE eax_15 = GetFileType(hFile)
10048a82              
10048a8a              if (eax_15 == FILE_TYPE_UNKNOWN)
10048a98                  esi_3[1].b |= 0x40
10048a8a              else
10048a8c                  int32_t eax_16 = eax_15 & 0xff
10048a91                  *esi_3 = hFile
10048a91                  
10048a96                  if (eax_16 == 2)
10048a98                      esi_3[1].b |= 0x40
10048a96                  else if (eax_16 == 3)
10048aa3                      esi_3[1].b |= 8
10048aa3  
10048ac3  return SetHandleCount(uNumber: data_1006a07c)


10048ac4    void* sub_10048ac4()

10048b12  void* result
10048b12  
10048b12  for (int32_t* i = &data_10069f40; i s< 0x1006a040; i = &i[1])
10048acc      result = *i
10048acc      
10048ad0      if (result != 0)
10048ad2          void* j = result
10048ad2          
10048adb          if (j u< result + 0x480)
10048add              CRITICAL_SECTION* lpCriticalSection = j + 0xc
10048add              
10048afc              do
10048ae4                  if (lpCriticalSection->__offset(0xfffffffffffffffc).d != 0)
10048ae7                      DeleteCriticalSection(lpCriticalSection)
10048ae7                  
10048aef                  j += 0x24
10048af7                  lpCriticalSection += 0x24
10048afc              while (j u< *i + 0x480)
10048afc          
10048b00          result = Gladiator_Free(*i)
10048b05          *i = 0
10048b05  
10048b17  return result


10048b18    int32_t sub_10048b18(int32_t* arg1, void* arg2)

10048b24  char* edi = arg2
10048b27  int32_t esi = 0
10048b29  wchar16 const (* ebx)[0x7]
10048b29  ebx.b = *edi
10048b2b  void* edi_1 = &edi[1]
10048b2e  int32_t var_10 = 0
10048b31  int32_t i = 0
10048b34  arg2 = edi_1
10048b34  
10048b37  if (ebx.b != 0)
10048b3d      int32_t var_14
10048b3d      int32_t ecx_1 = var_14
10048b3d      
10048b4f      while (i s>= 0)
10048b5d          int32_t eax_2
10048b5d          
10048b5d          if (ebx.b s< 0x20 || ebx.b s> 0x78)
10048b6d              eax_2 = 0
10048b5d          else
10048b62              int32_t eax_1
10048b62              eax_1.b = (*"cosh")[sx.d(ebx.b)]
10048b68              eax_2 = eax_1 & 0xf
10048b68          
10048b77          int32_t eax_4 = sx.d(*(esi + (eax_2 << 3) + 0x10058538)) s>> 4
10048b7d          int32_t var_34_1 = eax_4
10048b86          int32_t var_38
10048b86          int32_t var_2c
10048b86          int32_t var_28
10048b86          int32_t var_24
10048b86          int32_t* var_20
10048b86          wchar16 const (* var_8)[0x7]
10048b86          void* arg_c
10048b86          
10048b86          switch (eax_4)
10048b86              case 0
10048b86                  goto label_10048cbd
10048b8d              case 1
10048b8d                  var_14 = 0xffffffff
10048b91                  var_38 = 0
10048b94                  var_2c = 0
10048b97                  var_24 = 0
10048b9a                  var_20 = nullptr
10048b9d                  var_8 = nullptr
10048ba0                  var_28 = 0
10048ba8              case 2
10048ba8                  int32_t eax_5 = sx.d(ebx.b)
10048ba8                  
10048bae                  if (eax_5 == 0x20)
10048beb                      var_8 |= 2
10048bae                  else if (eax_5 == 0x23)
10048be2                      var_8.b |= 0x80
10048bb3                  else if (eax_5 == 0x2b)
10048bd9                      var_8 |= 1
10048bb8                  else if (eax_5 == 0x2d)
10048bd0                      var_8 |= 4
10048bbc                  else if (eax_5 == 0x30)
10048bc7                      var_8 |= 8
10048bf7              case 3
10048bf7                  if (ebx.b != 0x2a)
10048c14                      var_24 = sx.d(ebx.b) + var_24 * 0xa - 0x30
10048bf7                  else
10048bfd                      int32_t eax_12 = PopInt32(&arg_c)
10048c05                      var_24 = eax_12
10048c05                      
10048c08                      if (eax_12 s< 0)
10048c0e                          var_8 |= 4
10048c14                          var_24 = neg.d(eax_12)
10048c2b              case 4
10048c2b                  var_14 = 0
10048c36              case 5
10048c36                  if (ebx.b != 0x2a)
10048c60                      var_14 = sx.d(ebx.b) + ecx_1 * 0xa - 0x30
10048c36                  else
10048c3c                      int32_t eax_16 = PopInt32(&arg_c)
10048c44                      var_14 = eax_16
10048c44                      
10048c47                      if (eax_16 s< 0)
10048c4d                          var_14 = 0xffffffff
10048c6b              case 6
10048c6b                  if (ebx.b == 0x49)
10048ca4                      if (*edi_1 != 0x36 || *(edi_1 + 1) != 0x34)
10048cb4                          var_34_1 = 0
10048cbd                          label_10048cbd:
10048cbd                          var_28 = 0
10048cbd                          
10048cc8                          if ((*(&(*data_100609a0)[zx.d(ebx.b)] + 1) & 0x80) != 0)
10048cd5                              sub_10049259(sx.d(ebx.b), arg1, &i)
10048cda                              ebx.b = *edi_1
10048ce0                              arg2 = edi_1 + 1
10048ce0                          
10048cee                          sub_10049259(sx.d(ebx.b), arg1, &i)
10048ca4                      else
10048ca8                          var_8:1.b |= 0x80
10048cac                          arg2 = edi_1 + 2
10048c6b                  else if (ebx.b == 0x68)
10048c92                      var_8 |= 0x20
10048c70                  else if (ebx.b == 0x6c)
10048c89                      var_8 |= 0x10
10048c75                  else if (ebx.b == 0x77)
10048c80                      var_8:1.b |= 8
10048cfb              case 7
10048cfb                  int32_t eax_22 = sx.d(ebx.b)
10048d01                  char var_1a
10048d01                  wchar16 const (* var_c)[0x7]
10048d01                  int32_t eax_41
10048d01                  
10048d01                  if (eax_22 s> 0x67)
10048f26                      int32_t var_30
10048f26                      int32_t var_10_1
10048f26                      
10048f26                      if (eax_22 == 0x69)
10048ffd                          label_10048ffd:
10048ffd                          var_8 |= 0x40
10049001                          label_10049001:
10049001                          var_10_1 = 0xa
1004900c                          label_1004900c:
1004900c                          int32_t eax_56
1004900c                          int32_t edx_3
1004900c                          
1004900c                          if ((var_8:1.b & 0x80) != 0)
10049012                              eax_56, edx_3 = PopTwoInt32GetFirst(&arg_c)
1004900c                          else if ((var_8.b & 0x20) == 0)
10049048                              void** var_25c_15 = &arg_c
10049048                              
10049049                              if ((var_8.b & 0x40) == 0)
10049053                                  eax_56 = PopInt32(var_25c_15)
10049059                                  edx_3 = 0
10049049                              else
10049033                                  edx_3:eax_56 = sx.q(PopInt32(var_25c_15))
1004901e                          else
10049027                              void** var_25c_14 = &arg_c
10049028                              int32_t eax_58
10049028                              
10049028                              if ((var_8.b & 0x40) == 0)
1004903c                                  eax_58 = zx.d(PopInt32(var_25c_14))
10049028                              else
10049030                                  eax_58 = sx.d(PopInt32(var_25c_14))
10049030                              
10049033                              edx_3:eax_56 = sx.q(eax_58)
10049033                          
10049069                          int32_t esi_4
10049069                          int32_t edi_6
10049069                          
10049069                          if ((var_8.b & 0x40) == 0 || edx_3 s> 0
10049069                                  || (edx_3 s>= 0 && eax_56 u>= 0))
1004907c                              esi_4 = eax_56
1004907e                              edi_6 = edx_3
10049069                          else
10049070                              esi_4 = neg.d(eax_56)
10049074                              var_8:1.b |= 1
10049078                              edi_6 = neg.d(adc.d(edx_3, 0, eax_56 != 0))
10049078                          
10049084                          if ((var_8:1.b & 0x80) == 0)
10049086                              edi_6 = 0
10049086                          
1004908d                          if (var_14 s>= 0)
10049098                              var_8 &= 0xfffffff7
1004908d                          else
1004908f                              var_14 = 1
1004908f                          
100490a0                          if ((esi_4 | edi_6) == 0)
100490a2                              var_20 = nullptr
100490a2                          
100490a9                          void var_4d
100490a9                          char* var_c_1 = &var_4d
100490a9                          
100490ac                          while (true)
100490ac                              int32_t eax_63 = var_14
100490af                              var_14 -= 1
100490af                              
100490ba                              if (eax_63 s<= 0 && (esi_4 | edi_6) == 0)
100490ba                                  break
100490ba                              
100490bf                              int32_t eax_67
100490bf                              uint32_t edx_6
100490bf                              edx_6:eax_67 = sx.q(var_10_1)
100490d4                              ebx = __aullrem(esi_4, edi_6, eax_67, edx_6) + 0x30
100490dc                              uint32_t eax_69
100490dc                              int32_t edx_7
100490dc                              eax_69, edx_7 = __aulldiv(esi_4, edi_6, eax_67, edx_6)
100490e4                              esi_4 = eax_69
100490e6                              edi_6 = edx_7
100490e6                              
100490e8                              if (ebx s> 0x39)
100490ea                                  ebx += var_30
100490ea                              
100490ed                              char* eax_70 = var_c_1
100490f0                              var_c_1 -= 1
100490f3                              *eax_70 = ebx.b
100490f3                          
100490fa                          int32_t eax_71 = &var_4d - var_c_1
100490fd                          var_c = &var_c_1[1]
10049104                          var_10 = eax_71
10049104                          
10049113                          if ((var_8:1.b & 2) == 0 || (*var_c == 0x30 && eax_71 != 0))
10049107                              goto label_10049122
10049107                          
10049115                          var_c -= 1
10049118                          eax_41 = eax_71 + 1
1004911c                          *var_c = 0x30
1004911c                          goto label_1004911f
1004911c                      
10048f2f                      if (eax_22 != 0x6e)
10048f35                          int32_t eax_49 = eax_22 - 0x6f
10048f35                          
10048f36                          if (eax_22 == 0x6f)
10048fc4                              var_10_1 = 8
10048fc4                              
10048fcb                              if ((var_8.b & 0x80) != 0)
10048fcd                                  var_8:1.b |= 2
10048fcd                              
10048fcb                              goto label_1004900c
10048fcb                          
10048f3d                          if (eax_49 == 1)
10048f90                              var_14 = 8
10048f97                              label_10048f97:
10048f97                              var_30 = 7
10048fa2                              label_10048fa2:
10048fa2                              var_10_1 = 0x10
10048fa2                              
10048fa9                              if ((var_8.b & 0x80) != 0)
10048fab                                  eax_22.b = var_30.b
10048fae                                  var_1a = 0x30
10048fb2                                  eax_22.b += 0x51
10048fb4                                  var_20 = 2
10048fbb                                  char var_19_1 = eax_22.b
10048fbb                              
10048fa9                              goto label_1004900c
10048fa9                          
10048f42                          if (eax_49 != 4)
10048f4a                              if (eax_49 == 6)
10048f4a                                  goto label_10049001
10048f4a                              
10048f53                              if (eax_49 != 9)
10048f53                                  goto label_10049122
10048f53                              
10048f59                              var_30 = 0x27
10048f60                              goto label_10048fa2
10048f60                          
10048d45                          label_10048d45:
10048d45                          int32_t esi_1 = var_14
10048d45                          
10048d4b                          if (esi_1 == 0xffffffff)
10048d4d                              esi_1 = 0x7fffffff
10048d4d                          
10048d62                          wchar16 const (* ecx_7)[0x7] = PopInt32(&arg_c)
10048d64                          var_c = ecx_7
10048d64                          
10048d67                          if ((var_8.w & 0x810) == 0)
10048f6d                              if (ecx_7 == 0)
10048f6f                                  ecx_7 = data_10060f84
10048f75                                  var_c = ecx_7
10048f75                              
10048f78                              wchar16 const (* eax_54)[0x7] = ecx_7
10048f78                              
10048f7a                              while (true)
10048f7a                                  int32_t edx_2 = esi_1
10048f7c                                  esi_1 -= 1
10048f7c                                  
10048f7f                                  if (edx_2 == 0)
10048f7f                                      break
10048f7f                                  
10048f84                                  if (*eax_54 == 0)
10048f84                                      break
10048f84                                  
10048f86                                  eax_54 += 1
10048f86                              
10048f89                              eax_41 = eax_54 - ecx_7
10048d67                          else
10048d6f                              if (ecx_7 == 0)
10048d71                                  ecx_7 = data_10060f88
10048d77                                  var_c = ecx_7
10048d77                              
10048d7a                              var_28 = 1
10048d81                              wchar16 const (* eax_30)[0x7] = ecx_7
10048d81                              
10048d83                              while (true)
10048d83                                  int32_t edx_1 = esi_1
10048d85                                  esi_1 -= 1
10048d85                                  
10048d88                                  if (edx_1 == 0)
10048d88                                      break
10048d88                                  
10048d92                                  if (*eax_30 == 0)
10048d92                                      break
10048d92                                  
10048d99                                  eax_30 = &(*eax_30)[1]
10048d99                              
10048f64                              eax_41 = (eax_30 - ecx_7) s>> 1
10048f64                          
10048d67                          goto label_1004911f
10048d67                      
10048fd7                      int16_t* eax_55 = PopInt32(&arg_c)
10048fd7                      
10048fe1                      if ((var_8.b & 0x20) == 0)
10048fef                          *eax_55 = i
10048fe1                      else
10048fe7                          *eax_55 = i.w
10048fe7                      
10048ff1                      var_2c = 1
10048d01                  else
10048d0a                      if (eax_22 s>= 0x65)
10048d0a                          goto label_10048da6
10048d0a                      
10048d13                      char* var_25c_8
10048d13                      char var_24c
10048d13                      
10048d13                      if (eax_22 s<= 0x58)
10048d19                          if (eax_22 == 0x58)
10048d19                              goto label_10048f97
10048d19                          
10048d22                          if (eax_22 == 0x43)
10048dcd                              if ((var_8.w & 0x830) == 0)
10048dcf                                  var_8:1.b |= 8
10048dcf                              
10048dcd                              goto label_10048ddc
10048dcd                          
10048d2e                          if (eax_22 != 0x45 && eax_22 != 0x47)
10048d33                              if (eax_22 != 0x53)
10048d33                                  goto label_10049122
10048d33                              
10048d3f                              if ((var_8.w & 0x830) == 0)
10048d41                                  var_8:1.b |= 8
10048d41                              
10048d3f                              goto label_10048d45
10048d3f                          
10048d9c                          var_38 = 1
10048da3                          ebx.b += 0x20
10048da6                          label_10048da6:
10048da6                          var_8 |= 0x40
10048daa                          char* edi_5 = &var_24c
10048db2                          var_c = &var_24c
10048db2                          
10048db5                          if (ecx_1 s< 0)
10048dbb                              var_14 = 6
10048db5                          else if (ecx_1 == 0 && ebx.b == 0x67)
10048e91                              var_14 = 1
10048e91                          
10048e9e                          void* eax_44 = arg_c + 8
10048ea1                          arg_c = eax_44
10048eaa                          int32_t var_4c = *(eax_44 - 8)
10048eb0                          int32_t var_48_1 = *(eax_44 - 4)
10048ec2                          data_10060974(&var_4c, &var_24c, sx.d(ebx.b), var_14, var_38)
10048ece                          void* esi_3 = var_8 & 0x80
10048ece                          
10048eda                          if (esi_3 != 0 && var_14 == 0)
10048ee3                              data_10060980(&var_24c)
10048ee3                          
10048ef1                          if (ebx.b == 0x67 && esi_3 == 0)
10048efa                              data_10060978(&var_24c)
10048efa                          
10048f08                          if (var_24c == 0x2d)
10048f0a                              var_8:1.b |= 1
10048f0e                              void var_24b
10048f0e                              edi_5 = &var_24b
10048f14                              var_c = &var_24b
10048f14                          
10048f17                          var_25c_8 = edi_5
10048ed4                          goto label_10048f18
10048ed4                      
10048e07                      if (eax_22 != 0x5a)
10048e0c                          if (eax_22 != 0x63)
10048e0f                              if (eax_22 == 0x64)
10048e0f                                  goto label_10048ffd
10048e0f                              
10048e0f                              goto label_10049122
10048e0f                          
10048ddc                          label_10048ddc:
10048ddc                          int32_t* var_25c_6 = &arg_c
10048ddc                          
10048ddd                          if ((var_8.w & 0x810) == 0)
10048e20                              var_24c = PopInt32(var_25c_6)
10048e26                              var_10 = 1
10048ddd                          else
10048dec                              int32_t eax_33 = sub_1004dca8(&var_24c, PopWord(var_25c_6))
10048df4                              var_10 = eax_33
10048df4                              
10048df9                              if (eax_33 s< 0)
10048dfb                                  var_2c = 1
10048dfb                          
10048e33                          var_c = &var_24c
10048e36                          goto label_10049122
10048e36                      
10048e3f                      int16_t* eax_38 = PopInt32(&arg_c)
10048e47                      wchar16 const (* ecx_10)[0x7]
10048e47                      
10048e47                      if (eax_38 != 0)
10048e49                          ecx_10 = *(eax_38 + 4)
10048e49                      
10048e4e                      if (eax_38 == 0 || ecx_10 == 0)
10048e7c                          char* eax_42 = data_10060f84
10048e81                          var_c = eax_42
10048e84                          var_25c_8 = eax_42
10048f18                          label_10048f18:
10048f18                          eax_41 = StrLen(var_25c_8)
1004911f                          label_1004911f:
1004911f                          var_10 = eax_41
1004911f                          goto label_10049122
1004911f                      
10048e54                      if ((var_8:1.b & 8) == 0)
10048e6d                          var_28 = 0
10048e71                          var_c = ecx_10
10048e74                          eax_41 = sx.d(*eax_38)
10048e77                          goto label_1004911f
10048e77                      
10048e5b                      var_c = ecx_10
10048e5e                      var_10 = sx.d(*eax_38) u>> 1
10048e61                      var_28 = 1
10049122                      label_10049122:
10049122                      
10049126                      if (var_2c == 0)
10049132                          if ((var_8.b & 0x40) != 0)
10049137                              if ((var_8:1.b & 1) != 0)
10049139                                  var_1a = 0x2d
10049153                                  var_20 = 1
10049137                              else if ((var_8.b & 1) != 0)
10049144                                  var_1a = 0x2b
10049153                                  var_20 = 1
10049142                              else if ((var_8.b & 2) != 0)
1004914f                                  var_1a = 0x20
10049153                                  var_20 = 1
10049153                          
10049160                          int32_t* esi_7 = var_24 - var_20 - var_10
10049160                          
10049166                          if ((var_8.b & 0xc) == 0)
10049172                              sub_1004928e(0x20, esi_7, arg1, &i)
10049172                          
10049188                          ParseDelimitedTokens(&var_1a, var_20, arg1, &i)
10049188                          
10049198                          if ((var_8.b & 8) != 0 && (var_8.b & 4) == 0)
100491a4                              sub_1004928e(0x30, esi_7, arg1, &i)
100491a4                          
100491b6                          if (var_28 == 0 || var_10 s<= 0)
10049200                              ParseDelimitedTokens(var_c, var_10, arg1, &i)
100491b6                          else
100491bb                              ebx = var_c
100491be                              int32_t j_1 = var_10 - 1
100491ef                              int32_t j
100491ef                              
100491ef                              do
100491c1                                  j.w = *ebx
100491ca                                  ebx = &(*ebx)[1]
100491cb                                  void var_3c
100491cb                                  BOOL eax_72 = sub_1004dca8(&var_3c, j)
100491cb                                  
100491d4                                  if (eax_72 s<= 0)
100491d4                                      break
100491d4                                  
100491e2                                  ParseDelimitedTokens(&var_3c, eax_72, arg1, &i)
100491ea                                  j = j_1
100491ec                                  j_1 -= 1
100491ef                              while (j != 0)
100491ef                          
1004920c                          if ((var_8.b & 4) != 0)
10049218                              sub_1004928e(0x20, esi_7, arg1, &i)
10049218          
10049223          ebx.b = *arg2
10049225          edi_1 = arg2 + 1
10049228          arg2 = edi_1
10049228          
1004922b          if (ebx.b == 0)
1004922b              break
1004922b          
10048b44          ecx_1 = var_14
10048b47          esi = var_34_1
10048b47  
10049238  return i

10049239  uint32_t jump_table_10049239[0x8] = 
10049239  {
10049239      [0x0] =  0x10048cb7
1004923d      [0x1] =  0x10048b8d
10049241      [0x2] =  0x10048ba8
10049245      [0x3] =  0x10048bf4
10049249      [0x4] =  0x10048c2b
1004924d      [0x5] =  0x10048c33
10049251      [0x6] =  0x10048c68
10049255      [0x7] =  0x10048cfb
10049259  }

10049259    int32_t* sub_10049259(int32_t* arg1, int32_t* arg2, int32_t* arg3)

1004925f  int32_t temp0 = arg2[1]
1004925f  arg2[1] -= 1
10049262  uint32_t eax_1
10049262  
10049262  if (temp0 - 1 s< 0)
10049272      int32_t* var_8_1 = arg2
10049276      eax_1 = FlushInternalStream(stream: arg1)
10049262  else
10049266      char eax = arg1.b
10049269      **arg2 = eax
1004926b      *arg2 += 1
1004926d      eax_1 = zx.d(eax)
1004926d  
10049283  if (eax_1 == 0xffffffff)
10049285      *arg3 = 0xffffffff
10049289      return arg3
10049289  
1004928a  *arg3 += 1
1004928d  return arg3


1004928e    int32_t* sub_1004928e(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t* arg4)

10049294  int32_t* i = arg2
10049296  int32_t* i_1 = arg2 - 1
10049296  
10049299  while (i s> 0)
100492a8      i = sub_10049259(arg1, arg3, arg4)
100492a8      
100492b3      if (*arg4 == 0xffffffff)
100492b3          break
100492b3      
100492b5      i = i_1
100492b7      i_1 -= 1
100492b7  
100492be  return i


100492bf    int32_t* ParseDelimitedTokens(char* arg1, int32_t* arg2, int32_t* arg3, int32_t* arg4)

100492c4  int32_t* i = arg2
100492c6  int32_t* i_1 = arg2 - 1
100492c6  
100492cb  if (i s> 0)
100492d1      char* esi_1 = arg1
100492d1      
100492f1      do
100492d5          int32_t eax = sx.d(*esi_1)
100492d9          esi_1 = &esi_1[1]
100492df          i = sub_10049259(eax, arg3, arg4)
100492df          
100492ea          if (*arg4 == 0xffffffff)
100492ea              break
100492ea          
100492ec          i = i_1
100492ee          i_1 -= 1
100492f1      while (i s> 0)
100492f1  
100492f6  return i


100492f7    int32_t PopInt32(int32_t* arg1)

100492fb  *arg1 += 4
10049303  return *(*arg1 - 4)


10049304    int32_t PopTwoInt32GetFirst(int32_t* arg1)

10049308  *arg1 += 8
1004930b  void* ecx = *arg1
10049310  *(ecx - 4)
10049313  return *(ecx - 8)


10049314    void* PopWord(int32_t* arg1)

10049318  *arg1 += 4
1004931d  void* result
1004931d  result.w = *(*arg1 - 4)
10049321  return result


10049322    int32_t InitTlsContext()

10049323  sub_10049535()
10049328  uint32_t eax = TlsAlloc()
10049331  data_10060f8c = eax
10049331  
10049336  if (eax != 0xffffffff)
1004933c      void* lpTlsValue = sub_1004d4bf(1, 0x74)
1004933c      
10049347      if (lpTlsValue != 0 && TlsSetValue(dwTlsIndex: data_10060f8c, lpTlsValue) != 0)
1004935b          sub_10049394(lpTlsValue)
10049361          uint32_t eax_2 = GetCurrentThreadId()
10049367          *(lpTlsValue + 4) = 0xffffffff
1004936d          *lpTlsValue = eax_2
10049371          return 1
10049371  
10049375  return 0


10049376    BOOL FreeTlsContext()

10049376  sub_1004955e()
1004937b  BOOL dwTlsIndex = data_10060f8c
1004937b  
10049383  if (dwTlsIndex != 0xffffffff)
10049386      dwTlsIndex = TlsFree(dwTlsIndex)
1004938c      data_10060f8c = 0xffffffff
1004938c  
10049393  return dwTlsIndex


10049394    void* sub_10049394(void* arg1)

10049398  *(arg1 + 0x50) = &data_100612c0
1004939f  *(arg1 + 0x14) = 1
100493a6  return arg1


100493a7    void* sub_100493a7()

100493a9  enum WIN32_ERROR dwErrCode = GetLastError()
100493bd  void* lpTlsValue = TlsGetValue(dwTlsIndex: data_10060f8c)
100493bd  
100493c1  if (lpTlsValue == 0)
100493cc      lpTlsValue = sub_1004d4bf(1, 0x74)
100493d2      BOOL eax_2
100493d2      
100493d2      if (lpTlsValue != 0)
100493db          eax_2 = TlsSetValue(dwTlsIndex: data_10060f8c, lpTlsValue)
100493db      
100493e3      if (lpTlsValue == 0 || eax_2 == 0)
100493fc          sub_10045ef6(0x10)
100493e3      else
100493e6          sub_10049394(lpTlsValue)
100493ec          uint32_t eax_3 = GetCurrentThreadId()
100493f2          *(lpTlsValue + 4) = 0xffffffff
100493f6          *lpTlsValue = eax_3
100493f6  
10049403  SetLastError(dwErrCode)
1004940d  return lpTlsValue


1004940e    uint32_t sub_1004940e(void* arg1)

1004940e  uint32_t dwTlsIndex = data_10060f8c
1004940e  
10049416  if (dwTlsIndex == 0xffffffff)
100494ad      return dwTlsIndex
100494ad  
1004941d  void* esi_1 = arg1
1004941d  
10049423  if (esi_1 != 0)
10049432      label_10049432:
10049432      void* eax_1 = *(esi_1 + 0x24)
10049432      
10049437      if (eax_1 != 0)
1004943a          Gladiator_Free(eax_1)
1004943a      
10049440      void* eax_2 = *(esi_1 + 0x28)
10049440      
10049445      if (eax_2 != 0)
10049448          Gladiator_Free(eax_2)
10049448      
1004944e      void* eax_3 = *(esi_1 + 0x30)
1004944e      
10049453      if (eax_3 != 0)
10049456          Gladiator_Free(eax_3)
10049456      
1004945c      void* eax_4 = *(esi_1 + 0x38)
1004945c      
10049461      if (eax_4 != 0)
10049464          Gladiator_Free(eax_4)
10049464      
1004946a      void* eax_5 = *(esi_1 + 0x40)
1004946a      
1004946f      if (eax_5 != 0)
10049472          Gladiator_Free(eax_5)
10049472      
10049478      void* eax_6 = *(esi_1 + 0x44)
10049478      
1004947d      if (eax_6 != 0)
10049480          Gladiator_Free(eax_6)
10049480      
10049486      void* eax_7 = *(esi_1 + 0x50)
10049486      
1004948e      if (eax_7 != &data_100612c0)
10049491          Gladiator_Free(eax_7)
10049491      
10049498      Gladiator_Free(esi_1)
10049423  else
1004942c      esi_1 = TlsGetValue(dwTlsIndex)
1004942c      
10049430      if (esi_1 != 0)
10049430          goto label_10049432
10049430  
100494a6  return TlsSetValue(dwTlsIndex: data_10060f8c, lpTlsValue: nullptr)


100494ae    uint32_t __stdcall GetCurrentThreadId()

100494ae  return GetCurrentThreadId() __tailcall


100494b4    HANDLE __stdcall GetCurrentThread()

100494b4  return GetCurrentThread() __tailcall


100494ba    uint32_t __fastcall sub_100494ba(int32_t arg1)

100494bd  int32_t var_8 = arg1
100494bf  uint32_t result_1
100494bf  uint32_t result = result_1
100494bf  
100494c8  if (result u> 0xff)
100494cc      result_1:3.b = result.b
100494cf      uint8_t eax_2 = (result u>> 8).b
100494d2      result_1:2.b = eax_2
100494d2      
100494df      if ((*(zx.d(eax_2) + 0x10069dc1) & 4) != 0 && LCMapString_Generic(data_10069ec4, 
100494df              0x200, &result_1:2, 2, &var_8, 2, data_10069c34, 1) != 0)
10049517          return (zx.d(var_8.b) << 8) + zx.d(var_8:1.b)
100494c8  else if ((*(result + 0x10069dc1) & 0x20) == 0x20)
10049527      return zx.d(*(result + 0x10069cc0))
10049527  
10049530  return result


10049535    int32_t sub_10049535()

10049542  InitializeCriticalSection(lpCriticalSection: data_10060fd4)
1004954a  InitializeCriticalSection(lpCriticalSection: data_10060fc4)
10049552  InitializeCriticalSection(lpCriticalSection: data_10060fb4)
1004955d  return InitializeCriticalSection(lpCriticalSection: data_10060f94)


1004955e    int32_t sub_1004955e()

100495a5  for (void* i = &data_10060f90; i s< &g_null_config_entry; i += 4)
1004956b      CRITICAL_SECTION* lpCriticalSection = *i
1004956b      
1004958f      if (lpCriticalSection != 0 && i != &data_10060fd4 && i != &data_10060fc4
1004958f              && i != &data_10060fb4 && i != &data_10060f94)
10049592          DeleteCriticalSection(lpCriticalSection)
10049596          Gladiator_Free(*i)
10049596  
100495ad  DeleteCriticalSection(lpCriticalSection: data_10060fb4)
100495b5  DeleteCriticalSection(lpCriticalSection: data_10060fc4)
100495bd  DeleteCriticalSection(lpCriticalSection: data_10060fd4)
100495c9  return DeleteCriticalSection(lpCriticalSection: data_10060f94)


100495ca    int32_t LockArenaSection(int32_t index)

100495e0  if (*((index << 2) + &data_10060f90) == 0)
100495e5      void* lpCriticalSection = ArenaAlloc(size: 0x18)
100495e5      
100495ef      if (lpCriticalSection == 0)
100495f3          sub_10045ef6(0x11)
100495f3      
100495fb      LockArenaSection(index: 0x11)
100495fb      
10049605      if (*((index << 2) + &data_10060f90) != 0)
10049611          Gladiator_Free(lpCriticalSection)
10049605      else
10049607          InitializeCriticalSection(lpCriticalSection)
1004960d          *((index << 2) + &data_10060f90) = lpCriticalSection
1004960d      
10049619      UnlockArenaSection(index: 0x11)
10049619  
1004962a  return EnterCriticalSection(lpCriticalSection: *((index << 2) + &data_10060f90))


1004962b    int32_t UnlockArenaSection(int32_t index)

1004963f  return LeaveCriticalSection(lpCriticalSection: *((index << 2) + &data_10060f90))


10049640    void FatalExitWithMessage(PSTR msg) __noreturn

10049646  FatalAppExitA(uAction: 0, lpMessageText: msg)
10049651  ExitProcess(uExitCode: 0xff)
10049651  noreturn

10049657                                                                       c3 cc cc cc cc cc cc cc cc                         .........

10049660    char* StrDupIntoArena(char* arg1, char* arg2)

10049661  char* edi = arg1
100496d1  char* ecx = arg2
100496db  int32_t edx
100496db  
100496db  while ((ecx & 3) != 0)
100496dd      edx.b = *ecx
100496df      ecx = &ecx[1]
100496df      
100496e2      if (edx.b == 0)
100496e2          goto label_10049748
100496e2      
100496e4      *edi = edx.b
100496e6      edi = &edi[1]
100496e6  
100496fb  while (true)
100496fb      int32_t eax_1 = *ecx
10049704      edx = *ecx
10049706      ecx = &ecx[4]
10049706      
1004970e      if (((eax_1 ^ 0xffffffff ^ (0x7efefeff + eax_1)) & 0x81010100) != 0)
10049712          if (edx.b == 0)
10049712              break
10049712          
10049716          if (edx:1.b == 0)
1004973f              *edi = edx.w
10049747              return arg1
10049747          
1004971e          if ((edx & 0xff0000) == 0)
10049732              *edi = edx.w
10049739              edi[2] = 0
1004973e              return arg1
1004973e          
10049726          if ((edx & 0xff000000) == 0)
1004972a              *edi = edx
10049731              return arg1
10049731      
100496f1      *edi = edx
100496f3      edi = &edi[4]
100496f3  
10049748  label_10049748:
10049748  *edi = edx.b
1004974f  return arg1

10049667                       8d a4 24 00 00 00 00 8b ff                                                         ..$......

10049670    char* ArenaStrCopyFrom(char* dst, char* src)

10049670  char* dst_1 = dst
1004967b  void* edi
1004967b  
1004967b  while ((dst_1 & 3) != 0)
1004967d      char eax = *dst_1
1004967f      dst_1 = &dst_1[1]
1004967f      
10049682      if (eax == 0)
100496bf          label_100496bf:
100496bf          edi = &dst_1[0xffffffff]
100496c2          goto label_100496d1
100496c2  
1004968c  while (true)
1004968c      int32_t eax_1 = *dst_1
1004969a      dst_1 = &dst_1[4]
1004969a      
100496a2      if (((eax_1 ^ 0xffffffff ^ (0x7efefeff + eax_1)) & 0x81010100) != 0)
100496a4          int32_t eax_4 = *(dst_1 - 4)
100496a4          
100496a9          if (eax_4.b == 0)
100496ce              edi = &dst_1[0xfffffffc]
100496ce              break
100496ce          
100496ad          if (eax_4:1.b == 0)
100496c9              edi = &dst_1[0xfffffffd]
100496cc              break
100496cc          
100496b4          if ((eax_4 & 0xff0000) == 0)
100496c4              edi = &dst_1[0xfffffffe]
100496c7              break
100496c7          
100496bb          if ((eax_4 & 0xff000000) == 0)
100496bb              goto label_100496bf
100496bb  
100496d1  label_100496d1:
100496d1  char* src_1 = src
100496db  int32_t edx
100496db  
100496db  while ((src_1 & 3) != 0)
100496dd      edx.b = *src_1
100496df      src_1 = &src_1[1]
100496df      
100496e2      if (edx.b == 0)
100496e2          goto label_10049748
100496e2      
100496e4      *edi = edx.b
100496e6      edi += 1
100496e6  
100496fb  while (true)
100496fb      int32_t eax_5 = *src_1
10049704      edx = *src_1
10049706      src_1 = &src_1[4]
10049706      
1004970e      if (((eax_5 ^ 0xffffffff ^ (0x7efefeff + eax_5)) & 0x81010100) != 0)
10049712          if (edx.b == 0)
10049712              break
10049712          
10049716          if (edx:1.b == 0)
1004973f              *edi = edx.w
10049747              return dst
10049747          
1004971e          if ((edx & 0xff0000) == 0)
10049732              *edi = edx.w
10049739              *(edi + 2) = 0
1004973e              return dst
1004973e          
10049726          if ((edx & 0xff000000) == 0)
1004972a              *edi = edx
10049731              return dst
10049731      
100496f1      *edi = edx
100496f3      edi += 4
100496f3  
10049748  label_10049748:
10049748  *edi = edx.b
1004974f  return dst


10049750    void* ArenaAlloc(int32_t* size)

10049761  return TryAllocWithFallback(size, allocMode: g_allocMode)


10049762    void* TryAllocWithFallback(int32_t* size, int32_t allocMode)

10049767  if (size u<= 0xffffffe0)
10049789      bool cond:1_1
10049789      
10049789      do
1004976d          void* result = FastAlloc(size_in: size)
1004976d          
1004977b          if (result != 0 || allocMode == result)
1004978d              return result
1004978d          
10049786          cond:1_1 = FallbackTryAlloc(size) != 0
10049789      while (cond:1_1)
10049789  
1004978b  return nullptr


1004978e    void* FastAlloc(int32_t* size_in)

1004978f  int32_t* size = size_in
1004978f  
1004979a  if (size u<= g_arenaThreshold)
1004979e      LockArenaSection(index: 9)
100497a4      void* result = ArenaAlloc(size)
100497ad      UnlockArenaSection(index: 9)
100497ad      
100497b7      if (result != 0)
100497b9          return result
100497b9  
100497bf  if (size == 0)
100497c3      size = 1
100497c3  
100497d3  return HeapAlloc(hHeap: g_heapHandle, dwFlags: HEAP_NONE, 
100497d3      dwBytes: (size + 0xf) & 0xfffffff0)


100497dc    char* ConfigManager_HandleCommand(void* arg1, void* arg2)

100497ea  void* ebx = nullptr
100497ea  
100497f7  if (arg1 s< 0 || arg1 s> 5)
10049a1c      return nullptr
10049a1c  
100497ff  LockArenaSection(index: 0x13)
10049804  data_10069f14 += 1
10049804  
10049811  while (data_10069f24 != 0)
10049815      Sleep(dwMilliseconds: 1)
10049815  
10049820  char* result
10049820  
10049820  if (arg1 == 0)
10049846      void* key = arg2
10049849      int32_t var_8_1 = 1
10049852      arg1 = nullptr
10049852      
10049855      if (key == 0)
10049a02          label_10049a02:
10049a07          result = ConfigEntryList_Init()
10049a0b          UnlockArenaSection(index: 0x13)
10049855      else
10049872          char outVal[0x84]
10049872          bool cond:6_1
10049872          
10049872          if (*key != 0x4c || *(key + 1) != 0x43 || *(key + 2) != 0x5f)
10049979              int32_t var_9c_5 = 0
10049989              result = ConfigEntry_Parse(key, &outVal, outFlags: nullptr, outMeta: nullptr)
10049989              
10049990              if (result == 0)
10049a0b                  UnlockArenaSection(index: 0x13)
10049990              else
100499d6                  for (int32_t* i = &g_config_entry_buffer; i s<= &data_100611a0; )
1004999b                      if (i != &g_config_entry_buffer)
100499ac                          bool cond:2_1 = sub_1004efe0(&outVal, *i) == 0
100499af                          int32_t eax_12
100499af                          
100499af                          if (not(cond:2_1))
100499b9                              eax_12 = ConfigEntry_Set(ebx, &outVal)
100499b9                          
100499c2                          if (cond:2_1 || eax_12 != 0)
100499c9                              arg1 += 1
100499c2                          else
100499c4                              var_8_1 &= eax_12
100499c4                      
100499cc                      i = &i[3]
100499cf                      ebx += 1
100499cf                  
100499dd                  if (var_8_1 == 0)
100499fa                      cond:6_1 = arg1 != 0
1004996c                      label_1004996c:
1004996c                      
1004996c                      if (cond:6_1)
1004996c                          goto label_10049a02
1004996c                      
10049972                      result = nullptr
10049a0b                      UnlockArenaSection(index: 0x13)
100499dd                  else
100499ea                      result = ConfigEntryList_Init()
100499ec                      Gladiator_Free(g_config_entry_buffer)
100499f2                      g_config_entry_buffer = 0
10049a0b                      UnlockArenaSection(index: 0x13)
10049872          else
10049883              void* esi_1 = StrFindAnyOf(key, "=;")
10049883              
10049889              if (esi_1 != 0)
10049895                  while (true)
10049895                      int32_t i_2 = esi_1 - key
10049897                      int32_t i_1 = i_2
10049897                      
1004989a                      if (esi_1 == key)
1004989a                          goto label_1004995b
1004989a                      
100498a3                      if (*esi_1 == 0x3b)
100498a3                          goto label_1004995b
100498a3                      
100498a9                      arg2 = 1
100498b0                      void** ebx_2 = &g_config_entry_keys
100498b0                      
100498be                      while (StrCompareN(*ebx_2, key, i_2) != 0 || i_1 != StrLen(*ebx_2))
100498d7                          arg2 += 1
100498da                          ebx_2 = &ebx_2[3]
100498da                          
100498e3                          if (ebx_2 s> &data_1006119c)
100498e3                              break
100498e3                          
100498b7                          i_2 = i_1
100498b7                      
100498ec                      void* eax_7 = StrFindChar(esi_1 + 1, U";")
100498ec                      
100498fc                      if (eax_7 == 0 && *(esi_1 + 1) != 0x3b)
100498fc                          goto label_1004995b
100498fc                      
10049902                      if (arg2 s<= 5)
1004990d                          StrCopyFixed(&outVal, esi_1 + 1, eax_7)
10049912                          *(&outVal + eax_7) = 0
10049912                          
1004992e                          if (ConfigEntry_Set(arg2, &outVal) != 0)
10049930                              arg1 += 1
10049930                      
10049933                      void* edi_2 = eax_7 + esi_1 + 1
10049933                      
10049938                      if (*edi_2 != 0)
1004993a                          key = edi_2 + 1
1004993a                          
1004993e                          if (*key != 0)
1004994b                              esi_1 = StrFindAnyOf(key, "=;")
1004994b                              
10049951                              if (esi_1 == 0)
10049951                                  goto label_1004995b
10049951                              
10049951                              continue
10049951                      
10049968                      cond:6_1 = arg1 != 0
10049968                      break
10049968                  
1004989a                  goto label_1004996c
1004989a              
1004995b              label_1004995b:
1004995b              UnlockArenaSection(index: 0x13)
10049961              result = nullptr
10049820  else if (arg2 == 0)
1004983a      result = (&g_config_entry_buffer)[arg1 * 3]
10049a0b      UnlockArenaSection(index: 0x13)
10049825  else
10049a07      result = ConfigEntry_Set(arg1, arg2)
10049a0b      UnlockArenaSection(index: 0x13)
10049a0b  
10049a11  data_10069f14 -= 1
10049a17  return result


10049a22    int32_t ConfigEntry_Set(void* arg1, void* arg2)

10049a34  void* var_b8 = arg1
10049a4e  char outVal[0x84]
10049a4e  int32_t outMeta
10049a4e  int16_t outFlags
10049a4e  
10049a4e  if (ConfigEntry_Parse(key: arg2, &outVal, &outFlags, &outMeta) != 0)
10049a62      void* eax_3 = ArenaAlloc(size: StrLen(&outVal) + 1)
10049a62      
10049a6e      if (eax_3 != 0)
10049a83          void* eax_4 = (&g_config_entry_buffer)[arg1 * 3]
10049a8c          int32_t eax_5 = *((arg1 << 2) + &data_10063434)
10049aa3          char var_24
10049aa3          MemCopyFixedSize(&var_24, arg1 * 6 + &data_100635fc, 6)
10049aa8          int32_t codepage_default_1 = g_codepage_default
10049abf          (&g_config_entry_buffer)[arg1 * 3] = StrDupIntoArena(eax_3, &outVal)
10049acb          *((arg1 << 2) + &data_10063434) = zx.d(outFlags)
10049ad4          MemCopyFixedSize(arg1 * 6 + &data_100635fc, &outFlags, 6)
10049ad9          int32_t outMeta_1 = outMeta
10049ad9          
10049ae2          if (arg1 == 2)
10049ae4              g_codepage_default = outMeta_1
10049ae4          
10049aec          if (arg1 == 1)
10049aee              data_10063450 = outMeta_1
10049aee          
10049afb          if ((&data_10061168)[arg1 * 3]() == 0)
10049b27              if (eax_4 != &g_null_config_entry)
10049b2c                  Gladiator_Free(eax_4)
10049b2c              
10049b32              return (&g_config_entry_buffer)[arg1 * 3]
10049b32          
10049b03          (&g_config_entry_buffer)[arg1 * 3] = eax_4
10049b09          Gladiator_Free(eax_3)
10049b12          *((arg1 << 2) + &data_10063434) = eax_5
10049b17          g_codepage_default = codepage_default_1
10049b17  
10049b1c  return 0


10049b3d    void* ConfigEntryList_Init()

10049b3d  void* config_entry_buffer_1 = g_config_entry_buffer
10049b4a  int32_t ebp = 1
10049b4a  
10049b4b  if (config_entry_buffer_1 == 0)
10049b52      config_entry_buffer_1 = ArenaAlloc(size: 0x351)
10049b58      g_config_entry_buffer = config_entry_buffer_1
10049b58  
10049b5d  *config_entry_buffer_1 = 0
10049b60  void* var_14 = data_10061170
10049b6b  void* var_18 = &g_default_config_table
10049b6c  char const (* config_entry_keys_1)[0xb] = g_config_entry_keys
10049b7a  ConfigEntryList_AppendFixed(buf: g_config_entry_buffer, count: 3)
10049b7f  void** i = &data_10061170
10049b87  void** i_1 = &data_10061170
10049b87  
10049bcd  do
10049b94      ArenaStrCopyFrom(dst: g_config_entry_buffer, src: U";")
10049b99      char* var_1c = i[3]
10049b9c      i = &i[3]
10049b9c      
10049bab      if (sub_1004efe0(*i_1, var_1c) != 0)
10049bad          ebp = 0
10049bad      
10049baf      void* var_14_1 = *i
10049bb1      i_1 = i
10049bb3      void* var_18_2 = &g_default_config_table
10049bb4      int32_t var_1c_1 = i[-1]
10049bbf      ConfigEntryList_AppendFixed(buf: g_config_entry_buffer, count: 3)
10049bcd  while (i s< &data_100611a0)
10049bcd  
10049bd5  if (ebp == 0)
10049bdc      return g_config_entry_buffer
10049bdc  
10049be3  Gladiator_Free(g_config_entry_buffer)
10049be8  g_config_entry_buffer = 0
10049bf5  return g_config_entry_default_return


10049bf6    char* ConfigEntry_Parse(char* key, char* outVal, int16_t* outFlags, int32_t* outMeta)

10049c09  if (key != 0)
10049c17      if (*key == 0x43 && key[1] == 0)
10049c1f          outVal[1] = 0
10049c24          *outVal = 0x43
10049c24          
10049c27          if (outFlags != 0)
10049c29              *outFlags = 0
10049c2c              outFlags[1] = 0
10049c30              outFlags[2] = 0
10049c30          
10049c39          if (outMeta != 0)
10049c3f              *outMeta = 0
10049c3f          
10049d0d          return outVal
10049d0d      
10049c56      if (sub_1004efe0(&g_config_fallback_key2, key) == 0)
10049cd0          label_10049cd0:
10049cd0          
10049cd0          if (outFlags != 0)
10049cdc              MemCopyFixedSize(outFlags, &g_config_entry_metadata_6b, 6)
10049cdc          
10049ce8          if (outMeta != 0)
10049cf4              MemCopyFixedSize(outMeta, &g_config_entry_metadata_4b, 4)
10049cf4          
10049d00          StrDupIntoArena(outVal, U"C")
10049d0d          return &g_config_fallback_key2
10049d0d      
10049c68      if (sub_1004efe0(&g_config_fallback_key1, key) == 0)
10049c68          goto label_10049cd0
10049c68      
10049c7b      char var_8c[0x88]
10049c7b      
10049c7b      if (ParseConfigKey(out: &var_8c, in: key) == 0
10049c7b              && sub_1004f0ea(&var_8c, &g_config_entry_metadata_6b, &var_8c) != 0)
10049ca7          g_config_entry_metadata_4b = zx.d(g_config_entry_flags)
10049cb4          AppendParsedSegments(arenaStr: U"C", parsedBuf: &var_8c)
10049cbe          char* key_1
10049cbe          
10049cbe          if (*key == 0)
10049cc3              key_1 = &g_config_fallback_key2
10049cbe          else
10049cc0              key_1 = key
10049cc0          
10049cc5          StrDupIntoArena(U"C", key_1)
10049ccb          goto label_10049cd0
10049ccb  
10049c9c  return nullptr


10049d0e    int32_t ConfigEntry_IsEmpty() __pure

10049d10  return 0


10049d11    void ConfigEntryList_AppendFixed(char* buf, int32_t count)

10049d12  int32_t edi = count
10049d12  
10049d18  if (edi s> 0)
10049d1b      int32_t* esi_1 = &count
10049d31      int32_t i
10049d31      
10049d31      do
10049d1f          char* var_c_1 = esi_1[1]
10049d22          esi_1 = &esi_1[1]
10049d29          ArenaStrCopyFrom(dst: buf, src: var_c_1)
10049d2f          i = edi
10049d2f          edi -= 1
10049d31      while (i != 1)


10049d36    int32_t ParseConfigKey(char* out, char* in)

10049d39  int32_t ebx
10049d39  int32_t var_8 = ebx
10049d47  sub_1004c9c0(out, 0, 0x88)
10049d4c  char* in_1 = in
10049d52  char eax = *in_1
10049d52  
10049d56  if (eax != 0)
10049d63      if (eax != 0x2e || in_1[1] == 0)
10049d7b          in = nullptr
10049d7b          
10049d85          while (true)
10049d85              char* eax_2 = StrFindChar(in_1, "_.,")
10049d85              
10049d8e              if (eax_2 != 0)
10049d94                  ebx.b = *(eax_2 + in_1)
10049d9a                  char* out_1
10049d9a                  char* in_2
10049d9a                  char* var_14_2
10049d9a                  
10049d9a                  if (in != 0)
10049db1                      char* out_2
10049db1                      
10049db1                      if (in != 1)
10049dd4                          if (in == 2 && (ebx.b == 0 || ebx.b == 0x2c))
10049dd6                              var_14_2 = eax_2
10049dda                              in_2 = in_1
10049ddb                              out_2 = &out[0x80]
10049ddb                              goto label_10049de0
10049db1                      else if (eax_2 s< 0x40 && ebx.b != 0x5f)
10049dbd                          var_14_2 = eax_2
10049dc1                          in_2 = in_1
10049dc2                          out_2 = &out[0x40]
10049de0                          label_10049de0:
10049de0                          out_1 = out_2
10049de0                          goto label_10049de1
10049d9a                  else if (eax_2 s< 0x40 && ebx.b != 0x2e)
10049da6                      var_14_2 = eax_2
10049da7                      in_2 = in_1
10049da8                      out_1 = out
10049de1                      label_10049de1:
10049de1                      StrCopyFixed(out_1, in_2, var_14_2)
10049de1                      
10049dec                      if (ebx.b == 0x2c)
10049dec                          break
10049dec                      
10049df0                      if (ebx.b == 0)
10049df0                          break
10049df0                      
10049df2                      in = &in[1]
10049df5                      in_1 = eax_2 + in_1 + 1
10049df8                      continue
10049df8              
10049dfa              return 0xffffffff
10049d63      else
10049d6d          StrDupIntoArena(&out[0x80], &in_1[1])
10049d6d  
10049d74  return 0


10049e02    void* AppendParsedSegments(char* arenaStr, char* parsedBuf)

10049e0c  StrDupIntoArena(arenaStr, parsedBuf)
10049e0c  
10049e1a  if (parsedBuf[0x40] != 0)
10049e1c      void* var_8_1 = &parsedBuf[0x40]
10049e1d      void* const var_c_1 = &g_locale_string_sample
10049e28      ConfigEntryList_AppendFixed(buf: arenaStr, count: 2)
10049e28  
10049e37  void* result = &parsedBuf[0x80]
10049e37  
10049e3e  if (parsedBuf[0x80] == 0)
10049e54      return result
10049e54  
10049e40  void* __saved_esi_1 = result
10049e41  wchar32* var_8_2 = &(*U"$?.<>~^+%/*")[2]
10049e4c  return ConfigEntryList_AppendFixed(buf: arenaStr, count: 2)


10049e55    int32_t LCMapString_Generic(uint32_t arg1, uint32_t arg2, uint8_t* arg3, void* arg4, PSTR arg5, int32_t arg6, uint32_t arg7, int32_t arg8)

10049e58  int32_t var_8 = 0xffffffff
10049e5a  int32_t var_c = 0x10058600
10049e5f  int32_t var_10 = 0x1004fa8c
10049e6a  TEB* fsbase
10049e6a  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
10049e6b  fsbase->NtTib.ExceptionList = &ExceptionList
10049e78  int32_t __saved_edi
10049e78  int32_t* var_1c = &__saved_edi
10049e78  
10049e83  if (g_lcmap_mode != 0)
10049e83      goto label_10049ece
10049e83  
10049e9f  int32_t result
10049e9f  
10049e9f  if (LCMapStringW(Locale: 0, dwMapFlags: 0x100, lpSrcStr: &g_locale_unicode_sample, 
10049e9f          cchSrc: 1, lpDestStr: nullptr, cchDest: 0) == 0)
10049ebb      if (LCMapStringA(Locale: 0, dwMapFlags: 0x100, lpSrcStr: &g_locale_ascii_sample, 
10049ebb              cchSrc: 1, lpDestStr: nullptr, cchDest: 0) != 0)
10049ec1          g_lcmap_mode = 2
10049ec1          goto label_10049ece
10049ec1      
10049fe3      result = 0
10049e9f  else
10049ea1      g_lcmap_mode = 1
10049ece      label_10049ece:
10049ece      
10049ece      if (arg4 s> 0)
10049edd          arg4 = AdjustStringLength(arg3, arg4)
10049edd      
10049ee0      int32_t lcmap_mode_1 = g_lcmap_mode
10049ee0      
10049ee8      if (lcmap_mode_1 == 2)
10049efc          result = LCMapStringA(Locale: arg1, dwMapFlags: arg2, lpSrcStr: arg3, 
10049efc              cchSrc: arg4, lpDestStr: arg5, cchDest: arg6)
10049ee8      else if (lcmap_mode_1 != 1)
10049fe3          result = 0
10049f0a      else
10049f13          if (arg7 == 0)
10049f1a              arg7 = g_codepage_default
10049f1a          
10049f28          int32_t eax_6 = neg.d(arg8)
10049f34          int32_t eax_10 = MultiByteToWideChar(CodePage: arg7, 
10049f34              dwFlags: (sbb.d(eax_6, eax_6, arg8 != 0) & 8) + 1, lpMultiByteStr: arg3, 
10049f34              cbMultiByte: arg4, lpWideCharStr: nullptr, cchWideChar: 0)
10049f34          
10049f41          if (eax_10 == 0)
10049fe3              result = 0
10049f41          else
10049f47              int32_t var_8_1 = 0
10049f50              int32_t eax_12
10049f50              eax_12.b = (eax_10 * 2 + 3).b & 0xfc
10049f52              sub_10044310(eax_12)
10049f57              int32_t* var_1c_1 = &__saved_edi
10049f5c              int32_t* var_28_1 = &__saved_edi
10049f5f              int32_t var_8_2 = 0xffffffff
10049f5f              
10049f7b              if (var_28_1 == 0)
10049fe3                  result = 0
10049f7b              else if (MultiByteToWideChar(CodePage: arg7, dwFlags: MB_PRECOMPOSED, 
10049f7b                      lpMultiByteStr: arg3, cbMultiByte: arg4, lpWideCharStr: var_28_1, 
10049f7b                      cchWideChar: eax_10) == 0)
10049fe3                  result = 0
10049f94              else
10049fa8                  int32_t result_1 = LCMapStringW(Locale: arg1, dwMapFlags: arg2, 
10049fa8                      lpSrcStr: var_28_1, cchSrc: eax_10, lpDestStr: nullptr, cchDest: 0)
10049faa                  int32_t result_2 = result_1
10049faa                  
10049faf                  if (result_1 == 0)
10049fe3                      result = 0
10049faf                  else if ((arg2:1.b & 4) == 0)
10049ff7                      int32_t var_8_3 = 1
1004a004                      int32_t eax_17
1004a004                      eax_17.b = (result_1 * 2 + 3).b & 0xfc
1004a006                      sub_10044310(eax_17)
1004a00b                      int32_t* var_1c_2 = &__saved_edi
1004a010                      int32_t* var_24_1 = &__saved_edi
1004a013                      int32_t var_8_4 = 0xffffffff
1004a013                      
1004a02d                      if (&__saved_edi == 0)
10049fe3                          result = 0
1004a02d                      else if (LCMapStringW(Locale: arg1, dwMapFlags: arg2, 
1004a02d                              lpSrcStr: var_28_1, cchSrc: eax_10, lpDestStr: &__saved_edi, 
1004a02d                              cchDest: result_1) == 0)
10049fe3                          result = 0
1004a045                      else
1004a04c                          PSTR lpMultiByteStr
1004a04c                          int32_t cbMultiByte
1004a04c                          
1004a04c                          if (arg6 != 0)
1004a052                              cbMultiByte = arg6
1004a055                              lpMultiByteStr = arg5
1004a04c                          else
1004a04e                              cbMultiByte = 0
1004a04f                              lpMultiByteStr = nullptr
1004a04f                          
1004a068                          result_1 = WideCharToMultiByte(CodePage: arg7, dwFlags: 0x220, 
1004a068                              lpWideCharStr: &__saved_edi, cchWideChar: result_1, 
1004a068                              lpMultiByteStr, cbMultiByte, lpDefaultChar: nullptr, 
1004a068                              lpUsedDefaultChar: nullptr)
1004a068                          
1004a06c                          if (result_1 == 0)
10049fe3                              result = 0
1004a06c                          else
1004a072                              result = result_1
10049fb5                  else if (arg6 == 0)
1004a072                      result = result_1
10049fba                  else if (result_1 s> arg6)
10049fe3                      result = 0
10049fc3                  else if (LCMapStringW(Locale: arg1, dwMapFlags: arg2, lpSrcStr: var_28_1, 
10049fc3                          cchSrc: eax_10, lpDestStr: arg5, cchDest: arg6) != 0)
1004a072                      result = result_1
10049fdd                  else
10049fe3                      result = 0
10049fe3  
10049feb  fsbase->NtTib.ExceptionList = ExceptionList
10049ff6  return result


10049f65    int32_t sub_10049f65() __pure

10049f68  return 1

10049f69                             8b 65 e8 33 ff 89 7d dc 83 4d fc ff 8b 5d e4                                   .e.3..}..M...].

1004a019    int32_t sub_1004a019() __pure

1004a01c  return 1

1004a01d                                                                                         8b 65 e8                               .e.
1004a020  33 ff 33 db 83 4d fc ff 8b 75 d8                                                                 3.3..M...u.

1004a079    void* AdjustStringLength(char* arg1, int32_t arg2)

1004a07d  char* eax = arg1
1004a084  int32_t ecx = arg2 - 1
1004a084  
1004a087  if (arg2 != 0)
1004a08c      while (*eax != 0)
1004a08e          eax = &eax[1]
1004a08f          int32_t esi_1 = ecx
1004a091          ecx -= 1
1004a091          
1004a094          if (esi_1 == 0)
1004a094              break
1004a094  
1004a09a  if (*eax != 0)
1004a0a3      return arg2
1004a0a3  
1004a0a0  return eax - arg1


1004a0a4    int32_t ComputeTimeOffsetOrIndex(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

1004a0c3  if (arg1 - 0x76c s< 0x46 || arg1 - 0x76c s> 0x8a)
1004a160      return 0xffffffff
1004a160  
1004a0d5  int32_t esi_2 = *((arg2 << 2) + &stream_buffer_table) + arg3
1004a0d5  
1004a0e0  if (((arg1 - 0x76c).b & 3) == 0 && arg2 s> 2)
1004a0e2      esi_2 += 1
1004a0e2  
1004a0e3  sub_1004fb64()
1004a0f8  int32_t var_c_1 = esi_2
1004a0fd  int32_t var_14_1 = arg1 - 0x76c
1004a10b  int32_t var_20_1 = arg4
1004a125  int32_t var_18_1 = arg2 - 1
1004a12a  int32_t result = (
1004a12a      (arg4 + ((arg1 - 0x76c) * 0x16d + esi_2 + ((arg1 - 0x76d) s>> 2)) * 0x18) * 0x3c
1004a12a      + arg5) * 0x3c + time_offset_base + arg6 + 0x7c558180
1004a12a  
1004a134  if (arg7 != 1)
1004a143      if (arg7 != 0xffffffff || time_fallback_enabled == 0)
1004a15c          return result
1004a15c      
1004a154      void var_28
1004a154      
1004a154      if (sub_1004fe2f(&var_28) == 0)
1004a15c          return result
1004a15c  
1004a156  return result + time_fallback_offset


1004a166    int32_t AllocateArenaBufferIfNeeded(int32_t* arg1)

1004a176  if (sub_1004dc7f(arg1[4]) != 0)
1004a17e      int32_t eax_1
1004a17e      
1004a17e      if (arg1 == 0x10060cf8)
1004a180          eax_1 = 0
1004a18f          label_1004a18f:
1004a18f          num_active_arena_streams += 1
1004a18f          
1004a19b          if ((arg1[3].w & 0x10c) == 0)
1004a1b3              void* eax_2
1004a1b3              
1004a1b3              if (*((eax_1 << 2) + &arena_stream_buffers[]) == 0)
1004a1b6                  eax_2 = ArenaAlloc(size: 0x1000)
1004a1be                  *((eax_1 << 2) + &arena_stream_buffers[]) = eax_2
1004a1be              
1004a1c0              if (*((eax_1 << 2) + &arena_stream_buffers[]) != 0 || eax_2 != 0)
1004a1d5                  int32_t edi_1 = *((eax_1 << 2) + &arena_stream_buffers[])
1004a1d7                  arg1[6] = 0x1000
1004a1da                  arg1[2] = edi_1
1004a1dd                  *arg1 = edi_1
1004a1df                  arg1[1] = 0x1000
1004a1c0              else
1004a1c7                  arg1[2] = &arg1[5]
1004a1ca                  *arg1 = &arg1[5]
1004a1cd                  arg1[6] = 2
1004a1d0                  arg1[1] = 2
1004a1d0              
1004a1e2              arg1[3].w |= 0x1102
1004a1ee              return 1
1004a17e      else if (arg1 == 0x10060d18)
1004a18e          eax_1 = 1
1004a18e          goto label_1004a18f
1004a18e  
1004a1f2  return 0


1004a1f3    void ResetArenaStreamState(int32_t arg1, int32_t* arg2)

1004a203  if (arg1 != 0 && (*(arg2 + 0xd) & 0x10) != 0)
1004a206      sub_100459a9(arg2)
1004a20b      *(arg2 + 0xd) &= 0xee
1004a20f      arg2[6] = 0
1004a213      *arg2 = 0
1004a216      arg2[2] = 0

1004a21d                                                                                         cc cc cc                               ...

1004a220    uint32_t __stdcall __aulldiv(int32_t arg1, uint32_t arg2, int32_t arg3, uint32_t arg4) __pure

1004a228  if (arg4 == 0)
1004a285      return divu.dp.d((modu.dp.d(0:arg2, arg3)):arg1, arg3)
1004a285  
1004a242  uint32_t i = arg4
1004a244  int32_t ebx_1 = arg3
1004a248  uint32_t edx_3 = arg2
1004a24c  int32_t eax_6 = arg1
1004a24c  
1004a25a  do
1004a252      ebx_1 = rrc.d(ebx_1, 1, (i & 1) != 0)
1004a254      uint32_t temp4_1 = edx_3
1004a254      edx_3 u>>= 1
1004a256      eax_6 = rrc.d(eax_6, 1, (temp4_1 & 1) != 0)
1004a258      i u>>= 1
1004a25a  while (i != 0)
1004a25a  
1004a25c  uint32_t result = divu.dp.d(edx_3:eax_6, ebx_1)
1004a260  int32_t eax_8 = result * arg4
1004a26a  int32_t eax_10
1004a26a  int32_t edx_4
1004a26a  edx_4:eax_10 = mulu.dp.d(arg3, result)
1004a26c  int32_t edx_5 = edx_4 + eax_8
1004a26c  
1004a27c  if (edx_4 + eax_8 u>= edx_4 && edx_5 u<= arg2 && (edx_5 u< arg2 || eax_10 u<= arg1))
1004a281      return result
1004a281  
1004a27e  return result - 1


1004a288    enum WIN32_ERROR sub_1004a288(int32_t arg1)

1004a295  if (arg1 u< data_1006a07c)
1004a2ad      int32_t esi_2 = (arg1 & 0x1f) * 0x24
1004a2ad      
1004a2b5      if ((*((&data_10069f40)[arg1 s>> 5] + esi_2 + 4) & 1) != 0)
1004a2b8          sub_1004d918(arg1)
1004a2c5          enum WIN32_ERROR result
1004a2c5          
1004a2c5          if ((*((&data_10069f40)[arg1 s>> 5] + esi_2 + 4) & 1) == 0)
1004a2f5              *sub_10044f86() = 9
1004a2fb              result = ~NO_ERROR
1004a2c5          else
1004a2d7              if (FlushFileBuffers(hFile: sub_1004d82f(arg1)) != 0)
1004a2e3                  result = NO_ERROR
1004a2d7              else
1004a2df                  result = GetLastError()
1004a2df              
1004a2e7              if (result != NO_ERROR)
1004a2ee                  *sub_10044f8f() = result
1004a2f5                  *sub_10044f86() = 9
1004a2fb                  result = ~NO_ERROR
1004a2fb          
1004a2ff          sub_1004d977(arg1)
1004a305          return result
1004a305  
1004a30e  *sub_10044f86() = 9
1004a314  return ~NO_ERROR


1004a31b    int32_t sub_1004a31b(int32_t arg1)

1004a328  enum HEAP_FLAGS flOptions
1004a328  flOptions.b = arg1 == 0
1004a32c  HANDLE eax = HeapCreate(flOptions, dwInitialSize: 0x1000, dwMaximumSize: 0)
1004a334  g_heapHandle = eax
1004a334  
1004a339  if (eax != 0)
1004a342      if (sub_1004a3e9() != 0)
1004a356          return 1
1004a356      
1004a34a      HeapDestroy(hHeap: g_heapHandle)
1004a34a  
1004a352  return 0


1004a357    BOOL sub_1004a357()

1004a358  int32_t i = 0
1004a358  
1004a367  if (data_10069f00 s> 0)
1004a376      int32_t* esi_1 = data_10069f04 + 0xc
1004a376      
1004a3a9      do
1004a385          VirtualFree(lpAddress: *esi_1, dwSize: 0x100000, dwFreeType: MEM_DECOMMIT)
1004a390          VirtualFree(lpAddress: *esi_1, dwSize: 0, dwFreeType: MEM_RELEASE)
1004a39d          HeapFree(hHeap: g_heapHandle, dwFlags: HEAP_NONE, lpMem: esi_1[1])
1004a39f          esi_1 = &esi_1[5]
1004a3a2          i += 1
1004a3a9      while (i s< data_10069f00)
1004a3a9  
1004a3bb  HeapFree(hHeap: g_heapHandle, dwFlags: HEAP_NONE, lpMem: data_10069f04)
1004a3cb  return HeapDestroy(hHeap: g_heapHandle)


1004a3cc    int32_t sub_1004a3cc()

1004a3d1  return g_arenaThreshold


1004a3d2    int32_t sub_1004a3d2(int32_t arg1)

1004a3db  if (arg1 u> 0x3f8)
1004a3df      return 0
1004a3df  
1004a3e2  g_arenaThreshold = arg1
1004a3e8  return 1


1004a3e9    int32_t sub_1004a3e9()

1004a3f6  int32_t result = HeapAlloc(hHeap: g_heapHandle, dwFlags: HEAP_NONE, dwBytes: 0x140)
1004a3fe  data_10069f04 = result
1004a3fe  
1004a403  if (result == 0)
1004a405      return result
1004a405  
1004a406  data_10069efc = 0
1004a40d  data_10069f00 = 0
1004a416  data_10069ef8 = result
1004a41b  data_10069ee4 = 0x10
1004a426  return 1


1004a427    void* ArenaFindChunkHeader(int32_t arg1)

1004a42f  void* result = data_10069f04
1004a434  void* ecx_1 = result + data_10069f00 * 0x14
1004a434  
1004a439  while (true)
1004a439      if (result u>= ecx_1)
1004a44f          return nullptr
1004a44f      
1004a448      if (arg1 - *(result + 0xc) u< 0x100000)
1004a448          break
1004a448      
1004a44a      result += 0x14
1004a44a  
1004a451  return result


1004a452    int32_t* ArenaDetachAndFreeOld(int32_t* arg1, void* arg2)

1004a460  int32_t eax = arg1[4]
1004a46b  void* edx_1 = arg2 - 4
1004a46f  uint32_t esi_2 = (arg2 - arg1[3]) u>> 0xf
1004a474  int32_t edi = *(edx_1 - 4)
1004a47d  int32_t* ebx_1 = *(arg2 - 4) - 1
1004a488  int32_t* var_10 = ebx_1
1004a48e  int32_t ecx_4 = *(ebx_1 + edx_1)
1004a48e  
1004a497  if ((ecx_4.b & 1) == 0)
1004a4a0      arg2 = (ecx_4 s>> 4) - 1
1004a4a0      
1004a4a5      if ((ecx_4 s>> 4) - 1 u> 0x3f)
1004a4a7          arg2 = 0x3f
1004a4a7      
1004a4b2      if (*(ebx_1 + edx_1 + 4) == *(ebx_1 + edx_1 + 8))
1004a4ba          if (arg2 u>= 0x20)
1004a4e9              uint32_t edi_4 = not.d(0x80000000 u>> (arg2.b - 0x20))
1004a4eb              *(eax + (esi_2 << 2) + 0xc4) &= edi_4
1004a4f2              char temp0_1 = *(arg2 + eax + 4)
1004a4f2              *(arg2 + eax + 4) -= 1
1004a4f2              
1004a4f4              if (temp0_1 == 1)
1004a4f9                  arg1[1] &= edi_4
1004a4ba          else
1004a4c7              uint32_t edi_2 = not.d(0x80000000 u>> arg2.b)
1004a4c9              *(eax + (esi_2 << 2) + 0x44) &= edi_2
1004a4cd              char temp1_1 = *(arg2 + eax + 4)
1004a4cd              *(arg2 + eax + 4) -= 1
1004a4cd              
1004a4cf              if (temp1_1 == 1)
1004a4d4                  *arg1 &= edi_2
1004a4d4      
1004a504      *(*(ebx_1 + edx_1 + 8) + 4) = *(ebx_1 + edx_1 + 4)
1004a507      void* ecx_16 = *(ebx_1 + edx_1 + 4)
1004a50b      int32_t edi_6 = *(ebx_1 + edx_1 + 8)
1004a50f      ebx_1 += ecx_4
1004a512      *(ecx_16 + 8) = edi_6
1004a515      var_10 = ebx_1
1004a515  
1004a51d  int32_t edi_9 = (ebx_1 s>> 4) - 1
1004a51d  
1004a521  if (edi_9 u> 0x3f)
1004a525      edi_9 = 0x3f
1004a525  
1004a529  int32_t ecx_18 = edi & 1
1004a529  
1004a52f  if (ecx_18 == 0)
1004a535      void* edx_2 = edx_1 - edi
1004a543      void* ecx_21 = (edi s>> 4) - 1
1004a547      arg2 = ecx_21
1004a547      
1004a54a      if (ecx_21 u> 0x3f)
1004a54c          arg2 = 0x3f
1004a54f          ecx_21 = 0x3f
1004a54f      
1004a551      ebx_1 += edi
1004a556      var_10 = ebx_1
1004a55c      edi_9 = (ebx_1 s>> 4) - 1
1004a55c      
1004a55f      if (edi_9 u> 0x3f)
1004a561          edi_9 = 0x3f
1004a561      
1004a565      if (ecx_21 != edi_9)
1004a570          if (*(edx_2 + 4) == *(edx_2 + 8))
1004a578              if (arg2 u>= 0x20)
1004a5a7                  uint32_t edx_7 = not.d(0x80000000 u>> (arg2.b - 0x20))
1004a5a9                  *(eax + (esi_2 << 2) + 0xc4) &= edx_7
1004a5b0                  char temp3_1 = *(arg2 + eax + 4)
1004a5b0                  *(arg2 + eax + 4) -= 1
1004a5b0                  
1004a5b2                  if (temp3_1 == 1)
1004a5b7                      arg1[1] &= edx_7
1004a578              else
1004a585                  uint32_t edx_5 = not.d(0x80000000 u>> arg2.b)
1004a587                  *(eax + (esi_2 << 2) + 0x44) &= edx_5
1004a58b                  char temp4_1 = *(arg2 + eax + 4)
1004a58b                  *(arg2 + eax + 4) -= 1
1004a58b                  
1004a58d                  if (temp4_1 == 1)
1004a592                      *arg1 &= edx_5
1004a592          
1004a5c3          *(*(edx_2 + 8) + 4) = *(edx_2 + 4)
1004a5cf          *(*(edx_2 + 4) + 8) = *(edx_2 + 8)
1004a5cf      
1004a5d2      edx_1 = edx_2
1004a5d2  
1004a5de  if (ecx_18 != 0 || arg2 != edi_9)
1004a5ed      *(edx_1 + 4) = (esi_2 * 0x204 + eax + 0x144)[edi_9 * 2 + 1]
1004a5f3      void* ecx_38 = &(esi_2 * 0x204 + eax + 0x144)[edi_9 * 2]
1004a5f6      *(edx_1 + 8) = ecx_38
1004a5f9      *(ecx_38 + 4) = edx_1
1004a5ff      *(*(edx_1 + 4) + 8) = edx_1
1004a5ff      
1004a608      if (*(edx_1 + 4) == *(edx_1 + 8))
1004a60a          int32_t ecx_40
1004a60a          ecx_40.b = *(edi_9 + eax + 4)
1004a611          arg2:3.b = ecx_40.b
1004a614          ecx_40.b += 1
1004a616          *(edi_9 + eax + 4) = ecx_40.b
1004a616          
1004a61a          if (edi_9 u>= 0x20)
1004a645              if (arg2:3.b == 0)
1004a654                  arg1[1] |= 0x80000000 u>> (edi_9.b - 0x20)
1004a654              
1004a668              *(eax + (esi_2 << 2) + 0xc4) |= 0x80000000 u>> (edi_9.b - 0x20)
1004a61a          else
1004a620              if (arg2:3.b == 0)
1004a62e                  *arg1 |= 0x80000000 u>> edi_9.b
1004a62e              
1004a63d              *(eax + (esi_2 << 2) + 0x44) |= 0x80000000 u>> edi_9.b
1004a63d          
1004a66a          ebx_1 = var_10
1004a66a  
1004a66d  int32_t* result = esi_2 * 0x204 + eax + 0x144
1004a670  *edx_1 = ebx_1
1004a672  *(ebx_1 + edx_1 - 4) = ebx_1
1004a676  int32_t temp2 = *result
1004a676  *result -= 1
1004a676  
1004a678  if (temp2 == 1)
1004a67e      int32_t eax_3 = data_10069efc
1004a685      void* eax_9
1004a685      
1004a685      if (eax_3 != 0)
1004a6a9          VirtualFree(lpAddress: (data_10069ef4 << 0xf) + *(eax_3 + 0xc), dwSize: 0x8000, 
1004a6a9              dwFreeType: MEM_DECOMMIT)
1004a6b1          void* eax_4 = data_10069efc
1004a6bd          *(eax_4 + 8) |= 0x80000000 u>> (data_10069ef4).b
1004a6ce          *(*(data_10069efc + 0x10) + (data_10069ef4 << 2) + 0xc4) = 0
1004a6db          void* eax_8 = *(data_10069efc + 0x10)
1004a6de          *(eax_8 + 0x43) -= 1
1004a6e1          eax_9 = data_10069efc
1004a6e1          
1004a6ed          if (*(*(eax_9 + 0x10) + 0x43) == 0)
1004a6ef              *(eax_9 + 4) &= 0xfffffffe
1004a6f3              eax_9 = data_10069efc
1004a6f3      
1004a6fc      if (eax_3 == 0 || *(eax_9 + 8) != 0xffffffff)
1004a76a          result = arg1
1004a6fc      else
1004a704          VirtualFree(lpAddress: *(eax_9 + 0xc), dwSize: 0, dwFreeType: MEM_RELEASE)
1004a716          HeapFree(hHeap: g_heapHandle, dwFlags: HEAP_NONE, lpMem: *(data_10069efc + 0x10))
1004a72f          char* eax_14 = data_10069efc
1004a740          sub_100452f0(eax_14, &eax_14[0x14], 
1004a740              data_10069f00 * 0x14 - eax_14 + data_10069f04 - 0x14)
1004a745          result = arg1
1004a74b          data_10069f00 -= 1
1004a74b          
1004a757          if (result u> data_10069efc)
1004a759              result -= 0x14
1004a759          
1004a762          data_10069ef8 = data_10069f04
1004a762      
1004a76d      data_10069efc = result
1004a772      data_10069ef4 = esi_2
1004a772  
1004a77c  return result


1004a77d    void* ArenaAlloc(int32_t* arg1)

1004a788  int32_t* edx = data_10069f04
1004a794  void* edi = &edx[data_10069f00 * 5]
1004a7a0  void* ecx_1 = (arg1 + 0x17) & 0xfffffff0
1004a7ad  uint32_t var_10
1004a7ad  uint32_t var_c
1004a7ad  uint32_t esi
1004a7ad  
1004a7ad  if ((ecx_1 s>> 4) - 1 s>= 0x20)
1004a7c3      esi = 0
1004a7c7      var_10 = 0
1004a7ca      var_c = 0xffffffff u>> (((ecx_1 s>> 4) - 1).b - 0x20)
1004a7ad  else
1004a7b2      esi = 0xffffffff u>> ((ecx_1 s>> 4) - 1).b
1004a7b4      var_c = 0xffffffff
1004a7b8      var_10 = esi
1004a7b8  
1004a7cd  int32_t* eax_4 = data_10069ef8
1004a7d2  int32_t* ebx = eax_4
1004a7d6  arg1 = ebx
1004a7d6  
1004a7d9  if (ebx u< edi)
1004a7e7      while (((ebx[1] & var_c) | (*ebx & esi)) == 0)
1004a7e9          ebx = &ebx[5]
1004a7ef          arg1 = ebx
1004a7ef          
1004a7f2          if (ebx u>= edi)
1004a7f2              break
1004a7f2  
1004a7f7  if (ebx == edi)
1004a7f9      ebx = edx
1004a7fb      bool cond:4_1
1004a7fb      
1004a7fb      while (true)
1004a7fb          cond:4_1 = ebx != eax_4
1004a7fd          arg1 = ebx
1004a7fd          
1004a800          if (ebx u>= eax_4)
1004a800              break
1004a800          
1004a80e          if (((ebx[1] & var_c) | (*ebx & esi)) != 0)
1004a815              cond:4_1 = ebx != eax_4
1004a815              break
1004a815          
1004a810          ebx = &ebx[5]
1004a810      
1004a817      if (not(cond:4_1))
1004a819          bool cond:5_1
1004a819          
1004a819          while (true)
1004a819              cond:5_1 = ebx != edi
1004a819              
1004a81c              if (ebx u>= edi)
1004a81c                  break
1004a81c              
1004a822              if (ebx[2] != 0)
1004a82c                  cond:5_1 = ebx != edi
1004a82c                  break
1004a82c              
1004a824              ebx = &ebx[5]
1004a827              arg1 = ebx
1004a827          
1004a82f          if (not(cond:5_1))
1004a831              ebx = edx
1004a833              bool cond:7_1
1004a833              
1004a833              while (true)
1004a833                  cond:7_1 = ebx != eax_4
1004a835                  arg1 = ebx
1004a835                  
1004a838                  if (ebx u>= eax_4)
1004a838                      break
1004a838                  
1004a83e                  if (ebx[2] != 0)
1004a845                      cond:7_1 = ebx != eax_4
1004a845                      break
1004a845                  
1004a840                  ebx = &ebx[5]
1004a840              
1004a847              if (not(cond:7_1))
1004a84e                  ebx = sub_1004aa86()
1004a852                  arg1 = ebx
1004a852                  
1004a855                  if (ebx == 0)
1004a86b                      return nullptr
1004a86b          
1004a861          *ebx[4] = sub_1004ab37(ebx)
1004a861          
1004a869          if (*ebx[4] == 0xffffffff)
1004a86b              return nullptr
1004a86b  
1004a872  data_10069ef8 = ebx
1004a878  int32_t* eax_8 = ebx[4]
1004a87b  int32_t edx_1 = *eax_8
1004a880  int32_t var_8_1 = edx_1
1004a880  
1004a897  if (edx_1 == 0xffffffff
1004a897          || ((eax_8[edx_1 + 0x31] & var_c) | (eax_8[edx_1 + 0x11] & esi)) == 0)
1004a8a8      var_8_1 = 0
1004a8ac      void* ecx_15 = &eax_8[0x11]
1004a8b1      esi = var_10
1004a8b1      
1004a8b4      if (((eax_8[0x31] & var_c) | (eax_8[0x11] & var_10)) == 0)
1004a8cb          int32_t edx_6
1004a8cb          
1004a8cb          do
1004a8bc              var_8_1 += 1
1004a8bf              edx_6 = *(ecx_15 + 0x84) & var_c
1004a8c2              ecx_15 += 4
1004a8cb          while ((edx_6 | (esi & *ecx_15)) == 0)
1004a8cb      
1004a8cd      edx_1 = var_8_1
1004a8cd  
1004a8d2  int32_t edi_9 = 0
1004a8e8  int32_t i = eax_8[edx_1 + 0x11] & esi
1004a8e8  
1004a8ea  if (i == 0)
1004a8f5      i = eax_8[edx_1 + 0x31] & var_c
1004a8f8      edi_9 = 0x20
1004a8f8  
1004a8fb  while (i s>= 0)
1004a8fd      i <<= 1
1004a8ff      edi_9 += 1
1004a8ff  
1004a905  int32_t* edx_8 = eax_8[edx_1 * 0x81 + 0x51 + edi_9 * 2 + 1]
1004a90b  void* ecx_23 = *edx_8 - ecx_1
1004a916  int32_t esi_5 = (ecx_23 s>> 4) - 1
1004a916  
1004a91a  if (esi_5 s> 0x3f)
1004a91e      esi_5 = 0x3f
1004a91e  
1004a921  if (esi_5 == edi_9)
1004aa34      label_1004aa34:
1004aa34      
1004aa36      if (ecx_23 != 0)
1004aa38          *edx_8 = ecx_23
1004aa3a          *(ecx_23 + edx_8 - 4) = ecx_23
1004a921  else
1004a92d      if (edx_8[1] == edx_8[2])
1004a932          if (edi_9 s>= 0x20)
1004a977              uint32_t ebx_5 = not.d(0x80000000 u>> (edi_9.b - 0x20))
1004a979              eax_8[var_8_1 + 0x31] &= ebx_5
1004a97b              char temp1_1 = *(eax_8 + edi_9 + 4)
1004a97b              *(eax_8 + edi_9 + 4) -= 1
1004a97b              
1004a980              if (temp1_1 != 1)
1004a98d                  ebx = arg1
1004a980              else
1004a982                  ebx = arg1
1004a988                  ebx[1] &= ebx_5
1004a932          else
1004a944              uint32_t ebx_2 = not.d(0x80000000 u>> edi_9.b)
1004a94d              eax_8[var_8_1 + 0x11] &= ebx_2
1004a951              char temp2_1 = *(eax_8 + edi_9 + 4)
1004a951              *(eax_8 + edi_9 + 4) -= 1
1004a951              
1004a953              if (temp2_1 != 1)
1004a98d                  ebx = arg1
1004a953              else
1004a955                  ebx = arg1
1004a95b                  *ebx &= ebx_2
1004a95b      
1004a99a      *(edx_8[2] + 4) = edx_8[1]
1004a9a3      *(edx_8[1] + 8) = edx_8[2]
1004a9a3      
1004a9a6      if (ecx_23 != 0)
1004a9b3          void* ecx_35 = &eax_8[edx_1 * 0x81 + 0x51 + esi_5 * 2]
1004a9b6          edx_8[1] = eax_8[edx_1 * 0x81 + 0x51 + esi_5 * 2 + 1]
1004a9b9          edx_8[2] = ecx_35
1004a9bc          *(ecx_35 + 4) = edx_8
1004a9c2          *(edx_8[1] + 8) = edx_8
1004a9c2          
1004a9cb          if (edx_8[1] == edx_8[2])
1004a9cd              int32_t ecx_37
1004a9cd              ecx_37.b = *(esi_5 + eax_8 + 4)
1004a9d4              arg1:3.b = ecx_37.b
1004a9d4              
1004a9d7              if (esi_5 s>= 0x20)
1004aa02                  ecx_37.b += 1
1004aa08                  *(esi_5 + eax_8 + 4) = ecx_37.b
1004aa08                  
1004aa0c                  if (arg1:3.b == 0)
1004aa18                      ebx[1] |= 0x80000000 u>> (esi_5.b - 0x20)
1004aa18                  
1004aa2f                  eax_8[var_8_1 + 0x31] |= 0x80000000 u>> (esi_5.b - 0x20)
1004a9d7              else
1004a9d9                  ecx_37.b += 1
1004a9df                  *(esi_5 + eax_8 + 4) = ecx_37.b
1004a9df                  
1004a9e3                  if (arg1:3.b == 0)
1004a9ee                      *ebx |= 0x80000000 u>> esi_5.b
1004a9ee                  
1004a9fc                  eax_8[var_8_1 + 0x11] |= 0x80000000 u>> esi_5.b
1004a9fc          
1004a9cb          goto label_1004aa34
1004a9cb  
1004aa46  void** edx_9 = edx_8 + ecx_23
1004aa4b  *edx_9 = ecx_1 + 1
1004aa4d  *(edx_9 + ecx_1 - 4) = ecx_1 + 1
1004aa54  int32_t ecx_45 = eax_8[edx_1 * 0x81 + 0x51]
1004aa5b  eax_8[edx_1 * 0x81 + 0x51] = ecx_45 + 1
1004aa5b  
1004aa70  if (ecx_45 == 0 && ebx == data_10069efc && var_8_1 == data_10069ef4)
1004aa72      data_10069efc = 0
1004aa72  
1004aa7c  *eax_8 = var_8_1
1004aa7e  return &edx_9[1]


1004aa86    int32_t* sub_1004aa86()

1004aa86  int32_t eax_3 = data_10069f00
1004aa8b  int32_t ecx = data_10069ee4
1004aa8b  
1004aa97  if (eax_3 != ecx)
1004aa97      goto label_1004aadf
1004aa97  
1004aaae  int32_t eax_2 = HeapReAlloc(hHeap: g_heapHandle, dwFlags: HEAP_NONE, 
1004aaae      lpMem: data_10069f04, dwBytes: (ecx * 5 + 0x50) << 2)
1004aaae  
1004aab6  if (eax_2 != 0)
1004aab8      data_10069ee4 += 0x10
1004aabf      data_10069f04 = eax_2
1004aac4      eax_3 = data_10069f00
1004aadf      label_1004aadf:
1004aadf      int32_t* result = data_10069f04 + eax_3 * 0x14
1004aae2      int32_t eax_5 =
1004aae2          HeapAlloc(hHeap: g_heapHandle, dwFlags: HEAP_ZERO_MEMORY, dwBytes: 0x41c4)
1004aaea      result[4] = eax_5
1004aaea      
1004aaed      if (eax_5 != 0)
1004aafc          int32_t eax_6 = VirtualAlloc(lpAddress: nullptr, dwSize: 0x100000, 
1004aafc              flAllocationType: MEM_RESERVE, flProtect: PAGE_READWRITE)
1004ab04          result[3] = eax_6
1004ab04          
1004ab07          if (eax_6 != 0)
1004ab1d              result[2] = 0xffffffff
1004ab21              *result = 0
1004ab23              result[1] = 0
1004ab26              data_10069f00 += 1
1004ab2f              *result[4] = 0xffffffff
1004ab32              return result
1004ab32          
1004ab13          HeapFree(hHeap: g_heapHandle, dwFlags: HEAP_NONE, lpMem: result[4])
1004ab13  
1004ab19  return nullptr


1004ab37    int32_t sub_1004ab37(void* arg1)

1004ab3a  int32_t ecx
1004ab3a  int32_t var_8 = ecx
1004ab41  void* esi = *(arg1 + 0x10)
1004ab44  int32_t i = *(arg1 + 8)
1004ab47  int32_t result = 0
1004ab47  
1004ab4b  while (i s>= 0)
1004ab4d      i <<= 1
1004ab4f      result += 1
1004ab4f  
1004ab5c  int32_t i_2 = 0x3f
1004ab5d  void* eax_2 = result * 0x204 + esi + 0x144
1004ab64  void* var_8_1 = eax_2
1004ab71  int32_t i_1
1004ab71  
1004ab71  do
1004ab67      *(eax_2 + 8) = eax_2
1004ab6a      *(eax_2 + 4) = eax_2
1004ab6d      eax_2 += 8
1004ab70      i_1 = i_2
1004ab70      i_2 -= 1
1004ab71  while (i_1 != 1)
1004ab7a  void* lpAddress = (result << 0xf) + *(arg1 + 0xc)
1004ab7a  
1004ab90  if (VirtualAlloc(lpAddress, dwSize: 0x8000, flAllocationType: MEM_COMMIT, 
1004ab90          flProtect: PAGE_READWRITE) == 0)
1004ab92      return 0xffffffff
1004ab92  
1004aba2  if (lpAddress u<= lpAddress + 0x7000)
1004aba4      void** eax_5 = lpAddress + 0x10
1004aba4      
1004abde      do
1004aba7          eax_5[-2] = 0xffffffff
1004abab          eax_5[0x3fb] = 0xffffffff
1004abb8          eax_5[-1] = 0xff0
1004abbf          *eax_5 = &eax_5[0x3ff]
1004abc7          eax_5[1] = &eax_5[-0x401]
1004abca          eax_5[0x3fa] = 0xff0
1004abd4          eax_5 = &eax_5[0x400]
1004abde      while (&eax_5[-4] u<= lpAddress + 0x7000)
1004abde  
1004abee  *(var_8_1 + 0x1fc) = lpAddress + 0xc
1004abf1  *(lpAddress + 0x14) = var_8_1 + 0x1f8
1004abf7  *(var_8_1 + 0x200) = lpAddress + 0x700c
1004abfa  *(lpAddress + 0x7010) = var_8_1 + 0x1f8
1004abfd  *(esi + (result << 2) + 0x44) = 0
1004ac02  *(esi + (result << 2) + 0xc4) = 1
1004ac09  void* eax_7
1004ac09  eax_7.b = *(esi + 0x43)
1004ac0c  void* ecx_6
1004ac0c  ecx_6.b = eax_7.b
1004ac0e  ecx_6.b += 1
1004ac15  *(esi + 0x43) = ecx_6.b
1004ac15  
1004ac18  if (eax_7.b == 0)
1004ac1a      *(arg1 + 4) |= 1
1004ac1a  
1004ac28  *(arg1 + 8) &= not.d(0x80000000 u>> result.b)
1004ac2b  return result


1004ac32    int32_t ArenaResizeInPlace(int32_t* arg1, void** arg2, void* arg3)

1004ac4c  int32_t eax_1 = arg1[4]
1004ac4f  void* esi_1 = (arg3 + 0x17) & 0xfffffff0
1004ac52  uint32_t edx_2 = (arg2 - arg1[3]) u>> 0xf
1004ac6a  void* ecx_5 = arg2[-1] - 1
1004ac70  void* ebx = *(ecx_5 + arg2 - 4)
1004ac74  void* edi_1 = ecx_5 + arg2 - 4
1004ac74  
1004ac7b  if (esi_1 s> ecx_5)
1004ac8e      if ((ebx.b & 1) != 0 || esi_1 s> ebx + ecx_5)
1004add9          return 0
1004add9      
1004ac9a      int32_t ecx_8 = (ebx s>> 4) - 1
1004ac9e      int32_t var_c_1 = ecx_8
1004ac9e      
1004aca1      if (ecx_8 u> 0x3f)
1004aca5          ecx_8 = 0x3f
1004aca6          var_c_1 = 0x3f
1004aca6      
1004acaf      if (*(edi_1 + 4) == *(edi_1 + 8))
1004acb4          if (ecx_8 u>= 0x20)
1004ace6              uint32_t ebx_6 = not.d(0x80000000 u>> (ecx_8.b - 0x20))
1004ace8              *(eax_1 + (edx_2 << 2) + 0xc4) &= ebx_6
1004acef              char temp0_1 = *(var_c_1 + eax_1 + 4)
1004acef              *(var_c_1 + eax_1 + 4) -= 1
1004acef              
1004acf1              if (temp0_1 == 1)
1004acf6                  arg1[1] &= ebx_6
1004acb4          else
1004acc4              uint32_t ebx_4 = not.d(0x80000000 u>> ecx_8.b)
1004acc6              *(eax_1 + (edx_2 << 2) + 0x44) &= ebx_4
1004acca              char temp1_1 = *(var_c_1 + eax_1 + 4)
1004acca              *(var_c_1 + eax_1 + 4) -= 1
1004acca              
1004accc              if (temp1_1 == 1)
1004acd1                  *arg1 &= ebx_4
1004acd1      
1004acff      *(*(edi_1 + 8) + 4) = *(edi_1 + 4)
1004ad08      *(*(edi_1 + 4) + 8) = *(edi_1 + 8)
1004ad10      void* var_8_1 = ebx + ecx_5 - esi_1
1004ad17      void** edx_4
1004ad17      
1004ad17      if (var_8_1 s<= 0)
1004adc7          edx_4 = arg2
1004ad17      else
1004ad26          int32_t edi_5 = (var_8_1 s>> 4) - 1
1004ad26          
1004ad2e          if (edi_5 u> 0x3f)
1004ad32              edi_5 = 0x3f
1004ad32          
1004ad36          void* ebx_9 = edx_2 * 0x204 + eax_1 + 0x144 + (edi_5 << 3)
1004ad3f          *(arg2 + esi_1) = *(ebx_9 + 4)
1004ad45          *(arg2 + esi_1 + 4) = ebx_9
1004ad48          *(ebx_9 + 4) = arg2 + esi_1 - 4
1004ad4e          *(*(arg2 + esi_1) + 8) = arg2 + esi_1 - 4
1004ad4e          
1004ad57          if (*(arg2 + esi_1) == *(arg2 + esi_1 + 4))
1004ad59              void* ecx_21
1004ad59              ecx_21.b = *(edi_5 + eax_1 + 4)
1004ad60              arg3:3.b = ecx_21.b
1004ad63              ecx_21.b += 1
1004ad65              *(edi_5 + eax_1 + 4) = ecx_21.b
1004ad69              int32_t* eax_2
1004ad69              char ecx_24
1004ad69              
1004ad69              if (edi_5 u>= 0x20)
1004ad90                  if (arg3:3.b == 0)
1004ad9f                      arg1[1] |= 0x80000000 u>> (edi_5.b - 0x20)
1004ad9f                  
1004ada2                  eax_2 = eax_1 + (edx_2 << 2) + 0xc4
1004ada9                  ecx_24 = edi_5.b - 0x20
1004ad69              else
1004ad6f                  if (arg3:3.b == 0)
1004ad7d                      *arg1 |= 0x80000000 u>> edi_5.b
1004ad7d                  
1004ad7f                  eax_2 = eax_1 + (edx_2 << 2) + 0x44
1004ad88                  ecx_24 = edi_5.b
1004ad88              
1004adb3              *eax_2 |= 0x80000000 u>> ecx_24
1004adb3          
1004adb5          edx_4 = arg2
1004adbf          *(edx_4 + esi_1 - 4) = var_8_1
1004adc1          *(var_8_1 + edx_4 + esi_1 - 4 - 4) = var_8_1
1004adc1      
1004adcd      edx_4[-1] = esi_1 + 1
1004add0      *(edx_4 + esi_1 - 8) = esi_1 + 1
1004ac7b  else if (esi_1 s< ecx_5)
1004ade9      arg3 = ecx_5 - esi_1
1004adef      arg2[-1] = esi_1 + 1
1004adf2      void** ebx_17 = arg2 + esi_1 - 4
1004adff      int32_t esi_4 = (arg3 s>> 4) - 1
1004ae00      ebx_17[-1] = esi_1 + 1
1004ae00      
1004ae06      if (esi_4 u> 0x3f)
1004ae0a          esi_4 = 0x3f
1004ae0a      
1004ae0f      if ((ebx.b & 1) == 0)
1004ae1b          int32_t esi_7 = (ebx s>> 4) - 1
1004ae1b          
1004ae1f          if (esi_7 u> 0x3f)
1004ae23              esi_7 = 0x3f
1004ae23          
1004ae2a          if (*(edi_1 + 4) == *(edi_1 + 8))
1004ae2f              if (esi_7 u>= 0x20)
1004ae5d                  uint32_t ebx_21 = not.d(0x80000000 u>> (esi_7.b - 0x20))
1004ae5f                  *(eax_1 + (edx_2 << 2) + 0xc4) &= ebx_21
1004ae66                  char temp2_1 = *(esi_7 + eax_1 + 4)
1004ae66                  *(esi_7 + eax_1 + 4) -= 1
1004ae66                  
1004ae68                  if (temp2_1 == 1)
1004ae6d                      arg1[1] &= ebx_21
1004ae2f              else
1004ae3e                  uint32_t ebx_19 = not.d(0x80000000 u>> esi_7.b)
1004ae40                  *(eax_1 + (edx_2 << 2) + 0x44) &= ebx_19
1004ae44                  char temp3_1 = *(esi_7 + eax_1 + 4)
1004ae44                  *(esi_7 + eax_1 + 4) -= 1
1004ae44                  
1004ae46                  if (temp3_1 == 1)
1004ae4b                      *arg1 &= ebx_19
1004ae4b          
1004ae79          *(*(edi_1 + 8) + 4) = *(edi_1 + 4)
1004ae82          *(*(edi_1 + 4) + 8) = *(edi_1 + 8)
1004ae88          void* esi_12 = arg3 + ebx
1004ae8b          arg3 = esi_12
1004ae91          esi_4 = (esi_12 s>> 4) - 1
1004ae91          
1004ae95          if (esi_4 u> 0x3f)
1004ae99              esi_4 = 0x3f
1004ae99      
1004aea1      void* ecx_38 = edx_2 * 0x204 + eax_1 + 0x144 + (esi_4 << 3)
1004aea4      ebx_17[1] = *(edx_2 * 0x204 + eax_1 + 0x144 + (esi_4 << 3) + 4)
1004aea7      ebx_17[2] = ecx_38
1004aeaa      *(ecx_38 + 4) = ebx_17
1004aeb0      *(ebx_17[1] + 8) = ebx_17
1004aeb0      
1004aeb9      if (ebx_17[1] == ebx_17[2])
1004aebb          int32_t ecx_40
1004aebb          ecx_40.b = *(esi_4 + eax_1 + 4)
1004aec2          arg2:3.b = ecx_40.b
1004aec5          ecx_40.b += 1
1004aec7          *(esi_4 + eax_1 + 4) = ecx_40.b
1004aecb          int32_t* eax_6
1004aecb          char ecx_43
1004aecb          
1004aecb          if (esi_4 u>= 0x20)
1004aef2              if (arg2:3.b == 0)
1004af01                  arg1[1] |= 0x80000000 u>> (esi_4.b - 0x20)
1004af01              
1004af04              eax_6 = eax_1 + (edx_2 << 2) + 0xc4
1004af0b              ecx_43 = esi_4.b - 0x20
1004aecb          else
1004aed1              if (arg2:3.b == 0)
1004aedf                  *arg1 |= 0x80000000 u>> esi_4.b
1004aedf              
1004aee1              eax_6 = eax_1 + (edx_2 << 2) + 0x44
1004aeea              ecx_43 = esi_4.b
1004aeea          
1004af15          *eax_6 |= 0x80000000 u>> ecx_43
1004af15      
1004af1a      *ebx_17 = arg3
1004af1c      *(arg3 + ebx_17 - 4) = arg3
1004af1c  
1004af22  return 1


1004af28    char* sub_1004af28()

1004af28  char* result = data_10069efc
1004af28  
1004af2f  if (result != 0)
1004af4c      VirtualFree(lpAddress: (data_10069ef4 << 0xf) + *(result + 0xc), dwSize: 0x8000, 
1004af4c          dwFreeType: MEM_DECOMMIT)
1004af58      void* eax = data_10069efc
1004af64      *(eax + 8) |= 0x80000000 u>> (data_10069ef4).b
1004af75      *(*(data_10069efc + 0x10) + (data_10069ef4 << 2) + 0xc4) = 0
1004af82      void* eax_4 = *(data_10069efc + 0x10)
1004af85      *(eax_4 + 0x43) -= 1
1004af88      result = data_10069efc
1004af88      
1004af94      if (*(*(result + 0x10) + 0x43) == 0)
1004af96          *(result + 4) &= 0xfffffffe
1004af9a          result = data_10069efc
1004af9a      
1004afac      if (*(result + 8) == 0xffffffff && data_10069f00 s> 1)
1004afb9          HeapFree(hHeap: g_heapHandle, dwFlags: HEAP_NONE, lpMem: *(result + 0x10))
1004afd2          char* eax_8 = data_10069efc
1004afe3          result = sub_100452f0(eax_8, &eax_8[0x14], 
1004afe3              data_10069f00 * 0x14 - eax_8 + data_10069f04 - 0x14)
1004afeb          data_10069f00 -= 1
1004afeb      
1004aff1      data_10069efc = 0
1004aff1  
1004aff8  return result


1004aff9    int32_t sub_1004aff9()

1004b01f  if (IsBadWritePtr(lp: data_10069f04, ucb: data_10069f00 * 0x14) != 0)
1004b021      return 0xffffffff
1004b021  
1004b029  void* ebx_1 = data_10069f04
1004b037  void* var_3c_1 = ebx_1
1004b03a  int32_t var_24_1 = 0
1004b03a  
1004b03d  if (data_10069f00 s> 0)
1004b047      while (true)
1004b047          void* lp_1 = *(ebx_1 + 0x10)
1004b047          
1004b058          if (IsBadWritePtr(lp: lp_1, ucb: 0x41c4) != 0)
1004b2eb              return 0xfffffffe
1004b2eb          
1004b061          int32_t var_30_1 = 0
1004b064          void* lp = *(ebx_1 + 0xc)
1004b06d          void* var_2c_1 = lp_1 + 0x144
1004b073          int32_t* esi_1 = lp_1 + 0xc4
1004b079          int32_t var_18_1 = *(ebx_1 + 8)
1004b07c          int32_t var_1c_1 = 0
1004b07f          int32_t var_34_1 = 0
1004b082          int32_t* var_40_1 = esi_1
1004b082          
1004b08b          while (true)
1004b08b              int32_t var_28_1 = 0
1004b08e              int32_t var_20_1 = 0
1004b091              int32_t var_8_1 = 0
1004b0a0              int32_t s[0x40]
1004b0a0              __builtin_memset(&s, c: 0, n: 0x100)
1004b0a0              
1004b0a2              if (var_18_1 s>= 0)
1004b0b8                  if (IsBadWritePtr(lp, ucb: 0x8000) != 0)
1004b2ef                      return 0xfffffffc
1004b2ef                  
1004b0c1                  int32_t ebx_2 = 0
1004b0c3                  int32_t* edx_1 = lp + 0xffc
1004b0c3                  
1004b0d0                  while (true)
1004b0d0                      void* esi_2 = &edx_1[-0x3fc]
1004b0d0                      
1004b0df                      if (edx_1[-0x3fd] != 0xffffffff || *edx_1 != 0xffffffff)
1004b2ff                          return 0xfffffffb
1004b2ff                      
1004b0e5                      while (true)
1004b0e5                          void* ecx_1 = *esi_2
1004b0ea                          void* edi_1 = ecx_1
1004b0ea                          
1004b0ec                          if ((ecx_1.b & 1) == 0)
1004b105                              int32_t eax_13 = (ecx_1 s>> 4) - 1
1004b105                              
1004b109                              if (eax_13 s> 0x3f)
1004b10d                                  eax_13 = 0x3f
1004b10d                              
1004b10e                              s[eax_13] += 1
1004b0ec                          else
1004b0ee                              ecx_1 -= 1
1004b0ee                              
1004b0f5                              if (ecx_1 s> 0x400)
1004b2f3                                  return 0xfffffffa
1004b2f3                              
1004b0fb                              var_8_1 += 1
1004b0fb                          
1004b134                          if (ecx_1 s< 0x10 || (ecx_1.b & 0xf) != 0 || ecx_1 s> 0xff0)
1004b2fb                              return 0xfffffff9
1004b2fb                          
1004b141                          if (*(ecx_1 + esi_2 - 4) == edi_1)
1004b147                              esi_2 += ecx_1
1004b147                              
1004b14b                              if (esi_2 u< edx_1)
1004b14b                                  continue
1004b14b                              else if (esi_2 == edx_1)
1004b14d                                  break
1004b14d                          
1004b2f7                          return 0xfffffff8
1004b2f7                      
1004b153                      edx_1 = &edx_1[0x400]
1004b159                      ebx_2 += 1
1004b159                      
1004b15d                      if (ebx_2 s>= 8)
1004b15d                          break
1004b15d                  
1004b163                  int32_t* esi_3 = var_2c_1
1004b163                  
1004b16b                  if (*esi_3 != var_8_1)
1004b303                      return 0xfffffff7
1004b303                  
1004b171                  int32_t i = 0
1004b17b                  int32_t (* var_8_2)[0x40] = &s
1004b17b                  
1004b276                  do
1004b17e                      int32_t* eax_17 = esi_3[1]
1004b181                      int32_t j = 0
1004b188                      int32_t* edx_2 = esi_3
1004b18c                      int32_t* var_38_1 = edx_2
1004b18c                      
1004b18f                      if (eax_17 != esi_3)
1004b19d                          while (j != *var_8_2)
1004b1b2                              if (eax_17 u< lp || eax_17 u>= lp + 0x8000)
1004b313                                  return 0xfffffff6
1004b313                              
1004b1ba                              int32_t* ecx_5
1004b1ba                              ecx_5.w = eax_17.w & 0xf000
1004b1bf                              void* ecx_6 = &ecx_5[3]
1004b1c2                              void* edx_3 = ecx_6 + 0xff0
1004b1c2                              
1004b1ca                              if (ecx_6 == edx_3)
1004b307                                  return 0xfffffff5
1004b307                              
1004b1d2                              while (ecx_6 != eax_17)
1004b1d9                                  ecx_6 += *ecx_6 & 0xfffffffe
1004b1d9                                  
1004b1dd                                  if (ecx_6 == edx_3)
1004b1dd                                      break
1004b1dd                              
1004b1e1                              if (ecx_6 == edx_3)
1004b307                                  return 0xfffffff5
1004b307                              
1004b1ec                              int32_t ecx_9 = (*eax_17 s>> 4) - 1
1004b1ec                              
1004b1f0                              if (ecx_9 s> 0x3f)
1004b1f4                                  ecx_9 = 0x3f
1004b1f4                              
1004b1f8                              if (ecx_9 != i)
1004b30b                                  return 0xfffffff4
1004b30b                              
1004b204                              if (eax_17[2] != var_38_1)
1004b30f                                  return 0xfffffff3
1004b30f                              
1004b20a                              j += 1
1004b20d                              edx_2 = eax_17
1004b20f                              eax_17 = eax_17[1]
1004b212                              var_38_1 = edx_2
1004b212                              
1004b217                              if (eax_17 == esi_3)
1004b217                                  break
1004b217                          
1004b221                          if (j != 0)
1004b229                              if (i s>= 0x20)
1004b242                                  uint32_t eax_19 = 0x80000000 u>> (i.b - 0x20)
1004b244                                  var_20_1 |= eax_19
1004b247                                  var_1c_1 |= eax_19
1004b229                              else
1004b230                                  uint32_t eax_18 = 0x80000000 u>> i.b
1004b232                                  var_28_1 |= eax_18
1004b235                                  var_30_1 |= eax_18
1004b235                      
1004b25b                      if (edx_2[1] != esi_3 || j != *var_8_2)
1004b31b                          return 0xfffffff2
1004b31b                      
1004b263                      if (esi_3[2] != edx_2)
1004b317                          return 0xfffffff1
1004b317                      
1004b269                      i += 1
1004b26c                      var_8_2 = &(*var_8_2)[1]
1004b274                      esi_3 = &esi_3[2]
1004b276                  while (i s< 0x40)
1004b276                  
1004b27c                  esi_1 = var_40_1
1004b27f                  ebx_1 = var_3c_1
1004b27f              
1004b293              if (var_28_1 != esi_1[-0x20] || var_20_1 != *esi_1)
1004b31f                  return 0xfffffff0
1004b31f              
1004b299              lp += 0x8000
1004b2a0              var_2c_1 += 0x204
1004b2a7              var_18_1 <<= 1
1004b2aa              var_34_1 += 1
1004b2ad              esi_1 = &esi_1[1]
1004b2b4              var_40_1 = esi_1
1004b2b4              
1004b2b7              if (var_34_1 s>= 0x20)
1004b2b7                  break
1004b2b7          
1004b2ca          if (var_30_1 != *ebx_1 || var_1c_1 != *(ebx_1 + 4))
1004b323              return 0xffffffef
1004b323          
1004b2cc          ebx_1 += 0x14
1004b2cf          var_24_1 += 1
1004b2d5          var_3c_1 = ebx_1
1004b2d5          
1004b2de          if (var_24_1 s>= data_10069f00)
1004b2de              break
1004b2de  
1004b2e4  return 0


1004b328    void* sub_1004b328(int32_t* arg1)

1004b32c  void* eax = sub_100493a7()
1004b337  void* eax_1
1004b337  void* result_1
1004b337  
1004b337  if (*(eax + 0x38) == 0)
1004b33b      eax_1 = ArenaAlloc(size: 0x1a)
1004b340      *(eax + 0x38) = eax_1
1004b346      result_1 = &data_10063460
1004b346  
1004b34b  if (*(eax + 0x38) != 0 || eax_1 != 0)
1004b34d      result_1 = *(eax + 0x38)
1004b34d  
1004b354  void* result = result_1
1004b356  int32_t ecx_2 = arg1[6]
1004b35c  int32_t ecx_3 = arg1[4]
1004b35c  
1004b37c  for (int32_t i = 0; i s< 3; )
1004b364      char edx_1 = (*"SunMonTueWedThuFriSat")[ecx_2 * 3 + i]
1004b36b      i += 1
1004b36c      *result_1 = edx_1
1004b375      *(result_1 + 4) = *(i + ecx_3 * 3 + 0x10058ffb)
1004b378      result_1 += 1
1004b378  
1004b37e  *result_1 = 0x20
1004b384  *(result_1 + 4) = 0x20
1004b38c  void* eax_4 = sub_1004b3f2(result_1 + 5, arg1[3])
1004b391  *eax_4 = 0x20
1004b399  void* eax_6 = sub_1004b3f2(eax_4 + 1, arg1[2])
1004b39e  *eax_6 = 0x3a
1004b3a6  void* eax_8 = sub_1004b3f2(eax_6 + 1, arg1[1])
1004b3ab  *eax_8 = 0x3a
1004b3b2  void* eax_10 = sub_1004b3f2(eax_8 + 1, *arg1)
1004b3bc  *eax_10 = 0x20
1004b3dc  void* eax_19 = sub_1004b3f2(
1004b3dc      sub_1004b3f2(eax_10 + 1, divs.dp.d(sx.q(arg1[5]), 0x64) + 0x13), 
1004b3dc      mods.dp.d(sx.q(arg1[5]), 0x64))
1004b3e4  *eax_19 = 0xa
1004b3e7  *(eax_19 + 1) = 0
1004b3f1  return result


1004b3f2    void* sub_1004b3f2(char* arg1, int32_t arg2)

1004b406  *arg1 = (divs.dp.d(sx.q(arg2), 0xa)).b + 0x30
1004b417  arg1[1] = (mods.dp.d(sx.q(arg2), 0xa)).b + 0x30
1004b419  return &arg1[2]


1004b41a    void* sub_1004b41a(int32_t* arg1)

1004b41e  int32_t* esi = arg1
1004b41e  
1004b424  if (*esi s< 0)
1004b426      return nullptr
1004b426  
1004b42d  sub_1004fb64()
1004b432  int32_t eax_1 = *esi
1004b440  void* result
1004b440  
1004b440  if (eax_1 s<= 0x3f480 || eax_1 s>= 0x7ffc0b7f)
1004b499      result = sub_1005013c(esi)
1004b4a2      bool cond:0_1 = sub_1004fe2f(result) == 0
1004b4a4      int32_t eax_9 = *result
1004b4a4      
1004b4a7      if (not(cond:0_1))
1004b4a9          eax_9 -= time_fallback_offset
1004b4a9      
1004b4af      int32_t* eax_10 = eax_9 - time_offset_base
1004b4b8      arg1 = eax_10
1004b4bf      int32_t temp1_1 = mods.dp.d(sx.q(eax_10), 0x3c)
1004b4c3      *result = temp1_1
1004b4c3      
1004b4c5      if (temp1_1 s< 0)
1004b4c9          *result = temp1_1 + 0x3c
1004b4cb          arg1 -= 0x3c
1004b4cb      
1004b4d6      int32_t* eax_16 = divs.dp.d(sx.q(arg1), 0x3c) + *(result + 4)
1004b4d9      arg1 = eax_16
1004b4dd      int32_t temp1_2 = mods.dp.d(sx.q(eax_16), 0x3c)
1004b4e2      *(result + 4) = temp1_2
1004b4e2      
1004b4e5      if (temp1_2 s< 0)
1004b4ea          *(result + 4) = temp1_2 + 0x3c
1004b4ed          arg1 -= 0x3c
1004b4ed      
1004b4f9      int32_t* eax_22 = divs.dp.d(sx.q(arg1), 0x3c) + *(result + 8)
1004b4fc      arg1 = eax_22
1004b500      int32_t temp1_3 = mods.dp.d(sx.q(eax_22), 0x18)
1004b504      *(result + 8) = temp1_3
1004b504      
1004b507      if (temp1_3 s< 0)
1004b50b          *(result + 8) = temp1_3 + 0x18
1004b50e          arg1 -= 0x18
1004b50e      
1004b518      int32_t temp0_6 = divs.dp.d(sx.q(arg1), 0x18)
1004b51e      arg1 = temp0_6
1004b51e      
1004b521      if (temp0_6 s> 0)
1004b52e          *(result + 0x18) = mods.dp.d(sx.q(*(result + 0x18) + temp0_6), 7)
1004b534          *(result + 0xc) += arg1
1004b53a          *(result + 0x1c) += arg1
1004b521      else if (temp0_6 s< 0)
1004b551          *(result + 0x18) = mods.dp.d(sx.q(*(result + 0x18) + temp0_6 + 7), 7)
1004b557          *(result + 0xc) += arg1
1004b55a          int32_t eax_37 = *(result + 0xc)
1004b55a          
1004b55f          if (eax_37 s> 0)
1004b53a              *(result + 0x1c) += arg1
1004b55f          else
1004b564              *(result + 0x14) -= 1
1004b567              *(result + 0xc) = eax_37 + 0x1f
1004b56a              *(result + 0x1c) = 0x16c
1004b571              *(result + 0x10) = 0xb
1004b440  else
1004b448      arg1 = eax_1 - time_offset_base
1004b45c      result = sub_1005013c(&arg1)
1004b45c      
1004b45e      if (time_fallback_enabled != 0 && sub_1004fe2f(result) != 0)
1004b478          arg1 -= time_fallback_offset
1004b484          result = sub_1005013c(&arg1)
1004b487          *(result + 0x20) = 1
1004b487  
1004b53d  return result

1004b57a                                                                                cc cc cc cc cc cc                            ......

1004b580    int32_t __fastcall __trandisp1(int32_t arg1, void* arg2, void* arg3 @ ebp, long double arg4 @ st0)

1004b584  int16_t ebx
1004b584  
1004b584  if (*(arg2 + 0xe) != 5)
1004b597      ebx = 0x133f
1004b584  else
1004b58d      ebx:1.b = (*(arg3 - 0xa4)):1.b | 2
1004b590      ebx:1.b &= 0xfe
1004b593      ebx.b = 0x3f
1004b593  
1004b59b  *(arg3 - 0xa2) = ebx
1004b5a2  int16_t x87control
1004b5a2  int16_t x87status
1004b5a2  x87control, x87status = __fldcw_memmem16(*(arg3 - 0xa2))
1004b5ad  bool c0
1004b5ad  bool c1
1004b5ad  bool c2
1004b5ad  bool c3
1004b5ad  c0, c1, c2, c3 = __fxam(arg4)
1004b5af  *(arg3 - 0x94) = arg2
1004b5b6  *(arg3 - 0xa0) =
1004b5b6      (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa | (c3 ? 1 : 0) << 0xe
1004b5bc  *(arg3 - 0x90) = 0
1004b5c4  arg1.b = *(arg3 - 0x9f)
1004b5ca  arg1.b <<= 1
1004b5cc  arg1.b s>>= 1
1004b5ce  arg1.b = rol.b(arg1.b, 1)
1004b5d0  int32_t eax
1004b5d0  eax.b = arg1.b
1004b5d2  eax.b &= 0xf
1004b5d4  eax.b = *(&data_100611dc + eax)
1004b5e5  jump(*(arg2 + sx.d(eax.b) + 0x10))

1004b5e7                       80 7a 0e 05 75 11 66 8b 9d 5c ff ff ff 80 cf 02 80 e7 fe b3 3f eb 04 66 bb         .z..u.f..\..........?..f.
1004b600  3f 13 66 89 9d 5e ff ff ff d9 ad 5e ff ff ff bb                                                  ?.f..^.....^....

1004b610  void* data_1004b610 = data_100611dc

1004b614                                                              d9 e5 89 95 6c ff ff ff 9b dd bd 60                      ....l......`
1004b620  ff ff ff c6 85 70 ff ff ff 00 d9 c9 8a 8d 61 ff ff ff d9 e5 9b dd bd 60 ff ff ff d9 c9 8a ad 61  .....p........a........`.......a
1004b640  ff ff ff d0 e5 d0 fd d0 c5 8a c5 24 0f d7 8a e0 d0 e1 d0 f9 d0 c1 8a c1 24 0f d7 d0 e4 d0 e4 0a  ...........$............$.......
1004b660  c4 0f be c0 81 e1 04 04 00 00 8b da 03 d8 83 c3 10 ff 23 e8 c1 00 00 00 d9 c9 dd d8 c3 e8 b7 00  ..................#.............
1004b680  00 00 eb f6 dd d8 dd d8 d9 ee c3 dd d8 dd d8 d9 e8 c3 db bd 62 ff ff ff db ad 62 ff ff ff f6 85  ....................b.....b.....
1004b6a0  69 ff ff ff 40 74 08 c6 85 70 ff ff ff 07 c3 c6 85 70 ff ff ff 01 dc 05                          i...@t...p.......p......

1004b6b8  void* data_1004b6b8 = 0x100611d4

1004b6bc                                                                                      c3 d9 c9 db                              ....
1004b6c0  bd 62 ff ff ff db ad 62 ff ff ff f6 85 69 ff ff ff 40 74 09 c6 85 70 ff ff ff 07 eb 07 c6 85 70  .b.....b.....i...@t...p........p
1004b6e0  ff ff ff 01 de c1 c3 db bd 62 ff ff ff db ad 62 ff ff ff f6 85 69 ff ff ff 40 74 20 d9 c9 db bd  .........b.....b.....i...@t ....
1004b700  62 ff ff ff db ad 62 ff ff ff f6 85 69 ff ff ff 40 74 09 c6 85 70 ff ff ff 07 eb 07 c6 85 70 ff  b.....b.....i...@t...p........p.
1004b720  ff ff 01 de c1 c3 dd d8 dd d8 db 2d                                                              ...........-

1004b72c  void* data_1004b72c = data_100611c0

1004b730                                                  80 bd 70 ff ff ff 00 7f 07                                       ..p......

1004b739    int32_t sub_1004b739(void* arg1 @ ebp)

1004b739  *(arg1 - 0x90) = 1


1004b743    void __fastcall sub_1004b743(char arg1, long double arg2 @ st0) __pure

1004b749  return 

1004b74a                                cc cc cc cc cc cc                                                            ......

1004b750    long double __twoToTOS(long double arg1 @ st0)

1004b752  long double result = roundint.t(arg1)
1004b760  __fscale(__f2xm1(fneg(result - arg1)) + float.t(1), result)
1004b764  return result


1004b765    int32_t __load_CW(int32_t arg1)

1004b772  arg1:2.w = (arg1.w & 0x300) | 0x7f
1004b777  int16_t x87control
1004b777  int16_t x87status
1004b777  x87control, x87status = __fldcw_memmem16(arg1:2.w)


1004b77c    void __convention("regparm") __convertTOStoQNaN(int32_t arg1, long double arg2 @ st0) __pure

1004b788  return 


1004b795    long double __fastcall __fload_withFB(int32_t arg1, double* arg2)

1004b7a2  if ((*(arg2 + 4) & 0x7ff00000) != 0x7ff00000)
1004b7a6      return fconvert.t(*arg2)
1004b7a6  
1004b7b2  int32_t var_4 = *(arg2 + 4) | 0x7fff0000
1004b7b9  int32_t ecx = *arg2
1004b7c2  int32_t var_6 = *(arg2 + 4) << 0xb | ecx u>> 0xffffffeb
1004b7d4  *(arg2 + 4)
1004b7d7  return (ecx << 0xb).t


1004b7d8    int32_t __checkTOS_withFB(int32_t arg1) __pure

1004b7dc  int32_t eax = arg1 & 0x7ff00000
1004b7dc  
1004b7e6  if (eax == 0x7ff00000)
1004b7ed      return arg1
1004b7ed  
1004b7e8  return eax


1004b825    void __fastcall __check_overflow_exit(int32_t arg1, int32_t arg2, long double arg3 @ st0)

1004b828  bool c1 = unimplemented  {fst qword [esp], st0}
1004b852  int32_t eax_2
1004b852  int32_t eax_1
1004b852  
1004b852  if ((fconvert.d(arg3):4.d & 0x7ff00000) == 0x7ff00000)
1004b8b9      long double x87_r7_2 = arg3
1004b8b9      arg3 = fconvert.t(-1536.0)
1004b8bb      __fscale(x87_r7_2, arg3)
1004b8c1      long double x87_r7_5 = fabs(arg3)
1004b8c3      long double temp1_1 = fconvert.t(1.7976931348623157e+308)
1004b8c3      x87_r7_5 - temp1_1
1004b8ca      eax_1.w = (x87_r7_5 < temp1_1 ? 1 : 0) << 8
1004b8ca          | (is_unordered.t(x87_r7_5, temp1_1) ? 1 : 0) << 0xa
1004b8ca          | (x87_r7_5 == temp1_1 ? 1 : 0) << 0xe
1004b8cd      eax_2 = 3
1004b8cd      
1004b8d2      if (not(test_bit(eax_1:1.b, 6)) && not(test_bit(eax_1:1.b, 0)))
1004b8d4          arg3 = arg3 * fconvert.t(inf.0)
1004b852  else
1004b854      eax_1.w = __return_addr.w
1004b854      
1004b85c      if (eax_1.w == 0x27f)
1004b889          return 
1004b889      
1004b85e      eax_1.w &= 0x20
1004b862      int16_t x87control_1
1004b862      int16_t x87status_1
1004b862      
1004b862      if (eax_1.w != 0)
1004b885          x87control_1, x87status_1 = __fldcw_memmem16(__return_addr.w)
1004b889          return 
1004b889      
1004b865      bool c0
1004b865      bool c2
1004b865      bool c3
1004b865      eax_1.w =
1004b865          (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa | (c3 ? 1 : 0) << 0xe
1004b867      eax_1.w &= 0x20
1004b867      
1004b86b      if (eax_1.w == 0)
1004b885          x87control_1, x87status_1 = __fldcw_memmem16(__return_addr.w)
1004b889          return 
1004b889      
1004b86d      eax_2 = 8
1004b86d  
1004b875  if (arg2 != 0x1d)
1004b877      __startOneArgErrorHandling(eax_2, arg2, arg3, arg1, __return_addr)
1004b87d      return 
1004b87d  
1004b87e  __startTwoArgErrorHandling(eax_2)

1004b839                                                                             83 ec 08 dd 14 24 8b                           .....$.
1004b840  44 24 04 83 c4 08 25 00 00 f0 7f 74 3d                                                           D$....%....t=
1004b88a                                dd 05                                                                        ..

1004b88c  void* data_1004b88c = 0x1005864c

1004b890                                                  d9 c9 d9 fd dd d9 d9 c0 d9 e1 dc 1d                              ............

1004b89c  void* data_1004b89c = 0x1005863c

1004b8a0  9b df e0 9e b8 04 00 00 00 73 c7 dc 0d 5c 86 05 10 eb bf                                         .........s...\.....
1004b8dc                                                                                      cc cc cc cc                              ....

1004b8e0    long double __convention("regparm") __startTwoArgErrorHandling(int32_t arg1, int32_t arg2, long double arg3 @ st0, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

1004b8e6  int32_t var_24 = arg1
1004b8ec  int32_t var_14 = arg6
1004b8f2  int32_t var_10 = arg7
1004b900  double var_c = fconvert.d(arg3)
1004b903  int32_t ecx
1004b903  int32_t var_20 = ecx
1004b90c  int32_t var_1c = arg4
1004b90f  int32_t var_18 = arg5
1004b91b  int16_t arg_4
1004b91b  sub_10050246(arg2, &var_24, &arg_4)
1004b92c  int16_t x87control_1
1004b92c  int16_t x87status_1
1004b92c  
1004b92c  if (arg_4 != 0x27f)
1004b92e      x87control_1, x87status_1 = __fldcw_memmem16(arg_4)
1004b932  return fconvert.t(var_c)


1004b8f7    long double __convention("regparm") __startOneArgErrorHandling(int32_t arg1, int32_t arg2, long double arg3 @ st0, int32_t arg4, int32_t arg5)

1004b8fd  int32_t var_24 = arg1
1004b900  double var_c = fconvert.d(arg3)
1004b903  int32_t ecx
1004b903  int32_t var_20 = ecx
1004b90c  int32_t var_1c = arg4
1004b90f  int32_t var_18 = arg5
1004b91b  int16_t arg_4
1004b91b  sub_10050246(arg2, &var_24, &arg_4)
1004b92c  int16_t x87control_1
1004b92c  int16_t x87status_1
1004b92c  
1004b92c  if (arg_4 != 0x27f)
1004b92e      x87control_1, x87status_1 = __fldcw_memmem16(arg_4)
1004b932  return fconvert.t(var_c)


1004b933    int32_t sub_1004b933(int32_t arg1) __pure

1004b93a  return arg1 + 0x20


1004b93b    uint32_t sub_1004b93b(uint32_t arg1)

1004b93c  int32_t ebx = 0
1004b93c  
1004b944  if (data_1006343c == 0)
1004b952      if (arg1 s>= 0x41 && arg1 s<= 0x5a)
1004b958          return arg1 + 0x20
1004b958      
1004b9a9      return arg1
1004b9a9  
1004b961  int32_t ecx_1 = InterlockedIncrement(&data_10069f24)
1004b961  
1004b973  if (data_10069f14 != 0)
1004b976      InterlockedDecrement(&data_10069f24)
1004b97a      LockArenaSection(index: 0x13)
1004b97f      ecx_1 = 0x13
1004b982      ebx = 1
1004b982  
1004b983  uint32_t var_10_1 = arg1
1004b987  uint32_t eax_2 = sub_1004b9aa(ecx_1)
1004b987  
1004b993  if (ebx == 0)
1004b9a0      InterlockedDecrement(&data_10069f24)
1004b993  else
1004b997      UnlockArenaSection(index: 0x13)
1004b997  
1004b9a2  return eax_2


1004b9aa    uint32_t __fastcall sub_1004b9aa(int32_t arg1)

1004b9ad  int32_t var_8 = arg1
1004b9b8  uint32_t arg_4
1004b9b8  
1004b9b8  if (data_1006343c == 0)
1004b9ba      uint32_t eax_1 = arg_4
1004b9ba      
1004b9c9      if (eax_1 s>= 0x41 && eax_1 s<= 0x5a)
1004b9cf          return eax_1 + 0x20
1004b9cf      
1004ba74      return eax_1
1004ba74  
1004b9d7  uint32_t ebx_1 = arg_4
1004b9e4  BOOL eax_2
1004b9e4  
1004b9e4  if (ebx_1 s< 0x100)
1004b9ec      int32_t eax
1004b9ec      int32_t edx
1004b9ec      
1004b9ec      if (data_10060bac s<= 1)
1004b9fe          wchar16 (* eax_3)[0x21]
1004b9fe          eax_3.b = (*data_100609a0)[ebx_1].b
1004ba01          eax_2 = eax_3 & 1
1004b9ec      else
1004b9f0          eax_2 = sub_10046f7a(eax, edx, arg1, ebx_1)
1004b9f0  
1004ba05  if (ebx_1 s>= 0x100 || eax_2 != 0)
1004ba13      char eax_5 = (ebx_1 s>> 8).b
1004ba1e      void* eax_6
1004ba1e      
1004ba1e      if ((*(&(*data_100609a0)[zx.d(eax_5)] + 1) & 0x80) == 0)
1004ba2f          arg_4:1.b = 0
1004ba33          arg_4.b = ebx_1.b
1004ba36          eax_6 = 1
1004ba1e      else
1004ba20          arg_4:2.b = 0
1004ba26          arg_4.b = eax_5
1004ba29          arg_4:1.b = ebx_1.b
1004ba2c          eax_6 = 2
1004ba2c      
1004ba4d      int32_t eax_7 =
1004ba4d          LCMapString_Generic(data_1006343c, 0x100, &arg_4, eax_6, &var_8, 3, 0, 1)
1004ba4d      
1004ba57      if (eax_7 != 0)
1004ba5b          if (eax_7 != 1)
1004ba6e              return zx.d(var_8:1.b) << 8 | zx.d(var_8.b)
1004ba6e          
1004ba5d          return zx.d(var_8.b)
1004ba5d  
1004ba07  return ebx_1


1004ba75    int32_t sub_1004ba75()

1004ba75  void* eax_1 = data_100607c4
1004ba75  
1004ba7c  if (eax_1 != 0)
1004ba7e      eax_1()
1004ba7e  
1004ba8a  sub_1004bb99(&data_1005a208, 0x1005a41c)
1004baa1  return sub_1004bb99(&data_1005a000, 0x1005a104)


1004baa2    int32_t sub_1004baa2(uint32_t arg1)

1004bab2  return sub_1004bae2(arg1, 0, 0)


1004bab3    int32_t sub_1004bab3(uint32_t arg1)

1004bac3  return sub_1004bae2(arg1, 1, 0)


1004bac4    int32_t __cexit()

1004bad2  return sub_1004bae2(0, 0, 1)


1004bad3    int32_t __c_exit()

1004bae1  return sub_1004bae2(0, 1, 1)


1004bae2    int32_t sub_1004bae2(uint32_t arg1, int32_t arg2, int32_t arg3)

1004bae3  sub_1004bb87()
1004bae3  
1004baf1  if (data_100634bc == 1)
1004bafe      TerminateProcess(hProcess: GetCurrentProcess(), uExitCode: arg1)
1004bafe      noreturn
1004bafe  
1004bb0e  data_100634b8 = 1
1004bb14  data_100634b4 = arg3.b
1004bb14  
1004bb1a  if (arg2 == 0)
1004bb1c      int32_t eax_2 = data_10069ee0
1004bb1c      
1004bb23      if (eax_2 != 0)
1004bb2c          int32_t* i = data_10069edc - 4
1004bb2c          
1004bb31          if (i u>= eax_2)
1004bb44              do
1004bb33                  int32_t eax_3 = *i
1004bb33                  
1004bb37                  if (eax_3 != 0)
1004bb39                      eax_3()
1004bb39                  
1004bb3b                  i -= 4
1004bb44              while (i u>= data_10069ee0)
1004bb44      
1004bb51      sub_1004bb99(&data_1005a520, 0x1005a728)
1004bb51  
1004bb62  sub_1004bb99(&data_1005a82c, 0x1005a930)
1004bb62  
1004bb6c  if (arg3 != 0)
1004bb74      return sub_1004bb90()
1004bb74  
1004bb79  data_100634bc = 1
1004bb7f  ExitProcess(uExitCode: arg1)
1004bb7f  noreturn

1004bb85                 5f c3                                                                                  _.

1004bb87    int32_t sub_1004bb87()

1004bb8f  return LockArenaSection(index: 0xd)


1004bb90    int32_t sub_1004bb90()

1004bb98  return UnlockArenaSection(index: 0xd)


1004bb99    void sub_1004bb99(int32_t* arg1, int32_t arg2)

1004bba2  for (int32_t* i = arg1; i u< arg2; i = &i[1])
1004bba4      int32_t eax = *i
1004bba4      
1004bba8      if (eax != 0)
1004bbaa          eax()


1004bbb3    int32_t sub_1004bbb3()

1004bbbe  if (data_10069ed8 == 0)
1004bbc0      sub_1004e345()
1004bbc0  
1004bbc5  char* esi = data_100633b4
1004bbcb  int32_t edi = 0
1004bbcb  
1004bbcd  while (true)
1004bbcd      void* eax
1004bbcd      eax.b = *esi
1004bbcd      
1004bbd1      if (eax.b == 0)
1004bbd1          break
1004bbd1      
1004bbd5      if (eax.b != 0x3d)
1004bbd7          edi += 1
1004bbd7      
1004bbdf      esi = esi + StrLen(esi) + 1
1004bbdf  
1004bbf2  void* esi_1 = ArenaAlloc(size: (edi << 2) + 4)
1004bbf7  data_1006349c = esi_1
1004bbf7  
1004bbfd  if (esi_1 == 0)
1004bc01      sub_10045ef6(9)
1004bc01  
1004bc07  char* edi_1 = data_100633b4
1004bc07  
1004bc0f  while (*edi_1 != 0)
1004bc1b      void* size = StrLen(edi_1) + 1
1004bc1b      
1004bc1f      if (*edi_1 != 0x3d)
1004bc22          void* eax_4 = ArenaAlloc(size)
1004bc2a          *esi_1 = eax_4
1004bc2a          
1004bc2c          if (eax_4 == 0)
1004bc30              sub_10045ef6(9)
1004bc30          
1004bc39          StrDupIntoArena(*esi_1, edi_1)
1004bc3f          esi_1 += 4
1004bc3f      
1004bc43      edi_1 += size
1004bc43  
1004bc50  int32_t result = Gladiator_Free(data_100633b4)
1004bc56  data_100633b4 = 0
1004bc5c  *esi_1 = 0
1004bc60  data_10069ec8 = 1
1004bc6b  return result


1004bc6c    int32_t __fastcall sub_1004bc6c(int32_t arg1)

1004bc6f  int32_t var_8 = arg1
1004bc70  int32_t var_c = arg1
1004bc70  
1004bc7c  if (data_10069ed8 == 0)
1004bc7e      sub_1004e345()
1004bc7e  
1004bc8f  GetModuleFileNameA(hModule: nullptr, lpFilename: &data_100634c0, nSize: 0x104)
1004bc95  char* eax = data_1006b3c4
1004bc9a  data_100634ac = &data_100634c0
1004bca0  void* edi = &data_100634c0
1004bca0  
1004bca4  if (*eax != 0)
1004bca6      edi = eax
1004bca6  
1004bcb3  sub_1004bd05(edi, nullptr, nullptr, &var_8, &var_c)
1004bcc2  void* eax_3 = ArenaAlloc(size: var_c + (var_8 << 2))
1004bcc2  
1004bcce  if (eax_3 == 0)
1004bcd2      sub_10045ef6(8)
1004bcd2  
1004bce9  sub_1004bd05(edi, eax_3, eax_3 + (var_8 << 2), &var_8, &var_c)
1004bcf4  int32_t result = var_8 - 1
1004bcf5  data_10063494 = eax_3
1004bcfd  data_10063490 = result
1004bd04  return result


1004bd05    int32_t* sub_1004bd05(char* arg1, int32_t* arg2, char* arg3, int32_t* arg4, int32_t* arg5)

1004bd08  int32_t* ecx = arg5
1004bd10  *ecx = 0
1004bd13  char* esi = arg3
1004bd17  int32_t* edi = arg2
1004bd1a  *arg4 = 1
1004bd20  char* eax_1 = arg1
1004bd20  
1004bd25  if (edi != 0)
1004bd27      *edi = esi
1004bd29      edi = &edi[1]
1004bd2c      arg2 = edi
1004bd2c  
1004bd32  uint32_t edx
1004bd32  
1004bd32  if (*eax_1 != 0x22)
1004bd78      while (true)
1004bd78          *ecx += 1
1004bd78          
1004bd7c          if (esi != 0)
1004bd7e              edx.b = *eax_1
1004bd80              *esi = edx.b
1004bd82              esi = &esi[1]
1004bd82          
1004bd83          edx.b = *eax_1
1004bd85          eax_1 = &eax_1[1]
1004bd85          
1004bd90          if ((*(zx.d(edx.b) + 0x10069dc1) & 4) != 0)
1004bd92              *ecx += 1
1004bd92              
1004bd96              if (esi != 0)
1004bd98                  uint32_t ebx_1
1004bd98                  ebx_1.b = *eax_1
1004bd9a                  *esi = ebx_1.b
1004bd9c                  esi = &esi[1]
1004bd9c              
1004bd9d              eax_1 = &eax_1[1]
1004bd9d          
1004bda1          if (edx.b == 0x20)
1004bdac              label_1004bdac:
1004bdac              
1004bdae              if (edx.b != 0)
1004bdb5                  if (esi != 0)
1004bdb7                      esi[0xffffffff] = 0
1004bdb7                  
1004bdb5                  break
1004bda1          else if (edx.b != 0)
1004bdaa              if (edx.b == 9)
1004bdaa                  goto label_1004bdac
1004bdaa              
1004bdaa              continue
1004bdaa          
1004bdb0          eax_1 -= 1
1004bdb1          break
1004bd32  else
1004bd34      while (true)
1004bd34          edx.b = eax_1[1]
1004bd37          eax_1 = &eax_1[1]
1004bd37          
1004bd3b          if (edx.b == 0x22)
1004bd3b              break
1004bd3b          
1004bd3f          if (edx.b == 0)
1004bd3f              break
1004bd3f          
1004bd4b          if ((*(zx.d(edx.b) + 0x10069dc1) & 4) != 0)
1004bd4d              *ecx += 1
1004bd4d              
1004bd51              if (esi != 0)
1004bd53                  edx.b = *eax_1
1004bd55                  *esi = edx.b
1004bd57                  esi = &esi[1]
1004bd58                  eax_1 = &eax_1[1]
1004bd58          
1004bd59          *ecx += 1
1004bd59          
1004bd5d          if (esi != 0)
1004bd5f              edx.b = *eax_1
1004bd61              *esi = edx.b
1004bd63              esi = &esi[1]
1004bd63      
1004bd66      *ecx += 1
1004bd66      
1004bd6a      if (esi != 0)
1004bd6c          *esi = 0
1004bd6f          esi = &esi[1]
1004bd6f      
1004bd73      if (*eax_1 == 0x22)
1004bd75          eax_1 = &eax_1[1]
1004bd75  
1004bdbb  arg5 = nullptr
1004bdbb  
1004bdc2  while (*eax_1 != 0)
1004bdc8      while (true)
1004bdc8          edx.b = *eax_1
1004bdc8          
1004bdd2          if (edx.b != 0x20 && edx.b != 9)
1004bdd2              break
1004bdd2          
1004bdd4          eax_1 = &eax_1[1]
1004bdd4      
1004bdda      if (*eax_1 == 0)
1004bdda          break
1004bdda      
1004bde2      if (edi != 0)
1004bde4          *edi = esi
1004bde6          edi = &edi[1]
1004bde9          arg2 = edi
1004bde9      
1004bdef      *arg4 += 1
1004bdef      
1004bdf1      while (true)
1004bdf1          arg1 = 1
1004bdf8          uint32_t i_2 = 0
1004bdf8          
1004bdfd          while (*eax_1 == 0x5c)
1004bdff              eax_1 = &eax_1[1]
1004be00              i_2 += 1
1004be00          
1004be06          if (*eax_1 == 0x22)
1004be0b              if ((i_2.b & 1) == 0)
1004be1b                  if (arg5 == 0 || eax_1[1] != 0x22)
1004be21                      arg1 = nullptr
1004be1b                  else
1004be1d                      eax_1 = &eax_1[1]
1004be1d                  
1004be24                  edi = arg2
1004be2c                  int32_t* edx_3
1004be2c                  edx_3.b = arg5 == 0
1004be2f                  arg5 = edx_3
1004be2f              
1004be32              i_2 u>>= 1
1004be32          
1004be39          if (i_2 != 0)
1004be3b              int32_t i_1 = i_2
1004be47              int32_t i
1004be47              
1004be47              do
1004be3e                  if (esi != 0)
1004be40                      *esi = 0x5c
1004be43                      esi = &esi[1]
1004be43                  
1004be44                  *ecx += 1
1004be46                  i = i_1
1004be46                  i_1 -= 1
1004be47              while (i != 1)
1004be47          
1004be49          edx.b = *eax_1
1004be49          
1004be4d          if (edx.b == 0)
1004be4d              break
1004be4d          
1004be53          if (arg5 == 0)
1004be58              if (edx.b == 0x20)
1004be58                  break
1004be58              
1004be5d              if (edx.b == 9)
1004be5d                  break
1004be5d          
1004be63          if (arg1 != 0)
1004be67              if (esi != 0)
1004be73                  if ((*(zx.d(edx.b) + 0x10069dc1) & 4) != 0)
1004be75                      *esi = edx.b
1004be77                      esi = &esi[1]
1004be78                      eax_1 = &eax_1[1]
1004be79                      *ecx += 1
1004be79                  
1004be7b                  edx.b = *eax_1
1004be7d                  *esi = edx.b
1004be7f                  esi = &esi[1]
1004be67              else if ((*(zx.d(edx.b) + 0x10069dc1) & 4) != 0)
1004be8e                  eax_1 = &eax_1[1]
1004be8f                  *ecx += 1
1004be8f              
1004be91              *ecx += 1
1004be91          
1004be93          eax_1 = &eax_1[1]
1004be93      
1004be9b      if (esi != 0)
1004be9d          *esi = 0
1004bea0          esi = &esi[1]
1004bea0      
1004bea1      *ecx += 1
1004bea1  
1004beaa  if (edi != 0)
1004beac      *edi = 0
1004beac  
1004beb5  *arg4 += 1
1004beb8  return arg4


1004beb9    void* DuplicateEnvironmentBlock()

1004beb9  int32_t ecx
1004beb9  int32_t var_4 = ecx
1004beba  int32_t var_8 = ecx
1004bebb  int32_t eax = data_100635c4
1004beca  void* lpMultiByteStr_2 = nullptr
1004becc  PWSTR esi = nullptr
1004bece  char* penv = nullptr
1004bece  
1004bed2  if (eax == 0)
1004bed6      esi = GetEnvironmentStringsW()
1004bed6      
1004beda      if (esi == 0)
1004beee          penv = GetEnvironmentStrings()
1004beee          
1004bef2          if (penv == 0)
1004bfe2              return nullptr
1004bfe2          
1004bef8          data_100635c4 = 2
1004bf98          label_1004bf98:
1004bf98          
1004bf98          if (penv == 0)
1004bfa0              penv = GetEnvironmentStrings()
1004bfa0              
1004bfa4              if (penv == 0)
1004bfe2                  return nullptr
1004bfe2          
1004bfa8          char* penv_1 = penv
1004bfa8          
1004bfaa          if (*penv != 0)
1004bfac              while (true)
1004bfac                  penv_1 = &penv_1[1]
1004bfac                  
1004bfaf                  if (*penv_1 == 0)
1004bfb1                      penv_1 = &penv_1[1]
1004bfb1                      
1004bfb4                      if (*penv_1 == 0)
1004bfb4                          break
1004bfb4          
1004bfc1          void* esi_1 = ArenaAlloc(size: penv_1 - penv + 1)
1004bfc1          
1004bfc6          if (esi_1 != 0)
1004bfcf              MemCopyFixedSize(esi_1, penv, penv_1 - penv + 1)
1004bfc6          else
1004bfc8              esi_1 = nullptr
1004bfc8          
1004bfd8          FreeEnvironmentStringsA(penv)
1004bfde          return esi_1
1004bfde      
1004bedc      data_100635c4 = 1
1004bed2  else if (eax != 1)
1004bf94      if (eax != 2)
1004bfe2          return nullptr
1004bfe2      
1004bf94      goto label_1004bf98
1004bf94  
1004bf12  if (esi == 0)
1004bf16      esi = GetEnvironmentStringsW()
1004bf16      
1004bf1a      if (esi == 0)
1004bfe2          return nullptr
1004bfe2  
1004bf23  PWSTR eax_4 = esi
1004bf23  
1004bf25  if (*esi != 0)
1004bf28      while (true)
1004bf28          eax_4 = &eax_4[1]
1004bf28          
1004bf2c          if (*eax_4 == 0)
1004bf2f              eax_4 = &eax_4[1]
1004bf2f              
1004bf33              if (*eax_4 == 0)
1004bf33                  break
1004bf33  
1004bf4c  int32_t eax_10 = WideCharToMultiByte(CodePage: 0, dwFlags: 0, lpWideCharStr: esi, 
1004bf4c      cchWideChar: ((eax_4 - esi) s>> 1) + 1, lpMultiByteStr: nullptr, cbMultiByte: 0, 
1004bf4c      lpDefaultChar: nullptr, lpUsedDefaultChar: nullptr)
1004bf4c  
1004bf52  if (eax_10 != 0)
1004bf55      void* lpMultiByteStr = ArenaAlloc(size: eax_10)
1004bf5d      void* lpMultiByteStr_1 = lpMultiByteStr
1004bf5d      
1004bf61      if (lpMultiByteStr != 0)
1004bf72          if (WideCharToMultiByte(CodePage: 0, dwFlags: 0, lpWideCharStr: esi, 
1004bf72                  cchWideChar: ((eax_4 - esi) s>> 1) + 1, lpMultiByteStr, 
1004bf72                  cbMultiByte: eax_10, lpDefaultChar: nullptr, lpUsedDefaultChar: nullptr) == 0)
1004bf78              Gladiator_Free(lpMultiByteStr_1)
1004bf7e              lpMultiByteStr_1 = nullptr
1004bf7e          
1004bf82          lpMultiByteStr_2 = lpMultiByteStr_1
1004bf82  
1004bf87  FreeEnvironmentStringsW(penv: esi)
1004bf8d  return lpMultiByteStr_2


1004bfeb    int32_t sub_1004bfeb() __pure

1004bfee  return 1


1004bff1    void* sub_1004bff1()

1004bff1  void* result = data_100633bc
1004bff1  
1004bff9  if (result == 1)
1004c00d      label_1004c00d:
1004c00d      sub_1004c02a(0xfc)
1004c012      int32_t eax = data_100635c8
1004c012      
1004c01a      if (eax != 0)
1004c01c          eax()
1004c01c      
1004c023      result = sub_1004c02a(0xff)
1004bff9  else if (result == 0 && data_100633c0 == 1)
1004c006      goto label_1004c00d
1004c006  
1004c029  return result


1004c02a    void* sub_1004c02a(uint32_t arg1)

1004c033  uint32_t i = arg1
1004c036  int32_t ecx = 0
1004c038  void* result = &data_100611f0
1004c038  
1004c03f  while (i != *result)
1004c041      result += 8
1004c044      ecx += 1
1004c044      
1004c04a      if (result s>= &data_10061280)
1004c04a          break
1004c04a  
1004c058  if (i == *((ecx << 3) + &data_100611f0))
1004c05e      result = data_100633bc
1004c05e      
1004c066      if (result == 1)
1004c15d          label_1004c15d:
1004c15d          OVERLAPPED* __saved_edi_3 = nullptr
1004c15f          uint32_t* lpNumberOfBytesWritten = &arg1
1004c168          uint32_t nNumberOfBytesToWrite = StrLen((&data_100611f4)[ecx * 2])
1004c174          return WriteFile(hFile: GetStdHandle(nStdHandle: STD_ERROR_HANDLE), 
1004c174              lpBuffer: (&data_100611f4)[ecx * 2], nNumberOfBytesToWrite, 
1004c174              lpNumberOfBytesWritten, lpOverlapped: __saved_edi_3)
1004c174      
1004c077      if (result == 0 && data_100633c0 == 1)
1004c077          goto label_1004c15d
1004c077      
1004c083      if (i != 0xfc)
1004c09f          void filename
1004c09f          
1004c09f          if (GetModuleFileNameA(hModule: nullptr, lpFilename: &filename, nSize: 0x104)
1004c09f                  == 0)
1004c0ad              StrDupIntoArena(&filename, "<program name unknown>")
1004c0ad          
1004c0bc          void* edi_1 = &filename
1004c0bc          
1004c0cc          if (StrLen(&filename) + 1 u> 0x3c)
1004c0e5              int32_t var_1b8_2 = 3
1004c0e7              void var_1e3
1004c0e7              edi_1 = StrLen(&filename) + &var_1e3
1004c0ef              StrCopyFixed(edi_1, "...", var_1b8_2)
1004c0ef          
1004c103          char var_a4[0xa0]
1004c103          StrDupIntoArena(&var_a4, "Runtime Error!\n\nProgram: ")
1004c110          ArenaStrCopyFrom(dst: &var_a4, src: edi_1)
1004c121          ArenaStrCopyFrom(dst: &var_a4, src: "\n\n")
1004c133          ArenaStrCopyFrom(dst: &var_a4, src: (&data_100611f4)[ecx * 2])
1004c149          return sub_10050316(&var_a4, "Microsoft Visual C++ Runtime Lib…", 0x12010)
1004c149  
1004c17c  return result


1004c17d    int32_t sub_1004c17d(int32_t arg1)

1004c181  int32_t edx = 0
1004c183  void* eax = &data_100611f0
1004c183  
1004c18a  while (arg1 != *eax)
1004c18c      eax += 8
1004c18f      edx += 1
1004c18f      
1004c195      if (eax s>= &data_10061280)
1004c195          break
1004c195  
1004c1a2  if (arg1 != *((edx << 3) + &data_100611f0))
1004c1ad      return 0
1004c1ad  
1004c1aa  return (&data_100611f4)[edx * 2]


1004c1ae    int32_t sub_1004c1ae()

1004c1b1  int32_t ecx
1004c1b1  int32_t var_8 = ecx
1004c1b3  bool c0
1004c1b3  bool c1
1004c1b3  bool c2
1004c1b3  bool c3
1004c1b3  var_8.w =
1004c1b3      (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa | (c3 ? 1 : 0) << 0xe
1004c1c0  return sub_1004c366(var_8.b)


1004c1c1    int32_t sub_1004c1c1()

1004c1c4  int32_t ecx
1004c1c4  int32_t var_8 = ecx
1004c1c5  bool c0
1004c1c5  bool c1
1004c1c5  bool c2
1004c1c5  bool c3
1004c1c5  var_8.w =
1004c1c5      (c0 ? 1 : 0) << 8 | (c1 ? 1 : 0) << 9 | (c2 ? 1 : 0) << 0xa | (c3 ? 1 : 0) << 0xe
1004c1c8  __fnclex()
1004c1d4  return sub_1004c366(var_8.b)


1004c1d5    int32_t sub_1004c1d5(int16_t arg1 @ x87control, int32_t arg2, int32_t arg3)

1004c1d8  int32_t ecx
1004c1d8  int32_t var_8 = ecx
1004c1db  int16_t x87status
1004c1db  int16_t temp0
1004c1db  temp0, x87status = __fnstcw_memmem16(arg1)
1004c1db  var_8.w = temp0
1004c1f5  int32_t result = (sub_1004c24b(var_8.w) & not.d(arg3)) | (arg2 & arg3)
1004c202  int16_t x87control
1004c202  int16_t x87status_1
1004c202  x87control, x87status_1 = __fldcw_memmem16(sub_1004c2dd(result).w)
1004c209  return result


1004c20a    int32_t sub_1004c20a(int32_t arg1, int32_t arg2)

1004c21f  int16_t x87control
1004c21f  return sub_1004c1d5(x87control, arg1, arg2 & 0xfff7ffff)


1004c220    int32_t* sub_1004c220()

1004c226  void* esi = *sub_1005074b()
1004c22a  int32_t* result = sub_10045f29()
1004c22a  
1004c231  if (esi != 0)
1004c233      result = *(esi + 4)
1004c233      
1004c23c      if ((*result & 0x10008) != 0)
1004c23e          result[8] = 0
1004c242          result[9] = 0xffff
1004c242  
1004c24a  return result


1004c24b    int32_t sub_1004c24b(int16_t arg1) __pure

1004c250  int32_t result = 0
1004c250  
1004c257  if ((arg1.b & 1) != 0)
1004c25b      result = 0x10
1004c25b  
1004c25f  if ((arg1.b & 4) != 0)
1004c261      result.b |= 8
1004c261  
1004c266  if ((arg1.b & 8) != 0)
1004c268      result.b |= 4
1004c268  
1004c26d  if ((arg1.b & 0x10) != 0)
1004c26f      result.b |= 2
1004c26f  
1004c274  if ((arg1.b & 0x20) != 0)
1004c276      result.b |= 1
1004c276  
1004c27b  if ((arg1.b & 2) != 0)
1004c27d      result |= 0x80000
1004c27d  
1004c282  uint32_t ecx = zx.d(arg1)
1004c292  int32_t edx_1 = ecx & 0xc00
1004c292  
1004c299  if (edx_1 != 0)
1004c2a1      if (edx_1 == 0x400)
1004c2b7          result:1.b |= 1
1004c2a1      else if (edx_1 == 0x800)
1004c2b3          result |= 0x200
1004c2a9      else if (edx_1 == 0xc00)
1004c2af          result |= 0x300
1004c2af  
1004c2ba  int32_t ecx_1 = ecx & 0x300
1004c2ba  
1004c2bd  if (ecx_1 == 0)
1004c2ca      result |= 0x20000
1004c2bd  else if (ecx_1 == 0x200)
1004c2c3      result |= 0x10000
1004c2c3  
1004c2d5  if ((arg1:1.b & 0x10) == 0)
1004c2dc      return result
1004c2dc  
1004c2d7  return result | 0x40000


1004c2dd    int32_t sub_1004c2dd(int32_t arg1) __pure

1004c2e2  int32_t result = 0
1004c2e2  
1004c2e8  if ((arg1.b & 0x10) != 0)
1004c2ec      result = 1
1004c2ec  
1004c2f0  if ((arg1.b & 8) != 0)
1004c2f2      result.b |= 4
1004c2f2  
1004c2f7  if ((arg1.b & 4) != 0)
1004c2f9      result.b |= 8
1004c2f9  
1004c2fe  if ((arg1.b & 2) != 0)
1004c300      result.b |= 0x10
1004c300  
1004c305  if ((arg1.b & 1) != 0)
1004c307      result.b |= 0x20
1004c307  
1004c30f  if ((arg1 & 0x80000) != 0)
1004c311      result.b |= 2
1004c311  
1004c31a  int32_t ecx_1 = arg1 & 0x300
1004c31a  
1004c321  if (ecx_1 != 0)
1004c329      if (ecx_1 == 0x100)
1004c33d          result:1.b |= 4
1004c329      else if (ecx_1 == 0x200)
1004c338          result:1.b |= 8
1004c32d      else if (ecx_1 == 0x300)
1004c333          result:1.b |= 0xc
1004c333  
1004c342  int32_t ecx_3 = arg1 & 0x30000
1004c342  
1004c348  if (ecx_3 == 0)
1004c356      result |= 0x300
1004c348  else if (ecx_3 == 0x10000)
1004c352      result |= 0x200
1004c352  
1004c360  if ((arg1 & 0x40000) != 0)
1004c362      result:1.b |= 0x10
1004c362  
1004c365  return result


1004c366    int32_t sub_1004c366(char arg1) __pure

1004c36a  int32_t result = 0
1004c36a  
1004c36f  if ((arg1 & 1) != 0)
1004c373      result = 0x10
1004c373  
1004c377  if ((arg1 & 4) != 0)
1004c379      result.b |= 8
1004c379  
1004c37e  if ((arg1 & 8) != 0)
1004c380      result.b |= 4
1004c380  
1004c385  if ((arg1 & 0x10) != 0)
1004c387      result.b |= 2
1004c387  
1004c38c  if ((arg1 & 0x20) != 0)
1004c38e      result.b |= 1
1004c38e  
1004c393  if ((arg1 & 2) == 0)
1004c39a      return result
1004c39a  
1004c395  return result | 0x80000


1004c39b    int32_t sub_1004c39b(int32_t arg1, int32_t arg2)

1004c3a4  int32_t temp0 = divs.dp.d(sx.q(arg2), 0x20)
1004c3a4  
1004c3c2  if ((*(arg1 + (temp0 << 2))
1004c3c2          & not.d(0xffffffff << (0x1f - (mods.dp.d(sx.q(arg2), 0x20)).b))) != 0)
1004c3e3      return 0
1004c3e3  
1004c3c4  int32_t esi_1 = temp0 + 1
1004c3c4  
1004c3c8  if (esi_1 s>= 3)
1004c3df      return 1
1004c3df  
1004c3ca  int32_t* eax_5 = arg1 + (esi_1 << 2)
1004c3ca  
1004c3d0  while (true)
1004c3d0      if (*eax_5 != 0)
1004c3e3          return 0
1004c3e3      
1004c3d2      esi_1 += 1
1004c3d3      eax_5 = &eax_5[1]
1004c3d3      
1004c3d9      if (esi_1 s>= 3)
1004c3df          return 1


1004c3e4    int32_t sub_1004c3e4(int32_t arg1, int32_t arg2)

1004c3f3  int32_t temp0 = divs.dp.d(sx.q(arg2), 0x20)
1004c3fe  int32_t* edi = arg1 + (temp0 << 2)
1004c40f  int32_t i = sub_10050754(*edi, 1 << (0x1f - (mods.dp.d(sx.q(arg2), 0x20)).b), edi)
1004c417  int32_t esi_1 = temp0 - 1
1004c417  
1004c418  if (temp0 - 1 s>= 0)
1004c41a      int32_t* edi_1 = arg1 + (esi_1 << 2)
1004c41a      
1004c41f      while (i != 0)
1004c426          i = sub_10050754(*edi_1, 1, edi_1)
1004c42e          esi_1 -= 1
1004c42f          edi_1 -= 4
1004c42f          
1004c434          if (esi_1 s< 0)
1004c434              break
1004c434  
1004c439  return i


1004c43a    int32_t sub_1004c43a(int32_t arg1, int32_t* arg2)

1004c43d  int32_t ecx
1004c43d  int32_t var_8 = ecx
1004c43e  int32_t var_c = ecx
1004c445  void* edi = arg2 - 1
1004c44b  int32_t result = 0
1004c458  int32_t temp0 = divs.dp.d(sx.q(edi + 1), 0x20)
1004c460  int32_t eax_5
1004c460  int32_t edx_1
1004c460  edx_1:eax_5 = sx.q(edi + 1)
1004c46c  int32_t* eax_7 = arg1 + (temp0 << 2)
1004c46c  
1004c47b  if ((*eax_7 & 1 << (0x1f - (mods.dp.d(edx_1:eax_5, 0x20)).b)) != 0
1004c47b          && sub_1004c39b(arg1, edi + 2) == 0)
1004c497      result = sub_1004c3e4(arg1, edi)
1004c497  
1004c4a8  *eax_7 &= 0xffffffff << (0x1f - (mods.dp.d(edx_1:eax_5, 0x20)).b)
1004c4a8  
1004c4b0  if (temp0 + 1 s< 3)
1004c4bc      __builtin_memset(s: arg1 + ((temp0 + 1) << 2), c: 0, n: (3 - (temp0 + 1)) << 2)
1004c4bc  
1004c4c5  return result


1004c4c6    int32_t* sub_1004c4c6(int32_t arg1, int32_t* arg2)

1004c4c6  int32_t* result = arg2
1004c4d1  int32_t* ecx_1 = arg1 - result
1004c4d3  int32_t i_1 = 3
1004c4dd  int32_t i
1004c4dd  
1004c4dd  do
1004c4d6      *(ecx_1 + result) = *result
1004c4d9      result = &result[1]
1004c4dc      i = i_1
1004c4dc      i_1 -= 1
1004c4dd  while (i != 1)
1004c4e0  return result


1004c4e1    int32_t sub_1004c4e1(int32_t* arg1)

1004c4e8  *arg1 = 0
1004c4e8  void* edi_1 = &arg1[1]
1004c4e9  *edi_1 = 0
1004c4ea  *(edi_1 + 4) = 0
1004c4ec  return 0


1004c4ed    int32_t sub_1004c4ed(int32_t* arg1)

1004c4ed  int32_t* eax = arg1
1004c4ed  
1004c4ff  for (int32_t i = 0; i s< 3; )
1004c4f6      if (*eax != 0)
1004c507          return 0
1004c507      
1004c4f8      i += 1
1004c4f9      eax = &eax[1]
1004c4f9  
1004c504  return 1


1004c508    int32_t* sub_1004c508(int32_t* arg1, int32_t arg2)

1004c516  int32_t* edi = arg1
1004c520  int32_t i_1 = 3
1004c527  int32_t temp0 = divs.dp.d(sx.q(arg2), 0x20)
1004c530  char temp1 = (mods.dp.d(sx.q(arg2), 0x20)).b
1004c532  arg2 = 0
1004c560  int32_t i
1004c560  
1004c560  do
1004c53e      int32_t eax_6 = *edi
1004c54e      *edi = eax_6 u>> temp1 | arg2
1004c555      edi = &edi[1]
1004c55a      i = i_1
1004c55a      i_1 -= 1
1004c55d      arg2 = (eax_6 & not.d(0xffffffff << temp1)) << (0x20 - temp1)
1004c560  while (i != 1)
1004c567  int32_t ebx_1 = 2
1004c56c  int32_t* ecx_5 = 8
1004c58e  int32_t* result
1004c58e  int32_t* temp3_1
1004c58e  
1004c58e  do
1004c572      if (ebx_1 s< temp0)
1004c583          result = arg1
1004c586          *(ecx_5 + result) = 0
1004c572      else
1004c57b          result = *(ecx_5 - (temp0 << 2) + arg1)
1004c57e          *(ecx_5 + arg1) = result
1004c57e      
1004c58a      ebx_1 -= 1
1004c58b      temp3_1 = ecx_5
1004c58b      ecx_5 -= 4
1004c58e  while (temp3_1 - 4 s>= 0)
1004c594  return result


1004c595    int32_t sub_1004c595(int16_t* arg1, int32_t* arg2, int32_t* arg3)

1004c5a1  uint32_t ecx = zx.d(arg1[5])
1004c5a7  int16_t* ecx_1 = ecx & 0x8000
1004c5b3  int32_t var_10 = *(arg1 + 6)
1004c5b6  int32_t ecx_3 = *(arg1 + 2)
1004c5c5  int32_t ebx_2 = (ecx & 0x7fff) - 0x3fff
1004c5d7  uint32_t var_8 = zx.d(*arg1) << 0x10
1004c5da  int32_t result
1004c5da  int32_t esi_1
1004c5da  
1004c5da  if (ebx_2 != 0xffffc001)
1004c60a      void var_1c
1004c60a      sub_1004c4c6(&var_1c, &var_10)
1004c60a      
1004c620      if (sub_1004c43a(&var_10, arg3[2]) != 0)
1004c622          ebx_2 += 1
1004c622      
1004c623      int32_t eax_5 = arg3[1]
1004c623      
1004c62d      if (ebx_2 s>= eax_5 - arg3[2])
1004c63d          if (ebx_2 s<= eax_5)
1004c64b              sub_1004c4c6(&var_10, &var_1c)
1004c655              sub_1004c508(&var_10, eax_5 - ebx_2)
1004c661              sub_1004c43a(&var_10, arg3[2])
1004c66f              sub_1004c508(&var_10, arg3[3] + 1)
1004c674              goto label_1004c677
1004c674          
1004c680          if (ebx_2 s< *arg3)
1004c6b0              var_10:3.b &= 0x7f
1004c6b8              esi_1 = arg3[5] + ebx_2
1004c6ba              sub_1004c508(&var_10, arg3[3])
1004c6c1              result = 0
1004c680          else
1004c686              sub_1004c4e1(&var_10)
1004c68e              var_10:3.b |= 0x80
1004c696              sub_1004c508(&var_10, arg3[3])
1004c6a1              esi_1 = arg3[5] + *arg3
1004c5fc              result = 1
1004c62d      else
1004c633          sub_1004c4e1(&var_10)
1004c677          label_1004c677:
1004c677          esi_1 = 0
1004c5fc          result = 2
1004c5da  else
1004c5df      esi_1 = 0
1004c5df      
1004c5ea      if (sub_1004c4ed(&var_10) != 0)
1004c6c1          result = 0
1004c5ea      else
1004c5f4          sub_1004c4e1(&var_10)
1004c5fc          result = 2
1004c5fc  
1004c6c9  int32_t edi_1 = arg3[4]
1004c6d1  int32_t ecx_12 = neg.d(ecx_1)
1004c6dd  int32_t esi_7 = esi_1 << (0x1f - (arg3[3]).b)
1004c6dd      | (sbb.d(ecx_12, ecx_12, ecx_1 != 0) & 0x80000000) | var_10
1004c6dd  
1004c6e3  if (edi_1 == 0x40)
1004c6eb      arg2[1] = esi_7
1004c6ee      *arg2 = ecx_3
1004c6e3  else if (edi_1 == 0x20)
1004c6fa      *arg2 = esi_7
1004c6fa  
1004c700  return result


1004c701    int32_t sub_1004c701(int16_t* arg1, int32_t* arg2)

1004c716  return sub_1004c595(arg1, arg2, &data_10061280)


1004c717    int32_t sub_1004c717(int16_t* arg1, int32_t* arg2)

1004c72c  return sub_1004c595(arg1, arg2, &data_10061298)


1004c72d    int32_t sub_1004c72d(int16_t* arg1, int32_t* arg2)

1004c738  int32_t result = 0
1004c73c  int32_t ecx
1004c73c  ecx.w = arg1[5]
1004c74f  int32_t var_14 = *(arg1 + 6)
1004c752  int32_t ecx_3 = *(arg1 + 2)
1004c75b  uint32_t var_c = zx.d(*arg1) << 0x10
1004c762  int32_t esi_1 = ecx & 0x7fff
1004c774  int32_t ecx_5
1004c774  
1004c774  if (sub_1004c43a(&var_14, 0x40) == 0)
1004c77e      ecx_5 = var_14
1004c774  else
1004c776      ecx_5 = 0x80000000
1004c77b      esi_1 += 1
1004c77b  
1004c786  if (esi_1.w == 0x7fff)
1004c788      result = 1
1004c788  
1004c794  arg2[1] = ecx_5
1004c79a  arg2[2].w = (ecx.w & 0x8000) | esi_1.w
1004c79e  *arg2 = ecx_3
1004c7a6  return result


1004c7a7    int32_t sub_1004c7a7(int32_t* arg1, void* arg2)

1004c7be  void var_10
1004c7be  sub_1004ce66(&var_10, &arg2, arg2, 0, 0, 0, 0)
1004c7d3  return sub_1004c701(&var_10, arg1)


1004c7d4    int32_t sub_1004c7d4(int32_t* arg1, void* arg2)

1004c7ec  void var_10
1004c7ec  sub_1004ce66(&var_10, &arg2, arg2, 1, 0, 0, 0)
1004c801  return sub_1004c72d(&var_10, arg1)


1004c802    int32_t sub_1004c802(int32_t* arg1, void* arg2)

1004c819  void var_10
1004c819  sub_1004ce66(&var_10, &arg2, arg2, 0, 0, 0, 0)
1004c82e  return sub_1004c717(&var_10, arg1)


1004c82f    char* sub_1004c82f(char* arg1, char* arg2, int32_t arg3)

1004c832  int32_t edx = arg3
1004c836  char* ebx = arg2
1004c83a  char* esi = arg1
1004c83d  char* ecx = *(edx + 0xc)
1004c844  *esi = 0x30
1004c849  char* result = &esi[1]
1004c849  
1004c84b  if (ebx s> 0)
1004c84d      arg1 = ebx
1004c850      ebx = nullptr
1004c867      char* i
1004c867      
1004c867      do
1004c852          edx.b = *ecx
1004c852          
1004c856          if (edx.b == 0)
1004c860              edx = 0x30
1004c856          else
1004c858              edx = sx.d(edx.b)
1004c85b              ecx = &ecx[1]
1004c85b          
1004c861          *result = edx.b
1004c863          result = &result[1]
1004c864          i = arg1
1004c864          arg1 -= 1
1004c867      while (i != 1)
1004c869      edx = arg3
1004c869  
1004c86c  *result = 0
1004c86c  
1004c876  if (ebx s>= 0 && *ecx s>= 0x35)
1004c878      while (true)
1004c878          result -= 1
1004c878          
1004c87c          if (*result != 0x39)
1004c87c              break
1004c87c          
1004c87e          *result = 0x30
1004c87e      
1004c883      *result += 1
1004c883  
1004c888  if (*esi != 0x31)
1004c899      return sub_100452f0(esi, &esi[1], StrLen(&esi[1]) + 1)
1004c899  
1004c88a  *(edx + 4) += 1
1004c8a5  return result


1004c8a6    int32_t* sub_1004c8a6(int32_t* arg1, char* arg2)

1004c8b6  int32_t var_10
1004c8b6  void arg_4
1004c8b6  sub_1004c902(&var_10, &arg_4)
1004c8c3  int16_t var_2c
1004c8c3  int16_t* var_38_1 = &var_2c
1004c8c4  int32_t var_3c_1 = 0
1004c8c6  int32_t var_40 = 0x11
1004c8cd  int32_t var_4c = var_10
1004c8cd  void var_48
1004c8cd  void* edi = &var_48
1004c8cd  void var_c
1004c8cd  void* esi = &var_c
1004c8ce  *edi = *esi
1004c8cf  *(edi + 4) = *(esi + 4)
1004c8dc  arg1[2] = sub_100508f5(var_4c)
1004c8e3  char var_2a
1004c8e3  *arg1 = sx.d(var_2a)
1004c8e9  arg1[1] = sx.d(var_2c)
1004c8ef  void var_28
1004c8ef  void* var_50 = &var_28
1004c8f1  StrDupIntoArena(arg2, var_50)
1004c8f9  arg1[3] = arg2
1004c901  return arg1


1004c902    int32_t* sub_1004c902(int32_t* arg1, int32_t* arg2)

1004c905  int32_t ecx
1004c905  int32_t var_8 = ecx
1004c90c  int32_t eax
1004c90c  eax.w = *(arg2 + 6)
1004c91f  int32_t ecx_3 = eax u>> 4 & 0x7ff
1004c927  int32_t edx_1 = *arg2
1004c929  uint32_t ebx = zx.d(ecx_3.w)
1004c931  int32_t eax_3 = arg2[1] & 0xfffff
1004c938  int32_t var_8_1 = 0x80000000
1004c93b  int32_t edi_1
1004c93b  
1004c93b  if (ebx != 0)
1004c93f      if (ebx == 0x7ff)
1004c949          edi_1 = 0x7fff
1004c93f      else
1004c941          edi_1 = ecx_3 + 0x3c00
1004c941      
1004c93f      goto label_1004c97b
1004c93f  
1004c958  int32_t* result
1004c958  
1004c958  if (eax_3 != 0 || edx_1 != 0)
1004c968      edi_1 = ecx_3 + 0x3c01
1004c96e      var_8_1 = 0
1004c97b      label_1004c97b:
1004c97b      result = arg1
1004c97e      int32_t ecx_7 = edx_1 u>> 0x15 | eax_3 << 0xb | var_8_1
1004c984      result[1] = ecx_7
1004c987      *result = edx_1 << 0xb
1004c987      
1004c98b      while ((0x80000000 & ecx_7) == 0)
1004c98d          int32_t edx_3 = *result
1004c996          int32_t ebx_3 = edx_3 u>> 0x1f | (ecx_7 * 2)
1004c99b          *result = edx_3 * 2
1004c99d          result[1] = ebx_3
1004c9a0          edi_1 += 0xffff
1004c9a6          ecx_7 = ebx_3
1004c9a6      
1004c9af      result[2].w = (eax & 0x8000).w | edi_1.w
1004c958  else
1004c95a      result = arg1
1004c95d      result[1] = 0
1004c960      *result = 0
1004c962      result[2].w = 0
1004c962  
1004c9b7  return result

1004c9b8                                                                          cc cc cc cc cc cc cc cc                          ........

1004c9c0    char* sub_1004c9c0(char* arg1, char arg2, int32_t arg3)

1004c9c0  int32_t i_3 = arg3
1004c9c0  
1004c9ca  if (i_3 == 0)
1004ca17      return arg1
1004ca17  
1004c9ce  int32_t eax
1004c9ce  eax.b = arg2
1004c9d3  char* edi = arg1
1004c9d3  
1004c9d8  if (i_3 u< 4)
1004ca0b      label_1004ca0b:
1004ca0b      int32_t i
1004ca0b      
1004ca0b      do
1004ca07          *edi = eax.b
1004ca09          edi = &edi[1]
1004ca0a          i = i_3
1004ca0a          i_3 -= 1
1004ca0b      while (i != 1)
1004c9d8  else
1004c9dc      int32_t i_2 = neg.d(arg1) & 3
1004c9dc      
1004c9df      if (i_2 != 0)
1004c9e1          i_3 -= i_2
1004c9e7          int32_t i_1
1004c9e7          
1004c9e7          do
1004c9e3              *edi = eax.b
1004c9e5              edi = &edi[1]
1004c9e6              i_1 = i_2
1004c9e6              i_2 -= 1
1004c9e7          while (i_1 != 1)
1004c9e7      
1004c9f5      eax *= 0x1010101
1004c9f7      int32_t i_4 = i_3
1004c9f9      i_3 &= 3
1004c9fc      uint32_t ecx_4 = i_4 u>> 2
1004c9fc      
1004c9ff      if (ecx_4 == 0)
1004c9ff          goto label_1004ca0b
1004c9ff      
1004ca01      int32_t ecx_5
1004ca01      edi, ecx_5 = __memfill_u32(edi, eax, ecx_4)
1004ca01      
1004ca05      if (i_3 != 0)
1004ca05          goto label_1004ca0b
1004ca05  
1004ca12  return arg1


1004ca18    int32_t sub_1004ca18()

1004ca20  return sub_10045ef6(2)


1004ca21    int32_t sub_1004ca21(int16_t* arg1, char* arg2, int32_t arg3)

1004ca2d  InterlockedIncrement(&data_10069f24)
1004ca39  int32_t ebx = 0
1004ca39  
1004ca41  if (data_10069f14 != 0)
1004ca44      InterlockedDecrement(&data_10069f24)
1004ca48      LockArenaSection(index: 0x13)
1004ca50      ebx = 1
1004ca50  
1004ca5a  int32_t result = sub_1004ca7e(arg1, arg2, arg3)
1004ca5a  
1004ca67  if (ebx == 0)
1004ca74      InterlockedDecrement(&data_10069f24)
1004ca67  else
1004ca6b      UnlockArenaSection(index: 0x13)
1004ca6b  
1004ca7d  return result


1004ca7e    int32_t sub_1004ca7e(int16_t* arg1, char* arg2, int32_t arg3)

1004ca8f  if (arg2 != 0 && arg3 != 0)
1004ca91      uint16_t eax
1004ca91      eax.b = *arg2
1004ca91      
1004ca95      if (eax.b != 0)
1004caad          if (data_1006343c != 0)
1004cad0              if ((*(&(*data_100609a0)[zx.d(eax.b)] + 1) & 0x80) != 0)
1004cad2                  int32_t cbMultiByte = data_10060bac
1004cad2                  
1004cada                  if (cbMultiByte s<= 1)
1004cb06                      label_1004cb06:
1004cb06                      
1004cb0e                      if (arg3 u>= cbMultiByte && arg2[1] != 0)
1004caa6                          return cbMultiByte
1004cada                  else if (arg3 s>= cbMultiByte)
1004cae6                      int32_t cchWideChar_1
1004cae6                      cchWideChar_1.b = arg1 != 0
1004cafd                      bool cond:0_1 = MultiByteToWideChar(CodePage: g_codepage_default, 
1004cafd                          dwFlags: MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, 
1004cafd                          lpMultiByteStr: arg2, cbMultiByte, lpWideCharStr: arg1, 
1004cafd                          cchWideChar: cchWideChar_1) != 0
1004caff                      cbMultiByte = data_10060bac
1004caff                      
1004cb04                      if (cond:0_1)
1004caa6                          return cbMultiByte
1004caa6                      
1004cb04                      goto label_1004cb06
1004cb04                  
1004cb15                  *sub_10044f86() = 0x2a
1004cb1b                  return 0xffffffff
1004cb1b              
1004cb25              int32_t cchWideChar
1004cb25              cchWideChar.b = arg1 != 0
1004cb25              
1004cb3f              if (MultiByteToWideChar(CodePage: g_codepage_default, 
1004cb3f                      dwFlags: MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, lpMultiByteStr: arg2, 
1004cb3f                      cbMultiByte: 1, lpWideCharStr: arg1, cchWideChar) == 0)
1004cb15                  *sub_10044f86() = 0x2a
1004cb1b                  return 0xffffffff
1004caad          else if (arg1 != 0)
1004caba              *arg1 = zx.w(eax.b)
1004caba          
1004cabf          return 1
1004cabf      
1004ca9c      if (arg1 != 0)
1004ca9e          *arg1 = 0
1004ca9e  
1004caa1  return 0


1004cb47    BOOL sub_1004cb47(int32_t arg1)

1004cb4e  if (data_10060bac s> 1)
1004cb60      int32_t eax
1004cb60      int32_t ecx
1004cb60      int32_t edx
1004cb60      return sub_10046f7a(eax, edx, ecx, arg1)
1004cb60  
1004cb6b  int32_t eax_2
1004cb6b  eax_2.w = (*data_100609a0)[arg1]
1004cb74  return eax_2 & 0x103


1004cb75    BOOL sub_1004cb75(int32_t arg1)

1004cb7c  if (data_10060bac s> 1)
1004cb8b      int32_t eax
1004cb8b      int32_t ecx
1004cb8b      int32_t edx
1004cb8b      return sub_10046f7a(eax, edx, ecx, arg1)
1004cb8b  
1004cb96  int32_t eax_2
1004cb96  eax_2.b = (*data_100609a0)[arg1].b
1004cb9c  return eax_2 & 1


1004cb9d    BOOL sub_1004cb9d(int32_t arg1)

1004cba4  if (data_10060bac s> 1)
1004cbb3      int32_t eax
1004cbb3      int32_t ecx
1004cbb3      int32_t edx
1004cbb3      return sub_10046f7a(eax, edx, ecx, arg1)
1004cbb3  
1004cbbe  int32_t eax_2
1004cbbe  eax_2.b = (*data_100609a0)[arg1].b
1004cbc4  return eax_2 & 2


1004cbc5    BOOL sub_1004cbc5(int32_t arg1)

1004cbcc  if (data_10060bac s> 1)
1004cbdb      int32_t eax
1004cbdb      int32_t ecx
1004cbdb      int32_t edx
1004cbdb      return sub_10046f7a(eax, edx, ecx, arg1)
1004cbdb  
1004cbe6  int32_t eax_2
1004cbe6  eax_2.b = (*data_100609a0)[arg1].b
1004cbec  return eax_2 & 4


1004cbed    BOOL sub_1004cbed(int32_t arg1)

1004cbf4  if (data_10060bac s> 1)
1004cc06      int32_t eax
1004cc06      int32_t ecx
1004cc06      int32_t edx
1004cc06      return sub_10046f7a(eax, edx, ecx, arg1)
1004cc06  
1004cc11  int32_t eax_2
1004cc11  eax_2.b = (*data_100609a0)[arg1].b
1004cc19  return eax_2 & 0x80


1004cc1a    BOOL sub_1004cc1a(int32_t arg1)

1004cc21  if (data_10060bac s> 1)
1004cc30      int32_t eax
1004cc30      int32_t ecx
1004cc30      int32_t edx
1004cc30      return sub_10046f7a(eax, edx, ecx, arg1)
1004cc30  
1004cc3b  int32_t eax_2
1004cc3b  eax_2.b = (*data_100609a0)[arg1].b
1004cc41  return eax_2 & 8


1004cc42    BOOL sub_1004cc42(int32_t arg1)

1004cc49  if (data_10060bac s> 1)
1004cc58      int32_t eax
1004cc58      int32_t ecx
1004cc58      int32_t edx
1004cc58      return sub_10046f7a(eax, edx, ecx, arg1)
1004cc58  
1004cc63  int32_t eax_2
1004cc63  eax_2.b = (*data_100609a0)[arg1].b
1004cc69  return eax_2 & 0x10


1004cc6a    BOOL sub_1004cc6a(int32_t arg1)

1004cc71  if (data_10060bac s> 1)
1004cc83      int32_t eax
1004cc83      int32_t ecx
1004cc83      int32_t edx
1004cc83      return sub_10046f7a(eax, edx, ecx, arg1)
1004cc83  
1004cc8e  int32_t eax_2
1004cc8e  eax_2.w = (*data_100609a0)[arg1]
1004cc97  return eax_2 & 0x107


1004cc98    BOOL sub_1004cc98(int32_t arg1)

1004cc9f  if (data_10060bac s> 1)
1004ccb1      int32_t eax
1004ccb1      int32_t ecx
1004ccb1      int32_t edx
1004ccb1      return sub_10046f7a(eax, edx, ecx, arg1)
1004ccb1  
1004ccbc  int32_t eax_2
1004ccbc  eax_2.w = (*data_100609a0)[arg1]
1004ccc5  return eax_2 & 0x157


1004ccc6    BOOL sub_1004ccc6(int32_t arg1)

1004cccd  if (data_10060bac s> 1)
1004ccdf      int32_t eax
1004ccdf      int32_t ecx
1004ccdf      int32_t edx
1004ccdf      return sub_10046f7a(eax, edx, ecx, arg1)
1004ccdf  
1004ccea  int32_t eax_2
1004ccea  eax_2.w = (*data_100609a0)[arg1]
1004ccf3  return eax_2 & 0x117


1004ccf4    BOOL sub_1004ccf4(int32_t arg1)

1004ccfb  if (data_10060bac s> 1)
1004cd0a      int32_t eax
1004cd0a      int32_t ecx
1004cd0a      int32_t edx
1004cd0a      return sub_10046f7a(eax, edx, ecx, arg1)
1004cd0a  
1004cd15  int32_t eax_2
1004cd15  eax_2.b = (*data_100609a0)[arg1].b
1004cd1b  return eax_2 & 0x20


1004cd1c    int32_t __convention("regparm") sub_1004cd1c(int32_t arg1, int32_t arg2) __pure

1004cd28  return neg.d(sbb.d(arg1, arg1, arg2 u< 0x80))


1004cd29    int32_t sub_1004cd29(int32_t arg1) __pure

1004cd30  return arg1 & 0x7f


1004cd31    BOOL sub_1004cd31(int32_t arg1)

1004cd38  BOOL result
1004cd38  int32_t eax
1004cd38  int32_t ecx
1004cd38  int32_t edx
1004cd38  
1004cd38  if (data_10060bac s<= 1)
1004cd55      wchar16 (* eax_1)[0x21]
1004cd55      eax_1.w = (*data_100609a0)[arg1]
1004cd59      result = eax_1 & 0x103
1004cd38  else
1004cd43      result = sub_10046f7a(eax, edx, ecx, arg1)
1004cd43  
1004cd67  if (result == 0 && arg1 != 0x5f)
1004cd69      return result
1004cd69  
1004cd6d  return 1


1004cd6e    BOOL sub_1004cd6e(int32_t arg1)

1004cd75  BOOL result
1004cd75  int32_t eax
1004cd75  int32_t ecx
1004cd75  int32_t edx
1004cd75  
1004cd75  if (data_10060bac s<= 1)
1004cd92      wchar16 (* eax_1)[0x21]
1004cd92      eax_1.w = (*data_100609a0)[arg1]
1004cd96      result = eax_1 & 0x107
1004cd75  else
1004cd80      result = sub_10046f7a(eax, edx, ecx, arg1)
1004cd80  
1004cda4  if (result == 0 && arg1 != 0x5f)
1004cda6      return result
1004cda6  
1004cdaa  return 1

1004cdab                                   cc cc cc cc cc                                                             .....

1004cdb0    int32_t __convention("regparm") __allshl(int32_t arg1, int32_t arg2, char arg3) __pure

1004cdb3  if (arg3 u>= 0x40)
1004cdce      return 0
1004cdce  
1004cdb8  if (arg3 u>= 0x20)
1004cdc9      return 0
1004cdc9  
1004cdbf  return arg1 << arg3


1004cdcf    uint32_t sub_1004cdcf(int32_t arg1, int32_t* arg2)

1004cdd4  sub_10047aed(arg2)
1004cde1  uint32_t result = sub_1004cdf8(arg1, arg2)
1004cdec  sub_10047b3f(arg2)
1004cdf7  return result


1004cdf8    uint32_t sub_1004cdf8(int32_t arg1, int32_t* arg2)

1004ce01  if (arg1 != 0xffffffff)
1004ce07      char eax_1 = (arg2[3]).b
1004ce07      
1004ce0c      if ((eax_1 & 1) != 0)
1004ce1a          label_1004ce1a:
1004ce1a          
1004ce1a          if (arg2[2] == 0)
1004ce1d              sub_1004d5cd(arg2)
1004ce1d          
1004ce23          int32_t eax_2 = *arg2
1004ce23          
1004ce28          if (eax_2 != arg2[2])
1004ce28              goto label_1004ce33
1004ce28          
1004ce2e          if (arg2[1] == 0)
1004ce31              *arg2 = eax_2 + 1
1004ce33              label_1004ce33:
1004ce33              
1004ce37              if ((arg2[3].b & 0x40) == 0)
1004ce4a                  *arg2 -= 1
1004ce4e                  **arg2 = arg1.b
1004ce50                  label_1004ce50:
1004ce50                  int32_t eax_8 = arg2[3]
1004ce53                  arg2[1] += 1
1004ce56                  eax_8.b &= 0xef
1004ce58                  eax_8.b |= 1
1004ce5a                  arg2[3] = eax_8
1004ce5f                  return zx.d(arg1.b)
1004ce5f              
1004ce39              *arg2 -= 1
1004ce3b              char* eax_4 = *arg2
1004ce3b              
1004ce3f              if (*eax_4 == arg1.b)
1004ce3f                  goto label_1004ce50
1004ce3f              
1004ce42              *arg2 = &eax_4[1]
1004ce0c      else if ((eax_1 & 0x80) != 0 && (eax_1 & 2) == 0)
1004ce14          goto label_1004ce1a
1004ce14  
1004ce44  return 0xffffffff


1004ce66    int32_t sub_1004ce66(int16_t* arg1, char** arg2, void* arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7)

1004ce6c  int32_t ebx
1004ce6c  int32_t var_64 = ebx
1004ce6f  char* edi = arg3
1004ce77  void var_60
1004ce77  void* var_10 = &var_60
1004ce7a  int32_t eax = 0
1004ce7c  int32_t edx = 1
1004ce7d  int16_t var_2c = 0
1004ce80  int32_t var_1c = 1
1004ce83  int32_t var_8 = 0
1004ce86  int32_t var_14 = 0
1004ce89  int32_t var_28 = 0
1004ce8c  int32_t var_24 = 0
1004ce8f  int32_t var_30 = 0
1004ce92  int32_t var_34 = 0
1004ce95  void* var_20 = nullptr
1004ce98  int32_t var_c = 0
1004ce9b  int32_t result = 0
1004ce9e  arg3 = edi
1004ce9e  
1004cea1  while (true)
1004cea1      void* ecx
1004cea1      ecx.b = *edi
1004cea1      
1004ceb5      if (ecx.b != 0x20 && ecx.b != 9 && ecx.b != 0xa && ecx.b != 0xd)
1004cebd          while (true)
1004cebd              ebx.b = *edi
1004cebf              edi = &edi[1]
1004cec9              int32_t var_70_1
1004cec9              
1004cec9              switch (eax)
1004ced8                  case 0
1004ced8                      if (ebx.b s>= 0x31 && ebx.b s<= 0x39)
1004ceda                          label_1004ceda:
1004ceda                          var_70_1 = 3
1004d0fe                          label_1004d0fe:
1004d0fe                          eax = var_70_1
1004d0ff                          edi -= 1
1004d100                          continue
1004ced8                      else if (ebx.b != data_10060bb0)
1004cef0                          int32_t eax_1 = sx.d(ebx.b)
1004cef0                          
1004cef6                          if (eax_1 == 0x2b)
1004cf16                              var_2c = 0
1004cf1c                              eax = 2
1004cf1d                              continue
1004cef6                          else if (eax_1 == 0x2d)
1004cf0c                              var_2c = -0x8000
1004cf13                              eax = 2
1004cf14                              continue
1004cefa                          else
1004ceff                              if (eax_1 == 0x30)
1004cf99                                  eax = 1
1004cf9b                                  continue
1004cf9b                              
1004d1d9                              edi -= 1
1004d1da                              break
1004cee7                      else
1004cee9                          label_1004cee9:
1004d136                          eax = 5
1004d137                          continue
1004cf22                  case 1
1004cf22                      var_14 = 1
1004cf22                      
1004cf2a                      if (ebx.b s>= 0x31 && ebx.b s<= 0x39)
1004cf25                          goto label_1004ceda
1004cf25                      
1004cf32                      if (ebx.b == data_10060bb0)
1004cff4                          eax = 4
1004cff6                          continue
1004cf32                      else if (ebx.b == 0x2b || ebx.b == 0x2d)
1004cf6e                          label_1004cf6e:
1004cf6e                          edi -= 1
1004d136                          eax = 0xb
1004d137                          continue
1004cf40                      else if (ebx.b == 0x30)
1004cf99                          eax = 1
1004cf9b                          continue
1004cf45                      else
1004cf47                          label_1004cf47:
1004cf47                          
1004cf61                          if (ebx.b s<= 0x43
1004cf61                                  || (ebx.b s> 0x45 && (ebx.b s<= 0x63 || ebx.b s> 0x65)))
1004d1d9                              edi -= 1
1004d1da                              break
1004d1da                          
1004d136                          eax = 6
1004d137                          continue
1004cf7e                  case 2
1004cf7e                      if (ebx.b s>= 0x31 && ebx.b s<= 0x39)
1004cf79                          goto label_1004ceda
1004cf79                      
1004cf8a                      if (ebx.b == data_10060bb0)
1004cf8a                          goto label_1004cee9
1004cf8a                      
1004cf93                      if (ebx.b == 0x30)
1004cf99                          eax = 1
1004cf9b                          continue
1004cf9b                      
1004d14e                      edi = arg3
1004d151                      break
1004cfa0                  case 3
1004cfa0                      var_14 = 1
1004cfa0                      
1004cfa9                      while (true)
1004cfa9                          BOOL eax_7
1004cfa9                          
1004cfa9                          if (data_10060bac s<= 1)
1004cfbc                              ecx = data_100609a0
1004cfc5                              uint32_t eax_8
1004cfc5                              eax_8.b = *(ecx + (zx.d(ebx.b) << 1))
1004cfc8                              eax_7 = eax_8 & 4
1004cfa9                          else
1004cfab                              uint32_t eax_6 = zx.d(ebx.b)
1004cfb0                              eax_7 = sub_10046f7a(eax_6, 1, ecx, eax_6)
1004cfb6                              ecx = 4
1004cfb9                              edx = 1
1004cfb9                          
1004cfcc                          if (eax_7 == 0)
1004cfcc                              break
1004cfcc                          
1004cfd2                          if (var_8 u>= 0x19)
1004cfe4                              var_c += 1
1004cfd2                          else
1004cfd4                              void* eax_9 = var_10
1004cfd7                              var_8 += 1
1004cfda                              ebx.b -= 0x30
1004cfdd                              var_10 += 1
1004cfe0                              *eax_9 = ebx.b
1004cfe0                          
1004cfe7                          ebx.b = *edi
1004cfe9                          edi = &edi[1]
1004cfe9                      
1004cff2                      if (ebx.b == data_10060bb0)
1004cff4                          eax = 4
1004cff6                          continue
1004cff6                      
1004d05b                      label_1004d05b:
1004d05b                      
1004d067                      if (ebx.b == 0x2b || ebx.b == 0x2d)
1004d05e                          goto label_1004cf6e
1004d05e                      
1004d05e                      goto label_1004cf47
1004cfff                  case 4
1004cfff                      var_14 = 1
1004d002                      var_28 = 1
1004d002                      
1004d005                      if (var_8 == 0)
1004d00a                          while (ebx.b == 0x30)
1004d00c                              var_c -= 1
1004d00f                              ebx.b = *edi
1004d011                              edi = &edi[1]
1004d011                      
1004d01a                      while (true)
1004d01a                          BOOL eax_11
1004d01a                          
1004d01a                          if (data_10060bac s<= 1)
1004d02d                              ecx = data_100609a0
1004d036                              uint32_t eax_12
1004d036                              eax_12.b = *(ecx + (zx.d(ebx.b) << 1))
1004d039                              eax_11 = eax_12 & 4
1004d01a                          else
1004d01c                              uint32_t eax_10 = zx.d(ebx.b)
1004d021                              eax_11 = sub_10046f7a(eax_10, 1, ecx, eax_10)
1004d027                              ecx = 4
1004d02a                              edx = 1
1004d02a                          
1004d03d                          if (eax_11 == 0)
1004d03d                              break
1004d03d                          
1004d043                          if (var_8 u< 0x19)
1004d045                              void* eax_13 = var_10
1004d048                              var_8 += 1
1004d04b                              ebx.b -= 0x30
1004d04e                              var_10 += 1
1004d051                              var_c -= 1
1004d054                              *eax_13 = ebx.b
1004d054                          
1004d056                          ebx.b = *edi
1004d058                          edi = &edi[1]
1004d058                      
1004d03d                      goto label_1004d05b
1004d078                  case 5
1004d078                      var_28 = 1
1004d07b                      BOOL eax_15
1004d07b                      
1004d07b                      if (data_10060bac s<= 1)
1004d08e                          ecx = data_100609a0
1004d097                          uint32_t eax_16
1004d097                          eax_16.b = *(ecx + (zx.d(ebx.b) << 1))
1004d09a                          eax_15 = eax_16 & 4
1004d07b                      else
1004d07d                          uint32_t eax_14 = zx.d(ebx.b)
1004d082                          eax_15 = sub_10046f7a(eax_14, 1, ecx, eax_14)
1004d088                          ecx = 4
1004d08b                          edx = 1
1004d08b                      
1004d09e                      if (eax_15 == 0)
1004d14e                          edi = arg3
1004d151                          break
1004d151                      
1004d0a4                      eax = 4
1004d0ff                      edi -= 1
1004d100                      continue
1004d0a8                  case 6
1004d0a8                      ecx = &edi[0xfffffffe]
1004d0ae                      arg3 = ecx
1004d0ae                      
1004d0b6                      if (ebx.b s>= 0x31 && ebx.b s<= 0x39)
1004d0fc                          label_1004d0fc:
1004d0fc                          var_70_1 = 9
1004d0fc                          goto label_1004d0fe
1004d0fc                      
1004d0b8                      int32_t eax_17 = sx.d(ebx.b)
1004d0b8                      
1004d0be                      if (eax_17 == 0x2b)
1004d0be                          goto label_1004d134
1004d0be                      
1004d0c2                      if (eax_17 == 0x2d)
1004d0c2                          goto label_1004d128
1004d0c2                      
1004d0c7                      if (eax_17 == 0x30)
1004d0c7                          goto label_1004d0cd
1004d0c7                      
1004d1dc                      edi = ecx
1004d1dc                      break
1004d0fa                  case 7
1004d0fa                      if (ebx.b s>= 0x31 && ebx.b s<= 0x39)
1004d0f5                          goto label_1004d0fc
1004d0f5                      
1004d108                      if (ebx.b != 0x30)
1004d14e                          edi = arg3
1004d151                          break
1004d151                      
1004d0cd                      label_1004d0cd:
1004d136                      eax = 8
1004d137                      continue
1004d0d1                  case 8
1004d0d1                      var_24 = 1
1004d0d1                      
1004d0d7                      while (ebx.b == 0x30)
1004d0d9                          ebx.b = *edi
1004d0db                          edi = &edi[1]
1004d0db                      
1004d0ea                      if (ebx.b s>= 0x31 && ebx.b s<= 0x39)
1004d0e1                          goto label_1004d0fc
1004d0e1                      
1004d1d9                      edi -= 1
1004d1da                      break
1004d156                  case 9
1004d156                      var_24 = 1
1004d15d                      void* esi_1 = nullptr
1004d15d                      
1004d166                      while (true)
1004d166                          BOOL eax_27
1004d166                          
1004d166                          if (data_10060bac s<= 1)
1004d177                              ecx = data_100609a0
1004d180                              uint32_t eax_28
1004d180                              eax_28.b = *(ecx + (zx.d(ebx.b) << 1))
1004d183                              eax_27 = eax_28 & 4
1004d166                          else
1004d168                              uint32_t eax_26 = zx.d(ebx.b)
1004d16e                              eax_27, edx = sub_10046f7a(eax_26, edx, ecx, eax_26)
1004d174                              ecx = 4
1004d174                          
1004d188                          if (eax_27 == 0)
1004d188                              break
1004d188                          
1004d18a                          ecx = sx.d(ebx.b)
1004d190                          esi_1 = ecx + esi_1 * 0xa - 0x30
1004d190                          
1004d19a                          if (esi_1 s> 0x1450)
1004d1a1                              esi_1 = 0x1451
1004d1a1                              break
1004d1a1                          
1004d19c                          ebx.b = *edi
1004d19e                          edi = &edi[1]
1004d19e                      
1004d1a6                      var_20 = esi_1
1004d1a6                      
1004d1b0                      while (true)
1004d1b0                          BOOL eax_31
1004d1b0                          
1004d1b0                          if (data_10060bac s<= 1)
1004d1c1                              ecx = data_100609a0
1004d1ca                              uint32_t eax_32
1004d1ca                              eax_32.b = *(ecx + (zx.d(ebx.b) << 1))
1004d1cd                              eax_31 = eax_32 & 4
1004d1b0                          else
1004d1b2                              uint32_t eax_30 = zx.d(ebx.b)
1004d1b8                              eax_31, edx = sub_10046f7a(eax_30, edx, ecx, eax_30)
1004d1be                              ecx = 4
1004d1be                          
1004d1d2                          if (eax_31 == 0)
1004d1d2                              break
1004d1d2                          
1004d1d4                          ebx.b = *edi
1004d1d6                          edi = &edi[1]
1004d1d6                      
1004d1d9                      edi -= 1
1004d1da                      break
1004d110                  case 0xb
1004d110                      if (arg7 == 0)
1004d13e                          edi -= 1
1004d13f                          eax = 0xa
1004d110                      else
1004d112                          int32_t eax_22 = sx.d(ebx.b)
1004d115                          ecx = &edi[0xffffffff]
1004d11b                          arg3 = ecx
1004d11b                          
1004d11e                          if (eax_22 == 0x2b)
1004d134                              label_1004d134:
1004d136                              eax = 7
1004d137                              continue
1004d11e                          else
1004d122                              if (eax_22 != 0x2d)
1004d1dc                                  edi = ecx
1004d1dc                                  break
1004d1dc                              
1004d128                              label_1004d128:
1004d128                              var_1c = 0xffffffff
1004d12e                              eax = 7
1004d12f                              continue
1004d12f              
1004d143              if (eax == 0xa)
1004d143                  break
1004d143          
1004d1e5          *arg2 = edi
1004d1e7          int16_t eax_38
1004d1e7          int16_t edx_1
1004d1e7          void* ebx_1
1004d1e7          void* esi_2
1004d1e7          
1004d1e7          if (var_14 == 0)
1004d2c6              edx_1 = 0
1004d2c8              eax_38 = 0
1004d2ca              esi_2 = nullptr
1004d2cc              ebx_1 = nullptr
1004d2ce              result = 4
1004d1e7          else
1004d1f3              void* eax_35
1004d1f3              
1004d1f3              if (var_8 u<= 0x18)
1004d20a                  eax_35 = var_10
1004d1f3              else
1004d1f9                  char var_49
1004d1f9                  
1004d1f9                  if (var_49 s>= 5)
1004d1fb                      char var_49_1 = var_49 + 1
1004d1fb                  
1004d1fe                  var_8 = 0x18
1004d204                  eax_35 = var_10 - 1
1004d205                  var_c += 1
1004d205              
1004d211              if (var_8 u<= 0)
1004d2bc                  edx_1 = 0
1004d2be                  eax_38 = 0
1004d2c0                  esi_2 = nullptr
1004d2c2                  ebx_1 = nullptr
1004d211              else
1004d217                  while (true)
1004d217                      eax_35 -= 1
1004d217                      
1004d21b                      if (*eax_35 != 0)
1004d21b                          break
1004d21b                      
1004d21d                      var_8 -= 1
1004d220                      var_c += 1
1004d220                  
1004d230                  int32_t var_44
1004d230                  sub_1005082e(&var_60, var_8, &var_44)
1004d235                  void* eax_36 = var_20
1004d235                  
1004d240                  if (var_1c s< 0)
1004d242                      eax_36 = neg.d(eax_36)
1004d242                  
1004d244                  void* eax_37 = eax_36 + var_c
1004d244                  
1004d24a                  if (var_24 == 0)
1004d24c                      eax_37 += arg5
1004d24c                  
1004d252                  if (var_28 == 0)
1004d254                      eax_37 -= arg6
1004d254                  
1004d25c                  if (eax_37 s<= 0x1450)
1004d293                      if (eax_37 s< 0xffffebb0)
1004d295                          var_34 = 1
1004d29c                          goto label_1004d265
1004d29c                      
1004d2a6                      sub_10050da8(&var_44, eax_37, arg4)
1004d2ab                      edx_1 = var_44.w
1004d2ae                      ebx_1 = var_44
1004d2b1                      void* var_3e
1004d2b1                      esi_2 = var_3e
1004d2b4                      int16_t var_3a
1004d2b4                      eax_38 = var_3a
1004d25c                  else
1004d25e                      var_30 = 1
1004d265                      label_1004d265:
1004d265                      ebx_1 = arg3
1004d268                      esi_2 = arg3
1004d26b                      eax_38 = arg3.w
1004d26e                      edx_1 = arg3.w
1004d26e              
1004d275              if (var_30 != 0)
1004d277                  ebx_1 = nullptr
1004d279                  eax_38 = 0x7fff
1004d27e                  esi_2 = 0x80000000
1004d283                  edx_1 = 0
1004d285                  result = 2
1004d275              else if (var_34 != 0)
1004d2dd                  edx_1 = 0
1004d2df                  eax_38 = 0
1004d2e1                  esi_2 = nullptr
1004d2e3                  ebx_1 = nullptr
1004d2e5                  result = 1
1004d2e5          
1004d2f3          *(arg1 + 6) = esi_2
1004d2f6          *(arg1 + 2) = ebx_1
1004d2f9          arg1[5] = eax_38 | var_2c
1004d301          *arg1 = edx_1
1004d306          return result
1004d306      
1004ceb7      edi = &edi[1]

1004d307  uint32_t jump_table_1004d307[0xc] = 
1004d307  {
1004d307      [0x0] =  0x1004ced0
1004d30b      [0x1] =  0x1004cf1f
1004d30f      [0x2] =  0x1004cf76
1004d313      [0x3] =  0x1004cfa0
1004d317      [0x4] =  0x1004cffb
1004d31b      [0x5] =  0x1004d072
1004d31f      [0x6] =  0x1004d0a8
1004d323      [0x7] =  0x1004d0f2
1004d327      [0x8] =  0x1004d0d1
1004d32b      [0x9] =  0x1004d156
1004d32f      [0xa] =  0x1004d140
1004d333      [0xb] =  0x1004d10c
1004d337  }

1004d337    int32_t sub_1004d337(int32_t* arg1, char** arg2, void* arg3, int32_t arg4)

1004d358  void var_10
1004d358  int32_t result = sub_1004ce66(&var_10, arg2, arg3, arg4, 0, 0, 0)
1004d358  
1004d369  if (sub_1004c72d(&var_10, arg1) != 1)
1004d372      return result
1004d372  
1004d36b  return result | 2


1004d373    BOOL sub_1004d373(uint32_t arg1, uint8_t* arg2, int32_t arg3, uint16_t* arg4, uint32_t arg5, uint32_t arg6, int32_t arg7)

1004d376  int32_t var_8 = 0xffffffff
1004d378  int32_t var_c = 0x10058950
1004d37d  int32_t var_10 = 0x1004fa8c
1004d388  TEB* fsbase
1004d388  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
1004d389  fsbase->NtTib.ExceptionList = &ExceptionList
1004d396  int32_t __saved_edi
1004d396  int32_t* var_1c = &__saved_edi
1004d399  int32_t eax_1 = data_100635cc
1004d399  
1004d3a2  if (eax_1 != 0)
1004d3a2      goto label_1004d3e2
1004d3a2  
1004d3ba  uint16_t charType
1004d3ba  BOOL result
1004d3ba  
1004d3ba  if (GetStringTypeW(dwInfoType: 1, lpSrcStr: &g_locale_unicode_sample, cchSrc: 1, 
1004d3ba          lpCharType: &charType) == 0)
1004d3d4      if (GetStringTypeA(Locale: 0, dwInfoType: 1, lpSrcStr: &g_locale_ascii_sample, 
1004d3d4              cchSrc: 1, lpCharType: &charType) != 0)
1004d3dc          eax_1 = 2
1004d3dc          goto label_1004d3dd
1004d3dc      
1004d4a8      result = 0
1004d3ba  else
1004d3bc      eax_1 = 1
1004d3dd      label_1004d3dd:
1004d3dd      data_100635cc = eax_1
1004d3e2      label_1004d3e2:
1004d3e2      
1004d3e5      if (eax_1 == 2)
1004d3e7          uint32_t Locale = arg6
1004d3e7          
1004d3ec          if (Locale == 0)
1004d3ee              Locale = data_1006343c
1004d3ee          
1004d400          result = GetStringTypeA(Locale, dwInfoType: arg1, lpSrcStr: arg2, cchSrc: arg3, 
1004d400              lpCharType: arg4)
1004d3e5      else if (eax_1 != 1)
1004d4a8          result = 0
1004d40e      else
1004d417          if (arg5 == 0)
1004d41e              arg5 = g_codepage_default
1004d41e          
1004d42c          int32_t eax_6 = neg.d(arg7)
1004d438          int32_t cchWideChar = MultiByteToWideChar(CodePage: arg5, 
1004d438              dwFlags: (sbb.d(eax_6, eax_6, arg7 != 0) & 8) + 1, lpMultiByteStr: arg2, 
1004d438              cbMultiByte: arg3, lpWideCharStr: nullptr, cchWideChar: 0)
1004d438          
1004d443          if (cchWideChar == 0)
1004d4a8              result = 0
1004d443          else
1004d445              int32_t var_8_1 = 0
1004d448              int32_t edi_1 = cchWideChar * 2
1004d450              int32_t eax_11
1004d450              eax_11.b = (edi_1 + 3).b & 0xfc
1004d452              sub_10044310(eax_11)
1004d457              int32_t* var_1c_1 = &__saved_edi
1004d45c              int32_t* var_28_1 = &__saved_edi
1004d462              sub_1004c9c0(&__saved_edi, 0, edi_1)
1004d477              int32_t var_8_2 = 0xffffffff
1004d477              
1004d47d              if (&__saved_edi == 0)
1004d4a8                  result = 0
1004d47d              else
1004d48e                  int32_t cchSrc = MultiByteToWideChar(CodePage: arg5, 
1004d48e                      dwFlags: MB_PRECOMPOSED, lpMultiByteStr: arg2, cbMultiByte: arg3, 
1004d48e                      lpWideCharStr: &__saved_edi, cchWideChar)
1004d48e                  
1004d496                  if (cchSrc == 0)
1004d4a8                      result = 0
1004d496                  else
1004d4a0                      result = GetStringTypeW(dwInfoType: arg1, lpSrcStr: &__saved_edi, 
1004d4a0                          cchSrc, lpCharType: arg4)
1004d4a0  
1004d4b0  fsbase->NtTib.ExceptionList = ExceptionList
1004d4bb  return result


1004d46c    int32_t sub_1004d46c() __pure

1004d46f  return 1

1004d470                                                  8b 65 e8 33 db 33 f6                                             .e.3.3.

1004d4bc    int32_t sub_1004d4bc() __pure

1004d4be  return 0


1004d4bf    void* sub_1004d4bf(int32_t arg1, int32_t arg2)

1004d4c6  uint32_t dwBytes = arg1 * arg2
1004d4ce  uint32_t dwBytes_1 = dwBytes
1004d4ce  
1004d4d0  if (dwBytes u<= 0xffffffe0)
1004d4d4      if (dwBytes == 0)
1004d4d8          dwBytes = 1
1004d4d8      
1004d4dc      dwBytes = (dwBytes + 0xf) & 0xfffffff0
1004d4dc  
1004d532  bool cond:1_1
1004d532  
1004d532  do
1004d4df      void* result = nullptr
1004d4df      
1004d4e4      if (dwBytes u<= 0xffffffe0)
1004d4ec          if (dwBytes_1 u<= g_arenaThreshold)
1004d4f0              LockArenaSection(index: 9)
1004d4fd              result = ArenaAlloc(dwBytes_1)
1004d4ff              UnlockArenaSection(index: 9)
1004d4ff          
1004d509          if (dwBytes_1 u<= g_arenaThreshold && result != 0)
1004d53a              sub_1004c9c0(result, 0, dwBytes_1)
1004d542              return result
1004d542          
1004d51a          result = HeapAlloc(hHeap: g_heapHandle, dwFlags: HEAP_ZERO_MEMORY, dwBytes)
1004d51a          
1004d51e          if (result != 0 || g_allocMode == 0)
1004d542              return result
1004d4e4      else if (g_allocMode == 0)
1004d542          return result
1004d542      
1004d52f      cond:1_1 = FallbackTryAlloc(dwBytes) == 0
1004d532  while (not(cond:1_1))
1004d548  return nullptr


1004d54c    int32_t sub_1004d54c()

1004d550  int32_t result = 0
1004d552  LockArenaSection(index: 2)
1004d55a  int32_t i = 3
1004d55a  
1004d561  if (data_1006b3c0 s> 3)
1004d5bd      do
1004d56b          int32_t esi_2 = i << 2
1004d56e          int32_t* eax_2 = *(esi_2 + data_1006a080)
1004d56e          
1004d573          if (eax_2 != 0)
1004d579              if ((eax_2[3].b & 0x83) != 0 && sub_10044888(eax_2) != 0xffffffff)
1004d587                  result += 1
1004d587              
1004d58b              if (i s>= 0x14)
1004d599                  DeleteCriticalSection(lpCriticalSection: *(esi_2 + data_1006a080) + 0x20)
1004d5a7                  Gladiator_Free(*(esi_2 + data_1006a080))
1004d5b2                  *(esi_2 + data_1006a080) = 0
1004d5b2          
1004d5b6          i += 1
1004d5bd      while (i s< data_1006b3c0)
1004d5bd  
1004d5c2  UnlockArenaSection(index: 2)
1004d5cc  return result


1004d5cd    int32_t sub_1004d5cd(int32_t* arg1)

1004d5cd  num_active_arena_streams += 1
1004d5d8  void* eax = ArenaAlloc(size: 0x1000)
1004d5e4  arg1[2] = eax
1004d5e4  
1004d5e7  if (eax == 0)
1004d5f6      arg1[3] |= 4
1004d5fd      arg1[2] = &arg1[5]
1004d600      arg1[6] = 2
1004d5e7  else
1004d5e9      arg1[3] |= 8
1004d5ed      arg1[6] = 0x1000
1004d5ed  
1004d607  int32_t result = arg1[2]
1004d60a  arg1[1] = 0
1004d60e  *arg1 = result
1004d610  return result


1004d611    int32_t sub_1004d611()

1004d611  int32_t ecx
1004d611  int32_t var_4_1 = ecx
1004d612  int32_t var_8 = ecx
1004d619  int32_t result = 0xffffffff
1004d61c  LockArenaSection(index: 0x12)
1004d621  int32_t ebx = 0
1004d624  int32_t var_8_1 = 0
1004d628  int32_t var_4 = 0
1004d628  
1004d6cd  for (int32_t* i = &data_10069f40; i s< 0x1006a040; )
1004d631      int32_t* esi_1 = *i
1004d631      
1004d636      if (esi_1 == 0)
1004d6db          void* eax_8 = ArenaAlloc(size: 0x480)
1004d6db          
1004d6e3          if (eax_8 != 0)
1004d6e5              data_1006a07c += 0x20
1004d6f3              void* j = eax_8 + 0x480
1004d6f9              (&data_10069f40)[ebx] = eax_8
1004d6f9              
1004d6fd              for (; eax_8 u< j; j = (&data_10069f40)[ebx] + 0x480)
1004d6ff                  *(eax_8 + 4) = 0
1004d703                  *eax_8 = 0xffffffff
1004d706                  *(eax_8 + 8) = 0
1004d70a                  *(eax_8 + 5) = 0xa
1004d710                  eax_8 += 0x24
1004d710              
1004d71a              result = ebx << 5
1004d71d              sub_1004d918(result)
1004d71d          
1004d6e3          break
1004d6e3      
1004d63c      void* eax_1 = &esi_1[0x120]
1004d63c      
1004d644      while (true)
1004d644          if (esi_1 u>= eax_1)
1004d644              goto label_1004d6ba
1004d644          
1004d64a          if ((esi_1[1].b & 1) == 0)
1004d650              if (esi_1[2] == 0)
1004d654                  LockArenaSection(index: 0x11)
1004d654                  
1004d65e                  if (esi_1[2] == 0)
1004d664                      InitializeCriticalSection(lpCriticalSection: &esi_1[3])
1004d66a                      esi_1[2] += 1
1004d66a                  
1004d66f                  UnlockArenaSection(index: 0x11)
1004d66f              
1004d679              EnterCriticalSection(lpCriticalSection: &esi_1[3])
1004d679              
1004d683              if ((esi_1[1].b & 1) == 0)
1004d683                  break
1004d683              
1004d686              LeaveCriticalSection(lpCriticalSection: &esi_1[3])
1004d68c              ebx = var_8_1
1004d68c          
1004d693          esi_1 = &esi_1[9]
1004d696          eax_1 = *i + 0x480
1004d696      
1004d69d      *esi_1 = 0xffffffff
1004d6ad      result = divs.dp.d(sx.q(esi_1 - *i), 0x24) + var_4
1004d6ad      
1004d6b4      if (result != 0xffffffff)
1004d6b4          break
1004d6b4      
1004d6b6      ebx = var_8_1
1004d6ba      label_1004d6ba:
1004d6ba      var_4 += 0x20
1004d6bf      i = &i[1]
1004d6c2      ebx += 1
1004d6c9      var_8_1 = ebx
1004d6c9  
1004d725  UnlockArenaSection(index: 0x12)
1004d733  return result


1004d734    int32_t sub_1004d734(int32_t arg1, HANDLE arg2)

1004d740  if (arg1 u< data_1006a07c
1004d740          && (&data_10069f40)[arg1 s>> 5][(arg1 & 0x1f) * 9] == 0xffffffff)
1004d76d      if (data_100633c0 == 1)
1004d772          if (arg1 == 0)
1004d787              SetStdHandle(nStdHandle: STD_INPUT_HANDLE, hHandle: arg2)
1004d772          else if (arg1 == 1)
1004d787              SetStdHandle(nStdHandle: STD_OUTPUT_HANDLE, hHandle: arg2)
1004d775          else if (arg1 == 2)
1004d787              SetStdHandle(nStdHandle: STD_ERROR_HANDLE, hHandle: arg2)
1004d787      
1004d78f      (&data_10069f40)[arg1 s>> 5][(arg1 & 0x1f) * 9] = arg2
1004d792      return 0
1004d792  
1004d79c  *sub_10044f86() = 9
1004d7a7  *sub_10044f8f() = 0
1004d7aa  return 0xffffffff


1004d7b0    int32_t sub_1004d7b0(int32_t arg1)

1004d7bc  if (arg1 u< data_1006a07c)
1004d7d7      int32_t* eax_6 = (&data_10069f40)[arg1 s>> 5] + (arg1 & 0x1f) * 0x24
1004d7d7      
1004d7e2      if ((eax_6[1].b & 1) != 0 && *eax_6 != 0xffffffff)
1004d7eb          if (data_100633c0 == 1)
1004d7f1              if (arg1 == 0)
1004d803                  int32_t var_c_3 = 0
1004d806                  SetStdHandle(nStdHandle: STD_INPUT_HANDLE, hHandle: nullptr)
1004d7f1              else if (arg1 == 1)
1004d7fe                  int32_t var_c_2 = 0
1004d806                  SetStdHandle(nStdHandle: STD_OUTPUT_HANDLE, hHandle: nullptr)
1004d7f4              else if (arg1 == 2)
1004d7f9                  int32_t var_c_1 = 0
1004d806                  SetStdHandle(nStdHandle: STD_ERROR_HANDLE, hHandle: nullptr)
1004d806          
1004d80e          (&data_10069f40)[arg1 s>> 5][(arg1 & 0x1f) * 9] = 0xffffffff
1004d812          return 0
1004d812  
1004d81b  *sub_10044f86() = 9
1004d826  *sub_10044f8f() = 0
1004d829  return 0xffffffff


1004d82f    int32_t sub_1004d82f(int32_t arg1)

1004d839  if (arg1 u< data_1006a07c)
1004d843      int32_t eax_1 = (arg1 & 0x1f) * 9
1004d846      int32_t ecx_3 = (&data_10069f40)[arg1 s>> 5]
1004d846      
1004d855      if ((*(ecx_3 + (eax_1 << 2) + 4) & 1) != 0)
1004d859          return *(ecx_3 + (eax_1 << 2))
1004d859  
1004d85f  *sub_10044f86() = 9
1004d86a  *sub_10044f8f() = 0
1004d870  return 0xffffffff


1004d871    int32_t sub_1004d871(HANDLE arg1, char arg2, char arg3)

1004d875  int32_t ebx
1004d875  ebx.b = 0
1004d875  
1004d87c  if ((arg2 & 8) != 0)
1004d87e      ebx.b = 0x20
1004d87e  
1004d885  if ((arg3 & 0x40) != 0)
1004d887      ebx.b |= 0x80
1004d887  
1004d88e  if ((arg2 & 0x80) != 0)
1004d890      ebx.b |= 0x10
1004d890  
1004d896  enum FILE_TYPE eax = GetFileType(hFile: arg1)
1004d896  
1004d89e  if (eax != FILE_TYPE_UNKNOWN)
1004d8b2      if (eax == FILE_TYPE_CHAR)
1004d8b4          ebx.b |= 0x40
1004d8b2      else if (eax == FILE_TYPE_PIPE)
1004d8be          ebx.b |= 8
1004d8be      
1004d8c1      int32_t result = sub_1004d611()
1004d8c1      
1004d8cb      if (result != 0xffffffff)
1004d8e9          sub_1004d734(result, arg1)
1004d8f8          ebx.b |= 1
1004d906          *((&data_10069f40)[result s>> 5] + (result & 0x1f) * 0x24 + 4) = ebx.b
1004d90a          sub_1004d977(result)
1004d912          return result
1004d912      
1004d8d2      *sub_10044f86() = 0x18
1004d8dd      *sub_10044f8f() = 0
1004d89e  else
1004d8a7      sub_10044f13(GetLastError())
1004d8a7  
1004d8e0  return 0xffffffff


1004d918    int32_t sub_1004d918(int32_t arg1)

1004d922  int32_t ecx_1 = arg1 s>> 5
1004d938  int32_t edi_1 = (arg1 & 0x1f) * 0x24
1004d93b  void* esi_1 = (&data_10069f40)[ecx_1] + edi_1
1004d93b  
1004d941  if (*(esi_1 + 8) == 0)
1004d945      LockArenaSection(index: 0x11)
1004d945      
1004d94f      if (*(esi_1 + 8) == 0)
1004d955          InitializeCriticalSection(lpCriticalSection: esi_1 + 0xc)
1004d95b          *(esi_1 + 8) += 1
1004d95b      
1004d960      UnlockArenaSection(index: 0x11)
1004d960  
1004d976  return EnterCriticalSection(lpCriticalSection: (&data_10069f40)[ecx_1] + edi_1 + 0xc)


1004d977    int32_t sub_1004d977(int32_t arg1)

1004d998  return LeaveCriticalSection(lpCriticalSection: (&data_10069f40)[arg1 s>> 5]
1004d998      + (arg1 & 0x1f) * 0x24 + 0xc)


1004d999    int32_t sub_1004d999(PSTR arg1, int32_t arg2, int32_t arg3)

1004d999  int32_t var_4 = arg3
1004d9af  return sub_1004d9b0(arg1, arg2, 0x40)


1004d9b0    int32_t sub_1004d9b0(PSTR arg1, int32_t arg2, char arg3)

1004d9c1  SECURITY_ATTRIBUTES securityAttributes
1004d9c1  securityAttributes.nLength = 0xc
1004d9c8  securityAttributes.lpSecurityDescriptor = 0
1004d9cb  char var_5
1004d9cb  
1004d9cb  if ((arg2.b & 0x80) == 0)
1004d9d6      var_5 = 0
1004d9da      securityAttributes.bInheritHandle = 1
1004d9cb  else
1004d9cd      securityAttributes.bInheritHandle = 0
1004d9d0      var_5 = 0x10
1004d9d0  
1004d9f5  if ((0x8000 & arg2) == 0 && ((arg2:1.b & 0x40) != 0 || data_1006374c != 0x8000))
1004d9f7      var_5 |= 0x80
1004d9f7  
1004da00  int32_t eax_1 = arg2 & 3
1004da04  uint32_t dwDesiredAccess
1004da04  
1004da04  if (eax_1 == 0)
1004da22      dwDesiredAccess = 0x80000000
1004da29      label_1004da29:
1004da29      int32_t arg_c
1004da29      int32_t eax_5 = arg_c
1004da2f      enum FILE_SHARE_MODE dwShareMode
1004da2f      
1004da2f      if (eax_5 == 0x10)
1004da57          dwShareMode = FILE_SHARE_NONE
1004da64          label_1004da64:
1004daa6          enum FILE_CREATION_DISPOSITION dwCreationDisposition
1004daa6          
1004daa6          switch (arg2 & 0x700)
1004da6b              case 0, 0x400
1004da9b                  dwCreationDisposition = OPEN_EXISTING
1004da9e                  goto label_1004dae1
1004da75              case 0x100
1004da92                  dwCreationDisposition = OPEN_ALWAYS
1004da99                  goto label_1004dae1
1004da79              case 0x200
1004da7f                  goto label_1004dace
1004da81              case 0x300
1004da89                  dwCreationDisposition = CREATE_ALWAYS
1004da90                  goto label_1004dae1
1004daa0              case 0x500
1004dad7                  label_1004dad7:
1004dad7                  dwCreationDisposition = CREATE_NEW
1004dae1                  label_1004dae1:
1004dae1                  enum FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes =
1004dae1                      FILE_ATTRIBUTE_NORMAL
1004dae1                  
1004daf8                  if ((0x100 & arg2) != 0 && ((not.d(data_1006347c)).b & arg3 & 0x80) == 0)
1004dafc                      dwFlagsAndAttributes = FILE_ATTRIBUTE_READONLY
1004dafc                  
1004daff                  if ((arg2.b & 0x40) != 0)
1004db01                      dwFlagsAndAttributes |= FILE_FLAG_DELETE_ON_CLOSE
1004db07                      dwDesiredAccess:2.b |= 1
1004db07                  
1004db0e                  if ((arg2:1.b & 0x10) != 0)
1004db10                      dwFlagsAndAttributes |= FILE_ATTRIBUTE_TEMPORARY
1004db10                  
1004db14                  if ((arg2.b & 0x20) != 0)
1004db16                      dwFlagsAndAttributes |= FILE_FLAG_SEQUENTIAL_SCAN
1004db14                  else if ((arg2.b & 0x10) != 0)
1004db22                      dwFlagsAndAttributes |= &__dos_header
1004db22                  
1004db28                  int32_t handle = sub_1004d611()
1004db28                  
1004db34                  if (handle == 0xffffffff)
1004db3b                      *sub_10044f86() = 0x18
1004db46                      *sub_10044f8f() = 0
1004db49                      return 0xffffffff
1004db49                  
1004db63                  HANDLE eax_12 = CreateFileA(lpFileName: arg1, dwDesiredAccess, 
1004db63                      dwShareMode, lpSecurityAttributes: &securityAttributes, 
1004db63                      dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile: nullptr)
1004db6d                  int32_t result
1004db6d                  
1004db6d                  if (eax_12 != 0xffffffff)
1004db84                      enum FILE_TYPE eax_14 = GetFileType(hFile: eax_12)
1004db84                      
1004db8c                      if (eax_14 != FILE_TYPE_UNKNOWN)
1004db9a                          if (eax_14 == FILE_TYPE_CHAR)
1004db9c                              var_5 |= 0x40
1004db9a                          else if (eax_14 == FILE_TYPE_PIPE)
1004dba7                              var_5 |= 8
1004dba7                          
1004dbad                          sub_1004d734(handle, eax_12)
1004dbc5                          char ecx_6 = var_5 | 1
1004dbcb                          arg1:3.b = ecx_6
1004dbd3                          int32_t esi_3 = (handle & 0x1f) * 0x24
1004dbd6                          char temp3_1 = arg1:3.b & 0x48
1004dbd6                          arg1:3.b = temp3_1
1004dbda                          *((&data_10069f40)[handle s>> 5] + esi_3 + 4) = ecx_6
1004dbda                          
1004dbe9                          if (temp3_1 != 0 || (ecx_6 & 0x80) == 0 || (arg2.b & 2) == 0)
1004dc62                              label_1004dc62:
1004dc62                              
1004dc62                              if (arg1:3.b == 0 && (arg2.b & 8) != 0)
1004dc64                                  int32_t eax_25 = (&data_10069f40)[handle s>> 5]
1004dc66                                  *(eax_25 + esi_3 + 4) |= 0x20
1004dc66                              
1004dc6f                              result = handle
1004dbe9                          else
1004dbf0                              int32_t eax_20 = SetStreamPointerInternal(handle, 
1004dbf0                                  offset: 0xffffffff, method: FILE_END)
1004dbf0                              
1004dbfe                              if (eax_20 != 0xffffffff)
1004dc19                                  arg_c:3.b = 0
1004dc19                                  
1004dc34                                  if (sub_10047cd2(handle, &arg_c:3, 1) != 0
1004dc34                                          || arg_c:3.b != 0x1a)
1004dc4b                                      label_1004dc4b:
1004dc4b                                      
1004dc56                                      if (SetStreamPointerInternal(handle, offset: 0, 
1004dc56                                              method: FILE_BEGIN) != 0xffffffff)
1004dc56                                          goto label_1004dc62
1004dc56                                      
1004dc0e                                      CloseStream(handle)
1004dc14                                      result = 0xffffffff
1004dc34                                  else
1004dc44                                      if (sub_10050e7d(handle, eax_20) != 0xffffffff)
1004dc44                                          goto label_1004dc4b
1004dc44                                      
1004dc0e                                      CloseStream(handle)
1004dc14                                      result = 0xffffffff
1004dbfe                              else
1004dc0b                                  if (*sub_10044f8f() == 0x83)
1004dc0b                                      goto label_1004dc62
1004dc0b                                  
1004dc0e                                  CloseStream(handle)
1004dc14                                  result = 0xffffffff
1004db8c                      else
1004db8f                          CloseHandle(hObject: eax_12)
1004db76                          sub_10044f13(GetLastError())
1004db7c                          result = 0xffffffff
1004db6d                  else
1004db76                      sub_10044f13(GetLastError())
1004db7c                      result = 0xffffffff
1004db7c                  
1004dc72                  sub_1004d977(handle)
1004dc78                  return result
1004daa8              case 0x600
1004dace                  label_1004dace:
1004dace                  dwCreationDisposition = TRUNCATE_EXISTING
1004dad5                  goto label_1004dae1
1004dab0              case 0x700
1004dab2                  goto label_1004dad7
1004da2f      else
1004da34          if (eax_5 == 0x20)
1004da4e              dwShareMode = FILE_SHARE_READ
1004da55              goto label_1004da64
1004da55          
1004da39          if (eax_5 == 0x30)
1004da45              dwShareMode = FILE_SHARE_WRITE
1004da4c              goto label_1004da64
1004da4c          
1004da3e          if (eax_5 == 0x40)
1004da40              dwShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE
1004da43              goto label_1004da64
1004da04  else
1004da07      if (eax_1 == 1)
1004da19          dwDesiredAccess = 0x40000000
1004da20          goto label_1004da29
1004da20      
1004da0a      if (eax_1 == 2)
1004da10          dwDesiredAccess = 0xc0000000
1004da17          goto label_1004da29
1004dab9  *sub_10044f86() = 0x16
1004dac4  *sub_10044f8f() = 0
1004dac6  return 0xffffffff


1004dc7f    int32_t sub_1004dc7f(int32_t arg1)

1004dc89  if (arg1 u>= data_1006a07c)
1004dc8d      return 0
1004dc8d  
1004dca0  int32_t eax_2
1004dca0  eax_2.b = *((&data_10069f40)[arg1 s>> 5] + (arg1 & 0x1f) * 0x24 + 4)
1004dca7  return eax_2 & 0x40


1004dca8    BOOL sub_1004dca8(BOOL arg1, BOOL arg2)

1004dcb4  InterlockedIncrement(&data_10069f24)
1004dcc0  int32_t ebx = 0
1004dcc0  
1004dcc8  if (data_10069f14 != 0)
1004dccb      InterlockedDecrement(&data_10069f24)
1004dccf      LockArenaSection(index: 0x13)
1004dcd7      ebx = 1
1004dcd7  
1004dcde  BOOL result = sub_1004dd01(arg1, arg2.w)
1004dcde  
1004dcea  if (ebx == 0)
1004dcf7      InterlockedDecrement(&data_10069f24)
1004dcea  else
1004dcee      UnlockArenaSection(index: 0x13)
1004dcee  
1004dd00  return result


1004dd01    BOOL sub_1004dd01(BOOL arg1, wchar16 arg2)

1004dd04  BOOL lpMultiByteStr = arg1
1004dd04  
1004dd09  if (lpMultiByteStr == 0)
1004dd0c      return lpMultiByteStr
1004dd0c  
1004dd14  if (data_1006343c != 0)
1004dd2b      arg1 = 0
1004dd4a      int32_t eax_1 = WideCharToMultiByte(CodePage: g_codepage_default, dwFlags: 0x220, 
1004dd4a          lpWideCharStr: &arg2, cchWideChar: 1, lpMultiByteStr, cbMultiByte: data_10060bac, 
1004dd4a          lpDefaultChar: nullptr, lpUsedDefaultChar: &arg1)
1004dd4a      
1004dd58      if (eax_1 != 0 && arg1 == 0)
1004dd69          return eax_1
1004dd14  else
1004dd16      wchar16 ecx = arg2
1004dd16      
1004dd1f      if (ecx u<= 0xff)
1004dd23          *lpMultiByteStr = ecx.b
1004dd27          return 1
1004dd27  
1004dd5f  *sub_10044f86() = 0x2a
1004dd65  return 0xffffffff

1004dd6a                                cc cc cc cc cc cc                                                            ......

1004dd70    uint32_t __stdcall __aullrem(int32_t arg1, uint32_t arg2, int32_t arg3, uint32_t arg4) __pure

1004dd77  uint32_t result
1004dd77  
1004dd77  if (arg4 != 0)
1004dd91      uint32_t i = arg4
1004dd93      int32_t ebx_1 = arg3
1004dd97      uint32_t edx_4 = arg2
1004dd9b      int32_t eax_4 = arg1
1004dd9b      
1004dda9      do
1004dda1          ebx_1 = rrc.d(ebx_1, 1, (i & 1) != 0)
1004dda3          uint32_t temp4_1 = edx_4
1004dda3          edx_4 u>>= 1
1004dda5          eax_4 = rrc.d(eax_4, 1, (temp4_1 & 1) != 0)
1004dda7          i u>>= 1
1004dda9      while (i != 0)
1004dda9      
1004ddab      uint32_t temp0_1 = divu.dp.d(edx_4:eax_4, ebx_1)
1004ddaf      int32_t eax_6 = temp0_1 * arg4
1004ddb4      int32_t eax_8
1004ddb4      int32_t edx_5
1004ddb4      edx_5:eax_8 = mulu.dp.d(temp0_1, arg3)
1004ddb8      int32_t edx_6 = edx_5 + eax_6
1004ddb8      
1004ddc0      if (edx_5 + eax_6 u< edx_5 || edx_6 u> arg2)
1004ddca          eax_8 -= arg3
1004ddc0      else if (edx_6 u>= arg2 && eax_8 u> arg1)
1004ddca          eax_8 -= arg3
1004ddca      
1004dddc      result = neg.d(eax_8 - arg1)
1004dd77  else
1004dd8b      result = modu.dp.d((modu.dp.d(0:arg2, arg3)):arg1, arg3)
1004dd8b  
1004dde2  return result


1004dde5    int32_t sub_1004dde5(int32_t arg1, EXCEPTION_POINTERS* arg2)

1004dde8  int32_t ecx
1004dde8  int32_t var_8 = ecx
1004ddeb  void* eax = sub_100493a7()
1004ddf8  int32_t* eax_1 = sub_1004df23(arg1, *(eax + 0x50))
1004ddf8  
1004de01  if (eax_1 != 0)
1004de07      int32_t ebx_1 = eax_1[2]
1004de07      
1004de0f      if (ebx_1 != 0)
1004de18          if (ebx_1 == 5)
1004de1a              eax_1[2] = 0
1004de20              return 1
1004de20          
1004de29          if (ebx_1 != 1)
1004de2f              int32_t ecx_2 = *(eax + 0x54)
1004de38              *(eax + 0x54) = arg2
1004de3b              int32_t ecx_4 = eax_1[1]
1004de3b              
1004de41              if (ecx_4 != 8)
1004df03                  eax_1[2] = 0
1004df08                  ebx_1(ecx_4)
1004de41              else
1004de47                  int32_t i = data_10061338
1004de47                  
1004de58                  if (i s< data_1006133c + i)
1004de5d                      int32_t ecx_8 = i * 0xc
1004de5d                      
1004de7c                      do
1004de63                          ecx_8 += 0xc
1004de66                          *(ecx_8 + *(eax + 0x50) - 4) = 0
1004de77                          i += 1
1004de7c                      while (i s< data_1006133c + data_10061338)
1004de7c                  
1004de83                  int32_t edi_3 = *(eax + 0x58)
1004de83                  
1004de8b                  switch (*eax_1)
1004dec6                      case 0xc000008d
1004decd                          *(eax + 0x58) = 0x82
1004de86                      case 0xc000008e
1004de8d                          *(eax + 0x58) = 0x83
1004ded6                      case 0xc000008f
1004dedd                          *(eax + 0x58) = 0x86
1004de96                      case 0xc0000090
1004de9d                          *(eax + 0x58) = 0x81
1004dea6                      case 0xc0000091
1004dead                          *(eax + 0x58) = 0x84
1004dee6                      case 0xc0000092
1004deed                          *(eax + 0x58) = 0x8a
1004deb6                      case 0xc0000093
1004debd                          *(eax + 0x58) = 0x85
1004debd                  
1004def9                  ebx_1(8, *(eax + 0x58))
1004defc                  *(eax + 0x58) = edi_3
1004defc              
1004df0e              *(eax + 0x54) = ecx_2
1004df0e          
1004df11          return 0xffffffff
1004df11  
1004df19  return UnhandledExceptionFilter(ExceptionInfo: arg2)


1004df23    int32_t* sub_1004df23(int32_t arg1, int32_t* arg2)

1004df27  int32_t ecx = data_10061344
1004df35  int32_t* result = arg2
1004df35  
1004df37  if (*arg2 != arg1)
1004df48      do
1004df3f          result = &result[3]
1004df3f          
1004df44          if (result u>= &arg2[ecx * 3])
1004df44              break
1004df48      while (*result != arg1)
1004df48  
1004df56  if (result u< &arg2[ecx * 3] && *result == arg1)
1004df5c      return result
1004df5c  
1004df58  return nullptr


1004df5d    int32_t sub_1004df5d(uint32_t arg1)

1004df68  LockArenaSection(index: 0x19)
1004df70  uint32_t CodePage = sub_1004e10a(arg1)
1004df82  int32_t result
1004df82  
1004df82  if (CodePage != data_10069c34)
1004df8d      if (CodePage == 0)
1004e0e9          label_1004e0e9:
1004e0e9          sub_1004e187()
1004df8d      else
1004df93          void* edx_1 = nullptr
1004df95          void* eax = &data_10061350
1004df95          
1004df9c          while (true)
1004df9c              if (*eax == CodePage)
1004e012                  void* i = nullptr
1004e025                  int32_t esi_2 = edx_1 * 0x30
1004e028                  *__builtin_memset(s: 0x10069dc0, c: 0, n: 0x100) = 0
1004e029                  char* ebx_1 = esi_2 + 0x10061360
1004e029                  
1004e06c                  do
1004e032                      char* ecx_2 = ebx_1
1004e032                      
1004e034                      if (*ebx_1 != 0)
1004e060                          do
1004e036                              edx_1.b = ecx_2[1]
1004e036                              
1004e03b                              if (edx_1.b == 0)
1004e03b                                  break
1004e03b                              
1004e03d                              uint32_t eax_2 = zx.d(*ecx_2)
1004e040                              uint32_t edi_5 = zx.d(edx_1.b)
1004e040                              
1004e045                              if (eax_2 u<= edi_5)
1004e04a                                  edx_1.b = *(i + 0x10061348)
1004e04a                                  
1004e059                                  do
1004e050                                      *(eax_2 + 0x10069dc1) |= edx_1.b
1004e056                                      eax_2 += 1
1004e059                                  while (eax_2 u<= edi_5)
1004e059                              
1004e05c                              ecx_2 = &ecx_2[2]
1004e060                          while (*ecx_2 != 0)
1004e060                      
1004e062                      i += 1
1004e065                      ebx_1 = &ebx_1[8]
1004e06c                  while (i u< 4)
1004e06c                  
1004e071                  data_10069cbc = 1
1004e07c                  data_10069c34 = CodePage
1004e081                  int32_t eax_4 = sub_1004e154(CodePage)
1004e091                  data_10069cb0 = *(esi_2 + 0x10061354)
1004e091                  void* edi_6 = &data_10069cb4
1004e091                  void* esi_4 = esi_2 + 0x10061358
1004e092                  *edi_6 = *esi_4
1004e094                  data_10069ec4 = eax_4
1004e099                  *(edi_6 + 4) = *(esi_4 + 4)
1004e099                  break
1004e099              
1004df9e              eax += 0x30
1004dfa1              edx_1 += 1
1004dfa1              
1004dfa7              if (eax s>= 0x10061440)
1004dfae                  CPINFO cPInfo
1004dfae                  BOOL eax_1
1004dfae                  uint32_t edx_2
1004dfae                  eax_1, edx_2 = GetCPInfo(CodePage, lpCPInfo: &cPInfo)
1004dfae                  
1004dfb9                  if (eax_1 != 1)
1004e0e7                      if (data_100635d4 != 0)
1004e0e7                          goto label_1004e0e9
1004e0e7                      
1004e0f8                      result = 0xffffffff
1004e0f8                      goto label_1004e0fd
1004e0f8                  
1004dfc1                  data_10069ec4 = 0
1004dfd0                  bool cond:2_1 = cPInfo.MaxCharSize u<= 1
1004dfd5                  *__builtin_memset(s: 0x10069dc0, c: 0, n: 0x100) = 0
1004dfd6                  data_10069c34 = CodePage
1004dfd6                  
1004dfdc                  if (cond:2_1)
1004e0cd                      data_10069cbc = 0
1004dfdc                  else
1004dfe6                      if (cPInfo.LeadByte[0] != 0)
1004dfec                          var_15
1004dfec                          void* ecx_1 = &var_15
1004dfec                          
1004e0a2                          do
1004dfef                              edx_2.b = *ecx_1
1004dfef                              
1004dff3                              if (edx_2.b == 0)
1004dff3                                  break
1004dff3                              
1004e002                              for (uint32_t i_1 = zx.d(*(ecx_1 - 1)); 
1004e002                                      i_1 u<= zx.d(edx_2.b); i_1 += 1)
1004e008                                  *(i_1 + 0x10069dc1) |= 4
1004e008                              
1004e09d                              ecx_1 += 2
1004e0a2                          while (*(ecx_1 - 1) != 0)
1004e0a2                      
1004e0b7                      for (void* i_2 = 1; i_2 u< 0xff; i_2 += 1)
1004e0aa                          *(i_2 + 0x10069dc1) |= 8
1004e0aa                      
1004e0c0                      data_10069ec4 = sub_1004e154(CodePage)
1004e0c5                      data_10069cbc = 1
1004e0c5                  
1004e0db                  data_10069cb0 = 0
1004e0db                  void* edi_9 = &data_10069cb4
1004e0dc                  *edi_9 = 0
1004e0dd                  *(edi_9 + 4) = 0
1004e0db                  goto label_1004e0ee
1004e0db      
1004e0ee      label_1004e0ee:
1004e0ee      sub_1004e1b0()
1004e0ee  
1004df84  result = 0
1004e0fd  label_1004e0fd:
1004e0fd  UnlockArenaSection(index: 0x19)
1004e109  return result


1004e10a    int32_t sub_1004e10a(int32_t arg1)

1004e10a  int32_t codepage_default_1 = arg1
1004e10e  data_100635d4 = 0
1004e10e  
1004e118  if (codepage_default_1 == 0xfffffffe)
1004e11a      data_100635d4 = 1
1004e124      return GetOEMCP() __tailcall
1004e124  
1004e12d  if (codepage_default_1 == 0xfffffffd)
1004e12f      data_100635d4 = 1
1004e139      return GetACP() __tailcall
1004e139  
1004e142  if (codepage_default_1 == 0xfffffffc)
1004e144      codepage_default_1 = g_codepage_default
1004e149      data_100635d4 = 1
1004e149  
1004e153  return codepage_default_1


1004e154    int32_t sub_1004e154(int32_t arg1) __pure

1004e15d  if (arg1 == 0x3a4)
1004e186      return 0x411
1004e186  
1004e162  if (arg1 == 0x3a8)
1004e180      return 0x804
1004e180  
1004e167  if (arg1 == 0x3b5)
1004e17a      return 0x412
1004e17a  
1004e16a  if (arg1 == 0x3b6)
1004e174      return 0x404
1004e174  
1004e16e  return 0


1004e187    int32_t sub_1004e187()

1004e194  *__builtin_memset(s: 0x10069dc0, c: 0, n: 0x100) = 0
1004e19c  data_10069c34 = 0
1004e1a1  data_10069cbc = 0
1004e1a6  data_10069ec4 = 0
1004e1ab  data_10069cb0 = 0
1004e1ab  void* edi_2 = &data_10069cb4
1004e1ac  *edi_2 = 0
1004e1ad  *(edi_2 + 4) = 0
1004e1af  return 0


1004e1b0    void* sub_1004e1b0()

1004e1cd  CPINFO cPInfo
1004e1cd  void* i
1004e1cd  
1004e1cd  if (GetCPInfo(CodePage: data_10069c34, lpCPInfo: &cPInfo) != 1)
1004e330      for (i = nullptr; i u< 0x100; i += 1)
1004e2f8          if (i u>= 0x41 && i u<= 0x5a)
1004e2fa              *(i + 0x10069dc1) |= 0x10
1004e306              *(i + 0x10069cc0) = i.b + 0x20
1004e2f8          else if (i u< 0x61 || i u> 0x7a)
1004e326              *(i + 0x10069cc0) = 0
1004e316          else
1004e318              *(i + 0x10069dc1) |= 0x20
1004e306              *(i + 0x10069cc0) = i.b - 0x20
1004e1cd  else
1004e1e4      uint8_t var_118[0x100]
1004e1e4      uint32_t i_1
1004e1e4      
1004e1e4      for (i_1 = 0; i_1 u< 0x100; i_1 += 1)
1004e1da          var_118[i_1] = i_1.b
1004e1da      
1004e1e6      i_1.b = cPInfo.LeadByte[0]
1004e1e9      var_118[0] = 0x20
1004e1e9      
1004e1f2      if (i_1.b != 0)
1004e1f6          var_11
1004e1f6          void* edx_1 = &var_11
1004e1f6          
1004e227          do
1004e1f9              uint32_t ecx_2 = zx.d(*edx_1)
1004e1fc              i_1 = zx.d(i_1.b)
1004e1fc              
1004e201              if (i_1 u<= ecx_2)
1004e20c                  int32_t ecx_4 = ecx_2 - i_1 + 1
1004e21e                  int32_t __saved_ebp
1004e21e                  __builtin_memset(
1004e21e                      s: __builtin_memset(s: &__saved_ebp + i_1 - 0x114, c: 0x20202020, 
1004e21e                          n: ecx_4 u>> 2 << 2), 
1004e21e                      c: 0x20, n: ecx_4 & 3)
1004e21e              
1004e221              edx_1 += 2
1004e222              i_1.b = *(edx_1 - 1)
1004e227          while (i_1.b != 0)
1004e227      
1004e24a      uint16_t var_518[0x100]
1004e24a      sub_1004d373(1, &var_118, 0x100, &var_518, data_10069c34, data_10069ec4, 0)
1004e26e      char var_218[0x100]
1004e26e      LCMapString_Generic(data_10069ec4, 0x100, &var_118, 0x100, &var_218, 0x100, 
1004e26e          data_10069c34, 0)
1004e296      char var_318[0x100]
1004e296      LCMapString_Generic(data_10069ec4, 0x200, &var_118, 0x100, &var_318, 0x100, 
1004e296          data_10069c34, 0)
1004e29e      i = nullptr
1004e2a0      uint16_t (* ecx_8)[0x100] = &var_518
1004e2a0      
1004e2e5      do
1004e2a6          uint8_t edx_3 = (*ecx_8).b
1004e2a6          
1004e2ac          if ((edx_3 & 1) != 0)
1004e2ae              *(i + 0x10069dc1) |= 0x10
1004e2bc              *(i + 0x10069cc0) = *(&var_218 + i)
1004e2ac          else if ((edx_3 & 2) == 0)
1004e2d9              *(i + 0x10069cc0) = 0
1004e2c7          else
1004e2c9              *(i + 0x10069dc1) |= 0x20
1004e2bc              *(i + 0x10069cc0) = *(&var_318 + i)
1004e2bc          
1004e2e0          i += 1
1004e2e2          ecx_8 = &(*ecx_8)[1]
1004e2e5      while (i u< 0x100)
1004e2e5  
1004e334  return i


1004e335    int32_t sub_1004e335()

1004e335  int32_t eax_3 = data_10069cbc
1004e33a  int32_t eax = neg.d(eax_3)
1004e344  return sbb.d(eax, eax, eax_3 != 0) & data_10069c34


1004e345    void sub_1004e345()

1004e34c  if (data_10069ed8 == 0)
1004e350      sub_1004df5d(0xfffffffd)
1004e356      data_10069ed8 = 1


1004e361    int32_t sub_1004e361(int32_t arg1)

1004e364  LockArenaSection(index: 9)
1004e36d  int32_t result = data_100635dc
1004e375  data_100635dc = arg1
1004e37a  UnlockArenaSection(index: 9)
1004e384  return result


1004e385    int32_t sub_1004e385()

1004e38a  return data_100635dc


1004e38b    int32_t FallbackTryAlloc(int32_t arg1)

1004e38b  int32_t eax_3 = data_100635dc
1004e38b  
1004e392  if (eax_3 != 0 && eax_3(arg1) != 0)
1004e3a2      return 1
1004e3a2  
1004e3a5  return 0


1004e3a6    int32_t sub_1004e3a6()

1004e3ae  if (data_10063448 == 0)
1004e40a      int32_t* var_8_4 = data_100635e0
1004e410      data_10061ce4 = &data_10061ce8
1004e41a      sub_1004e785(var_8_4)
1004e425      Gladiator_Free(data_100635e0)
1004e42a      data_100635e0 = 0
1004e3ae  else
1004e3b7      void* eax_1 = sub_1004d4bf(1, 0xac)
1004e3b7      
1004e3c2      if (eax_1 == 0)
1004e3c8          return 1
1004e3c8      
1004e3d2      if (sub_1004e437(eax_1) != 0)
1004e3d5          sub_1004e785(eax_1)
1004e3db          Gladiator_Free(eax_1)
1004e3c8          return 1
1004e3c8      
1004e3e4      int32_t* var_8_3 = data_100635e0
1004e3ea      data_10061ce4 = eax_1
1004e3f0      sub_1004e785(var_8_3)
1004e3fb      Gladiator_Free(data_100635e0)
1004e401      data_100635e0 = eax_1
1004e401  
1004e436  return 0


1004e437    int32_t sub_1004e437(void** arg1)

1004e43a  int32_t ecx
1004e43a  int32_t var_8 = ecx
1004e43b  int32_t var_c = ecx
1004e43c  uint32_t eax = zx.d(data_1006361a)
1004e443  uint32_t ecx_1 = zx.d(data_1006361c)
1004e443  
1004e456  if (arg1 == 0)
1004e458      return 0xffffffff
1004e458  
1004e4a8  int32_t edi_4 = sub_10051baa(1, eax, 0x31, &arg1[1])
1004e4a8      | sub_10051baa(1, eax, 0x32, &arg1[2]) | sub_10051baa(1, eax, 0x33, &arg1[3])
1004e4a8      | sub_10051baa(1, eax, 0x34, &arg1[4])
1004e4ec  int32_t edi_8 = edi_4 | sub_10051baa(1, eax, 0x35, &arg1[5])
1004e4ec      | sub_10051baa(1, eax, 0x36, &arg1[6]) | sub_10051baa(1, eax, 0x37, arg1)
1004e4ec      | sub_10051baa(1, eax, 0x2a, &arg1[8])
1004e533  int32_t edi_12 = edi_8 | sub_10051baa(1, eax, 0x2b, &arg1[9])
1004e533      | sub_10051baa(1, eax, 0x2c, &arg1[0xa]) | sub_10051baa(1, eax, 0x2d, &arg1[0xb])
1004e533      | sub_10051baa(1, eax, 0x2e, &arg1[0xc])
1004e57a  int32_t edi_16 = edi_12 | sub_10051baa(1, eax, 0x2f, &arg1[0xd])
1004e57a      | sub_10051baa(1, eax, 0x30, &arg1[7]) | sub_10051baa(1, eax, 0x44, &arg1[0xe])
1004e57a      | sub_10051baa(1, eax, 0x45, &arg1[0xf])
1004e5c1  int32_t edi_20 = edi_16 | sub_10051baa(1, eax, 0x46, &arg1[0x10])
1004e5c1      | sub_10051baa(1, eax, 0x47, &arg1[0x11]) | sub_10051baa(1, eax, 0x48, &arg1[0x12])
1004e5c1      | sub_10051baa(1, eax, 0x49, &arg1[0x13])
1004e608  int32_t edi_24 = edi_20 | sub_10051baa(1, eax, 0x4a, &arg1[0x14])
1004e608      | sub_10051baa(1, eax, 0x4b, &arg1[0x15]) | sub_10051baa(1, eax, 0x4c, &arg1[0x16])
1004e608      | sub_10051baa(1, eax, 0x4d, &arg1[0x17])
1004e64f  int32_t edi_28 = edi_24 | sub_10051baa(1, eax, 0x4e, &arg1[0x18])
1004e64f      | sub_10051baa(1, eax, 0x4f, &arg1[0x19]) | sub_10051baa(1, eax, 0x38, &arg1[0x1a])
1004e64f      | sub_10051baa(1, eax, 0x39, &arg1[0x1b])
1004e696  int32_t edi_32 = edi_28 | sub_10051baa(1, eax, 0x3a, &arg1[0x1c])
1004e696      | sub_10051baa(1, eax, 0x3b, &arg1[0x1d]) | sub_10051baa(1, eax, 0x3c, &arg1[0x1e])
1004e696      | sub_10051baa(1, eax, 0x3d, &arg1[0x1f])
1004e6e9  int32_t edi_36 = edi_32 | sub_10051baa(1, eax, 0x3e, &arg1[0x20])
1004e6e9      | sub_10051baa(1, eax, 0x3f, &arg1[0x21]) | sub_10051baa(1, eax, 0x40, &arg1[0x22])
1004e6e9      | sub_10051baa(1, eax, 0x41, &arg1[0x23])
1004e73c  int32_t edi_40 = edi_36 | sub_10051baa(1, eax, 0x42, &arg1[0x24])
1004e73c      | sub_10051baa(1, eax, 0x43, &arg1[0x25]) | sub_10051baa(1, eax, 0x28, &arg1[0x26])
1004e73c      | sub_10051baa(1, eax, 0x29, &arg1[0x27])
1004e76a  int32_t edi_42 = edi_40 | sub_10051baa(1, ecx_1, 0x1f, &arg1[0x28])
1004e76a      | sub_10051baa(1, ecx_1, 0x20, &arg1[0x29])
1004e77e  return sub_10051baa(1, ecx_1, 0x1003, &arg1[0x2a]) | edi_42


1004e785    void sub_1004e785(int32_t* arg1)

1004e78c  if (arg1 != 0)
1004e795      Gladiator_Free(arg1[1])
1004e79d      Gladiator_Free(arg1[2])
1004e7a5      Gladiator_Free(arg1[3])
1004e7ad      Gladiator_Free(arg1[4])
1004e7b5      Gladiator_Free(arg1[5])
1004e7bd      Gladiator_Free(arg1[6])
1004e7c4      Gladiator_Free(*arg1)
1004e7cc      Gladiator_Free(arg1[8])
1004e7d4      Gladiator_Free(arg1[9])
1004e7dc      Gladiator_Free(arg1[0xa])
1004e7e4      Gladiator_Free(arg1[0xb])
1004e7ec      Gladiator_Free(arg1[0xc])
1004e7f4      Gladiator_Free(arg1[0xd])
1004e7fc      Gladiator_Free(arg1[7])
1004e804      Gladiator_Free(arg1[0xe])
1004e80c      Gladiator_Free(arg1[0xf])
1004e817      Gladiator_Free(arg1[0x10])
1004e81f      Gladiator_Free(arg1[0x11])
1004e827      Gladiator_Free(arg1[0x12])
1004e82f      Gladiator_Free(arg1[0x13])
1004e837      Gladiator_Free(arg1[0x14])
1004e83f      Gladiator_Free(arg1[0x15])
1004e847      Gladiator_Free(arg1[0x16])
1004e84f      Gladiator_Free(arg1[0x17])
1004e857      Gladiator_Free(arg1[0x18])
1004e85f      Gladiator_Free(arg1[0x19])
1004e867      Gladiator_Free(arg1[0x1a])
1004e86f      Gladiator_Free(arg1[0x1b])
1004e877      Gladiator_Free(arg1[0x1c])
1004e87f      Gladiator_Free(arg1[0x1d])
1004e887      Gladiator_Free(arg1[0x1e])
1004e88f      Gladiator_Free(arg1[0x1f])
1004e89d      Gladiator_Free(arg1[0x20])
1004e8a8      Gladiator_Free(arg1[0x21])
1004e8b3      Gladiator_Free(arg1[0x22])
1004e8be      Gladiator_Free(arg1[0x23])
1004e8c9      Gladiator_Free(arg1[0x24])
1004e8d4      Gladiator_Free(arg1[0x25])
1004e8df      Gladiator_Free(arg1[0x26])
1004e8ea      Gladiator_Free(arg1[0x27])
1004e8f5      Gladiator_Free(arg1[0x28])
1004e900      Gladiator_Free(arg1[0x29])
1004e90b      Gladiator_Free(arg1[0x2a])


1004e915    int32_t sub_1004e915()

1004e920  uint32_t edi = zx.d(data_10063616)
1004e920  
1004e927  if (data_10063444 == 0)
1004ea2b      Gladiator_Free(data_100635e4)
1004ea36      Gladiator_Free(data_100635e8)
1004ea41      Gladiator_Free(data_100635ec)
1004ea48      data_100635e4 = 0
1004ea4e      data_100635e8 = 0
1004ea54      data_100635ec = 0
1004ea68      *data_10061dd0 = ArenaAlloc(size: 2)
1004ea6f      char* eax_14 = *data_10061dd0
1004ea6f      
1004ea73      if (eax_14 != 0)
1004ea7f          StrDupIntoArena(eax_14, &(*U"$?.<>~^+%/*")[2])
1004ea94          *(data_10061dd0 + 4) = ArenaAlloc(size: 2)
1004ea9c          char* eax_17 = *(data_10061dd0 + 4)
1004ea9c          
1004eaa1          if (eax_17 != 0)
1004eaa9              *eax_17 = 0
1004eab7              *(data_10061dd0 + 8) = ArenaAlloc(size: 2)
1004eabf              char* eax_20 = *(data_10061dd0 + 8)
1004eabf              
1004eac4              if (eax_20 != 0)
1004eaca                  *eax_20 = 0
1004ead3                  char* eax_22
1004ead3                  eax_22.b = **data_10061dd0
1004ead5                  data_10060bb4 = 1
1004eadf                  data_10060bb0 = eax_22.b
1004eae4                  return 0
1004e927  else
1004e958      int32_t esi_2 = sub_10051baa(1, edi, 0xe, &data_100635e4)
1004e958          | sub_10051baa(1, edi, 0xf, &data_100635e8)
1004e95a      int32_t eax_2 = sub_10051baa(1, edi, 0x10, &data_100635ec)
1004e967      sub_1004eaea(data_100635ec)
1004e967      
1004e972      if ((esi_2 | eax_2) == 0)
1004e9b7          void* eax_4 = *data_10061dd0
1004e9b7          
1004e9be          if (eax_4 != &data_10061d98)
1004e9c1              Gladiator_Free(eax_4)
1004e9ce              Gladiator_Free(*(data_10061dd0 + 4))
1004e9db              Gladiator_Free(*(data_10061dd0 + 8))
1004e9db          
1004e9ee          *data_10061dd0 = data_100635e4
1004e9fb          *(data_10061dd0 + 4) = data_100635e8
1004ea09          *(data_10061dd0 + 8) = data_100635ec
1004ea13          char* eax_11
1004ea13          eax_11.b = **data_10061dd0
1004ea15          data_10060bb4 = 1
1004ea1b          data_10060bb0 = eax_11.b
1004eae4          return 0
1004eae4      
1004e97a      Gladiator_Free(data_100635e4)
1004e985      Gladiator_Free(data_100635e8)
1004e990      Gladiator_Free(data_100635ec)
1004e998      data_100635e4 = 0
1004e99e      data_100635e8 = 0
1004e9a4      data_100635ec = 0
1004e9a4  
1004e9aa  return 0xffffffff


1004eaea    char* sub_1004eaea(char* arg1)

1004eaea  char* result_1 = arg1
1004eaee  char* result
1004eaee  result.b = *result_1
1004eaee  
1004eaf2  while (result.b != 0)
1004eafb      if (result.b s>= 0x30 && result.b s<= 0x39)
1004eafd          result.b -= 0x30
1004eaff          *result_1 = result.b
1004eb01          result_1 = &result_1[1]
1004eafb      else if (result.b != 0x3b)
1004eb01          result_1 = &result_1[1]
1004eb0c      else
1004eb0e          result = result_1
1004eb0e          
1004eb1d          do
1004eb16              *result = result[1]
1004eb18              result = &result[1]
1004eb1d          while (*result != 0)
1004eb1d      
1004eb02      result.b = *result_1
1004eb02  
1004eb09  return result


1004eb21    int32_t sub_1004eb21()

1004eb29  if (data_10063440 == 0)
1004eba1      void* eax_9 = data_10061dd0
1004eba6      void* var_8_4 = data_100635f0
1004ebae      data_10061da0 = *eax_9
1004ebb7      data_10061da4 = *(eax_9 + 4)
1004ebc0      data_10061da8 = *(eax_9 + 8)
1004ebc5      data_10061dd0 = &data_10061da0
1004ebcf      sub_1004ed45(var_8_4)
1004ebda      Gladiator_Free(data_100635f0)
1004ebdf      data_100635f0 = 0
1004eb29  else
1004eb2f      void* eax = sub_1004d4bf(1, 0x30)
1004eb2f      
1004eb3a      if (eax == 0)
1004eb40          return 1
1004eb40      
1004eb4a      if (sub_1004ebec(eax) != 0)
1004eb4d          sub_1004ed45(eax)
1004eb53          Gladiator_Free(eax)
1004eb40          return 1
1004eb40      
1004eb63      *eax = *data_10061dd0
1004eb6d      *(eax + 4) = *(data_10061dd0 + 4)
1004eb78      *(eax + 8) = *(data_10061dd0 + 8)
1004eb7b      void* var_8_3 = data_100635f0
1004eb81      data_10061dd0 = eax
1004eb87      sub_1004ed45(var_8_3)
1004eb92      Gladiator_Free(data_100635f0)
1004eb98      data_100635f0 = eax
1004eb98  
1004ebeb  return 0


1004ebec    int32_t sub_1004ebec(void* arg1)

1004ebf2  uint32_t edi = zx.d(data_10063610)
1004ebf2  
1004ebfb  if (arg1 == 0)
1004ebfd      return 0xffffffff
1004ebfd  
1004ec47  int32_t ebx_4 = sub_10051baa(1, edi, 0x15, arg1 + 0xc)
1004ec47      | sub_10051baa(1, edi, 0x14, arg1 + 0x10) | sub_10051baa(1, edi, 0x16, arg1 + 0x14)
1004ec47      | sub_10051baa(1, edi, 0x17, arg1 + 0x18)
1004ec52  int32_t eax_10 = sub_10051baa(1, edi, 0x18, arg1 + 0x1c)
1004ec5c  sub_1004ed0e(*(arg1 + 0x1c))
1004eca2  int32_t ebx_9 = ebx_4 | eax_10 | sub_10051baa(1, edi, 0x50, arg1 + 0x20)
1004eca2      | sub_10051baa(1, edi, 0x51, arg1 + 0x24) | sub_10051baa(0, edi, 0x1a, arg1 + 0x28)
1004eca2      | sub_10051baa(0, edi, 0x19, arg1 + 0x29)
1004ece5  int32_t ebx_13 = ebx_9 | sub_10051baa(0, edi, 0x54, arg1 + 0x2a)
1004ece5      | sub_10051baa(0, edi, 0x55, arg1 + 0x2b) | sub_10051baa(0, edi, 0x56, arg1 + 0x2c)
1004ece5      | sub_10051baa(0, edi, 0x57, arg1 + 0x2d)
1004ecf8  int32_t ebx_14 = ebx_13 | sub_10051baa(0, edi, 0x52, arg1 + 0x2e)
1004ed08  return sub_10051baa(0, edi, 0x53, arg1 + 0x2f) | ebx_14


1004ed0e    char* sub_1004ed0e(char* arg1)

1004ed0e  char* result_1 = arg1
1004ed12  char* result
1004ed12  result.b = *result_1
1004ed12  
1004ed16  while (result.b != 0)
1004ed1f      if (result.b s>= 0x30 && result.b s<= 0x39)
1004ed21          result.b -= 0x30
1004ed23          *result_1 = result.b
1004ed25          result_1 = &result_1[1]
1004ed1f      else if (result.b != 0x3b)
1004ed25          result_1 = &result_1[1]
1004ed30      else
1004ed32          result = result_1
1004ed32          
1004ed41          do
1004ed3a              *result = result[1]
1004ed3c              result = &result[1]
1004ed41          while (*result != 0)
1004ed41      
1004ed26      result.b = *result_1
1004ed26  
1004ed2d  return result


1004ed45    void sub_1004ed45(void* arg1)

1004ed4c  if (arg1 != 0)
1004ed4e      void* eax = *(arg1 + 0xc)
1004ed4e      
1004ed56      if (eax != 0x10063758)
1004ed59          Gladiator_Free(eax)
1004ed61          Gladiator_Free(*(arg1 + 0x10))
1004ed69          Gladiator_Free(*(arg1 + 0x14))
1004ed71          Gladiator_Free(*(arg1 + 0x18))
1004ed79          Gladiator_Free(*(arg1 + 0x1c))
1004ed81          Gladiator_Free(*(arg1 + 0x20))
1004ed89          Gladiator_Free(*(arg1 + 0x24))


1004ed93    int32_t sub_1004ed93()

1004ed9a  int32_t result = 0
1004eda2  void* var_8 = nullptr
1004eda5  void* var_c = nullptr
1004eda5  
1004eda8  if (data_1006343c == 0)
1004efa0      void* __saved_esi_1 = data_100635f4
1004efab      data_100609a0 = u"         (((((                  …"
1004efb0      data_100609a4 = u"         (((((                  …"
1004efb5      Gladiator_Free(__saved_esi_1)
1004efc0      Gladiator_Free(data_100635f8)
1004efc6      data_100635f4 = 0
1004efcd      data_100635f8 = 0
1004efd3      return 0
1004efd3  
1004edb6  int32_t eax_2
1004edb6  
1004edb6  if (g_codepage_default == 0)
1004edcb      eax_2 = sub_10051baa(0, zx.d(data_10063608), 0x1004, &g_codepage_default)
1004edcb  
1004edd5  void* var_14
1004edd5  void* var_10
1004edd5  
1004edd5  if (g_codepage_default == 0 && eax_2 != 0)
1004ef8c      label_1004ef8c:
1004ef8c      Gladiator_Free(var_14)
1004ef94      Gladiator_Free(var_10)
1004ef9d      result = 1
1004edd5  else
1004ede1      void* eax_3 = ArenaAlloc(size: 0x202)
1004ede9      var_14 = eax_3
1004edf6      var_10 = ArenaAlloc(size: 0x202)
1004edff      var_8 = ArenaAlloc(size: 0x101)
1004ee02      void* eax_6 = ArenaAlloc(size: 0x202)
1004ee0c      var_c = eax_6
1004ee0c      
1004ee29      if (eax_3 == 0 || var_10 == 0 || var_8 == 0 || eax_6 == 0)
1004ee0f          goto label_1004ef8c
1004ee0f      
1004ee3f      for (char* i = nullptr; i s< 0x100; i = &i[1])
1004ee39          *(i + var_8) = i.b
1004ee39      
1004ee4b      CPINFO cPInfo
1004ee4b      BOOL eax_7
1004ee4b      uint32_t i_1
1004ee4b      eax_7, i_1 = GetCPInfo(CodePage: g_codepage_default, lpCPInfo: &cPInfo)
1004ee4b      
1004ee5d      if (eax_7 == 0 || cPInfo.MaxCharSize u> 2)
1004ee53          goto label_1004ef8c
1004ee53      
1004ee63      uint32_t eax_8 = zx.d(cPInfo.MaxCharSize.w)
1004ee6a      data_10060bac = eax_8
1004ee74      var_21
1004ee74      
1004ee74      if (eax_8 s> 1 && cPInfo.LeadByte[0] != 0)
1004ee76          void* eax_9 = &var_21
1004ee76          
1004ee9b          do
1004ee79              i_1.b = *eax_9
1004ee79              
1004ee7d              if (i_1.b == 0)
1004ee7d                  break
1004ee7d              
1004ee7f              char* ecx_2 = zx.d(*(eax_9 - 1))
1004ee7f              
1004ee88              for (i_1 = zx.d(i_1.b); ecx_2 s<= i_1; i_1 = zx.d(*eax_9))
1004ee8d                  *(ecx_2 + var_8) = 0
1004ee90                  ecx_2 = &ecx_2[1]
1004ee90              
1004ee97              eax_9 += 2
1004ee9b          while (*(eax_9 - 1) != 0)
1004ee9b      
1004eeb4      if (sub_1004d373(1, var_8, 0x100, eax_3 + 2, 0, 0, 0) == 0)
1004eeb4          goto label_1004ef8c
1004eeb4      
1004eeba      void* ecx_3 = var_c
1004eebd      *eax_3 = 0
1004eebd      
1004eeca      for (int32_t i_2 = 0; i_2 s< 0x100; i_2 += 1)
1004eec2          *ecx_3 = i_2.w
1004eec6          ecx_3 += 2
1004eec6      
1004eedb      BOOL eax_14
1004eedb      uint32_t ecx_5
1004eedb      eax_14, ecx_5 = sub_10051ce8(1, var_c, 0x100, var_10 + 2, 0, 0)
1004eedb      
1004eee5      if (eax_14 == 0)
1004eee5          goto label_1004ef8c
1004eee5      
1004eeee      *var_10 = 0
1004eeee      
1004eefd      if (data_10060bac s> 1 && cPInfo.LeadByte[0] != 0)
1004eeff          void* eax_16 = &var_21
1004eeff          
1004ef2e          do
1004ef02              ecx_5.b = *eax_16
1004ef02              
1004ef06              if (ecx_5.b == 0)
1004ef06                  break
1004ef06              
1004ef08              uint32_t i_3 = zx.d(*(eax_16 - 1))
1004ef08              
1004ef11              if (i_3 s<= zx.d(ecx_5.b))
1004ef16                  ecx_5 = var_14 + (i_3 << 1) + 2
1004ef16                  
1004ef27                  do
1004ef1a                      *ecx_5 = 0x8000
1004ef1f                      i_3 += 1
1004ef24                      ecx_5 += 2
1004ef27                  while (i_3 s<= zx.d(*eax_16))
1004ef27              
1004ef2a              eax_16 += 2
1004ef2e          while (*(eax_16 - 1) != 0)
1004ef2e      
1004ef33      data_100609a4 = var_10 + 2
1004ef3c      data_100609a0 = var_14 + 2
1004ef41      void* eax_20 = data_100635f4
1004ef41      
1004ef48      if (eax_20 != 0)
1004ef4b          Gladiator_Free(eax_20)
1004ef4b      
1004ef54      data_100635f4 = var_14
1004ef59      void* eax_22 = data_100635f8
1004ef59      
1004ef60      if (eax_22 != 0)
1004ef63          Gladiator_Free(eax_22)
1004ef63      
1004ef6c      data_100635f8 = var_10
1004ef74  Gladiator_Free(var_8)
1004ef7c  Gladiator_Free(var_c)
1004efd7  return result


1004efd8    int32_t sub_1004efd8() __pure

1004efda  return 0

1004efdb                                                                                   cc cc cc cc cc                             .....

1004efe0    int32_t sub_1004efe0(int32_t* arg1, char* arg2)

1004efe0  int32_t* edx = arg1
1004efe4  char* ecx = arg2
1004efee  uint32_t eax
1004efee  
1004efee  if ((edx & 3) != 0)
1004f032      if ((edx & 1) == 0)
1004f048          label_1004f048:
1004f048          eax.w = *edx
1004f04b          edx += 2
1004f04e          char temp1_1 = *ecx
1004f04e          
1004f050          if (eax.b != temp1_1)
1004f029              return (sbb.d(eax, eax, eax.b u< temp1_1) << 1) + 1
1004f029          
1004f052          eax.b = eax.b
1004f052          
1004f054          if (eax.b == 0)
1004f022              return 0
1004f022          
1004f056          char temp4_1 = ecx[1]
1004f056          
1004f059          if (eax:1.b != temp4_1)
1004f029              return (sbb.d(eax, eax, eax:1.b u< temp4_1) << 1) + 1
1004f029          
1004f05b          eax:1.b = eax:1.b
1004f05b          
1004f05d          if (eax:1.b == 0)
1004f022              return 0
1004f022          
1004f05f          ecx = &ecx[2]
1004f032      else
1004f034          eax.b = *edx
1004f036          edx += 1
1004f037          char temp2_1 = *ecx
1004f037          
1004f039          if (eax.b != temp2_1)
1004f029              return (sbb.d(eax, eax, eax.b u< temp2_1) << 1) + 1
1004f029          
1004f03b          ecx = &ecx[1]
1004f03c          eax.b = eax.b
1004f03c          
1004f03e          if (eax.b == 0)
1004f022              return 0
1004f022          
1004f046          if ((edx & 2) != 0)
1004f046              goto label_1004f048
1004f046  
1004eff0  while (true)
1004eff0      eax = *edx
1004eff2      char temp0_1 = *ecx
1004eff2      
1004eff4      if (eax.b != temp0_1)
1004f029          return (sbb.d(eax, eax, eax.b u< temp0_1) << 1) + 1
1004f029      
1004eff6      eax.b = eax.b
1004eff6      
1004eff8      if (eax.b == 0)
1004f022          return 0
1004f022      
1004effa      char temp3_1 = ecx[1]
1004effa      
1004effd      if (eax:1.b != temp3_1)
1004f029          return (sbb.d(eax, eax, eax:1.b u< temp3_1) << 1) + 1
1004f029      
1004efff      eax:1.b = eax:1.b
1004efff      
1004f001      if (eax:1.b == 0)
1004f022          return 0
1004f022      
1004f003      eax u>>= 0x10
1004f006      char temp5_1 = ecx[2]
1004f006      
1004f009      if (eax.b != temp5_1)
1004f029          return (sbb.d(eax, eax, eax.b u< temp5_1) << 1) + 1
1004f029      
1004f00b      eax.b = eax.b
1004f00b      
1004f00d      if (eax.b == 0)
1004f022          return 0
1004f022      
1004f00f      char temp6_1 = ecx[3]
1004f00f      
1004f012      if (eax:1.b != temp6_1)
1004f029          return (sbb.d(eax, eax, eax:1.b u< temp6_1) << 1) + 1
1004f029      
1004f014      ecx = &ecx[4]
1004f017      edx = &edx[1]
1004f01a      eax:1.b = eax:1.b
1004f01a      
1004f01c      if (eax:1.b == 0)
1004f022          return 0

1004f023           90                                                                                         .
1004f02a                                8b ff                                                                        ..
1004f064              cc cc cc cc cc cc cc cc cc cc cc cc                                                      ............

1004f070    int32_t StrFindChar(char* arg1, char* arg2)

1004f07d  int32_t s
1004f07d  __builtin_memset(&s, c: 0, n: 0x20)
1004f07e  char* edx = arg2
1004f084  int32_t eax
1004f084  
1004f084  while (true)
1004f084      eax.b = *edx
1004f086      eax.b = eax.b
1004f086      
1004f088      if (eax.b == 0)
1004f088          break
1004f088      
1004f08a      edx = &edx[1]
1004f08b      s |= 1 << (eax u% 0x20)
1004f08b  
1004f091  char* esi = arg1
1004f094  int32_t result = 0xffffffff
1004f094  
1004f0a4  do
1004f098      result += 1
1004f099      eax.b = *esi
1004f09b      eax.b = eax.b
1004f09b      
1004f09d      if (eax.b == 0)
1004f09d          break
1004f09d      
1004f09f      esi = &esi[1]
1004f0a4  while (not(test_bit(s, eax)))
1004f0a4  
1004f0ad  return result

1004f0ae                                            cc cc                                                                ..

1004f0b0    void* StrFindAnyOf(char* arg1, char* arg2)

1004f0bd  int32_t s
1004f0bd  __builtin_memset(&s, c: 0, n: 0x20)
1004f0be  char* edx = arg2
1004f0c4  void* result
1004f0c4  
1004f0c4  while (true)
1004f0c4      result.b = *edx
1004f0c6      result.b = result.b
1004f0c6      
1004f0c8      if (result.b == 0)
1004f0c8          break
1004f0c8      
1004f0ca      edx = &edx[1]
1004f0cb      s |= 1 << (result u% 0x20)
1004f0cb  
1004f0d1  char* esi = arg1
1004f0d1  
1004f0df  do
1004f0d4      result.b = *esi
1004f0d6      result.b = result.b
1004f0d6      
1004f0d8      if (result.b == 0)
1004f0e9          return result
1004f0e9      
1004f0da      esi = &esi[1]
1004f0df  while (not(test_bit(s, result)))
1004f0df  
1004f0e1  return &esi[0xffffffff]


1004f0ea    int32_t sub_1004f0ea(char* arg1, int16_t* arg2, void* arg3)

1004f0f5  if (data_10063640 == 0)
1004f0fe      if (sub_1004f81b() == 0)
1004f10c          data_10063640 = sub_1004f851
1004f0fe      else
1004f105          data_10063640 = GetLocaleInfoA
1004f105  
1004f11c  BOOL eax_3
1004f11c  int32_t ecx_2
1004f11c  int32_t edx
1004f11c  
1004f11c  if (arg1 == 0)
1004f1a2      eax_3, ecx_2, edx = sub_1004f71a()
1004f11c  else
1004f122      data_10063630 = arg1
1004f122      
1004f12a      if (*arg1 != 0)
1004f138          sub_1004f267(&data_100619b0, 0x40, &data_10063630)
1004f138      
1004f140      void* eax_2 = &arg1[0x40]
1004f145      data_10063634 = eax_2
1004f145      
1004f14e      if (eax_2 != 0 && *eax_2 != 0)
1004f15c          sub_1004f267(&data_100618f8, 0x16, &data_10063634)
1004f161          eax_2 = data_10063634
1004f161      
1004f169      char* ecx_1 = data_10063630
1004f16f      data_10063638.d = 0
1004f16f      
1004f17b      if (ecx_1 == 0 || *ecx_1 == 0)
1004f199          if (eax_2 == 0 || *eax_2 == 0)
1004f1a2              eax_3, ecx_2, edx = sub_1004f71a()
1004f199          else
1004f19b              eax_3, ecx_2, edx = sub_1004f65d()
1004f17b      else if (eax_2 == 0 || *eax_2 == 0)
1004f18c          eax_3, ecx_2, edx = sub_1004f54a()
1004f183      else
1004f185          eax_3, ecx_2, edx = sub_1004f2bf()
1004f185  
1004f1ad  if (data_10063638.d != 0)
1004f1ba      int32_t eax_4 = sub_1004f734(eax_3, edx, ecx_2, &arg1[0x80])
1004f1ba      
1004f1c4      if (eax_4 != 0 && IsValidCodePage(CodePage: zx.d(eax_4.w)) != 0
1004f1c4              && IsValidLocale(Locale: data_10063620, dwFlags: LCID_INSTALLED) != 0)
1004f1f4          if (arg2 != 0)
1004f1fd              *arg2 = data_10063620.w
1004f207              arg2[1] = data_1006363c.w
1004f20b              arg2[2] = eax_4.w
1004f20b          
1004f215          if (arg3 == 0)
1004f25e              return 1
1004f25e          
1004f22d          if (data_10063640(data_10063620, 0x1001, arg3, 0x40) != 0
1004f22d                  && data_10063640(data_1006363c, 0x1002, arg3 + 0x40, 0x40) != 0)
1004f254              sub_10051ead(eax_4, arg3 + 0x80, 0xa)
1004f25e              return 1
1004f25e  
1004f261  return 0


1004f267    int32_t sub_1004f267(int32_t arg1, int32_t arg2, char* arg3)

1004f26d  int32_t ebx = 0
1004f274  int32_t i = 1
1004f274  
1004f275  if (arg2 s>= 0)
1004f279      while (i != 0)
1004f280          int32_t eax_2
1004f280          int32_t edx_1
1004f280          edx_1:eax_2 = sx.q(arg2 + ebx)
1004f288          int32_t esi_2 = (eax_2 - edx_1) s>> 1
1004f28a          char* var_14_1 = *(arg1 + (esi_2 << 3))
1004f290          int32_t* eax_5 = arg3
1004f295          char* ecx
1004f295          i = sub_10045cb0(eax_5, edx_1, ecx, *eax_5, var_14_1)
1004f29d          ecx = var_14_1
1004f29d          
1004f29e          if (i == 0)
1004f2a0              ecx = arg3
1004f2a6              *ecx = arg1 + (esi_2 << 3) + 4
1004f29e          else if (i s>= 0)
1004f2b2              ebx = esi_2 + 1
1004f2aa          else
1004f2ad              arg2 = esi_2 - 1
1004f2ad          
1004f2b8          if (ebx s> arg2)
1004f2b8              break
1004f2b8  
1004f2be  return i


1004f2bf    int16_t sub_1004f2bf()

1004f2c5  void* eax = StrLen(data_10063630)
1004f2ca  char* var_8 = data_10063634
1004f2d3  int32_t eax_2 = neg.d(eax - 3)
1004f2d8  data_1006362c = sbb.d(eax_2, eax_2, eax != 3) + 1
1004f2e2  void* eax_6 = StrLen(var_8) - 3
1004f2e6  int32_t eax_7 = neg.d(eax_6)
1004f2ea  data_10063620 = 0
1004f2f2  bool cond:0 = data_1006362c == 0
1004f2fa  data_10063624 = sbb.d(eax_7, eax_7, eax_6 != 0) + 1
1004f2fa  
1004f2ff  if (cond:0)
1004f319      data_10063628 = sub_1004f970(data_10063630)
1004f2ff  else
1004f301      data_10063628 = 2
1004f301  
1004f325  EnumSystemLocalesA(lpLocaleEnumProc: sub_1004f346, dwFlags: 1)
1004f32b  int16_t result = (data_10063638.d).w
1004f32b  
1004f33c  if ((result:1.b & 1) == 0 || (result:1.b & 2) == 0 || (result.b & 7) == 0)
1004f33e      data_10063638.d = 0
1004f33e  
1004f345  return result


1004f346    int32_t __stdcall sub_1004f346(char* arg1)

1004f352  int32_t eax = sub_1004f937(arg1)
1004f360  int32_t eax_1 = data_10063624
1004f365  int32_t eax_2 = neg.d(eax_1)
1004f369  int32_t eax_3
1004f369  eax_3.w = sbb.d(eax_2, eax_2, eax_1 != 0).w & 0xf005
1004f374  char var_7c[0x78]
1004f374  int32_t eax_5
1004f374  int32_t ecx_1
1004f374  int32_t edx
1004f374  eax_5, edx, ecx_1 = data_10063640(eax, eax_3 + 0x1002, &var_7c, 0x78)
1004f374  
1004f37c  if (eax_5 != 0)
1004f39f      if (sub_10045cb0(&var_7c, edx, ecx_1, data_10063634, &var_7c) != 0)
1004f46e          label_1004f46e:
1004f46e          
1004f470          if ((data_10063638.d & 0x300) == 0x300)
1004f540              return not.d(data_10063638.d) u>> 2 & 1
1004f540          
1004f47c          int32_t eax_20 = data_1006362c
1004f481          int32_t eax_21 = neg.d(eax_20)
1004f48b          int32_t eax_25
1004f48b          int32_t ecx_9
1004f48b          int32_t edx_2
1004f48b          eax_25, edx_2, ecx_9 = data_10063640(eax, 
1004f48b              (sbb.d(eax_21, eax_21, eax_20 != 0) & 0xfffff002) + 0x1001, &var_7c, 0x78)
1004f48b          
1004f493          if (eax_25 != 0)
1004f4b7              int32_t var_8c_8
1004f4b7              
1004f4b7              if (sub_10045cb0(&var_7c, edx_2, ecx_9, data_10063630, &var_7c) == 0)
1004f4b9                  data_10063638:1.b |= 2
1004f4b9                  
1004f4d0                  if (data_1006362c == 0 && data_10063628 != 0)
1004f4e4                      if (StrLen(data_10063630) != data_10063628)
1004f4e4                          goto label_1004f521
1004f4e4                      
1004f4e6                      var_8c_8 = 1
1004f4e8                      goto label_1004f51c
1004f4e8                  
1004f521                  label_1004f521:
1004f521                  data_10063638:1.b |= 1
1004f521                  
1004f52e                  if (data_10063620 == 0)
1004f530                      data_10063620 = eax
1004f4b7              else if (data_1006362c == 0)
1004f4f4                  int32_t eax_30 = data_10063628
1004f4f4                  
1004f4fb                  if (eax_30 != 0 && sub_10052050(data_10063630, &var_7c, eax_30) == 0)
1004f514                      var_8c_8 = 0
1004f51c                      label_1004f51c:
1004f51c                      
1004f51f                      if (sub_1004f7b9(eax, var_8c_8) != 0)
1004f51f                          goto label_1004f521
1004f540              return not.d(data_10063638.d) u>> 2 & 1
1004f39f      else
1004f3ab          int32_t eax_8 = data_1006362c
1004f3b0          int32_t eax_9 = neg.d(eax_8)
1004f3ba          int32_t eax_13
1004f3ba          int32_t ecx_3
1004f3ba          int32_t edx_1
1004f3ba          eax_13, edx_1, ecx_3 = data_10063640(eax, 
1004f3ba              (sbb.d(eax_9, eax_9, eax_8 != 0) & 0xfffff002) + 0x1001, &var_7c, 0x78)
1004f3ba          
1004f3c2          if (eax_13 != 0)
1004f3db              if (sub_10045cb0(&var_7c, edx_1, ecx_3, data_10063630, &var_7c) == 0)
1004f3dd                  data_10063638 |= 0x304
1004f3e6                  data_1006363c = eax
1004f3ec                  data_10063620 = eax
1004f3db              else if ((data_10063638.b & 2) == 0)
1004f3fd                  int32_t eax_16 = data_10063628
1004f404                  int32_t eax_17
1004f404                  
1004f404                  if (eax_16 != 0)
1004f411                      eax_17 = sub_10052050(data_10063630, &var_7c, eax_16)
1004f411                  
1004f41b                  if (eax_16 != 0 && eax_17 == 0)
1004f41d                      char* var_8c_4 = data_10063630
1004f423                      data_10063638.d |= 2
1004f42a                      data_1006363c = eax
1004f42a                      
1004f43c                      if (StrLen(var_8c_4) == data_10063628)
1004f3ec                          data_10063620 = eax
1004f41b                  else if ((data_10063638.b & 1) == 0 && sub_1004f79a(eax.w) != 0)
1004f454                      data_10063638.d |= 1
1004f45b                      data_1006363c = eax
1004f45b              
1004f3db              goto label_1004f46e
1004f3db  
1004f495  data_10063638.d = 0
1004f49e  return 1


1004f54a    BOOL sub_1004f54a()

1004f555  void* eax_1 = StrLen(data_10063630) - 3
1004f559  int32_t eax_2 = neg.d(eax_1)
1004f55b  int32_t eax_3 = sbb.d(eax_2, eax_2, eax_1 != 0)
1004f55e  data_1006362c = eax_3 + 1
1004f55e  
1004f563  if (eax_3 == 0xffffffff)
1004f57d      data_10063628 = sub_1004f970(data_10063630)
1004f563  else
1004f565      data_10063628 = 2
1004f565  
1004f589  BOOL result = EnumSystemLocalesA(lpLocaleEnumProc: sub_1004f5a0, dwFlags: 1)
1004f589  
1004f596  if ((data_10063638.b & 4) == 0)
1004f598      data_10063638.d = 0
1004f598  
1004f59f  return result


1004f5a0    int32_t __stdcall sub_1004f5a0(char* arg1)

1004f5aa  int32_t eax = sub_1004f937(arg1)
1004f5b8  int32_t eax_1 = data_1006362c
1004f5bd  int32_t eax_2 = neg.d(eax_1)
1004f5c1  int32_t eax_3
1004f5c1  eax_3.w = sbb.d(eax_2, eax_2, eax_1 != 0).w & 0xf002
1004f5cc  char var_7c[0x78]
1004f5cc  int32_t eax_5
1004f5cc  int32_t ecx_1
1004f5cc  int32_t edx
1004f5cc  eax_5, edx, ecx_1 = data_10063640(eax, eax_3 + 0x1001, &var_7c, 0x78)
1004f5cc  
1004f5d4  if (eax_5 == 0)
1004f5d6      data_10063638.d &= eax_5
1004f5de      return 1
1004f5de  
1004f5eb  int32_t eax_8 = sub_10045cb0(&var_7c, edx, ecx_1, data_10063630, &var_7c)
1004f5f4  int32_t var_84_2
1004f5f4  
1004f5f4  if (eax_8 != 0)
1004f609      if (data_1006362c == 0)
1004f60b          int32_t eax_9 = data_10063628
1004f60b          
1004f612          if (eax_9 != 0)
1004f61f              int32_t eax_10 = sub_10052050(data_10063630, &var_7c, eax_9)
1004f61f              
1004f629              if (eax_10 == 0)
1004f62b                  var_84_2 = eax_10
1004f62b                  goto label_1004f633
1004f5f4  else if (data_1006362c != eax_8)
1004f638      label_1004f638:
1004f638      data_10063638.d |= 4
1004f63f      data_1006363c = eax
1004f645      data_10063620 = eax
1004f5fc  else
1004f5fe      var_84_2 = 1
1004f633      label_1004f633:
1004f633      
1004f636      if (sub_1004f7b9(eax, var_84_2) != 0)
1004f636          goto label_1004f638
1004f655  return not.d(data_10063638.d) u>> 2 & 1


1004f65d    BOOL sub_1004f65d()

1004f668  void* eax_1 = StrLen(data_10063634) - 3
1004f66c  int32_t eax_2 = neg.d(eax_1)
1004f678  data_10063624 = sbb.d(eax_2, eax_2, eax_1 != 0) + 1
1004f67d  BOOL result = EnumSystemLocalesA(lpLocaleEnumProc: sub_1004f694, dwFlags: 1)
1004f67d  
1004f68a  if ((data_10063638.b & 4) == 0)
1004f68c      data_10063638.d = 0
1004f68c  
1004f693  return result


1004f694    int32_t __stdcall sub_1004f694(char* arg1)

1004f69e  int32_t eax = sub_1004f937(arg1)
1004f6ac  int32_t eax_1 = data_10063624
1004f6b1  int32_t eax_2 = neg.d(eax_1)
1004f6b5  int32_t eax_3
1004f6b5  eax_3.w = sbb.d(eax_2, eax_2, eax_1 != 0).w & 0xf005
1004f6c0  char var_7c[0x78]
1004f6c0  int32_t eax_5
1004f6c0  int32_t ecx_1
1004f6c0  int32_t edx
1004f6c0  eax_5, edx, ecx_1 = data_10063640(eax, eax_3 + 0x1002, &var_7c, 0x78)
1004f6c0  
1004f6c8  if (eax_5 == 0)
1004f6ca      data_10063638.d &= eax_5
1004f6d2      return 1
1004f6d2  
1004f6e8  if (sub_10045cb0(&var_7c, edx, ecx_1, data_10063634, &var_7c) == 0
1004f6e8          && sub_1004f79a(eax.w) != 0)
1004f6f5      data_10063638.d |= 4
1004f6fc      data_1006363c = eax
1004f702      data_10063620 = eax
1004f702  
1004f712  return not.d(data_10063638.d) u>> 2 & 1


1004f71a    uint32_t sub_1004f71a()

1004f71a  data_10063638 |= 0x104
1004f723  uint32_t result = GetUserDefaultLCID()
1004f729  data_1006363c = result
1004f72e  data_10063620 = result
1004f733  return result


1004f734    int32_t __convention("regparm") sub_1004f734(int32_t arg1, int32_t arg2, int32_t arg3, char* arg4)

1004f737  int32_t var_8 = arg3
1004f738  int32_t var_c = arg3
1004f744  bool cond:0_1
1004f744  
1004f744  if (arg4 != 0 && *arg4 != 0)
1004f752      cond:0_1 = sub_1004efe0(arg4, "ACP") == 0
1004f752  
1004f755  int32_t result
1004f755  int32_t var_1c_1
1004f755  int32_t* var_18_3
1004f755  
1004f755  if (arg4 == 0 || *arg4 == 0 || cond:0_1)
1004f775      int32_t var_14_2 = 8
1004f777      var_18_3 = &var_c
1004f778      var_1c_1 = 0x1004
1004f783      label_1004f783:
1004f783      result = data_10063640(data_1006363c, var_1c_1, var_18_3, 8)
1004f783      
1004f78b      if (result != 0)
1004f791          result = sub_100443ca(&var_c)
1004f755  else
1004f766      if (sub_1004efe0(arg4, "OCP") == 0)
1004f76b          int32_t var_14_1 = 8
1004f76d          var_18_3 = &var_c
1004f76e          var_1c_1 = 0xb
1004f770          goto label_1004f783
1004f770      
1004f791      result = sub_100443ca(arg4)
1004f799  return result


1004f79a    int32_t sub_1004f79a(int16_t arg1)

1004f7b0  for (void* i = &data_100618e4; i s< &data_100618f8; i += 2)
1004f7a7      if (arg1 == *i)
1004f7b8          return 0
1004f7b8  
1004f7b5  return 1


1004f7b9    int32_t sub_1004f7b9(int32_t arg1, int32_t arg2)

1004f7cf  int32_t eax_1
1004f7cf  eax_1:1.b = (arg1 & 0x3ff):1.b | 4
1004f7db  char var_7c[0x78]
1004f7db  
1004f7db  if (data_10063640(eax_1, 1, &var_7c, 0x78) != 0)
1004f7f0      if (arg1 == sub_1004f937(&var_7c) || arg2 == 0)
1004f81a          return 1
1004f81a      
1004f810      if (sub_1004f970(data_10063630) != StrLen(data_10063630))
1004f81a          return 1
1004f81a  
1004f815  return 0


1004f81b    int32_t sub_1004f81b()

1004f82a  OSVERSIONINFOA versionInformation
1004f82a  versionInformation.dwOSVersionInfoSize = 0x94
1004f82a  
1004f846  if (GetVersionExA(lpVersionInformation: &versionInformation) != 0
1004f846          && versionInformation.dwPlatformId == 2)
1004f84c      return 1
1004f84c  
1004f850  return 0


1004f851    int32_t __stdcall sub_1004f851(uint32_t arg1, uint32_t arg2, uint8_t* arg3, int32_t arg4)

1004f859  int32_t esi = 0
1004f85b  int32_t edi = 0x1a
1004f85b  
1004f886  do
1004f862      int32_t eax_2
1004f862      int32_t edx_1
1004f862      edx_1:eax_2 = sx.q(edi + esi)
1004f865      int32_t eax_4 = (eax_2 - edx_1) s>> 1
1004f86c      int32_t ecx_3 = *(eax_4 * 0x2c + 0x10061440)
1004f86c      
1004f875      if (arg1 == ecx_3)
1004f8a3          char* eax_7
1004f8a3          
1004f8a3          if (arg2 == 1)
1004f903              eax_7 = &(*"040a")[eax_4 * 0x2c]
1004f908              label_1004f908:
1004f908              
1004f913              if (eax_7 != 0 && arg4 s>= 1)
1004f922                  StrCopyFixed(arg3, eax_7, arg4 - 1)
1004f92a                  arg3[arg4 - 1] = 0
1004f931                  return 1
1004f8a3          else
1004f8a7              switch (arg2)
1004f8a6                  case 3
1004f8f9                      eax_7 = eax_4 * 0x2c + &data_10061450
1004f8fe                      goto label_1004f908
1004f8a9                  case 7
1004f8ef                      eax_7 = eax_4 * 0x2c + &data_10061458
1004f8f4                      goto label_1004f908
1004f8ae                  case 0xb
1004f8e5                      eax_7 = eax_4 * 0x2c + &data_1006145c
1004f8ea                      goto label_1004f908
1004f8b3                  case 0x1001
1004f8da                      eax_7 = (&data_1006144c)[eax_4 * 0xb]
1004f8e0                      goto label_1004f908
1004f8bb                  case 0x1002
1004f8cf                      eax_7 = (&data_10061454)[eax_4 * 0xb]
1004f8d5                      goto label_1004f908
1004f8bf                  case 0x1004
1004f8c5                      eax_7 = &(*"1252")[eax_4 * 0x2c]
1004f8ca                      goto label_1004f908
1004f8a3          break
1004f8a3      
1004f87a      if (arg1 u>= ecx_3)
1004f881          esi = eax_4 + 1
1004f87a      else
1004f87c          edi = eax_4 - 1
1004f886  while (esi s<= edi)
1004f886  
1004f892  return GetLocaleInfoA(Locale: arg1, LCType: arg2, lpLCData: arg3, cchData: arg4)


1004f937    int32_t sub_1004f937(char* arg1)

1004f937  char* edx = arg1
1004f93b  int32_t result = 0
1004f93b  
1004f93d  while (true)
1004f93d      int32_t ecx
1004f93d      ecx.b = *edx
1004f93f      edx = &edx[1]
1004f93f      
1004f942      if (ecx.b == 0)
1004f942          break
1004f942      
1004f94c      if (ecx.b s>= 0x61 && ecx.b s<= 0x66)
1004f94e          ecx.b -= 0x27
1004f94c      else if (ecx.b s>= 0x41 && ecx.b s<= 0x46)
1004f95d          ecx.b -= 7
1004f95d      
1004f96b      result = ((result + 0xffffffd) << 4) + sx.d(ecx.b)
1004f96b  
1004f96f  return result


1004f970    int32_t sub_1004f970(char* arg1)

1004f970  char* edx = arg1
1004f974  int32_t result = 0
1004f974  
1004f976  while (true)
1004f976      char ecx = *edx
1004f978      edx = &edx[1]
1004f978      
1004f98b      if ((ecx s< 0x41 || ecx s> 0x5a) && (ecx s< 0x61 || ecx s> 0x7a))
1004f990          return result
1004f990      
1004f98d      result += 1

1004f991                                                     cc cc cc                                                       ...

1004f994    int32_t sub_1004f994(int32_t arg1)

1004f994  int32_t ebp
1004f994  int32_t var_4 = ebp
1004f9a7  int32_t result = RtlUnwind(TargetFrame: arg1, TargetIp: &data_1004f9ac, 
1004f9a7      ExceptionRecord: nullptr, ReturnValue: nullptr)
1004f99a  var_4
1004f9b3  return result


1004f9b4    int32_t sub_1004f9b4(int32_t arg1, int32_t arg2, int32_t* arg3)

1004f9c4  if ((*(arg1 + 4) & 6) == 0)
1004f9d5      return 1
1004f9d5  
1004f9ce  *arg3 = arg2
1004f9d0  return 3


1004f9d6    void* sub_1004f9d6(void* arg1, int32_t arg2)

1004f9dd  void* var_10 = arg1
1004f9de  int32_t var_14 = 0xfffffffe
1004f9e0  int32_t (* var_18)(int32_t arg1, int32_t arg2, int32_t* arg3) = sub_1004f9b4
1004f9e5  TEB* fsbase
1004f9e5  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
1004f9ec  fsbase->NtTib.ExceptionList = &ExceptionList
1004f9ec  
1004f9f7  while (true)
1004f9f7      int32_t ebx_1 = *(arg1 + 8)
1004f9fa      int32_t esi_1 = *(arg1 + 0xc)
1004f9fa      
1004fa06      if (esi_1 == 0xffffffff || esi_1 == arg2)
1004fa30          fsbase->NtTib.ExceptionList = ExceptionList
1004fa3d          return arg1
1004fa3d      
1004fa08      int32_t esi_2 = esi_1 * 3
1004fa0b      int32_t ecx_1 = *(ebx_1 + (esi_2 << 2))
1004fa0e      int32_t var_14_1 = ecx_1
1004fa12      *(arg1 + 0xc) = ecx_1
1004fa12      
1004fa1a      if (*(ebx_1 + (esi_2 << 2) + 4) == 0)
1004fa1c          int32_t var_20_1 = 0x101
1004fa25          void* ebp
1004fa25          sub_1004fa6a(*(ebx_1 + (esi_2 << 2) + 8), ebp)
1004fa2a          (*(ebx_1 + (esi_2 << 2) + 8))()


1004fa3e    int32_t __abnormal_termination()

1004fa40  TEB* fsbase
1004fa40  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
1004fa40  
1004fa59  if (ExceptionList->Handler == sub_1004f9b4
1004fa59          && ExceptionList->__offset(0x8).d == *(ExceptionList->__offset(0xc).d + 0xc))
1004fa5b      return 1
1004fa5b  
1004fa60  return 0

1004fa61     53 51 bb                                                                                       SQ.

1004fa64  void* data_1004fa64 = 0x10061bb8

1004fa68                          eb 0a                                                                            ..

1004fa6a    void __convention("regparm") sub_1004fa6a(int32_t arg1, void* arg2 @ ebp)

1004fa74  data_10061bc0 = *(arg2 + 8)
1004fa77  data_10061bbc = arg1
1004fa7a  data_10061bc4 = arg2

1004fa82        cc cc                                                                                        ..

1004fa84    int32_t __convention("regparm") $$000000(char* arg1, int16_t arg2, void* arg3, void* arg4, int32_t arg5)

1004fa84  char* esi
1004fa84  char* var_4 = esi
1004fa86  arg2:1.b ^= *arg1
1004fa88  char* eax = var_4
1004fa8a  *eax ^= arg2:1.b
1004fa8c  char* ebp
1004fa8c  var_4 = ebp
1004fa8d  char** ebp_1 = &var_4
1004fa92  int32_t ebx
1004fa92  int32_t var_10 = ebx + 2
1004fa93  char* var_14 = esi
1004fa95  char** var_1c = &var_4
1004fa97  void* ebx_3 = arg4
1004faa4  int32_t result
1004faa4  
1004faa4  if ((*(arg3 + 4) & 6) != 0)
1004fb2c      char** var_20_5 = &var_4
1004fb33      sub_1004f9d6(ebx_3, 0xffffffff)
1004fb3c      result = 1
1004faa4  else
1004faaa      void* var_c = arg3
1004fab0      int32_t var_8_1 = arg5
1004fab6      *(ebx_3 - 4) = &var_c
1004fab9      int32_t esi_1 = *(ebx_3 + 0xc)
1004fabc      int32_t edi_1 = *(ebx_3 + 8)
1004fabc      
1004fac2      while (true)
1004fac2          if (esi_1 == 0xffffffff)
1004fb25              result = 1
1004fb2a              break
1004fb2a          
1004fac4          int32_t ecx_1 = esi_1 * 3
1004fac4          
1004facc          if (*(edi_1 + (ecx_1 << 2) + 4) != 0)
1004fad3              int32_t eax_3 = (*(edi_1 + (ecx_1 << 2) + 4))(ebp_1, esi_1, var_1c)
1004fad9              ebx_3 = ebp_1[3]
1004fad9              
1004fade              if (eax_3 != 0)
1004fae0                  if (eax_3 s< 0)
1004fb1e                      result = 0
1004fb23                      break
1004fb23                  
1004fae2                  int32_t edi_2 = *(ebx_3 + 8)
1004fae6                  sub_1004f994(ebx_3)
1004faee                  ebp_1 = ebx_3 + 0x10
1004faf3                  sub_1004f9d6(ebx_3, esi_1)
1004fafb                  int32_t ecx_2 = esi_1 * 3
1004fafe                  int32_t var_20_4 = 1
1004fb04                  sub_1004fa6a(*(edi_2 + (ecx_2 << 2) + 8), ebp_1)
1004fb0c                  *(ebx_3 + 0xc) = *(edi_2 + (ecx_2 << 2))
1004fb0f                  (*(edi_2 + (ecx_2 << 2) + 8))()
1004fb0f          
1004fb13          edi_1 = *(ebx_3 + 8)
1004fb19          esi_1 = *(edi_1 + esi_1 * 0xc)
1004fb19  
1004fb47  *var_1c
1004fb48  return result


1004fb49    void* __stdcall __seh_longjmp_unwind@4(int32_t* arg1)

1004fb4e  *arg1
1004fb61  return sub_1004f9d6(arg1[6], arg1[7])


1004fb64    void sub_1004fb64()

1004fb6b  if (data_10063700 == 0)
1004fb6f      LockArenaSection(index: 0xb)
1004fb6f      
1004fb7c      if (data_10063700 == 0)
1004fb7e          sub_1004fba8(0xb)
1004fb83          data_10063700 += 1
1004fb83      
1004fb8b      UnlockArenaSection(index: 0xb)


1004fb92    int32_t sub_1004fb92()

1004fb99  sub_1004fba8(LockArenaSection(index: 0xb))
1004fba7  return UnlockArenaSection(index: 0xb)


1004fba8    uint32_t __fastcall sub_1004fba8(BOOL arg1)

1004fbab  BOOL usedDefaultChar = arg1
1004fbac  BOOL var_c = arg1
1004fbb6  int32_t var_c_1 = 0
1004fbb9  LockArenaSection(index: 0xc)
1004fbbe  data_10061c70 = 0xffffffff
1004fbc5  data_10061c60 = 0xffffffff
1004fbcc  data_10063648 = 0
1004fbd9  void* eax = sub_10052172(&data_10059024)
1004fbe3  uint32_t result
1004fbe3  
1004fbe3  if (eax == 0)
1004fbea      UnlockArenaSection(index: 0xc)
1004fbf6      result = GetTimeZoneInformation(lpTimeZoneInformation: &data_10063650)
1004fbf6      
1004fbff      if (result != 0xffffffff)
1004fc0a          int32_t ecx_1 = data_100636a4
1004fc10          int32_t eax_2 = data_10063650 * 0x3c
1004fc13          bool cond:0_1 = data_10063696 == 0
1004fc1d          time_offset_base = eax_2
1004fc22          data_10063648 = 1
1004fc22          
1004fc28          if (not(cond:0_1))
1004fc31              time_offset_base = eax_2 + ecx_1 * 0x3c
1004fc31          
1004fc3d          int32_t eax_4
1004fc3d          
1004fc3d          if (data_100636ea != 0)
1004fc3f              eax_4 = data_100636f8
1004fc3f          
1004fc46          if (data_100636ea == 0 || eax_4 == 0)
1004fc5a              time_fallback_enabled = 0
1004fc60              time_fallback_offset = 0
1004fc46          else
1004fc4a              time_fallback_enabled = 1
1004fc53              time_fallback_offset = (eax_4 - ecx_1) * 0x3c
1004fc53          
1004fc95          if (WideCharToMultiByte(CodePage: g_codepage_default, dwFlags: 0x220, 
1004fc95                  lpWideCharStr: &data_10063654, cchWideChar: 0xffffffff, 
1004fc95                  lpMultiByteStr: data_10061c54, cbMultiByte: 0x3f, lpDefaultChar: nullptr, 
1004fc95                  lpUsedDefaultChar: &usedDefaultChar) == 0 || usedDefaultChar != 0)
1004fca7              *data_10061c54 = 0
1004fc95          else
1004fc9c              *(data_10061c54 + 0x3f) = 0
1004fc9c          
1004fcd2          if (WideCharToMultiByte(CodePage: g_codepage_default, dwFlags: 0x220, 
1004fcd2                  lpWideCharStr: &data_100636a8, cchWideChar: 0xffffffff, 
1004fcd2                  lpMultiByteStr: data_10061c58, cbMultiByte: 0x3f, lpDefaultChar: nullptr, 
1004fcd2                  lpUsedDefaultChar: &usedDefaultChar) == 0 || usedDefaultChar != 0)
1004fe19              result = data_10061c58
1004fe1e              *result = 0
1004fcd2          else
1004fcd8              result = data_10061c58
1004fcdd              *(result + 0x3f) = 0
1004fbe3  else if (*eax == 0)
1004fe24      result = UnlockArenaSection(index: 0xc)
1004fce9  else
1004fcef      char* eax_11 = data_100636fc
1004fcf6      bool cond:2_1
1004fcf6      
1004fcf6      if (eax_11 != 0)
1004fd00          cond:2_1 = sub_1004efe0(eax, eax_11) == 0
1004fd00      
1004fd03      if (eax_11 != 0 && cond:2_1)
1004fe24          result = UnlockArenaSection(index: 0xc)
1004fd03      else
1004fd0f          Gladiator_Free(data_100636fc)
1004fd1c          void* eax_15 = ArenaAlloc(size: StrLen(eax) + 1)
1004fd26          data_100636fc = eax_15
1004fd26          
1004fd2b          if (eax_15 == 0)
1004fe24              result = UnlockArenaSection(index: 0xc)
1004fd2b          else
1004fd33              StrDupIntoArena(eax_15, eax)
1004fd39              UnlockArenaSection(index: 0xc)
1004fd47              StrCopyFixed(data_10061c54, eax, 3)
1004fd51              void* esi_3 = eax + 3
1004fd57              *(data_10061c54 + 3) = 0
1004fd57              
1004fd5e              if (*esi_3 == 0x2d)
1004fd60                  var_c_1 = 1
1004fd67                  esi_3 += 1
1004fd67              
1004fd73              int32_t ecx_4 = sub_100443ca(esi_3) * 0xe10
1004fd79              time_offset_base = ecx_4
1004fd79              
1004fd7f              while (true)
1004fd7f                  int32_t eax_17
1004fd7f                  eax_17.b = *esi_3
1004fd7f                  
1004fd83                  if (eax_17.b != 0x2b)
1004fd87                      if (eax_17.b s< 0x30)
1004fd87                          break
1004fd87                      
1004fd8b                      if (eax_17.b s> 0x39)
1004fd8b                          break
1004fd8b                  
1004fd8d                  esi_3 += 1
1004fd8d              
1004fd93              if (*esi_3 == 0x3a)
1004fd95                  esi_3 += 1
1004fd9c                  int32_t eax_19 = sub_100443ca(esi_3) * 0x3c
1004fda6                  ecx_4 = time_offset_base + eax_19
1004fda8                  time_offset_base = ecx_4
1004fda8                  
1004fdae                  while (true)
1004fdae                      eax_19.b = *esi_3
1004fdae                      
1004fdb2                      if (eax_19.b s< 0x30)
1004fdb2                          break
1004fdb2                      
1004fdb6                      if (eax_19.b s> 0x39)
1004fdb6                          break
1004fdb6                      
1004fdb8                      esi_3 += 1
1004fdb8                  
1004fdbe                  if (*esi_3 == 0x3a)
1004fdc0                      esi_3 += 1
1004fdc2                      int32_t eax_20 = sub_100443ca(esi_3)
1004fdce                      ecx_4 = time_offset_base + eax_20
1004fdd0                      time_offset_base = ecx_4
1004fdd0                      
1004fdd6                      while (true)
1004fdd6                          eax_20.b = *esi_3
1004fdd6                          
1004fdda                          if (eax_20.b s< 0x30)
1004fdda                              break
1004fdda                          
1004fdde                          if (eax_20.b s> 0x39)
1004fdde                              break
1004fdde                          
1004fde0                          esi_3 += 1
1004fde0              
1004fde7              if (var_c_1 != 0)
1004fdeb                  time_offset_base = neg.d(ecx_4)
1004fdeb              
1004fdf1              int32_t eax_21 = sx.d(*esi_3)
1004fdf6              time_fallback_enabled = eax_21
1004fdf6              
1004fdfb              if (eax_21 == 0)
1004fe19                  result = data_10061c58
1004fe1e                  *result = 0
1004fdfb              else
1004fe06                  StrCopyFixed(data_10061c58, esi_3, 3)
1004fe0b                  result = data_10061c58
1004fe13                  *(result + 3) = 0
1004fe13  
1004fe2e  return result


1004fe2f    int32_t sub_1004fe2f(void* arg1)

1004fe32  LockArenaSection(index: 0xb)
1004fe3b  int32_t result = sub_1004fe50(arg1)
1004fe44  UnlockArenaSection(index: 0xb)
1004fe4f  return result


1004fe50    int32_t sub_1004fe50(void* arg1)

1004fe5b  if (time_fallback_enabled != 0)
1004fe6b      int32_t eax_1 = *(arg1 + 0x14)
1004fe6b      
1004fe7c      if (eax_1 != data_10061c60 || eax_1 != data_10061c70)
1004fe88          if (data_10063648 == 0)
1004ff67              sub_1004fffc(1, 1, eax_1, 4, 1, 0, 0, 2, 0, 0, 0)
1004ff7c              sub_1004fffc(0, 1, *(arg1 + 0x14), 0xa, 5, 0, 0, 2, 0, 0, 0)
1004fe88          else
1004feb5              int32_t var_34_1
1004feb5              int32_t var_30_1
1004feb5              uint32_t var_2c_1
1004feb5              uint32_t var_28_1
1004feb5              uint32_t var_24_1
1004feb5              uint32_t var_20_1
1004feb5              
1004feb5              if (data_100636e8 != 0)
1004fedb                  var_20_1 = zx.d(data_100636ee)
1004fedc                  var_24_1 = 0
1004fee4                  var_28_1 = 0
1004fee5                  var_2c_1 = zx.d(data_100636ea)
1004fee6                  var_30_1 = eax_1
1004fee7                  var_34_1 = 0
1004feb5              else
1004febe                  var_20_1 = 0
1004febf                  var_24_1 = zx.d(data_100636ec)
1004fec7                  var_28_1 = zx.d(data_100636ee)
1004fecf                  var_2c_1 = zx.d(data_100636ea)
1004fed0                  var_30_1 = eax_1
1004fed1                  var_34_1 = 1
1004fed1              
1004fee9              sub_1004fffc(1, var_34_1, var_30_1, var_2c_1, var_28_1, var_24_1, var_20_1, 
1004fee9                  zx.d(data_100636f0), zx.d(data_100636f2), zx.d(data_100636f4), 
1004fee9                  zx.d(data_100636f6))
1004ff18              int32_t var_34_2
1004ff18              int32_t var_30_2
1004ff18              uint32_t var_2c_2
1004ff18              uint32_t var_28_2
1004ff18              uint32_t var_24_2
1004ff18              uint32_t var_20_2
1004ff18              
1004ff18              if (data_10063694 != 0)
1004ff49                  var_20_2 = zx.d(data_1006369a)
1004ff4a                  var_24_2 = 0
1004ff52                  var_28_2 = 0
1004ff53                  var_2c_2 = zx.d(data_10063696)
1004ff54                  var_30_2 = *(arg1 + 0x14)
1004ff57                  var_34_2 = 0
1004ff18              else
1004ff21                  var_20_2 = 0
1004ff22                  var_24_2 = zx.d(data_10063698)
1004ff2a                  var_28_2 = zx.d(data_1006369a)
1004ff32                  var_2c_2 = zx.d(data_10063696)
1004ff33                  var_30_2 = *(arg1 + 0x14)
1004ff36                  var_34_2 = 1
1004ff36              
1004ff38              sub_1004fffc(0, var_34_2, var_30_2, var_2c_2, var_28_2, var_24_2, var_20_2, 
1004ff38                  zx.d(data_1006369c), zx.d(data_1006369e), zx.d(data_100636a0), 
1004ff38                  zx.d(data_100636a2))
1004ff38      
1004ff84      int32_t edx_1 = data_10061c64
1004ff8a      int32_t eax_11 = data_10061c74
1004ff8f      int32_t ecx_10 = *(arg1 + 0x1c)
1004ff8f      
1004ff94      if (edx_1 s>= eax_11)
1004ffba          if (ecx_10 s< eax_11 || ecx_10 s> edx_1)
1004ffae              return 1
1004ffae          
1004ffc2          if (ecx_10 s<= eax_11 || ecx_10 s>= edx_1)
1004ffd6              label_1004ffd6:
1004ffd6              int32_t eax_18 = ((*(arg1 + 8) * 0x3c + *(arg1 + 4)) * 0x3c + *arg1) * 0x3e8
1004ffde              int32_t result
1004ffde              
1004ffde              if (ecx_10 != edx_1)
1004fff7                  result.b = eax_18 s< data_10061c78
1004ffde              else
1004ffe8                  result.b = eax_18 s>= data_10061c68
1004ffe8              
1004ffeb              return result
1004ff94      else if (ecx_10 s>= edx_1 && ecx_10 s<= eax_11)
1004ffac          if (ecx_10 s<= edx_1 || ecx_10 s>= eax_11)
1004ffa8              goto label_1004ffd6
1004ffa8          
1004ffae          return 1
1004ffae  
1004fe5d  return 0


1004fffc    int32_t sub_1004fffc(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11)

10050008  int32_t ecx_1
10050008  
10050008  if (arg2 != 1)
1005009d      int32_t ecx_2
1005009d      
1005009d      if ((arg3.b & 3) != 0)
100500a8          ecx_2 = *((arg4 << 2) + &stream_buffer_table)
1005009d      else
1005009f          ecx_2 = (&data_10061c78)[arg4]
1005009f      
100500af      ecx_1 = ecx_2 + arg7
10050008  else
10050014      int32_t temp2_1 = arg3 & 3
1005001a      int32_t eax_1
1005001a      int32_t esi_2
1005001a      
1005001a      if (temp2_1 != 0)
10050027          esi_2 = arg4 << 2
1005002a          eax_1 = *(esi_2 + &stream_buffer_table)
1005001a      else
1005001c          esi_2 = arg4 << 2
1005001f          eax_1 = *(esi_2 + &data_10061c78)
1005001f      
10050051      int32_t temp1_1 =
10050051          mods.dp.d(sx.q(arg3 * 0x16d + eax_1 + 1 + ((arg3 - 1) s>> 2) - 0x63db), 7)
10050051      
1005005a      if (temp1_1 s>= arg6)
10050072          ecx_1 = eax_1 + 1 + arg5 * 7 - temp1_1 + arg6
1005005a      else
10050064          ecx_1 = eax_1 + 1 + arg5 * 7 - temp1_1 + arg6 - 7
10050064      
10050078      if (arg5 == 5)
1005007e          int32_t esi_3
1005007e          
1005007e          if (temp2_1 != 0)
10050088              esi_3 = *(esi_2 + &data_10061cb0)
1005007e          else
10050080              esi_3 = *(esi_2 + &data_10061c7c)
10050080          
10050090          if (ecx_1 s> esi_3)
10050092              ecx_1 -= 7
10050092  
100500b6  int32_t result
100500b6  
100500b6  if (arg1 != 1)
100500e6      data_10061c74 = ecx_1
100500fe      int32_t eax_26 = ((arg8 * 0x3c + arg9) * 0x3c + time_fallback_offset + arg10) * 0x3e8
10050104      result = eax_26 + arg11
10050107      data_10061c78 = result
10050107      
1005010c      if (eax_26 + arg11 s< 0)
1005010e          result += 0x5265c00
10050114          data_10061c78 = result
1005012c          data_10061c74 = ecx_1 - 1
1005010c      else if (result s>= 0x5265c00)
10050124          result -= 0x5265c00
10050127          data_10061c78 = result
1005012c          data_10061c74 = ecx_1 + 1
1005012c      
10050132      data_10061c70 = arg3
100500b6  else
100500bb      data_10061c64 = ecx_1
100500c7      data_10061c60 = arg3
100500d9      result = ((arg8 * 0x3c + arg9) * 0x3c + arg10) * 0x3e8 + arg11
100500dc      data_10061c68 = result
100500dc  
1005013b  return result


1005013c    void* sub_1005013c(int32_t* arg1)

10050143  int32_t esi = *arg1
10050145  int32_t ebx = 0
10050147  void* eax = sub_100493a7()
10050147  
10050150  if (esi s< 0)
10050152      return nullptr
10050152  
1005015d  void* eax_2
1005015d  void* result
1005015d  
1005015d  if (*(eax + 0x40) == 0)
10050161      eax_2 = ArenaAlloc(size: 0x24)
10050167      *(eax + 0x40) = eax_2
1005016c      result = &data_10063708
1005016c  
10050171  if (*(eax + 0x40) != 0 || eax_2 != 0)
10050173      result = *(eax + 0x40)
10050173  
1005017e  int32_t temp0_1 = divs.dp.d(sx.q(esi), 0x7861f80)
10050188  int32_t esi_1 = esi + temp0_1 * 0xf879e080
1005018a  void* edx_4 = (temp0_1 << 2) + 0x46
1005018a  
10050198  if (esi_1 s>= 0x1e13380)
1005019a      esi_1 -= 0x1e13380
1005019c      edx_4 += 1
1005019c      
1005019f      if (esi_1 s>= 0x1e13380)
100501a1          esi_1 -= 0x1e13380
100501a8          edx_4 += 1
100501a8          
100501ab          if (esi_1 s< 0x1e28500)
100501b4              ebx = 1
100501ab          else
100501ad              edx_4 += 1
100501ae              esi_1 -= 0x1e28500
100501ae  
100501b7  *(result + 0x14) = edx_4
100501c0  int32_t temp0_2 = divs.dp.d(sx.q(esi_1), 0x15180)
100501c2  void* edi_1 = &data_10061c7c
100501c7  *(result + 0x1c) = temp0_2
100501d0  int32_t esi_2 = esi_1 + temp0_2 * 0xfffeae80
100501d0  
100501d4  if (ebx == 0)
100501d6      edi_1 = &data_10061cb0
100501d6  
100501e0  int32_t eax_10 = 1
100501e1  void* ebx_1 = edi_1 + 4
100501e1  
100501e6  while (*ebx_1 s< *(result + 0x1c))
100501e8      eax_10 += 1
100501e9      ebx_1 += 4
100501e9  
100501ee  int32_t edx_8 = *(result + 0x1c)
100501f2  *(result + 0x10) = eax_10 - 1
10050203  *(result + 0xc) = edx_8 - *(edi_1 + ((eax_10 - 1) << 2))
1005021b  *(result + 0x18) = mods.dp.d(sx.q(divs.dp.d(sx.q(*arg1), 0x15180) + 4), 7)
1005021f  int32_t temp0_4 = divs.dp.d(sx.q(esi_2), 0xe10)
10050222  *(result + 8) = temp0_4
1005022b  int32_t esi_3 = esi_2 + temp0_4 * 0xfffff1f0
10050230  int32_t temp0_5 = divs.dp.d(sx.q(esi_3), 0x3c)
10050232  *(result + 4) = temp0_5
1005023a  *(result + 0x20) = 0
1005023e  *result = esi_3 - temp0_5 * 0x3c
10050240  return result


10050246    void* sub_10050246(int32_t arg1, int32_t* arg2, uint32_t arg3)

10050254  uint32_t ecx = zx.d(*arg3)
10050257  int32_t eax_1 = *arg2
1005025b  arg3 = ecx
1005025e  int32_t var_6c_1
1005025e  
1005025e  if (eax_1 == 1)
1005028b      label_1005028b:
1005028b      var_6c_1 = 8
10050294      label_10050294:
10050294      
1005029e      if (sub_100474c8(var_6c_1, &arg2[6], ecx.b) == 0)
100502b0          int32_t var_24
100502b0          
100502b0          if (arg1 == 0x10 || arg1 == 0x16 || arg1 == 0x1d)
100502c1              double var_34_1 = fconvert.d(fconvert.t(*(arg2 + 0x10)))
100502c7              int32_t var_24_2 = (var_24 & 0xffffffe3) | 3
100502b0          else
100502b2              int32_t var_24_1 = var_24 & 0xfffffffe
100502d9          void var_5c
100502d9          sub_10047215(&var_5c, &arg3, var_6c_1.b, arg1, &arg2[2], &arg2[6])
100502d9          noreturn
1005025e  else
10050261      if (eax_1 == 2)
10050287          var_6c_1 = 4
10050289          goto label_10050294
10050289      
10050264      if (eax_1 == 3)
10050283          var_6c_1 = 0x11
10050285          goto label_10050294
10050285      
10050267      if (eax_1 == 4)
1005027f          var_6c_1 = 0x12
10050281          goto label_10050294
10050281      
1005026a      if (eax_1 == 5)
1005026a          goto label_1005028b
1005026a      
1005026e      if (eax_1 == 7)
10050277          *arg2 = 1
1005026e      else if (eax_1 == 8)
10050273          var_6c_1 = 0x10
10050275          goto label_10050294
100502e9  int16_t x87control
100502e9  sub_100479b8(x87control, arg3, 0xffff)
100502e9  
100502fc  if (*arg2 != 8 && data_100612b0 == 0)
100502fe      int32_t* var_6c_4 = arg2
100502ff      sub_1004d4bc()
100502ff  
10050315  return sub_10047767(*arg2)

100502de                                                                                            83 c4                                ..
100502e0  18                                                                                               .

10050316    int32_t sub_10050316(int32_t arg1, int32_t arg2, int32_t arg3)

10050317  int32_t ebx = 0
10050317  
10050321  if (data_1006372c == 0)
10050328      HMODULE hModule = LoadLibraryA(lpLibFileName: "user32.dll")
10050332      int32_t eax_1
10050332      
10050332      if (hModule != 0)
10050340          eax_1 = GetProcAddress(hModule, lpProcName: "MessageBoxA")
10050344          data_1006372c = eax_1
10050344      
10050349      if (hModule == 0 || eax_1 == 0)
1005039b          return 0
1005039b      
10050359      data_10063730 = GetProcAddress(hModule, lpProcName: "GetActiveWindow")
10050360      data_10063734 = GetProcAddress(hModule, lpProcName: "GetLastActivePopup")
10050360  
10050365  int32_t eax_4 = data_10063730
10050365  
1005036c  if (eax_4 != 0)
10050370      ebx = eax_4()
10050370      
10050374      if (ebx != 0)
10050376          int32_t eax_6 = data_10063734
10050376          
1005037d          if (eax_6 != 0)
10050382              ebx = eax_6(ebx)
10050382  
10050391  return data_1006372c(ebx, arg1, arg2, arg3)


1005039f    int32_t sub_1005039f(int32_t arg1, int32_t arg2)

100503b4  if (arg2 != 4 && arg2 != 3)
100503db      int32_t result
100503db      
100503db      if (arg1 == 2 || arg1 == 0x15 || arg1 == 0x16 || arg1 == 0xf)
10050471          LockArenaSection(index: 1)
10050471          
10050488          if ((arg1 != 2 && arg1 != 0x15) || data_10063748 != 0)
1005047a              goto label_100504a2
1005047a          
10050498          if (SetConsoleCtrlHandler(HandlerRoutine: sub_10050521, Add: 1) == 1)
1005049a              data_10063748 = 1
100504a2              label_100504a2:
100504a2              
100504a2              if (arg1 == 2)
10050504                  result = data_10063738
1005050a                  data_10063738 = arg2
100504a2              else if (arg1 == 0xf)
100504f6                  result = data_10063744
100504fc                  data_10063744 = arg2
100504a7              else if (arg1 == 0x15)
100504e8                  result = data_1006373c
100504ee                  data_1006373c = arg2
100504ac              else if (arg1 != 0x16)
10050512                  result = arg2
100504af              else
100504b1                  result = data_10063740
100504b7                  data_10063740 = arg2
100504b7              
10050517              UnlockArenaSection(index: 1)
1005051d              return result
1005051d          
100504cd          *sub_10044f8f() = GetLastError()
100504cf          UnlockArenaSection(index: 1)
100503db      else if (arg1 == 8 || arg1 == 4 || arg1 == 0xb)
100503f4          void* eax_1 = sub_100493a7()
100503f4          
10050403          if (*(eax_1 + 0x50) != &data_100612c0)
10050403              goto label_10050430
10050403          
1005040b          void* eax_2 = ArenaAlloc(size: data_10061340)
10050413          *(eax_1 + 0x50) = eax_2
10050413          
10050416          if (eax_2 != 0)
10050424              MemCopyFixedSize(eax_2, &data_100612c0, data_10061340)
10050430              label_10050430:
10050430              void* eax_3 = sub_10050705(arg1, *(eax_1 + 0x50))
10050430              
10050439              if (eax_3 != 0)
1005043f                  result = *(eax_3 + 8)
1005043f                  
10050445                  while (*(eax_3 + 4) == arg1)
1005044e                      *(eax_3 + 8) = arg2
1005045a                      eax_3 += 0xc
1005045a                      
10050465                      if (eax_3 u>= *(eax_1 + 0x50) + data_10061344 * 0xc)
10050465                          break
10050465                  
1005051d                  return result
1005051d  
100504da  *sub_10044f86() = 0x16
100504e0  return 0xffffffff


10050521    int32_t __stdcall sub_10050521(int32_t arg1)

10050528  LockArenaSection(index: 1)
10050533  int32_t var_10
10050533  int32_t* eax
10050533  int32_t esi
10050533  
10050533  if (arg1 != 0)
10050544      esi = data_1006373c
1005054a      eax = &data_1006373c
1005054f      var_10 = 0x15
10050533  else
10050535      esi = data_10063738
1005053b      eax = &data_10063738
10050540      var_10 = 2
10050540  
10050554  if (esi == 0)
10050557      UnlockArenaSection(index: 1)
1005055d      return 0
1005055d  
10050563  if (esi == 1)
10050575      UnlockArenaSection(index: 1)
10050563  else
10050565      *eax = 0
10050569      UnlockArenaSection(index: 1)
1005056f      esi(var_10)
1005056f  
1005057b  return 1


10050583    int32_t sub_10050583(void* arg1)

10050583  int32_t __saved_ebp_1
10050583  int32_t __saved_ebp = __saved_ebp_1
1005058c  int32_t var_8 = 0
10050591  int32_t ebx
10050591  int32_t var_14 = ebx
10050592  int32_t esi
10050592  int32_t var_18 = esi
10050594  int32_t edi
10050594  int32_t var_1c = edi
10050594  int32_t* esp_1 = &var_1c
10050595  int32_t result
10050595  void* index
10050595  void* index_1
10050595  void* esi_1
10050595  int32_t* edi_1
10050595  
10050595  if (arg1 == 2)
100505fe      index_1 = data_10063738
10050604      edi_1 = &data_10063738
10050609      label_10050609:
10050609      index = 1
1005060b      var_8 = 1
10050612      LockArenaSection(index)
10050617      esi_1 = arg1
1005061a      esp_1 = &var_1c
1005061e      label_1005061e:
1005061e      
1005061e      if (index_1 != 1)
10050636          int32_t ecx_4 = 0
10050636          
1005063a          if (index_1 == 0)
1005063f              if (var_8 != 0)
10050641                  index = 1
10050643                  UnlockArenaSection(index)
10050643              
10050649              index = 3
10050649              esp_1 = &index
1005064b              ecx_4 = sub_1004bab3(index)
1005064b          
10050660          if (arg1 != 8 && arg1 != 0xb && arg1 != 4)
10050656              goto label_1005067d
10050656          
10050668          int32_t var_c = *(esi_1 + 0x54)
1005066b          *(esi_1 + 0x54) = ecx_4
1005066e          int32_t var_10
1005066e          
1005066e          if (arg1 != 8)
100506b9              *edi_1 = ecx_4
1005066e          else
10050670              int32_t edx_2 = *(esi_1 + 0x58)
10050673              *(esi_1 + 0x58) = 0x8c
1005067a              var_10 = edx_2
1005067d              label_1005067d:
1005067d              
10050680              if (arg1 != 8)
100506b9                  *edi_1 = ecx_4
10050680              else
10050682                  int32_t i = data_10061338
10050682                  
10050691                  if (i s< data_1006133c + i)
10050696                      int32_t eax_15 = i * 0xc
10050696                      
100506b5                      do
1005069c                          eax_15 += 0xc
1005069f                          *(*(esi_1 + 0x50) + eax_15 - 4) = 0
100506b0                          i += 1
100506b5                      while (i s< data_1006133c + data_10061338)
100506b5          
100506bf          if (var_8 != 0)
100506c1              *(esp_1 - 4) = 1
100506c3              UnlockArenaSection()
100506c8              *(esp_1 - 4)
100506c8          
100506cd          if (arg1 != 8)
100506da              *(esp_1 - 4) = arg1
100506dd              index_1()
100506e3              *(esp_1 - 4)
100506e3              
100506ea              if (arg1 == 0xb || arg1 == 4)
100506e4                  goto label_100506f3
100506cd          else
100506cf              *(esp_1 - 4) = *(esi_1 + 0x58)
100506d2              *(esp_1 - 8) = 8
100506d4              index_1()
100506d7              *(esp_1 - 4)
100506f3              label_100506f3:
100506f3              *(esi_1 + 0x54) = var_c
100506f3              
100506f6              if (arg1 == 8)
100506fb                  *(esi_1 + 0x58) = var_10
1005061e      else if (var_8 != 0)
1005062a          index = index_1
1005062b          UnlockArenaSection(index)
10050630          esp_1 = &var_1c
10050630      
100506fe      result = 0
10050595  else
100505a3      if (arg1 == 4 || arg1 == 8 || arg1 == 0xb)
100505e6          esi_1 = sub_100493a7()
100505e8          index = *(esi_1 + 0x50)
100505f6          edi_1 = sub_10050705(arg1, index) + 8
100505f9          esp_1 = &var_1c
100505fa          index_1 = *edi_1
100505fc          goto label_1005061e
100505fc      
100505a8      if (arg1 == 0xf)
100505d4          index_1 = data_10063744
100505da          edi_1 = &data_10063744
100505df          goto label_10050609
100505df      
100505ad      if (arg1 == 0x15)
100505c7          index_1 = data_1006373c
100505cd          edi_1 = &data_1006373c
100505d2          goto label_10050609
100505d2      
100505b0      if (arg1 == 0x16)
100505ba          index_1 = data_10063740
100505c0          edi_1 = &data_10063740
100505c5          goto label_10050609
100505c5      
100505b2      result = 0xffffffff
10050700  *esp_1
10050700  esp_1[1]
10050701  esp_1[2]
10050704  return result


10050705    void* sub_10050705(int32_t arg1, void* arg2)

10050709  int32_t ecx = data_10061344
10050718  void* result = arg2
10050718  
1005071a  if (*(arg2 + 4) != arg1)
1005072c      do
10050722          result += 0xc
10050722          
10050727          if (result u>= arg2 + ecx * 0xc)
10050727              break
1005072c      while (*(result + 4) != arg1)
1005072c  
1005073b  if (result u< arg2 + ecx * 0xc && *(result + 4) == arg1)
10050741      return result
10050741  
1005073d  return nullptr


10050742    void* sub_10050742()

1005074a  return sub_100493a7() + 0x58


1005074b    void* sub_1005074b()

10050753  return sub_100493a7() + 0x54


10050754    int32_t sub_10050754(int32_t arg1, int32_t arg2, int32_t* arg3)

1005075d  int32_t result = 0
1005075f  int32_t ecx = arg1 + arg2
1005075f  
10050768  if (ecx u< arg1 || ecx u< arg2)
1005076c      result = 1
1005076c  
10050772  *arg3 = ecx
10050774  return result


10050775    int32_t sub_10050775(int32_t* arg1, int32_t* arg2)

1005078e  if (sub_10050754(*arg1, *arg2, arg1) != 0 && sub_10050754(arg1[1], 1, &arg1[1]) != 0)
100507a4      arg1[2] += 1
100507a4  
100507ba  if (sub_10050754(arg1[1], arg2[1], &arg1[1]) != 0)
100507bc      arg1[2] += 1
100507bc  
100507d2  return sub_10050754(arg1[2], arg2[2], &arg1[2])


100507d3    int32_t* sub_100507d3(int32_t* arg1)

100507d9  int32_t esi = *arg1
100507db  int32_t edi = arg1[1]
100507e2  *arg1 = esi * 2
100507ec  int32_t ecx_2 = arg1[2]
100507f1  arg1[1] = (edi * 2) | esi u>> 0x1f
100507fc  arg1[2] = ecx_2 << 1 | edi u>> 0x1f
10050800  return arg1


10050801    int32_t* sub_10050801(int32_t* arg1)

10050807  int32_t edx = arg1[2]
1005080a  int32_t ecx = arg1[1]
10050818  arg1[1] = ecx u>> 1 | edx << 0x1f
10050824  int32_t ecx_5 = *arg1 u>> 1 | ecx << 0x1f
10050827  arg1[2] = edx u>> 1
1005082a  *arg1 = ecx_5
1005082d  return arg1


1005082e    int32_t sub_1005082e(char* arg1, int32_t arg2, int32_t arg3)

10050838  int32_t* ebx = arg3
10050840  int32_t var_8 = 0x404e
10050847  *ebx = 0
10050849  ebx[1] = 0
1005084c  ebx[2] = 0
1005084c  
1005084f  if (arg2 u> 0)
10050852      arg3 = arg2
1005089d      int32_t i
1005089d      
1005089d      do
1005085a          int32_t var_14 = *ebx
1005085a          int32_t var_10
1005085a          int32_t* edi_1 = &var_10
1005085a          void* esi_2 = &ebx[1]
1005085b          *edi_1 = *esi_2
1005085d          edi_1[1] = *(esi_2 + 4)
1005085e          sub_100507d3(ebx)
10050864          sub_100507d3(ebx)
1005086e          sub_10050775(ebx, &var_14)
10050874          sub_100507d3(ebx)
1005087c          var_10 = 0
10050880          int32_t var_c_1 = 0
10050887          var_14 = sx.d(*arg1)
1005088f          sub_10050775(ebx, &var_14)
10050897          arg1 = &arg1[1]
1005089a          i = arg3
1005089a          arg3 -= 1
1005089d      while (i != 1)
1005089d  
100508a5  while (ebx[2] == 0)
100508a7      int32_t ecx_1 = ebx[1]
100508af      ebx[2] = ecx_1 u>> 0x10
100508b2      int32_t eax_4 = *ebx
100508c1      var_8 += 0xfff0
100508c8      ebx[1] = eax_4 u>> 0x10 | ecx_1 << 0x10
100508cb      *ebx = eax_4 << 0x10
100508cb  
100508d7  while ((ebx[2] & 0x8000) == 0)
100508da      sub_100507d3(ebx)
100508df      var_8 += 0xffff
100508df  
100508e9  int32_t result
100508e9  result.w = var_8.w
100508ee  *(ebx + 0xa) = result.w
100508f4  return result


100508f5    int32_t sub_100508f5(int16_t arg1, void* arg2, char arg3, void* arg4)

100508ff  int16_t* ebx = arg4
1005090a  int16_t ecx_1 = arg1 & 0x8000
10050910  int16_t eax_1 = arg1 & 0x7fff
10050916  char var_20 = 0xcc
1005091a  char var_1f = 0xcc
1005091e  char var_1e = 0xcc
10050922  char var_1d = 0xcc
10050926  char var_1c = 0xcc
1005092a  char var_1b = 0xcc
1005092e  char var_1a = 0xcc
10050932  char var_19 = 0xcc
10050936  char var_18 = 0xcc
1005093a  char var_17 = 0xcc
1005093e  char var_16 = 0xfb
10050942  char var_15 = 0x3f
10050946  int32_t result = 1
10050946  
1005094f  if (ecx_1 == 0)
10050957      ebx[1].b = 0x20
1005094f  else
10050951      ebx[1].b = 0x2d
10050951  
1005095b  int32_t arg_8
1005095b  int32_t edi = arg_8
1005096a  int32_t arg_4
1005096a  
1005096a  if (eax_1 != 0 || edi != 0 || arg_4 != edi)
10050984      if (eax_1 == 0x7fff)
1005098b          *ebx = 1
1005098b          
100509a0          if ((edi != 0x80000000 || arg_4 != 0) && (edi & 0x40000000) == 0)
100509f3              StrDupIntoArena(&ebx[2], "1#SNAN")
100509f9              *(ebx + 3) = 6
100509a0          else if (ecx_1 != 0 && edi == 0xc0000000)
100509ba              if (arg_4 != 0)
100509ba                  goto label_100509ea
100509ba              
100509d6              StrDupIntoArena(&ebx[2], "1#IND")
100509dc              *(ebx + 3) = 5
100509b4          else if (edi != 0x80000000 || arg_4 != 0)
100509ea              label_100509ea:
100509f3              StrDupIntoArena(&ebx[2], "1#QNAN")
100509f9              *(ebx + 3) = 6
100509cb          else
100509d6              StrDupIntoArena(&ebx[2], "1#INF")
100509dc              *(ebx + 3) = 5
100509dc          
100509e1          return 0
100509e1      
10050a00      uint32_t eax_4 = zx.d(eax_1)
10050a13      int16_t var_14 = 0
10050a24      int32_t var_e_1 = edi
10050a31      int32_t esi_4 = (((eax_4 u>> 8) + (edi u>> 0x18 << 1)) * 0x4d + eax_4 * 0x4d10
10050a31          - 0x134312f4) s>> 0x10
10050a34      int32_t var_12 = arg_4
10050a41      sub_10050da8(&var_14, neg.d(sx.d(esi_4.w)), 1)
10050a41      
10050a4f      if (eax_1 u>= 0x3fff)
10050a54          esi_4 += 1
10050a5a          sub_10050b88(&var_14, &var_20)
10050a5a      
10050a65      *ebx = esi_4.w
10050a68      void* edi_2
10050a68      
10050a68      if ((arg3 & 1) == 0)
10050a7b          edi_2 = arg2
10050a68      else
10050a70          edi_2 = arg2 + sx.d(esi_4.w)
10050a70          
10050a74          if (edi_2 s<= 0)
10050a74              goto label_1005096c
10050a74      
10050a81      if (edi_2 s> 0x15)
10050a85          edi_2 = 0x15
10050a85      
10050a90      int16_t var_a_2 = 0
10050a95      arg4 = 8
10050aa9      void* i
10050aa9      
10050aa9      do
10050aa0          sub_100507d3(&var_14)
10050aa5          i = arg4
10050aa5          arg4 -= 1
10050aa9      while (i != 1)
10050aa9      
10050aad      if (zx.d(eax_1) - 0x3ffe s< 0)
10050ab1          uint32_t i_3 = zx.d((neg.d(zx.d(eax_1) - 0x3ffe)).b)
10050ab1          
10050ab7          if (i_3 s> 0)
10050ac4              uint32_t i_1
10050ac4              
10050ac4              do
10050abd                  sub_10050801(&var_14)
10050ac2                  i_1 = i_3
10050ac2                  i_3 -= 1
10050ac4              while (i_1 != 1)
10050ac4      
10050ac9      void* eax_10 = &ebx[2]
10050ace      arg4 = eax_10
10050ad1      void* ecx_11
10050ad1      
10050ad1      if (edi_2 + 1 s> 0)
10050ad3          arg2 = edi_2 + 1
10050b1e          void* i_2
10050b1e          
10050b1e          do
10050adc              arg_4 = var_14.d
10050adc              int32_t* edi_3 = &arg_8
10050adc              void* esi_8 = &var_12:2
10050add              *edi_3 = *esi_8
10050ae2              edi_3[1] = *(esi_8 + 4)
10050ae3              sub_100507d3(&var_14)
10050aec              sub_100507d3(&var_14)
10050af9              sub_10050775(&var_14, &arg_4)
10050b02              sub_100507d3(&var_14)
10050b07              char eax_11 = var_a_2:1.b
10050b0a              ecx_11 = arg4
10050b0d              var_a_2:1.b = 0
10050b16              arg4 += 1
10050b19              i_2 = arg2
10050b19              arg2 -= 1
10050b1c              *ecx_11 = eax_11 + 0x30
10050b1e          while (i_2 != 1)
10050b20          eax_10 = arg4
10050b20      
10050b23      ecx_11.b = *(eax_10 - 1)
10050b27      void* eax_13 = eax_10 - 2
10050b27      
10050b2e      if (ecx_11.b s>= 0x35)
10050b32          while (true)
10050b32              if (eax_13 u>= &ebx[2])
10050b37                  if (*eax_13 == 0x39)
10050b39                      *eax_13 = 0x30
10050b3c                      eax_13 -= 1
10050b3d                      continue
10050b37                  else if (eax_13 u>= &ebx[2])
10050b41                      break
10050b41              
10050b43              eax_13 += 1
10050b44              *ebx += 1
10050b44              break
10050b44          
10050b47          *eax_13 += 1
10050b47          goto label_10050b49
10050b47      
10050b62      while (true)
10050b62          if (eax_13 u< &ebx[2])
10050b62              goto label_10050b70
10050b62          
10050b67          if (*eax_13 != 0x30)
10050b67              break
10050b67          
10050b69          eax_13 -= 1
10050b69      
10050b6e      if (eax_13 u>= &ebx[2])
10050b49          label_10050b49:
10050b49          eax_13.b -= ebx.b
10050b4b          eax_13.b -= 3
10050b4d          *(ebx + 3) = eax_13.b
10050b53          *(sx.d(eax_13.b) + ebx + 4) = 0
10050b58          return result
10050b58      
10050b70      label_10050b70:
10050b70      *ebx = 0
10050b74      ebx[1].b = 0x20
10050b78      *(ebx + 3) = 1
10050b7c      ebx[2].b = 0x30
1005096a  else
1005096c      label_1005096c:
1005096c      *ebx = 0
10050970      ebx[1].b = 0x20
10050974      *(ebx + 3) = 1
10050978      ebx[2].b = 0x30
10050978  
10050b7f  *(ebx + 5) = 0
10050b85  return 1


10050b88    int16_t* sub_10050b88(int16_t* arg1, int32_t* arg2)

10050b8f  int32_t* ebx = arg2
10050b93  int16_t* esi = arg1
10050b96  int32_t ecx
10050b96  ecx.w = *(ebx + 0xa)
10050b9d  int32_t var_18 = 0
10050ba0  int32_t var_28 = 0
10050ba3  int32_t var_24 = 0
10050ba6  int32_t var_20 = 0
10050ba9  int32_t eax
10050ba9  eax.w = esi[5]
10050bb6  int16_t* result = eax & 0x7fff
10050bb8  int32_t* ecx_1 = ecx & 0x7fff
10050bba  int32_t edi_2 = (ecx ^ eax) & 0x8000
10050bc4  void* edx = ecx_1 + result
10050bc7  arg1 = edx
10050bc7  
10050be0  if (result.w u>= 0x7fff || ecx_1.w u>= 0x7fff || edx.w u> 0xbffd)
10050d88      label_10050d88:
10050d88      int16_t temp0_1 = edi_2.w
10050d88      edi_2.w = neg.w(edi_2.w)
10050d8d      *(esi + 4) = 0
10050d9d      *esi = 0
10050da0      *(esi + 8) = (sbb.d(edi_2, edi_2, temp0_1 != 0) & 0x80000000) + 0x7fff8000
10050be0  else if (edx.w u> 0x3fbf)
10050bf9      if (result.w == 0)
10050bfb          arg1 += 1
10050bfb      
10050c01      if (result.w != 0 || (*(esi + 8) & 0x7fffffff) != 0)
10050c13          result = nullptr
10050c18          label_10050c18:
10050c18          
10050c18          if (ecx_1.w == 0)
10050c1a              arg1 += 1
10050c1a          
10050c29          if (ecx_1.w == 0 && (ebx[2] & 0x7fffffff) == 0 && ebx[1] == 0 && *ebx == 0)
10050c20              goto label_10050c2b
10050c20          
10050c38          void* var_14_1 = nullptr
10050c3e          int32_t* var_8_1 = &var_24
10050c3e          
10050caa          for (arg2 = 5; arg2 s> 0; arg2 -= 1)
10050c51              if (arg2 s> 0)
10050c58                  void* var_c_1 = var_14_1 * 2 + esi
10050c5e                  void* var_10_1 = &ebx[2]
10050c61                  int32_t* j_1 = arg2
10050c9a                  int32_t* j
10050c9a                  
10050c9a                  do
10050c7d                      int32_t eax_8
10050c7d                      eax_8, ecx_1 = sub_10050754(var_8_1[-1], 
10050c7d                          zx.d(*var_c_1) * zx.d(*var_10_1), &var_8_1[-1])
10050c7d                      
10050c87                      if (eax_8 != 0)
10050c8c                          *var_8_1 += 1
10050c8c                      
10050c8f                      var_c_1 += 2
10050c93                      var_10_1 -= 2
10050c97                      j = j_1
10050c97                      j_1 -= 1
10050c9a                  while (j != 1)
10050c9a              
10050c9c              var_8_1 += 2
10050ca0              var_14_1 += 1
10050ca0          
10050cac          arg1 = &arg1[0x6001]
10050cac          
10050cb8          if (arg1.w s<= 0)
10050cdf              label_10050cdf:
10050cdf              arg1 += 0xffff
10050cdf              
10050ceb              if (arg1.w s< 0)
10050cf1                  int32_t i_2 = neg.d(sx.d(arg1.w))
10050cf3                  arg1 += i_2
10050cf6                  int32_t i_1 = i_2
10050d0c                  int32_t i
10050d0c                  
10050d0c                  do
10050cfc                      if ((var_28.b & 1) != 0)
10050cfe                          var_18 += 1
10050cfe                      
10050d05                      sub_10050801(&var_28)
10050d0a                      i = i_1
10050d0a                      i_1 -= 1
10050d0c                  while (i != 1)
10050d0c                  
10050d12                  if (var_18 != 0)
10050d14                      var_28.b |= 1
10050cb8          else
10050cbe              while ((var_20:3.b & 0x80) == 0)
10050cc4                  sub_100507d3(&var_28)
10050cc9                  arg1 += 0xffff
10050cc9                  
10050cd6                  if (arg1.w s<= 0)
10050cd6                      break
10050cd6              
10050cdd              if (arg1.w s<= 0)
10050cdd                  goto label_10050cdf
10050cdd          
10050d2d          if (var_28.w u> 0x8000 || (var_28 & 0x1ffff) == 0x18000)
10050d33              if (var_28 != 0xffffffff)
10050d61                  var_28 += 1
10050d33              else
10050d35                  var_28 = 0
10050d35                  
10050d3d                  if (var_24 != 0xffffffff)
10050d5c                      var_24 += 1
10050d3d                  else
10050d3f                      var_24 = 0
10050d3f                      
10050d49                      if (var_20:2.w != 0xffff)
10050d56                          var_20:2.w += 1
10050d49                      else
10050d4b                          arg1 += 1
10050d4e                          var_20:2.w = 0x8000
10050d4e          
10050d64          result = arg1
10050d64          
10050d6b          if (result.w u>= 0x7fff)
10050d6b              goto label_10050d88
10050d6b          
10050d6d          ecx_1.w = var_28:2.w
10050d71          result |= edi_2
10050d73          *esi = ecx_1.w
10050d79          *(esi + 2) = var_24
10050d7f          *(esi + 6) = var_20
10050d82          esi[5] = result.w
10050c01      else
10050c03          result = nullptr
10050c03          
10050c0c          if (*(esi + 4) != 0 || *esi != 0)
10050c08              goto label_10050c18
10050c08          
10050d82          esi[5] = result.w
10050beb  else
10050bed      result = nullptr
10050c2b      label_10050c2b:
10050c2b      *(esi + 8) = 0
10050c2e      *(esi + 4) = 0
10050c31      *esi = 0
10050c31  
10050da7  return result


10050da8    void sub_10050da8(int32_t arg1, int32_t arg2, int32_t arg3)

10050db6  void** ebx = &data_10061d80
10050db6  
10050dbc  if (arg2 != 0)
10050dbe      if (arg2 s< 0)
10050dca          arg2 = neg.d(arg2)
10050dcd          ebx = &data_10061ee0
10050dcd      
10050dd3      if (arg3 == 0)
10050dd8          *arg1 = 0
10050dd8      
10050dde      while (arg2 != 0)
10050de2          int32_t eax_2 = arg2
10050de5          ebx = &ebx[0x15]
10050de8          arg2 s>>= 3
10050dec          int32_t eax = eax_2 & 7
10050dec          
10050df1          if (eax != 0)
10050df3              int32_t eax_3 = eax * 3
10050dfc              void* esi_1 = &ebx[eax_3]
10050dfc              
10050dff              if (ebx[eax_3].w u>= 0x8000)
10050e04                  int32_t var_10 = *esi_1
10050e04                  void var_c
10050e04                  void* edi_1 = &var_c
10050e04                  void* esi_2 = esi_1 + 4
10050e05                  *edi_1 = *esi_2
10050e06                  *(edi_1 + 4) = *(esi_2 + 4)
10050e07                  var_10 -= 1
10050e0a                  esi_1 = &var_10
10050e0a              
10050e11              sub_10050b88(arg1, esi_1)


10050e24    int32_t sub_10050e24(enum WIN32_ERROR arg1, int32_t arg2)

10050e2f  if (arg1 u< data_1006a07c
10050e2f          && (*((&data_10069f40)[arg1 s>> 5] + (arg1 & ERROR_GEN_FAILURE) * 0x24 + 4) & 1)
10050e2f          != 0)
10050e4e      sub_1004d918(arg1)
10050e58      int32_t result = sub_10050e7d(arg1, arg2)
10050e60      sub_1004d977(arg1)
10050e6c      return result
10050e6c  
10050e72  *sub_10044f86() = 9
10050e7c  return 0xffffffff


10050e7d    int32_t sub_10050e7d(enum WIN32_ERROR arg1, int32_t arg2)

10050e85  sub_10044310(0x1004)
10050e8a  int32_t ebx
10050e8a  int32_t var_8 = ebx
10050e8c  int32_t result = 0
10050e94  uint32_t offset = SetStreamPointerInternal(handle: arg1, offset: 0, method: FILE_CURRENT)
10050e94  
10050ea4  if (offset != 0xffffffff)
10050eb0      uint32_t eax = SetStreamPointerInternal(handle: arg1, offset: 0, method: FILE_END)
10050eb0      
10050eba      if (eax != 0xffffffff)
10050ec4          int32_t i = arg2 - eax
10050ec4          
10050ec8          if (i s> 0)
10050ed8              char var_1008[0xfe4]
10050ed8              sub_1004c9c0(&var_1008, 0, 0x1000)
10050ee5              int32_t eax_1 = sub_10052248(arg1, 0x8000)
10050ee5              
10050f14              do
10050ef2                  int32_t i_1 = 0x1000
10050ef2                  
10050ef4                  if (i s< 0x1000)
10050ef6                      i_1 = i
10050ef6                  
10050f03                  int32_t eax_2 = WriteHandleInternal(arg1, &var_1008, i_1)
10050f03                  
10050f0e                  if (eax_2 == 0xffffffff)
10050f20                      if (*sub_10044f8f() == 5)
10050f27                          *sub_10044f86() = 0xd
10050f27                      
10050f2d                      result = 0xffffffff
10050f2d                      break
10050f2d                  
10050f10                  i -= eax_2
10050f14              while (i s> 0)
10050f14              
10050f36              sub_10052248(arg1, eax_1)
10050ec8          else if (i s< 0)
10050f49              SetStreamPointerInternal(handle: arg1, offset: arg2, method: FILE_BEGIN)
10050f5a              BOOL eax_6 = SetEndOfFile(hFile: sub_1004d82f(arg1))
10050f62              int32_t esi_1 = neg.d(eax_6)
10050f68              result = neg.d(sbb.d(esi_1, esi_1, eax_6 != 0)) - 1
10050f68              
10050f6b              if (result == 0xffffffff)
10050f72                  *sub_10044f86() = 0xd
10050f85                  *sub_10044f8f() = GetLastError()
10050f85          
10050f8f          SetStreamPointerInternal(handle: arg1, offset, method: FILE_BEGIN)
10050f97          return result
10050f97  
10050f9c  return 0xffffffff


10050fa2    void* sub_10050fa2()

10050fa5  int32_t ecx
10050fa5  int32_t var_8 = ecx
10050fa6  int32_t var_c = ecx
10050fa9  void* esi = data_10061ce4
10050fb0  void* var_c_1 = esi
10050fb3  void* ebx = nullptr
10050fb5  int32_t i_2 = 7
10050fdb  int32_t i
10050fdb  
10050fdb  do
10050fbf      void* eax_1 = StrLen(*(esi + 0x1c))
10050fcd      int32_t eax_3 = StrLen(*esi) + ebx
10050fd0      esi += 4
10050fd3      i = i_2
10050fd3      i_2 -= 1
10050fd7      ebx = eax_3 + eax_1 + 2
10050fdb  while (i != 1)
10050fe4  void* result_1 = ArenaAlloc(size: ebx + 1)
10050fe9  void* result = result_1
10050fe9  
10050fec  if (result_1 != 0)
10050fee      void* edi_2 = var_c_1
10050ff3      int32_t i_3 = 7
10051024      int32_t i_1
10051024      
10051024      do
10050ff4          *result_1 = 0x3a
10051006          void* esi_2 = result_1 + 1 + StrLen(StrDupIntoArena(result_1 + 1, *edi_2))
10051008          *esi_2 = 0x3a
1005101e          result_1 = esi_2 + 1 + StrLen(StrDupIntoArena(esi_2 + 1, *(edi_2 + 0x1c)))
10051020          edi_2 += 4
10051023          i_1 = i_3
10051023          i_3 -= 1
10051024      while (i_1 != 1)
10051026      *result_1 = 0
10051026  
10051030  return result


10051031    void* sub_10051031()

10051034  int32_t ecx
10051034  int32_t var_8 = ecx
10051035  int32_t var_c = ecx
10051036  void* var_8_1 = nullptr
1005103d  void* edi = data_10061ce4
10051043  int32_t i_2 = 0xc
1005104a  void* esi = edi + 0x38
10051070  void* eax_1
10051070  void* eax_3
10051070  int32_t i
10051070  
10051070  do
10051050      eax_1 = StrLen(*(esi + 0x30))
1005105e      eax_3 = StrLen(*esi) + var_8_1
10051062      esi += 4
10051065      i = i_2
10051065      i_2 -= 1
1005106d      var_8_1 = eax_3 + eax_1 + 2
10051070  while (i != 1)
10051079  void* result_1 = ArenaAlloc(size: eax_3 + eax_1 + 3)
1005107e  void* result = result_1
1005107e  
10051081  if (result_1 != 0)
10051085      void* edi_1 = edi + 0x68
10051088      int32_t i_3 = 0xc
100510b9      int32_t i_1
100510b9      
100510b9      do
10051089          *result_1 = 0x3a
1005109c          void* esi_2 =
1005109c              result_1 + 1 + StrLen(StrDupIntoArena(result_1 + 1, *(edi_1 - 0x30)))
1005109e          *esi_2 = 0x3a
100510b3          result_1 = esi_2 + 1 + StrLen(StrDupIntoArena(esi_2 + 1, *edi_1))
100510b5          edi_1 += 4
100510b8          i_1 = i_3
100510b8          i_3 -= 1
100510b9      while (i_1 != 1)
100510bb      *result_1 = 0
100510bb  
100510c5  return result


100510c6    void* sub_100510c6()

100510ce  void* esi = data_10061ce4
100510d5  void* edi = nullptr
100510d7  void* var_c = esi
100510da  int32_t i_4 = 7
1005110a  int32_t i
1005110a  
1005110a  do
100510e7      void* eax_1 = StrLen(*(var_c + 0x1c))
100510f3      void* eax_2 = StrLen(*var_c)
100510f8      var_c += 4
10051103      i = i_4
10051103      i_4 -= 1
10051106      edi = eax_2 + edi + eax_1 + 2
1005110a  while (i != 1)
1005110f  int32_t i_5 = 0xc
10051116  void* var_c_1 = esi + 0x38
10051142  int32_t i_1
10051142  
10051142  do
1005111f      void* eax_5 = StrLen(*(var_c_1 + 0x30))
1005112b      void* eax_6 = StrLen(*var_c_1)
10051130      var_c_1 += 4
1005113b      i_1 = i_5
1005113b      i_5 -= 1
1005113e      edi = eax_6 + edi + eax_5 + 2
10051142  while (i_1 != 1)
1005114a  void* eax_8 = StrLen(*(esi + 0x98))
10051195  void* result = ArenaAlloc(size: StrLen(*(esi + 0x9c)) + edi + eax_8 + 2
10051195      + StrLen(*(esi + 0xa0)) + 1 + StrLen(*(esi + 0xa4)) + 1 + StrLen(*(esi + 0xa8))
10051195      + 0xad)
10051195  
100511a1  if (result != 0)
100511ac      void* edi_4 = result + 0xac
100511b9      MemCopyFixedSize(result, data_10061ce4, 0xac)
100511c7      int32_t* var_c_3 = result - esi
100511ca      void* result_1 = result
100511cd      void* var_8_1 = esi + 0x1c
100511d0      int32_t i_3 = 7
1005121b      int32_t i_2
1005121b      
1005121b      do
100511da          *result_1 = edi_4
100511f1          void* edi_5 = edi_4 + StrLen(StrDupIntoArena(edi_4, *(var_8_1 - 0x1c))) + 1
100511f8          *(var_c_3 + var_8_1) = edi_5
10051204          void* eax_23 = StrLen(StrDupIntoArena(edi_5, *var_8_1))
10051209          result_1 += 4
1005120d          var_8_1 += 4
10051214          i_2 = i_3
10051214          i_3 -= 1
10051217          edi_4 = edi_5 + eax_23 + 1
1005121b      while (i_2 != 1)
10051220      int32_t var_14_3 = 0xc
10051227      void* var_10 = result + 0x68
1005122a      void* eax_25 = esi + 0x38
1005122d      void* var_8_2 = eax_25
1005122d      
10051238      while (true)
10051238          *(eax_25 + var_c_3) = edi_4
10051249          void* edi_6 = edi_4 + StrLen(StrDupIntoArena(edi_4, *eax_25)) + 1
10051250          *var_10 = edi_6
1005125f          void* eax_31 = StrLen(StrDupIntoArena(edi_6, *(var_8_2 + 0x30)))
10051264          var_8_2 += 4
10051268          var_10 += 4
1005126f          int32_t temp3_1 = var_14_3
1005126f          var_14_3 -= 1
10051272          edi_4 = edi_6 + eax_31 + 1
10051272          
10051276          if (temp3_1 == 1)
10051276              break
10051276          
10051232          eax_25 = var_8_2
10051232      
10051278      *(result + 0x98) = edi_4
10051290      void* edi_7 = edi_4 + StrLen(StrDupIntoArena(edi_4, *(esi + 0x98))) + 1
10051294      *(result + 0x9c) = edi_7
100512ac      void* edi_8 = edi_7 + StrLen(StrDupIntoArena(edi_7, *(esi + 0x9c))) + 1
100512b0      *(result + 0xa0) = edi_8
100512c8      void* edi_9 = edi_8 + StrLen(StrDupIntoArena(edi_8, *(esi + 0xa0))) + 1
100512cc      *(result + 0xa4) = edi_9
100512eb      *(result + 0xa8) = StrLen(StrDupIntoArena(edi_9, *(esi + 0xa4))) + edi_9 + 1
100512eb  
100512f7  return result


100512f8    void* sub_100512f8(void* arg1, char* arg2, int32_t* arg3, void* arg4)

100512f8  int32_t var_4 = 0
10051312  return sub_10051313(arg1, arg2, arg3, arg4)


10051313    void* sub_10051313(void* arg1, char* arg2, int32_t* arg3, void* arg4)

10051316  int32_t ecx
10051316  int32_t var_8 = ecx
10051317  int32_t var_c = ecx
10051318  void* eax = arg4
1005131b  int32_t ebx
1005131b  int32_t var_10 = ebx
1005131c  int32_t esi
1005131c  int32_t var_14 = esi
10051321  int32_t edi
10051321  int32_t var_18 = edi
10051321  
10051322  if (eax == 0)
10051324      eax = data_10061ce4
10051324  
10051334  arg4 = arg1
10051338  InterlockedIncrement(&data_10069f24)
1005134a  int32_t var_c_1
1005134a  
1005134a  if (data_10069f14 == 0)
10051360      var_c_1 = 0
1005134a  else
1005134d      InterlockedDecrement(&data_10069f24)
10051351      LockArenaSection(index: 0x13)
10051357      var_c_1 = 1
10051357  
10051366  char* arg_4
10051366  
10051366  if (arg4 u> 0)
10051368      char* esi_1 = arg2
10051368      
100513dd      do
1005136b          char eax_2 = *esi_1
1005136b          
1005136f          if (eax_2 == 0)
1005136f              break
1005136f          
10051373          if (eax_2 == 0x25)
100513a7              data_10069c20 = 0
100513ae              void* esi_2 = &esi_1[1]
100513ae              
100513b2              if (*esi_2 == 0x23)
100513b4                  data_10069c20 = 1
100513be                  esi_2 += 1
100513be              
100513d0              sub_1005140d(*esi_2, arg3, &arg_4, &arg4, eax)
100513d8              esi_1 = esi_2 + 1
10051373          else
10051389              if ((*(&(*data_100609a0)[zx.d(eax_2)] + 1) & 0x80) != 0 && arg4 u> 1)
1005138e                  *arg_4 = eax_2
10051390                  arg_4 = &arg_4[1]
10051393                  esi_1 = &esi_1[1]
10051394                  arg4 -= 1
10051394              
1005139c              *arg_4 = *esi_1
1005139e              arg_4 = &arg_4[1]
100513a1              esi_1 = &esi_1[1]
100513a2              arg4 -= 1
100513dd      while (arg4 u> 0)
100513dd  
100513e3  if (var_c_1 == 0)
100513f0      InterlockedDecrement(&data_10069f24)
100513e3  else
100513e7      UnlockArenaSection(index: 0x13)
100513e7  
100513f9  if (arg4 u<= 0)
1005140c      return 0
1005140c  
100513fe  *arg_4 = 0
10051408  return arg1 - arg4


1005140d    char* sub_1005140d(char arg1, int32_t* arg2, void** arg3, void** arg4, void* arg5)

10051410  int32_t eax = sx.d(arg1)
1005141a  int32_t var_20_1
1005141a  int32_t var_1c_1
1005141a  void** var_18_1
1005141a  void** var_14_1
1005141a  char* result
1005141a  
1005141a  if (eax s<= 0x5a)
10051420      if (eax == 0x5a)
1005172b          label_1005172b:
1005172b          sub_1004fb64()
1005173e          int32_t eax_66
1005173e          eax_66.b = arg2[8] != 0
100517ef          return sub_100517fc((&data_10061c54)[eax_66], arg3, arg4)
100517ef      
10051429      if (eax s> 0x4d)
100514fa          if (eax == 0x53)
100515d3              var_14_1 = arg4
100515db              data_10069c30 = data_10069c20
100515e3              var_18_1 = arg3
100515e6              var_1c_1 = 2
100515e8              var_20_1 = *arg2
100514fa          else
10051502              int32_t* eax_35
10051502              int32_t esi_5
10051502              
10051502              if (eax == 0x55)
10051598                  data_10069c30 = data_10069c20
1005159d                  eax_35 = arg2
100515a0                  esi_5 = eax_35[6]
100515a3                  label_100515a3:
100515a3                  int32_t ecx_6 = eax_35[7]
100515a8                  int32_t edi_1
100515a8                  
100515a8                  if (ecx_6 s>= esi_5)
100515b8                      edi_1 = divs.dp.d(sx.q(ecx_6), 7)
100515b8                      
100515c2                      if (mods.dp.d(sx.q(ecx_6), 7) s>= esi_5)
100515c4                          edi_1 += 1
100515a8                  else
100515aa                      edi_1 = 0
100515aa                  
100515c5                  var_14_1 = arg4
100515c8                  var_18_1 = arg3
100515cb                  var_1c_1 = 2
100515cd                  var_20_1 = edi_1
10051502              else
1005150a                  if (eax == 0x57)
1005157a                      data_10069c30 = data_10069c20
1005157f                      eax_35 = arg2
10051582                      int32_t ecx_5 = eax_35[6]
10051582                      
10051587                      if (ecx_5 != 0)
1005158e                          esi_5 = ecx_5 - 1
10051587                      else
1005158b                          esi_5 = 6
1005158b                      
10051587                      goto label_100515a3
10051587                  
1005150d                  if (eax == 0x58)
10051559                      data_10069c20 = 0
10051793                      return sub_100518db(*(arg5 + 0xa8), arg2, arg3, arg4, arg5)
10051793                  
10051510                  if (eax != 0x59)
100517fb                      return eax - 0x59
100517fb                  
1005151b                  var_14_1 = arg4
1005151e                  data_10069c30 = data_10069c20
10051526                  var_18_1 = arg3
10051529                  int32_t ecx_4 = arg2[5]
1005152c                  var_1c_1 = 4
10051548                  var_20_1 = (divs.dp.d(sx.q(ecx_4), 0x64) + 0x13) * 0x64
10051548                      + mods.dp.d(sx.q(ecx_4), 0x64)
10051429      else if (eax == 0x4d)
100514dd          var_14_1 = arg4
100514e5          data_10069c30 = data_10069c20
100514ed          var_18_1 = arg3
100514f0          var_1c_1 = 2
100514f2          var_20_1 = arg2[1]
1005142f      else
10051438          if (eax == 0x25)
100514ce              **arg3 = 0x25
100514d1              *arg3 += 1
100514d3              result = arg4
100514d6              *result -= 1
100517fb              return result
100517fb          
10051441          if (eax == 0x41)
100517ef              return sub_100517fc(*(arg5 + (arg2[6] << 2) + 0x1c), arg3, arg4)
100517ef          
10051444          if (eax == 0x42)
100517ef              return sub_100517fc(*(arg5 + (arg2[4] << 2) + 0x68), arg3, arg4)
100517ef          
10051449          if (eax == 0x48)
1005147c              var_14_1 = arg4
10051484              data_10069c30 = data_10069c20
1005148c              var_18_1 = arg3
1005148f              var_1c_1 = 2
10051491              var_20_1 = arg2[2]
10051449          else
1005144c              if (eax != 0x49)
100517fb                  return eax - 0x49
100517fb              
10051459              data_10069c30 = data_10069c20
10051466              int32_t edx_2 = mods.dp.d(sx.q(arg2[2]), 0xc)
10051466              
1005146a              if (edx_2 == 0)
1005146d                  edx_2 = 0xc
1005146d              
1005146e              var_14_1 = arg4
10051471              var_18_1 = arg3
10051474              var_1c_1 = 2
10051476              var_20_1 = edx_2
1005141a  else if (eax s> 0x6d)
1005170f      if (eax == 0x70)
100517df          char* var_1c_2
100517df          
100517df          if (arg2[2] s> 0xb)
100517e9              var_1c_2 = *(arg5 + 0x9c)
100517df          else
100517e1              var_1c_2 = *(arg5 + 0x98)
100517e1          
100517ef          return sub_100517fc(var_1c_2, arg3, arg4)
100517ef      
10051718      if (eax == 0x77)
100517b2          var_14_1 = arg4
100517ba          data_10069c30 = data_10069c20
100517c2          var_18_1 = arg3
100517c5          var_1c_1 = 1
100517c7          var_20_1 = arg2[6]
10051718      else
1005171f          if (eax == 0x78)
10051777              char* var_24_1
10051777              int32_t* var_20_2
10051777              void* var_1c_3
10051777              int32_t* var_18_3
10051777              void* var_14_3
10051777              
10051777              if (data_10069c20 == 0)
100517a0                  var_14_3 = arg5
100517a1                  var_18_3 = arg4
100517a4                  var_1c_3 = arg3
100517a7                  var_20_2 = arg2
100517aa                  var_24_1 = *(arg5 + 0xa0)
10051777              else
1005177c                  data_10069c20 = 0
10051783                  var_14_3 = arg5
10051784                  var_18_3 = arg4
10051787                  var_1c_3 = arg3
1005178a                  var_20_2 = arg2
1005178d                  var_24_1 = *(arg5 + 0xa4)
1005178d              
10051793              return sub_100518db(var_24_1, var_20_2, var_1c_3, var_18_3, var_14_3)
10051793          
10051722          if (eax != 0x79)
10051725              if (eax != 0x7a)
100517fb                  return eax - 0x7a
100517fb              
10051725              goto label_1005172b
10051725          
10051752          var_14_1 = arg4
10051755          data_10069c30 = data_10069c20
1005175d          var_18_1 = arg3
10051763          var_1c_1 = 2
10051476          var_20_1 = mods.dp.d(sx.q(arg2[5]), 0x64)
100515f2  else if (eax == 0x6d)
100516f4      var_14_1 = arg4
100516f7      data_10069c30 = data_10069c20
100516ff      var_18_1 = arg3
10051705      var_1c_1 = 2
10051636      var_20_1 = arg2[4] + 1
100515f8  else
10051601      if (eax == 0x61)
100517ef          return sub_100517fc(*(arg5 + (arg2[6] << 2)), arg3, arg4)
100517ef      
10051608      if (eax == 0x62)
100517ef          return sub_100517fc(*(arg5 + (arg2[4] << 2) + 0x38), arg3, arg4)
100517ef      
1005160f      if (eax == 0x63)
10051660          char* var_24_2
10051660          int32_t* var_20_3
10051660          void* var_1c_4
10051660          int32_t* var_18_4
10051660          void* var_14_4
10051660          void* ebx_1
10051660          int32_t* esi_6
10051660          void* edi_2
10051660          
10051660          if (data_10069c20 == 0)
10051680              ebx_1 = arg5
10051683              esi_6 = arg4
10051686              edi_2 = arg3
10051689              var_14_4 = ebx_1
1005168a              var_18_4 = esi_6
1005168b              var_1c_4 = edi_2
1005168c              var_20_3 = arg2
1005168f              var_24_2 = *(ebx_1 + 0xa0)
10051660          else
10051662              ebx_1 = arg5
10051665              esi_6 = arg4
10051668              edi_2 = arg3
1005166b              data_10069c20 = 0
10051672              var_14_4 = ebx_1
10051673              var_18_4 = esi_6
10051674              var_1c_4 = edi_2
10051675              var_20_3 = arg2
10051678              var_24_2 = *(ebx_1 + 0xa4)
10051678          
10051695          result = sub_100518db(var_24_2, var_20_3, var_1c_4, var_18_4, var_14_4)
10051695          
100516a0          if (*esi_6 == 0)
100517fb              return result
100517fb          
100516ae          **edi_2 = 0x20
100516b1          *edi_2 += 1
100516b3          *esi_6 -= 1
10051793          return sub_100518db(*(ebx_1 + 0xa8), arg2, edi_2, esi_6, ebx_1)
10051793      
10051612      if (eax == 0x64)
1005163c          var_14_1 = arg4
10051644          data_10069c30 = data_10069c20
1005164c          var_18_1 = arg3
1005164f          var_1c_1 = 2
10051651          var_20_1 = arg2[3]
10051612      else
10051617          if (eax != 0x6a)
100517fb              return eax - 0x6a
100517fb          
10051622          var_14_1 = arg4
10051625          data_10069c30 = data_10069c20
1005162d          var_18_1 = arg3
10051633          var_1c_1 = 3
10051636          var_20_1 = arg2[7] + 1
10051549  return sub_10051823(var_20_1, var_1c_1, var_18_1, var_14_1)


100517fc    void sub_100517fc(char* arg1, int32_t* arg2, int32_t* arg3)

10051805  if (*arg3 != 0)
1005180b      char* esi_1 = arg1
1005181e      int32_t i
1005181e      
1005181e      do
1005180f          char edx = *esi_1
1005180f          
10051813          if (edx == 0)
10051813              break
10051813          
10051817          **arg2 = edx
10051819          *arg2 += 1
1005181b          esi_1 = &esi_1[1]
1005181c          i = *arg3
1005181c          *arg3 -= 1
1005181e      while (i != 1)


10051823    char* sub_10051823(int32_t arg1, int32_t arg2, void** arg3, void** arg4)

10051826  int32_t ecx
10051826  int32_t var_8 = ecx
10051827  char* result = nullptr
10051830  char* result_1 = nullptr
10051830  
10051833  if (data_10069c30 != 0)
1005183e      return sub_10051892(arg1, arg3, arg4)
1005183e  
10051850  if (arg2 u>= *arg4)
1005188d      *arg4 = nullptr
10051850  else
10051852      int32_t i = arg2 - 1
10051852      
1005185c      while (i != 0xffffffff)
1005186d          *(*arg3 + i) = (mods.dp.d(sx.q(arg1), 0xa)).b + 0x30
10051876          result_1 = &result_1[1]
10051879          i -= 1
1005187d          arg1 = divs.dp.d(sx.q(arg1), 0xa)
1005187d      
10051883      result = result_1
10051886      *arg3 += result
10051888      *arg4 -= result
10051888  
10051891  return result


10051892    char* sub_10051892(int32_t arg1, int32_t* arg2, int32_t* arg3)

10051895  int32_t ebx
10051895  int32_t var_8 = ebx
1005189e  char* ecx = *arg2
1005189e  
100518a3  while (*arg3 u> 1)
100518b4      *ecx = (mods.dp.d(sx.q(arg1), 0xa)).b + 0x30
100518b6      ecx = &ecx[1]
100518b8      int32_t temp0_1 = divs.dp.d(sx.q(arg1), 0xa)
100518ba      *arg3 -= 1
100518be      arg1 = temp0_1
100518be      
100518c1      if (temp0_1 s<= 0)
100518c1          break
100518c1  
100518c3  char* result = *arg2
100518c5  *arg2 = ecx
100518c7  void* ecx_1 = ecx - 1
100518c7  
100518d4  do
100518c8      ebx.b = *result
100518ca      char edx = *ecx_1
100518cc      *ecx_1 = ebx.b
100518ce      ecx_1 -= 1
100518cf      *result = edx
100518d1      result = &result[1]
100518d4  while (result u< ecx_1)
100518d4  
100518da  return result


100518db    void sub_100518db(char* arg1, int32_t* arg2, void* arg3, int32_t* arg4, void* arg5)

100518de  int32_t ecx
100518de  int32_t var_8 = ecx
100518e0  char* ebx = arg1
100518e0  
100518e8  if (*ebx != 0)
100518ee      int32_t* edi_1 = arg4
100518f1      void* esi_1 = arg3
100518f1      
10051988      do
100518f4          char* ecx_1 = nullptr
100518f4          
100518f8          if (*edi_1 == 0)
100518f8              break
100518f8          
100518fe          data_10069c30 = 0
10051904          char* eax
10051904          eax.b = *ebx
10051906          arg1:3.b = eax.b
1005190f          arg3 = &ebx[1]
10051920          wchar16 (* edx)[0x21]
10051920          void* eax_2
10051920          
10051920          do
10051912              eax_2 = arg3
10051915              edx.b = arg1:3.b
10051918              ecx_1 = &ecx_1[1]
10051919              arg3 += 1
1005191c              eax_2.b = *eax_2
10051920          while (eax_2.b == edx.b)
10051922          arg3 -= 1
10051925          arg1 = ecx_1
10051928          eax = sx.d(edx.b)
10051928          
1005192e          if (eax s> 0x64)
10051aa3              if (eax == 0x68)
10051b7d                  if (ecx_1 == 1)
10051b87                      data_10069c30 = 1
10051b91                      label_10051b91:
10051b91                      arg4.b = 0x49
10051ba0                      eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                      ebx = arg3
10051b7d                  else
10051b80                      if (ecx_1 == 2)
10051b80                          goto label_10051b91
10051b80                      
1005196d                      label_1005196d:
1005196d                      
1005196d                      if ((*(&(*data_100609a0)[zx.d(edx.b)] + 1) & 0x80) != 0)
10051971                          ebx = &ebx[1]
10051974                          **esi_1 = edx.b
10051976                          *esi_1 += 1
10051978                          *edi_1 -= 1
10051978                      
1005197c                      wchar16 (* ecx_2)[0x21]
1005197c                      ecx_2.b = *ebx
1005197e                      **esi_1 = ecx_2.b
10051980                      *esi_1 += 1
10051982                      ebx = &ebx[1]
10051983                      *edi_1 -= 1
10051aa3              else if (eax == 0x6d)
10051b62                  if (ecx_1 == 1)
10051b6c                      data_10069c30 = 1
10051b62                  else if (ecx_1 != 2)
10051b65                      goto label_1005196d
10051b65                  
10051b76                  arg4.b = 0x4d
10051ba0                  eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                  ebx = arg3
10051aac              else if (eax == 0x73)
10051b47                  if (ecx_1 == 1)
10051b51                      data_10069c30 = 1
10051b47                  else if (ecx_1 != 2)
10051b4a                      goto label_1005196d
10051b4a                  
10051b5b                  arg4.b = 0x53
10051ba0                  eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                  ebx = arg3
10051ab5              else if (eax == 0x74)
10051af1                  if (arg2[2] s> 0xb)
10051afb                      eax = *(arg5 + 0x9c)
10051af1                  else
10051af3                      eax = *(arg5 + 0x98)
10051af3                  
10051b03                  if (ecx_1 s> 0)
10051b08                      while (*edi_1 u> 0)
10051b0a                          ecx_1.b = *eax
10051b0a                          
10051b1f                          if ((*(&(*data_100609a0)[zx.d(ecx_1.b)] + 1) & 0x80) != 0
10051b1f                                  && *edi_1 u> 1)
10051b23                              **esi_1 = ecx_1.b
10051b25                              *esi_1 += 1
10051b27                              eax = &eax[1]
10051b28                              *edi_1 -= 1
10051b28                          
10051b2c                          edx.b = *eax
10051b2e                          **esi_1 = edx.b
10051b30                          *esi_1 += 1
10051b32                          eax = &eax[1]
10051b33                          *edi_1 -= 1
10051b35                          arg1 -= 1
10051b35                          
10051b3c                          if (arg1 s<= 0)
10051b3c                              break
10051b3c                  
10051b3e                  ebx = arg3
10051abc              else
10051ac1                  if (eax != 0x79)
10051ac1                      goto label_1005196d
10051ac1                  
10051acb                  if (ecx_1 == 2)
10051ade                      arg4.b = 0x79
10051ba0                      eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                      ebx = arg3
10051acb                  else
10051acf                      if (ecx_1 != 4)
10051acf                          goto label_1005196d
10051acf                      
10051ad5                      arg4.b = 0x59
10051ba0                      eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                      ebx = arg3
1005192e          else if (eax == 0x64)
10051a6c              if (ecx_1 == 1)
10051a8d                  data_10069c30 = 1
10051a97                  label_10051a97:
10051a97                  arg4.b = 0x64
10051ba0                  eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                  ebx = arg3
10051a6c              else
10051a6f                  if (ecx_1 == 2)
10051a6f                      goto label_10051a97
10051a6f                  
10051a72                  if (ecx_1 == 3)
10051a84                      arg4.b = 0x61
10051ba0                      eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                      ebx = arg3
10051a72                  else
10051a75                      if (ecx_1 != 4)
10051a75                          goto label_1005196d
10051a75                      
10051a7b                      arg4.b = 0x41
10051ba0                      eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                      ebx = arg3
10051934          else if (eax == 0x27)
10051a18              if ((ecx_1.b & 1) == 0)
10051a64                  ebx += ecx_1
10051a18              else
10051a1a                  ebx += ecx_1
10051a1a                  
10051a1c                  while (true)
10051a1c                      eax.b = *ebx
10051a1c                      
10051a20                      if (eax.b == 0)
10051a20                          break
10051a20                      
10051a29                      if (*edi_1 == 0)
10051a29                          break
10051a29                      
10051a31                      if (eax.b == 0x27)
10051a5e                          ebx = &ebx[1]
10051a5f                          break
10051a5f                      
10051a46                      if ((*(&(*data_100609a0)[zx.d(eax.b)] + 1) & 0x80) != 0
10051a46                              && *edi_1 u> 1)
10051a4a                          **esi_1 = eax.b
10051a4c                          *esi_1 += 1
10051a4e                          ebx = &ebx[1]
10051a4f                          *edi_1 -= 1
10051a4f                      
10051a53                      char* ecx_10
10051a53                      ecx_10.b = *ebx
10051a55                      **esi_1 = ecx_10.b
10051a57                      *esi_1 += 1
10051a59                      ebx = &ebx[1]
10051a5a                      *edi_1 -= 1
1005193d          else if (eax == 0x41)
100519e5              label_100519e5:
100519e5              int32_t eax_5
100519e5              int32_t edx_1
100519e5              eax_5, edx_1 = sub_10045cb0(eax, edx, ecx_1, ebx, "am/pm")
100519e5              
100519ee              if (eax_5 != 0)
10051a04                  if (sub_10045cb0(eax_5, edx_1, "am/pm", ebx, "a/p") == 0)
10051a09                      arg3 = &ebx[3]
100519ee              else
10051a09                  arg3 = &ebx[5]
10051a09              
10051a0c              arg4.b = 0x70
10051ba0              eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e              ebx = arg3
10051946          else if (eax == 0x48)
100519c5              if (ecx_1 == 1)
100519cc                  data_10069c30 = 1
100519c5              else if (ecx_1 != 2)
100519c8                  goto label_1005196d
100519c8              
100519d6              arg4.b = 0x48
10051ba0              eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e              ebx = arg3
1005194f          else
10051954              if (eax != 0x4d)
10051959                  if (eax == 0x61)
10051959                      goto label_100519e5
10051959                  
10051959                  goto label_1005196d
10051959              
10051994              if (ecx_1 == 1)
100519b1                  data_10069c30 = 1
100519bb                  label_100519bb:
100519bb                  arg4.b = 0x6d
10051ba0                  eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                  ebx = arg3
10051994              else
10051997                  if (ecx_1 == 2)
10051997                      goto label_100519bb
10051997                  
1005199a                  if (ecx_1 == 3)
100519a8                      arg4.b = 0x62
10051ba0                      eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                      ebx = arg3
1005199a                  else
1005199d                      if (ecx_1 != 4)
1005199d                          goto label_1005196d
1005199d                      
1005199f                      arg4.b = 0x42
10051ba0                      eax, edx = sub_1005140d(arg4.b, arg2, esi_1, edi_1, arg5)
10051b3e                      ebx = arg3
10051988      while (*ebx != 0)


10051baa    int32_t sub_10051baa(int32_t arg1, uint32_t arg2, uint32_t arg3, void** arg4)

10051bb7  int32_t ebx
10051bb7  int32_t var_88 = ebx
10051bb7  
10051bba  if (arg1 == 1)
10051bcc      void var_84
10051bcc      void* edi_1 = &var_84
10051bd2      arg1 = 0
10051bdd      int32_t size_1 = sub_100523bc(arg2, arg3, &var_84, 0x80, 0)
10051bdd      
10051be4      if (size_1 != 0)
10051c34          label_10051c34:
10051c34          void* eax_5 = ArenaAlloc(size: size_1)
10051c3f          *arg4 = eax_5
10051c3f          
10051c41          if (eax_5 != 0)
10051c5a              StrCopyFixed(eax_5, edi_1, size_1)
10051c5a              
10051c65              if (arg1 != 0)
10051c68                  Gladiator_Free(edi_1)
10051c68              
10051cdb              return 0
10051cdb          
10051c46          if (arg1 != 0)
10051c49              Gladiator_Free(edi_1)
10051be4      else if (GetLastError() == ERROR_INSUFFICIENT_BUFFER)
10051bfa          int32_t size = sub_100523bc(arg2, arg3, nullptr, 0, 0)
10051bfa          
10051c06          if (size != 0)
10051c0e              edi_1 = ArenaAlloc(size)
10051c0e              
10051c13              if (edi_1 != 0)
10051c18                  arg1 = 1
10051c2a                  size_1 = sub_100523bc(arg2, arg3, edi_1, size, 0)
10051c2a                  
10051c31                  if (size_1 != 0)
10051c31                      goto label_10051c34
10051c31                  
10051c49                  Gladiator_Free(edi_1)
10051bba  else if (arg1 == 0)
10051c78      void* i = &data_10063750
10051c86      int32_t eax_7
10051c86      wchar16 (* ecx_5)[0x21]
10051c86      int32_t edx_1
10051c86      eax_7, ecx_5, edx_1 = sub_100522a9(arg2, arg3, &data_10063750, 4, 0)
10051c86      
10051c90      if (eax_7 != 0)
10051c95          *arg4 = nullptr
10051c95          
10051cd9          do
10051c9f              ebx.b = *i
10051ca1              BOOL eax_9
10051ca1              
10051ca1              if (data_10060bac s<= 1)
10051cbb                  uint32_t eax_10
10051cbb                  eax_10.b = (*data_100609a0)[zx.d(ebx.b)].b
10051cbe                  eax_9 = eax_10 & 4
10051ca1              else
10051ca3                  uint32_t eax_8 = zx.d(ebx.b)
10051ca9                  eax_9, edx_1 = sub_10046f7a(eax_8, edx_1, ecx_5, eax_8)
10051ca9              
10051cc3              if (eax_9 == 0)
10051cc3                  break
10051cc3              
10051cc5              eax_9.b = *arg4
10051cc7              ecx_5.b = 0xa
10051cc9              eax_9.w = muls.dp.b(eax_9.b, 0xa)
10051ccb              eax_9.b += ebx.b
10051ccd              eax_9.b -= 0x30
10051cd0              i += 2
10051cd1              *arg4 = eax_9.b
10051cd9          while (i s< 0x10063758)
10051cd9          
10051cdb          return 0
10051cdb  
10051c4f  return 0xffffffff


10051ce2    void* sub_10051ce2()

10051ce7  return data_10061dd0


10051ce8    BOOL sub_10051ce8(uint32_t arg1, wchar16* arg2, int32_t arg3, char* arg4, uint32_t arg5, uint32_t arg6)

10051ceb  int32_t var_8 = 0xffffffff
10051ced  int32_t var_c = 0x100591b8
10051cf2  int32_t var_10 = 0x1004fa8c
10051cfd  TEB* fsbase
10051cfd  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
10051cfe  fsbase->NtTib.ExceptionList = &ExceptionList
10051d0b  int32_t __saved_edi
10051d0b  int32_t* var_1c = &__saved_edi
10051d0e  int32_t eax_1 = data_1006375c
10051d0e  
10051d17  if (eax_1 != 0)
10051d17      goto label_10051d57
10051d17  
10051d2f  uint16_t charType
10051d2f  BOOL result
10051d2f  
10051d2f  if (GetStringTypeW(dwInfoType: 1, lpSrcStr: &g_locale_unicode_sample, cchSrc: 1, 
10051d2f          lpCharType: &charType) == 0)
10051d49      if (GetStringTypeA(Locale: 0, dwInfoType: 1, lpSrcStr: &g_locale_ascii_sample, 
10051d49              cchSrc: 1, lpCharType: &charType) != 0)
10051d51          eax_1 = 2
10051d51          goto label_10051d52
10051d51      
10051e99      result = 0
10051d2f  else
10051d31      eax_1 = 1
10051d52      label_10051d52:
10051d52      data_1006375c = eax_1
10051d57      label_10051d57:
10051d57      
10051d5a      if (eax_1 == 1)
10051d68          result = GetStringTypeW(dwInfoType: arg1, lpSrcStr: arg2, cchSrc: arg3, 
10051d68              lpCharType: arg4)
10051d5a      else if (eax_1 != 2)
10051e99          result = 0
10051d76      else
10051d7f          if (arg5 == 0)
10051d86              arg5 = g_codepage_default
10051d86          
10051d9b          int32_t eax_5 = WideCharToMultiByte(CodePage: arg5, dwFlags: 0x220, 
10051d9b              lpWideCharStr: arg2, cchWideChar: arg3, lpMultiByteStr: nullptr, 
10051d9b              cbMultiByte: 0, lpDefaultChar: nullptr, lpUsedDefaultChar: nullptr)
10051d9b          
10051da8          if (eax_5 == 0)
10051e99              result = 0
10051da8          else
10051dae              int32_t var_8_1 = 0
10051db4              int32_t eax_6
10051db4              eax_6.b = (eax_5 + 3).b & 0xfc
10051db6              sub_10044310(eax_6)
10051dbb              int32_t* var_1c_1 = &__saved_edi
10051dc0              PSTR var_30_1 = &__saved_edi
10051dc6              sub_1004c9c0(&__saved_edi, 0, eax_5)
10051dce              int32_t var_8_2 = 0xffffffff
10051dce              
10051dea              if (var_30_1 == 0)
10051e99                  result = 0
10051dea              else if (WideCharToMultiByte(CodePage: arg5, dwFlags: 0x220, 
10051dea                      lpWideCharStr: arg2, cchWideChar: arg3, lpMultiByteStr: var_30_1, 
10051dea                      cbMultiByte: eax_5, lpDefaultChar: nullptr, 
10051dea                      lpUsedDefaultChar: nullptr) == 0)
10051e99                  result = 0
10051e0c              else
10051e12                  int32_t var_8_3 = 1
10051e20                  int32_t eax_9
10051e20                  eax_9.b = (eax_5 * 2 + 5).b & 0xfc
10051e22                  sub_10044310(eax_9)
10051e27                  int32_t* var_1c_2 = &__saved_edi
10051e2c                  int32_t* var_28_1 = &__saved_edi
10051e3c                  int32_t var_8_4 = 0xffffffff
10051e3c                  
10051e42                  if (&__saved_edi == 0)
10051e99                      result = 0
10051e42                  else
10051e44                      uint32_t Locale = arg6
10051e44                      
10051e49                      if (Locale == 0)
10051e4b                          Locale = data_1006343c
10051e4b                      
10051e53                      int32_t edi_1 = arg3 * 2
10051e56                      void* esi_2 = edi_1 + &__saved_edi
10051e59                      *esi_2 = 0xffff
10051e5e                      *(esi_2 - 2) = 0xffff
10051e6f                      BOOL result_1 = GetStringTypeA(Locale, dwInfoType: arg1, 
10051e6f                          lpSrcStr: var_30_1, cchSrc: eax_5, lpCharType: &__saved_edi)
10051e6f                      
10051e85                      if (*(esi_2 - 2) == 0xffff || *esi_2 != 0xffff)
10051e99                          result = 0
10051e85                      else
10051e8c                          sub_100452f0(arg4, &__saved_edi, edi_1)
10051e94                          result = result_1
10051e94  
10051ea1  fsbase->NtTib.ExceptionList = ExceptionList
10051eac  return result


10051dd4    int32_t sub_10051dd4() __pure

10051dd7  return 1


10051dd8    int32_t sub_10051dd8(void* arg1 @ ebp)

10051dd8  int32_t esp_24 = *(arg1 - 0x18)
10051ddd  *(arg1 - 0x2c) = 0
10051de0  *(arg1 - 4) = 0xffffffff
10051de4  int32_t esi = *(arg1 - 0x28)
10051dea  int32_t result
10051dea  
10051dea  if (*(arg1 - 0x2c) == 0)
10051e99      result = 0
10051dea  else
10051df0      *(esp_24 - 4) = 0
10051df1      *(esp_24 - 8) = 0
10051df2      *(esp_24 - 0xc) = esi
10051df3      *(esp_24 - 0x10) = *(arg1 - 0x2c)
10051df6      *(esp_24 - 0x14) = *(arg1 + 0x10)
10051df9      *(esp_24 - 0x18) = *(arg1 + 0xc)
10051dfc      *(esp_24 - 0x1c) = 0x220
10051e01      *(esp_24 - 0x20) = *(arg1 + 0x18)
10051e01      
10051e0c      if (WideCharToMultiByte() == 0)
10051e99          result = 0
10051e0c      else
10051e12          *(arg1 - 4) = 1
10051e20          int32_t eax_3
10051e20          eax_3.b = (esi * 2 + 5).b & 0xfc
10051e22          sub_10044310(eax_3)
10051e27          *(arg1 - 0x18) = esp_24
10051e2c          *(arg1 - 0x24) = esp_24
10051e3c          *(arg1 - 4) = 0xffffffff
10051e3c          
10051e42          if (esp_24 == 0)
10051e99              result = 0
10051e42          else
10051e44              int32_t eax_4 = *(arg1 + 0x1c)
10051e44              
10051e49              if (eax_4 == 0)
10051e4b                  eax_4 = data_1006343c
10051e4b              
10051e53              void* edi_1 = *(arg1 + 0x10) * 2
10051e56              int16_t* esi_1 = edi_1 + esp_24
10051e59              *esi_1 = 0xffff
10051e5e              esi_1[-1] = 0xffff
10051e64              *(esp_24 - 4) = esp_24
10051e65              *(esp_24 - 8) = *(arg1 - 0x28)
10051e68              *(esp_24 - 0xc) = *(arg1 - 0x2c)
10051e6b              *(esp_24 - 0x10) = *(arg1 + 8)
10051e6e              *(esp_24 - 0x14) = eax_4
10051e75              *(arg1 - 0x20) = GetStringTypeA()
10051e75              
10051e85              if (esi_1[-1] == 0xffff || *esi_1 != 0xffff)
10051e99                  result = 0
10051e85              else
10051e87                  *(esp_24 - 4) = edi_1
10051e88                  *(esp_24 - 8) = esp_24
10051e89                  int32_t esp_16
10051e89                  *(esp_16 - 8) = *(arg1 + 0x14)
10051e8c                  sub_100452f0()
10051e94                  result = *(arg1 - 0x20)
10051e94  
10051ea1  TEB* fsbase
10051ea1  fsbase->NtTib.ExceptionList = *(arg1 - 0x10)
10051ea8  *(arg1 - 0x38)
10051ea9  *(arg1 - 0x34)
10051eaa  *(arg1 - 0x30)
10051eab  *arg1
10051eac  return result


10051e31    int32_t sub_10051e31() __pure

10051e34  return 1


10051e35    int32_t sub_10051e35(void* arg1 @ ebp)

10051e35  *(arg1 - 0x18)
10051e3c  *(arg1 - 4) = 0xffffffff
10051ea1  TEB* fsbase
10051ea1  fsbase->NtTib.ExceptionList = *(arg1 - 0x10)
10051ea8  *(arg1 - 0x38)
10051ea9  *(arg1 - 0x34)
10051eaa  *(arg1 - 0x30)
10051eab  *arg1
10051eac  return 0


10051ead    char* sub_10051ead(int32_t arg1, char* arg2, int32_t arg3)

10051eba  int32_t var_c
10051eba  int32_t var_8
10051eba  
10051eba  if (arg3 != 0xa || arg1 s>= 0)
10051ec2      var_8 = 0
10051ec4      var_c = arg3
10051eba  else
10051ebc      var_8 = 1
10051ebe      var_c = 0xa
10051ebe  
10051ecd  sub_10051eda(arg1, arg2, var_c, var_8)
10051ed9  return arg2


10051eda    uint32_t sub_10051eda(int32_t arg1, char* arg2, int32_t arg3, int32_t arg4)

10051ee1  char* ecx = arg2
10051ee7  int32_t i
10051ee7  
10051ee7  if (arg4 == 0)
10051ef4      i = arg1
10051ee7  else
10051eec      *ecx = 0x2d
10051eef      ecx = &ecx[1]
10051ef0      i = neg.d(arg1)
10051ef0  
10051ef7  char* edi = ecx
10051ef7  
10051f1d  do
10051efd      uint32_t temp1_1 = modu.dp.d(0:i, arg3)
10051f0c      i = divu.dp.d(0:i, arg3)
10051f0e      uint32_t ebx_1
10051f0e      
10051f0e      if (temp1_1 u<= 9)
10051f15          ebx_1.b = temp1_1.b + 0x30
10051f0e      else
10051f10          ebx_1.b = temp1_1.b + 0x57
10051f10      
10051f18      *ecx = ebx_1.b
10051f1a      ecx = &ecx[1]
10051f1d  while (i u> 0)
10051f1d  
10051f1f  *ecx = 0
10051f22  void* ecx_1 = ecx - 1
10051f2f  uint32_t result
10051f2f  
10051f2f  do
10051f25      result.b = *ecx_1
10051f27      *ecx_1 = *edi
10051f29      *edi = result.b
10051f2b      ecx_1 -= 1
10051f2c      edi = &edi[1]
10051f2f  while (edi u< ecx_1)
10051f2f  
10051f35  return result


10051f36    char* sub_10051f36(int32_t arg1, char* arg2, int32_t arg3)

10051f39  int32_t eax = 0
10051f39  
10051f44  if (arg3 == 0xa && arg1 s< 0)
10051f48      eax = 1
10051f48  
10051f53  sub_10051eda(arg1, arg2, arg3, eax)
10051f5f  return arg2


10051f60    char* sub_10051f60(int32_t arg1, char* arg2, int32_t arg3)

10051f6e  sub_10051eda(arg1, arg2, arg3, 0)
10051f7a  return arg2


10051f7b    char* sub_10051f7b(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4)

10051f7e  uint32_t eax = 0
10051f7e  
10051f90  if (arg4 == 0xa && arg2 s<= 0 && (arg2 s< 0 || arg1 u< 0))
10051f94      eax = 1
10051f94  
10051fa2  sub_10051fac(arg1, arg2, arg3, arg4, eax)
10051fab  return arg3


10051fac    void* __stdcall sub_10051fac(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4, uint32_t arg5)

10051fb5  char* esi = arg3
10051fb9  int32_t ebx_1
10051fb9  int32_t edi_2
10051fb9  
10051fb9  if (arg5 == 0)
10051fce      edi_2 = arg2
10051fd1      ebx_1 = arg1
10051fb9  else
10051fc1      *esi = 0x2d
10051fc4      esi = &esi[1]
10051fc5      ebx_1 = neg.d(arg1)
10051fca      edi_2 = neg.d(adc.d(arg2, 0, arg1 != 0))
10051fca  
10051fd4  arg3 = esi
10051fdf  int32_t edx_1
10051fdf  
10051fdf  while (true)
10051fdf      uint32_t eax_1 = __aullrem(ebx_1, edi_2, arg4, 0)
10051fef      uint32_t eax_2
10051fef      eax_2, edx_1 = __aulldiv(ebx_1, edi_2, arg4, 0)
10051ff4      ebx_1 = eax_2
10051ffc      edi_2 = edx_1
10051ffe      uint32_t eax_3
10051ffe      
10051ffe      if (eax_1 u<= 9)
10052004          eax_3.b = eax_1.b + 0x30
10051ffe      else
10052000          eax_3.b = eax_1.b + 0x57
10052000      
10052006      *esi = eax_3.b
10052008      esi = &esi[1]
10052008      
1005200b      if (edi_2 u<= 0)
1005200d          if (edi_2 u< 0)
1005200d              break
1005200d          
10052011          if (ebx_1 u<= 0)
10052011              break
10052011  
10052013  *esi = 0
10052016  void* esi_1 = esi - 1
10052029  void* result
10052029  
10052029  do
1005201a      char ecx_1 = *esi_1
1005201c      edx_1.b = *arg3
1005201e      *esi_1 = edx_1.b
10052020      *arg3 = ecx_1
10052022      esi_1 -= 1
10052023      result = &arg3[1]
10052026      arg3 = result
10052029  while (result u< esi_1)
10052029  
1005202f  return result


10052032    char* sub_10052032(int32_t arg1, int32_t arg2, char* arg3, int32_t arg4)

10052043  sub_10051fac(arg1, arg2, arg3, arg4, 0)
1005204c  return arg3

1005204d                                         cc cc cc                                                               ...

10052050    int32_t sub_10052050(char* arg1, char* arg2, int32_t arg3)

10052059  int32_t result = arg3
10052059  
1005205b  if (result != 0)
10052061      char* esi_1 = arg1
10052064      char* edi_1 = arg2
10052064      
10052071      if (data_1006343c != 0)
100520c1          data_10069f24 += 1
100520cf          int32_t var_14_1
100520cf          
100520cf          if (data_10069f14 s> 0)
100520d5              data_10069f24 -= 1
100520e0              LockArenaSection(index: 0x13)
100520e5              var_14_1 = 1
100520cf          else
100520d1              var_14_1 = 0
100520d1          
100520f2          char* edi_2 = edi_1
100520f2          
100520f4          while (true)
100520f4              uint32_t eax_2
100520f4              eax_2.b = *esi_1
100520f8              uint32_t ebx_2
100520f8              ebx_2.b = *edi_2
100520fe              bool cond:1_1
100520fe              
100520fe              if (eax_2 == 0 || ebx_2 == 0)
1005211f                  label_1005211f:
1005211f                  result = 0
10052121                  cond:1_1 = eax_2 u< ebx_2
10052121                  
10052123                  if (eax_2 == ebx_2)
10052123                      break
100520fe              else
10052100                  esi_1 = &esi_1[1]
10052101                  edi_2 = &edi_2[1]
10052103                  uint32_t var_1c_1 = eax_2
10052104                  uint32_t var_20_1 = ebx_2
10052105                  uint32_t eax_3
10052105                  int32_t ecx_1
10052105                  eax_3, ecx_1 = sub_1004b9aa(result)
1005210a                  ebx_2 = eax_3
1005210f                  eax_2 = sub_1004b9aa(ecx_1)
10052118                  cond:1_1 = eax_2 u< ebx_2
10052118                  
1005211a                  if (eax_2 == ebx_2)
1005211c                      int32_t result_2 = result
1005211c                      result -= 1
1005211c                      
1005211d                      if (result_2 != 1)
1005211d                          continue
1005211d                      
1005211d                      goto label_1005211f
1005211d              
10052125              result = 0xffffffff
10052125              
1005212a              if (not(cond:1_1))
1005212c                  result = 1
1005212c              
1005212a              break
1005212a          
10052131          if (var_14_1 != 0)
10052140              UnlockArenaSection(index: 0x13)
10052148              return result
10052148          
10052133          data_10069f24 -= 1
10052071      else
10052079          int32_t result_1 = result
10052079          
1005207c          while (true)
1005207c              int16_t eax_1
1005207c              eax_1:1.b = *esi_1
1005207e              eax_1:1.b = eax_1:1.b
1005207e              bool cond:3_1 = eax_1:1.b == 0
10052080              eax_1.b = *edi_1
10052082              bool cond:0_1
10052082              
10052082              if (cond:3_1)
100520a5                  label_100520a5:
100520a5                  result = 0
100520a7                  cond:0_1 = eax_1:1.b u< eax_1.b
100520a7                  
100520a9                  if (eax_1:1.b == eax_1.b)
100520a9                      break
10052082              else
10052084                  eax_1.b = eax_1.b
10052084                  
10052086                  if (eax_1.b == 0)
10052086                      goto label_100520a5
10052086                  
10052088                  esi_1 = &esi_1[1]
10052089                  edi_1 = &edi_1[1]
10052089                  
10052090                  if (eax_1:1.b u>= 0x41 && eax_1:1.b u<= 0x5a)
10052092                      eax_1:1.b += 0x20
10052092                  
1005209a                  if (eax_1.b u>= 0x41 && eax_1.b u<= 0x5a)
1005209c                      eax_1.b += 0x20
1005209c                  
1005209e                  cond:0_1 = eax_1:1.b u< eax_1.b
1005209e                  
100520a0                  if (eax_1:1.b == eax_1.b)
100520a2                      int32_t result_3 = result_1
100520a2                      result_1 -= 1
100520a2                      
100520a3                      if (result_3 != 1)
100520a3                          continue
100520a3                      
100520a3                      goto label_100520a5
100520a3              
100520af              result = 0xffffffff
100520af              
100520b4              if (not(cond:0_1))
100520ba                  return 1
100520ba              
100520b4              break
100520b4  
10052150  return result


10052151    void* sub_10052151(uint8_t* arg1)

10052154  LockArenaSection(index: 0xc)
1005215d  void* result = sub_10052172(arg1)
10052166  UnlockArenaSection(index: 0xc)
10052171  return result


10052172    void* sub_10052172(uint8_t* arg1)

1005217b  int32_t* esi = data_1006349c
1005217b  
10052182  if (data_10069ec8 != 0)
10052186      if (esi != 0)
100521a7          label_100521a7:
100521a7          
100521a9          if (arg1 != 0)
100521ac              void* eax_2 = StrLen(arg1)
100521ac              
100521b4              while (true)
100521b4                  char* eax_3 = *esi
100521b4                  
100521b8                  if (eax_3 == 0)
100521b8                      break
100521b8                  
100521c3                  if (StrLen(eax_3) u> eax_2)
100521c5                      char* eax_5 = *esi
100521c5                      
100521cb                      if (*(eax_5 + eax_2) == 0x3d && sub_100524da(eax_5, arg1, eax_2) == 0)
100521e3                          return *esi + eax_2 + 1
100521e3                  
100521dc                  esi = &esi[1]
10052186      else if (data_100634a4 != esi && sub_10052519() == 0)
10052199          esi = data_1006349c
10052199          
100521a1          if (esi != 0)
100521a1              goto label_100521a7
100521a1  
100521e9  return nullptr


100521ef    int32_t sub_100521ef(int32_t arg1, int32_t arg2)

100521fa  if (arg1 u< data_1006a07c
100521fa          && (*((&data_10069f40)[arg1 s>> 5] + (arg1 & 0x1f) * 0x24 + 4) & 1) != 0)
10052219      sub_1004d918(arg1)
10052223      int32_t result = sub_10052248(arg1, arg2)
1005222b      sub_1004d977(arg1)
10052237      return result
10052237  
1005223d  *sub_10044f86() = 9
10052247  return 0xffffffff


10052248    int32_t sub_10052248(int32_t arg1, int32_t arg2)

10052255  int32_t eax_1 = (arg1 & 0x1f) * 9
1005225d  int32_t ecx_2 = (&data_10069f40)[arg1 s>> 5]
10052264  char* edx = ecx_2 + (eax_1 << 2) + 4
10052268  ecx_2.b = *(ecx_2 + (eax_1 << 2) + 4)
1005226c  eax_1.b = ecx_2.b
1005226e  int32_t eax_2 = eax_1 & 0x80
1005226e  
10052277  if (arg2 != 0x8000)
10052286      if (arg2 != 0x4000)
1005229e          *sub_10044f86() = 0x16
100522a8          return 0xffffffff
100522a8      
10052288      ecx_2.b |= 0x80
10052277  else
10052279      ecx_2.b &= 0x7f
10052279  
1005228b  int32_t eax_3 = neg.d(eax_2)
1005228f  *edx = ecx_2.b
10052291  int32_t eax_4
10052291  eax_4.w = sbb.d(eax_3, eax_3, eax_2 != 0).w & 0xc000
10052298  return eax_4 + 0x8000


100522a9    int32_t sub_100522a9(uint32_t arg1, uint32_t arg2, wchar16* arg3, int32_t arg4, uint32_t arg5)

100522ac  int32_t var_8 = 0xffffffff
100522ae  int32_t var_c = 0x100591d0
100522b3  int32_t var_10 = 0x1004fa8c
100522be  TEB* fsbase
100522be  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
100522bf  fsbase->NtTib.ExceptionList = &ExceptionList
100522cc  int32_t __saved_edi
100522cc  int32_t* var_1c = &__saved_edi
100522cf  int32_t eax_1 = data_10063760
100522cf  
100522d8  if (eax_1 != 0)
100522d8      goto label_10052308
100522d8  
100522e7  int32_t result
100522e7  int32_t var_38_1
100522e7  
100522e7  if (GetLocaleInfoW(Locale: 0, LCType: 1, lpLCData: nullptr, cchData: 0) == 0)
100522fa      if (GetLocaleInfoA(Locale: 0, LCType: 1, lpLCData: nullptr, cchData: 0) != 0)
10052300          var_38_1 = 2
10052300          goto label_10052302
10052300      
100523a8      result = 0
100522e7  else
100522e9      var_38_1 = 1
10052302      label_10052302:
10052302      eax_1 = var_38_1
10052303      data_10063760 = eax_1
10052308      label_10052308:
10052308      
1005230b      if (eax_1 == 1)
10052319          result = GetLocaleInfoW(Locale: arg1, LCType: arg2, lpLCData: arg3, cchData: arg4)
1005230b      else if (eax_1 != 2)
100523a8          result = 0
10052327      else
1005232c          if (arg5 == 0)
10052333              arg5 = g_codepage_default
10052333          
1005233e          int32_t cchData =
1005233e              GetLocaleInfoA(Locale: arg1, LCType: arg2, lpLCData: nullptr, cchData: 0)
1005233e          
10052349          if (cchData == 0)
100523a8              result = 0
10052349          else
1005234b              int32_t var_8_1 = 0
10052351              int32_t eax_5
10052351              eax_5.b = (cchData + 3).b & 0xfc
10052353              sub_10044310(eax_5)
10052358              int32_t* var_1c_1 = &__saved_edi
1005235d              int32_t* var_24_1 = &__saved_edi
1005236d              int32_t var_8_2 = 0xffffffff
1005236d              
10052373              if (&__saved_edi == 0)
100523a8                  result = 0
10052373              else if (GetLocaleInfoA(Locale: arg1, LCType: arg2, lpLCData: &__saved_edi, 
10052373                      cchData) == 0)
100523a8                  result = 0
10052387              else
1005238c                  wchar16* lpWideCharStr
1005238c                  int32_t cchWideChar
1005238c                  
1005238c                  if (arg4 != 0)
10052392                      cchWideChar = arg4
10052395                      lpWideCharStr = arg3
1005238c                  else
1005238e                      cchWideChar = 0
1005238f                      lpWideCharStr = nullptr
1005238f                  
100523a0                  result = MultiByteToWideChar(CodePage: arg5, dwFlags: MB_PRECOMPOSED, 
100523a0                      lpMultiByteStr: &__saved_edi, cbMultiByte: 0xffffffff, lpWideCharStr, 
100523a0                      cchWideChar)
100523b0  fsbase->NtTib.ExceptionList = ExceptionList
100523bb  return result


10052362    int32_t sub_10052362() __pure

10052365  return 1

10052366                    8b 65 e8 33 ff 33 f6                                                                 .e.3.3.

100523bc    int32_t sub_100523bc(uint32_t arg1, uint32_t arg2, PSTR arg3, int32_t arg4, uint32_t arg5)

100523bf  int32_t var_8 = 0xffffffff
100523c1  int32_t var_c = 0x100591e0
100523c6  int32_t var_10 = 0x1004fa8c
100523d1  TEB* fsbase
100523d1  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
100523d2  fsbase->NtTib.ExceptionList = &ExceptionList
100523df  int32_t __saved_edi
100523df  int32_t* var_1c = &__saved_edi
100523e2  int32_t eax_1 = data_10063764
100523e2  
100523eb  if (eax_1 != 0)
100523eb      goto label_1005241b
100523eb  
100523fa  int32_t result
100523fa  int32_t var_38_1
100523fa  
100523fa  if (GetLocaleInfoW(Locale: 0, LCType: 1, lpLCData: nullptr, cchData: 0) == 0)
1005240d      if (GetLocaleInfoA(Locale: 0, LCType: 1, lpLCData: nullptr, cchData: 0) != 0)
10052413          var_38_1 = 2
10052413          goto label_10052415
10052413      
100524c6      result = 0
100523fa  else
100523fc      var_38_1 = 1
10052415      label_10052415:
10052415      eax_1 = var_38_1
10052416      data_10063764 = eax_1
1005241b      label_1005241b:
1005241b      
1005241e      if (eax_1 == 2)
1005242c          result = GetLocaleInfoA(Locale: arg1, LCType: arg2, lpLCData: arg3, cchData: arg4)
1005241e      else if (eax_1 != 1)
100524c6          result = 0
1005243a      else
10052443          if (arg5 == 0)
1005244a              arg5 = g_codepage_default
1005244a          
10052455          int32_t cchData =
10052455              GetLocaleInfoW(Locale: arg1, LCType: arg2, lpLCData: nullptr, cchData: 0)
10052455          
10052460          if (cchData == 0)
100524c6              result = 0
10052460          else
10052462              int32_t var_8_1 = 0
1005246a              int32_t eax_6
1005246a              eax_6.b = (cchData * 2 + 3).b & 0xfc
1005246c              sub_10044310(eax_6)
10052471              int32_t* var_1c_1 = &__saved_edi
10052476              int32_t* var_24_1 = &__saved_edi
10052486              int32_t var_8_2 = 0xffffffff
10052486              
1005248c              if (&__saved_edi == 0)
100524c6                  result = 0
1005248c              else if (GetLocaleInfoW(Locale: arg1, LCType: arg2, lpLCData: &__saved_edi, 
1005248c                      cchData) == 0)
100524c6                  result = 0
100524a0              else
100524a7                  PSTR lpMultiByteStr
100524a7                  int32_t cbMultiByte
100524a7                  
100524a7                  if (arg4 != 0)
100524ad                      cbMultiByte = arg4
100524b0                      lpMultiByteStr = arg3
100524a7                  else
100524a9                      cbMultiByte = 0
100524aa                      lpMultiByteStr = nullptr
100524aa                  
100524be                  result = WideCharToMultiByte(CodePage: arg5, dwFlags: 0x220, 
100524be                      lpWideCharStr: &__saved_edi, cchWideChar: 0xffffffff, lpMultiByteStr, 
100524be                      cbMultiByte, lpDefaultChar: nullptr, lpUsedDefaultChar: nullptr)
100524ce  fsbase->NtTib.ExceptionList = ExceptionList
100524d9  return result


1005247b    int32_t sub_1005247b() __pure

1005247e  return 1

1005247f                                                                                               8b                                 .
10052480  65 e8 33 f6 33 ff                                                                                e.3.3.

100524da    int32_t sub_100524da(char* arg1, uint8_t* arg2, void* arg3)

100524e1  if (arg3 == 0)
100524e6      return 0
100524e6  
10052501  enum COMPARESTRING_RESULT eax_1 =
10052501      sub_10052587(data_10069ec4, 1, arg1, arg3, arg2, arg3, data_10069c34)
10052501  
1005250b  if (eax_1 != 0)
10052518      return eax_1 - 2
10052518  
10052513  return 0x7fffffff


10052519    int32_t sub_10052519()

10052519  void* ecx
10052519  void* var_4 = ecx
1005251d  int32_t* esi = data_100634a4
10052526  wchar16* lpWideCharStr = *esi
10052526  
1005252a  while (lpWideCharStr != 0)
1005253c      int32_t eax = WideCharToMultiByte(CodePage: 1, dwFlags: 0, lpWideCharStr, 
1005253c          cchWideChar: 0xffffffff, lpMultiByteStr: nullptr, cbMultiByte: 0, 
1005253c          lpDefaultChar: nullptr, lpUsedDefaultChar: nullptr)
1005253c      
10052542      if (eax == 0)
10052582          return 0xffffffff
10052582      
10052545      void* lpMultiByteStr = ArenaAlloc(size: eax)
10052545      
10052551      if (lpMultiByteStr == 0)
10052582          return 0xffffffff
10052582      
10052562      if (WideCharToMultiByte(CodePage: 1, dwFlags: 0, lpWideCharStr: *esi, 
10052562              cchWideChar: 0xffffffff, lpMultiByteStr, cbMultiByte: eax, 
10052562              lpDefaultChar: nullptr, lpUsedDefaultChar: nullptr) == 0)
10052582          return 0xffffffff
10052582      
10052569      sub_1005282f(lpMultiByteStr, 0)
1005256e      lpWideCharStr = esi[1]
10052571      esi = &esi[1]
10052571  
1005257a  return 0


10052587    enum COMPARESTRING_RESULT sub_10052587(uint32_t arg1, uint32_t arg2, char* arg3, void* arg4, uint8_t* arg5, void* arg6, uint32_t arg7)

1005258a  int32_t var_8 = 0xffffffff
1005258c  int32_t var_c = 0x100591f0
10052591  int32_t var_10 = 0x1004fa8c
1005259c  TEB* fsbase
1005259c  struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList = fsbase->NtTib.ExceptionList
1005259d  fsbase->NtTib.ExceptionList = &ExceptionList
100525aa  int32_t __saved_edi
100525aa  int32_t* var_1c = &__saved_edi
100525aa  
100525b8  if (data_10063768 != 0)
100525b8      goto label_100525fa
100525b8  
100525cd  enum COMPARESTRING_RESULT result
100525cd  
100525cd  if (CompareStringW(Locale: 0, dwCmpFlags: 0, lpString1: &g_locale_unicode_sample, 
100525cd          cchCount1: 1, lpString2: &g_locale_unicode_sample, cchCount2: 1) == 0)
100525ea      if (CompareStringA(Locale: 0, dwCmpFlags: 0, lpString1: &g_locale_ascii_sample, 
100525ea              cchCount1: 1, lpString2: &g_locale_ascii_sample, cchCount2: 1) != 0)
100525f0          data_10063768 = 2
100525f0          goto label_100525fa
100525f0      
100527f0      result = 0
100525cd  else
100525cf      data_10063768 = 1
100525fa      label_100525fa:
100525fa      void* esi_1 = arg4
100525fa      
100525ff      if (esi_1 s> 0)
1005260c          esi_1 = sub_10052804(arg3, esi_1)
1005260e          arg4 = esi_1
1005260e      
10052614      if (arg6 s> 0)
10052623          arg6 = sub_10052804(arg5, arg6)
10052623      
10052626      int32_t eax_5 = data_10063768
10052626      
1005262e      if (eax_5 == 2)
10052640          result = CompareStringA(Locale: arg1, dwCmpFlags: arg2, lpString1: arg3, 
10052640              cchCount1: esi_1, lpString2: arg5, cchCount2: arg6)
1005262e      else if (eax_5 != 1)
100527f0          result = 0
1005264d      else
10052656          if (arg7 == 0)
1005265d              arg7 = g_codepage_default
1005265d          
10052667          if (esi_1 != 0 && arg6 != 0)
10052710              label_10052710:
10052710              int32_t eax_12 = MultiByteToWideChar(CodePage: arg7, 
10052710                  dwFlags: MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, lpMultiByteStr: arg3, 
10052710                  cbMultiByte: esi_1, lpWideCharStr: nullptr, cchWideChar: 0)
10052710              
1005271b              if (eax_12 == 0)
100527f0                  result = 0
1005271b              else
10052721                  int32_t var_8_1 = 0
10052729                  int32_t eax_14
10052729                  eax_14.b = (eax_12 * 2 + 3).b & 0xfc
1005272b                  sub_10044310(eax_14)
10052730                  int32_t* var_1c_1 = &__saved_edi
10052735                  int32_t* var_28_1 = &__saved_edi
10052738                  int32_t var_8_2 = 0xffffffff
10052738                  
10052757                  if (var_28_1 == 0)
100527f0                      result = 0
10052757                  else if (MultiByteToWideChar(CodePage: arg7, dwFlags: MB_PRECOMPOSED, 
10052757                          lpMultiByteStr: arg3, cbMultiByte: esi_1, 
10052757                          lpWideCharStr: var_28_1, cchWideChar: eax_12) == 0)
100527f0                      result = 0
10052775                  else
10052784                      int32_t eax_16 = MultiByteToWideChar(CodePage: arg7, 
10052784                          dwFlags: MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, 
10052784                          lpMultiByteStr: arg5, cbMultiByte: arg6, lpWideCharStr: nullptr, 
10052784                          cchWideChar: 0)
10052788                      int32_t var_24_1 = eax_16
10052788                      
1005278d                      if (eax_16 == 0)
100527f0                          result = 0
1005278d                      else
1005278f                          int32_t var_8_3 = 1
10052798                          int32_t eax_18
10052798                          eax_18.b = (eax_16 * 2 + 3).b & 0xfc
1005279a                          sub_10044310(eax_18)
1005279f                          int32_t* var_1c_2 = &__saved_edi
100527a4                          int32_t* var_2c_1 = &__saved_edi
100527a7                          int32_t var_8_4 = 0xffffffff
100527a7                          
100527c1                          if (&__saved_edi == 0)
100527f0                              result = 0
100527c1                          else if (MultiByteToWideChar(CodePage: arg7, 
100527c1                                  dwFlags: MB_PRECOMPOSED, lpMultiByteStr: arg5, 
100527c1                                  cbMultiByte: arg6, lpWideCharStr: &__saved_edi, 
100527c1                                  cchWideChar: eax_16) == 0)
100527f0                              result = 0
100527d8                          else
100527e8                              result = CompareStringW(Locale: arg1, dwCmpFlags: arg2, 
100527e8                                  lpString1: var_28_1, cchCount1: eax_12, 
100527e8                                  lpString2: &__saved_edi, cchCount2: eax_16)
10052667          else if (esi_1 == arg6)
10052672              label_10052672:
10052674              result = CSTR_EQUAL
10052670          else if (arg6 s> 1)
1005267f              result = CSTR_LESS_THAN
1005267d          else
10052688              CPINFO cPInfo
10052688              
10052688              if (esi_1 s> 1)
10052674                  result = CSTR_GREATER_THAN
10052688              else if (GetCPInfo(CodePage: arg7, lpCPInfo: &cPInfo) == 0)
100527f0                  result = 0
10052699              else
100526a1                  var_3a
100526a1                  char edx_1
100526a1                  
100526a1                  if (esi_1 s<= 0)
100526d2                      if (arg6 s<= 0)
100526d2                          goto label_10052710
100526d2                      
100526d8                      if (cPInfo.MaxCharSize u>= 2)
100526da                          char* eax_10 = &var_3a
100526da                          
100526e0                          if (cPInfo.LeadByte[0] != 0)
100526fe                              do
100526e2                                  edx_1 = eax_10[1]
100526e2                                  
100526e7                                  if (edx_1 == 0)
100526e7                                      break
100526e7                                  
100526ec                                  uint8_t* ecx_4
100526ec                                  ecx_4.b = *arg5
100526ec                                  
100526f4                                  if (ecx_4.b u>= *eax_10 && ecx_4.b u<= edx_1)
100526f4                                      goto label_10052672
100526f4                                  
100526fb                                  eax_10 = &eax_10[2]
100526fe                              while (*eax_10 != 0)
100526fe                      
1005267f                      result = CSTR_LESS_THAN
100526a1                  else
100526a7                      if (cPInfo.MaxCharSize u>= 2)
100526a9                          char* eax_8 = &var_3a
100526a9                          
100526af                          if (cPInfo.LeadByte[0] != 0)
100526c9                              do
100526b1                                  edx_1 = eax_8[1]
100526b1                                  
100526b6                                  if (edx_1 == 0)
100526b6                                      break
100526b6                                  
100526bb                                  char* ecx_3
100526bb                                  ecx_3.b = *arg3
100526bb                                  
100526c3                                  if (ecx_3.b u>= *eax_8 && ecx_3.b u<= edx_1)
100526c3                                      goto label_10052672
100526c3                                  
100526c6                                  eax_8 = &eax_8[2]
100526c9                              while (*eax_8 != 0)
100526c9                      
10052674                      result = CSTR_GREATER_THAN
10052674  
100527f8  fsbase->NtTib.ExceptionList = ExceptionList
10052803  return result


1005273e    int32_t sub_1005273e() __pure

10052741  return 1

10052742        8b 65 e8 33 db 89 5d dc 83 4d fc ff 8b 75 14 6a 01 5f                                        .e.3..]..M...u.j._

100527ad    int32_t sub_100527ad() __pure

100527b0  return 1

100527b1                                                     8b 65 e8 33 db 33 ff 83 4d fc ff 8b 75 e0                      .e.3.3..M...u.

10052804    void* sub_10052804(char* arg1, int32_t arg2)

10052808  char* eax = arg1
1005280f  int32_t ecx = arg2 - 1
1005280f  
10052812  if (arg2 != 0)
10052817      while (*eax != 0)
10052819          eax = &eax[1]
1005281a          int32_t esi_1 = ecx
1005281c          ecx -= 1
1005281c          
1005281f          if (esi_1 == 0)
1005281f              break
1005281f  
10052825  if (*eax != 0)
1005282e      return arg2
1005282e  
1005282b  return eax - arg1


1005282f    int32_t sub_1005282f(char* arg1, int32_t arg2)

10052832  int32_t ecx
10052832  int32_t var_8 = ecx
10052833  int32_t var_c = ecx
10052833  
1005283c  if (arg1 != 0)
10052843      void* eax_1 = sub_10052bad(arg1, 0x3d)
10052843      
10052856      if (eax_1 != 0 && arg1 != eax_1)
10052858          void* eax_2 = data_1006349c
10052862          int32_t ebx_1
10052862          ebx_1.b = *(eax_1 + 1) == 0
10052862          
1005286b          if (eax_2 == data_100634a0)
1005286e              eax_2 = sub_10052a0e(eax_2)
10052874              data_1006349c = eax_2
10052874          
1005287b          if (eax_2 != 0)
1005287b              goto label_100528d4
1005287b          
10052888          if (arg2 == 0 || data_100634a4 == 0)
1005289d              if (ebx_1 != 0)
100529af                  return 0
100529af              
100528a5              void* eax_5 = ArenaAlloc(size: 4)
100528ad              data_1006349c = eax_5
100528ad              
100528b2              if (eax_5 != 0)
100528b4                  *eax_5 = 0
100528b4                  
100528bc                  if (data_100634a4 != 0)
100528bc                      goto label_100528d4
100528bc                  
100528c0                  void* eax_6 = ArenaAlloc(size: 4)
100528c8                  data_100634a4 = eax_6
100528c8                  
100528cd                  if (eax_6 != 0)
100528cf                      *eax_6 = 0
100528d4                      label_100528d4:
100528d4                      int32_t* edi_1 = data_1006349c
100528e6                      int32_t esi_3 = sub_100529b6(arg1, eax_1 - arg1)
100528f1                      void* eax_11
100528f1                      
100528f1                      if (esi_3 s>= 0 && *edi_1 != 0)
100528f5                          if (ebx_1 == 0)
1005292c                              edi_1[esi_3] = arg1
100528f5                          else
100528fa                              void* edi_2 = &edi_1[esi_3]
100528fd                              Gladiator_Free(edi_1[esi_3])
100528fd                              
10052906                              while (*edi_2 != 0)
1005290b                                  esi_3 += 1
1005290c                                  *edi_2 = *(edi_2 + 4)
1005290e                                  edi_2 += 4
1005290e                              
1005291c                              eax_11 = Gladiator_ReallocOrAlloc(edi_1, esi_3 << 2)
1005291c                              
10052925                              if (eax_11 != 0)
10052925                                  goto label_1005295e
10052925                          
10052963                          label_10052963:
10052963                          
10052967                          if (arg2 == 0)
100529af                              return 0
100529af                          
10052979                          PSTR lpName = ArenaAlloc(size: StrLen(arg1) + 2)
10052979                          
1005297f                          if (lpName != 0)
10052985                              StrDupIntoArena(lpName, arg1)
10052991                              void* eax_20 = lpName - arg1 + eax_1
10052994                              *eax_20 = 0
10052998                              int32_t ebx_2 = neg.d(ebx_1)
100529a2                              SetEnvironmentVariableA(lpName, 
100529a2                                  lpValue: not.d(sbb.d(ebx_2, ebx_2, ebx_1 != 0))
100529a2                                      & (eax_20 + 1))
100529a9                              Gladiator_Free(lpName)
100529a9                          
100529af                          return 0
100529af                      
10052933                      if (ebx_1 != 0)
100529af                          return 0
100529af                      
10052937                      if (esi_3 s< 0)
10052939                          esi_3 = neg.d(esi_3)
10052939                      
10052944                      eax_11 = Gladiator_ReallocOrAlloc(edi_1, (esi_3 << 2) + 8)
10052944                      
1005294d                      if (eax_11 != 0)
10052956                          *(eax_11 + (esi_3 << 2)) = arg1
10052959                          *(eax_11 + (esi_3 << 2) + 4) = 0
1005295e                          label_1005295e:
1005295e                          data_1006349c = eax_11
1005295e                          goto label_10052963
10052888          else if (sub_10052519() == 0)
10052891              goto label_100528d4
10052891  
10052893  return 0xffffffff


100529b6    int32_t sub_100529b6(char* arg1, void* arg2)

100529b7  int32_t* esi = data_1006349c
100529be  uint8_t* i = *esi
100529be  
100529c2  while (i != 0)
100529d8      if (sub_100524da(arg1, i, arg2) == 0)
100529dc          char* eax_1
100529dc          eax_1.b = *(*esi + arg2)
100529dc          
100529e5          if (eax_1.b == 0x3d || eax_1.b == 0)
10052a09              return (esi - data_1006349c) s>> 2
10052a09      
100529e7      i = esi[1]
100529ea      esi = &esi[1]
100529ea  
100529fc  return neg.d((esi - data_1006349c) s>> 2)


10052a0e    void* sub_10052a0e(int32_t* arg1)

10052a13  int32_t ecx = 0
10052a13  
10052a17  if (arg1 == 0)
10052a1c      return 0
10052a1c  
10052a20  int32_t* eax_1 = &arg1[1]
10052a20  
10052a23  if (*arg1 != 0)
10052a2d      int32_t i
10052a2d      
10052a2d      do
10052a25          i = *eax_1
10052a27          ecx += 1
10052a28          eax_1 = &eax_1[1]
10052a2d      while (i != 0)
10052a2d  
10052a3f  void* result_1 = ArenaAlloc(size: (ecx << 2) + 4)
10052a44  void* result = result_1
10052a44  
10052a46  if (result_1 == 0)
10052a4a      sub_10045ef6(9)
10052a4a  
10052a50  char* i_1 = *arg1
10052a52  int32_t* ebx = arg1
10052a52  
10052a56  while (i_1 != 0)
10052a59      ebx = &ebx[1]
10052a61      *result_1 = sub_10052c44(i_1)
10052a63      i_1 = *ebx
10052a66      result_1 += 4
10052a66  
10052a6b  *result_1 = 0
10052a74  return result


10052a75    void* Gladiator_ReallocOrAlloc(char* arg1, int32_t* arg2)

10052a80  if (arg1 == 0)
10052bac      return ArenaAlloc(size: arg2)
10052bac  
10052a90  void* dwBytes = arg2
10052a90  
10052a95  if (dwBytes != 0)
10052b9b      bool cond:1_1
10052b9b      
10052b9b      do
10052aaa          if (dwBytes u<= 0xffffffe0)
10052ab2              LockArenaSection(index: 9)
10052ab8              void* eax_2 = ArenaFindChunkHeader(arg1)
10052abe              arg2 = eax_2
10052ac4              void* result
10052ac4              
10052ac4              if (eax_2 == 0)
10052b60                  UnlockArenaSection(index: 9)
10052b60                  
10052b68                  if (dwBytes == 0)
10052b6c                      dwBytes = 1
10052b6c                  
10052b70                  dwBytes = (dwBytes + 0xf) & 0xfffffff0
10052b83                  result = HeapReAlloc(hHeap: g_heapHandle, dwFlags: HEAP_NONE, 
10052b83                      lpMem: arg1, dwBytes)
10052ac4              else
10052ad0                  if (dwBytes u> g_arenaThreshold)
10052b16                      label_10052b16:
10052b16                      
10052b16                      if (dwBytes == 0)
10052b1a                          dwBytes = 1
10052b1a                      
10052b1e                      dwBytes = (dwBytes + 0xf) & 0xfffffff0
10052b30                      result = HeapAlloc(hHeap: g_heapHandle, dwFlags: HEAP_NONE, dwBytes)
10052b30                      
10052b34                      if (result != 0)
10052b39                          void* dwBytes_2 = *(arg1 - 4) - 1
10052b39                          
10052b3c                          if (dwBytes_2 u>= dwBytes)
10052b3e                              dwBytes_2 = dwBytes
10052b3e                          
10052b43                          MemCopyFixedSize(result, arg1, dwBytes_2)
10052b4c                          ArenaDetachAndFreeOld(arg2, arg1)
10052ad0                  else
10052adf                      if (ArenaResizeInPlace(eax_2, arg1, dwBytes) == 0)
10052aeb                          result = ArenaAlloc(dwBytes)
10052aeb                          
10052af0                          if (result == 0)
10052af0                              goto label_10052b16
10052af0                          
10052af5                          void* dwBytes_1 = *(arg1 - 4) - 1
10052af5                          
10052af8                          if (dwBytes_1 u>= dwBytes)
10052afa                              dwBytes_1 = dwBytes
10052afa                          
10052aff                          MemCopyFixedSize(result, arg1, dwBytes_1)
10052b08                          ArenaDetachAndFreeOld(arg2, arg1)
10052b0d                          goto label_10052b10
10052b0d                      
10052ae1                      result = arg1
10052b10                      label_10052b10:
10052b10                      
10052b12                      if (result == 0)
10052b12                          goto label_10052b16
10052b12                  
10052b56                  UnlockArenaSection(index: 9)
10052b56              
10052b87              if (result != 0 || g_allocMode == 0)
10052ba6                  return result
10052aaa          else if (g_allocMode == 0)
10052ba6              return nullptr
10052ba6          
10052b98          cond:1_1 = FallbackTryAlloc(dwBytes) != 0
10052b9b      while (cond:1_1)
10052a95  else
10052a98      Gladiator_Free(arg1)
10052a98  
10052a9e  return nullptr


10052bad    void* sub_10052bad(void* arg1, int32_t arg2)

10052bb7  int32_t ebx
10052bb7  int32_t var_8 = ebx
10052bb7  
10052bb9  if (data_10069cbc == 0)
10052c43      return sub_10045700(arg1, arg2.b)
10052c43  
10052bcc  LockArenaSection(index: 0x19)
10052bd1  void* esi_1 = arg1
10052bd1  
10052bd5  while (true)
10052bd5      ebx.w = zx.w(*esi_1)
10052bd5      
10052bdc      if (ebx.w == 0)
10052bdc          break
10052bdc      
10052be8      if ((*(zx.d(ebx.b) + 0x10069dc1) & 4) != 0)
10052bea          uint32_t eax_2
10052bea          eax_2.b = *(esi_1 + 1)
10052bed          esi_1 += 1
10052bed          
10052bf0          if (eax_2.b == 0)
10052c11              UnlockArenaSection(index: 0x19)
10052c17              return nullptr
10052c17          
10052c00          if (arg2 == (zx.d(ebx.w) << 8 | zx.d(eax_2.b)))
10052c1d              UnlockArenaSection(index: 0x19)
10052c23              return esi_1 - 1
10052be8      else if (arg2 == zx.d(ebx.w))
10052c0a          break
10052c0a      
10052c0c      esi_1 += 1
10052c0c  
10052c2a  UnlockArenaSection(index: 0x19)
10052c36  int32_t eax_6 = arg2 - zx.d(ebx.w)
10052c38  int32_t eax_7 = neg.d(eax_6)
10052c3e  return not.d(sbb.d(eax_7, eax_7, eax_6 != 0)) & esi_1


10052c44    char* sub_10052c44(char* arg1)

10052c4b  if (arg1 != 0)
10052c55      void* eax_3 = ArenaAlloc(size: StrLen(arg1) + 1)
10052c55      
10052c5e      if (eax_3 != 0)
10052c6a          return StrDupIntoArena(eax_3, arg1)
10052c6a  
10052c6e  return 0

10052c6f                                               cc                                                                 .

10052c70    enum WIN32_ERROR __stdcall GetLastError()

10052c70  return GetLastError() __tailcall


10052c76    BOOL __stdcall DeleteFileA(PSTR lpFileName)

10052c76  return DeleteFileA(lpFileName) __tailcall


10052c7c    BOOL __stdcall SetEnvironmentVariableA(PSTR lpName, PSTR lpValue)

10052c7c  return SetEnvironmentVariableA(lpName, lpValue) __tailcall


10052c82    uint32_t __stdcall GetCurrentDirectoryA(uint32_t nBufferLength, uint8_t* lpBuffer)

10052c82  return GetCurrentDirectoryA(nBufferLength, lpBuffer) __tailcall


10052c88    BOOL __stdcall SetCurrentDirectoryA(PSTR lpPathName)

10052c88  return SetCurrentDirectoryA(lpPathName) __tailcall


10052c8e    uint32_t __stdcall GetFullPathNameA(PSTR lpFileName, uint32_t nBufferLength, uint8_t* lpBuffer, PSTR* lpFilePart)

10052c8e  return GetFullPathNameA(lpFileName, nBufferLength, lpBuffer, lpFilePart) __tailcall


10052c94    uint32_t __stdcall GetDriveTypeA(PSTR lpRootPathName)

10052c94  return GetDriveTypeA(lpRootPathName) __tailcall


10052c9a    int32_t InterlockedDecrement()

10052c9a  return InterlockedDecrement() __tailcall


10052ca0    int32_t InterlockedIncrement()

10052ca0  return InterlockedIncrement() __tailcall


10052ca6    uint32_t __stdcall GetTimeZoneInformation(TIME_ZONE_INFORMATION* lpTimeZoneInformation)

10052ca6  return GetTimeZoneInformation(lpTimeZoneInformation) __tailcall


10052cac    void __stdcall GetSystemTime(SYSTEMTIME* lpSystemTime)

10052cac  return GetSystemTime(lpSystemTime) __tailcall


10052cb2    void __stdcall GetLocalTime(SYSTEMTIME* lpSystemTime)

10052cb2  return GetLocalTime(lpSystemTime) __tailcall


10052cb8    void __stdcall GetSystemTimeAsFileTime(FILETIME* lpSystemTimeAsFileTime)

10052cb8  return GetSystemTimeAsFileTime(lpSystemTimeAsFileTime) __tailcall


10052cbe    BOOL __stdcall HeapFree(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem)

10052cbe  return HeapFree(hHeap, dwFlags, lpMem) __tailcall


10052cc4    PSTR __stdcall GetCommandLineA()

10052cc4  return GetCommandLineA() __tailcall


10052cca    HMODULE __stdcall GetModuleHandleA(PSTR lpModuleName)

10052cca  return GetModuleHandleA(lpModuleName) __tailcall


10052cd0    void __stdcall RaiseException(uint32_t dwExceptionCode, uint32_t dwExceptionFlags, uint32_t nNumberOfArguments, uint32_t* lpArguments) __noreturn

10052cd0  noreturn RaiseException(dwExceptionCode, dwExceptionFlags, nNumberOfArguments, 
10052cd0      lpArguments) __tailcall


10052cd6    void __stdcall EnterCriticalSection(CRITICAL_SECTION* lpCriticalSection)

10052cd6  return EnterCriticalSection(lpCriticalSection) __tailcall


10052cdc    void __stdcall LeaveCriticalSection(CRITICAL_SECTION* lpCriticalSection)

10052cdc  return LeaveCriticalSection(lpCriticalSection) __tailcall


10052ce2    BOOL __stdcall ReadFile(HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToRead, uint32_t* lpNumberOfBytesRead, OVERLAPPED* lpOverlapped)

10052ce2  return ReadFile(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped)
10052ce2      __tailcall


10052ce8    uint32_t __stdcall SetFilePointer(HANDLE hFile, int32_t lDistanceToMove, int32_t* lpDistanceToMoveHigh, enum SET_FILE_POINTER_MOVE_METHOD dwMoveMethod)

10052ce8  return SetFilePointer(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod)
10052ce8      __tailcall


10052cee    BOOL __stdcall CloseHandle(HANDLE hObject)

10052cee  return CloseHandle(hObject) __tailcall


10052cf4    void __stdcall InitializeCriticalSection(CRITICAL_SECTION* lpCriticalSection)

10052cf4  return InitializeCriticalSection(lpCriticalSection) __tailcall


10052cfa    BOOL __stdcall WriteFile(HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToWrite, uint32_t* lpNumberOfBytesWritten, OVERLAPPED* lpOverlapped)

10052cfa  return WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, 
10052cfa      lpOverlapped) __tailcall


10052d00    uint32_t __stdcall SetHandleCount(uint32_t uNumber)

10052d00  return SetHandleCount(uNumber) __tailcall


10052d06    HANDLE __stdcall GetStdHandle(enum STD_HANDLE nStdHandle)

10052d06  return GetStdHandle(nStdHandle) __tailcall


10052d0c    enum FILE_TYPE __stdcall GetFileType(HANDLE hFile)

10052d0c  return GetFileType(hFile) __tailcall


10052d12    void __stdcall GetStartupInfoA(STARTUPINFOA* lpStartupInfo)

10052d12  return GetStartupInfoA(lpStartupInfo) __tailcall


10052d18    void __stdcall DeleteCriticalSection(CRITICAL_SECTION* lpCriticalSection)

10052d18  return DeleteCriticalSection(lpCriticalSection) __tailcall


10052d1e    uint32_t __stdcall GetCurrentThreadId()

10052d1e  return GetCurrentThreadId() __tailcall


10052d24    BOOL __stdcall TlsSetValue(uint32_t dwTlsIndex, void* lpTlsValue)

10052d24  return TlsSetValue(dwTlsIndex, lpTlsValue) __tailcall


10052d2a    uint32_t __stdcall TlsAlloc()

10052d2a  return TlsAlloc() __tailcall


10052d30    BOOL __stdcall TlsFree(uint32_t dwTlsIndex)

10052d30  return TlsFree(dwTlsIndex) __tailcall


10052d36    void __stdcall SetLastError(enum WIN32_ERROR dwErrCode)

10052d36  return SetLastError(dwErrCode) __tailcall


10052d3c    int32_t __stdcall TlsGetValue(uint32_t dwTlsIndex)

10052d3c  return TlsGetValue(dwTlsIndex) __tailcall


10052d42    HANDLE __stdcall GetCurrentThread()

10052d42  return GetCurrentThread() __tailcall


10052d48    void __stdcall ExitProcess(uint32_t uExitCode) __noreturn

10052d48  noreturn ExitProcess(uExitCode) __tailcall


10052d4e    void __stdcall FatalAppExitA(uint32_t uAction, PSTR lpMessageText)

10052d4e  return FatalAppExitA(uAction, lpMessageText) __tailcall


10052d54    int32_t __stdcall HeapAlloc(HANDLE hHeap, enum HEAP_FLAGS dwFlags, uint32_t dwBytes)

10052d54  return HeapAlloc(hHeap, dwFlags, dwBytes) __tailcall


10052d5a    void __stdcall Sleep(uint32_t dwMilliseconds)

10052d5a  return Sleep(dwMilliseconds) __tailcall


10052d60    int32_t __stdcall WideCharToMultiByte(uint32_t CodePage, uint32_t dwFlags, wchar16* lpWideCharStr, int32_t cchWideChar, PSTR lpMultiByteStr, int32_t cbMultiByte, PSTR lpDefaultChar, BOOL* lpUsedDefaultChar)

10052d60  return WideCharToMultiByte(CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, 
10052d60      cbMultiByte, lpDefaultChar, lpUsedDefaultChar) __tailcall


10052d66    int32_t __stdcall MultiByteToWideChar(uint32_t CodePage, enum MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, uint8_t* lpMultiByteStr, int32_t cbMultiByte, wchar16* lpWideCharStr, int32_t cchWideChar)

10052d66  return MultiByteToWideChar(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, 
10052d66      cchWideChar) __tailcall


10052d6c    int32_t __stdcall LCMapStringA(uint32_t Locale, uint32_t dwMapFlags, uint8_t* lpSrcStr, int32_t cchSrc, PSTR lpDestStr, int32_t cchDest)

10052d6c  return LCMapStringA(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest) __tailcall


10052d72    int32_t __stdcall LCMapStringW(uint32_t Locale, uint32_t dwMapFlags, wchar16* lpSrcStr, int32_t cchSrc, PWSTR lpDestStr, int32_t cchDest)

10052d72  return LCMapStringW(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest) __tailcall


10052d78    BOOL __stdcall FlushFileBuffers(HANDLE hFile)

10052d78  return FlushFileBuffers(hFile) __tailcall


10052d7e    BOOL __stdcall HeapDestroy(HANDLE hHeap)

10052d7e  return HeapDestroy(hHeap) __tailcall


10052d84    HANDLE __stdcall HeapCreate(enum HEAP_FLAGS flOptions, uint32_t dwInitialSize, uint32_t dwMaximumSize)

10052d84  return HeapCreate(flOptions, dwInitialSize, dwMaximumSize) __tailcall


10052d8a    BOOL __stdcall VirtualFree(void* lpAddress, uint32_t dwSize, enum VIRTUAL_FREE_TYPE dwFreeType)

10052d8a  return VirtualFree(lpAddress, dwSize, dwFreeType) __tailcall


10052d90    int32_t __stdcall VirtualAlloc(void* lpAddress, uint32_t dwSize, enum VIRTUAL_ALLOCATION_TYPE flAllocationType, enum PAGE_PROTECTION_FLAGS flProtect)

10052d90  return VirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect) __tailcall


10052d96    int32_t __stdcall HeapReAlloc(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem, uint32_t dwBytes)

10052d96  return HeapReAlloc(hHeap, dwFlags, lpMem, dwBytes) __tailcall


10052d9c    BOOL __stdcall IsBadWritePtr(void* lp, uint32_t ucb)

10052d9c  return IsBadWritePtr(lp, ucb) __tailcall


10052da2    BOOL __stdcall TerminateProcess(HANDLE hProcess, uint32_t uExitCode)

10052da2  return TerminateProcess(hProcess, uExitCode) __tailcall


10052da8    HANDLE __stdcall GetCurrentProcess()

10052da8  return GetCurrentProcess() __tailcall


10052dae    uint32_t __stdcall GetModuleFileNameA(HMODULE hModule, uint8_t* lpFilename, uint32_t nSize)

10052dae  return GetModuleFileNameA(hModule, lpFilename, nSize) __tailcall


10052db4    BOOL __stdcall FreeEnvironmentStringsA(PSTR penv)

10052db4  return FreeEnvironmentStringsA(penv) __tailcall


10052dba    BOOL __stdcall FreeEnvironmentStringsW(PWSTR penv)

10052dba  return FreeEnvironmentStringsW(penv) __tailcall


10052dc0    PSTR __stdcall GetEnvironmentStrings()

10052dc0  return GetEnvironmentStrings() __tailcall


10052dc6    PWSTR __stdcall GetEnvironmentStringsW()

10052dc6  return GetEnvironmentStringsW() __tailcall


10052dcc    BOOL __stdcall GetStringTypeA(uint32_t Locale, uint32_t dwInfoType, uint8_t* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)

10052dcc  return GetStringTypeA(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType) __tailcall


10052dd2    BOOL __stdcall GetStringTypeW(uint32_t dwInfoType, wchar16* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)

10052dd2  return GetStringTypeW(dwInfoType, lpSrcStr, cchSrc, lpCharType) __tailcall


10052dd8    BOOL __stdcall SetStdHandle(enum STD_HANDLE nStdHandle, HANDLE hHandle)

10052dd8  return SetStdHandle(nStdHandle, hHandle) __tailcall


10052dde    HANDLE __stdcall CreateFileA(PSTR lpFileName, uint32_t dwDesiredAccess, enum FILE_SHARE_MODE dwShareMode, SECURITY_ATTRIBUTES* lpSecurityAttributes, enum FILE_CREATION_DISPOSITION dwCreationDisposition, enum FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, HANDLE hTemplateFile)

10052dde  return CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, 
10052dde      dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile) __tailcall


10052de4    int32_t __stdcall UnhandledExceptionFilter(EXCEPTION_POINTERS* ExceptionInfo)

10052de4  return UnhandledExceptionFilter(ExceptionInfo) __tailcall


10052dea    BOOL __stdcall GetCPInfo(uint32_t CodePage, CPINFO* lpCPInfo)

10052dea  return GetCPInfo(CodePage, lpCPInfo) __tailcall


10052df0    uint32_t __stdcall GetACP()

10052df0  return GetACP() __tailcall


10052df6    uint32_t __stdcall GetOEMCP()

10052df6  return GetOEMCP() __tailcall


10052dfc    BOOL __stdcall IsValidLocale(uint32_t Locale, enum IS_VALID_LOCALE_FLAGS dwFlags)

10052dfc  return IsValidLocale(Locale, dwFlags) __tailcall


10052e02    BOOL __stdcall IsValidCodePage(uint32_t CodePage)

10052e02  return IsValidCodePage(CodePage) __tailcall


10052e08    int32_t __stdcall GetLocaleInfoA(uint32_t Locale, uint32_t LCType, uint8_t* lpLCData, int32_t cchData)

10052e08  return GetLocaleInfoA(Locale, LCType, lpLCData, cchData) __tailcall


10052e0e    BOOL __stdcall EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc, uint32_t dwFlags)

10052e0e  return EnumSystemLocalesA(lpLocaleEnumProc, dwFlags) __tailcall


10052e14    uint32_t __stdcall GetUserDefaultLCID()

10052e14  return GetUserDefaultLCID() __tailcall


10052e1a    BOOL __stdcall GetVersionExA(OSVERSIONINFOA* lpVersionInformation)

10052e1a  return GetVersionExA(lpVersionInformation) __tailcall


10052e20    void __stdcall RtlUnwind(void* TargetFrame, void* TargetIp, EXCEPTION_RECORD* ExceptionRecord, void* ReturnValue)

10052e20  return RtlUnwind(TargetFrame, TargetIp, ExceptionRecord, ReturnValue) __tailcall


10052e26    BOOL __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add)

10052e26  return SetConsoleCtrlHandler(HandlerRoutine, Add) __tailcall


10052e2c    BOOL __stdcall SetEndOfFile(HANDLE hFile)

10052e2c  return SetEndOfFile(hFile) __tailcall


10052e32    int32_t __stdcall GetLocaleInfoW(uint32_t Locale, uint32_t LCType, wchar16* lpLCData, int32_t cchData)

10052e32  return GetLocaleInfoW(Locale, LCType, lpLCData, cchData) __tailcall


10052e38    enum COMPARESTRING_RESULT __stdcall CompareStringA(uint32_t Locale, uint32_t dwCmpFlags, char* lpString1, int32_t cchCount1, char* lpString2, int32_t cchCount2)

10052e38  return CompareStringA(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2)
10052e38      __tailcall


10052e3e    enum COMPARESTRING_RESULT __stdcall CompareStringW(uint32_t Locale, uint32_t dwCmpFlags, wchar16* lpString1, int32_t cchCount1, wchar16* lpString2, int32_t cchCount2)

10052e3e  return CompareStringW(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2)
10052e3e      __tailcall


10052e44    char* sub_10052e44(int32_t arg1, void* arg2)

10052e5b  void arg_c
10052e5b  return TryResolveAndExecuteCommand(arg1, arg2, &arg_c, nullptr)


10052e5c    int32_t sub_10052e5c(PSTR arg1, char arg2)

10052e60  uint32_t eax = GetFileAttributesA(lpFileName: arg1)
10052e60  
10052e69  if (eax != 0xffffffff)
10052e85      if ((eax.b & 1) == 0 || (arg2 & 2) == 0)
10052ea1          return 0
10052ea1      
10052e8c      *sub_10044f86() = 0xd
10052e97      *sub_10044f8f() = 5
10052e69  else
10052e72      sub_10044f13(GetLastError())
10052e72  
10052e7b  return 0xffffffff


10052ea2    char* TryResolveAndExecuteCommand(int32_t arg1, void* arg2, int32_t* arg3, int32_t* arg4)

10052ea5  int32_t ecx
10052ea5  int32_t var_8 = ecx
10052ea6  int32_t var_c = ecx
10052ea8  void* ebx = arg2
10052eb0  void* edi = ebx
10052eba  char* esi = StrRChr(ebx, 0x5c)
10052ebc  char* eax_1 = StrRChr(ebx, 0x2f)
10052ebc  
10052ec6  if (eax_1 != 0)
10052f13      if (esi == 0 || eax_1 u> esi)
10052f15          esi = eax_1
10052f15      
10052f13      goto label_10052f17
10052f13  
10052eca  if (esi != 0)
10052eca      goto label_10052f17
10052eca  
10052ed4  esi = sub_10052bad(ebx, 0x3a)
10052ed4  
10052eda  if (esi != 0)
10052eda      goto label_10052f17
10052eda  
10052eeb  edi = ArenaAlloc(size: StrLen(ebx) + 3)
10052eeb  
10052ef1  if (edi != 0)
10052ef9      StrDupIntoArena(edi, ".\")
10052f00      ArenaStrCopyFrom(dst: edi, src: ebx)
10052f08      esi = edi + 2
10052f17      label_10052f17:
10052f17      char* result = 0xffffffff
10052f17      
10052f27      if (StrRChr(esi, 0x2e) != 0)
10052f36          if (sub_10052e5c(edi, 0) != 0xffffffff)
10052f4e              result = TrySpawnProcess(arg1, edi, arg3, arg4)
10052f4e          
10052f36          goto label_10052fda
10052f36      
10052f60      void* eax_11 = ArenaAlloc(size: StrLen(edi) + 5)
10052f6b      PSTR var_8_1 = eax_11
10052f6b      
10052f6e      if (eax_11 != 0)
10052f77          StrDupIntoArena(eax_11, edi)
10052f87          void* esi_2 = StrLen(edi) + eax_11
10052f87          
10052fb1          for (char const (** i)[0x5] = &data_100620a8; i s>= &data_1006209c; i -= 4)
10052f91              StrDupIntoArena(esi_2, *i)
10052f91              
10052fa6              if (sub_10052e5c(var_8_1, 0) != 0xffffffff)
10052fc9                  result = TrySpawnProcess(arg1, var_8_1, arg3, arg4)
10052fc9                  break
10052fc9          
10052fcf          Gladiator_Free(var_8_1)
10052fd4          ebx = arg2
10052fda          label_10052fda:
10052fda          
10052fda          if (edi != ebx)
10052fdd              Gladiator_Free(edi)
10052fdd          
10052fe3          return result
10052fe3  
10052f70  return 0xffffffff


10052feb    char* TrySpawnProcess(int32_t arg1, PSTR arg2, int32_t* arg3, int32_t* arg4)

10052fee  PSTR __saved_esi = arg2
10052fff  int32_t eax = BuildEnvironmentAndCommandLine(arg3, arg4, &arg4, &arg3)
10052fff  
1005300a  if (eax == 0xffffffff)
1005300f      return eax
1005300f  
10053011  int32_t* var_c_1 = arg3
1005301d  char* eax_2 = SpawnProcessAndWait(arg1, arg2, arg4)
10053027  Gladiator_Free(arg4)
1005302f  Gladiator_Free(arg3)
1005303b  return eax_2


1005303c    char* StrRChr(char* arg1, int32_t arg2)

10053040  char* result = nullptr
10053040  
10053048  if (data_10069cbc == 0)
100530ad      return StrRChrSafe(arg1, arg2.b)
100530ad  
1005305c  LockArenaSection(index: 0x19)
10053062  char* result_1 = arg1
1005309e  char i
1005309e  
1005309e  do
10053065      i = *result_1
10053067      uint32_t i_1 = zx.d(i)
10053074      bool cond:0_1
10053074      
10053074      if ((*(zx.d(i_1.b) + 0x10069dc1) & 4) == 0)
10053094          cond:0_1 = arg2 != i_1
10053097          label_10053097:
10053097          
10053097          if (not(cond:0_1))
10053099              result = result_1
10053074      else
10053076          i = result_1[1]
10053079          result_1 = &result_1[1]
10053079          
1005307c          if (i == 0)
10053090              cond:0_1 = result != 0
10053092              goto label_10053097
10053092          
10053089          if (arg2 == (i_1 << 8 | zx.d(i)))
1005308b              result = &result_1[0xffffffff]
1005309b      result_1 = &result_1[1]
1005309e  while (i != 0)
100530a2  UnlockArenaSection(index: 0x19)
100530a8  return result


100530ae    char* SpawnProcessAndWait(int32_t arg1, PSTR arg2, int32_t arg3)

100530ae  int32_t __saved_ebp_1
100530ae  int32_t __saved_ebp = __saved_ebp_1
100530b7  char var_5 = 0
100530bb  int32_t ebx
100530bb  int32_t var_68 = ebx
100530bc  int32_t esi
100530bc  int32_t var_6c = esi
100530bd  int32_t edi
100530bd  int32_t var_70 = edi
100530bd  int32_t* esp_1 = &var_70
100530c2  enum PROCESS_CREATION_FLAGS dwCreationFlags = 0
100530c2  
100530ca  if (arg1 == 0 || arg1 == 1)
100530c5      goto label_100530dc
100530c5  
100530cc  char* result
100530cc  
100530cc  if (arg1 s<= 1)
10053103      label_10053103:
10053103      *sub_10044f86() = 0x16
1005310e      *sub_10044f8f() = 0
10053239      result = 0xffffffff
100530cc  else
100530d1      if (arg1 s<= 3)
100530d1          goto label_100530dc
100530d1      
100530d6      if (arg1 != 4)
100530d6          goto label_10053103
100530d6      
100530d8      var_5 = 1
100530dc      label_100530dc:
100530dc      char* result_1
100530dc      char* lpCommandLine_1 = result_1
100530df      char* lpCommandLine = lpCommandLine_1
100530df      
100530e2      while (true)
100530e2          void* ecx
100530e2          ecx.b = *lpCommandLine_1
100530e2          
100530e6          if (ecx.b == 0)
100530e6              break
100530e6          
100530ec          do
100530e8              lpCommandLine_1 = &lpCommandLine_1[1]
100530ec          while (*lpCommandLine_1 != 0)
100530ec          
100530f5          if (lpCommandLine_1[1] != 0)
100530f7              *lpCommandLine_1 = 0x20
100530fa              lpCommandLine_1 = &lpCommandLine_1[1]
100530fa      
10053115      PROCESS_INFORMATION* lpProcessInformation = 0x44
1005311a      PROCESS_INFORMATION* esi_1 = lpProcessInformation
1005311b      lpProcessInformation = esi_1
1005311c      int32_t var_78_1 = 0
1005311e      PROCESS_INFORMATION* startupInfo
1005311e      sub_1004c9c0(&startupInfo, 0, lpProcessInformation)
10053123      startupInfo = esi_1
10053126      PROCESS_INFORMATION* i = data_1006a07c
10053126      
10053131      if (i != 0)
10053133          void* __offset(_PROCESS_INFORMATION, -0x1) ecx_1 = i - 1
10053133          
10053155          do
1005314f              if (*((&data_10069f40)[ecx_1 s>> 5] + (ecx_1 & 0x1f) * 0x24 + 4) != 0)
1005314f                  break
1005314f              
10053151              i -= 1
10053152              ecx_1 -= 1
10053155          while (i != 0)
10053155      
1005315b      lpProcessInformation = 1
1005315d      int16_t var_32_1 = i.w + (i << 2).w + 4
10053165      void* lpProcessInformation_1 =
10053165          sub_1004d4bf(zx.d(i.w + (i << 2).w + 4), lpProcessInformation)
1005316e      *lpProcessInformation_1 = i
10053170      void* lpProcessInformation_3 = lpProcessInformation_1
10053174      int32_t ebx_1 = 0
10053178      void* ecx_2 = lpProcessInformation_3 + 4
1005317b      void* edx_4 = &i->hThread + lpProcessInformation_3
1005317b      
1005317f      if (i s> 0)
100531b4          do
10053195              int32_t* edi_4 = (&data_10069f40)[ebx_1 s>> 5] + (ebx_1 & 0x1f) * 0x24
10053198              int32_t eax_10
10053198              eax_10.b = edi_4[1].b
10053198              
1005319d              if ((eax_10.b & 0x10) != 0)
100531a7                  *ecx_2 = 0
100531aa                  *edx_4 = 0xffffffff
1005319d              else
1005319f                  *ecx_2 = eax_10.b
100531a3                  *edx_4 = *edi_4
100531a3              
100531ad              ebx_1 += 1
100531ae              ecx_2 += 1
100531af              edx_4 += 4
100531b4          while (ebx_1 s< i)
100531b4          
100531b6          lpProcessInformation_3 = lpProcessInformation_1
100531b6      
100531bf      if (var_5 != 0)
100531c1          void* ecx_3 = lpProcessInformation_3 + 4
100531c4          int32_t edx_5 = 0
100531c6          void* eax_12 = &i->hThread + lpProcessInformation_3
100531c6          
100531cd          while (true)
100531cd              PROCESS_INFORMATION* ebx_2
100531cd              
100531cd              if (i s>= 3)
100531d3                  lpProcessInformation = 3
100531d5                  ebx_2 = lpProcessInformation
100531cd              else
100531cf                  ebx_2 = i
100531cf              
100531d8              if (edx_5 s>= ebx_2)
100531d8                  break
100531d8              
100531da              *ecx_3 = 0
100531dd              *eax_12 = 0xffffffff
100531e0              edx_5 += 1
100531e1              ecx_3 += 1
100531e2              eax_12 += 4
100531e2          
100531e7          dwCreationFlags = DETACHED_PROCESS
100531e7      
100531f3      *sub_10044f86() = 0
100531fa      *sub_10044f8f() = 0
100531ff      char* result_2
100531ff      lpProcessInformation = &result_2
10053204      int32_t var_7c_2 = 0
1005320b      int32_t var_88_1 = 1
1005320d      int32_t var_8c_1 = 0
1005320e      int32_t var_90_1 = 0
10053215      BOOL eax_15 = CreateProcessA(lpApplicationName: arg2, lpCommandLine, 
10053215          lpProcessAttributes: nullptr, lpThreadAttributes: nullptr, bInheritHandles: 1, 
10053215          dwCreationFlags, lpEnvironment: arg3, lpCurrentDirectory: nullptr, 
10053215          lpStartupInfo: &startupInfo, lpProcessInformation)
1005321d      enum WIN32_ERROR lpProcessInformation_2 = GetLastError()
10053223      lpProcessInformation = lpProcessInformation_1
10053228      Gladiator_Free(lpProcessInformation)
1005322f      int32_t* esp_2 = &var_70
1005322f      
10053230      if (eax_15 != 0)
10053242          if (arg1 == 2)
10053244              lpProcessInformation = nullptr
10053244              esp_2 = &lpProcessInformation
10053245              sub_1004bab3(lpProcessInformation)
10053245          
10053253          if (arg1 == 0)
10053255              *(esp_2 - 4) = 0xffffffff
10053257              *(esp_2 - 8) = result_2
1005325a              WaitForSingleObject()
10053263              *(esp_2 - 4) = &result_1
10053264              *(esp_2 - 8) = result_2
10053267              GetExitCodeProcess()
1005326d              *(esp_2 - 4) = result_2
10053270              CloseHandle()
10053253          else if (arg1 != 4)
10053287              result_1 = result_2
10053278          else
1005327a              *(esp_2 - 4) = result_2
1005327d              CloseHandle()
1005327f              result_1 = nullptr
1005327f          
1005328a          int32_t var_1c
1005328a          *(esp_2 - 4) = var_1c
1005328d          CloseHandle()
1005328d          esp_1 = esp_2
1005328f          result = result_1
10053230      else
10053232          lpProcessInformation = lpProcessInformation_2
10053233          sub_10044f13(lpProcessInformation)
10053238          esp_1 = &var_70
10053239          result = 0xffffffff
10053239  
10053292  *esp_1
10053292  esp_1[1]
10053293  esp_1[2]
10053296  return result


10053297    int32_t BuildEnvironmentAndCommandLine(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t* arg4)

1005329b  int32_t* ebx = arg1
100532a2  void* esi = 2
100532a3  void* size = 2
100532a3  
100532a5  while (true)
100532a5      char* eax_1 = *ebx
100532a5      
100532a9      if (eax_1 == 0)
100532a9          break
100532a9      
100532ac      ebx = &ebx[1]
100532b5      size = size + StrLen(eax_1) + 1
100532b5  
100532bc  void* eax_3 = ArenaAlloc(size)
100532c7  *arg3 = eax_3
100532c7  
100532c9  if (eax_3 == 0)
100532ce      *arg4 = 0
100533bd      label_100533bd:
100533bd      *sub_10044f86() = 0xc
100533c8      *sub_10044f8f() = 8
100533ce      return 0xffffffff
100533ce  
100532d6  int32_t* edi = arg2
100532db  void* ebx_1
100532db  int32_t* edi_1
100532db  
100532db  if (edi == 0)
100532f6      ebx_1 = arg4
100532f9      edi_1 = arg4
100532fc      *arg4 = 0
100532db  else
100532dd      while (true)
100532dd          char* eax_5 = *edi
100532dd          
100532e1          if (eax_5 == 0)
100532e1              break
100532e1          
100532e4          edi = &edi[1]
100532ed          esi = esi + StrLen(eax_5) + 1
100532ed      
1005331a      char* eax_11 = data_100633b4
10053321      void** ecx_2
10053321      
10053321      if (eax_11 == 0)
10053323          eax_11, ecx_2 = DuplicateEnvironmentBlock()
1005332a          data_100633b4 = eax_11
1005332a          
1005332f          if (eax_11 == 0)
100533ce              return 0xffffffff
100533ce      
10053335      ebx_1 = nullptr
10053335      
10053339      if (*eax_11 != 0)
1005333b          void* edi_2 = eax_11
1005333d          ecx_2.b = *edi_2
1005333d          
10053342          while (ecx_2.b != 0x3d)
1005334a              ebx_1 = ebx_1 + StrLen(edi_2) + 1
1005334e              eax_11 = data_100633b4
10053354              ecx_2.b = *(eax_11 + ebx_1)
10053357              edi_2 = eax_11 + ebx_1
10053357              
1005335c              if (ecx_2.b == 0)
1005335c                  break
1005335c      
1005335e      edi_1 = ebx_1
10053360      void* eax_13 = eax_11 + ebx_1
10053360      
10053365      while (*eax_13 == 0x3d)
1005336b          if (*(eax_13 + 1) == 0)
1005336b              break
1005336b          
10053371          if (*(eax_13 + 2) != 0x3a)
10053371              break
10053371          
10053377          if (*(eax_13 + 3) != 0x3d)
10053377              break
10053377          
10053382          edi_1 = edi_1 + StrLen(eax_13 + 4) + 5
1005338c          eax_13 = data_100633b4 + edi_1
1005338c      
10053397      void* eax_20 = ArenaAlloc(size: edi_1 - ebx_1 + esi)
100533a2      *arg4 = eax_20
100533a2      
100533a4      if (eax_20 == 0)
100533af          Gladiator_Free(*arg3)
100533b4          *arg3 = 0
100533b7          goto label_100533bd
100533b7  
10053302  void* esi_1 = *arg3
10053307  arg3 = arg1
1005330a  char* eax_10 = *arg1
1005330e  char* esi_3
1005330e  
1005330e  if (eax_10 != 0)
100533d8      StrDupIntoArena(esi_1, eax_10)
100533e6      arg3 = &arg1[1]
100533f1      esi_3 = esi_1 + StrLen(*arg1) + 1
100533f1      goto label_100533f8
100533f1  
10053314  while (true)
10053314      esi_3 = esi_1 + 1
100533f8      label_100533f8:
100533f8      char* eax_27 = *arg3
100533f8      
100533fc      if (eax_27 == 0)
100533fc          break
100533fc      
10053400      StrDupIntoArena(esi_3, eax_27)
10053405      int32_t* eax_28 = arg3
10053408      arg3 = &arg3[1]
10053417      esi_1 = esi_3 + StrLen(*eax_28)
10053419      *esi_1 = 0x20
10053419  
10053424  esi_3[0xffffffff] = 0
10053428  *esi_3 = 0
1005342f  char* esi_4 = *arg4
1005342f  
10053431  if (arg2 != 0)
10053441      MemCopyFixedSize(esi_4, data_100633b4 + ebx_1, edi_1 - ebx_1)
1005344b      esi_4 = &esi_4[edi_1 - ebx_1]
1005344d      int32_t* edi_4 = arg2
1005344d      
10053450      while (true)
10053450          char* eax_36 = *edi_4
10053450          
10053454          if (eax_36 == 0)
10053454              break
10053454          
10053458          StrDupIntoArena(esi_4, eax_36)
1005345d          char* eax_37 = *edi_4
1005345f          edi_4 = &edi_4[1]
1005346b          esi_4 = esi_4 + StrLen(eax_37) + 1
1005346b  
10053473  if (esi_4 != 0)
1005347a      if (esi_4 == *arg4)
1005347c          *esi_4 = 0
1005347f          esi_4 = &esi_4[1]
1005347f      
10053480      *esi_4 = 0
10053480  
10053489  Gladiator_Free(data_100633b4)
1005348e  data_100633b4 = 0
10053496  return 0

1005349d                                                                                         cc cc cc                               ...

100534a0    char* StrRChrSafe(int32_t arg1, char arg2)

100534a4  int32_t edi = arg1
100534a9  int32_t i = 0xffffffff
100534a9  
100534ac  while (i != 0)
100534ac      bool cond:0_1 = 0 != *edi
100534ac      edi += 1
100534ac      i -= 1
100534ac      
100534ac      if (not(cond:0_1))
100534ac          break
100534ac  
100534af  int32_t i_1 = neg.d(i + 1)
100534b1  void* edi_1 = edi - 1
100534b1  
100534b6  while (i_1 != 0)
100534b6      bool cond:1_1 = arg2 != *edi_1
100534b6      edi_1 -= 1
100534b6      i_1 -= 1
100534b6      
100534b6      if (not(cond:1_1))
100534b6          break
100534b6  
100534bb  if (*(edi_1 + 1) == arg2)
100534c1      return edi_1 + 1
100534c1  
100534bd  return nullptr

100534c7                       cc                                                                                 .

100534c8    uint32_t __stdcall GetFileAttributesA(PSTR lpFileName)

100534c8  return GetFileAttributesA(lpFileName) __tailcall


100534ce    BOOL __stdcall GetExitCodeProcess(HANDLE hProcess, uint32_t* lpExitCode)

100534ce  return GetExitCodeProcess(hProcess, lpExitCode) __tailcall


100534d4    enum WAIT_EVENT __stdcall WaitForSingleObject(HANDLE hHandle, uint32_t dwMilliseconds)

100534d4  return WaitForSingleObject(hHandle, dwMilliseconds) __tailcall


100534da    BOOL __stdcall CreateProcessA(PSTR lpApplicationName, PSTR lpCommandLine, SECURITY_ATTRIBUTES* lpProcessAttributes, SECURITY_ATTRIBUTES* lpThreadAttributes, BOOL bInheritHandles, enum PROCESS_CREATION_FLAGS dwCreationFlags, void* lpEnvironment, PSTR lpCurrentDirectory, STARTUPINFOA* lpStartupInfo, PROCESS_INFORMATION* lpProcessInformation)

100534da  return CreateProcessA(lpApplicationName, lpCommandLine, lpProcessAttributes, 
100534da      lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, 
100534da      lpCurrentDirectory, lpStartupInfo, lpProcessInformation) __tailcall

100534e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100535a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100535c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100535e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100536a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100536c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100536e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100537a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100537c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100537e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100538a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100538c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100538e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100539a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100539c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100539e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10053fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100540a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100540c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100540e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100541a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100541c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100541e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100542a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100542c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100542e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100543a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100543c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100543e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100544a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100544c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100544e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100545a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100545c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100545e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100546a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100546c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100546e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100547a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100547c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100547e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100548a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100548c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100548e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100549a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100549c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100549e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10054fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100550a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100550c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100550e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100551a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100551c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100551e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100552a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100552c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100552e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100553a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100553c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100553e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100554a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100554c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100554e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100555a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100555c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100555e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100556a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100556c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100556e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100557a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100557c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100557e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100558a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100558c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100558e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100559a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100559c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100559e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10055fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100560a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100560c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100560e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100561a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100561c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100561e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100562a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100562c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100562e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100563a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100563c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100563e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100564a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100564c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100564e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100565a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100565c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100565e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100566a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100566c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100566e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100567a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100567c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100567e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100568a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100568c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100568e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100569a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100569c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100569e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ac0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ae0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056b00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056b20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056b40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056b60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056b80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ba0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056bc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056be0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056c00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056c20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056c40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056c60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056c80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ca0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056cc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ce0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056d00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056d20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056d40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056d60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056d80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056da0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056dc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056de0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056e00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056e20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056e40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056e60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056e80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ea0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ec0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056ee0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056f00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056f20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056f40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056f60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056f80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056fa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056fc0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10056fe0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057000  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057020  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057040  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057060  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057080  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100570a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100570c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100570e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057100  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057120  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057140  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057160  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057180  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100571a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100571c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100571e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057200  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057220  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057240  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057260  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057280  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100572a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100572c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100572e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057300  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057320  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057340  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057360  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057380  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100573a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100573c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100573e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057400  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057420  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057440  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057460  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057480  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100574a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100574c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100574e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057500  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057520  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057540  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057560  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057580  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100575a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100575c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100575e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057600  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057620  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057640  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057660  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057680  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100576a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100576c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100576e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057700  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057720  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057740  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057760  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057780  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100577a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100577c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100577e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057800  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057820  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057840  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057860  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057880  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100578a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100578c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100578e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057900  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057920  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057940  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057960  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057980  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100579a0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100579c0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
100579e0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057a00  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057a20  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057a40  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057a60  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057a80  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................................
10057aa0  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc        ..............................
.text section ended  {0x10001000-0x10057abe}

.rdata section started  {0x10058000-0x100597e8}
10058000  int32_t data_10058000 = 0x0

10058004              00 00 00 00                                                                              ....

10058008  int64_t data_10058008 = 0x3f91df46a2529d39

10058010                                                  00 00 00 00 00 00 00 00                                          ........

10058018  int64_t data_10058018 = 0x3fe0000000000000

10058020  00 00 00 00 00 00 00 00                                                                          ........

10058028  int64_t data_10058028 = 0x3f747ae147ae147b

10058030                                                  00 00 00 00 00 00 00 00                                          ........

10058038  int64_t data_10058038 = -0x408b851eb851eb85

10058040  00 00 00 00                                                                                      ....

10058044  int32_t data_10058044 = -0x40800000
10058048  int32_t data_10058048 = 0x3d800000
1005804c  int32_t data_1005804c = 0x40c00000
10058050  int64_t data_10058050 = -0x401051eb851eb852

10058058                                                                          00 00 00 00 00 00 00 00                          ........

10058060  int64_t data_10058060 = 0x3fefae147ae147ae

10058068                          00 00 00 00 00 00 00 00                                                          ........

10058070  int64_t data_10058070 = 0x3ff8000000000000

10058078                                                                          00 00 00 00                                      ....

1005807c  int32_t data_1005807c = 0x42c80000
10058080  int32_t data_10058080 = 0x42480000

10058084              00 00 00 00                                                                              ....

10058088  int64_t data_10058088 = 0x3fd0000000000000

10058090                                                  00 00 00 00                                                      ....

10058094  int32_t data_10058094 = 0x40800000
10058098  int64_t data_10058098 = -0x3f99800000000000

100580a0  00 00 00 00 00 00 00 00                                                                          ........

100580a8  int64_t data_100580a8 = 0x4076800000000000

100580b0                                                  00 00 00 00 00 00 00 00                                          ........

100580b8  int64_t data_100580b8 = 0x4066800000000000

100580c0  00 00 00 00                                                                                      ....

100580c4  int32_t data_100580c4 = 0x3f800000
100580c8  int32_t data_100580c8 = 0x45800000
100580cc  int32_t data_100580cc = 0x40000000
100580d0  int64_t data_100580d0 = 0x3ff0000000000000

100580d8                                                                          00 00 00 00                                      ....

100580dc  int32_t data_100580dc = 0x41800000
100580e0  int32_t data_100580e0 = 0x41000000
100580e4  int32_t data_100580e4 = 0x42400000
100580e8  int64_t data_100580e8 = 0x4020000000000000

100580f0                                                  00 00 00 00                                                      ....

100580f4  int32_t data_100580f4 = 0x41b00000
100580f8  int32_t data_100580f8 = 0x41f00000

100580fc                                                                                      00 00 00 00                              ....

10058100  int64_t data_10058100 = 0x3f1a36e2eb1c432d

10058108                          00 00 00 00                                                                      ....

1005810c  int32_t data_1005810c = 0x41200000
10058110  int64_t data_10058110 = 0x3fc0000000000000

10058118                                                                          00 00 00 00 00 00 00 00                          ........

10058120  int64_t data_10058120 = 0x4014000000000000

10058128                          00 00 00 00                                                                      ....

1005812c  int32_t data_1005812c = -0x3c6a0000
10058130  int64_t data_10058130 = 0x3fb999999999999a

10058138                                                                          00 00 00 00                                      ....

1005813c  int32_t data_1005813c = 0x3eaaaaab
10058140  int64_t data_10058140 = 0x41124f8000000000

10058148                          00 00 00 00 00 00 00 00                                                          ........

10058150  int64_t data_10058150 = 0x407c200000000000

10058158                                                                          00 00 00 00                                      ....

1005815c  int32_t data_1005815c = 0x44480000
10058160  int32_t data_10058160 = 0x43fa0000
10058164  int32_t data_10058164 = 0x43480000
10058168  int32_t data_10058168 = 0x41c00000

1005816c                                      00 00 00 00                                                              ....

10058170  int64_t data_10058170 = -0x4046666666666666

10058178                                                                          00 00 00 00 00 00 00 00                          ........

10058180  char const data_10058180[0x6] = "ffffff"

10058186                    e6 3f 00 00 00 00                                                                    .?....

1005818c  int32_t data_1005818c = 0x44160000
10058190  int32_t data_10058190 = 0x43700000

10058194                                                              00 00 00 00                                              ....

10058198  char const data_10058198[0x6] = "333333"

1005819e                                                                                            f3 3f                                .?
100581a0  00 00 00 00                                                                                      ....

100581a4  int32_t data_100581a4 = 0x40a00000
100581a8  int32_t data_100581a8 = 0x42000000

100581ac                                      00 00 00 00                                                              ....

100581b0  int64_t data_100581b0 = 0x407f400000000000

100581b8                                                                          00 00 00 00 00 00 00 00                          ........

100581c0  char const data_100581c0[0x5] = "es-8R"

100581c5                 c1 d0 3f 00 00 00 00                                                                   ..?....

100581cc  int32_t data_100581cc = 0x44fa0000
100581d0  int32_t data_100581d0 = 0x42800000
100581d4  int32_t data_100581d4 = 0x447a0000
100581d8  int64_t data_100581d8 = 0x3ff999999999999a

100581e0  00 00 00 00                                                                                      ....

100581e4  int32_t data_100581e4 = 0x43870000
100581e8  int64_t data_100581e8 = 0x3fd51eb851eb851f

100581f0                                                  00 00 00 00 00 00 00 00                                          ........

100581f8  int64_t data_100581f8 = 0x3ff4cccccccccccd

10058200  00 00 00 00 00 00 00 00                                                                          ........

10058208  int64_t data_10058208 = 0x402e000000000000

10058210                                                  00 00 00 00                                                      ....

10058214  int32_t data_10058214 = 0x43960000
10058218  int32_t data_10058218 = 0x38000100

1005821c                                                                                      00 00 00 00                              ....

10058220  int64_t data_10058220 = -0x40af9db22d0e5604

10058228                          00 00 00 00 00 00 00 00                                                          ........

10058230  int64_t data_10058230 = 0x3f50624dd2f1a9fc

10058238                                                                          00 00 00 00 00 00 00 00                          ........

10058240  int64_t data_10058240 = 0x3f40624dd2f1a9fc

10058248                          00 00 00 00 00 00 00 00                                                          ........

10058250  int64_t data_10058250 = -0x40bf9db22d0e5604

10058258                                                                          00 00 00 00                                      ....

1005825c  int32_t data_1005825c = 0x41a00000
10058260  int32_t data_10058260 = 0x42200000
10058264  int32_t data_10058264 = 0x428c0000
10058268  int32_t data_10058268 = 0x42700000

1005826c                                      00 00 00 00                                                              ....

10058270  int64_t data_10058270 = 0x3fe999999999999a

10058278                                                                          00 00 00 00 00 00 00 00                          ........

10058280  char const data_10058280[0x6] = "333333"

10058286                    07 40 00 00 00 00 00 00 00 00                                                        .@........

10058290  char const data_10058290[0x6] = "333333"

10058296                                                                    d3 3f 00 00 00 00                                    .?....

1005829c  int32_t data_1005829c = 0x41700000
100582a0  int64_t data_100582a0 = 0x3feccccccccccccd

100582a8                          00 00 00 00                                                                      ....

100582ac  int32_t data_100582ac = 0x42c00000
100582b0  int32_t data_100582b0 = 0x43100000

100582b4                                                              00 00 00 00                                              ....

100582b8  int64_t data_100582b8 = 0x3fc999999999999a

100582c0  00 00 00 00                                                                                      ....

100582c4  int32_t data_100582c4 = 0x442f0000
100582c8  int64_t data_100582c8 = 0x3fedeb851eb851ec

100582d0                                                  00 00 00 00                                                      ....

100582d4  int32_t data_100582d4 = 0x43340000
100582d8  int64_t data_100582d8 = 0x3fd999999999999a

100582e0  00 00 00 00                                                                                      ....

100582e4  int32_t data_100582e4 = 0x43b40000
100582e8  int32_t data_100582e8 = 0x444a8000
100582ec  int32_t data_100582ec = 0x44610000
100582f0  int64_t data_100582f0 = 0x4024000000000000

100582f8                                                                          00 00 00 00 00 00 00 00                          ........

10058300  int64_t data_10058300 = 0x4034000000000000

10058308                          00 00 00 00                                                                      ....

1005830c  int32_t data_1005830c = 0x43160000
10058310  int64_t data_10058310 = 0x4049000000000000

10058318                                                                          00 00 00 00 00 00 00 00                          ........

10058320  char const data_10058320[0x6] = "333333"

10058326                    e3 3f 00 00 00 00                                                                    .?....

1005832c  int32_t data_1005832c = 0x42f00000
10058330  int64_t data_10058330 = 0x3fe51eb851eb851f

10058338                                                                          00 00 00 00 00 00 00 00                          ........

10058340  int64_t data_10058340 = 0x404e000000000000

10058348                          00 00 00 00 00 00 00 00                                                          ........

10058350  int64_t data_10058350 = 0x4040000000000000

10058358                                                                          00 00 00 00 00 00 00 00                          ........

10058360  int64_t data_10058360 = 0x402381d7dbf487fd

10058368                          00 00 00 00 00 00 00 00                                                          ........

10058370  int64_t data_10058370 = 0x3f847ae147ae147b

10058378                                                                          00 00 00 00                                      ....

1005837c  int32_t data_1005837c = -0x3f800000
10058380  int32_t data_10058380 = 0x40400000
10058384  int32_t data_10058384 = 0x43c80000
10058388  int32_t data_10058388 = 0x40e00000
1005838c  int32_t data_1005838c = 0x437a0000
10058390  int64_t data_10058390 = 0x4044000000000000

10058398                                                                          00 00 00 00 00 00 00 00                          ........

100583a0  int64_t data_100583a0 = 0x4051800000000000

100583a8                          00 00 00 00                                                                      ....

100583ac  int32_t data_100583ac = 0x43be0000
100583b0  int64_t data_100583b0 = -0x4016666666666666

100583b8                                                                          00 00 00 00                                      ....

100583bc  int32_t data_100583bc = 0x42a00000
100583c0  int64_t data_100583c0 = -0x4020000000000000

100583c8                          00 00 00 00 00 00 00 00                                                          ........

100583d0  int64_t data_100583d0 = 0x4000000000000000

100583d8                                                                          00 00 00 00                                      ....

100583dc  int32_t data_100583dc = 0x3f000000
100583e0  int32_t data_100583e0 = -0x3bf2c000
100583e4  int32_t data_100583e4 = 0x440d4000
100583e8  int32_t data_100583e8 = 0x3991a2b4
100583ec  int32_t data_100583ec = 0x3c888889
100583f0  int32_t data_100583f0 = -0x3d380000

100583f4                                                              00 00 00 00                                              ....

100583f8  int64_t data_100583f8 = 0x0

10058400  00 00 00 00 00 00 00 00                                                                          ........

10058408  int64_t data_10058408 = 0x404ca5dc1a63c1f8

10058410                                                  00 00 00 00                                                      ....

10058414  int32_t data_10058414 = 0x42b40000
10058418  int64_t data_10058418 = 0x400921fb54442d18

10058420  00 00 00 00                                                                                      ....

10058424  int32_t data_10058424 = -0x3ccc0000
10058428  int64_t data_10058428 = 0x3f76800000000000

10058430                                                  00 00 00 00 00 00 00 00                                          ........

10058438  int64_t data_10058438 = 0x4066c16c16c16c17

10058440  00 00 00 00 00 00 00 00                                                                          ........

10058448  int64_t data_10058448 = 0x4150017ec0000000
10058450  int64_t data_10058450 = 0x4147ffff80000000
10058458  char const data_10058458[0x1a] = "IsProcessorFeaturePresent", 0

10058472                                                        00 00                                                        ..

10058474  char const data_10058474[0x9] = "KERNEL32", 0

1005847d                                                                                         00 00 00                               ...

10058480  char const data_10058480[0x6] = "e+000", 0

10058486                    00 00 5f 79 6e 00 5f 79 31 00 5f 79 30 00                                            .._yn._y1._y0.

10058494  char const data_10058494[0x6] = "frexp", 0

1005849a                                                                                00 00                                        ..

1005849c  char const data_1005849c[0x5] = "fmod", 0

100584a1     00 00 00                                                                                       ...

100584a4  char const data_100584a4[0x7] = "_hypot", 0

100584ab                                   00                                                                         .

100584ac  char const data_100584ac[0x6] = "_cabs", 0

100584b2                                                        00 00                                                        ..

100584b4  char const data_100584b4[0x6] = "ldexp", 0

100584ba                                                                                00 00                                        ..

100584bc  char const data_100584bc[0x5] = "modf", 0

100584c1     00 00 00                                                                                       ...

100584c4  char const data_100584c4[0x5] = "fabs", 0

100584c9                             00 00 00                                                                       ...

100584cc  char const data_100584cc[0x6] = "floor", 0

100584d2                                                        00 00                                                        ..

100584d4  char const data_100584d4[0x5] = "ceil", 0

100584d9                                                                             00 00 00 74 61 6e 00                           ...tan.
100584e0  63 6f 73 00 73 69 6e 00                                                                          cos.sin.

100584e8  char const data_100584e8[0x5] = "sqrt", 0

100584ed                                         00 00 00                                                               ...

100584f0  char const data_100584f0[0x6] = "atan2", 0

100584f6                                                                    00 00                                                ..

100584f8  char const data_100584f8[0x5] = "atan", 0

100584fd                                                                                         00 00 00                               ...

10058500  char const data_10058500[0x5] = "acos", 0

10058505                 00 00 00                                                                               ...

10058508  char const data_10058508[0x5] = "asin", 0

1005850d                                         00 00 00                                                               ...

10058510  char const data_10058510[0x5] = "tanh", 0

10058515                                                                 00 00 00                                               ...

10058518  char const data_10058518[0x5] = "cosh", 0

1005851d                                                                                         00 00 00                               ...

10058520  char const data_10058520[0x5] = "sinh", 0

10058525                 00 00 00                                                                               ...

10058528  char const data_10058528[0x6] = "log10", 0

1005852e                                            00 00 70 6f 77 00 65 78 70 00 06 00 00 06 00 01 00 00                ..pow.exp.........
10058540  10 00 03 06 00 06 02 10 04 45 45 45 05 05 05 05 05 35 30 00 50 00 00 00 00 20 28 38 50 58 07 08  .........EEE.....50.P.... (8PX..
10058560  00 37 30 30 57 50 07 00 00 20 20 08 00 00 00 00 08 60 68 60 60 60 60 00 00 70 70 78 78 78 78 08  .700WP...  ......`h````..ppxxxx.
10058580  07 08 00 00 07 00 08 08 08 00 00 08 00 08 00 07 08 00 00 00                                      ....................

10058594  wchar16 const data_10058594[0x7] = "(null)", 0

100585a2        00 00                                                                                        ..

100585a4  char const data_100585a4[0x7] = "(null)", 0

100585ab                                   00                                                                         .

100585ac  char const LC_TIME[0x8] = "LC_TIME", 0
100585b4  char const LC_NUMERIC[0xb] = "LC_NUMERIC", 0

100585bf                                                                                               00                                 .

100585c0  char const LC_MONETARY[0xc] = "LC_MONETARY", 0
100585cc  char const LC_CTYPE[0x9] = "LC_CTYPE", 0

100585d5                                                                 00 00 00                                               ...

100585d8  char const LC_COLLATE[0xb] = "LC_COLLATE", 0

100585e3           00                                                                                         .

100585e4  char const LC_ALL[0x7] = "LC_ALL", 0

100585eb                                   00                                                                         .
100585ec  data_100585ec:
100585ec                                      3d 3b 00 00                                                              =;..
100585f0  data_100585f0:
100585f0                                                  5f 2e 2c 00                                                      _.,.
100585f4  g_locale_string_sample:
100585f4                                                              5f 00 00 00                                              _...
100585f8  g_locale_ascii_sample:
100585f8                                                                          00 00 00 00                                      ....
100585fc  g_locale_unicode_sample:
100585fc                                                                                      00 00 00 00                              ....
10058600  ff ff ff ff                                                                                      ....

10058604  void* data_10058604 = sub_10049f65
10058608  void* data_10058608 = 0x10049f69

1005860c                                      ff ff ff ff                                                              ....

10058610  void* data_10058610 = sub_1004a019
10058614  void* data_10058614 = 0x1004a01d

10058618                                                                          00 00 00 00 00 00 00 00                          ........

10058620  int64_t data_10058620 = 0x3ff0000000000000
10058628  int16_t data_10058628 = 0x27f
1005862a  int80_t data_1005862a = 
1005862a                                35 c2 68 21 a2 da 0f c9 3e 40                                                5.h!....>@
10058634  int64_t data_10058634 = 0x7fefffffffffffff

1005863c                                                                                      00 00 00 00                              ....
10058640  00 00 10 00                                                                                      ....

10058644  int64_t data_10058644 = -0x3f68000000000000

1005864c                                      00 00 00 00 00 00 98 40                                                  .......@

10058654  int64_t data_10058654 = 0x7ff0000000000000

1005865c                                                                                      00 00 00 00                              ....
10058660  00 00 00 00                                                                                      ....

10058664  char const data_10058664[0xf] = "runtime error ", 0

10058673                                                           00                                                         .

10058674  char const data_10058674[0xe] = "TLOSS error\r\n", 0

10058682        00 00                                                                                        ..

10058684  char const data_10058684[0xd] = "SING error\r\n", 0

10058691                                                     00 00 00                                                       ...

10058694  char const data_10058694[0xf] = "DOMAIN error\r\n", 0

100586a3           00                                                                                         .

100586a4  char const data_100586a4[0x25] = "R6028\r\n"
100586a4      "- unable to initialize heap\r\n", 0

100586c9                             00 00 00                                                                       ...

100586cc  char const data_100586cc[0x35] = "R6027\r\n"
100586cc      "- not enough space for lowio initialization\r\n", 0

10058701     00 00 00                                                                                       ...

10058704  char const data_10058704[0x35] = "R6026\r\n"
10058704      "- not enough space for stdio initialization\r\n", 0

10058739                                                                             00 00 00                                       ...

1005873c  char const data_1005873c[0x26] = "R6025\r\n"
1005873c      "- pure virtual function call\r\n", 0

10058762        00 00                                                                                        ..

10058764  char const data_10058764[0x35] = "R6024\r\n"
10058764      "- not enough space for _onexit/atexit table\r\n", 0

10058799                                                                             00 00 00                                       ...

1005879c  char const data_1005879c[0x29] = "R6019\r\n"
1005879c      "- unable to open console device\r\n", 0

100587c5                 00 00 00                                                                               ...

100587c8  char const data_100587c8[0x21] = "R6018\r\n"
100587c8      "- unexpected heap error\r\n", 0

100587e9                             00 00 00                                                                       ...

100587ec  char const data_100587ec[0x2d] = "R6017\r\n"
100587ec      "- unexpected multithread lock error\r\n", 0

10058819                                                                             00 00 00                                       ...

1005881c  char const data_1005881c[0x2c] = "R6016\r\n"
1005881c      "- not enough space for thread data\r\n", 0
10058848  char const data_10058848[0x21] = "\r\nabnormal program termination\r\n", 0

10058869                             00 00 00                                                                       ...

1005886c  char const data_1005886c[0x2c] = "R6009\r\n"
1005886c      "- not enough space for environment\r\n", 0
10058898  char const data_10058898[0x2a] = "R6008\r\n"
10058898      "- not enough space for arguments\r\n", 0

100588c2        00 00                                                                                        ..

100588c4  char const data_100588c4[0x25] = "R6002\r\n"
100588c4      "- floating point not loaded\r\n", 0

100588e9                             00 00 00                                                                       ...

100588ec  char const data_100588ec[0x25] = "Microsoft Visual C++ Runtime Library", 0

10058911                                                     00 00 00                                                       ...
10058914  data_10058914:
10058914                                                              0a 0a 00 00                                              ....

10058918  char const data_10058918[0x1a] = "Runtime Error!\n\n"
10058918      "Program: ", 0

10058932                                                        00 00                                                        ..

10058934  char const data_10058934[0x17] = "<program name unknown>", 0

1005894b                                   00 00 00 00 00 ff ff ff ff                                                 .........

10058954  void* data_10058954 = sub_1004d46c
10058958  void* data_10058958 = 0x1004d470
1005895c  char const data_1005895c[0x9] = "Paraguay", 0

10058965                 00 00 00                                                                               ...

10058968  char const data_10058968[0x8] = "Uruguay", 0
10058970  char const data_10058970[0x6] = "Chile", 0

10058976                                                                    00 00                                                ..

10058978  char const data_10058978[0x8] = "Ecuador", 0
10058980  char const data_10058980[0xa] = "Argentina", 0

1005898a                                00 00                                                                        ..

1005898c  char const data_1005898c[0x5] = "Peru", 0

10058991                                                     00 00 00                                                       ...

10058994  char const data_10058994[0x9] = "Colombia", 0

1005899d                                                                                         00 00 00                               ...

100589a0  char const data_100589a0[0xa] = "Venezuela", 0

100589aa                                00 00                                                                        ..

100589ac  char const data_100589ac[0x13] = "Dominican Republic", 0

100589bf                                                                                               00                                 .

100589c0  char const data_100589c0[0xd] = "South Africa", 0

100589cd                                         00 00 00                                                               ...

100589d0  char const data_100589d0[0x7] = "Panama", 0

100589d7                                                                       00                                                 .

100589d8  char const data_100589d8[0xb] = "Luxembourg", 0

100589e3           00                                                                                         .

100589e4  char const data_100589e4[0xb] = "Costa Rica", 0

100589ef                                               00                                                                 .

100589f0  char const data_100589f0[0xc] = "Switzerland", 0
100589fc  char const data_100589fc[0xa] = "Guatemala", 0

10058a06                    00 00                                                                                ..

10058a08  char const data_10058a08[0x7] = "Canada", 0

10058a0f                                               00                                                                 .

10058a10  char const data_10058a10[0x16] = "Spanish - Modern Sort", 0

10058a26                    00 00                                                                                ..

10058a28  char const data_10058a28[0xa] = "Australia", 0

10058a32                                                        00 00                                                        ..

10058a34  char const data_10058a34[0x8] = "English", 0
10058a3c  char const data_10058a3c[0x8] = "Austria", 0
10058a44  char const data_10058a44[0x7] = "German", 0

10058a4b                                   00                                                                         .

10058a4c  char const data_10058a4c[0x8] = "Belgium", 0
10058a54  char const data_10058a54[0x7] = "Mexico", 0

10058a5b                                                                                   00                                         .

10058a5c  char const data_10058a5c[0x8] = "Spanish", 0
10058a64  char const data_10058a64[0x7] = "Basque", 0

10058a6b                                   00                                                                         .

10058a6c  char const data_10058a6c[0x7] = "Sweden", 0

10058a73                                                           00                                                         .

10058a74  char const data_10058a74[0x8] = "Swedish", 0
10058a7c  char const data_10058a7c[0x8] = "Iceland", 0
10058a84  char const data_10058a84[0xa] = "Icelandic", 0

10058a8e                                            00 00                                                                ..

10058a90  char const data_10058a90[0x7] = "France", 0

10058a97                                                                       00                                                 .

10058a98  char const data_10058a98[0x7] = "French", 0

10058a9f                                                                                               00                                 .

10058aa0  char const data_10058aa0[0x8] = "Finland", 0
10058aa8  char const data_10058aa8[0x8] = "Finnish", 0
10058ab0  char const data_10058ab0[0x6] = "Spain", 0

10058ab6                                                                    00 00                                                ..

10058ab8  char const data_10058ab8[0x1b] = "Spanish - Traditional Sort", 0

10058ad3                                                           00                                                         .

10058ad4  char const data_10058ad4[0xe] = "united-states", 0

10058ae2        00 00                                                                                        ..

10058ae4  char const data_10058ae4[0xf] = "united-kingdom", 0

10058af3                                                           00                                                         .

10058af4  char const data_10058af4[0x12] = "trinidad & tobago", 0

10058b06                    00 00                                                                                ..

10058b08  char const data_10058b08[0xc] = "south-korea", 0
10058b14  char const data_10058b14[0xd] = "south-africa", 0

10058b21     00 00 00                                                                                       ...

10058b24  char const data_10058b24[0xc] = "south korea", 0
10058b30  char const data_10058b30[0xd] = "south africa", 0

10058b3d                                                                                         00 00 00                               ...

10058b40  char const data_10058b40[0x7] = "slovak", 0

10058b47                       00                                                                                 .

10058b48  char const data_10058b48[0xc] = "puerto-rico", 0
10058b54  char const data_10058b54[0x9] = "pr-china", 0

10058b5d                                                                                         00 00 00                               ...

10058b60  char const data_10058b60[0x9] = "pr china", 0

10058b69                             00 00 00 6e 7a 00 00                                                           ...nz..

10058b70  char const data_10058b70[0xc] = "new-zealand", 0
10058b7c  char const data_10058b7c[0xa] = "hong-kong", 0

10058b86                    00 00                                                                                ..

10058b88  char const data_10058b88[0x8] = "holland", 0
10058b90  char const data_10058b90[0xe] = "great britain", 0

10058b9e                                                                                            00 00                                ..

10058ba0  char const data_10058ba0[0x8] = "england", 0
10058ba8  char const data_10058ba8[0x6] = "czech", 0

10058bae                                            00 00                                                                ..

10058bb0  char const data_10058bb0[0x6] = "china", 0

10058bb6                                                                    00 00                                                ..

10058bb8  char const data_10058bb8[0x8] = "britain", 0
10058bc0  char const data_10058bc0[0x8] = "america", 0

10058bc8                          75 73 61 00 75 73 00 00 75 6b 00 00                                              usa.us..uk..

10058bd4  char const data_10058bd4[0x6] = "swiss", 0

10058bda                                                                                00 00                                        ..

10058bdc  char const data_10058bdc[0x10] = "swedish-finland", 0
10058bec  char const data_10058bec[0x12] = "spanish-venezuela", 0

10058bfe                                                                                            00 00                                ..

10058c00  char const data_10058c00[0x10] = "spanish-uruguay", 0
10058c10  char const data_10058c10[0x14] = "spanish-puerto rico", 0
10058c24  char const data_10058c24[0xd] = "spanish-peru", 0

10058c31                                                     00 00 00                                                       ...

10058c34  char const data_10058c34[0x11] = "spanish-paraguay", 0

10058c45                 00 00 00                                                                               ...

10058c48  char const data_10058c48[0xf] = "spanish-panama", 0

10058c57                                                                       00                                                 .

10058c58  char const data_10058c58[0x12] = "spanish-nicaragua", 0

10058c6a                                00 00                                                                        ..

10058c6c  char const data_10058c6c[0xf] = "spanish-modern", 0

10058c7b                                                                                   00                                         .

10058c7c  char const data_10058c7c[0x10] = "spanish-mexican", 0
10058c8c  char const data_10058c8c[0x11] = "spanish-honduras", 0

10058c9d                                                                                         00 00 00                               ...

10058ca0  char const data_10058ca0[0x12] = "spanish-guatemala", 0

10058cb2                                                        00 00                                                        ..

10058cb4  char const data_10058cb4[0x14] = "spanish-el salvador", 0
10058cc8  char const data_10058cc8[0x10] = "spanish-ecuador", 0
10058cd8  char const data_10058cd8[0x1b] = "spanish-dominican republic", 0

10058cf3                                                           00                                                         .

10058cf4  char const data_10058cf4[0x13] = "spanish-costa rica", 0

10058d07                       00                                                                                 .

10058d08  char const data_10058d08[0x11] = "spanish-colombia", 0

10058d19                                                                             00 00 00                                       ...

10058d1c  char const data_10058d1c[0xe] = "spanish-chile", 0

10058d2a                                00 00                                                                        ..

10058d2c  char const data_10058d2c[0x10] = "spanish-bolivia", 0
10058d3c  char const data_10058d3c[0x12] = "spanish-argentina", 0

10058d4e                                            00 00                                                                ..

10058d50  char const data_10058d50[0x15] = "portuguese-brazilian", 0

10058d65                 00 00 00                                                                               ...

10058d68  char const data_10058d68[0x12] = "norwegian-nynorsk", 0

10058d7a                                                                                00 00                                        ..

10058d7c  char const data_10058d7c[0x11] = "norwegian-bokmal", 0

10058d8d                                         00 00 00                                                               ...

10058d90  char const data_10058d90[0xa] = "norwegian", 0

10058d9a                                                                                00 00                                        ..

10058d9c  char const data_10058d9c[0xe] = "italian-swiss", 0

10058daa                                00 00                                                                        ..

10058dac  char const data_10058dac[0xe] = "irish-english", 0

10058dba                                                                                00 00                                        ..

10058dbc  char const data_10058dbc[0xd] = "german-swiss", 0

10058dc9                             00 00 00                                                                       ...

10058dcc  char const data_10058dcc[0x12] = "german-luxembourg", 0

10058dde                                                                                            00 00                                ..

10058de0  char const data_10058de0[0x14] = "german-lichtenstein", 0
10058df4  char const data_10058df4[0x10] = "german-austrian", 0
10058e04  char const data_10058e04[0xd] = "french-swiss", 0

10058e11                                                     00 00 00                                                       ...

10058e14  char const data_10058e14[0x12] = "french-luxembourg", 0

10058e26                    00 00                                                                                ..

10058e28  char const data_10058e28[0x10] = "french-canadian", 0
10058e38  char const data_10058e38[0xf] = "french-belgian", 0

10058e47                       00                                                                                 .

10058e48  char const data_10058e48[0xc] = "english-usa", 0
10058e54  char const data_10058e54[0xb] = "english-us", 0

10058e5f                                                                                               00                                 .

10058e60  char const data_10058e60[0xb] = "english-uk", 0

10058e6b                                   00                                                                         .

10058e6c  char const data_10058e6c[0x1a] = "english-trinidad y tobago", 0

10058e86                    00 00                                                                                ..

10058e88  char const data_10058e88[0x15] = "english-south africa", 0

10058e9d                                                                                         00 00 00                               ...

10058ea0  char const data_10058ea0[0xb] = "english-nz", 0

10058eab                                   00                                                                         .

10058eac  char const data_10058eac[0x10] = "english-jamaica", 0
10058ebc  char const data_10058ebc[0xc] = "english-ire", 0
10058ec8  char const data_10058ec8[0x12] = "english-caribbean", 0

10058eda                                                                                00 00                                        ..

10058edc  char const data_10058edc[0xc] = "english-can", 0
10058ee8  char const data_10058ee8[0xf] = "english-belize", 0

10058ef7                                                                       00                                                 .

10058ef8  char const data_10058ef8[0xc] = "english-aus", 0
10058f04  char const data_10058f04[0x11] = "english-american", 0

10058f15                                                                 00 00 00                                               ...

10058f18  char const data_10058f18[0xe] = "dutch-belgian", 0

10058f26                    00 00                                                                                ..

10058f28  char const data_10058f28[0x14] = "chinese-traditional", 0
10058f3c  char const data_10058f3c[0x12] = "chinese-singapore", 0

10058f4e                                            00 00                                                                ..

10058f50  char const data_10058f50[0x13] = "chinese-simplified", 0

10058f63           00                                                                                         .

10058f64  char const data_10058f64[0x11] = "chinese-hongkong", 0

10058f75                                                                 00 00 00                                               ...

10058f78  char const data_10058f78[0x8] = "chinese", 0

10058f80  63 68 69 00 63 68 68 00                                                                          chi.chh.

10058f88  char const data_10058f88[0x9] = "canadian", 0

10058f91                                                     00 00 00                                                       ...

10058f94  char const data_10058f94[0x8] = "belgian", 0
10058f9c  char const data_10058f9c[0xb] = "australian", 0

10058fa7                       00                                                                                 .

10058fa8  char const data_10058fa8[0x11] = "american-english", 0

10058fb9                                                                             00 00 00                                       ...

10058fbc  char const data_10058fbc[0x11] = "american english", 0

10058fcd                                         00 00 00                                                               ...

10058fd0  char const data_10058fd0[0x9] = "american", 0

10058fd9                                                                             00 00 00                                       ...
10058fdc  data_10058fdc:
10058fdc                                                                                      4f 43 50 00                              OCP.
10058fe0  data_10058fe0:
10058fe0  41 43 50 00                                                                                      ACP.

10058fe4  char const data_10058fe4[0x16] = "SunMonTueWedThuFriSat", 0

10058ffa                                                                                00 00 4a 61 6e 46                            ..JanF
10059000  65 62 4d 61 72 41 70 72 4d 61 79 4a 75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f 76 44 65 63  ebMarAprMayJunJulAugSepOctNovDec
10059020  00 00 00 00                                                                                      ....
10059024  data_10059024:
10059024              54 5a 00 00                                                                              TZ..

10059028  char const data_10059028[0x13] = "GetLastActivePopup", 0

1005903b                                                                                   00                                         .

1005903c  char const data_1005903c[0x10] = "GetActiveWindow", 0
1005904c  char const data_1005904c[0xc] = "MessageBoxA", 0
10059058  char const data_10059058[0xb] = "user32.dll", 0

10059063           00                                                                                         .

10059064  char const data_10059064[0x7] = "1#QNAN", 0

1005906b                                   00                                                                         .

1005906c  char const data_1005906c[0x6] = "1#INF", 0

10059072                                                        00 00                                                        ..

10059074  char const data_10059074[0x6] = "1#IND", 0

1005907a                                                                                00 00                                        ..

1005907c  char const data_1005907c[0x7] = "1#SNAN", 0

10059083           00                                                                                         .

10059084  char const data_10059084[0x8] = "H:mm:ss", 0
1005908c  char const data_1005908c[0x14] = "dddd, MMMM dd, yyyy", 0
100590a0  char const data_100590a0[0x7] = "M/d/yy", 0

100590a7                       00 50 4d 00 00 41 4d 00 00                                                         .PM..AM..

100590b0  char const data_100590b0[0x9] = "December", 0

100590b9                                                                             00 00 00                                       ...

100590bc  char const data_100590bc[0x9] = "November", 0

100590c5                 00 00 00                                                                               ...

100590c8  char const data_100590c8[0x8] = "October", 0
100590d0  char const data_100590d0[0xa] = "September", 0

100590da                                                                                00 00                                        ..

100590dc  char const data_100590dc[0x7] = "August", 0

100590e3           00                                                                                         .

100590e4  char const data_100590e4[0x5] = "July", 0

100590e9                             00 00 00                                                                       ...

100590ec  char const data_100590ec[0x5] = "June", 0

100590f1                                                     00 00 00                                                       ...

100590f4  char const data_100590f4[0x6] = "April", 0

100590fa                                                                                00 00                                        ..

100590fc  char const data_100590fc[0x6] = "March", 0

10059102        00 00                                                                                        ..

10059104  char const data_10059104[0x9] = "February", 0

1005910d                                         00 00 00                                                               ...

10059110  char const data_10059110[0x8] = "January", 0

10059118                                                                          44 65 63 00 4e 6f 76 00                          Dec.Nov.
10059120  4f 63 74 00 53 65 70 00 41 75 67 00 4a 75 6c 00 4a 75 6e 00 4d 61 79 00 41 70 72 00 4d 61 72 00  Oct.Sep.Aug.Jul.Jun.May.Apr.Mar.
10059140  46 65 62 00 4a 61 6e 00                                                                          Feb.Jan.

10059148  char const data_10059148[0x9] = "Saturday", 0

10059151                                                     00 00 00                                                       ...

10059154  char const data_10059154[0x7] = "Friday", 0

1005915b                                                                                   00                                         .

1005915c  char const data_1005915c[0x9] = "Thursday", 0

10059165                 00 00 00                                                                               ...

10059168  char const data_10059168[0xa] = "Wednesday", 0

10059172                                                        00 00                                                        ..

10059174  char const data_10059174[0x8] = "Tuesday", 0
1005917c  char const data_1005917c[0x7] = "Monday", 0

10059183           00                                                                                         .

10059184  char const data_10059184[0x7] = "Sunday", 0

1005918b                                   00 53 61 74 00 46 72 69 00 54 68 75 00 57 65 64 00 54 75 65 00             .Sat.Fri.Thu.Wed.Tue.
100591a0  4d 6f 6e 00 53 75 6e 00                                                                          Mon.Sun.
100591a8  data_100591a8:
100591a8                          61 2f 70 00                                                                      a/p.

100591ac  char const data_100591ac[0x6] = "am/pm", 0

100591b2                                                        00 00 00 00 00 00 ff ff ff ff                                ..........

100591bc  void* data_100591bc = sub_10051dd4
100591c0  void* data_100591c0 = sub_10051dd8

100591c4              ff ff ff ff                                                                              ....

100591c8  void* data_100591c8 = sub_10051e31
100591cc  void* data_100591cc = sub_10051e35

100591d0                                                  ff ff ff ff                                                      ....

100591d4  void* data_100591d4 = sub_10052362
100591d8  void* data_100591d8 = 0x10052366

100591dc                                                                                      00 00 00 00                              ....
100591e0  ff ff ff ff                                                                                      ....

100591e4  void* data_100591e4 = sub_1005247b
100591e8  void* data_100591e8 = 0x1005247f

100591ec                                      00 00 00 00 ff ff ff ff                                                  ........

100591f4  void* data_100591f4 = sub_1005273e
100591f8  void* data_100591f8 = 0x10052742

100591fc                                                                                      ff ff ff ff                              ....

10059200  void* data_10059200 = sub_100527ad
10059204  void* data_10059204 = 0x100527b1
10059208  char const data_10059208[0x5] = ".com", 0

1005920d                                         00 00 00                                                               ...

10059210  char const data_10059210[0x5] = ".exe", 0

10059215                                                                 00 00 00                                               ...

10059218  char const data_10059218[0x5] = ".bat", 0

1005921d                                                                                         00 00 00                               ...

10059220  char const data_10059220[0x5] = ".cmd", 0

10059225                 00 00 00                                                                               ...
10059228  data_10059228:
10059228                          2e 5c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          .\......................
10059240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100592a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100592c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100592e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100593a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100593c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100593e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100594a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100594c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100594e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100595a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100595c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100595e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

10059690  struct Export_Directory_Table __export_directory_table = 
10059690  {
10059690      uint32_t exportFlags = 0x0
10059694      uint32_t timeDateStamp = 0x37922af4
10059698      uint16_t majorVersion = 0x0
1005969a      uint16_t minorVersion = 0x0
1005969c      uint32_t nameRva = 0x596c2
100596a0      uint32_t ordinalBase = 0x1
100596a4      uint32_t addressTableEntries = 0x1
100596a8      uint32_t numberOfNamePointers = 0x1
100596ac      uint32_t exportAddressTableRva = 0x596b8
100596b0      uint32_t namePointerRva = 0x596bc
100596b4      uint32_t ordinalTableRva = 0x596c0
100596b8  }
100596b8  uint32_t __pe_GLADIATOR_export_address_table[0x1] = 
100596b8  {
100596b8      [0x0] =  0x00001703
100596bc  }
100596bc  uint32_t __pe_GLADIATOR_export_name_pointer_table[0x1] = 
100596bc  {
100596bc      [0x0] =  0x000596d0
100596c0  }
100596c0  uint16_t __pe_GLADIATOR_export_ordinal_table[0x1] = 
100596c0  {
100596c0      [0x0] =  0x0000
100596c2  }
100596c2  char __pe_GLADIATOR_export_dll_name[0xe] = "GLADIATOR.dll", 0
100596d0  char __export_name(GetBotAPI)[0xa] = "GetBotAPI", 0

100596da                                                                                00 00 00 00 00 00                            ......
100596e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10059780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100597a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100597c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100597e0  00 00 00 00 00 00 00 00                                                                          ........
.rdata section ended  {0x10058000-0x100597e8}

.data section started  {0x1005a000-0x1006b3d8}
1005a000  data_1005a000:
1005a000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a0a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a0c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a0e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a1a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a1c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a1e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a200  00 00 00 00 00 00 00 00                                                                          ........
1005a208  data_1005a208:
1005a208                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
1005a220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a2a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a2c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a2e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a300  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005a30c  void* data_1005a30c = sub_10045917
1005a310  void* data_1005a310 = sub_10047a31
1005a314  void* data_1005a314 = sub_1004e345

1005a318                                                                          00 00 00 00 00 00 00 00                          ........
1005a320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a3a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a3c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a3e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a4a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a4c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a4e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a520  data_1005a520:
1005a520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a5a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a5c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a5e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a620  00 00 00 00                                                                                      ....

1005a624  void* data_1005a624 = sub_10047ad9

1005a628                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
1005a640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a6a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a6c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a6e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a7a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a7c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a7e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a820  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............
1005a82c  data_1005a82c:
1005a82c                                      00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
1005a840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a8a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a8c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a8e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a9a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a9c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005a9e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005aa00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005aa20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

1005aa40  char data_1005aa40[0xd] = "max_bsplinks", 0

1005aa4d                                         00 00 00                                                               ...

1005aa50  char data_1005aa50[0x5] = "4096", 0

1005aa55                                                                 00 00 00                                               ...

1005aa58  char data_1005aa58[0x17] = "%d free bsp links, %s\n", 0

1005aa6f                                               00 00 00 00 00                                                     .....

1005aa74  char data_1005aa74[0x15] = "empty bsp link heap\n", 0

1005aa89                             00 00 00 00 00 00 00                                                           .......

1005aa90  char data_1005aa90[0x27] = "AAS_TraceBSPModel: out of trace lines\n", 0

1005aab7                                                                       00 00 00 00 00 00 00 00 00                         .........

1005aac0  char data_1005aac0[0x1c] = "AAS_DecompressVis: 0 repeat", 0

1005aadc                                                                                      00 00 00 00                              ....
1005aae0  00 00 00 00                                                                                      ....

1005aae4  char data_1005aae4[0x36] = "AAS_BSPModelMinsMaxs: modelnum %d out of range [0-%d]", 0

1005ab1a                                                                                00 00 00 00 00 00                            ......
1005ab20  00 00 00 00                                                                                      ....

1005ab24  char data_1005ab24[0xc] = "%lf %lf %lf", 0

1005ab30                                                  00 00 00 00                                                      ....

1005ab34  char data_1005ab34[0xb] = "missing }\n", 0

1005ab3f                                                                                               00                                 .
1005ab40  00 00 00 00                                                                                      ....

1005ab44  char data_1005ab44[0xc] = "invalid %s\n", 0

1005ab50                                                  00 00 00 00                                                      ....
1005ab54  data_1005ab54:
1005ab54                                                              7d 00 00 00                                              }...
1005ab58  data_1005ab58:
1005ab58                                                                          7b 00 00 00                                      {...

1005ab5c  char data_1005ab5c[0x8] = "entdata", 0

1005ab64              00 00 00 00                                                                              ....

1005ab68  char data_1005ab68[0x18] = "can\'t read bsp lump %s\n", 0

1005ab80  00 00 00 00                                                                                      ....

1005ab84  char data_1005ab84[0x1b] = "can\'t seek to bsp lump %s\n", 0

1005ab9f                                                                                               00                                 .
1005aba0  00 00 00 00                                                                                      ....

1005aba4  char data_1005aba4[0x16] = "odd %s bsp lump size\n", 0

1005abba                                                                                00 00 00 00 00 00                            ......

1005abc0  char data_1005abc0[0xc] = "brush sides", 0

1005abcc                                      00 00 00 00                                                              ....

1005abd0  char data_1005abd0[0x8] = "brushes", 0

1005abd8                                                                          00 00 00 00                                      ....

1005abdc  char data_1005abdc[0x7] = "models", 0

1005abe3           00                                                                                         .

1005abe4  char data_1005abe4[0xa] = "surfedges", 0

1005abee                                            00 00                                                                ..

1005abf0  char data_1005abf0[0x6] = "edges", 0

1005abf6                                                                    00 00                                                ..

1005abf8  char data_1005abf8[0xd] = "leaf brushes", 0

1005ac05                 00 00 00                                                                               ...

1005ac08  char data_1005ac08[0xb] = "leaf faces", 0

1005ac13                                                           00 00 00 00 00                                             .....

1005ac18  char data_1005ac18[0x6] = "leafs", 0

1005ac1e                                                                                            00 00                                ..

1005ac20  char data_1005ac20[0x20] = "WARNING: bsp has no light data\n", 0

1005ac40  00 00 00 00 00 00 00 00                                                                          ........

1005ac48  char data_1005ac48[0xa] = "lightning", 0

1005ac52                                                        00 00                                                        ..

1005ac54  char data_1005ac54[0x6] = "faces", 0

1005ac5a                                                                                00 00                                        ..

1005ac5c  char data_1005ac5c[0x8] = "texinfo", 0

1005ac64              00 00 00 00                                                                              ....

1005ac68  char data_1005ac68[0x6] = "nodes", 0

1005ac6e                                            00 00                                                                ..

1005ac70  char data_1005ac70[0x26] = "WARNGING: bsp has no visibility data\n", 0

1005ac96                                                                    00 00 00 00 00 00 00 00 00 00                        ..........

1005aca0  char data_1005aca0[0xb] = "visibility", 0

1005acab                                   00 00 00 00 00                                                             .....

1005acb0  char data_1005acb0[0x9] = "vertexes", 0

1005acb9                                                                             00 00 00                                       ...

1005acbc  char data_1005acbc[0x7] = "planes", 0

1005acc3           00                                                                                         .

1005acc4  char data_1005acc4[0x7] = "entity", 0

1005accb                                   00                                                                         .

1005accc  char data_1005accc[0x23] = "bsp file %s is version %i, not %i\n", 0

1005acef                                               00 00 00 00 00 00 00 00 00                                         .........

1005acf8  char data_1005acf8[0x17] = "%s is not an BSP file\n", 0

1005ad0f                                               00 00 00 00 00                                                     .....

1005ad14  char data_1005ad14[0x22] = "can\'t read header of bsp file %s\n", 0

1005ad36                                                                    00 00 00 00 00 00                                    ......

1005ad3c  char data_1005ad3c[0x1b] = "can\'t seek to bsp file %s\n", 0

1005ad57                                                                       00 00 00 00 00                                     .....

1005ad5c  char data_1005ad5c[0x18] = "can\'t open bsp file %s\n", 0

1005ad74                                                              00 00 00 00                                              ....
1005ad78  data_1005ad78:
1005ad78                                                                          72 62 00 00                                      rb..

1005ad7c  char data_1005ad7c[0x3a] = "portal using area %d is seperating more than two clusters", 0

1005adb6                                                                    00 00 00 00 00 00 00 00 00 00                        ..........
1005adc0  00 00 00 00                                                                                      ....

1005adc4  char data_1005adc4[0x18] = "AAS_MAX_PORTALINDEXSIZE", 0

1005addc                                                                                      00 00 00 00                              ....

1005ade0  char data_1005ade0[0x15] = "no portal of area %d", 0

1005adf5                                                                 00 00 00 00 00 00 00                                   .......

1005adfc  char data_1005adfc[0x2e] = "AAS_FloodClusterAreas_r: areanum out of range", 0

1005ae2a                                00 00 00 00 00 00 00 00 00 00                                                ..........

1005ae34  char data_1005ae34[0x29] = "cluster %d touched cluster %d at area %d", 0

1005ae5d                                                                                         00 00 00                               ...
1005ae60  00 00 00 00 00 00 00 00                                                                          ........

1005ae68  char data_1005ae68[0x11] = "AAS_MAX_CLUSTERS", 0

1005ae79                                                                             00 00 00                                       ...

1005ae7c  char data_1005ae7c[0x18] = "cluster %d has %d areas", 0

1005ae94                                                              00 00 00 00                                              ....

1005ae98  char data_1005ae98[0x10] = "AAS_MAX_PORTALS", 0

1005aea8                          00 00 00 00                                                                      ....

1005aeac  char data_1005aeac[0x13] = "portal %d: area %d", 0

1005aebf                                                                                               00                                 .
1005aec0  00 00 00 00                                                                                      ....

1005aec4  char data_1005aec4[0x10] = "MAX_PORTALAREAS", 0

1005aed4                                                              00 00 00 00                                              ....

1005aed8  char data_1005aed8[0x14] = "possible portal: %d", 0

1005aeec                                      00 00 00 00                                                              ....

1005aef0  char data_1005aef0[0x17] = "\r%6d possible portals\n", 0

1005af07                       00 00 00 00 00                                                                     .....

1005af0c  char data_1005af0c[0x24] = "portal area %d has no back cluster\n", 0

1005af30                                                  00 00 00 00 00 00 00 00                                          ........

1005af38  char data_1005af38[0x25] = "portal area %d has no front cluster\n", 0

1005af5d                                                                                         00 00 00                               ...
1005af60  00 00 00 00                                                                                      ....

1005af64  char data_1005af64[0x17] = "\r%6d clusters created\n", 0

1005af7b                                                                                   00 00 00 00 00                             .....

1005af80  char data_1005af80[0x16] = "\r%6d portals created\n", 0

1005af96                                                                    00 00 00 00 00 00                                    ......

1005af9c  char data_1005af9c[0x12] = "forcereachability", 0

1005afae                                            00 00 00 00 00 00                                                    ......

1005afb4  char data_1005afb4[0x10] = "forceclustering", 0

1005afc4              00 00 00 00                                                                              ....

1005afc8  char data_1005afc8[0x19] = "edgenum %d out of range\n", 0

1005afe1     00 00 00 00 00 00 00                                                                           .......

1005afe8  char data_1005afe8[0x19] = "facenum %d out of range\n", 0

1005b001     00 00 00 00 00 00 00                                                                           .......

1005b008  char data_1005b008[0x1e] = "area %d out of range [0, %d]\n", 0

1005b026                    00 00 00 00 00 00                                                                    ......
1005b02c  data_1005b02c:
1005b02c                                      0a 00 00 00                                                              ....

1005b030  char data_1005b030[0x1e] = "AAS_UpdateEntity: not loaded\n", 0

1005b04e                                            00 00 00 00 00 00                                                    ......

1005b054  char data_1005b054[0x28] = "AAS_EntityInfo: entnum %d out of range\n", 0

1005b07c                                                                                      00 00 00 00                              ....
1005b080  00 00 00 00                                                                                      ....

1005b084  char data_1005b084[0x2a] = "AAS_EntityInfo: aasworld not initialized\n", 0

1005b0ae                                            00 00 00 00 00 00 00 00 00 00                                        ..........

1005b0b8  char data_1005b0b8[0x2a] = "AAS_EntityOrigin: entnum %d out of range\n", 0

1005b0e2        00 00 00 00 00 00 00 00 00 00                                                                ..........

1005b0ec  char data_1005b0ec[0x2e] = "AAS_EntityModelindex: entnum %d out of range\n", 0

1005b11a                                                                                00 00 00 00 00 00                            ......
1005b120  00 00 00 00                                                                                      ....

1005b124  char data_1005b124[0x2c] = "AAS_EntityRenderFX: entnum %d out of range\n", 0

1005b150                                                  00 00 00 00 00 00 00 00                                          ........

1005b158  char data_1005b158[0x2c] = "AAS_EntityModelNum: entnum %d out of range\n", 0

1005b184              00 00 00 00 00 00 00 00                                                                  ........

1005b18c  char data_1005b18c[0x28] = "AAS_EntitySize: entnum %d out of range\n", 0

1005b1b4                                                              00 00 00 00 00 00 00 00                                  ........

1005b1bc  char data_1005b1bc[0x27] = "AAS_BestReachableArea: aas not loaded\n", 0

1005b1e3           00 00 00 00 00 00 00 00 00                                                                 .........

1005b1ec  char data_1005b1ec[0x15] = "can\'t read aas lump\n", 0

1005b201     00 00 00 00 00 00 00                                                                           .......

1005b208  char data_1005b208[0x18] = "can\'t seek to aas lump\n", 0

1005b220  00 00 00 00                                                                                      ....

1005b224  char data_1005b224[0x23] = "aas file %s is version %i, not %i\n", 0

1005b247                       00 00 00 00 00 00 00 00 00                                                         .........

1005b250  char data_1005b250[0x2e] = "found an old AAS file, create a new AAS file\n", 0

1005b27e                                                                                            00 00                                ..
1005b280  00 00 00 00 00 00 00 00                                                                          ........

1005b288  char data_1005b288[0x17] = "%s is not an AAS file\n", 0

1005b29f                                                                                               00                                 .
1005b2a0  00 00 00 00                                                                                      ....

1005b2a4  char data_1005b2a4[0x1e] = "can\'t read header of file %s\n", 0

1005b2c2        00 00 00 00 00 00                                                                            ......

1005b2c8  char data_1005b2c8[0x17] = "can\'t seek to file %s\n", 0

1005b2df                                                                                               00                                 .
1005b2e0  00 00 00 00                                                                                      ....

1005b2e4  char data_1005b2e4[0xf] = "can\'t open %s\n", 0

1005b2f3                                                           00 00 00 00 00                                             .....

1005b2f8  char data_1005b2f8[0x17] = "error writing lump %s\n", 0

1005b30f                                               00 00 00 00 00                                                     .....

1005b314  char data_1005b314[0x12] = "error opening %s\n", 0

1005b326                    00 00 00 00 00 00                                                                    ......
1005b32c  data_1005b32c:
1005b32c                                      77 62 00 00                                                              wb..

1005b330  char data_1005b330[0xc] = "writing %s\n", 0

1005b33c                                                                                      00 00 00 00                              ....

1005b340  char data_1005b340[0x26] = "max_aaslights out of range [0, 65536]", 0

1005b366                    00 00 00 00 00 00 00 00 00 00                                                        ..........

1005b370  char data_1005b370[0xe] = "max_aaslights", 0

1005b37e                                                                                            00 00                                ..
1005b380  data_1005b380:
1005b380  31 32 38 00                                                                                      128.

1005b384  char data_1005b384[0x1b] = "WARNING: empty light heap\n", 0

1005b39f                                                                                               00                                 .
1005b3a0  00 00 00 00                                                                                      ....

1005b3a4  char data_1005b3a4[0x1b] = "%s: index %d out of range\n", 0

1005b3bf                                                                                               00                                 .
1005b3c0  00 00 00 00                                                                                      ....

1005b3c4  char data_1005b3c4[0x22] = "%s: reference to unused index %d\n", 0

1005b3e6                    00 00 00 00 00 00                                                                    ......

1005b3ec  char data_1005b3ec[0x18] = "%s: index %d not setup\n", 0

1005b404              00 00 00 00                                                                              ....

1005b408  char data_1005b408[0x1a] = "%s: index not setup \"%s\"\n", 0

1005b422        00 00 00 00 00 00                                                                            ......

1005b428  char data_1005b428[0xf] = "ModelFromIndex", 0

1005b437                                                                       00 00 00 00 00                                     .....

1005b43c  char data_1005b43c[0xf] = "IndexFromModel", 0

1005b44b                                   00 00 00 00 00                                                             .....

1005b450  char data_1005b450[0xf] = "SoundFromIndex", 0

1005b45f                                                                                               00                                 .
1005b460  00 00 00 00                                                                                      ....

1005b464  char data_1005b464[0xf] = "IndexFromSound", 0

1005b473                                                           00 00 00 00 00                                             .....

1005b478  char data_1005b478[0xf] = "ImageFromIndex", 0

1005b487                       00 00 00 00 00                                                                     .....

1005b48c  char data_1005b48c[0xf] = "IndexFromImage", 0

1005b49b                                                                                   00 00 00 00 00                             .....

1005b4a0  char data_1005b4a0[0x34] = "AAS_PresenceTypeBoundingBox: unknown presence type\n", 0

1005b4d4                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............

1005b4e0  char data_1005b4e0[0x12] = "AAS initialized.\n", 0

1005b4f2                                                        00 00 00 00 00 00                                            ......

1005b4f8  char data_1005b4f8[0x13] = "couldn\'t write %s\n", 0

1005b50b                                   00 00 00 00 00                                                             .....

1005b510  char data_1005b510[0x18] = "%s written succesfully\n", 0

1005b528                          00 00 00 00                                                                      ....

1005b52c  char data_1005b52c[0xb] = "nooptimize", 0

1005b537                                                                       00 00 00 00 00                                     .....

1005b53c  char data_1005b53c[0xb] = "forcewrite", 0

1005b547                       00 00 00 00 00                                                                     .....

1005b54c  char data_1005b54c[0xb] = "memorydump", 0

1005b557                                                                       00 00 00 00 00                                     .....

1005b55c  char data_1005b55c[0x10] = "showmemoryusage", 0

1005b56c                                      00 00 00 00                                                              ....
1005b570  data_1005b570:
1005b570                                                  30 00 00 00                                                      0...

1005b574  char data_1005b574[0x11] = "showcacheupdates", 0

1005b585                 00 00 00                                                                               ...

1005b588  char data_1005b588[0x17] = "can\'t execute WinBSPC\n", 0

1005b59f                                                                                               00                                 .
1005b5a0  00 00 00 00                                                                                      ....

1005b5a4  char data_1005b5a4[0x10] = "bsp2aas(%s,%s);", 0

1005b5b4                                                              00 00 00 00                                              ....

1005b5b8  char data_1005b5b8[0xe] = "spawning \"%s\"", 0

1005b5c6                    00 00                                                                                ..

1005b5c8  char data_1005b5c8[0xc] = "winbspc.exe", 0

1005b5d4                                                              00 00 00 00                                              ....

1005b5d8  char data_1005b5d8[0x5] = ".aas", 0

1005b5dd                                                                                         00 00 00                               ...

1005b5e0  char data_1005b5e0[0x5] = "maps", 0

1005b5e5                 00 00 00                                                                               ...

1005b5e8  char data_1005b5e8[0x8] = "gamedir", 0

1005b5f0                                                  00 00 00 00                                                      ....

1005b5f4  char data_1005b5f4[0x8] = "basedir", 0

1005b5fc                                                                                      00 00 00 00                              ....

1005b600  char data_1005b600[0x5] = ".bsp", 0

1005b605                 00 00 00                                                                               ...

1005b608  char data_1005b608[0xf] = "found %s in %s", 0

1005b617                                                                       00 00 00 00 00                                     .....

1005b61c  char data_1005b61c[0xe] = "loaded %s\\%s\n", 0

1005b62a                                00 00                                                                        ..

1005b62c  char data_1005b62c[0x18] = "could not find %s in %s", 0

1005b644              00 00 00 00                                                                              ....

1005b648  char data_1005b648[0x13] = "searching %s in %s", 0

1005b65b                                                                                   00 00 00 00 00                             .....

1005b660  char data_1005b660[0xa] = "aas%d.zip", 0

1005b66a                                00 00                                                                        ..

1005b66c  int16_t data_1005b66c = 0x2e2e
1005b66e  char data_1005b66e = 0x0

1005b66f                                               00                                                                 .

1005b670  char data_1005b670[0x7] = "baseq2", 0

1005b677                                                                       00                                                 .

1005b678  char data_1005b678[0x1f] = "couldn\'t find the bsp file %s\n", 0

1005b697                                                                       00 00 00 00 00 00 00 00 00                         .........

1005b6a0  char data_1005b6a0[0x17] = "no AAS file available\n", 0

1005b6b7                                                                       00 00 00 00 00                                     .....

1005b6bc  char data_1005b6bc[0xc4] = "\ncreating AAS for %s...\n\n"
1005b6bc      "This may take several minutes\n\n"
1005b6bc      "You cannot play the map %s with\n"
1005b6bc      "bots before AAS (%s.aas) has been\n"
1005b6bc      "created.\n\n"
1005b6bc      "You probably want to close Quake2 now\n"
1005b6bc      "to free up processing powe"

1005b780  72 20 66 6f 72 20 74 68 65 0a 74 6f 6f 6c 20 77 68 69 63 68 20 63 72 65 61 74 65 73 20 74 68 65  r for the.tool which creates the
1005b7a0  20 41 41 53 20 66 69 6c 65 2e 0a 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   AAS file.......................
1005b7c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

1005b7e0  char data_1005b7e0[0xf] = "autolaunchbspc", 0

1005b7ef                                               00 00 00 00 00                                                     .....

1005b7f4  char data_1005b7f4[0xb] = "loaded %s\n", 0

1005b7ff                                                                                               00                                 .
1005b800  00 00 00 00                                                                                      ....

1005b804  char data_1005b804[0x6] = "maps\\", 0

1005b80a                                00 00                                                                        ..

1005b80c  char data_1005b80c[0xf] = "AAS shutdown.\n", 0

1005b81b                                                                                   00 00 00 00 00                             .....

1005b820  char data_1005b820[0x1e] = "PredictMovement: start solid\n", 0

1005b83e                                                                                            00 00                                ..
1005b840  00 00 00 00                                                                                      ....

1005b844  char data_1005b844[0xe] = "leave ground\n", 0

1005b852                                                        00 00                                                        ..

1005b854  char data_1005b854[0x15] = "AAS data optimized.\n", 0

1005b869                             00 00 00 00 00 00 00                                                           .......

1005b870  char data_1005b870[0x19] = "AAS_MAX_REACHABILITYSIZE", 0

1005b889                             00 00 00 00 00 00 00                                                           .......

1005b890  char data_1005b890[0x2e] = "AAS_AreaReachability: areanum %d out of range", 0

1005b8be                                                                                            00 00                                ..
1005b8c0  00 00 00 00 00 00 00 00                                                                          ........

1005b8c8  char data_1005b8c8[0x26] = "teleporter destination (%s) in solid\n", 0

1005b8ee                                            00 00 00 00 00 00 00 00 00 00                                        ..........

1005b8f8  char data_1005b8f8[0x2c] = "teleporter destination (%s) without origin\n", 0

1005b924              00 00 00 00 00 00 00 00                                                                  ........

1005b92c  char data_1005b92c[0x25] = "teleporter without destination (%s)\n", 0

1005b951                                                     00 00 00 00 00 00 00                                           .......

1005b958  char data_1005b958[0xb] = "targetname", 0

1005b963           00 00 00 00 00                                                                             .....

1005b968  char data_1005b968[0x15] = "misc_teleporter_dest", 0

1005b97d                                                                                         00 00 00                               ...
1005b980  00 00 00 00                                                                                      ....

1005b984  char data_1005b984[0x30] = "teleporter at %1.0f %1.0f %1.0f without target\n", 0

1005b9b4                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............

1005b9c0  char data_1005b9c0[0x7] = "target", 0

1005b9c7                       00                                                                                 .

1005b9c8  char data_1005b9c8[0x20] = "teleporter (%s) without origin\n", 0

1005b9e8                          00 00 00 00 00 00 00 00                                                          ........

1005b9f0  char data_1005b9f0[0x7] = "origin", 0

1005b9f7                                                                       00                                                 .

1005b9f8  char data_1005b9f8[0x10] = "misc_teleporter", 0

1005ba08                          00 00 00 00                                                                      ....

1005ba0c  char data_1005ba0c[0xa] = "classname", 0

1005ba16                                                                    00 00                                                ..

1005ba18  char data_1005ba18[0x6] = "speed", 0

1005ba1e                                                                                            00 00                                ..

1005ba20  char data_1005ba20[0x7] = "height", 0

1005ba27                       00                                                                                 .
1005ba28  data_1005ba28:
1005ba28                          6c 69 70 00                                                                      lip.

1005ba2c  char data_1005ba2c[0x25] = "func_plat with invalid model number\n", 0

1005ba51                                                     00 00 00 00 00 00 00                                           .......

1005ba58  char data_1005ba58[0x19] = "func_plat without model\n", 0

1005ba71                                                     00 00 00 00 00 00 00                                           .......

1005ba78  char data_1005ba78[0x6] = "model", 0

1005ba7e                                                                                            00 00                                ..

1005ba80  char data_1005ba80[0xa] = "func_plat", 0

1005ba8a                                00 00                                                                        ..

1005ba8c  char data_1005ba8c[0x22] = "area %d center %f %f %f in solid?", 0

1005baae                                            00 00 00 00 00 00                                                    ......

1005bab4  char data_1005bab4[0x24] = "%s in solid at (%1.1f %1.1f %1.1f)\n", 0

1005bad8                                                                          00 00 00 00 00 00 00 00                          ........

1005bae0  char data_1005bae0[0x15] = "item_invulnerability", 0

1005baf5                                                                 00 00 00 00 00 00 00                                   .......

1005bafc  char data_1005bafc[0xa] = "item_quad", 0

1005bb06                    00 00                                                                                ..

1005bb08  char data_1005bb08[0x11] = "item_health_mega", 0

1005bb19                                                                             00 00 00                                       ...

1005bb1c  char data_1005bb1c[0xd] = "dm_tag_token", 0

1005bb29                             00 00 00                                                                       ...

1005bb2c  char data_1005bb2c[0x12] = "item_doppleganger", 0

1005bb3e                                                                                            00 00                                ..
1005bb40  00 00 00 00                                                                                      ....

1005bb44  char data_1005bb44[0x15] = "item_sphere_defender", 0

1005bb59                                                                             00 00 00 00 00 00 00                           .......

1005bb60  char data_1005bb60[0x13] = "item_sphere_hunter", 0

1005bb73                                                           00 00 00 00 00                                             .....

1005bb78  char data_1005bb78[0x16] = "item_sphere_vengeance", 0

1005bb8e                                            00 00 00 00 00 00                                                    ......

1005bb94  char data_1005bb94[0xd] = "item_compass", 0

1005bba1     00 00 00                                                                                       ...

1005bba4  char data_1005bba4[0xc] = "item_double", 0

1005bbb0                                                  00 00 00 00                                                      ....

1005bbb4  char data_1005bbb4[0x10] = "item_ir_goggles", 0

1005bbc4              00 00 00 00                                                                              ....

1005bbc8  char data_1005bbc8[0x15] = "weapon_disintegrator", 0

1005bbdd                                                                                         00 00 00                               ...
1005bbe0  00 00 00 00                                                                                      ....

1005bbe4  char data_1005bbe4[0x11] = "weapon_chainfist", 0

1005bbf5                                                                 00 00 00                                               ...

1005bbf8  char data_1005bbf8[0x12] = "weapon_plasmabeam", 0

1005bc0a                                00 00 00 00 00 00                                                            ......

1005bc10  char data_1005bc10[0x14] = "weapon_proxlauncher", 0

1005bc24              00 00 00 00                                                                              ....

1005bc28  char data_1005bc28[0x11] = "weapon_etf_rifle", 0

1005bc39                                                                             00 00 00                                       ...

1005bc3c  char data_1005bc3c[0xe] = "item_quadfire", 0

1005bc4a                                00 00                                                                        ..

1005bc4c  char data_1005bc4c[0xf] = "weapon_phalanx", 0

1005bc5b                                                                                   00 00 00 00 00                             .....

1005bc60  char data_1005bc60[0xe] = "weapon_boomer", 0

1005bc6e                                            00 00                                                                ..

1005bc70  char data_1005bc70[0xb] = "weapon_bfg", 0

1005bc7b                                                                                   00 00 00 00 00                             .....

1005bc80  char data_1005bc80[0xf] = "weapon_railgun", 0

1005bc8f                                               00 00 00 00 00                                                     .....

1005bc94  char data_1005bc94[0x14] = "weapon_hyperblaster", 0

1005bca8                          00 00 00 00                                                                      ....

1005bcac  char data_1005bcac[0x16] = "weapon_rocketlauncher", 0

1005bcc2        00 00 00 00 00 00                                                                            ......

1005bcc8  char data_1005bcc8[0x17] = "weapon_grenadelauncher", 0

1005bcdf                                                                                               00                                 .
1005bce0  00 00 00 00                                                                                      ....

1005bce4  char data_1005bce4[0x12] = "item_power_shield", 0

1005bcf6                                                                    00 00 00 00 00 00                                    ......

1005bcfc  char data_1005bcfc[0x12] = "item_power_screen", 0

1005bd0e                                            00 00 00 00 00 00                                                    ......

1005bd14  char data_1005bd14[0x12] = "item_armor_combat", 0

1005bd26                    00 00 00 00 00 00                                                                    ......

1005bd2c  char data_1005bd2c[0x10] = "item_armor_body", 0

1005bd3c                                                                                      00 00 00 00                              ....

1005bd40  char data_1005bd40[0x2c] = "\nplease wait while storing reachability...\n", 0

1005bd6c                                      00 00 00 00 00 00 00 00                                                  ........

1005bd74  char data_1005bd74[0x9] = "\r%6d%%%%", 0

1005bd7d                                                                                         00 00 00                               ...

1005bd80  char data_1005bd80[0x1d] = "calculating reachability...\n", 0

1005bd9d                                                                                         00 00 00                               ...
1005bda0  00 00 00 00                                                                                      ....

1005bda4  char data_1005bda4[0x19] = "calculating clusters...\n", 0

1005bdbd                                                                                         00 00 00                               ...
1005bdc0  00 00 00 00                                                                                      ....

1005bdc4  char data_1005bdc4[0x13] = "reachability_delay", 0

1005bdd7                                                                       00 00 00 00 00                                     .....
1005bddc  data_1005bddc:
1005bddc                                                                                      31 30 30 00                              100.

1005bde0  char data_1005bde0[0x12] = "framereachability", 0

1005bdf2                                                        00 00 00 00 00 00                                            ......
1005bdf8  data_1005bdf8:
1005bdf8                                                                          32 30 00 00                                      20..

1005bdfc  char data_1005bdfc[0x37] = "AAS_AreaTravelTimeToGoalArea: areanum %d out of range\n", 0

1005be33                                                           00 00 00 00 00 00 00 00 00 00 00 00 00                     .............

1005be40  char data_1005be40[0x3b] = "AAS_AreaTravelTimeToGoalArea: goalareanum %d out of range\n", 0

1005be7b                                                                                   00 00 00 00 00                             .....
1005be80  00 00 00 00 00 00 00 00                                                                          ........

1005be88  char data_1005be88[0x33] = "AAS_NextAreaReachability: areanum %d out of range\n", 0

1005bebb                                                                                   00 00 00 00 00                             .....
1005bec0  00 00 00 00 00 00 00 00                                                                          ........

1005bec8  char data_1005bec8[0x41] = "AAS_NextAreaReachability: reachnum < settings->firstreachableara", 0

1005bf09                             00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                   ...............

1005bf18  char data_1005bf18[0x19] = "%d portal cache updates\n", 0

1005bf31                                                     00 00 00 00 00 00 00                                           .......

1005bf38  char data_1005bf38[0x17] = "%d area cache updates\n", 0

1005bf4f                                               00 00 00 00 00                                                     .....

1005bf54  char data_1005bf54[0x1c] = "%d alternative route goals\n", 0

1005bf70                                                  00 00 00 00 00 00 00 00                                          ........

1005bf78  char data_1005bf78[0x14] = "%d midrange area %d", 0

1005bf8c                                      00 00 00 00                                                              ....

1005bf90  char data_1005bf90[0xd] = "max_aaslinks", 0

1005bf9d                                                                                         00 00 00                               ...

1005bfa0  char data_1005bfa0[0x15] = "empty aas link heap\n", 0

1005bfb5                                                                 00 00 00 00 00 00 00                                   .......

1005bfbc  char data_1005bfbc[0x22] = "AAS_PointAreaNum: aas not loaded\n", 0

1005bfde                                                                                            00 00                                ..
1005bfe0  00 00 00 00                                                                                      ....

1005bfe4  char data_1005bfe4[0x26] = "AAS_AreaCluster: invalid area number\n", 0

1005c00a                                00 00 00 00 00 00 00 00 00 00                                                ..........

1005c014  char data_1005c014[0x2b] = "AAS_AreaPresenceType: invalid area number\n", 0

1005c03f                                                                                               00                                 .
1005c040  00 00 00 00 00 00 00 00                                                                          ........

1005c048  char data_1005c048[0x20] = "AAS_LinkEntity: aas not loaded\n", 0

1005c068                          00 00 00 00 00 00 00 00                                                          ........

1005c070  char (* data_1005c070)[0x5] = data_1005c1a0 {"name"}

1005c074                                                              00 00 00 00 04 00 00 00 00 00 00 00                      ............
1005c080  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005c08c  char (* data_1005c08c)[0x7] = data_1005c198 {"volume"}

1005c090                                                  50 00 00 00 03 02 00 00 00 00 00 00 00 00 00 00                  P...............
1005c0a0  00 00 a0 42 00 00 00 00                                                                          ...B....

1005c0a8  char (* data_1005c0a8)[0x9] = data_1005c18c {"duration"}

1005c0ac                                      54 00 00 00 03 02 00 00 00 00 00 00 00 00 00 00 00 00 20 41              T................. A
1005c0c0  00 00 00 00                                                                                      ....

1005c0c4  char (* data_1005c0c4)[0x5] = data_1005c184 {"type"}

1005c0c8                          58 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          X.......................

1005c0e0  char (* data_1005c0e0)[0xc] = data_1005c174 {"recognition"}

1005c0e4              5c 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80 3f 00 00 00 00                  \..................?....

1005c0fc  char (* data_1005c0fc)[0x7] = data_1005c16c {"string"}

1005c100  60 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  `...............................
1005c120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................
1005c138  data_1005c138:
1005c138                                                                          b0 00 00 00                                      ....

1005c13c  void* data_1005c13c = data_1005c070

1005c140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005c160  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005c16c  char data_1005c16c[0x7] = "string", 0

1005c173                                                           00                                                         .

1005c174  char data_1005c174[0xc] = "recognition", 0

1005c180  00 00 00 00                                                                                      ....

1005c184  char data_1005c184[0x5] = "type", 0

1005c189                             00 00 00                                                                       ...

1005c18c  char data_1005c18c[0x9] = "duration", 0

1005c195                                                                 00 00 00                                               ...

1005c198  char data_1005c198[0x7] = "volume", 0

1005c19f                                                                                               00                                 .

1005c1a0  char data_1005c1a0[0x5] = "name", 0

1005c1a5                 00 00 00                                                                               ...

1005c1a8  char data_1005c1a8[0x17] = "unknown definition %s\n", 0

1005c1bf                                                                                               00                                 .
1005c1c0  00 00 00 00                                                                                      ....

1005c1c4  char data_1005c1c4[0x22] = "more than %d sound infos defined\n", 0

1005c1e6                    00 00 00 00 00 00                                                                    ......

1005c1ec  char data_1005c1ec[0xa] = "soundinfo", 0

1005c1f6                                                                    00 00                                                ..

1005c1f8  char data_1005c1f8[0x13] = "counldn\'t load %s\n", 0

1005c20b                                   00 00 00 00 00                                                             .....

1005c210  char data_1005c210[0x12] = "couldn\'t find %s\n", 0

1005c222        00 00 00 00 00 00                                                                            ......

1005c228  char data_1005c228[0x26] = "max_soundinfo out of range [0, 65535]", 0

1005c24e                                            00 00 00 00 00 00 00 00 00 00                                        ..........

1005c258  char data_1005c258[0xe] = "max_soundinfo", 0

1005c266                    00 00                                                                                ..
1005c268  data_1005c268:
1005c268                          32 35 36 00                                                                      256.

1005c26c  char data_1005c26c[0x26] = "max_aassounds out of range [0, 65536]", 0

1005c292                                                        00 00 00 00 00 00 00 00 00 00                                ..........

1005c29c  char data_1005c29c[0xe] = "max_aassounds", 0

1005c2aa                                00 00                                                                        ..

1005c2ac  char data_1005c2ac[0x25] = "sound index %d out of range [0, %d]\n", 0

1005c2d1                                                     00 00 00 00 00 00 00                                           .......

1005c2d8  char data_1005c2d8[0x12] = "empty sound heap\n", 0

1005c2ea                                00 00 00 00 00 00                                                            ......

1005c2f0  char data_1005c2f0[0x22] = "no soundindex to soundinfo table\n", 0

1005c312                                                        00 00 00 00 00 00                                            ......

1005c318  char data_1005c318[0xc] = "soundconfig", 0

1005c324              00 00 00 00                                                                              ....

1005c328  char data_1005c328[0x9] = "sounds.c", 0

1005c331                                                     00 00 00                                                       ...

1005c334  char data_1005c334[0x2c] = "%s at %1.1f switched more than %d AI nodes\n", 0

1005c360  00 00 00 00 00 00 00 00                                                                          ........

1005c368  char data_1005c368[0x1c] = "%s at %2.1f entered %s: %s\n", 0

1005c384              00 00 00 00 00 00 00 00                                                                  ........

1005c38c  char data_1005c38c[0x12] = "captureflag_start", 0

1005c39e                                                                                            00 00                                ..
1005c3a0  00 00 00 00                                                                                      ....

1005c3a4  char data_1005c3a4[0xc] = "patrol_stop", 0

1005c3b0                                                  00 00 00 00                                                      ....

1005c3b4  char data_1005c3b4[0xd] = "patrol_start", 0

1005c3c1     00 00 00                                                                                       ...

1005c3c4  char data_1005c3c4[0x5] = " to ", 0

1005c3c9                             00 00 00                                                                       ...

1005c3cc  char data_1005c3cc[0xc] = "camp_arrive", 0

1005c3d8                                                                          00 00 00 00                                      ....

1005c3dc  char data_1005c3dc[0xa] = "camp_stop", 0

1005c3e6                    00 00                                                                                ..

1005c3e8  char data_1005c3e8[0xb] = "camp_start", 0

1005c3f3                                                           00 00 00 00 00                                             .....

1005c3f8  char data_1005c3f8[0xc] = "defend_stop", 0

1005c404              00 00 00 00                                                                              ....

1005c408  char data_1005c408[0xd] = "defend_start", 0

1005c415                                                                 00 00 00                                               ...

1005c418  char data_1005c418[0x15] = "accompany_cannotfind", 0

1005c42d                                         00 00 00 00 00 00 00                                                   .......

1005c434  char data_1005c434[0x11] = "accompany_arrive", 0

1005c445                 00 00 00                                                                               ...

1005c448  char data_1005c448[0xf] = "accompany_stop", 0

1005c457                                                                       00 00 00 00 00                                     .....

1005c45c  char data_1005c45c[0x10] = "accompany_start", 0

1005c46c                                      00 00 00 00                                                              ....

1005c470  char data_1005c470[0xb] = "help_start", 0

1005c47b                                                                                   00 00 00 00 00                             .....

1005c480  char data_1005c480[0xd] = "intermission", 0

1005c48d                                         00 00 00                                                               ...

1005c490  char data_1005c490[0x9] = "observer", 0

1005c499                                                                             00 00 00                                       ...

1005c49c  char data_1005c49c[0x6] = "stand", 0

1005c4a2        00 00                                                                                        ..

1005c4a4  char data_1005c4a4[0xa] = "removebot", 0

1005c4ae                                            00 00 00 00 00                                                       .....

1005c4b3  char data_1005c4b3[0x1e] = "I never hacked your brain...\n", 0

1005c4d1                                                     00 00 00 00 00 00 00                                           .......

1005c4d8  char data_1005c4d8[0x9] = "__squatt", 0

1005c4e1     00 00 00                                                                                       ...

1005c4e4  char data_1005c4e4[0x8] = "respawn", 0

1005c4ec                                      00 00 00 00                                                              ....

1005c4f0  char data_1005c4f0[0x10] = "activate entity", 0

1005c500  00 00 00 00                                                                                      ....

1005c504  char data_1005c504[0x8] = "no goal", 0

1005c50c                                      00 00 00 00                                                              ....

1005c510  char data_1005c510[0x9] = "seek NBG", 0

1005c519                                                                             00 00 00                                       ...

1005c51c  char data_1005c51c[0x9] = "seek LTG", 0

1005c525                 00 00 00                                                                               ...

1005c528  char data_1005c528[0xd] = "battle fight", 0

1005c535                                                                 00 00 00                                               ...

1005c538  char data_1005c538[0xd] = "battle chase", 0

1005c545                 00 00 00                                                                               ...

1005c548  char data_1005c548[0xf] = "battle retreat", 0

1005c557                                                                       00 00 00 00 00                                     .....

1005c55c  char data_1005c55c[0xb] = "battle NBG", 0

1005c567                       00 00 00 00 00                                                                     .....
1005c56c  data_1005c56c:
1005c56c                                      00 00 00 00 00 00 80 bf 00 00 00 00                                      ............

1005c578  int32_t data_1005c578 = 0x0
1005c57c  int32_t data_1005c57c = 0x0
1005c580  int32_t data_1005c580 = 0x3f800000

1005c584  data_1005c584:
1005c584              00 00 00 00 00 00 00 c0 00 00 00 00                                                      ............

1005c590  int32_t data_1005c590 = 0x0
1005c594  int32_t data_1005c594 = 0x0
1005c598  int32_t data_1005c598 = -0x40800000

1005c59c                                                                                      00 00 00 00                              ....
1005c5a0  00 00 00 00 00 00 00 00                                                                          ........

1005c5a8  char data_1005c5a8[0xe] = "i_powershield", 0

1005c5b6                                                                    00 00                                                ..

1005c5b8  char data_1005c5b8[0xd] = "p_envirosuit", 0

1005c5c5                 00 00 00                                                                               ...

1005c5c8  char data_1005c5c8[0xd] = "p_rebreather", 0

1005c5d5                                                                 00 00 00                                               ...

1005c5d8  char data_1005c5d8[0x12] = "p_invulnerability", 0

1005c5ea                                00 00 00 00 00 00                                                            ......

1005c5f0  char data_1005c5f0[0x7] = "p_quad", 0

1005c5f7                                                                       00                                                 .

1005c5f8  char data_1005c5f8[0xd] = "Power Screen", 0

1005c605                 00 00 00                                                                               ...

1005c608  char data_1005c608[0xd] = "Power Shield", 0

1005c615                                                                 00 00 00                                               ...

1005c618  char data_1005c618[0xb] = "Rebreather", 0

1005c623           00 00 00 00 00                                                                             .....

1005c628  char data_1005c628[0x9] = "Silencer", 0

1005c631                                                     00 00 00                                                       ...

1005c634  char data_1005c634[0x10] = "Invulnerability", 0

1005c644              00 00 00 00                                                                              ....

1005c648  char data_1005c648[0xc] = "Quad Damage", 0

1005c654                                                              00 00 00 00                                              ....
1005c658  data_1005c658:
1005c658                                                                          5d 00 00 00                                      ]...
1005c65c  data_1005c65c:
1005c65c                                                                                      5b 00 00 00                              [...
1005c660  data_1005c660:
1005c660  20 00 00 00                                                                                       ...

1005c664  char data_1005c664[0xb] = "enter_game", 0

1005c66f                                               00 00 00 00 00                                                     .....

1005c674  char data_1005c674[0xa] = "exit_game", 0

1005c67e                                                                                            00 00                                ..

1005c680  char data_1005c680[0xc] = "start_level", 0

1005c68c                                      00 00 00 00                                                              ....

1005c690  char data_1005c690[0xa] = "end_level", 0

1005c69a                                                                                00 00                                        ..

1005c69c  char data_1005c69c[0xd] = "death_praise", 0

1005c6a9                             00 00 00                                                                       ...

1005c6ac  char data_1005c6ac[0xd] = "death_insult", 0

1005c6b9                                                                             00 00 00                                       ...

1005c6bc  char data_1005c6bc[0xa] = "death_bfg", 0

1005c6c6                    00 00                                                                                ..

1005c6c8  char data_1005c6c8[0xc] = "kill_praise", 0

1005c6d4                                                              00 00 00 00                                              ....

1005c6d8  char data_1005c6d8[0xc] = "kill_insult", 0

1005c6e4              00 00 00 00                                                                              ....

1005c6e8  char data_1005c6e8[0xe] = "kill_telefrag", 0

1005c6f6                                                                    00 00                                                ..

1005c6f8  char data_1005c6f8[0xe] = "random_insult", 0

1005c706                    00 00                                                                                ..

1005c708  char data_1005c708[0xc] = "random_misc", 0

1005c714                                                              00 00 00 00                                              ....

1005c718  char data_1005c718[0x6] = "ctf_r", 0

1005c71e                                                                                            00 00                                ..

1005c720  char data_1005c720[0x8] = "Railgun", 0

1005c728                          00 00 00 00                                                                      ....

1005c72c  char data_1005c72c[0x10] = "Rocket Launcher", 0

1005c73c                                                                                      00 00 00 00                              ....

1005c740  char data_1005c740[0x4f] = "BotEntityToActivate: stacked up more than %d trigger_counter or trigger_relay\n", 0

1005c78f                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                 .................

1005c7a0  char data_1005c7a0[0x3f] = "BotEntityToActivate: entity with target \"%s\" has no classname\n", 0

1005c7df                                                                                               00                                 .
1005c7e0  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005c7ec  char data_1005c7ec[0x3b] = "BotEntityToActivate: unkown activator with classname \"%s\"\n", 0

1005c827                       00 00 00 00 00 00 00 00 00 00 00 00 00                                             .............

1005c834  char data_1005c834[0xc] = "trigger_key", 0

1005c840  00 00 00 00                                                                                      ....

1005c844  char data_1005c844[0x13] = "func_door_rotating", 0

1005c857                                                                       00 00 00 00 00                                     .....

1005c85c  char data_1005c85c[0xd] = "trigger_once", 0

1005c869                             00 00 00                                                                       ...

1005c86c  char data_1005c86c[0x11] = "trigger_multiple", 0

1005c87d                                                                                         00 00 00                               ...

1005c880  char data_1005c880[0xc] = "func_button", 0

1005c88c                                      00 00 00 00                                                              ....

1005c890  char data_1005c890[0xe] = "trigger_relay", 0

1005c89e                                                                                            00 00                                ..

1005c8a0  char data_1005c8a0[0x10] = "trigger_counter", 0

1005c8b0                                                  00 00 00 00                                                      ....

1005c8b4  char data_1005c8b4[0x31] = "BotEntityToActivate: no entity with target \"%s\"\n", 0

1005c8e5                 00 00 00 00 00 00 00 00 00 00 00                                                       ...........

1005c8f0  char data_1005c8f0[0x7] = "health", 0

1005c8f7                                                                       00                                                 .

1005c8f8  char data_1005c8f8[0xa] = "func_door", 0

1005c902        00 00                                                                                        ..

1005c904  char data_1005c904[0xb] = "spawnflags", 0

1005c90f                                               00 00 00 00 00                                                     .....

1005c914  char data_1005c914[0x11] = "func_door_secret", 0

1005c925                 00 00 00                                                                               ...

1005c928  char data_1005c928[0x3c] = "BotEntityToActivate: entity with model %s has no classname\n", 0

1005c964              00 00 00 00 00 00 00 00 00 00 00 00                                                      ............

1005c970  char data_1005c970[0x34] = "BotEntityToActivate: no entity found with model %s\n", 0

1005c9a4              00 00 00 00 00 00 00 00 00 00 00 00                                                      ............

1005c9b0  char data_1005c9b0[0x6] = "angle", 0

1005c9b6                                                                    00 00                                                ..

1005c9b8  char data_1005c9b8[0x8] = "Blaster", 0

1005c9c0  00 00 00 00                                                                                      ....

1005c9c4  char data_1005c9c4[0x5] = "tech", 0

1005c9c9                             00 00 00                                                                       ...

1005c9cc  char data_1005c9cc[0x22] = "I need more key points to patrol\n", 0

1005c9ee                                            00 00 00 00 00 00                                                    ......

1005c9f4  char data_1005c9f4[0xb] = "cannotfind", 0

1005c9ff                                                                                               00                                 .
1005ca00  00 00 00 00                                                                                      ....

1005ca04  char data_1005ca04[0x11] = "what do you say?", 0

1005ca15                                                                 00 00 00                                               ...
1005ca18  data_1005ca18:
1005ca18                                                                          25 64 0a 00                                      %d..

1005ca1c  char data_1005ca1c[0x14] = "unknown match type\n", 0

1005ca30                                                  00 00 00 00                                                      ....

1005ca34  char data_1005ca34[0xc] = "rushingbase", 0

1005ca40  00 00 00 00                                                                                      ....

1005ca44  char data_1005ca44[0xe] = "capturingflag", 0

1005ca52                                                        00 00                                                        ..

1005ca54  char data_1005ca54[0xb] = "patrolling", 0

1005ca5f                                                                                               00                                 .
1005ca60  00 00 00 00                                                                                      ....

1005ca64  char data_1005ca64[0x8] = "camping", 0

1005ca6c                                      00 00 00 00                                                              ....

1005ca70  char data_1005ca70[0xa] = "defending", 0

1005ca7a                                                                                00 00                                        ..

1005ca7c  char data_1005ca7c[0xd] = "accompanying", 0

1005ca89                             00 00 00                                                                       ...

1005ca8c  char data_1005ca8c[0x8] = "helping", 0

1005ca94                                                              00 00 00 00                                              ....

1005ca98  char data_1005ca98[0x3b] = "the part of my brain to create formations has been damaged", 0

1005cad3                                                           00 00 00 00 00 00 00 00 00 00 00 00 00                     .............

1005cae0  char data_1005cae0[0x13] = "checkpoint_confirm", 0

1005caf3                                                           00 00 00 00 00                                             .....

1005caf8  char data_1005caf8[0x12] = "%1.0f %1.0f %1.0f", 0

1005cb0a                                00 00 00 00 00 00                                                            ......

1005cb10  char data_1005cb10[0x13] = "checkpoint_invalid", 0

1005cb23           00 00 00 00 00                                                                             .....

1005cb28  char data_1005cb28[0x9] = "%f %f %f", 0

1005cb31                                                     00 00 00                                                       ...

1005cb34  char data_1005cb34[0x9] = "leftteam", 0

1005cb3d                                                                                         00 00 00                               ...

1005cb40  char data_1005cb40[0xb] = "joinedteam", 0

1005cb4b                                   00 00 00 00 00                                                             .....

1005cb50  char data_1005cb50[0xc] = "whereareyou", 0

1005cb5c                                                                                      00 00 00 00                              ....

1005cb60  char data_1005cb60[0x8] = "whereis", 0

1005cb68                          00 00 00 00                                                                      ....

1005cb6c  char data_1005cb6c[0x6] = "whois", 0

1005cb72                                                        00 00                                                        ..
1005cb74  data_1005cb74:
1005cb74                                                              3a 00 00 00                                              :...

1005cb78  char data_1005cb78[0x9] = "altnames", 0

1005cb81     00 00 00                                                                                       ...

1005cb84  char data_1005cb84[0x7] = "gender", 0

1005cb8b                                   00                                                                         .

1005cb8c  char data_1005cb8c[0x21] = "models/ctf/regeneration/tris.md2", 0

1005cbad                                         00 00 00 00 00 00 00                                                   .......

1005cbb4  char data_1005cbb4[0x1a] = "models/ctf/haste/tris.md2", 0

1005cbce                                            00 00 00 00 00 00                                                    ......

1005cbd4  char data_1005cbd4[0x1d] = "models/ctf/strength/tris.md2", 0

1005cbf1                                                     00 00 00 00 00 00 00                                           .......

1005cbf8  char data_1005cbf8[0x1f] = "models/ctf/resistance/tris.md2", 0

1005cc17                                                                       00 00 00 00 00 00 00 00 00                         .........

1005cc20  char data_1005cc20[0x17] = "players/male/flag2.md2", 0

1005cc37                                                                       00 00 00 00 00                                     .....

1005cc3c  char data_1005cc3c[0x17] = "players/male/flag1.md2", 0

1005cc53                                                           00 00 00 00 00                                             .....

1005cc58  char data_1005cc58[0x17] = "CTF without Blue Flag\n", 0

1005cc6f                                               00 00 00 00 00                                                     .....

1005cc74  char data_1005cc74[0xa] = "Blue Flag", 0

1005cc7e                                                                                            00 00                                ..

1005cc80  char data_1005cc80[0x16] = "CTF without Red Flag\n", 0

1005cc96                                                                    00 00 00 00 00 00                                    ......

1005cc9c  char data_1005cc9c[0x9] = "Red Flag", 0

1005cca5                 00 00 00                                                                               ...

1005cca8  char data_1005cca8[0xd] = "assimilation", 0

1005ccb5                                                                 00 00 00                                               ...

1005ccb8  char data_1005ccb8[0xf] = "teamplay_shell", 0

1005ccc7                       00 00 00 00 00                                                                     .....

1005cccc  char data_1005cccc[0x6] = "runes", 0

1005ccd2                                                        00 00                                                        ..

1005ccd4  char data_1005ccd4[0xb] = "rocketjump", 0

1005ccdf                                                                                               00                                 .
1005cce0  00 00 00 00                                                                                      ....
1005cce4  data_1005cce4:
1005cce4              31 00 00 00                                                                              1...

1005cce8  char data_1005cce8[0x8] = "usehook", 0

1005ccf0                                                  00 00 00 00                                                      ....

1005ccf4  char data_1005ccf4[0x9] = "teamplay", 0

1005ccfd                                                                                         00 00 00                               ...

1005cd00  char data_1005cd00[0x7] = "nochat", 0

1005cd07                       00                                                                                 .

1005cd08  char data_1005cd08[0x9] = "fastchat", 0

1005cd11                                                     00 00 00                                                       ...
1005cd14  data_1005cd14:
1005cd14                                                              72 61 00 00                                              ra..
1005cd18  data_1005cd18:
1005cd18                                                                          63 68 00 00                                      ch..
1005cd1c  data_1005cd1c:
1005cd1c                                                                                      63 74 66 00                              ctf.

1005cd20  char data_1005cd20[0x8] = "dmflags", 0

1005cd28                          00 00 00 00                                                                      ....

1005cd2c  char data_1005cd2c[0x24] = "ClientName: client %d out of range\n", 0

1005cd50                                                  00 00 00 00 00 00 00 00                                          ........

1005cd58  char data_1005cd58[0x24] = "ClientSkin: client %d out of range\n", 0

1005cd7c                                                                                      00 00 00 00                              ....
1005cd80  00 00 00 00                                                                                      ....

1005cd84  char data_1005cd84[0x1d] = "client %d hasn\'t been setup\n", 0

1005cda1     00 00 00 00 00 00 00                                                                           .......

1005cda8  char data_1005cda8[0x15] = "%6d bytes chat file\n", 0

1005cdbd                                                                                         00 00 00                               ...
1005cdc0  00 00 00 00                                                                                      ....

1005cdc4  char data_1005cdc4[0x18] = "%6d bytes weapon index\n", 0

1005cddc                                                                                      00 00 00 00                              ....

1005cde0  char data_1005cde0[0x1a] = "%6d bytes weapon weights\n", 0

1005cdfa                                                                                00 00 00 00 00 00                            ......

1005ce00  char data_1005ce00[0x16] = "%6d bytes item index\n", 0

1005ce16                                                                    00 00 00 00 00 00                                    ......

1005ce1c  char data_1005ce1c[0x18] = "%6d bytes item weights\n", 0

1005ce34                                                              00 00 00 00                                              ....

1005ce38  char data_1005ce38[0x15] = "%6d bytes character\n", 0

1005ce4d                                         00 00 00 00 00 00 00                                                   .......

1005ce54  char data_1005ce54[0x28] = "couldn\'t load bot character %s from %s\n", 0

1005ce7c                                                                                      00 00 00 00                              ....
1005ce80  00 00 00 00                                                                                      ....

1005ce84  char data_1005ce84[0x19] = "client %d already setup\n", 0

1005ce9d                                                                                         00 00 00                               ...
1005cea0  00 00 00 00                                                                                      ....

1005cea4  char data_1005cea4[0x1c] = "client %d already shutdown\n", 0

1005cec0  00 00 00 00 00 00 00 00                                                                          ........

1005cec8  char data_1005cec8[0x27] = "tried to move client to active client\n", 0

1005ceef                                               00 00 00 00 00 00 00 00 00                                         .........

1005cef8  char data_1005cef8[0x23] = "tried to move inactive bot client\n", 0

1005cf1b                                                                                   00 00 00 00 00                             .....
1005cf20  00 00 00 00                                                                                      ....

1005cf24  char data_1005cf24[0x26] = "tried to updated inactive bot client\n", 0

1005cf4a                                00 00 00 00 00 00 00 00 00 00                                                ..........

1005cf54  char data_1005cf54[0x32] = "recieved console message for inactive bot client\n", 0

1005cf86                    00 00 00 00 00 00 00 00 00 00                                                        ..........

1005cf90  char data_1005cf90[0x2d] = "tried to update settings of inactive client\n", 0

1005cfbd                                                                                         00 00 00                               ...
1005cfc0  00 00 00 00 00 00 00 00                                                                          ........

1005cfc8  char data_1005cfc8[0x9] = "gametype", 0

1005cfd1                                                     00 00 00                                                       ...

1005cfd4  char data_1005cfd4[0x8] = " %4d %d", 0

1005cfdc                                                                                      00 00 00 00                              ....

1005cfe0  char data_1005cfe0[0x8] = " %4d %f", 0

1005cfe8                          00 00 00 00                                                                      ....

1005cfec  char data_1005cfec[0x8] = " %4d %s", 0

1005cff4                                                              00 00 00 00                                              ....

1005cff8  char data_1005cff8[0x13] = "loaded %s from %s\n", 0

1005d00b                                   00 00 00 00 00                                                             .....

1005d010  char data_1005d010[0x22] = "couldn\'t find character %s in %s\n", 0

1005d032                                                        00 00 00 00 00 00                                            ......

1005d038  char data_1005d038[0x22] = "expected integer index, found %s\n", 0

1005d05a                                                                                00 00 00 00 00 00                            ......

1005d060  char data_1005d060[0x2d] = "expected integer, float or string, found %s\n", 0

1005d08d                                         00 00 00 00 00 00 00 00 00 00 00                                       ...........

1005d098  char data_1005d098[0x27] = "characteristic %d already initialized\n", 0

1005d0bf                                                                                               00                                 .
1005d0c0  00 00 00 00 00 00 00 00                                                                          ........

1005d0c8  char data_1005d0c8[0x16] = "loaded %s from %s\\%s\n", 0

1005d0de                                                                                            00 00                                ..
1005d0e0  00 00 00 00                                                                                      ....

1005d0e4  char data_1005d0e4[0xa] = "character", 0

1005d0ee                                            00 00                                                                ..

1005d0f0  char data_1005d0f0[0x22] = "characteristic %d does not exist\n", 0

1005d112                                                        00 00 00 00 00 00                                            ......

1005d118  char data_1005d118[0x26] = "characteristic %d is not initialized\n", 0

1005d13e                                                                                            00 00                                ..
1005d140  00 00 00 00 00 00 00 00                                                                          ........

1005d148  char data_1005d148[0x22] = "characteristic %d is not a float\n", 0

1005d16a                                00 00 00 00 00 00                                                            ......

1005d170  char data_1005d170[0x32] = "cannot bound characteristic %d between %f and %f\n", 0

1005d1a2        00 00 00 00 00 00 00 00 00 00                                                                ..........

1005d1ac  char data_1005d1ac[0x24] = "characteristic %d is not a integer\n", 0

1005d1d0                                                  00 00 00 00 00 00 00 00                                          ........

1005d1d8  char data_1005d1d8[0x32] = "cannot bound characteristic %d between %d and %d\n", 0

1005d20a                                00 00 00 00 00 00 00 00 00 00                                                ..........

1005d214  char data_1005d214[0x23] = "characteristic %d is not a string\n", 0

1005d237                                                                       00 00 00 00 00 00 00 00 00                         .........

1005d240  char data_1005d240[0xd] = "max_messages", 0

1005d24d                                         00 00 00                                                               ...

1005d250  char data_1005d250[0x5] = "1024", 0

1005d255                                                                 00 00 00                                               ...

1005d258  char data_1005d258[0x1c] = "empty console message heap\n", 0

1005d274                                                              00 00 00 00 00 00 00 00                                  ........
1005d27c  data_1005d27c:
1005d27c                                                                                      5d 0a 00 00                              ]...
1005d280  data_1005d280:
1005d280  2c 20 00 00                                                                                      , ..

1005d284  char data_1005d284[0xe] = "(\"%s\", %1.2f)", 0

1005d292                                                        00 00                                                        ..

1005d294  char data_1005d294[0x7] = "%d : [", 0

1005d29b                                                                                   00                                         .

1005d29c  char data_1005d29c[0xa] = "missing }", 0

1005d2a6                    00 00                                                                                ..

1005d2a8  char data_1005d2a8[0xe] = "unexpected %s", 0

1005d2b6                                                                    00 00                                                ..

1005d2b8  char data_1005d2b8[0x27] = "synonym must have at least to entries\n", 0

1005d2df                                                                                               00                                 .
1005d2e0  00 00 00 00 00 00 00 00                                                                          ........

1005d2e8  char data_1005d2e8[0xd] = "empty string", 0

1005d2f5                                                                 00 00 00                                               ...

1005d2f8  char data_1005d2f8[0xb] = "too many }", 0

1005d303           00 00 00 00 00                                                                             .....

1005d308  char data_1005d308[0x1c] = "more than 32 context levels", 0

1005d324              00 00 00 00 00 00 00 00                                                                  ........
1005d32c  data_1005d32c:
1005d32c                                      29 00 00 00                                                              )...
1005d330  data_1005d330:
1005d330                                                  2c 00 00 00                                                      ,...
1005d334  data_1005d334:
1005d334                                                              28 00 00 00                                              (...
1005d338  data_1005d338:
1005d338                                                                          7d 0a 00 00                                      }...

1005d33c  char data_1005d33c[0x5] = "\"%s\"", 0

1005d341     00 00 00                                                                                       ...

1005d344  char data_1005d344[0x7] = "%s = {", 0

1005d34b                                   00                                                                         .

1005d34c  char data_1005d34c[0x12] = "unknown random %s", 0

1005d35e                                                                                            00 00                                ..
1005d360  00 00 00 00                                                                                      ....
1005d364  g_default_config_table:
1005d364              3d 00 00 00                                                                              =...

1005d368  char data_1005d368[0xf] = " = (%d, %d);}\n", 0

1005d377                                                                       00 00 00 00 00                                     .....
1005d37c  data_1005d37c:
1005d37c                                                                                      25 64 00 00                              %d..
1005d380  data_1005d380:
1005d380  7c 00 00 00                                                                                      |...

1005d384  char data_1005d384[0x7] = "%8d { ", 0

1005d38b                                   00                                                                         .

1005d38c  char data_1005d38c[0x12] = "invalid token %s\n", 0

1005d39e                                                                                            00 00                                ..
1005d3a0  00 00 00 00                                                                                      ....

1005d3a4  char data_1005d3a4[0x29] = "can\'t have more than %d match variables\n", 0

1005d3cd                                         00 00 00 00 00 00 00 00 00 00 00                                       ...........

1005d3d8  char data_1005d3d8[0x28] = "not allowed to have adjacent variables\n", 0

1005d400  00 00 00 00 00 00 00 00                                                                          ........

1005d408  char data_1005d408[0x1c] = "expected integer, found %s\n", 0

1005d424              00 00 00 00 00 00 00 00                                                                  ........
1005d42c  data_1005d42c:
1005d42c                                      3b 00 00 00                                                              ;...

1005d430  char data_1005d430[0x29] = "BotMatchVariable: variable out of range\n", 0

1005d459                                                                             00 00 00 00 00 00 00                           .......
1005d460  00 00 00 00                                                                                      ....

1005d464  char data_1005d464[0x1d] = "%s = {\"%s\"} //MISSING RANDOM", 0

1005d481     00 00 00 00 00 00 00                                                                           .......

1005d488  char data_1005d488[0x40] = "BotCheckChatMessageIntegrety: message \"%s\" invalid escape char\n", 0

1005d4c8                          00 00 00 00 00 00 00 00 00 00 00 00                                              ............

1005d4d4  char data_1005d4d4[0x1e] = "unknown message component %s\n", 0

1005d4f2                                                        00 00 00 00 00 00                                            ......

1005d4f8  char data_1005d4f8[0x8] = "%cr%s%c", 0

1005d500  00 00 00 00                                                                                      ....

1005d504  char data_1005d504[0x8] = "%cv%d%c", 0

1005d50c                                      00 00 00 00                                                              ....

1005d510  char data_1005d510[0x8] = "\t\"%s\";\n", 0

1005d518                                                                          00 00 00 00                                      ....
1005d51c  data_1005d51c:
1005d51c                                                                                      7b 0a 00 00                              {...

1005d520  char data_1005d520[0xb] = "] = %1.0f\n", 0

1005d52b                                   00 00 00 00 00                                                             .....
1005d530  data_1005d530:
1005d530                                                  69 74 00 00                                                      it..

1005d534  char data_1005d534[0x5] = "male", 0

1005d539                                                                             00 00 00                                       ...

1005d53c  char data_1005d53c[0x7] = "female", 0

1005d543           00                                                                                         .
1005d544  data_1005d544:
1005d544              21 00 00 00                                                                              !...
1005d548  data_1005d548:
1005d548                          26 00 00 00                                                                      &...

1005d54c  char data_1005d54c[0x13] = "BotDumpReplyChat:\n", 0

1005d55f                                                                                               00                                 .
1005d560  00 00 00 00                                                                                      ....

1005d564  char data_1005d564[0xb] = "no rchats\n", 0

1005d56f                                               00 00 00 00 00                                                     .....

1005d574  char data_1005d574[0x15] = "expected [, found %s", 0

1005d589                             00 00 00 00 00 00 00                                                           .......
1005d590  data_1005d590:
1005d590                                                  20 7d 00 00                                                       }..

1005d594  char data_1005d594[0x7] = "  \"%s\"", 0

1005d59b                                                                                   00                                         .

1005d59c  char data_1005d59c[0x17] = "  numchatmessages = %d", 0

1005d5b3                                                           00 00 00 00 00                                             .....
1005d5b8  data_1005d5b8:
1005d5b8                                                                          20 7b 00 00                                       {..

1005d5bc  char data_1005d5bc[0xb] = " type \"%s\"", 0

1005d5c7                       00 00 00 00 00                                                                     .....

1005d5cc  char data_1005d5cc[0x1d] = "couldn\'t find chat %s in %s\n", 0

1005d5e9                             00 00 00 00 00 00 00                                                           .......

1005d5f0  char data_1005d5f0[0x18] = "expected type found %s\n", 0

1005d608                          00 00 00 00                                                                      ....

1005d60c  char data_1005d60c[0x5] = "chat", 0

1005d611                                                     00 00 00                                                       ...

1005d614  char data_1005d614[0x1f] = "couldn\'t load chat %s from %s\n", 0

1005d633                                                           00 00 00 00 00 00 00 00 00                                 .........

1005d63c  char data_1005d63c[0x29] = "BotConstructChat: message \"%s\" too long\n", 0

1005d665                 00 00 00 00 00 00 00 00 00 00 00                                                       ...........

1005d670  char data_1005d670[0x2c] = "BotConstructChat: unknown random string %s\n", 0

1005d69c                                                                                      00 00 00 00                              ....
1005d6a0  00 00 00 00                                                                                      ....

1005d6a4  char data_1005d6a4[0x27] = "BotConstructChat: message %s too long\n", 0

1005d6cb                                   00 00 00 00 00 00 00 00 00                                                 .........

1005d6d4  char data_1005d6d4[0x37] = "BotConstructChat: message %s variable %d out of range\n", 0

1005d70b                                   00 00 00 00 00 00 00 00 00 00 00 00 00                                     .............

1005d718  char data_1005d718[0x34] = "BotConstructChat: message \"%s\" invalid escape char\n", 0

1005d74c                                      00 00 00 00 00 00 00 00 00 00 00 00                                      ............

1005d758  char data_1005d758[0xa] = "rchatfile", 0

1005d762        00 00                                                                                        ..

1005d764  char data_1005d764[0x8] = "rchat.c", 0

1005d76c                                      00 00 00 00                                                              ....

1005d770  char data_1005d770[0xa] = "matchfile", 0

1005d77a                                                                                00 00                                        ..

1005d77c  char data_1005d77c[0x8] = "match.c", 0

1005d784              00 00 00 00                                                                              ....

1005d788  char data_1005d788[0x8] = "rndfile", 0

1005d790                                                  00 00 00 00                                                      ....

1005d794  char data_1005d794[0x6] = "rnd.c", 0

1005d79a                                                                                00 00                                        ..

1005d79c  char data_1005d79c[0x8] = "synfile", 0

1005d7a4              00 00 00 00                                                                              ....

1005d7a8  char data_1005d7a8[0x6] = "syn.c", 0

1005d7ae                                            00 00                                                                ..

1005d7b0  char (* data_1005d7b0)[0x5] = data_1005c1a0 {"name"}

1005d7b4                                                              00 00 00 00 04 00 00 00 00 00 00 00                      ............
1005d7c0  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005d7cc  char (* data_1005d7cc)[0x6] = data_1005ba78 {"model"}

1005d7d0                                                  a0 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00                  ................
1005d7e0  00 00 00 00 00 00 00 00                                                                          ........

1005d7e8  char (* data_1005d7e8)[0x5] = data_1005c184 {"type"}

1005d7ec                                      f4 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
1005d800  00 00 00 00                                                                                      ....

1005d804  char (* data_1005d804)[0x6] = data_1005d8e8 {"index"}

1005d808                          f8 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

1005d820  char (* data_1005d820)[0xc] = data_1005d8d8 {"respawntime"}

1005d824              fc 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ........................

1005d83c  char (* data_1005d83c)[0x5] = data_1005d8d0 {"mins"}

1005d840  00 01 00 00 03 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

1005d858  char (* data_1005d858)[0x5] = data_1005d8c8 {"maxs"}

1005d85c                                                                                      0c 01 00 00                              ....
1005d860  03 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005d880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................
1005d890  data_1005d890:
1005d890                                                  1c 01 00 00                                                      ....

1005d894  void* data_1005d894 = data_1005d7b0

1005d898                                                                          00 00 00 00 00 00 00 00                          ........
1005d8a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005d8c0  00 00 00 00 00 00 00 00                                                                          ........

1005d8c8  char data_1005d8c8[0x5] = "maxs", 0

1005d8cd                                         00 00 00                                                               ...

1005d8d0  char data_1005d8d0[0x5] = "mins", 0

1005d8d5                                                                 00 00 00                                               ...

1005d8d8  char data_1005d8d8[0xc] = "respawntime", 0

1005d8e4              00 00 00 00                                                                              ....

1005d8e8  char data_1005d8e8[0x6] = "index", 0

1005d8ee                                            00 00                                                                ..

1005d8f0  char data_1005d8f0[0x20] = "more than %d item info defined\n", 0

1005d910                                                  00 00 00 00 00 00 00 00                                          ........

1005d918  char data_1005d918[0x15] = "no item info loaded\n", 0

1005d92d                                         00 00 00 00 00 00 00                                                   .......

1005d934  char data_1005d934[0x9] = "iteminfo", 0

1005d93d                                                                                         00 00 00                               ...

1005d940  char data_1005d940[0x13] = "max_iteminfo = %d\n", 0

1005d953                                                           00 00 00 00 00                                             .....

1005d958  char data_1005d958[0xd] = "max_iteminfo", 0

1005d965                 00 00 00                                                                               ...

1005d968  char data_1005d968[0x26] = "item info %d \"%s\" has no fuzzy weight", 0

1005d98e                                            00 00 00 00 00 00 00 00 00 00                                        ..........

1005d998  char data_1005d998[0xf] = "max_levelitems", 0

1005d9a7                       00 00 00 00 00                                                                     .....
1005d9ac  data_1005d9ac:
1005d9ac                                      35 31 32 00                                                              512.

1005d9b0  char data_1005d9b0[0x14] = "out of level items\n", 0

1005d9c4              00 00 00 00                                                                              ....

1005d9c8  char data_1005d9c8[0x16] = "found %d level items\n", 0

1005d9de                                                                                            00 00                                ..
1005d9e0  00 00 00 00                                                                                      ....

1005d9e4  char data_1005d9e4[0x16] = "entity %s unkown item", 0

1005d9fa                                                                                00 00 00 00 00 00                            ......

1005da00  char data_1005da00[0x18] = "item %s without origin\n", 0

1005da18                                                                          00 00 00 00                                      ....

1005da1c  char data_1005da1c[0x19] = "item %s has modelindex 0", 0

1005da35                                                                 00 00 00 00 00 00 00                                   .......

1005da3c  char data_1005da3c[0xe] = "notspawnflags", 0

1005da4a                                00 00                                                                        ..

1005da4c  char data_1005da4c[0x5] = "2048", 0

1005da51                                                     00 00 00                                                       ...

1005da54  char data_1005da54[0x28] = "avoid goal %s, number %d for %f seconds", 0

1005da7c                                                                                      00 00 00 00                              ....
1005da80  00 00 00 00                                                                                      ....

1005da84  char data_1005da84[0x7] = "%d: %s", 0

1005da8b                                   00                                                                         .

1005da8c  char data_1005da8c[0x14] = "goal heap overflow\n", 0

1005daa0  00 00 00 00                                                                                      ....

1005daa4  char data_1005daa4[0x17] = "couldn\'t load weights\n", 0

1005dabb                                                                                   00 00 00 00 00                             .....

1005dac0  char data_1005dac0[0x1b] = "couldn\'t load item config\n", 0

1005dadb                                                                                   00 00 00 00 00                             .....

1005dae0  char data_1005dae0[0xb] = "itemconfig", 0

1005daeb                                   00 00 00 00 00                                                             .....

1005daf0  char data_1005daf0[0x8] = "items.c", 0

1005daf8                                                                          00 00 00 00                                      ....

1005dafc  char data_1005dafc[0x19] = "no entity with model %d\n", 0

1005db15                                                                 00 00 00 00 00 00 00                                   .......

1005db1c  char data_1005db1c[0x25] = "models/weapons/grapple/hook/tris.md2", 0

1005db41     00 00 00 00 00 00 00                                                                           .......

1005db48  char data_1005db48[0xa] = "laserhook", 0

1005db52                                                        00 00                                                        ..

1005db54  char data_1005db54[0x8] = "hookoff", 0

1005db5c                                                                                      00 00 00 00                              ....

1005db60  char data_1005db60[0x7] = "hookon", 0

1005db67                       00                                                                                 .

1005db68  char data_1005db68[0x24] = "travel type %d not implemented yet\n", 0

1005db8c                                      00 00 00 00 00 00 00 00                                                  ........

1005db94  char data_1005db94[0x2b] = "(last) travel type %d not implemented yet\n", 0

1005dbbf                                                                                               00                                 .
1005dbc0  00 00 00 00 00 00 00 00                                                                          ........

1005dbc8  char (* data_1005dbc8)[0x5] = data_1005c1a0 {"name"}

1005dbcc                                      04 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
1005dbe0  00 00 00 00                                                                                      ....

1005dbe4  char (* data_1005dbe4)[0x6] = data_1005e21c {"level"}

1005dbe8                          a4 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

1005dc00  char (* data_1005dc00)[0x6] = data_1005ba78 {"model"}

1005dc04              54 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  T.......................

1005dc1c  char (* data_1005dc1c)[0xc] = data_1005e20c {"weaponindex"}

1005dc20  a8 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

1005dc38  char (* data_1005dc38)[0x6] = data_1005e204 {"flags"}

1005dc3c                                                                                      ac 00 00 00                              ....
1005dc40  02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                      ....................

1005dc54  char (* data_1005dc54)[0xb] = data_1005e1f4 {"projectile"}

1005dc58                                                                          b0 00 00 00 04 00 00 00                          ........
1005dc60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

1005dc70  char (* data_1005dc70)[0xf] = data_1005e1e0 {"numprojectiles"}

1005dc74                                                              00 01 00 00 02 00 00 00 00 00 00 00                      ............
1005dc80  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005dc8c  char (* data_1005dc8c)[0x8] = data_1005e1d4 {"hspread"}

1005dc90                                                  04 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00                  ................
1005dca0  00 00 00 00 00 00 00 00                                                                          ........

1005dca8  char (* data_1005dca8)[0x8] = data_1005e1c8 {"vspread"}

1005dcac                                      08 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
1005dcc0  00 00 00 00                                                                                      ....

1005dcc4  char (* data_1005dcc4)[0x6] = data_1005ba18 {"speed"}

1005dcc8                          0c 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

1005dce0  char (* data_1005dce0)[0xd] = data_1005e1b8 {"acceleration"}

1005dce4              10 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ........................

1005dcfc  char (* data_1005dcfc)[0x7] = data_1005e1b0 {"recoil"}

1005dd00  14 01 00 00 03 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

1005dd18  char (* data_1005dd18)[0x7] = data_1005e1a8 {"offset"}

1005dd1c                                                                                      20 01 00 00                               ...
1005dd20  03 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                      ....................

1005dd34  char (* data_1005dd34)[0xc] = data_1005e198 {"angleoffset"}

1005dd38                                                                          2c 01 00 00 03 01 00 00                          ,.......
1005dd40  03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

1005dd50  char (* data_1005dd50)[0xf] = data_1005e184 {"extrazvelocity"}

1005dd54                                                              38 01 00 00 03 00 00 00 00 00 00 00                      8...........
1005dd60  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005dd6c  char (* data_1005dd6c)[0xb] = data_1005e174 {"ammoamount"}

1005dd70                                                  3c 01 00 00 02 00 00 00 00 00 00 00 00 00 00 00                  <...............
1005dd80  00 00 00 00 00 00 00 00                                                                          ........

1005dd88  char (* data_1005dd88)[0xa] = data_1005e168 {"ammoindex"}

1005dd8c                                      40 01 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              @...................
1005dda0  00 00 00 00                                                                                      ....

1005dda4  char (* data_1005dda4)[0x9] = data_1005e15c {"activate"}

1005dda8                          44 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          D.......................

1005ddc0  char (* data_1005ddc0)[0x7] = data_1005e154 {"reload"}

1005ddc4              48 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  H.......................

1005dddc  char (* data_1005dddc)[0x7] = data_1005e14c {"spinup"}

1005dde0  4c 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          L.......................

1005ddf8  char (* data_1005ddf8)[0x9] = data_1005e140 {"spindown"}

1005ddfc                                                                                      50 01 00 00                              P...
1005de00  03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005de20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

1005de30  char (* data_1005de30)[0x5] = data_1005c1a0 {"name"}

1005de34                                                              00 00 00 00 04 00 00 00 00 00 00 00                      ............
1005de40  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005de4c  char (* data_1005de4c)[0x6] = data_1005ba78 {"model"}

1005de50                                                  54 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00                  T...............
1005de60  00 00 00 00 00 00 00 00                                                                          ........

1005de68  char (* data_1005de68)[0x6] = data_1005e204 {"flags"}

1005de6c                                      a0 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
1005de80  00 00 00 00                                                                                      ....

1005de84  char (* data_1005de84)[0x8] = data_1005e134 {"gravity"}

1005de88                          a4 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

1005dea0  char (* data_1005dea0)[0x7] = data_1005e12c {"damage"}

1005dea4              a8 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ........................

1005debc  char (* data_1005debc)[0x7] = data_1005e124 {"radius"}

1005dec0  ac 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

1005ded8  char (* data_1005ded8)[0xa] = data_1005e118 {"visdamage"}

1005dedc                                                                                      b0 00 00 00                              ....
1005dee0  02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                      ....................

1005def4  char (* data_1005def4)[0xb] = data_1005e108 {"damagetype"}

1005def8                                                                          b4 00 00 00 02 00 00 00                          ........
1005df00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

1005df10  char (* data_1005df10)[0xa] = data_1005e0fc {"healthinc"}

1005df14                                                              b8 00 00 00 02 00 00 00 00 00 00 00                      ............
1005df20  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005df2c  char (* data_1005df2c)[0x5] = data_1005e0f4 {"push"}

1005df30                                                  bc 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00                  ................
1005df40  00 00 00 00 00 00 00 00                                                                          ........

1005df48  char (* data_1005df48)[0xb] = data_1005e0e4 {"detonation"}

1005df4c                                      c0 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
1005df60  00 00 00 00                                                                                      ....

1005df64  char (* data_1005df64)[0x7] = data_1005e0dc {"bounce"}

1005df68                          c4 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

1005df80  char (* data_1005df80)[0xb] = data_1005e0cc {"bouncefric"}

1005df84              c8 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ........................

1005df9c  char (* data_1005df9c)[0xb] = data_1005e0bc {"bouncestop"}

1005dfa0  cc 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005dfc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................
1005dfd8  data_1005dfd8:
1005dfd8                                                                          58 01 00 00                                      X...

1005dfdc  void* data_1005dfdc = data_1005dbc8

1005dfe0  data_1005dfe0:
1005dfe0  d0 00 00 00                                                                                      ....

1005dfe4  void* data_1005dfe4 = data_1005de30

1005dfe8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
1005e000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e0a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ............................

1005e0bc  char data_1005e0bc[0xb] = "bouncestop", 0

1005e0c7                       00 00 00 00 00                                                                     .....

1005e0cc  char data_1005e0cc[0xb] = "bouncefric", 0

1005e0d7                                                                       00 00 00 00 00                                     .....

1005e0dc  char data_1005e0dc[0x7] = "bounce", 0

1005e0e3           00                                                                                         .

1005e0e4  char data_1005e0e4[0xb] = "detonation", 0

1005e0ef                                               00 00 00 00 00                                                     .....

1005e0f4  char data_1005e0f4[0x5] = "push", 0

1005e0f9                                                                             00 00 00                                       ...

1005e0fc  char data_1005e0fc[0xa] = "healthinc", 0

1005e106                    00 00                                                                                ..

1005e108  char data_1005e108[0xb] = "damagetype", 0

1005e113                                                           00 00 00 00 00                                             .....

1005e118  char data_1005e118[0xa] = "visdamage", 0

1005e122        00 00                                                                                        ..

1005e124  char data_1005e124[0x7] = "radius", 0

1005e12b                                   00                                                                         .

1005e12c  char data_1005e12c[0x7] = "damage", 0

1005e133                                                           00                                                         .

1005e134  char data_1005e134[0x8] = "gravity", 0

1005e13c                                                                                      00 00 00 00                              ....

1005e140  char data_1005e140[0x9] = "spindown", 0

1005e149                             00 00 00                                                                       ...

1005e14c  char data_1005e14c[0x7] = "spinup", 0

1005e153                                                           00                                                         .

1005e154  char data_1005e154[0x7] = "reload", 0

1005e15b                                                                                   00                                         .

1005e15c  char data_1005e15c[0x9] = "activate", 0

1005e165                 00 00 00                                                                               ...

1005e168  char data_1005e168[0xa] = "ammoindex", 0

1005e172                                                        00 00                                                        ..

1005e174  char data_1005e174[0xb] = "ammoamount", 0

1005e17f                                                                                               00                                 .
1005e180  00 00 00 00                                                                                      ....

1005e184  char data_1005e184[0xf] = "extrazvelocity", 0

1005e193                                                           00 00 00 00 00                                             .....

1005e198  char data_1005e198[0xc] = "angleoffset", 0

1005e1a4              00 00 00 00                                                                              ....

1005e1a8  char data_1005e1a8[0x7] = "offset", 0

1005e1af                                               00                                                                 .

1005e1b0  char data_1005e1b0[0x7] = "recoil", 0

1005e1b7                                                                       00                                                 .

1005e1b8  char data_1005e1b8[0xd] = "acceleration", 0

1005e1c5                 00 00 00                                                                               ...

1005e1c8  char data_1005e1c8[0x8] = "vspread", 0

1005e1d0                                                  00 00 00 00                                                      ....

1005e1d4  char data_1005e1d4[0x8] = "hspread", 0

1005e1dc                                                                                      00 00 00 00                              ....

1005e1e0  char data_1005e1e0[0xf] = "numprojectiles", 0

1005e1ef                                               00 00 00 00 00                                                     .....

1005e1f4  char data_1005e1f4[0xb] = "projectile", 0

1005e1ff                                                                                               00                                 .
1005e200  00 00 00 00                                                                                      ....

1005e204  char data_1005e204[0x6] = "flags", 0

1005e20a                                00 00                                                                        ..

1005e20c  char data_1005e20c[0xc] = "weaponindex", 0

1005e218                                                                          00 00 00 00                                      ....

1005e21c  char data_1005e21c[0x6] = "level", 0

1005e222        00 00                                                                                        ..

1005e224  char data_1005e224[0x2b] = "weapon %s uses undefined projectile in %s\n", 0

1005e24f                                               00 00 00 00 00 00 00 00 00                                         .........

1005e258  char data_1005e258[0x23] = "weapon %s has no projectile in %s\n", 0

1005e27b                                                                                   00 00 00 00 00                             .....
1005e280  00 00 00 00                                                                                      ....

1005e284  char data_1005e284[0x1d] = "weapon %d has no name in %s\n", 0

1005e2a1     00 00 00 00 00 00 00                                                                           .......

1005e2a8  char data_1005e2a8[0x17] = "no weapon info loaded\n", 0

1005e2bf                                                                                               00                                 .
1005e2c0  00 00 00 00                                                                                      ....

1005e2c4  char data_1005e2c4[0x1d] = "unknown definition %s in %s\n", 0

1005e2e1     00 00 00 00 00 00 00                                                                           .......

1005e2e8  char data_1005e2e8[0x28] = "more than %d projectiles defined in %s\n", 0

1005e310                                                  00 00 00 00 00 00 00 00                                          ........

1005e318  char data_1005e318[0x24] = "more than %d weapons defined in %s\n", 0

1005e33c                                                                                      00 00 00 00                              ....
1005e340  00 00 00 00                                                                                      ....

1005e344  char data_1005e344[0xf] = "projectileinfo", 0

1005e353                                                           00 00 00 00 00                                             .....

1005e358  char data_1005e358[0xb] = "weaponinfo", 0

1005e363           00 00 00 00 00                                                                             .....

1005e368  char data_1005e368[0x19] = "max_projectileinfo = %d\n", 0

1005e381     00 00 00 00 00 00 00                                                                           .......

1005e388  char data_1005e388[0x13] = "max_projectileinfo", 0

1005e39b                                                                                   00 00 00 00 00                             .....

1005e3a0  char data_1005e3a0[0x15] = "max_weaponinfo = %d\n", 0

1005e3b5                                                                 00 00 00 00 00 00 00                                   .......

1005e3bc  char data_1005e3bc[0xf] = "max_weaponinfo", 0

1005e3cb                                   00 00 00 00 00                                                             .....
1005e3d0  data_1005e3d0:
1005e3d0                                                  33 32 00 00                                                      32..

1005e3d4  char data_1005e3d4[0x20] = "couldn\'t load weapon config %s\n", 0

1005e3f4                                                              00 00 00 00 00 00 00 00                                  ........

1005e3fc  char data_1005e3fc[0xf] = "unknown weapon", 0

1005e40b                                   00 00 00 00 00                                                             .....

1005e410  char data_1005e410[0x21] = "couldn\'t load the weapon config\n", 0

1005e431                                                     00 00 00 00 00 00 00                                           .......

1005e438  char data_1005e438[0xd] = "weaponconfig", 0

1005e445                 00 00 00                                                                               ...

1005e448  char data_1005e448[0xa] = "weapons.c", 0

1005e452                                                        00 00                                                        ..

1005e454  char data_1005e454[0x19] = "invalid return value %s\n", 0

1005e46d                                         00 00 00 00 00 00 00                                                   .......

1005e474  char data_1005e474[0x1c] = "negative value set to zero\n", 0

1005e490                                                  00 00 00 00 00 00 00 00                                          ........

1005e498  int16_t data_1005e498 = 0x2d

1005e49a                                                                                00 00                                        ..

1005e49c  char data_1005e49c[0x8] = "balance", 0

1005e4a4              00 00 00 00                                                                              ....

1005e4a8  char data_1005e4a8[0x18] = "switch without default\n", 0

1005e4c0  00 00 00 00                                                                                      ....

1005e4c4  char data_1005e4c4[0x1e] = "switch already has a default\n", 0

1005e4e2        00 00 00 00 00 00                                                                            ......

1005e4e8  char data_1005e4e8[0x11] = "invalid name %s\n", 0

1005e4f9                                                                             00 00 00                                       ...

1005e4fc  char data_1005e4fc[0x7] = "switch", 0

1005e503           00                                                                                         .

1005e504  char data_1005e504[0x7] = "return", 0

1005e50b                                   00                                                                         .

1005e50c  char data_1005e50c[0x5] = "case", 0

1005e511                                                     00 00 00                                                       ...

1005e514  char data_1005e514[0x8] = "default", 0

1005e51c                                                                                      00 00 00 00                              ....

1005e520  char data_1005e520[0x18] = "too many fuzzy weights\n", 0

1005e538                                                                          00 00 00 00                                      ....

1005e53c  char data_1005e53c[0x7] = "weight", 0

1005e543           00                                                                                         .
1005e544  data_1005e544:
1005e544              3b 0a 00 00                                                                              ;...

1005e548  char data_1005e548[0x9] = " return ", 0

1005e551                                                     00 00 00                                                       ...
1005e554  data_1005e554:
1005e554                                                              29 3b 0a 00                                              );..

1005e558  char data_1005e558[0x11] = " return balance(", 0

1005e569                             00 00 00                                                                       ...

1005e56c  char data_1005e56c[0x10] = "} //end switch\n", 0

1005e57c                                                                                      00 00 00 00                              ....

1005e580  char data_1005e580[0x11] = "} //end default\n", 0

1005e591                                                     00 00 00                                                       ...

1005e594  char data_1005e594[0xe] = "} //end case\n", 0

1005e5a2        00 00                                                                                        ..

1005e5a4  char data_1005e5a4[0x9] = "default:", 0

1005e5ad                                         00 00 00                                                               ...

1005e5b0  char data_1005e5b0[0x9] = "case %d:", 0

1005e5b9                                                                             00 00 00                                       ...

1005e5bc  char data_1005e5bc[0xc] = "switch(%d)\n", 0

1005e5c8                          00 00 00 00                                                                      ....

1005e5cc  char data_1005e5cc[0x14] = "} //end itemweight\n", 0

1005e5e0  00 00 00 00                                                                                      ....

1005e5e4  char data_1005e5e4[0xe] = "\nweight \"%s\"\n", 0

1005e5f2                                                        00 00                                                        ..

1005e5f4  char data_1005e5f4[0x1c] = "can\'t merge weight configs\n", 0

1005e610                                                  00 00 00 00 00 00 00 00                                          ........
1005e618  data_1005e618:
1005e618                                                                          73 61 79 00                                      say.

1005e61c  char data_1005e61c[0x9] = "say_team", 0

1005e625                 00 00 00                                                                               ...
1005e628  data_1005e628:
1005e628                          75 73 65 00                                                                      use.

1005e62c  char data_1005e62c[0x5] = "drop", 0

1005e631                                                     00 00 00                                                       ...

1005e634  char data_1005e634[0x7] = "invuse", 0

1005e63b                                                                                   00                                         .

1005e63c  char data_1005e63c[0x8] = "invdrop", 0

1005e644              00 00 00 00                                                                              ....

1005e648  char data_1005e648[0x5] = "wave", 0

1005e64d                                         00 00 00                                                               ...

1005e650  char data_1005e650[0x1f] = "EA_Command: too many arguments", 0

1005e66f                                               00 00 00 00 00 00 00 00 00                                         .........
1005e678  data_1005e678:
1005e678                                                                          91 a9 00 00 01 00 00 00                          ........
1005e680  57 a7 00 00 01 00 00 00 67 72 00 00 01 00 00 00 0d 7a 00 00 01 00 00 00 7c 93 00 00 01 00 00 00  W.......gr.......z......|.......
1005e6a0  9b cf 00 00 01 00 00 00 61 c6 00 00 01 00 00 00 a3 aa 00 00 01 00 00 00 95 97 00 00 01 00 00 00  ........a.......................
1005e6c0  59 9c 00 00 01 00 00 00 28 25 00 00 01 00 00 00 b2 55 00 00 01 00 00 00 9d 87 00 00 01 00 00 00  Y.......(%.......U..............
1005e6e0  75 ae 00 00 01 00 00 00 12 e5 00 00 01 00 00 00 8b 21 00 00 01 00 00 00 97 8e 00 00 01 00 00 00  u................!..............
1005e700  37 74 00 00 01 00 00 00 e2 0a 00 00 01 00 00 00 c1 07 00 00 01 00 00 00 ad 5c 00 00 01 00 00 00  7t.......................\......
1005e720  d6 74 00 00 01 00 00 00 4a 69 00 00 01 00 00 00 67 0e 00 00 01 00 00 00 c4 f2 00 00 01 00 00 00  .t......Ji......g...............
1005e740  92 eb 00 00 01 00 00 00 22 63 00 00 01 00 00 00 a5 b8 00 00 01 00 00 00 cc e1 00 00 01 00 00 00  ........"c......................
1005e760  75 4e 00 00 01 00 00 00 b0 2b 00 00 01 00 00 00 4f c5 00 00 01 00 00 00 d2 cd 00 00 01 00 00 00  uN.......+......O...............
1005e780  83 dd 00 00 01 00 00 00 a7 0c 00 00 01 00 00 00 7e 10 00 00 01 00 00 00 74 28 00 00 01 00 00 00  ................~.......t(......
1005e7a0  27 ce 00 00 01 00 00 00 dc da 00 00 01 00 00 00 a9 97 00 00 01 00 00 00 4b a8 00 00 01 00 00 00  '.......................K.......
1005e7c0  fc 36 00 00 01 00 00 00 da 90 00 00 01 00 00 00 14 52 00 00 01 00 00 00 14 d7 00 00 01 00 00 00  .6...............R..............
1005e7e0  84 93 00 00 01 00 00 00 90 64 00 00 01 00 00 00 17 16 00 00 01 00 00 00 13 71 00 00 01 00 00 00  .........d...............q......
1005e800  fe ce 00 00 01 00 00 00 e6 60 00 00 01 00 00 00 50 1f 00 00 01 00 00 00 f8 c7 00 00 01 00 00 00  .........`......P...............
1005e820  8b 56 00 00 01 00 00 00 f6 7c 00 00 01 00 00 00 17 0a 00 00 01 00 00 00 91 54 00 00 01 00 00 00  .V.......|...............T......
1005e840  20 29 00 00 01 00 00 00 38 c4 00 00 01 00 00 00 79 b3 00 00 01 00 00 00 18 34 00 00 01 00 00 00   )......8.......y........4......
1005e860  0b ac 00 00 06 00 00 00 fb 35 00 00 06 00 00 00 c8 5f 00 00 06 00 00 00 86 a4 00 00 06 00 00 00  .........5......._..............
1005e880  af 9a 00 00 06 00 00 00 c2 20 00 00 06 00 00 00 60 fb 00 00 06 00 00 00 de 4f 00 00 06 00 00 00  ......... ......`........O......
1005e8a0  ab f0 00 00 04 00 00 00 d4 a9 00 00 04 00 00 00 88 df 00 00 04 00 00 00 cc e5 00 00 04 00 00 00  ................................
1005e8c0  d6 0e 00 00 04 00 00 00 e0 8b 00 00 06 00 00 00 36 a2 00 00 06 00 00 00 cb 0b 00 00 06 00 00 00  ................6...............
1005e8e0  7c cc 00 00 06 00 00 00 22 3e 00 00 06 00 00 00 04 0e 00 00 06 00 00 00 78 45 00 00 06 00 00 00  |.......">..............xE......
1005e900  3f 34 00 00 06 00 00 00 11 fe 00 00 40 00 00 00 2e 8c 00 00 40 00 00 00 65 c6 00 00 40 00 00 00  ?4..........@.......@...e...@...
1005e920  c0 8a 00 00 03 00 00 00 b7 b1 00 00 06 00 00 00 8e 6a 00 00 08 00 00 00 f3 8d 00 00 08 00 00 00  .................j..............
1005e940  7d bc 00 00 08 00 00 00 88 e4 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  }........... ...................
1005e960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e9a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e9c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005e9e0  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1005e9ec  char data_1005e9ec[0x13] = "\t{0x%04X, 1}, //%s", 0

1005e9ff                                                                                               00                                 .
1005ea00  00 00 00 00                                                                                      ....

1005ea04  char data_1005ea04[0x27] = "%s: invalid client number %d, [0, %d]\n", 0

1005ea2b                                   00 00 00 00 00 00 00 00 00                                                 .........

1005ea34  char data_1005ea34[0x27] = "%s: invalid entity number %d, [0, %d]\n", 0

1005ea5b                                                                                   00 00 00 00 00                             .....
1005ea60  00 00 00 00                                                                                      ....

1005ea64  char data_1005ea64[0x29] = "%s: bot library used before being setup\n", 0

1005ea8d                                         00 00 00 00 00 00 00 00 00 00 00                                       ...........

1005ea98  char data_1005ea98[0xd] = "BotLib v0.96", 0

1005eaa5                 00 00 00                                                                               ...

1005eaa8  char data_1005eaa8[0x10] = "sv_maxwaterjump", 0

1005eab8                                                                          00 00 00 00                                      ....
1005eabc  data_1005eabc:
1005eabc                                                                                      32 31 00 00                              21..

1005eac0  char data_1005eac0[0xb] = "sv_jumpvel", 0

1005eacb                                   00 00 00 00 00                                                             .....
1005ead0  data_1005ead0:
1005ead0                                                  32 32 34 00                                                      224.

1005ead4  char data_1005ead4[0x10] = "sv_maxsteepness", 0

1005eae4              00 00 00 00                                                                              ....
1005eae8  data_1005eae8:
1005eae8                          30 2e 37 00                                                                      0.7.

1005eaec  char data_1005eaec[0xe] = "sv_maxbarrier", 0

1005eafa                                                                                00 00                                        ..
1005eafc  data_1005eafc:
1005eafc                                                                                      35 30 00 00                              50..

1005eb00  char data_1005eb00[0x8] = "sv_step", 0

1005eb08                          00 00 00 00                                                                      ....
1005eb0c  data_1005eb0c:
1005eb0c                                      31 38 00 00                                                              18..

1005eb10  char data_1005eb10[0x11] = "sv_airaccelerate", 0

1005eb21     00 00 00                                                                                       ...

1005eb24  char data_1005eb24[0x13] = "sv_maxacceleration", 0

1005eb37                                                                       00 00 00 00 00                                     .....

1005eb3c  char data_1005eb3c[0x5] = "2200", 0

1005eb41     00 00 00                                                                                       ...

1005eb44  char data_1005eb44[0x13] = "sv_maxswimvelocity", 0

1005eb57                                                                       00 00 00 00 00                                     .....
1005eb5c  data_1005eb5c:
1005eb5c                                                                                      31 35 30 00                              150.

1005eb60  char data_1005eb60[0x15] = "sv_maxcrouchvelocity", 0

1005eb75                                                                 00 00 00 00 00 00 00                                   .......

1005eb7c  char data_1005eb7c[0x13] = "sv_maxwalkvelocity", 0

1005eb8f                                               00 00 00 00 00                                                     .....

1005eb94  char data_1005eb94[0xf] = "sv_maxvelocity", 0

1005eba3           00 00 00 00 00                                                                             .....
1005eba8  data_1005eba8:
1005eba8                          33 30 30 00                                                                      300.

1005ebac  char data_1005ebac[0x10] = "sv_watergravity", 0

1005ebbc                                                                                      00 00 00 00                              ....
1005ebc0  data_1005ebc0:
1005ebc0  34 30 30 00                                                                                      400.

1005ebc4  char data_1005ebc4[0x11] = "sv_waterfriction", 0

1005ebd5                                                                 00 00 00                                               ...

1005ebd8  char data_1005ebd8[0xb] = "sv_gravity", 0

1005ebe3           00 00 00 00 00                                                                             .....
1005ebe8  data_1005ebe8:
1005ebe8                          38 30 30 00                                                                      800.

1005ebec  char data_1005ebec[0xd] = "sv_stopspeed", 0

1005ebf9                                                                             00 00 00                                       ...

1005ebfc  char data_1005ebfc[0xc] = "sv_friction", 0

1005ec08                          00 00 00 00                                                                      ....
1005ec0c  data_1005ec0c:
1005ec0c                                      36 00 00 00                                                              6...

1005ec10  char data_1005ec10[0x27] = "-------------------------------------\n", 0

1005ec37                                                                       00 00 00 00 00 00 00 00 00                         .........

1005ec40  char data_1005ec40[0xc] = "maxentities", 0

1005ec4c                                      00 00 00 00                                                              ....

1005ec50  char data_1005ec50[0xb] = "maxclients", 0

1005ec5b                                                                                   00 00 00 00 00                             .....
1005ec60  data_1005ec60:
1005ec60  34 00 00 00                                                                                      4...

1005ec64  char data_1005ec64[0xe] = "BotLib v0.96\n", 0

1005ec72                                                        00 00                                                        ..

1005ec74  char data_1005ec74[0x27] = "------- BotLib Initialization -------\n", 0

1005ec9b                                                                                   00 00 00 00 00                             .....
1005eca0  00 00 00 00                                                                                      ....

1005eca4  char data_1005eca4[0xb] = "botlib.log", 0

1005ecaf                                               00 00 00 00 00                                                     .....

1005ecb4  char data_1005ecb4[0x1b] = "bot library already setup\n", 0

1005eccf                                               00 00 00 00 00                                                     .....

1005ecd4  char data_1005ecd4[0x1e] = "bot library already shutdown\n", 0

1005ecf2                                                        00 00 00 00 00 00                                            ......

1005ecf8  char data_1005ecf8[0x18] = "couldn\'t add define %s\n", 0

1005ed10                                                  00 00 00 00                                                      ....

1005ed14  char data_1005ed14[0x27] = "------------ Map Loading ------------\n", 0

1005ed3b                                                                                   00 00 00 00 00                             .....
1005ed40  00 00 00 00                                                                                      ....

1005ed44  char data_1005ed44[0xb] = "BotLoadMap", 0

1005ed4f                                               00 00 00 00 00                                                     .....

1005ed54  char data_1005ed54[0xf] = "BotSetupClient", 0

1005ed63           00 00 00 00 00                                                                             .....

1005ed68  char data_1005ed68[0x12] = "BotShutdownClient", 0

1005ed7a                                                                                00 00 00 00 00 00                            ......

1005ed80  char data_1005ed80[0x15] = "BotMoveClient, parm1", 0

1005ed95                                                                 00 00 00 00 00 00 00                                   .......

1005ed9c  char data_1005ed9c[0x15] = "BotMoveClient, parm0", 0

1005edb1                                                     00 00 00 00 00 00 00                                           .......

1005edb8  char data_1005edb8[0xe] = "BotMoveClient", 0

1005edc6                    00 00                                                                                ..

1005edc8  char data_1005edc8[0x12] = "BotClientSettings", 0

1005edda                                                                                00 00 00 00 00 00                            ......

1005ede0  char data_1005ede0[0xc] = "BotSettings", 0

1005edec                                      00 00 00 00                                                              ....

1005edf0  char data_1005edf0[0xe] = "BotStartFrame", 0

1005edfe                                                                                            00 00                                ..

1005ee00  char data_1005ee00[0x10] = "BotUpdateClient", 0

1005ee10                                                  00 00 00 00                                                      ....

1005ee14  char data_1005ee14[0x10] = "BotUpdateEntity", 0

1005ee24              00 00 00 00                                                                              ....

1005ee28  char data_1005ee28[0xf] = "BotUpdateSound", 0

1005ee37                                                                       00 00 00 00 00                                     .....

1005ee3c  char data_1005ee3c[0x11] = "BotAddPointLight", 0

1005ee4d                                         00 00 00                                                               ...

1005ee50  char data_1005ee50[0x6] = "BotAI", 0

1005ee56                                                                    00 00                                                ..

1005ee58  char data_1005ee58[0x12] = "BotConsoleMessage", 0

1005ee6a                                00 00 00 00 00 00                                                            ......
1005ee70  data_1005ee70:
1005ee70                                                  00 00 21 10 42 20 63 30 84 40 a5 50 c6 60 e7 70                  ..!.B c0.@.P.`.p
1005ee80  08 81 29 91 4a a1 6b b1 8c c1 ad d1 ce e1 ef f1 31 12 10 02 73 32 52 22 b5 52 94 42 f7 72 d6 62  ..).J.k.........1...s2R".R.B.r.b
1005eea0  39 93 18 83 7b b3 5a a3 bd d3 9c c3 ff f3 de e3 62 24 43 34 20 04 01 14 e6 64 c7 74 a4 44 85 54  9...{.Z.........b$C4 ....d.t.D.T
1005eec0  6a a5 4b b5 28 85 09 95 ee e5 cf f5 ac c5 8d d5 53 36 72 26 11 16 30 06 d7 76 f6 66 95 56 b4 46  j.K.(...........S6r&..0..v.f.V.F
1005eee0  5b b7 7a a7 19 97 38 87 df f7 fe e7 9d d7 bc c7 c4 48 e5 58 86 68 a7 78 40 08 61 18 02 28 23 38  [.z...8..........H.X.h.x@.a..(#8
1005ef00  cc c9 ed d9 8e e9 af f9 48 89 69 99 0a a9 2b b9 f5 5a d4 4a b7 7a 96 6a 71 1a 50 0a 33 3a 12 2a  ........H.i...+..Z.J.z.jq.P.3:.*
1005ef20  fd db dc cb bf fb 9e eb 79 9b 58 8b 3b bb 1a ab a6 6c 87 7c e4 4c c5 5c 22 2c 03 3c 60 0c 41 1c  ........y.X.;....l.|.L.\",.<`.A.
1005ef40  ae ed 8f fd ec cd cd dd 2a ad 0b bd 68 8d 49 9d 97 7e b6 6e d5 5e f4 4e 13 3e 32 2e 51 1e 70 0e  ........*...h.I..~.n.^.N.>2.Q.p.
1005ef60  9f ff be ef dd df fc cf 1b bf 3a af 59 9f 78 8f 88 91 a9 81 ca b1 eb a1 0c d1 2d c1 4e f1 6f e1  ..........:.Y.x...........-.N.o.
1005ef80  80 10 a1 00 c2 30 e3 20 04 50 25 40 46 70 67 60 b9 83 98 93 fb a3 da b3 3d c3 1c d3 7f e3 5e f3  .....0. .P%@Fpg`........=.....^.
1005efa0  b1 02 90 12 f3 22 d2 32 35 42 14 52 77 62 56 72 ea b5 cb a5 a8 95 89 85 6e f5 4f e5 2c d5 0d c5  .....".25B.RwbVr........n.O.,...
1005efc0  e2 34 c3 24 a0 14 81 04 66 74 47 64 24 54 05 44 db a7 fa b7 99 87 b8 97 5f e7 7e f7 1d c7 3c d7  .4.$....ftGd$T.D........_.~...<.
1005efe0  d3 26 f2 36 91 06 b0 16 57 66 76 76 15 46 34 56 4c d9 6d c9 0e f9 2f e9 c8 99 e9 89 8a b9 ab a9  .&.6....Wfvv.F4VL.m.../.........
1005f000  44 58 65 48 06 78 27 68 c0 18 e1 08 82 38 a3 28 7d cb 5c db 3f eb 1e fb f9 8b d8 9b bb ab 9a bb  DXeH.x'h.....8.(}.\.?...........
1005f020  75 4a 54 5a 37 6a 16 7a f1 0a d0 1a b3 2a 92 3a 2e fd 0f ed 6c dd 4d cd aa bd 8b ad e8 9d c9 8d  uJTZ7j.z.....*.:....l.M.........
1005f040  26 7c 07 6c 64 5c 45 4c a2 3c 83 2c e0 1c c1 0c 1f ef 3e ff 5d cf 7c df 9b af ba bf d9 8f f8 9f  &|.ld\EL.<.,......>.].|.........
1005f060  17 6e 36 7e 55 4e 74 5e 93 2e b2 3e d1 0e f0 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .n6~UNt^...>....................
1005f080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005f0a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005f0c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

1005f0d8  char data_1005f0d8[0x14] = "openlog <filename>\n", 0

1005f0ec                                      00 00 00 00                                                              ....

1005f0f0  char data_1005f0f0[0xf] = "Opened log %s\n", 0

1005f0ff                                                                                               00                                 .
1005f100  00 00 00 00                                                                                      ....

1005f104  char data_1005f104[0x1c] = "can\'t open the log file %s\n", 0

1005f120  00 00 00 00 00 00 00 00                                                                          ........

1005f128  char data_1005f128[0x1f] = "log file %s is already opened\n", 0

1005f147                       00 00 00 00 00 00 00 00 00                                                         .........
1005f150  data_1005f150:
1005f150                                                  6c 6f 67 00                                                      log.

1005f154  char data_1005f154[0xf] = "Closed log %s\n", 0

1005f163           00 00 00 00 00                                                                             .....

1005f168  char data_1005f168[0x19] = "can\'t close log file %s\n", 0

1005f181     00 00 00 00 00 00 00                                                                           .......
1005f188  data_1005f188:
1005f188                          0d 0a 00 00                                                                      ....

1005f18c  char data_1005f18c[0x1c] = "%d   %02d:%02d:%02d:%02d   ", 0

1005f1a8                          00 00 00 00 00 00 00 00                                                          ........

1005f1b0  char data_1005f1b0[0x22] = "%s: memory block pointer invalid\n", 0

1005f1d2                                                        00 00 00 00 00 00                                            ......

1005f1d8  char data_1005f1d8[0x1a] = "%s: invalid memory block\n", 0

1005f1f2                                                        00 00 00 00 00 00                                            ......

1005f1f8  char data_1005f1f8[0xb] = "FreeMemory", 0

1005f203           00 00 00 00 00                                                                             .....

1005f208  char data_1005f208[0xf] = "MemoryByteSize", 0

1005f217                                                                       00 00 00 00 00                                     .....

1005f21c  char data_1005f21c[0x19] = "total memory blocks: %d\n", 0

1005f235                                                                 00 00 00 00 00 00 00                                   .......

1005f23c  char data_1005f23c[0x1c] = "total botlib memory: %d KB\n", 0

1005f258                                                                          00 00 00 00 00 00 00 00                          ........

1005f260  void* data_1005f260 = 0x1005f45c
1005f264  void* data_1005f264 = j_sub_1003ccb0
1005f268  char (* data_1005f268)[0x6] = data_1005f454 {"ifdef"}
1005f26c  void* data_1005f26c = j_sub_1003b7b0
1005f270  char (* data_1005f270)[0x7] = data_1005f44c {"ifndef"}
1005f274  void* data_1005f274 = j_sub_1003b7d0
1005f278  char (* data_1005f278)[0x5] = data_1005f444 {"elif"}
1005f27c  void* data_1005f27c = j_sub_1003cc10
1005f280  char (* data_1005f280)[0x5] = data_1005f43c {"else"}
1005f284  void* data_1005f284 = j_sub_1003b7f0
1005f288  char (* data_1005f288)[0x6] = data_1005f434 {"endif"}
1005f28c  void* data_1005f28c = j_sub_1003b880
1005f290  char (* data_1005f290)[0x8] = data_1005f428 {"include"}
1005f294  void* data_1005f294 = j_sub_1003a7a0
1005f298  char (* data_1005f298)[0x7] = data_1005f420 {"define"}
1005f29c  void* data_1005f29c = j_sub_1003ade0
1005f2a0  char (* data_1005f2a0)[0x6] = data_1005f418 {"undef"}
1005f2a4  void* data_1005f2a4 = j_sub_1003ac30
1005f2a8  char (* data_1005f2a8)[0x5] = data_1005f410 {"line"}
1005f2ac  void* data_1005f2ac = j_sub_1003cd00
1005f2b0  char (* data_1005f2b0)[0x6] = data_1005f408 {"error"}
1005f2b4  void* data_1005f2b4 = j_sub_1003cd30
1005f2b8  char (* data_1005f2b8)[0x7] = data_1005f400 {"pragma"}
1005f2bc  void* data_1005f2bc = j_sub_1003cd80
1005f2c0  char (* data_1005f2c0)[0x5] = data_1005f3f8 {"eval"}
1005f2c4  void* data_1005f2c4 = j_sub_1003ce90
1005f2c8  char (* data_1005f2c8)[0xa] = data_1005f3ec {"evalfloat"}
1005f2cc  void* data_1005f2cc = j_sub_1003cf80

1005f2d0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
1005f2e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

1005f300  char (* data_1005f300)[0x8] = data_1005f3e0 {"evalint"}
1005f304  void* data_1005f304 = j_sub_1003d1d0
1005f308  char (* data_1005f308)[0xa] = data_1005f3ec {"evalfloat"}
1005f30c  void* data_1005f30c = j_sub_1003d2f0

1005f310                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
1005f320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005f340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005f360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005f380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005f3a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1005f3c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

1005f3e0  char data_1005f3e0[0x8] = "evalint", 0

1005f3e8                          00 00 00 00                                                                      ....

1005f3ec  char data_1005f3ec[0xa] = "evalfloat", 0

1005f3f6                                                                    00 00                                                ..

1005f3f8  char data_1005f3f8[0x5] = "eval", 0

1005f3fd                                                                                         00 00 00                               ...

1005f400  char data_1005f400[0x7] = "pragma", 0

1005f407                       00                                                                                 .

1005f408  char data_1005f408[0x6] = "error", 0

1005f40e                                            00 00                                                                ..

1005f410  char data_1005f410[0x5] = "line", 0

1005f415                                                                 00 00 00                                               ...

1005f418  char data_1005f418[0x6] = "undef", 0

1005f41e                                                                                            00 00                                ..

1005f420  char data_1005f420[0x7] = "define", 0

1005f427                       00                                                                                 .

1005f428  char data_1005f428[0x8] = "include", 0

1005f430                                                  00 00 00 00                                                      ....

1005f434  char data_1005f434[0x6] = "endif", 0

1005f43a                                                                                00 00                                        ..

1005f43c  char data_1005f43c[0x5] = "else", 0

1005f441     00 00 00                                                                                       ...

1005f444  char data_1005f444[0x5] = "elif", 0

1005f449                             00 00 00                                                                       ...

1005f44c  char data_1005f44c[0x7] = "ifndef", 0

1005f453                                                           00                                                         .

1005f454  char data_1005f454[0x6] = "ifdef", 0

1005f45a                                                                                00 00 69 66 00 00                            ..if..

1005f460  char data_1005f460[0x16] = "file %s, line %d: %s\n", 0

1005f476                                                                    00 00 00 00 00 00                                    ......

1005f47c  char data_1005f47c[0x18] = "%s recursively included", 0

1005f494                                                              00 00 00 00                                              ....

1005f498  char data_1005f498[0xf] = "missing #endif", 0

1005f4a7                       00 00 00 00 00                                                                     .....

1005f4ac  char data_1005f4ac[0x15] = "define %s incomplete", 0

1005f4c1     00 00 00 00 00 00 00                                                                           .......

1005f4c8  char data_1005f4c8[0x1d] = "define %s has too many parms", 0

1005f4e5                 00 00 00 00 00 00 00                                                                   .......

1005f4ec  char data_1005f4ec[0x1e] = "define %s with too many parms", 0

1005f50a                                00 00 00 00 00 00                                                            ......

1005f510  char data_1005f510[0x15] = "too few define parms", 0

1005f525                 00 00 00 00 00 00 00                                                                   .......

1005f52c  char data_1005f52c[0x11] = "too many comma\'s", 0

1005f53d                                                                                         00 00 00                               ...

1005f540  char data_1005f540[0x24] = "define with more than %d parameters", 0

1005f564              00 00 00 00 00 00 00 00                                                                  ........

1005f56c  char data_1005f56c[0x18] = "define %s missing parms", 0

1005f584              00 00 00 00                                                                              ....

1005f588  int16_t data_1005f588 = 0x22

1005f58a                                00 00                                                                        ..

1005f58c  char data_1005f58c[0x9] = "__TIME__", 0

1005f595                                                                 00 00 00                                               ...

1005f598  char data_1005f598[0x9] = "__DATE__", 0

1005f5a1     00 00 00                                                                                       ...

1005f5a4  char data_1005f5a4[0x9] = "__FILE__", 0

1005f5ad                                         00 00 00                                                               ...

1005f5b0  char data_1005f5b0[0x9] = "__LINE__", 0

1005f5b9                                                                             00 00 00                                       ...

1005f5bc  char data_1005f5bc[0x17] = "can\'t merge %s with %s", 0

1005f5d3                                                           00 00 00 00 00                                             .....

1005f5d8  char data_1005f5d8[0x17] = "can\'t stringize tokens", 0

1005f5ef                                               00 00 00 00 00                                                     .....
1005f5f4  data_1005f5f4:
1005f5f4                                                              23 23 00 00                                              ##..

1005f5f8  char data_1005f5f8[0x2e] = "stringizing operator without define parameter", 0

1005f626                    00 00 00 00 00 00 00 00 00 00                                                        ..........
1005f630  data_1005f630:
1005f630                                                  23 00 00 00                                                      #...

1005f634  char data_1005f634[0x1b] = "#include without file name", 0

1005f64f                                               00 00 00 00 00                                                     .....

1005f654  char data_1005f654[0x12] = "file %s not found", 0

1005f666                    00 00 00 00 00 00                                                                    ......

1005f66c  char data_1005f66c[0x27] = "#include without file name between < >", 0

1005f693                                                           00 00 00 00 00 00 00 00 00                                 .........

1005f69c  char data_1005f69c[0x1c] = "#include missing trailing >", 0

1005f6b8                                                                          00 00 00 00 00 00 00 00                          ........
1005f6c0  data_1005f6c0:
1005f6c0  5c 00 00 00                                                                                      \...

1005f6c4  char data_1005f6c4[0xf] = "can\'t undef %s", 0

1005f6d3                                                           00 00 00 00 00                                             .....

1005f6d8  char data_1005f6d8[0x18] = "expected name, found %s", 0

1005f6f0                                                  00 00 00 00                                                      ....

1005f6f4  char data_1005f6f4[0x13] = "undef without name", 0

1005f707                       00 00 00 00 00                                                                     .....

1005f70c  char data_1005f70c[0x19] = "define with misplaced ##", 0

1005f725                 00 00 00 00 00 00 00                                                                   .......

1005f72c  char data_1005f72c[0x16] = "define not terminated", 0

1005f742        00 00 00 00 00 00                                                                            ......

1005f748  char data_1005f748[0x21] = "define parameters not terminated", 0

1005f769                             00 00 00 00 00 00 00                                                           .......

1005f770  char data_1005f770[0x1f] = "two the same define parameters", 0

1005f78f                                               00 00 00 00 00 00 00 00 00                                         .........

1005f798  char data_1005f798[0x19] = "invalid define parameter", 0

1005f7b1                                                     00 00 00 00 00 00 00                                           .......

1005f7b8  char data_1005f7b8[0x1a] = "expected define parameter", 0

1005f7d2                                                        00 00 00 00 00 00                                            ......

1005f7d8  char data_1005f7d8[0x13] = "redefinition of %s", 0

1005f7eb                                   00 00 00 00 00                                                             .....

1005f7f0  char data_1005f7f0[0x12] = "can\'t redefine %s", 0

1005f802        00 00 00 00 00 00                                                                            ......

1005f808  char data_1005f808[0x26] = "expected name after #define, found %s", 0

1005f82e                                            00 00 00 00 00 00 00 00 00 00                                        ..........

1005f838  char data_1005f838[0x15] = "#define without name", 0

1005f84d                                         00 00 00 00 00 00 00                                                   .......

1005f854  char data_1005f854[0x8] = "*extern", 0

1005f85c                                                                                      00 00 00 00                              ....

1005f860  char data_1005f860[0x25] = "expected name after #ifdef, found %s", 0

1005f885                 00 00 00 00 00 00 00                                                                   .......

1005f88c  char data_1005f88c[0x14] = "#ifdef without name", 0

1005f8a0  00 00 00 00                                                                                      ....

1005f8a4  char data_1005f8a4[0x12] = "#else after #else", 0

1005f8b6                                                                    00 00 00 00 00 00                                    ......

1005f8bc  char data_1005f8bc[0x10] = "misplaced #else", 0

1005f8cc                                      00 00 00 00                                                              ....

1005f8d0  char data_1005f8d0[0x11] = "misplaced #endif", 0

1005f8e1     00 00 00                                                                                       ...

1005f8e4  char data_1005f8e4[0x17] = "? after ? in #if/#elif", 0

1005f8fb                                                                                   00 00 00 00 00                             .....

1005f900  char data_1005f900[0x19] = ": without ? in #if/#elif", 0

1005f919                                                                             00 00 00 00 00 00 00                           .......

1005f920  char data_1005f920[0x1b] = "mising values in #if/#elif", 0

1005f93b                                                                                   00 00 00 00 00                             .....

1005f940  char data_1005f940[0x18] = "too many ( in #if/#elif", 0

1005f958                                                                          00 00 00 00                                      ....

1005f95c  char data_1005f95c[0x1f] = "trailing operator in #if/#elif", 0

1005f97b                                                                                   00 00 00 00 00                             .....
1005f980  00 00 00 00                                                                                      ....

1005f984  char data_1005f984[0x1a] = "syntax error in #if/#elif", 0

1005f99e                                                                                            00 00                                ..
1005f9a0  00 00 00 00                                                                                      ....

1005f9a4  char data_1005f9a4[0x22] = "defined without name in #if/#elif", 0

1005f9c6                    00 00 00 00 00 00                                                                    ......

1005f9cc  char data_1005f9cc[0x1f] = "defined without ) in #if/#elif", 0

1005f9eb                                   00 00 00 00 00 00 00 00 00                                                 .........

1005f9f4  char data_1005f9f4[0x1f] = "undefined name %s in #if/#elif", 0

1005fa13                                                           00 00 00 00 00 00 00 00 00                                 .........

1005fa1c  char data_1005fa1c[0x21] = "invalid operator %s in #if/#elif", 0

1005fa3d                                                                                         00 00 00                               ...
1005fa40  00 00 00 00                                                                                      ....

1005fa44  char data_1005fa44[0x28] = "operator %s after operator in #if/#elif", 0

1005fa6c                                      00 00 00 00 00 00 00 00                                                  ........

1005fa74  char data_1005fa74[0x20] = "! or ~ after value in #if/#elif", 0

1005fa94                                                              00 00 00 00 00 00 00 00                                  ........

1005fa9c  char data_1005fa9c[0x30] = "illigal operator %s on floating point operands\n", 0

1005facc                                      00 00 00 00 00 00 00 00 00 00 00 00                                      ............

1005fad8  char data_1005fad8[0x19] = "too many ) in #if/#elsif", 0

1005faf1                                                     00 00 00 00 00 00 00                                           .......

1005faf8  char data_1005faf8[0x22] = "misplaced minus sign in #if/#elif", 0

1005fb1a                                                                                00 00 00 00 00 00                            ......

1005fb20  char data_1005fb20[0x18] = "unknown %s in #if/#elif", 0

1005fb38                                                                          00 00 00 00                                      ....

1005fb3c  char data_1005fb3c[0x8] = "defined", 0

1005fb44              00 00 00 00                                                                              ....

1005fb48  char data_1005fb48[0x12] = "can\'t evaluate %s", 0

1005fb5a                                                                                00 00 00 00 00 00                            ......

1005fb60  char data_1005fb60[0x1f] = "can\'t evaluate %s, not defined", 0

1005fb7f                                                                                               00                                 .
1005fb80  00 00 00 00 00 00 00 00                                                                          ........

1005fb88  char data_1005fb88[0x19] = "no value after #if/#elif", 0

1005fba1     00 00 00 00 00 00 00                                                                           .......

1005fba8  char data_1005fba8[0x14] = "nothing to evaluate", 0

1005fbbc                                                                                      00 00 00 00                              ....

1005fbc0  char data_1005fbc0[0x27] = "no leading ( after $evalint/$evalfloat", 0

1005fbe7                       00 00 00 00 00 00 00 00 00                                                         .........

1005fbf0  char data_1005fbf0[0x10] = "misplaced #elif", 0

1005fc00  00 00 00 00                                                                                      ....

1005fc04  char data_1005fc04[0x1e] = "#line directive not supported", 0

1005fc22        00 00 00 00 00 00                                                                            ......

1005fc28  char data_1005fc28[0x15] = "#error directive: %s", 0

1005fc3d                                                                                         00 00 00                               ...
1005fc40  00 00 00 00                                                                                      ....

1005fc44  char data_1005fc44[0x20] = "#pragma directive not supported", 0

1005fc64              00 00 00 00 00 00 00 00                                                                  ........

1005fc6c  char data_1005fc6c[0x6] = "%1.2f", 0

1005fc72                                                        00 00                                                        ..

1005fc74  char data_1005fc74[0x21] = "unknown precompiler directive %s", 0

1005fc95                                                                 00 00 00 00 00 00 00                                   .......

1005fc9c  char data_1005fc9c[0x17] = "found # at end of line", 0

1005fcb3                                                           00 00 00 00 00                                             .....

1005fcb8  char data_1005fcb8[0x15] = "found # without name", 0

1005fccd                                         00 00 00 00 00 00 00                                                   .......

1005fcd4  char data_1005fcd4[0x17] = "found $ at end of line", 0

1005fceb                                   00 00 00 00 00                                                             .....

1005fcf0  char data_1005fcf0[0x15] = "found $ without name", 0

1005fd05                 00 00 00 00 00 00 00                                                                   .......

1005fd0c  char data_1005fd0c[0x16] = "expected %s, found %s", 0

1005fd22        00 00 00 00 00 00                                                                            ......

1005fd28  char data_1005fd28[0x1a] = "couldn\'t find expected %s", 0

1005fd42        00 00 00 00 00 00                                                                            ......

1005fd48  char data_1005fd48[0x9] = "found %s", 0

1005fd51                                                     00 00 00                                                       ...

1005fd54  char data_1005fd54[0x9] = " integer", 0

1005fd5d                                                                                         00 00 00                               ...

1005fd60  char data_1005fd60[0x7] = " float", 0

1005fd67                       00                                                                                 .

1005fd68  char data_1005fd68[0xa] = " unsigned", 0

1005fd72                                                        00 00                                                        ..

1005fd74  char data_1005fd74[0x6] = " long", 0

1005fd7a                                                                                00 00                                        ..

1005fd7c  char data_1005fd7c[0x7] = "binary", 0

1005fd83           00                                                                                         .

1005fd84  char data_1005fd84[0x6] = "octal", 0

1005fd8a                                00 00                                                                        ..

1005fd8c  int32_t data_1005fd8c = 0x786568
1005fd90  char data_1005fd90[0x8] = "decimal", 0

1005fd98                                                                          00 00 00 00                                      ....

1005fd9c  char data_1005fd9c[0x18] = "expected a %s, found %s", 0

1005fdb4                                                              00 00 00 00                                              ....

1005fdb8  char data_1005fdb8[0xc] = "punctuation", 0

1005fdc4              00 00 00 00                                                                              ....

1005fdc8  char data_1005fdc8[0x7] = "number", 0

1005fdcf                                               00                                                                 .

1005fdd0  char data_1005fdd0[0x8] = "literal", 0

1005fdd8                                                                          00 00 00 00                                      ....

1005fddc  char data_1005fddc[0x1d] = "couldn\'t read expected token", 0

1005fdf9                                                                             00 00 00 00 00 00 00                           .......

1005fe00  void* data_1005fe00 = 0x10060184

1005fe04              01 00 00 00 00 00 00 00                                                                  ........

1005fe0c  void* data_1005fe0c = 0x10060180

1005fe10                                                  02 00 00 00 00 00 00 00                                          ........

1005fe18  void* data_1005fe18 = data_1006017c

1005fe1c                                                                                      03 00 00 00                              ....
1005fe20  00 00 00 00                                                                                      ....

1005fe24  void* data_1005fe24 = data_1005f5f4

1005fe28                          04 00 00 00 00 00 00 00                                                          ........

1005fe30  void* data_1005fe30 = 0x10060178

1005fe34                                                              05 00 00 00 00 00 00 00                                  ........

1005fe3c  void* data_1005fe3c = 0x10060174

1005fe40  06 00 00 00 00 00 00 00                                                                          ........

1005fe48  void* data_1005fe48 = 0x10060170

1005fe4c                                      07 00 00 00 00 00 00 00                                                  ........

1005fe54  void* data_1005fe54 = 0x1006016c

1005fe58                                                                          08 00 00 00 00 00 00 00                          ........

1005fe60  void* data_1005fe60 = 0x10060168

1005fe64              09 00 00 00 00 00 00 00                                                                  ........

1005fe6c  void* data_1005fe6c = 0x10060164

1005fe70                                                  0a 00 00 00 00 00 00 00                                          ........

1005fe78  void* data_1005fe78 = 0x10060160

1005fe7c                                                                                      0b 00 00 00                              ....
1005fe80  00 00 00 00                                                                                      ....

1005fe84  void* data_1005fe84 = 0x1006015c

1005fe88                          0c 00 00 00 00 00 00 00                                                          ........

1005fe90  void* data_1005fe90 = 0x10060158

1005fe94                                                              0d 00 00 00 00 00 00 00                                  ........

1005fe9c  void* data_1005fe9c = 0x10060154

1005fea0  0e 00 00 00 00 00 00 00                                                                          ........

1005fea8  void* data_1005fea8 = 0x10060150

1005feac                                      0f 00 00 00 00 00 00 00                                                  ........

1005feb4  void* data_1005feb4 = 0x1006014c

1005feb8                                                                          10 00 00 00 00 00 00 00                          ........

1005fec0  void* data_1005fec0 = 0x10060148

1005fec4              11 00 00 00 00 00 00 00                                                                  ........

1005fecc  void* data_1005fecc = 0x10060144

1005fed0                                                  12 00 00 00 00 00 00 00                                          ........

1005fed8  void* data_1005fed8 = 0x10060140

1005fedc                                                                                      13 00 00 00                              ....
1005fee0  00 00 00 00                                                                                      ....

1005fee4  void* data_1005fee4 = 0x1006013c

1005fee8                          14 00 00 00 00 00 00 00                                                          ........

1005fef0  void* data_1005fef0 = 0x10060138

1005fef4                                                              15 00 00 00 00 00 00 00                                  ........

1005fefc  void* data_1005fefc = 0x10060134

1005ff00  16 00 00 00 00 00 00 00                                                                          ........

1005ff08  void* data_1005ff08 = 0x10060130

1005ff0c                                      17 00 00 00 00 00 00 00                                                  ........

1005ff14  void* data_1005ff14 = 0x1006012c

1005ff18                                                                          18 00 00 00 00 00 00 00                          ........

1005ff20  void* data_1005ff20 = 0x10060128

1005ff24              19 00 00 00 00 00 00 00                                                                  ........

1005ff2c  void* data_1005ff2c = &data_100600fc[0xa] {10060124} {U"*"}

1005ff30                                                  1a 00 00 00 00 00 00 00                                          ........

1005ff38  void* data_1005ff38 = &data_100600fc[0x9] {10060120} {U"/*"}

1005ff3c                                                                                      1b 00 00 00                              ....
1005ff40  00 00 00 00                                                                                      ....

1005ff44  void* data_1005ff44 = &data_100600fc[0x8] {1006011c} {U"%/*"}

1005ff48                          1c 00 00 00 00 00 00 00                                                          ........

1005ff50  void* data_1005ff50 = &data_100600fc[0x7] {10060118} {U"+%/*"}

1005ff54                                                              1d 00 00 00 00 00 00 00                                  ........

1005ff5c  void* data_1005ff5c = data_1005e498

1005ff60  1e 00 00 00 00 00 00 00                                                                          ........

1005ff68  void* data_1005ff68 = g_default_config_table

1005ff6c                                      1f 00 00 00 00 00 00 00                                                  ........

1005ff74  void* data_1005ff74 = data_1005d548

1005ff78                                                                          20 00 00 00 00 00 00 00                           .......

1005ff80  void* data_1005ff80 = data_1005d380

1005ff84              21 00 00 00 00 00 00 00                                                                  !.......

1005ff8c  void* data_1005ff8c = &data_100600fc[0x6] {10060114} {U"^+%/*"}

1005ff90                                                  22 00 00 00 00 00 00 00                                          ".......

1005ff98  void* data_1005ff98 = &data_100600fc[0x5] {10060110} {U"~^+%/*"}

1005ff9c                                                                                      23 00 00 00                              #...
1005ffa0  00 00 00 00                                                                                      ....

1005ffa4  void* data_1005ffa4 = data_1005d544

1005ffa8                          24 00 00 00 00 00 00 00                                                          $.......

1005ffb0  void* data_1005ffb0 = &data_100600fc[0x4] {1006010c} {U">~^+%/*"}

1005ffb4                                                              25 00 00 00 00 00 00 00                                  %.......

1005ffbc  void* data_1005ffbc = &data_100600fc[0x3] {10060108} {U"<>~^+%/*"}

1005ffc0  26 00 00 00 00 00 00 00                                                                          &.......

1005ffc8  void* data_1005ffc8 = &data_100600fc[0x2] {10060104} {U".<>~^+%/*"}

1005ffcc                                      27 00 00 00 00 00 00 00                                                  '.......

1005ffd4  void* data_1005ffd4 = data_1005d330

1005ffd8                                                                          28 00 00 00 00 00 00 00                          (.......

1005ffe0  void* data_1005ffe0 = data_1005d42c

1005ffe4              29 00 00 00 00 00 00 00                                                                  ).......

1005ffec  void* data_1005ffec = data_1005cb74

1005fff0                                                  2a 00 00 00 00 00 00 00                                          *.......

1005fff8  void* data_1005fff8 = &data_100600fc[0x1] {10060100} {U"?.<>~^+%/*"}

1005fffc                                                                                      2b 00 00 00                              +...
10060000  00 00 00 00                                                                                      ....

10060004  void* data_10060004 = data_1005d334

10060008                          2c 00 00 00 00 00 00 00                                                          ,.......

10060010  void* data_10060010 = data_1005d32c

10060014                                                              2d 00 00 00 00 00 00 00                                  -.......

1006001c  void* data_1006001c = data_1005ab58

10060020  2e 00 00 00 00 00 00 00                                                                          ........

10060028  void* data_10060028 = data_1005ab54

1006002c                                      2f 00 00 00 00 00 00 00                                                  /.......

10060034  void* data_10060034 = data_1005c65c

10060038                                                                          30 00 00 00 00 00 00 00                          0.......

10060040  void* data_10060040 = data_1005c658

10060044              31 00 00 00 00 00 00 00                                                                  1.......

1006004c  void* data_1006004c = data_1005f6c0

10060050                                                  32 00 00 00 00 00 00 00                                          2.......

10060058  void* data_10060058 = data_1005f630

1006005c                                                                                      33 00 00 00                              3...
10060060  00 00 00 00                                                                                      ....

10060064  wchar32 (* data_10060064)[0xb] = data_100600fc {U"$?.<>~^+%/*"}

10060068                          34 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          4.......................
10060080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100600a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100600c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100600e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ............................

100600fc  wchar32 data_100600fc[0xb] = "$?.<>~^+%/*"

10060128                          2e 2a 00 00 3a 3a 00 00 2d 3e 00 00 3c 3c 00 00 3e 3e 00 00 5e 3d 00 00          .*..::..->..<<..>>..^=..
10060140  7c 3d 00 00 26 3d 00 00 2d 2d 00 00 2b 2b 00 00 2d 3d 00 00 2b 3d 00 00 25 3d 00 00 2f 3d 00 00  |=..&=..--..++..-=..+=..%=../=..
10060160  2a 3d 00 00 21 3d 00 00 3d 3d 00 00 3c 3d 00 00 3e 3d 00 00 7c 7c 00 00 26 26 00 00              *=..!=..==..<=..>=..||..&&..
1006017c  data_1006017c:
1006017c                                                                                      2e 2e 2e 00                              ....
10060180  3c 3c 3d 00 3e 3e 3d 00                                                                          <<=.>>=.

10060188  char data_10060188[0x13] = "unkown punctuation", 0

1006019b                                                                                   00 00 00 00 00                             .....

100601a0  char data_100601a0[0x24] = "too large value in escape character", 0

100601c4              00 00 00 00 00 00 00 00                                                                  ........

100601cc  char data_100601cc[0x14] = "unknown escape char", 0

100601e0  00 00 00 00                                                                                      ....

100601e4  char data_100601e4[0x19] = "newline inside string %s", 0

100601fd                                                                                         00 00 00                               ...
10060200  00 00 00 00                                                                                      ....

10060204  char data_10060204[0x17] = "missing trailing quote", 0

1006021b                                                                                   00 00 00 00 00                             .....

10060220  char data_10060220[0x22] = "string longer than MAX_TOKEN = %d", 0

10060242        00 00 00 00 00 00                                                                            ......

10060248  char data_10060248[0x20] = "name longer than MAX_TOKEN = %d", 0

10060268                          00 00 00 00 00 00 00 00                                                          ........

10060270  char data_10060270[0x22] = "number longer than MAX_TOKEN = %d", 0

10060292                                                        00 00 00 00 00 00                                            ......

10060298  char data_10060298[0x29] = "binary number longer than MAX_TOKEN = %d", 0

100602c1     00 00 00 00 00 00 00 00 00 00 00                                                               ...........

100602cc  char data_100602cc[0x2e] = "hexadecimal number longer than MAX_TOKEN = %d", 0

100602fa                                                                                00 00 00 00 00 00                            ......
10060300  00 00 00 00                                                                                      ....

10060304  char data_10060304[0x28] = "too many characters in literal, ignored", 0

1006032c                                      00 00 00 00 00 00 00 00                                                  ........

10060334  char data_10060334[0x1e] = "end of file before trailing \'", 0

10060352                                                        00 00 00 00 00 00                                            ......

10060358  char data_10060358[0x2b] = "primitive token longer than MAX_TOKEN = %d", 0

10060383           00 00 00 00 00 00 00 00 00                                                                 .........

1006038c  char data_1006038c[0x11] = "can\'t read token", 0

1006039d                                                                                         00 00 00                               ...

100603a0  char data_100603a0[0x1f] = "BUG: wrong punctuation subtype", 0

100603bf                                                                                               00                                 .
100603c0  00 00 00 00 00 00 00 00                                                                          ........

100603c8  char data_100603c8[0x20] = "expected float value, found %s\n", 0

100603e8                          00 00 00 00 00 00 00 00                                                          ........

100603f0  char data_100603f0[0x22] = "expected integer value, found %s\n", 0

10060412                                                        00 00 00 00 00 00 00 00 00 59 6f 75 20 61                    .........You a
10060420  72 65 20 6e 6f 74 20 61 6c 6c 6f 77 65 64 20 74 6f 0a 6d 6f 64 69 66 79 20 74 68 65 20 62 6f 74  re not allowed to.modify the bot
10060440  20 63 68 61 72 61 63 74 65 72 73 20 69 6e 0a 69 6e 20 74 68 69 73 20 76 65 72 73 69 6f 6e 2e 00   characters in.in this version..
10060460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

10060470  char data_10060470[0x1f] = "value %d out of range [%d, %d]", 0

1006048f                                               00 00 00 00 00 00 00 00 00                                         .........

10060498  char data_10060498[0x1f] = "value %d out of range [%f, %f]", 0

100604b7                                                                       00 00 00 00 00 00 00 00 00                         .........

100604c0  char data_100604c0[0x1c] = "float out of range [%f, %f]", 0

100604dc                                                                                      00 00 00 00                              ....
100604e0  00 00 00 00                                                                                      ....

100604e4  char data_100604e4[0x11] = "unexpected float", 0

100604f5                                                                 00 00 00                                               ...

100604f8  char data_100604f8[0x1a] = "expected number, found %s", 0

10060512                                                        00 00 00 00 00 00                                            ......

10060518  char data_10060518[0x1a] = "unexpected punctuation %s", 0

10060532                                                        00 00 00 00 00 00                                            ......

10060538  char data_10060538[0x22] = "expected unsigned value, found %s", 0

1006055a                                                                                00 00 00 00 00 00                            ......

10060560  char data_10060560[0x1b] = "expected a comma, found %s", 0

1006057b                                                                                   00 00 00 00 00                             .....

10060580  char data_10060580[0x1e] = "BUG: no sub structure defined", 0

1006059e                                                                                            00 00                                ..
100605a0  00 00 00 00                                                                                      ....

100605a4  char data_100605a4[0x1b] = "unknown structure field %s", 0

100605bf                                                                                               00                                 .
100605c0  00 00 00 00                                                                                      ....
100605c4  data_100605c4:
100605c4              09 00 00 00                                                                              ....
100605c8  data_100605c8:
100605c8                          25 73 00 00                                                                      %s..
100605cc  data_100605cc:
100605cc                                      25 66 00 00                                                              %f..
100605d0  data_100605d0:
100605d0                                                  7d 0d 0a 00                                                      }...
100605d4  data_100605d4:
100605d4                                                              25 73 09 00                                              %s..
100605d8  data_100605d8:
100605d8                                                                          7b 0d 0a 00                                      {...

100605dc  int32_t data_100605dc = -0x1
100605e0  char data_100605e0[0xd] = "windll_unzip", 0

100605ed                                         00 00 00                                                               ...

100605f0  char data_100605f0[0xc] = "UNZIP32.DLL", 0

100605fc                                                                                      00 00 00 00                              ....

10060600  char data_10060600[0x6] = "100%%", 0

10060606                    00 00                                                                                ..

10060608  char data_10060608[0x7] = "%c%d%%", 0

1006060f                                               00                                                                 .

10060610  char data_10060610[0xa] = "pak%d.pak", 0

1006061a                                                                                00 00 00 00 00 00                            ......

10060620  char data_10060620[0xd] = "accessing %s", 0

1006062d                                         00 00 00                                                               ...

10060630  char data_10060630[0x6] = "cddir", 0

10060636                                                                    00 00                                                ..

10060638  char data_10060638[0x2f] = "Error during archiving.\n"
10060638      "Unable to create \"%s\"\n", 0

10060667                       00 00 00 00 00 00 00 00 00                                                         .........

10060670  char data_10060670[0x7] = "ZpInit", 0

10060677                                                                       00                                                 .

10060678  char data_10060678[0xd] = "ZpSetOptions", 0

10060685                 00 00 00                                                                               ...

10060688  char data_10060688[0xa] = "ZpArchive", 0

10060692                                                        00 00                                                        ..

10060694  char data_10060694[0xa] = "ZIP32.DLL", 0

1006069e                                                                                            00 00                                ..
100606a0  00 00 00 00                                                                                      ....

100606a4  char data_100606a4[0x23] = "Com_sprintf: overflow of %i in %i\n", 0

100606c7                       00 00 00 00 00 00 00 00 00                                                         .........

100606d0  char data_100606d0[0x23] = "Can\'t use keys or values with a \\\n", 0

100606f3                                                           00 00 00 00 00 00 00 00 00                                 .........

100606fc  char data_100606fc[0x23] = "Can\'t use keys or values with a \"\n", 0

1006071f                                                                                               00                                 .
10060720  00 00 00 00 00 00 00 00                                                                          ........

10060728  char data_10060728[0x2a] = "Keys and values must be < 64 characters.\n", 0

10060752                                                        00 00 00 00 00 00 00 00 00 00                                ..........

1006075c  char data_1006075c[0x1d] = "Info string length exceeded\n", 0

10060779                                                                             00 00 00 00 00 00 00                           .......

10060780  char data_10060780[0x7] = "\\%s\\%s", 0

10060787                       00                                                                                 .

10060788  char data_10060788[0x2b] = "Can\'t use keys or values with a semicolon\n", 0

100607b3                                                           00 00 00 00 00 00 00 00 00 75 98 00 00                     .........u...
100607c0  73 98 00 00                                                                                      s...

100607c4  void* data_100607c4 = sub_10044286
100607c8  void* data_100607c8 = sub_1004429d
100607cc  void* data_100607cc = sub_1004429d
100607d0  int32_t data_100607d0 = 0x1b3f
100607d4  int32_t data_100607d4 = 0x173f

100607d8                                                                          00 00 00 00 00 00 00 00                          ........
100607e0  data_100607e0:
100607e0  01 00 00 00                                                                                      ....
100607e4  data_100607e4:
100607e4              16 00 00 00 02 00 00 00 02 00 00 00 03 00 00 00 02 00 00 00 04 00 00 00 18 00 00 00      ............................
10060800  05 00 00 00 0d 00 00 00 06 00 00 00 09 00 00 00 07 00 00 00 0c 00 00 00 08 00 00 00 0c 00 00 00  ................................
10060820  09 00 00 00 0c 00 00 00 0a 00 00 00 07 00 00 00 0b 00 00 00 08 00 00 00 0c 00 00 00 16 00 00 00  ................................
10060840  0d 00 00 00 16 00 00 00 0f 00 00 00 02 00 00 00 10 00 00 00 0d 00 00 00 11 00 00 00 12 00 00 00  ................................
10060860  12 00 00 00 02 00 00 00 21 00 00 00 0d 00 00 00 35 00 00 00 02 00 00 00 41 00 00 00 0d 00 00 00  ........!.......5.......A.......
10060880  43 00 00 00 02 00 00 00 50 00 00 00 11 00 00 00 52 00 00 00 0d 00 00 00 53 00 00 00 0d 00 00 00  C.......P.......R.......S.......
100608a0  57 00 00 00 16 00 00 00 59 00 00 00 0b 00 00 00 6c 00 00 00 0d 00 00 00 6d 00 00 00 20 00 00 00  W.......Y.......l.......m... ...
100608c0  70 00 00 00 1c 00 00 00 72 00 00 00 09 00 00 00 06 00 00 00 16 00 00 00 80 00 00 00 0a 00 00 00  p.......r.......................
100608e0  81 00 00 00 0a 00 00 00 82 00 00 00 09 00 00 00 83 00 00 00 16 00 00 00 84 00 00 00 0d 00 00 00  ................................
10060900  91 00 00 00 29 00 00 00 9e 00 00 00 0d 00 00 00 a1 00 00 00 02 00 00 00 a4 00 00 00 0b 00 00 00  ....)...........................
10060920  a7 00 00 00 0d 00 00 00 b7 00 00 00 11 00 00 00 ce 00 00 00 02 00 00 00 d7 00 00 00 0b 00 00 00  ................................
10060940  18 07 00 00 0c 00 00 00 00 00 00 00 00 00 00 00                                                  ................
10060950  data_10060950:
10060950                                                  73 69 6e 00 00 00 00 00 00 00 00 00 00 00 00 00                  sin.............
10060960  data_10060960:
10060960  63 6f 73 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  cos.............

10060970  void* data_10060970 = sub_1004bab3
10060974  void* data_10060974 = sub_1004ca18
10060978  void* data_10060978 = sub_1004ca18
1006097c  void* data_1006097c = sub_1004ca18
10060980  void* data_10060980 = sub_1004ca18
10060984  void* data_10060984 = sub_1004ca18
10060988  void* data_10060988 = sub_1004ca18
1006098c  char data_1006098c[0x6] = " \t-\r]", 0

10060992                                                        00 00                                                        ..
10060994  data_10060994:
10060994                                                              5d 00 00 00 00 00 00 00 00 00 00 00                      ]...........

100609a0  wchar16 (* data_100609a0)[0x21] = data_100609aa {u"         (((((                  …"}
100609a4  wchar16 (* data_100609a4)[0x21] = data_100609aa {u"         (((((                  …"}

100609a8                          00 00                                                                            ..

100609aa  wchar16 data_100609aa[0x21] = "         (((((                  H"

100609ec                                      10 00 10 00 10 00 10 00 10 00 10 00 10 00 10 00 10 00 10 00              ....................
10060a00  10 00 10 00 10 00 10 00 10 00 84 00 84 00 84 00 84 00 84 00 84 00 84 00 84 00 84 00 84 00 10 00  ................................
10060a20  10 00 10 00 10 00 10 00 10 00 10 00 81 00 81 00 81 00 81 00 81 00 81 00 01 00 01 00 01 00 01 00  ................................
10060a40  01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00  ................................
10060a60  10 00 10 00 10 00 10 00 10 00 10 00 82 00 82 00 82 00 82 00 82 00 82 00 02 00 02 00 02 00 02 00  ................................
10060a80  02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00  ................................
10060aa0  10 00 10 00 10 00 10 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ........ .......................
10060ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060ba0  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

10060bac  int32_t data_10060bac = 0x1
10060bb0  char data_10060bb0 = 0x2e

10060bb1                                                     00 00 00                                                       ...

10060bb4  int32_t data_10060bb4 = 0x1

10060bb8                                                                          00 00 00 00 00 00 00 00                          ........
10060bc0  data_10060bc0:
10060bc0  14 00 00 00                                                                                      ....

10060bc4  void* data_10060bc4 = 0x10058534

10060bc8                          1d 00 00 00                                                                      ....

10060bcc  void* data_10060bcc = 0x10058530

10060bd0                                                  1a 00 00 00                                                      ....

10060bd4  void* data_10060bd4 = data_1005f150

10060bd8                                                                          1b 00 00 00                                      ....

10060bdc  char const (* data_10060bdc)[0x6] = data_10058528 {"log10"}

10060be0  1f 00 00 00                                                                                      ....

10060be4  char const (* data_10060be4)[0x5] = data_10058520 {"sinh"}

10060be8                          13 00 00 00                                                                      ....

10060bec  char const (* data_10060bec)[0x5] = data_10058518 {"cosh"}

10060bf0                                                  21 00 00 00                                                      !...

10060bf4  char const (* data_10060bf4)[0x5] = data_10058510 {"tanh"}

10060bf8                                                                          0e 00 00 00                                      ....

10060bfc  char const (* data_10060bfc)[0x5] = data_10058508 {"asin"}

10060c00  0d 00 00 00                                                                                      ....

10060c04  char const (* data_10060c04)[0x5] = data_10058500 {"acos"}

10060c08                          0f 00 00 00                                                                      ....

10060c0c  char const (* data_10060c0c)[0x5] = data_100584f8 {"atan"}

10060c10                                                  10 00 00 00                                                      ....

10060c14  char const (* data_10060c14)[0x6] = data_100584f0 {"atan2"}

10060c18                                                                          05 00 00 00                                      ....

10060c1c  char const (* data_10060c1c)[0x5] = data_100584e8 {"sqrt"}

10060c20  1e 00 00 00                                                                                      ....

10060c24  void* data_10060c24 = 0x100584e4

10060c28                          12 00 00 00                                                                      ....

10060c2c  void* data_10060c2c = 0x100584e0

10060c30                                                  20 00 00 00                                                       ...

10060c34  void* data_10060c34 = 0x100584dc

10060c38                                                                          0c 00 00 00                                      ....

10060c3c  char const (* data_10060c3c)[0x5] = data_100584d4 {"ceil"}

10060c40  0b 00 00 00                                                                                      ....

10060c44  char const (* data_10060c44)[0x6] = data_100584cc {"floor"}

10060c48                          15 00 00 00                                                                      ....

10060c4c  char const (* data_10060c4c)[0x5] = data_100584c4 {"fabs"}

10060c50                                                  1c 00 00 00                                                      ....

10060c54  char const (* data_10060c54)[0x5] = data_100584bc {"modf"}

10060c58                                                                          19 00 00 00                                      ....

10060c5c  char const (* data_10060c5c)[0x6] = data_100584b4 {"ldexp"}

10060c60  11 00 00 00                                                                                      ....

10060c64  char const (* data_10060c64)[0x6] = data_100584ac {"_cabs"}

10060c68                          18 00 00 00                                                                      ....

10060c6c  char const (* data_10060c6c)[0x7] = data_100584a4 {"_hypot"}

10060c70                                                  16 00 00 00                                                      ....

10060c74  char const (* data_10060c74)[0x5] = data_1005849c {"fmod"}

10060c78                                                                          17 00 00 00                                      ....

10060c7c  char const (* data_10060c7c)[0x6] = data_10058494 {"frexp"}

10060c80  22 00 00 00                                                                                      "...

10060c84  void* data_10060c84 = 0x10058490

10060c88                          23 00 00 00                                                                      #...

10060c8c  void* data_10060c8c = 0x1005848c

10060c90                                                  24 00 00 00                                                      $...

10060c94  void* data_10060c94 = 0x10058488
10060c98  int64_t data_10060c98 = 0x7ff0000000000000

10060ca0  00 00 00 00 00 00 f8 ff                                                                          ........

10060ca8  int64_t data_10060ca8 = 0x7fefffffffffffff

10060cb0                                                  00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 80                  ................

10060cc0  int80_t data_10060cc0 = 
10060cc0  00 00 00 00 00 00 00 80 10 44                                                                    .........D

10060cca                                00 00                                                                        ..

10060ccc  int80_t data_10060ccc = 
10060ccc                                      01 00 00 00 00 00 00 80 00 30                                            .........0

10060cd6                                                                    00 00                                                ..

10060cd8  void* data_10060cd8 = 0x1006a3c0

10060cdc                                                                                      00 00 00 00                              ....

10060ce0  void* data_10060ce0 = 0x1006a3c0

10060ce4              01 01 00 00                                                                              ....
10060ce8  data_10060ce8:
10060ce8                          00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
10060d00  00 00 00 00 02 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060d20  00 00 00 00 02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060f60  data_10060f60:
10060f60  ff ff ff ff 00 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10060f80  00 00 00 00                                                                                      ....

10060f84  char const (* data_10060f84)[0x7] = data_100585a4 {"(null)"}
10060f88  wchar16 const (* data_10060f88)[0x7] = data_10058594 {u"(null)"}
10060f8c  int32_t data_10060f8c = -0x1

10060f90  data_10060f90:
10060f90                                                  00 00 00 00                                                      ....

10060f94  void* data_10060f94 = 0x100633c8

10060f98                                                                          00 00 00 00 00 00 00 00                          ........
10060fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                      ....................

10060fb4  void* data_10060fb4 = 0x100633f8

10060fb8                                                                          00 00 00 00 00 00 00 00                          ........
10060fc0  00 00 00 00                                                                                      ....

10060fc4  void* data_10060fc4 = 0x10063410

10060fc8                          00 00 00 00 00 00 00 00 00 00 00 00                                              ............

10060fd4  void* data_10060fd4 = 0x100633e0

10060fd8                                                                          00 00 00 00 00 00 00 00                          ........
10060fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................
10061050  g_null_config_entry:
10061050                                                  43 00 00 00                                                      C...
10061054  g_config_fallback_key1:
10061054                                                              43 00 00 00 00 00 00 00 00 00 00 00                      C...........
10061060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100610a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100610c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................
100610d8  g_config_fallback_key2:
100610d8                                                                          43 00 00 00 00 00 00 00                          C.......
100610e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

10061160  char const (* data_10061160)[0x7] = LC_ALL {"LC_ALL"}
10061164  int32_t g_config_entry_buffer = 0x0
10061168  void* data_10061168 = ConfigEntry_IsEmpty
1006116c  char const (* g_config_entry_keys)[0xb] = LC_COLLATE {"LC_COLLATE"}
10061170  void* data_10061170 = g_null_config_entry
10061174  void* g_config_entry_default_fn_0 = sub_1004efd8
10061178  char const (* data_10061178)[0x9] = LC_CTYPE {"LC_CTYPE"}
1006117c  void* g_config_entry_default_return = g_null_config_entry
10061180  void* g_config_entry_default_fn_1 = sub_1004ed93
10061184  char const (* data_10061184)[0xc] = LC_MONETARY {"LC_MONETARY"}
10061188  void* data_10061188 = g_null_config_entry
1006118c  void* g_config_entry_default_fn_2 = sub_1004eb21
10061190  char const (* data_10061190)[0xb] = LC_NUMERIC {"LC_NUMERIC"}
10061194  void* data_10061194 = g_null_config_entry
10061198  void* g_config_entry_default_fn_3 = sub_1004e915
1006119c  char const (* data_1006119c)[0x8] = LC_TIME {"LC_TIME"}
100611a0  void* data_100611a0 = g_null_config_entry
100611a4  void* data_100611a4 = sub_1004e3a6

100611a8                          00 00 00 00 00 00 00 00 10 00 00 00                                              ............

100611b4  int32_t g_arenaThreshold = 0x3f8

100611b8                                                                          00 00 00 00 00 00 00 00                          ........

100611c0  int80_t data_100611c0 = 
100611c0  00 00 00 00 00 00 00 c0 ff ff                                                                    ..........

100611ca                                35 c2 68 21 a2 da 0f c9 ff 3f 00 00 00 00 00 00 f0 3f                        5.h!.....?.......?
100611dc  data_100611dc:
100611dc                                                                                      08 04 08 08                              ....
100611e0  08 04 08 08 00 04 0c 08 00 04 0c 08 00 00 00 00                                                  ................
100611f0  data_100611f0:
100611f0                                                  02 00 00 00                                                      ....

100611f4  char const (* data_100611f4)[0x25] = data_100588c4 {"R6002\r\n- floating point not lo…"}

100611f8                                                                          08 00 00 00                                      ....

100611fc  char const (* data_100611fc)[0x2a] = data_10058898 {"R6008\r\n- not enough space for …"}

10061200  09 00 00 00                                                                                      ....

10061204  char const (* data_10061204)[0x2c] = data_1005886c {"R6009\r\n- not enough space for …"}

10061208                          0a 00 00 00                                                                      ....

1006120c  char const (* data_1006120c)[0x21] = data_10058848 {"\r\nabnormal program termination…"}

10061210                                                  10 00 00 00                                                      ....

10061214  char const (* data_10061214)[0x2c] = data_1005881c {"R6016\r\n- not enough space for …"}

10061218                                                                          11 00 00 00                                      ....

1006121c  char const (* data_1006121c)[0x2d] = data_100587ec {"R6017\r\n- unexpected multithrea…"}

10061220  12 00 00 00                                                                                      ....

10061224  char const (* data_10061224)[0x21] = data_100587c8 {"R6018\r\n- unexpected heap error…"}

10061228                          13 00 00 00                                                                      ....

1006122c  char const (* data_1006122c)[0x29] = data_1005879c {"R6019\r\n- unable to open consol…"}

10061230                                                  18 00 00 00                                                      ....

10061234  char const (* data_10061234)[0x35] = data_10058764 {"R6024\r\n- not enough space for …"}

10061238                                                                          19 00 00 00                                      ....

1006123c  char const (* data_1006123c)[0x26] = data_1005873c {"R6025\r\n- pure virtual function…"}

10061240  1a 00 00 00                                                                                      ....

10061244  char const (* data_10061244)[0x35] = data_10058704 {"R6026\r\n- not enough space for …"}

10061248                          1b 00 00 00                                                                      ....

1006124c  char const (* data_1006124c)[0x35] = data_100586cc {"R6027\r\n- not enough space for …"}

10061250                                                  1c 00 00 00                                                      ....

10061254  char const (* data_10061254)[0x25] = data_100586a4 {"R6028\r\n- unable to initialize …"}

10061258                                                                          78 00 00 00                                      x...

1006125c  char const (* data_1006125c)[0xf] = data_10058694 {"DOMAIN error\r\n"}

10061260  79 00 00 00                                                                                      y...

10061264  char const (* data_10061264)[0xd] = data_10058684 {"SING error\r\n"}

10061268                          7a 00 00 00                                                                      z...

1006126c  char const (* data_1006126c)[0xe] = data_10058674 {"TLOSS error\r\n"}

10061270                                                  fc 00 00 00                                                      ....

10061274  void* data_10061274 = data_1005f188

10061278                                                                          ff 00 00 00                                      ....

1006127c  char const (* data_1006127c)[0xf] = data_10058664 {"runtime error "}

10061280  data_10061280:
10061280  00 04 00 00 01 fc ff ff 35 00 00 00 0b 00 00 00 40 00 00 00 ff 03 00 00                          ........5.......@.......
10061298  data_10061298:
10061298                                                                          80 00 00 00 81 ff ff ff                          ........
100612a0  18 00 00 00 08 00 00 00 20 00 00 00 7f 00 00 00                                                  ........ .......

100612b0  int32_t data_100612b0 = 0x2694

100612b4                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............
100612c0  data_100612c0:
100612c0  05 00 00 c0 0b 00 00 00 00 00 00 00 1d 00 00 c0 04 00 00 00 00 00 00 00 96 00 00 c0 04 00 00 00  ................................
100612e0  00 00 00 00 8d 00 00 c0 08 00 00 00 00 00 00 00 8e 00 00 c0 08 00 00 00 00 00 00 00 8f 00 00 c0  ................................
10061300  08 00 00 00 00 00 00 00 90 00 00 c0 08 00 00 00 00 00 00 00 91 00 00 c0 08 00 00 00 00 00 00 00  ................................
10061320  92 00 00 c0 08 00 00 00 00 00 00 00 93 00 00 c0 08 00 00 00 00 00 00 00                          ........................

10061338  int32_t data_10061338 = 0x3
1006133c  int32_t data_1006133c = 0x7
10061340  int32_t data_10061340 = 0x78
10061344  int32_t data_10061344 = 0xa

10061348                          01 02 04 08 00 00 00 00                                                          ........
10061350  data_10061350:
10061350                                                  a4 03 00 00 60 82 79 82 21 00 00 00 00 00 00 00                  ....`.y.!.......
10061360  a6 df 00 00 00 00 00 00 a1 a5 00 00 00 00 00 00 81 9f e0 fc 00 00 00 00 40 7e 80 fc 00 00 00 00  ........................@~......
10061380  a8 03 00 00 c1 a3 da a3 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ........ .......................
100613a0  81 fe 00 00 00 00 00 00 40 fe 00 00 00 00 00 00 b5 03 00 00 c1 a3 da a3 20 00 00 00 00 00 00 00  ........@............... .......
100613c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 81 fe 00 00 00 00 00 00 41 fe 00 00 00 00 00 00  ........................A.......
100613e0  b6 03 00 00 cf a2 e4 a2 1a 00 e5 a2 e8 a2 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ..............[.................
10061400  81 fe 00 00 00 00 00 00 40 7e a1 fe 00 00 00 00 51 05 00 00 51 da 5e da 20 00 5f da 6a da 32 00  ........@~......Q...Q.^. ._.j.2.
10061420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 81 d3 d8 de e0 f9 00 00 31 7e 81 fe 00 00 00 00  ........................1~......
10061440  0a 04 00 00                                                                                      ....

10061444  char data_10061444[0x5] = "040a", 0

10061449                             00 00 00                                                                       ...

1006144c  char const (* data_1006144c)[0x1b] = data_10058ab8 {"Spanish - Traditional Sort"}

10061450  data_10061450:
10061450                                                  45 53 50 00                                                      ESP.

10061454  char const (* data_10061454)[0x6] = data_10058ab0 {"Spain"}

10061458  data_10061458:
10061458                                                                          45 53 50 00                                      ESP.
1006145c  data_1006145c:
1006145c                                                                                      38 35 30 00                              850.
10061460  00 00 00 00                                                                                      ....

10061464  char data_10061464[0x5] = "1252", 0

10061469                             00 00 00 0b 04 00 00 30 34 30 62 00 00 00 00                                   .......040b....

10061478  char const (* data_10061478)[0x8] = data_10058aa8 {"Finnish"}

1006147c                                                                                      46 49 4e 00                              FIN.

10061480  char const (* data_10061480)[0x8] = data_10058aa0 {"Finland"}

10061484              46 49 4e 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0c 04 00 00 30 34 30 63      FIN.850.....1252........040c
100614a0  00 00 00 00                                                                                      ....

100614a4  char const (* data_100614a4)[0x7] = data_10058a98 {"French"}

100614a8                          46 52 41 00                                                                      FRA.

100614ac  char const (* data_100614ac)[0x7] = data_10058a90 {"France"}

100614b0                                                  46 52 41 00 38 35 30 00 00 00 00 00 31 32 35 32                  FRA.850.....1252
100614c0  00 00 00 00 0f 04 00 00 30 34 30 66 00 00 00 00                                                  ........040f....

100614d0  char const (* data_100614d0)[0xa] = data_10058a84 {"Icelandic"}

100614d4                                                              49 53 4c 00                                              ISL.

100614d8  char const (* data_100614d8)[0x8] = data_10058a7c {"Iceland"}

100614dc                                                                                      49 53 4c 00                              ISL.
100614e0  38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 1d 04 00 00 30 34 31 64 00 00 00 00              850.....1252........041d....

100614fc  char const (* data_100614fc)[0x8] = data_10058a74 {"Swedish"}

10061500  53 56 45 00                                                                                      SVE.

10061504  char const (* data_10061504)[0x7] = data_10058a6c {"Sweden"}

10061508                          53 57 45 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 2d 04 00 00          SWE.850.....1252....-...
10061520  30 34 32 64 00 00 00 00                                                                          042d....

10061528  char const (* data_10061528)[0x7] = data_10058a64 {"Basque"}

1006152c                                      45 55 51 00                                                              EUQ.

10061530  char const (* data_10061530)[0x6] = data_10058ab0 {"Spain"}

10061534                                                              45 53 50 00 38 35 30 00 00 00 00 00                      ESP.850.....
10061540  31 32 35 32 00 00 00 00 0a 08 00 00 30 38 30 61 00 00 00 00                                      1252........080a....

10061554  char const (* data_10061554)[0x8] = data_10058a5c {"Spanish"}

10061558                                                                          45 53 4d 00                                      ESM.

1006155c  char const (* data_1006155c)[0x7] = data_10058a54 {"Mexico"}

10061560  4d 45 58 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0c 08 00 00 30 38 30 63 00 00 00 00  MEX.850.....1252........080c....

10061580  char const (* data_10061580)[0x7] = data_10058a98 {"French"}

10061584              46 52 42 00                                                                              FRB.

10061588  char const (* data_10061588)[0x8] = data_10058a4c {"Belgium"}

1006158c                                      42 45 4c 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00              BEL.850.....1252....
100615a0  07 0c 00 00 30 63 30 37 00 00 00 00                                                              ....0c07....

100615ac  char const (* data_100615ac)[0x7] = data_10058a44 {"German"}

100615b0                                                  44 45 41 00                                                      DEA.

100615b4  char const (* data_100615b4)[0x8] = data_10058a3c {"Austria"}

100615b8                                                                          41 55 54 00 38 35 30 00                          AUT.850.
100615c0  00 00 00 00 31 32 35 32 00 00 00 00 09 0c 00 00 30 63 30 39 00 00 00 00                          ....1252........0c09....

100615d8  char const (* data_100615d8)[0x8] = data_10058a34 {"English"}

100615dc                                                                                      45 4e 41 00                              ENA.

100615e0  char const (* data_100615e0)[0xa] = data_10058a28 {"Australia"}

100615e4              41 55 53 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0a 0c 00 00 30 63 30 61      AUS.850.....1252........0c0a
10061600  00 00 00 00                                                                                      ....

10061604  char const (* data_10061604)[0x16] = data_10058a10 {"Spanish - Modern Sort"}

10061608                          45 53 4e 00                                                                      ESN.

1006160c  char const (* data_1006160c)[0x6] = data_10058ab0 {"Spain"}

10061610                                                  45 53 50 00 38 35 30 00 00 00 00 00 31 32 35 32                  ESP.850.....1252
10061620  00 00 00 00 0c 0c 00 00 30 63 30 63 00 00 00 00                                                  ........0c0c....

10061630  char const (* data_10061630)[0x7] = data_10058a98 {"French"}

10061634                                                              46 52 43 00                                              FRC.

10061638  char const (* data_10061638)[0x7] = data_10058a08 {"Canada"}

1006163c                                                                                      43 41 4e 00                              CAN.
10061640  38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0a 10 00 00 31 30 30 61 00 00 00 00              850.....1252........100a....

1006165c  char const (* data_1006165c)[0x8] = data_10058a5c {"Spanish"}

10061660  45 53 47 00                                                                                      ESG.

10061664  char const (* data_10061664)[0xa] = data_100589fc {"Guatemala"}

10061668                          47 54 4d 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0c 10 00 00          GTM.850.....1252........
10061680  31 30 30 63 00 00 00 00                                                                          100c....

10061688  char const (* data_10061688)[0x7] = data_10058a98 {"French"}

1006168c                                      46 52 53 00                                                              FRS.

10061690  char const (* data_10061690)[0xc] = data_100589f0 {"Switzerland"}

10061694                                                              43 48 45 00 38 35 30 00 00 00 00 00                      CHE.850.....
100616a0  31 32 35 32 00 00 00 00 0a 14 00 00 31 34 30 61 00 00 00 00                                      1252........140a....

100616b4  char const (* data_100616b4)[0x8] = data_10058a5c {"Spanish"}

100616b8                                                                          45 53 43 00                                      ESC.

100616bc  char const (* data_100616bc)[0xb] = data_100589e4 {"Costa Rica"}

100616c0  43 52 49 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0c 14 00 00 31 34 30 63 00 00 00 00  CRI.850.....1252........140c....

100616e0  char const (* data_100616e0)[0x7] = data_10058a98 {"French"}

100616e4              46 52 4c 00                                                                              FRL.

100616e8  char const (* data_100616e8)[0xb] = data_100589d8 {"Luxembourg"}

100616ec                                      4c 55 58 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00              LUX.850.....1252....
10061700  0a 18 00 00 31 38 30 61 00 00 00 00                                                              ....180a....

1006170c  char const (* data_1006170c)[0x8] = data_10058a5c {"Spanish"}

10061710                                                  45 53 41 00                                                      ESA.

10061714  char const (* data_10061714)[0x7] = data_100589d0 {"Panama"}

10061718                                                                          50 41 4e 00 38 35 30 00                          PAN.850.
10061720  00 00 00 00 31 32 35 32 00 00 00 00 09 1c 00 00 31 63 30 39 00 00 00 00                          ....1252........1c09....

10061738  char const (* data_10061738)[0x8] = data_10058a34 {"English"}

1006173c                                                                                      45 4e 53 00                              ENS.

10061740  char const (* data_10061740)[0xd] = data_100589c0 {"South Africa"}

10061744              5a 41 46 00 34 33 37 00 00 00 00 00 31 32 35 32 00 00 00 00 0a 1c 00 00 31 63 30 61      ZAF.437.....1252........1c0a
10061760  00 00 00 00                                                                                      ....

10061764  char const (* data_10061764)[0x8] = data_10058a5c {"Spanish"}

10061768                          45 53 44 00                                                                      ESD.

1006176c  char const (* data_1006176c)[0x13] = data_100589ac {"Dominican Republic"}

10061770                                                  44 4f 4d 00 38 35 30 00 00 00 00 00 31 32 35 32                  DOM.850.....1252
10061780  00 00 00 00 0a 20 00 00 32 30 30 61 00 00 00 00                                                  ..... ..200a....

10061790  char const (* data_10061790)[0x8] = data_10058a5c {"Spanish"}

10061794                                                              45 53 56 00                                              ESV.

10061798  char const (* data_10061798)[0xa] = data_100589a0 {"Venezuela"}

1006179c                                                                                      56 45 4e 00                              VEN.
100617a0  38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0a 24 00 00 32 34 30 61 00 00 00 00              850.....1252.....$..240a....

100617bc  char const (* data_100617bc)[0x8] = data_10058a5c {"Spanish"}

100617c0  45 53 4f 00                                                                                      ESO.

100617c4  char const (* data_100617c4)[0x9] = data_10058994 {"Colombia"}

100617c8                          43 4f 4c 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0a 28 00 00          COL.850.....1252.....(..
100617e0  32 38 30 61 00 00 00 00                                                                          280a....

100617e8  char const (* data_100617e8)[0x8] = data_10058a5c {"Spanish"}

100617ec                                      45 53 52 00                                                              ESR.

100617f0  char const (* data_100617f0)[0x5] = data_1005898c {"Peru"}

100617f4                                                              50 45 52 00 38 35 30 00 00 00 00 00                      PER.850.....
10061800  31 32 35 32 00 00 00 00 0a 2c 00 00 32 63 30 61 00 00 00 00                                      1252.....,..2c0a....

10061814  char const (* data_10061814)[0x8] = data_10058a5c {"Spanish"}

10061818                                                                          45 53 53 00                                      ESS.

1006181c  char const (* data_1006181c)[0xa] = data_10058980 {"Argentina"}

10061820  41 52 47 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0a 30 00 00 33 30 30 61 00 00 00 00  ARG.850.....1252.....0..300a....

10061840  char const (* data_10061840)[0x8] = data_10058a5c {"Spanish"}

10061844              45 53 46 00                                                                              ESF.

10061848  char const (* data_10061848)[0x8] = data_10058978 {"Ecuador"}

1006184c                                      45 43 55 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00              ECU.850.....1252....
10061860  0a 34 00 00 33 34 30 61 00 00 00 00                                                              .4..340a....

1006186c  char const (* data_1006186c)[0x8] = data_10058a5c {"Spanish"}

10061870                                                  45 53 4c 00                                                      ESL.

10061874  char const (* data_10061874)[0x6] = data_10058970 {"Chile"}

10061878                                                                          43 48 4c 00 38 35 30 00                          CHL.850.
10061880  00 00 00 00 31 32 35 32 00 00 00 00 0a 38 00 00 33 38 30 61 00 00 00 00                          ....1252.....8..380a....

10061898  char const (* data_10061898)[0x8] = data_10058a5c {"Spanish"}

1006189c                                                                                      45 53 59 00                              ESY.

100618a0  char const (* data_100618a0)[0x8] = data_10058968 {"Uruguay"}

100618a4              55 52 59 00 38 35 30 00 00 00 00 00 31 32 35 32 00 00 00 00 0a 3c 00 00 33 63 30 61      URY.850.....1252.....<..3c0a
100618c0  00 00 00 00                                                                                      ....

100618c4  char const (* data_100618c4)[0x8] = data_10058a5c {"Spanish"}

100618c8                          45 53 5a 00                                                                      ESZ.

100618cc  char const (* data_100618cc)[0x9] = data_1005895c {"Paraguay"}

100618d0                                                  50 52 59 00 38 35 30 00 00 00 00 00 31 32 35 32                  PRY.850.....1252
100618e0  00 00 00 00                                                                                      ....
100618e4  data_100618e4:
100618e4              0c 0c 1a 0c 07 10 36 04 0c 08 2d 04 03 04 0c 10 10 08 1d 08                              ......6...-.........

100618f8  char const (* data_100618f8)[0x8] = data_10058bc0 {"america"}

100618fc                                                                                      55 53 41 00                              USA.

10061900  char const (* data_10061900)[0x8] = data_10058bb8 {"britain"}

10061904              47 42 52 00                                                                              GBR.

10061908  char const (* data_10061908)[0x6] = data_10058bb0 {"china"}

1006190c                                      43 48 4e 00                                                              CHN.

10061910  char const (* data_10061910)[0x6] = data_10058ba8 {"czech"}

10061914                                                              43 5a 45 00                                              CZE.

10061918  char const (* data_10061918)[0x8] = data_10058ba0 {"england"}

1006191c                                                                                      47 42 52 00                              GBR.

10061920  char const (* data_10061920)[0xe] = data_10058b90 {"great britain"}

10061924              47 42 52 00                                                                              GBR.

10061928  char const (* data_10061928)[0x8] = data_10058b88 {"holland"}

1006192c                                      4e 4c 44 00                                                              NLD.

10061930  char const (* data_10061930)[0xa] = data_10058b7c {"hong-kong"}

10061934                                                              48 4b 47 00                                              HKG.

10061938  char const (* data_10061938)[0xc] = data_10058b70 {"new-zealand"}

1006193c                                                                                      4e 5a 4c 00                              NZL.

10061940  void* data_10061940 = 0x10058b6c

10061944              4e 5a 4c 00                                                                              NZL.

10061948  char const (* data_10061948)[0x9] = data_10058b60 {"pr china"}

1006194c                                      43 48 4e 00                                                              CHN.

10061950  char const (* data_10061950)[0x9] = data_10058b54 {"pr-china"}

10061954                                                              43 48 4e 00                                              CHN.

10061958  char const (* data_10061958)[0xc] = data_10058b48 {"puerto-rico"}

1006195c                                                                                      50 52 49 00                              PRI.

10061960  char const (* data_10061960)[0x7] = data_10058b40 {"slovak"}

10061964              53 56 4b 00                                                                              SVK.

10061968  char const (* data_10061968)[0xd] = data_10058b30 {"south africa"}

1006196c                                      5a 41 46 00                                                              ZAF.

10061970  char const (* data_10061970)[0xc] = data_10058b24 {"south korea"}

10061974                                                              4b 4f 52 00                                              KOR.

10061978  char const (* data_10061978)[0xd] = data_10058b14 {"south-africa"}

1006197c                                                                                      5a 41 46 00                              ZAF.

10061980  char const (* data_10061980)[0xc] = data_10058b08 {"south-korea"}

10061984              4b 4f 52 00                                                                              KOR.

10061988  char const (* data_10061988)[0x12] = data_10058af4 {"trinidad & tobago"}

1006198c                                      54 54 4f 00                                                              TTO.

10061990  void* data_10061990 = 0x10058bd0

10061994                                                              47 42 52 00                                              GBR.

10061998  char const (* data_10061998)[0xf] = data_10058ae4 {"united-kingdom"}

1006199c                                                                                      47 42 52 00                              GBR.

100619a0  char const (* data_100619a0)[0xe] = data_10058ad4 {"united-states"}

100619a4              55 53 41 00                                                                              USA.

100619a8  void* data_100619a8 = 0x10058bcc

100619ac                                      55 53 41 00                                                              USA.

100619b0  char const (* data_100619b0)[0x9] = data_10058fd0 {"american"}

100619b4                                                              45 4e 55 00                                              ENU.

100619b8  char const (* data_100619b8)[0x11] = data_10058fbc {"american english"}

100619bc                                                                                      45 4e 55 00                              ENU.

100619c0  char const (* data_100619c0)[0x11] = data_10058fa8 {"american-english"}

100619c4              45 4e 55 00                                                                              ENU.

100619c8  char const (* data_100619c8)[0xb] = data_10058f9c {"australian"}

100619cc                                      45 4e 41 00                                                              ENA.

100619d0  char const (* data_100619d0)[0x8] = data_10058f94 {"belgian"}

100619d4                                                              4e 4c 42 00                                              NLB.

100619d8  char const (* data_100619d8)[0x9] = data_10058f88 {"canadian"}

100619dc                                                                                      45 4e 43 00                              ENC.

100619e0  void* data_100619e0 = 0x10058f84

100619e4              5a 48 48 00                                                                              ZHH.

100619e8  void* data_100619e8 = 0x10058f80

100619ec                                      5a 48 49 00                                                              ZHI.

100619f0  char const (* data_100619f0)[0x8] = data_10058f78 {"chinese"}

100619f4                                                              43 48 53 00                                              CHS.

100619f8  char const (* data_100619f8)[0x11] = data_10058f64 {"chinese-hongkong"}

100619fc                                                                                      5a 48 48 00                              ZHH.

10061a00  char const (* data_10061a00)[0x13] = data_10058f50 {"chinese-simplified"}

10061a04              43 48 53 00                                                                              CHS.

10061a08  char const (* data_10061a08)[0x12] = data_10058f3c {"chinese-singapore"}

10061a0c                                      5a 48 49 00                                                              ZHI.

10061a10  char const (* data_10061a10)[0x14] = data_10058f28 {"chinese-traditional"}

10061a14                                                              43 48 54 00                                              CHT.

10061a18  char const (* data_10061a18)[0xe] = data_10058f18 {"dutch-belgian"}

10061a1c                                                                                      4e 4c 42 00                              NLB.

10061a20  char const (* data_10061a20)[0x11] = data_10058f04 {"english-american"}

10061a24              45 4e 55 00                                                                              ENU.

10061a28  char const (* data_10061a28)[0xc] = data_10058ef8 {"english-aus"}

10061a2c                                      45 4e 41 00                                                              ENA.

10061a30  char const (* data_10061a30)[0xf] = data_10058ee8 {"english-belize"}

10061a34                                                              45 4e 4c 00                                              ENL.

10061a38  char const (* data_10061a38)[0xc] = data_10058edc {"english-can"}

10061a3c                                                                                      45 4e 43 00                              ENC.

10061a40  char const (* data_10061a40)[0x12] = data_10058ec8 {"english-caribbean"}

10061a44              45 4e 42 00                                                                              ENB.

10061a48  char const (* data_10061a48)[0xc] = data_10058ebc {"english-ire"}

10061a4c                                      45 4e 49 00                                                              ENI.

10061a50  char const (* data_10061a50)[0x10] = data_10058eac {"english-jamaica"}

10061a54                                                              45 4e 4a 00                                              ENJ.

10061a58  char const (* data_10061a58)[0xb] = data_10058ea0 {"english-nz"}

10061a5c                                                                                      45 4e 5a 00                              ENZ.

10061a60  char const (* data_10061a60)[0x15] = data_10058e88 {"english-south africa"}

10061a64              45 4e 53 00                                                                              ENS.

10061a68  char const (* data_10061a68)[0x1a] = data_10058e6c {"english-trinidad y tobago"}

10061a6c                                      45 4e 54 00                                                              ENT.

10061a70  char const (* data_10061a70)[0xb] = data_10058e60 {"english-uk"}

10061a74                                                              45 4e 47 00                                              ENG.

10061a78  char const (* data_10061a78)[0xb] = data_10058e54 {"english-us"}

10061a7c                                                                                      45 4e 55 00                              ENU.

10061a80  char const (* data_10061a80)[0xc] = data_10058e48 {"english-usa"}

10061a84              45 4e 55 00                                                                              ENU.

10061a88  char const (* data_10061a88)[0xf] = data_10058e38 {"french-belgian"}

10061a8c                                      46 52 42 00                                                              FRB.

10061a90  char const (* data_10061a90)[0x10] = data_10058e28 {"french-canadian"}

10061a94                                                              46 52 43 00                                              FRC.

10061a98  char const (* data_10061a98)[0x12] = data_10058e14 {"french-luxembourg"}

10061a9c                                                                                      46 52 4c 00                              FRL.

10061aa0  char const (* data_10061aa0)[0xd] = data_10058e04 {"french-swiss"}

10061aa4              46 52 53 00                                                                              FRS.

10061aa8  char const (* data_10061aa8)[0x10] = data_10058df4 {"german-austrian"}

10061aac                                      44 45 41 00                                                              DEA.

10061ab0  char const (* data_10061ab0)[0x14] = data_10058de0 {"german-lichtenstein"}

10061ab4                                                              44 45 43 00                                              DEC.

10061ab8  char const (* data_10061ab8)[0x12] = data_10058dcc {"german-luxembourg"}

10061abc                                                                                      44 45 4c 00                              DEL.

10061ac0  char const (* data_10061ac0)[0xd] = data_10058dbc {"german-swiss"}

10061ac4              44 45 53 00                                                                              DES.

10061ac8  char const (* data_10061ac8)[0xe] = data_10058dac {"irish-english"}

10061acc                                      45 4e 49 00                                                              ENI.

10061ad0  char const (* data_10061ad0)[0xe] = data_10058d9c {"italian-swiss"}

10061ad4                                                              49 54 53 00                                              ITS.

10061ad8  char const (* data_10061ad8)[0xa] = data_10058d90 {"norwegian"}

10061adc                                                                                      4e 4f 52 00                              NOR.

10061ae0  char const (* data_10061ae0)[0x11] = data_10058d7c {"norwegian-bokmal"}

10061ae4              4e 4f 52 00                                                                              NOR.

10061ae8  char const (* data_10061ae8)[0x12] = data_10058d68 {"norwegian-nynorsk"}

10061aec                                      4e 4f 4e 00                                                              NON.

10061af0  char const (* data_10061af0)[0x15] = data_10058d50 {"portuguese-brazilian"}

10061af4                                                              50 54 42 00                                              PTB.

10061af8  char const (* data_10061af8)[0x12] = data_10058d3c {"spanish-argentina"}

10061afc                                                                                      45 53 53 00                              ESS.

10061b00  char const (* data_10061b00)[0x10] = data_10058d2c {"spanish-bolivia"}

10061b04              45 53 42 00                                                                              ESB.

10061b08  char const (* data_10061b08)[0xe] = data_10058d1c {"spanish-chile"}

10061b0c                                      45 53 4c 00                                                              ESL.

10061b10  char const (* data_10061b10)[0x11] = data_10058d08 {"spanish-colombia"}

10061b14                                                              45 53 4f 00                                              ESO.

10061b18  char const (* data_10061b18)[0x13] = data_10058cf4 {"spanish-costa rica"}

10061b1c                                                                                      45 53 43 00                              ESC.

10061b20  char const (* data_10061b20)[0x1b] = data_10058cd8 {"spanish-dominican republic"}

10061b24              45 53 44 00                                                                              ESD.

10061b28  char const (* data_10061b28)[0x10] = data_10058cc8 {"spanish-ecuador"}

10061b2c                                      45 53 46 00                                                              ESF.

10061b30  char const (* data_10061b30)[0x14] = data_10058cb4 {"spanish-el salvador"}

10061b34                                                              45 53 45 00                                              ESE.

10061b38  char const (* data_10061b38)[0x12] = data_10058ca0 {"spanish-guatemala"}

10061b3c                                                                                      45 53 47 00                              ESG.

10061b40  char const (* data_10061b40)[0x11] = data_10058c8c {"spanish-honduras"}

10061b44              45 53 48 00                                                                              ESH.

10061b48  char const (* data_10061b48)[0x10] = data_10058c7c {"spanish-mexican"}

10061b4c                                      45 53 4d 00                                                              ESM.

10061b50  char const (* data_10061b50)[0xf] = data_10058c6c {"spanish-modern"}

10061b54                                                              45 53 4e 00                                              ESN.

10061b58  char const (* data_10061b58)[0x12] = data_10058c58 {"spanish-nicaragua"}

10061b5c                                                                                      45 53 49 00                              ESI.

10061b60  char const (* data_10061b60)[0xf] = data_10058c48 {"spanish-panama"}

10061b64              45 53 41 00                                                                              ESA.

10061b68  char const (* data_10061b68)[0x11] = data_10058c34 {"spanish-paraguay"}

10061b6c                                      45 53 5a 00                                                              ESZ.

10061b70  char const (* data_10061b70)[0xd] = data_10058c24 {"spanish-peru"}

10061b74                                                              45 53 52 00                                              ESR.

10061b78  char const (* data_10061b78)[0x14] = data_10058c10 {"spanish-puerto rico"}

10061b7c                                                                                      45 53 55 00                              ESU.

10061b80  char const (* data_10061b80)[0x10] = data_10058c00 {"spanish-uruguay"}

10061b84              45 53 59 00                                                                              ESY.

10061b88  char const (* data_10061b88)[0x12] = data_10058bec {"spanish-venezuela"}

10061b8c                                      45 53 56 00                                                              ESV.

10061b90  char const (* data_10061b90)[0x10] = data_10058bdc {"swedish-finland"}

10061b94                                                              53 56 46 00                                              SVF.

10061b98  char const (* data_10061b98)[0x6] = data_10058bd4 {"swiss"}

10061b9c                                                                                      44 45 53 00                              DES.

10061ba0  void* data_10061ba0 = 0x10058bd0

10061ba4              45 4e 47 00                                                                              ENG.

10061ba8  void* data_10061ba8 = 0x10058bcc

10061bac                                      45 4e 55 00                                                              ENU.

10061bb0  void* data_10061bb0 = 0x10058bc8

10061bb4                                                              45 4e 55 00 20 05 93 19                                  ENU. ...

10061bbc  int32_t data_10061bbc = 0x0
10061bc0  int32_t data_10061bc0 = 0x0
10061bc4  int32_t data_10061bc4 = 0x0
10061bc8  int32_t time_offset_base = 0x7080
10061bcc  int32_t time_fallback_enabled = 0x1
10061bd0  int32_t time_fallback_offset = -0xe10

10061bd4                                                              50 53 54 00 00 00 00 00 00 00 00 00                      PST.........
10061be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 44 54 00 00 00 00 00 00 00 00 00  ....................PDT.........
10061c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10061c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                      ....................

10061c54  void* data_10061c54 = 0x10061bd4
10061c58  void* data_10061c58 = 0x10061c14

10061c5c                                                                                      00 00 00 00                              ....

10061c60  int32_t data_10061c60 = -0x1
10061c64  int32_t data_10061c64 = 0x0
10061c68  int32_t data_10061c68 = 0x0

10061c6c                                      00 00 00 00                                                              ....

10061c70  int32_t data_10061c70 = -0x1
10061c74  int32_t data_10061c74 = 0x0
10061c78  int32_t data_10061c78 = 0x0

10061c7c  data_10061c7c:
10061c7c                                                                                      ff ff ff ff                              ....
10061c80  1e 00 00 00 3b 00 00 00 5a 00 00 00 78 00 00 00 97 00 00 00 b5 00 00 00 d4 00 00 00 f3 00 00 00  ....;...Z...x...................
10061ca0  11 01 00 00 30 01 00 00 4e 01 00 00                                                              ....0...N...
10061cac  stream_buffer_table:
10061cac                                      6d 01 00 00                                                              m...
10061cb0  data_10061cb0:
10061cb0                                                  ff ff ff ff 1e 00 00 00 3a 00 00 00 59 00 00 00                  ........:...Y...
10061cc0  77 00 00 00 96 00 00 00 b4 00 00 00 d3 00 00 00 f2 00 00 00 10 01 00 00 2f 01 00 00 4d 01 00 00  w......................./...M...
10061ce0  6c 01 00 00                                                                                      l...

10061ce4  void* data_10061ce4 = data_10061ce8
10061ce8  void* data_10061ce8 = 0x100591a4
10061cec  void* data_10061cec = 0x100591a0
10061cf0  void* data_10061cf0 = 0x1005919c
10061cf4  void* data_10061cf4 = 0x10059198
10061cf8  void* data_10061cf8 = 0x10059194
10061cfc  void* data_10061cfc = 0x10059190
10061d00  void* data_10061d00 = 0x1005918c
10061d04  char const (* data_10061d04)[0x7] = data_10059184 {"Sunday"}
10061d08  char const (* data_10061d08)[0x7] = data_1005917c {"Monday"}
10061d0c  char const (* data_10061d0c)[0x8] = data_10059174 {"Tuesday"}
10061d10  char const (* data_10061d10)[0xa] = data_10059168 {"Wednesday"}
10061d14  char const (* data_10061d14)[0x9] = data_1005915c {"Thursday"}
10061d18  char const (* data_10061d18)[0x7] = data_10059154 {"Friday"}
10061d1c  char const (* data_10061d1c)[0x9] = data_10059148 {"Saturday"}
10061d20  void* data_10061d20 = 0x10059144
10061d24  void* data_10061d24 = 0x10059140
10061d28  void* data_10061d28 = 0x1005913c
10061d2c  void* data_10061d2c = 0x10059138
10061d30  void* data_10061d30 = 0x10059134
10061d34  void* data_10061d34 = 0x10059130
10061d38  void* data_10061d38 = 0x1005912c
10061d3c  void* data_10061d3c = 0x10059128
10061d40  void* data_10061d40 = 0x10059124
10061d44  void* data_10061d44 = 0x10059120
10061d48  void* data_10061d48 = 0x1005911c
10061d4c  void* data_10061d4c = 0x10059118
10061d50  char const (* data_10061d50)[0x8] = data_10059110 {"January"}
10061d54  char const (* data_10061d54)[0x9] = data_10059104 {"February"}
10061d58  char const (* data_10061d58)[0x6] = data_100590fc {"March"}
10061d5c  char const (* data_10061d5c)[0x6] = data_100590f4 {"April"}
10061d60  void* data_10061d60 = 0x10059134
10061d64  char const (* data_10061d64)[0x5] = data_100590ec {"June"}
10061d68  char const (* data_10061d68)[0x5] = data_100590e4 {"July"}
10061d6c  char const (* data_10061d6c)[0x7] = data_100590dc {"August"}
10061d70  char const (* data_10061d70)[0xa] = data_100590d0 {"September"}
10061d74  char const (* data_10061d74)[0x8] = data_100590c8 {"October"}
10061d78  char const (* data_10061d78)[0x9] = data_100590bc {"November"}
10061d7c  char const (* data_10061d7c)[0x9] = data_100590b0 {"December"}
10061d80  void* data_10061d80 = 0x100590ac
10061d84  void* data_10061d84 = 0x100590a8
10061d88  char const (* data_10061d88)[0x7] = data_100590a0 {"M/d/yy"}
10061d8c  char const (* data_10061d8c)[0x14] = data_1005908c {"dddd, MMMM dd, yyyy"}
10061d90  char const (* data_10061d90)[0x8] = data_10059084 {"H:mm:ss"}

10061d94                                                              00 00 00 00                                              ....
10061d98  data_10061d98:
10061d98                                                                          2e 00 00 00 00 00 00 00                          ........

10061da0  void* data_10061da0 = data_10061d98
10061da4  void* data_10061da4 = 0x10063758
10061da8  void* data_10061da8 = 0x10063758
10061dac  void* data_10061dac = 0x10063758
10061db0  void* data_10061db0 = 0x10063758
10061db4  void* data_10061db4 = 0x10063758
10061db8  void* data_10061db8 = 0x10063758
10061dbc  void* data_10061dbc = 0x10063758
10061dc0  void* data_10061dc0 = 0x10063758
10061dc4  void* data_10061dc4 = 0x10063758

10061dc8                          7f 7f 7f 7f 7f 7f 7f 7f                                                          ........

10061dd0  void* data_10061dd0 = data_10061da0

10061dd4                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............
10061de0  00 00 00 00 00 00 00 00 00 a0 02 40 00 00 00 00 00 00 00 00 00 c8 05 40 00 00 00 00 00 00 00 00  ...........@...........@........
10061e00  00 fa 08 40 00 00 00 00 00 00 00 00 40 9c 0c 40 00 00 00 00 00 00 00 00 50 c3 0f 40 00 00 00 00  ...@........@..@........P..@....
10061e20  00 00 00 00 24 f4 12 40 00 00 00 00 00 00 00 80 96 98 16 40 00 00 00 00 00 00 00 20 bc be 19 40  ....$..@...........@....... ...@
10061e40  00 00 00 00 00 04 bf c9 1b 8e 34 40 00 00 00 a1 ed cc ce 1b c2 d3 4e 40 20 f0 9e b5 70 2b a8 ad  ..........4@..........N@ ...p+..
10061e60  c5 9d 69 40 d0 5d fd 25 e5 1a 8e 4f 19 eb 83 40 71 96 d7 95 43 0e 05 8d 29 af 9e 40 f9 bf a0 44  ..i@.].%...O...@q...C...)..@...D
10061e80  ed 81 12 8f 81 82 b9 40 bf 3c d5 a6 cf ff 49 1f 78 c2 d3 40 6f c6 e0 8c e9 80 c9 47 ba 93 a8 41  .......@.<....I.x..@o......G...A
10061ea0  bc 85 6b 55 27 39 8d f7 70 e0 7c 42 bc dd 8e de f9 9d fb eb 7e aa 51 43 a1 e6 76 e3 cc f2 29 2f  ..kU'9..p.|B........~.QC..v...)/
10061ec0  84 81 26 44 28 10 17 aa f8 ae 10 e3 c5 c4 fa 44 eb a7 d4 f3 f7 eb e1 4a 7a 95 cf 45 65 cc c7 91  ..&D(..........D.......Jz..Ee...
10061ee0  data_10061ee0:
10061ee0  0e a6 ae a0 19 e3 a3 46 0d 65 17 0c 75 81 86 75 76 c9 48 4d 58 42 e4 a7 93 39 3b 35 b8 b2 ed 53  .......F.e..u..uv.HMXB...9;5...S
10061f00  4d a7 e5 5d 3d c5 5d 3b 8b 9e 92 5a ff 5d a6 f0 a1 20 c0 54 a5 8c 37 61 d1 fd 8b 5a 8b d8 25 5d  M..]=.];...Z.]... .T..7a...Z..%]
10061f20  89 f9 db 67 aa 95 f8 f3 27 bf a2 c8 5d dd 80 6e 4c c9 9b 97 20 8a 02 52 60 c4 25 75 00 00 00 00  ...g....'...]..nL... ..R`.%u....
10061f40  cd cc cd cc cc cc cc cc cc cc fb 3f 71 3d 0a d7 a3 70 3d 0a d7 a3 f8 3f 5a 64 3b df 4f 8d 97 6e  ...........?q=...p=....?Zd;.O..n
10061f60  12 83 f5 3f c3 d3 2c 65 19 e2 58 17 b7 d1 f1 3f d0 0f 23 84 47 1b 47 ac c5 a7 ee 3f 40 a6 b6 69  ...?..,e..X....?..#.G.G....?@..i
10061f80  6c af 05 bd 37 86 eb 3f 33 3d bc 42 7a e5 d5 94 bf d6 e7 3f c2 fd fd ce 61 84 11 77 cc ab e4 3f  l...7..?3=.Bz......?....a..w...?
10061fa0  2f 4c 5b e1 4d c4 be 94 95 e6 c9 3f 92 c4 53 3b 75 44 cd 14 be 9a af 3f de 67 ba 94 39 45 ad 1e  /L[.M......?..S;uD.....?.g..9E..
10061fc0  b1 cf 94 3f 24 23 c6 e2 bc ba 3b 31 61 8b 7a 3f 61 55 59 c1 7e b1 53 7c 12 bb 5f 3f d7 ee 2f 8d  ...?$#....;1a.z?aUY.~.S|.._?../.
10061fe0  06 be 92 85 15 fb 44 3f 24 3f a5 e9 39 a5 27 ea 7f a8 2a 3f 7d ac a1 e4 bc 64 7c 46 d0 dd 55 3e  ......D?$?..9.'...*?}....d|F..U>
10062000  63 7b 06 cc 23 54 77 83 ff 91 81 3d 91 fa 3a 19 7a 63 25 43 31 c0 ac 3c 21 89 d1 38 82 47 97 b8  c{..#Tw....=..:.zc%C1..<!..8.G..
10062020  00 fd d7 3b dc 88 58 08 1b b1 e8 e3 86 a6 03 3b c6 84 45 42 07 b6 99 75 37 db 2e 3a 33 71 1c d2  ...;..X........;..EB...u7..:3q..
10062040  23 db 32 ee 49 90 5a 39 a6 87 be c0 57 da a5 82 a6 a2 b5 32 e2 68 b2 11 a7 52 9f 44 59 b7 10 2c  #.2.I.Z9....W......2.h...R.DY..,
10062060  25 49 e4 2d 36 34 4f 53 ae ce 6b 25 8f 59 04 a4 c0 de c2 7d fb e8 c6 1e 9e e7 88 5a 57 91 3c bf  %I.-64OS..k%.Y.....}.......ZW.<.
10062080  50 83 22 18 4e 4b 65 62 fd 83 8f af 06 94 7d 11 e4 2d de 9f ce d2 c8 04 dd a6 d8 0a              P.".NKeb......}..-..........

1006209c  char const (* data_1006209c)[0x5] = data_10059220 {".cmd"}
100620a0  char const (* data_100620a0)[0x5] = data_10059218 {".bat"}
100620a4  char const (* data_100620a4)[0x5] = data_10059210 {".exe"}
100620a8  char const (* data_100620a8)[0x5] = data_10059208 {".com"}

100620ac                                      02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
100620c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100620e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100621a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100621c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100621e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100622a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100622c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100622e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100623a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100623c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100623e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100624a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100624c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100624e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100625a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100625c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100625e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100626a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100626c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100626e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100627a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100627c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100627e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100628a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100628c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100628e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062900  00 00 00 00 00 00 00 00                                                                          ........
10062908  data_10062908:
10062908                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
10062920  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1006292c  int32_t data_1006292c = 0x0

10062930                                                  00 00 00 00                                                      ....

10062934  int32_t data_10062934 = 0x0
10062938  int32_t data_10062938 = 0x0
1006293c  int32_t data_1006293c = 0x0

10062940  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1006294c  char data_1006294c = 0x0

1006294d                                         00 00 00                                                               ...

10062950  int32_t data_10062950 = 0x0
10062954  int32_t data_10062954 = 0x0

10062958                                                                          00 00 00 00                                      ....

1006295c  int32_t data_1006295c = 0x0
10062960  int32_t data_10062960 = 0x0

10062964              00 00 00 00                                                                              ....

10062968  int32_t data_10062968 = 0x0
1006296c  int32_t data_1006296c = 0x0
10062970  int32_t data_10062970 = 0x0

10062974                                                              00 00 00 00 00 00 00 00                                  ........

1006297c  int32_t data_1006297c = 0x0
10062980  int32_t data_10062980 = 0x0
10062984  int32_t data_10062984 = 0x0
10062988  int32_t data_10062988 = 0x0
1006298c  int32_t data_1006298c = 0x0

10062990  data_10062990:
10062990                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
100629a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100629c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100629e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

10062d98  int32_t data_10062d98 = 0x0

10062d9c                                                                                      00 00 00 00                              ....
10062da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10062fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100630a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100630c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100630e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ............................

1006319c  int32_t data_1006319c = 0x0
100631a0  int32_t data_100631a0 = 0x0
100631a4  int32_t data_100631a4 = 0x0
100631a8  int32_t data_100631a8 = 0x0
100631ac  int32_t data_100631ac = 0x0
100631b0  int32_t data_100631b0 = 0x0
100631b4  int32_t data_100631b4 = 0x0
100631b8  int32_t data_100631b8 = 0x0
100631bc  int32_t data_100631bc = 0x0
100631c0  int32_t data_100631c0 = 0x0
100631c4  int32_t data_100631c4 = 0x0
100631c8  int32_t data_100631c8 = 0x0

100631cc  data_100631cc:
100631cc                                      00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
100631e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100632a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100632c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100632e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063380  00 00 00 00                                                                                      ....

10063384  int32_t data_10063384 = 0x0
10063388  int32_t data_10063388 = 0x0

1006338c                                      00 00 00 00                                                              ....

10063390  int32_t data_10063390 = 0x0

10063394  data_10063394:
10063394                                                              00 00 00 00                                              ....

10063398  int16_t data_10063398 = 0x0
1006339a  int16_t data_1006339a = 0x0

1006339c  data_1006339c:
1006339c                                                                                      00 00                                    ..

1006339e  int16_t data_1006339e = 0x0
100633a0  int16_t data_100633a0 = 0x0
100633a2  int16_t data_100633a2 = 0x0

100633a4              00 00 00 00                                                                              ....

100633a8  int32_t data_100633a8 = 0x0
100633ac  int32_t data_100633ac = 0x0
100633b0  int32_t data_100633b0 = 0x0
100633b4  int32_t data_100633b4 = 0x0

100633b8                                                                          00 00 00 00                                      ....

100633bc  int32_t data_100633bc = 0x0
100633c0  int32_t data_100633c0 = 0x0
100633c4  int32_t num_active_arena_streams = 0x0

100633c8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
100633e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063420  00 00 00 00 00 00 00 00                                                                          ........
10063428  g_config_entry_metadata_6b:
10063428                          00 00 00 00                                                                      ....

1006342c  int16_t g_config_entry_flags = 0x0

1006342e                                            00 00                                                                ..

10063430  int32_t g_config_entry_metadata_4b = 0x0

10063434  data_10063434:
10063434                                                              00 00 00 00 00 00 00 00                                  ........

1006343c  int32_t data_1006343c = 0x0
10063440  int32_t data_10063440 = 0x0
10063444  int32_t data_10063444 = 0x0
10063448  int32_t data_10063448 = 0x0
1006344c  int32_t g_codepage_default = 0x0
10063450  int32_t data_10063450 = 0x0
10063454  int32_t g_lcmap_mode = 0x0

10063458  arena_stream_buffers[]:
10063458                                                                          00 00 00 00 00 00 00 00                          ........
10063460  data_10063460:
10063460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ............................

1006347c  int32_t data_1006347c = 0x0
10063480  int32_t data_10063480 = 0x0
10063484  int32_t data_10063484 = 0x0
10063488  int32_t data_10063488 = 0x0
1006348c  int32_t data_1006348c = 0x0
10063490  int32_t data_10063490 = 0x0
10063494  int32_t data_10063494 = 0x0

10063498                                                                          00 00 00 00                                      ....

1006349c  int32_t data_1006349c = 0x0
100634a0  int32_t data_100634a0 = 0x0
100634a4  int32_t data_100634a4 = 0x0

100634a8                          00 00 00 00                                                                      ....

100634ac  int32_t data_100634ac = 0x0

100634b0                                                  00 00 00 00                                                      ....

100634b4  char data_100634b4 = 0x0

100634b5                                                                 00 00 00                                               ...

100634b8  int32_t data_100634b8 = 0x0
100634bc  int32_t data_100634bc = 0x0

100634c0  data_100634c0:
100634c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100634e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100635a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100635c0  00 00 00 00                                                                                      ....

100635c4  int32_t data_100635c4 = 0x0
100635c8  int32_t data_100635c8 = 0x0
100635cc  int32_t data_100635cc = 0x0
100635d0  int32_t data_100635d0 = 0x0
100635d4  int32_t data_100635d4 = 0x0
100635d8  int32_t g_allocMode = 0x0
100635dc  int32_t data_100635dc = 0x0
100635e0  int32_t data_100635e0 = 0x0
100635e4  int32_t data_100635e4 = 0x0
100635e8  int32_t data_100635e8 = 0x0
100635ec  int32_t data_100635ec = 0x0
100635f0  int32_t data_100635f0 = 0x0
100635f4  int32_t data_100635f4 = 0x0
100635f8  int32_t data_100635f8 = 0x0

100635fc  data_100635fc:
100635fc                                                                                      00 00 00 00                              ....
10063600  00 00 00 00 00 00 00 00                                                                          ........

10063608  int16_t data_10063608 = 0x0

1006360a                                00 00 00 00 00 00                                                            ......

10063610  int16_t data_10063610 = 0x0

10063612                                                        00 00 00 00                                                  ....

10063616  int16_t data_10063616 = 0x0

10063618                                                                          00 00                                            ..

1006361a  int16_t data_1006361a = 0x0
1006361c  int16_t data_1006361c = 0x0

1006361e                                                                                            00 00                                ..

10063620  int32_t data_10063620 = 0x0
10063624  int32_t data_10063624 = 0x0
10063628  int32_t data_10063628 = 0x0
1006362c  int32_t data_1006362c = 0x0
10063630  int32_t data_10063630 = 0x0
10063634  int32_t data_10063634 = 0x0
10063638  int16_t data_10063638 = 0x0

1006363a                                                                                00 00                                        ..

1006363c  int32_t data_1006363c = 0x0
10063640  int32_t data_10063640 = 0x0

10063644              00 00 00 00                                                                              ....

10063648  int32_t data_10063648 = 0x0

1006364c                                      00 00 00 00                                                              ....

10063650  int32_t data_10063650 = 0x0

10063654  data_10063654:
10063654                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............
10063660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                      ....................

10063694  int16_t data_10063694 = 0x0
10063696  int16_t data_10063696 = 0x0
10063698  int16_t data_10063698 = 0x0
1006369a  int16_t data_1006369a = 0x0
1006369c  int16_t data_1006369c = 0x0
1006369e  int16_t data_1006369e = 0x0
100636a0  int16_t data_100636a0 = 0x0
100636a2  int16_t data_100636a2 = 0x0
100636a4  int32_t data_100636a4 = 0x0

100636a8  data_100636a8:
100636a8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
100636c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100636e0  00 00 00 00 00 00 00 00                                                                          ........

100636e8  int16_t data_100636e8 = 0x0
100636ea  int16_t data_100636ea = 0x0
100636ec  int16_t data_100636ec = 0x0
100636ee  int16_t data_100636ee = 0x0
100636f0  int16_t data_100636f0 = 0x0
100636f2  int16_t data_100636f2 = 0x0
100636f4  int16_t data_100636f4 = 0x0
100636f6  int16_t data_100636f6 = 0x0
100636f8  int32_t data_100636f8 = 0x0
100636fc  int32_t data_100636fc = 0x0
10063700  int32_t data_10063700 = 0x0

10063704              00 00 00 00                                                                              ....
10063708  data_10063708:
10063708                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
10063720  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1006372c  int32_t data_1006372c = 0x0
10063730  int32_t data_10063730 = 0x0
10063734  int32_t data_10063734 = 0x0
10063738  int32_t data_10063738 = 0x0
1006373c  int32_t data_1006373c = 0x0
10063740  int32_t data_10063740 = 0x0
10063744  int32_t data_10063744 = 0x0
10063748  int32_t data_10063748 = 0x0
1006374c  int32_t data_1006374c = 0x0

10063750  data_10063750:
10063750                                                  00 00 00 00 00 00 00 00 00 00 00 00                              ............

1006375c  int32_t data_1006375c = 0x0
10063760  int32_t data_10063760 = 0x0
10063764  int32_t data_10063764 = 0x0
10063768  int32_t data_10063768 = 0x0

1006376c                                      00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ....................
10063780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100637a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100637c0  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

100637cc  int32_t data_100637cc = 0x0
100637d0  int32_t data_100637d0 = 0x0
100637d4  int32_t data_100637d4 = 0x0
100637d8  int32_t data_100637d8 = 0x0
100637dc  int32_t data_100637dc = 0x0
100637e0  int32_t data_100637e0 = 0x0

100637e4              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................

10063800  char data_10063800 = 0x0

10063801     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ...............................
10063820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

10063880  int32_t data_10063880 = 0x0
10063884  int32_t data_10063884 = 0x0

10063888                          00 00 00 00 00 00 00 00                                                          ........

10063890  int32_t data_10063890 = 0x0
10063894  int32_t data_10063894 = 0x0
10063898  int32_t data_10063898 = 0x0

1006389c                                                                                      00 00 00 00                              ....
100638a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100638c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

100638e0  int32_t data_100638e0 = 0x0
100638e4  int32_t data_100638e4 = 0x0
100638e8  int32_t data_100638e8 = 0x0
100638ec  int32_t data_100638ec = 0x0
100638f0  int32_t data_100638f0 = 0x0
100638f4  int32_t data_100638f4 = 0x0

100638f8                                                                          00 00 00 00 00 00 00 00                          ........

10063900  int32_t data_10063900 = 0x0
10063904  int32_t data_10063904 = 0x0
10063908  int32_t data_10063908 = 0x0
1006390c  int32_t data_1006390c = 0x0
10063910  int32_t data_10063910 = 0x0
10063914  int32_t data_10063914 = 0x0
10063918  int32_t data_10063918 = 0x0
1006391c  int32_t data_1006391c = 0x0
10063920  int32_t data_10063920 = 0x0
10063924  int32_t data_10063924 = 0x0
10063928  int32_t data_10063928 = 0x0
1006392c  int32_t data_1006392c = 0x0
10063930  int32_t data_10063930 = 0x0
10063934  int32_t data_10063934 = 0x0
10063938  int32_t data_10063938 = 0x0
1006393c  int32_t data_1006393c = 0x0

10063940  00 00 00 00 00 00 00 00 00 00 00 00 00                                                           .............

1006394d  char data_1006394d = 0x0

1006394e                                            00 00 00 00 00 00 00 00                                              ........
10063956  data_10063956:
10063956                                                                    00 00 00 00 00 00 00 00 00 00                        ..........
10063960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100639a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100639c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

100639d8  int32_t data_100639d8 = 0x0
100639dc  int32_t data_100639dc = 0x0
100639e0  int32_t data_100639e0 = 0x0
100639e4  int32_t data_100639e4 = 0x0
100639e8  int32_t data_100639e8 = 0x0
100639ec  int32_t data_100639ec = 0x0
100639f0  int32_t data_100639f0 = 0x0

100639f4                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............
10063a00  00 00 00 00 00 00 00 00                                                                          ........

10063a08  int32_t data_10063a08 = 0x0
10063a0c  int32_t data_10063a0c = 0x0
10063a10  int32_t data_10063a10 = 0x0

10063a14                                                              00 00 00 00 00 00 00 00                                  ........

10063a1c  int32_t data_10063a1c = 0x0

10063a20  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

10063a2c  int32_t data_10063a2c = 0x0
10063a30  int32_t data_10063a30 = 0x0

10063a34                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............
10063a40  data_10063a40:
10063a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

10063e40  int32_t data_10063e40 = 0x0
10063e44  int32_t data_10063e44 = 0x0

10063e48                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
10063e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

10063f20  int32_t data_10063f20 = 0x0

10063f24              00 00 00 00 00 00 00 00                                                                  ........

10063f2c  int32_t data_10063f2c = 0x0

10063f30                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
10063f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10063f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

10063f80  int32_t data_10063f80 = 0x0
10063f84  int32_t data_10063f84 = 0x0
10063f88  int32_t data_10063f88 = 0x0
10063f8c  int32_t data_10063f8c = 0x0
10063f90  int32_t data_10063f90 = 0x0
10063f94  int32_t data_10063f94 = 0x0
10063f98  int32_t data_10063f98 = 0x0
10063f9c  int32_t data_10063f9c = 0x0
10063fa0  int32_t data_10063fa0 = 0x0
10063fa4  int32_t data_10063fa4 = 0x0
10063fa8  int32_t data_10063fa8 = 0x0
10063fac  int32_t data_10063fac = 0x0
10063fb0  int32_t data_10063fb0 = 0x0
10063fb4  int32_t data_10063fb4 = 0x0
10063fb8  int32_t data_10063fb8 = 0x0
10063fbc  int32_t data_10063fbc = 0x0
10063fc0  int32_t data_10063fc0 = 0x0
10063fc4  int32_t data_10063fc4 = 0x0
10063fc8  int32_t data_10063fc8 = 0x0
10063fcc  int32_t data_10063fcc = 0x0

10063fd0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................

10063fe0  int32_t data_10063fe0 = 0x0
10063fe4  int32_t data_10063fe4 = 0x0
10063fe8  int32_t data_10063fe8 = 0x0
10063fec  int32_t data_10063fec = 0x0
10063ff0  int32_t data_10063ff0 = 0x0
10063ff4  int32_t data_10063ff4 = 0x0
10063ff8  int32_t data_10063ff8 = 0x0
10063ffc  int32_t data_10063ffc = 0x0

10064000  00 00 00 00                                                                                      ....

10064004  int32_t data_10064004 = 0x0

10064008                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

10064020  int32_t data_10064020 = 0x0
10064024  int32_t data_10064024 = 0x0
10064028  int32_t data_10064028 = 0x0
1006402c  int32_t data_1006402c = 0x0
10064030  int32_t data_10064030 = 0x0
10064034  int32_t data_10064034 = 0x0
10064038  int32_t data_10064038 = 0x0
1006403c  int32_t data_1006403c = 0x0
10064040  int32_t data_10064040 = 0x0
10064044  int32_t data_10064044 = 0x0
10064048  int32_t data_10064048 = 0x0
1006404c  int32_t data_1006404c = 0x0
10064050  int32_t data_10064050 = 0x0
10064054  int32_t data_10064054 = 0x0
10064058  int32_t data_10064058 = 0x0
1006405c  int32_t data_1006405c = 0x0
10064060  int32_t data_10064060 = 0x0
10064064  int32_t data_10064064 = 0x0
10064068  int32_t data_10064068 = 0x0
1006406c  int32_t data_1006406c = 0x0

10064070                                                  00 00 00 00                                                      ....

10064074  int32_t data_10064074 = 0x0

10064078                                                                          00 00 00 00 00 00 00 00                          ........

10064080  int32_t data_10064080 = 0x0

10064084              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
100640a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100640c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100640e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100641a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100641c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100641e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100642a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100642c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100642e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064340  00 00 00 00                                                                                      ....

10064344  int32_t data_10064344 = 0x0

10064348                          00 00 00 00 00 00 00 00 00 00 00 00                                              ............

10064354  int32_t data_10064354 = 0x0
10064358  int32_t data_10064358 = 0x0
1006435c  int32_t data_1006435c = 0x0
10064360  int32_t data_10064360 = 0x0
10064364  int32_t data_10064364 = 0x0

10064368                          00 00 00 00 00 00 00 00 00 00 00 00                                              ............

10064374  int32_t data_10064374 = 0x0
10064378  int32_t data_10064378 = 0x0
1006437c  int32_t data_1006437c = 0x0
10064380  int32_t data_10064380 = 0x0
10064384  int32_t data_10064384 = 0x0
10064388  int32_t data_10064388 = 0x0

1006438c                                      00 00 00 00 00 00 00 00 00 00 00 00                                      ............

10064398  int32_t data_10064398 = 0x0
1006439c  int32_t data_1006439c = 0x0
100643a0  int32_t data_100643a0 = 0x0
100643a4  int32_t data_100643a4 = 0x0
100643a8  int32_t data_100643a8 = 0x0
100643ac  int32_t data_100643ac = 0x0

100643b0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
100643c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100643e0  data_100643e0:
100643e0  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

100643ec  int32_t data_100643ec = 0x0

100643f0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
10064400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064420  data_10064420:
10064420  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............

1006442c  int32_t data_1006442c = 0x0

10064430                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
10064440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

10064458  int32_t data_10064458 = 0x0
1006445c  int32_t data_1006445c = 0x0
10064460  int32_t data_10064460 = 0x0
10064464  int32_t data_10064464 = 0x0
10064468  int32_t data_10064468 = 0x0
1006446c  int32_t data_1006446c = 0x0
10064470  int32_t data_10064470 = 0x0
10064474  int32_t data_10064474 = 0x0
10064478  int32_t data_10064478 = 0x0
1006447c  int32_t data_1006447c = 0x0
10064480  int32_t data_10064480 = 0x0
10064484  int32_t data_10064484 = 0x0
10064488  int32_t data_10064488 = 0x0
1006448c  int32_t data_1006448c = 0x0
10064490  int32_t data_10064490 = 0x0
10064494  int32_t data_10064494 = 0x0
10064498  int32_t data_10064498 = 0x0
1006449c  int32_t data_1006449c = 0x0
100644a0  int32_t data_100644a0 = 0x0

100644a4              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
100644c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100644e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100645a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100645c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100645e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100646a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100646c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100646e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100647a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100647c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100647e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100648a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100648c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100648e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100649a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100649c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100649e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10064fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100650a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100650c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100650e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100651a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100651c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100651e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100652a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100652c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100652e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100653a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100653c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100653e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100654a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100654c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100654e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100655a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100655c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100655e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100656a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100656c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100656e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100657a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100657c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100657e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100658a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100658c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100658e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100659a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100659c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100659e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10065fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100660a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100660c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100660e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100661a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100661c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100661e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100662a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100662c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100662e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100663a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100663c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100663e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100664a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100664c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100664e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100665a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100665c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100665e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100666a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100666c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100666e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

10066730  int32_t data_10066730 = 0x0

10066734                                                              00 00 00 00 00 00 00 00 00 00 00 00                      ............

10066740  int32_t data_10066740 = 0x0
10066744  int32_t data_10066744 = 0x0
10066748  int32_t data_10066748 = 0x0

1006674c                                      00 00 00 00 00 00 00 00 00 00 00 00                                      ............

10066758  int32_t data_10066758 = 0x0
1006675c  int32_t data_1006675c = 0x0

10066760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

10066778  int32_t data_10066778 = 0x0
1006677c  int32_t data_1006677c = 0x0

10066780  00 00 00 00                                                                                      ....

10066784  int32_t data_10066784 = 0x0
10066788  int32_t data_10066788 = 0x0
1006678c  int32_t data_1006678c = 0x0
10066790  int32_t data_10066790 = 0x0
10066794  int32_t data_10066794 = 0x0
10066798  int32_t data_10066798 = 0x0

1006679c                                                                                      00 00 00 00                              ....

100667a0  int32_t data_100667a0 = 0x0
100667a4  int32_t data_100667a4 = 0x0

100667a8                          00 00 00 00                                                                      ....

100667ac  int32_t data_100667ac = 0x0

100667b0                                                  00 00 00 00                                                      ....

100667b4  int32_t data_100667b4 = 0x0
100667b8  int32_t data_100667b8 = 0x0
100667bc  int32_t data_100667bc = 0x0
100667c0  int32_t data_100667c0 = 0x0
100667c4  int32_t data_100667c4 = 0x0

100667c8                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

100667e0  int32_t data_100667e0 = 0x0
100667e4  int32_t data_100667e4 = 0x0
100667e8  int32_t data_100667e8 = 0x0
100667ec  int32_t data_100667ec = 0x0

100667f0  data_100667f0:
100667f0                                                  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                  ................
10066800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066880  data_10066880:
10066880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100668a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100668c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100668e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

10066910  int32_t data_10066910 = 0x0
10066914  int32_t data_10066914 = 0x0
10066918  int32_t data_10066918 = 0x0
1006691c  int32_t data_1006691c = 0x0
10066920  int32_t data_10066920 = 0x0
10066924  int32_t data_10066924 = 0x0
10066928  int32_t data_10066928 = 0x0
1006692c  int32_t data_1006692c = 0x0
10066930  int32_t data_10066930 = 0x0
10066934  int32_t data_10066934 = 0x0
10066938  int32_t data_10066938 = 0x0
1006693c  int32_t data_1006693c = 0x0
10066940  int32_t data_10066940 = 0x0
10066944  int32_t data_10066944 = 0x0
10066948  int32_t data_10066948 = 0x0
1006694c  int32_t data_1006694c = 0x0
10066950  int32_t data_10066950 = 0x0
10066954  int32_t data_10066954 = 0x0
10066958  int32_t data_10066958 = 0x0
1006695c  int32_t data_1006695c = 0x0
10066960  int32_t data_10066960 = 0x0
10066964  int32_t data_10066964 = 0x0
10066968  int32_t data_10066968 = 0x0
1006696c  int32_t data_1006696c = 0x0
10066970  int32_t data_10066970 = 0x0
10066974  int32_t data_10066974 = 0x0
10066978  int32_t data_10066978 = 0x0
1006697c  int32_t data_1006697c = 0x0
10066980  int32_t data_10066980 = 0x0

10066984              00 00 00 00                                                                              ....

10066988  int32_t data_10066988 = 0x0
1006698c  int32_t data_1006698c = 0x0
10066990  int32_t data_10066990 = 0x0
10066994  int32_t data_10066994 = 0x0
10066998  int32_t data_10066998 = 0x0
1006699c  int32_t data_1006699c = 0x0
100669a0  int32_t data_100669a0 = 0x0
100669a4  int32_t data_100669a4 = 0x0
100669a8  int32_t data_100669a8 = 0x0
100669ac  int32_t data_100669ac = 0x0
100669b0  int32_t data_100669b0 = 0x0
100669b4  int32_t data_100669b4 = 0x0
100669b8  int32_t data_100669b8 = 0x0
100669bc  int32_t data_100669bc = 0x0
100669c0  int32_t data_100669c0 = 0x0
100669c4  int32_t data_100669c4 = 0x0
100669c8  int32_t data_100669c8 = 0x0
100669cc  int32_t data_100669cc = 0x0
100669d0  int32_t data_100669d0 = 0x0
100669d4  int32_t data_100669d4 = 0x0
100669d8  int32_t data_100669d8 = 0x0
100669dc  int32_t data_100669dc = 0x0
100669e0  int32_t data_100669e0 = 0x0
100669e4  int32_t data_100669e4 = 0x0

100669e8  data_100669e8:
100669e8                          00 00 00 00                                                                      ....

100669ec  int32_t data_100669ec = 0x0
100669f0  int32_t data_100669f0 = 0x0
100669f4  int32_t data_100669f4 = 0x0
100669f8  int32_t data_100669f8 = 0x0
100669fc  int32_t data_100669fc = 0x0
10066a00  int32_t data_10066a00 = 0x0
10066a04  int32_t data_10066a04 = 0x0
10066a08  int32_t data_10066a08 = 0x0
10066a0c  int32_t data_10066a0c = 0x0
10066a10  int32_t data_10066a10 = 0x0
10066a14  int32_t data_10066a14 = 0x0
10066a18  int32_t data_10066a18 = 0x0
10066a1c  int32_t data_10066a1c = 0x0
10066a20  int32_t data_10066a20 = 0x0

10066a24              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
10066a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066a60  00 00 00 00 00 00 00 00                                                                          ........

10066a68  int32_t data_10066a68 = 0x0
10066a6c  int32_t data_10066a6c = 0x0
10066a70  int32_t data_10066a70 = 0x0
10066a74  int32_t data_10066a74 = 0x0
10066a78  int32_t data_10066a78 = 0x0
10066a7c  int32_t data_10066a7c = 0x0
10066a80  int32_t data_10066a80 = 0x0

10066a84              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
10066aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                      ....................

10066b14  int32_t data_10066b14 = 0x0

10066b18                                                                          00 00 00 00 00 00 00 00                          ........
10066b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066cc0  data_10066cc0:
10066cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10066fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100670a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100670c0  data_100670c0:
100670c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100670e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100671a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100671c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100671e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100672a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100672c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100672e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100673a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100673c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100673e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100674a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

100674c0  int32_t data_100674c0 = 0x0
100674c4  int32_t data_100674c4 = 0x0
100674c8  int32_t data_100674c8 = 0x0
100674cc  int32_t data_100674cc = 0x0
100674d0  int32_t data_100674d0 = 0x0
100674d4  int32_t data_100674d4 = 0x0
100674d8  int32_t data_100674d8 = 0x0
100674dc  int32_t data_100674dc = 0x0
100674e0  int32_t data_100674e0 = 0x0
100674e4  int32_t data_100674e4 = 0x0
100674e8  int32_t data_100674e8 = 0x0
100674ec  int32_t data_100674ec = 0x0
100674f0  int32_t data_100674f0 = 0x0
100674f4  int32_t data_100674f4 = 0x0
100674f8  int32_t data_100674f8 = 0x0
100674fc  int32_t data_100674fc = 0x0
10067500  int32_t data_10067500 = 0x0
10067504  int32_t data_10067504 = 0x0
10067508  int32_t data_10067508 = 0x0
1006750c  int32_t data_1006750c = 0x0
10067510  int32_t data_10067510 = 0x0
10067514  int32_t data_10067514 = 0x0
10067518  int32_t data_10067518 = 0x0
1006751c  int32_t data_1006751c = 0x0
10067520  int32_t data_10067520 = 0x0
10067524  int32_t data_10067524 = 0x0
10067528  int32_t data_10067528 = 0x0
1006752c  int32_t data_1006752c = 0x0
10067530  int32_t data_10067530 = 0x0
10067534  int32_t data_10067534 = 0x0
10067538  int32_t data_10067538 = 0x0
1006753c  int32_t data_1006753c = 0x0
10067540  int32_t data_10067540 = 0x0
10067544  int32_t data_10067544 = 0x0
10067548  int32_t data_10067548 = 0x0
1006754c  int32_t data_1006754c = 0x0
10067550  int32_t data_10067550 = 0x0
10067554  int32_t data_10067554 = 0x0
10067558  int32_t data_10067558 = 0x0
1006755c  int32_t data_1006755c = 0x0
10067560  int32_t data_10067560 = 0x0

10067564  data_10067564:
10067564              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
10067580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100675a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100675c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100675e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100676a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100676c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100676e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100677a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100677c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100677e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100678a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100678c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100678e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100679a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100679c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100679e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10067fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100680a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100680c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100680e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100681a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100681c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100681e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100682a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100682c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100682e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100683a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100683c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100683e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100684a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100684c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100684e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100685a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100685c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100685e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100686a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100686c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100686e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100687a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100687c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100687e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100688a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100688c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100688e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100689a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100689c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100689e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068ee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068f00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068f20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068f40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10068fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100690a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100690c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100690e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100691a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100691c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100691e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100692a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100692c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100692e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100693a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100693c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100693e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100694a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100694c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100694e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069560  00 00 00 00                                                                                      ....

10069564  int32_t data_10069564 = 0x0
10069568  int32_t data_10069568 = 0x0
1006956c  int32_t data_1006956c = 0x0
10069570  int32_t data_10069570 = 0x0
10069574  int32_t data_10069574 = 0x0
10069578  int32_t data_10069578 = 0x0
1006957c  int32_t data_1006957c = 0x0
10069580  int32_t data_10069580 = 0x0
10069584  int32_t data_10069584 = 0x0

10069588                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................
100695a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100695c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100695e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100696a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100696c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100696e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100697a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100697c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100697e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100698a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100698c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100698e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100699a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100699c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100699e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

10069c20  int32_t data_10069c20 = 0x0

10069c24              00 00 00 00 00 00 00 00 00 00 00 00                                                      ............

10069c30  int32_t data_10069c30 = 0x0
10069c34  int32_t data_10069c34 = 0x0

10069c38                                                                          00 00 00 00 00 00 00 00                          ........
10069c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069ca0  00 00 00 00 00 00 00 00 00 00 00 00                                                              ............
10069cac  data_10069cac:
10069cac                                      00 00 00 00                                                              ....

10069cb0  int32_t data_10069cb0 = 0x0

10069cb4  data_10069cb4:
10069cb4                                                              00 00 00 00 00 00 00 00                                  ........

10069cbc  int32_t data_10069cbc = 0x0

10069cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069de0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069e00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069e20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069e40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069e60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069e80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069ea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069ec0  00 00 00 00                                                                                      ....

10069ec4  int32_t data_10069ec4 = 0x0
10069ec8  int32_t data_10069ec8 = 0x0

10069ecc                                      00 00 00 00 00 00 00 00 00 00 00 00                                      ............

10069ed8  int32_t data_10069ed8 = 0x0
10069edc  int32_t data_10069edc = 0x0
10069ee0  int32_t data_10069ee0 = 0x0
10069ee4  int32_t data_10069ee4 = 0x0

10069ee8                          00 00 00 00 00 00 00 00 00 00 00 00                                              ............

10069ef4  int32_t data_10069ef4 = 0x0
10069ef8  int32_t data_10069ef8 = 0x0
10069efc  int32_t data_10069efc = 0x0
10069f00  int32_t data_10069f00 = 0x0
10069f04  int32_t data_10069f04 = 0x0
10069f08  int32_t g_heapHandle = 0x0

10069f0c                                      00 00 00 00 00 00 00 00                                                  ........

10069f14  int32_t data_10069f14 = 0x0

10069f18                                                                          00 00 00 00 00 00 00 00                          ........
10069f20  00 00 00 00                                                                                      ....

10069f24  int32_t data_10069f24 = 0x0

10069f28                          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00          ........................

10069f40  int32_t data_10069f40 = 0x0

10069f44  data_10069f44:
10069f44              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
10069f60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069f80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069fa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069fc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10069fe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00              ............................

1006a07c  int32_t data_1006a07c = 0x0
1006a080  int32_t data_1006a080 = 0x0

1006a084              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
1006a0a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a0c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a0e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a1a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a1c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a1e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a2a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a2c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a2e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a3a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a3c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a3e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a400  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a420  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a440  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a460  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a480  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a4a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a4c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a4e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a500  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a520  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a540  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a560  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a580  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a5a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a5c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a5e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a600  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a620  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a640  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a660  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a6a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a6c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a6e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a7a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a7c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a7e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a8a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a8c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a8e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a9a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a9c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006a9e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aa00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aa20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aa40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aa60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aa80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aaa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ab00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ab20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ab40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ab60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ab80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006abc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006abe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ac00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ac20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ac40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ac60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ac80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006acc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ace0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ad00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ad20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ad40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ad60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ad80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ada0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006adc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ade0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ae00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ae20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ae40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ae60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006ae80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aea0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aec0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006aee0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006af00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006af20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006af40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006af60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006af80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006afa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006afc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006afe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b0a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b0c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b0e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b100  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b120  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b140  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b160  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b180  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b1a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b1c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b1e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b220  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b240  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b260  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b280  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b2a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b2c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b2e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b300  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b320  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b340  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b360  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b380  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006b3a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................

1006b3c0  int32_t data_1006b3c0 = 0x0
1006b3c4  int32_t data_1006b3c4 = 0x0

1006b3c8                          00 00 00 00 00 00 00 00 00 00 00 00                                              ............

1006b3d4  int32_t data_1006b3d4 = 0x0
.data section ended  {0x1005a000-0x1006b3d8}

.idata section started  {0x1006c000-0x1006cc25}
1006c000  struct Import_Directory_Table __import_directory_entries[0x2] = 
1006c000  {
1006c000      [0x0] = 
1006c000      {
1006c000          uint32_t importLookupTableRva = 0x6c028
1006c004          uint32_t timeDateStamp = 0x0
1006c008          uint32_t forwarderChain = 0x0
1006c00c          uint32_t nameRva = 0x6c496
1006c010          uint32_t importAddressTableRva = 0x6c210
1006c014      }
1006c014      [0x1] = 
1006c014      {
1006c014          uint32_t importLookupTableRva = 0x0
1006c018          uint32_t timeDateStamp = 0x0
1006c01c          uint32_t forwarderChain = 0x0
1006c020          uint32_t nameRva = 0x0
1006c024          uint32_t importAddressTableRva = 0x0
1006c028      }
1006c028  }
1006c028  uint32_t __import_lookup_table_0(KERNEL32:GetCurrentThread) = 0x6c72e
1006c02c  uint32_t __import_lookup_table_0(KERNEL32:GetProcAddress) = 0x6c406
1006c030  uint32_t __import_lookup_table_0(KERNEL32:LoadLibraryA) = 0x6c418
1006c034  uint32_t __import_lookup_table_0(KERNEL32:SearchPathA) = 0x6c428
1006c038  uint32_t __import_lookup_table_0(KERNEL32:GlobalUnlock) = 0x6c436
1006c03c  uint32_t __import_lookup_table_0(KERNEL32:GlobalFree) = 0x6c446
1006c040  uint32_t __import_lookup_table_0(KERNEL32:GlobalLock) = 0x6c454
1006c044  uint32_t __import_lookup_table_0(KERNEL32:GlobalAlloc) = 0x6c462
1006c048  uint32_t __import_lookup_table_0(KERNEL32:GetVersion) = 0x6c470
1006c04c  uint32_t __import_lookup_table_0(KERNEL32:lstrcpyA) = 0x6c47e
1006c050  uint32_t __import_lookup_table_0(KERNEL32:lstrlenA) = 0x6c48a
1006c054  uint32_t __import_lookup_table_0(KERNEL32:GetLastError) = 0x6c4a4
1006c058  uint32_t __import_lookup_table_0(KERNEL32:DeleteFileA) = 0x6c4b4
1006c05c  uint32_t __import_lookup_table_0(KERNEL32:SetEnvironmentVariableA) = 0x6c4c2
1006c060  uint32_t __import_lookup_table_0(KERNEL32:GetCurrentDirectoryA) = 0x6c4dc
1006c064  uint32_t __import_lookup_table_0(KERNEL32:SetCurrentDirectoryA) = 0x6c4f4
1006c068  uint32_t __import_lookup_table_0(KERNEL32:GetFullPathNameA) = 0x6c50c
1006c06c  uint32_t __import_lookup_table_0(KERNEL32:GetDriveTypeA) = 0x6c520
1006c070  uint32_t __import_lookup_table_0(KERNEL32:InterlockedDecrement) = 0x6c530
1006c074  uint32_t __import_lookup_table_0(KERNEL32:InterlockedIncrement) = 0x6c548
1006c078  uint32_t __import_lookup_table_0(KERNEL32:GetTimeZoneInformation) = 0x6c560
1006c07c  uint32_t __import_lookup_table_0(KERNEL32:GetSystemTime) = 0x6c57a
1006c080  uint32_t __import_lookup_table_0(KERNEL32:GetLocalTime) = 0x6c58a
1006c084  uint32_t __import_lookup_table_0(KERNEL32:GetSystemTimeAsFileTime) = 0x6c59a
1006c088  uint32_t __import_lookup_table_0(KERNEL32:HeapFree) = 0x6c5b4
1006c08c  uint32_t __import_lookup_table_0(KERNEL32:GetCommandLineA) = 0x6c5c0
1006c090  uint32_t __import_lookup_table_0(KERNEL32:GetModuleHandleA) = 0x6c5d2
1006c094  uint32_t __import_lookup_table_0(KERNEL32:RaiseException) = 0x6c5e6
1006c098  uint32_t __import_lookup_table_0(KERNEL32:EnterCriticalSection) = 0x6c5f8
1006c09c  uint32_t __import_lookup_table_0(KERNEL32:LeaveCriticalSection) = 0x6c610
1006c0a0  uint32_t __import_lookup_table_0(KERNEL32:ReadFile) = 0x6c628
1006c0a4  uint32_t __import_lookup_table_0(KERNEL32:SetFilePointer) = 0x6c634
1006c0a8  uint32_t __import_lookup_table_0(KERNEL32:CloseHandle) = 0x6c646
1006c0ac  uint32_t __import_lookup_table_0(KERNEL32:InitializeCriticalSection) = 0x6c654
1006c0b0  uint32_t __import_lookup_table_0(KERNEL32:WriteFile) = 0x6c670
1006c0b4  uint32_t __import_lookup_table_0(KERNEL32:SetHandleCount) = 0x6c67c
1006c0b8  uint32_t __import_lookup_table_0(KERNEL32:GetStdHandle) = 0x6c68e
1006c0bc  uint32_t __import_lookup_table_0(KERNEL32:GetFileType) = 0x6c69e
1006c0c0  uint32_t __import_lookup_table_0(KERNEL32:GetStartupInfoA) = 0x6c6ac
1006c0c4  uint32_t __import_lookup_table_0(KERNEL32:DeleteCriticalSection) = 0x6c6be
1006c0c8  uint32_t __import_lookup_table_0(KERNEL32:GetCurrentThreadId) = 0x6c6d6
1006c0cc  uint32_t __import_lookup_table_0(KERNEL32:TlsSetValue) = 0x6c6ec
1006c0d0  uint32_t __import_lookup_table_0(KERNEL32:TlsAlloc) = 0x6c6fa
1006c0d4  uint32_t __import_lookup_table_0(KERNEL32:TlsFree) = 0x6c706
1006c0d8  uint32_t __import_lookup_table_0(KERNEL32:SetLastError) = 0x6c710
1006c0dc  uint32_t __import_lookup_table_0(KERNEL32:TlsGetValue) = 0x6c720
1006c0e0  uint32_t __import_lookup_table_0(KERNEL32:FreeLibrary) = 0x6c3f8
1006c0e4  uint32_t __import_lookup_table_0(KERNEL32:ExitProcess) = 0x6c742
1006c0e8  uint32_t __import_lookup_table_0(KERNEL32:FatalAppExitA) = 0x6c750
1006c0ec  uint32_t __import_lookup_table_0(KERNEL32:HeapAlloc) = 0x6c760
1006c0f0  uint32_t __import_lookup_table_0(KERNEL32:Sleep) = 0x6c76c
1006c0f4  uint32_t __import_lookup_table_0(KERNEL32:WideCharToMultiByte) = 0x6c774
1006c0f8  uint32_t __import_lookup_table_0(KERNEL32:MultiByteToWideChar) = 0x6c78a
1006c0fc  uint32_t __import_lookup_table_0(KERNEL32:LCMapStringA) = 0x6c7a0
1006c100  uint32_t __import_lookup_table_0(KERNEL32:LCMapStringW) = 0x6c7b0
1006c104  uint32_t __import_lookup_table_0(KERNEL32:FlushFileBuffers) = 0x6c7c0
1006c108  uint32_t __import_lookup_table_0(KERNEL32:HeapDestroy) = 0x6c7d4
1006c10c  uint32_t __import_lookup_table_0(KERNEL32:HeapCreate) = 0x6c7e2
1006c110  uint32_t __import_lookup_table_0(KERNEL32:VirtualFree) = 0x6c7f0
1006c114  uint32_t __import_lookup_table_0(KERNEL32:VirtualAlloc) = 0x6c7fe
1006c118  uint32_t __import_lookup_table_0(KERNEL32:HeapReAlloc) = 0x6c80e
1006c11c  uint32_t __import_lookup_table_0(KERNEL32:IsBadWritePtr) = 0x6c81c
1006c120  uint32_t __import_lookup_table_0(KERNEL32:TerminateProcess) = 0x6c82c
1006c124  uint32_t __import_lookup_table_0(KERNEL32:GetCurrentProcess) = 0x6c840
1006c128  uint32_t __import_lookup_table_0(KERNEL32:GetModuleFileNameA) = 0x6c854
1006c12c  uint32_t __import_lookup_table_0(KERNEL32:FreeEnvironmentStringsA) = 0x6c86a
1006c130  uint32_t __import_lookup_table_0(KERNEL32:FreeEnvironmentStringsW) = 0x6c884
1006c134  uint32_t __import_lookup_table_0(KERNEL32:GetEnvironmentStrings) = 0x6c89e
1006c138  uint32_t __import_lookup_table_0(KERNEL32:GetEnvironmentStringsW) = 0x6c8b6
1006c13c  uint32_t __import_lookup_table_0(KERNEL32:GetStringTypeA) = 0x6c8d0
1006c140  uint32_t __import_lookup_table_0(KERNEL32:GetStringTypeW) = 0x6c8e2
1006c144  uint32_t __import_lookup_table_0(KERNEL32:SetStdHandle) = 0x6c8f4
1006c148  uint32_t __import_lookup_table_0(KERNEL32:CreateFileA) = 0x6c904
1006c14c  uint32_t __import_lookup_table_0(KERNEL32:UnhandledExceptionFilter) = 0x6c912
1006c150  uint32_t __import_lookup_table_0(KERNEL32:GetCPInfo) = 0x6c92e
1006c154  uint32_t __import_lookup_table_0(KERNEL32:GetACP) = 0x6c93a
1006c158  uint32_t __import_lookup_table_0(KERNEL32:GetOEMCP) = 0x6c944
1006c15c  uint32_t __import_lookup_table_0(KERNEL32:IsValidLocale) = 0x6c950
1006c160  uint32_t __import_lookup_table_0(KERNEL32:IsValidCodePage) = 0x6c960
1006c164  uint32_t __import_lookup_table_0(KERNEL32:GetLocaleInfoA) = 0x6c972
1006c168  uint32_t __import_lookup_table_0(KERNEL32:EnumSystemLocalesA) = 0x6c984
1006c16c  uint32_t __import_lookup_table_0(KERNEL32:GetUserDefaultLCID) = 0x6c99a
1006c170  uint32_t __import_lookup_table_0(KERNEL32:GetVersionExA) = 0x6c9b0
1006c174  uint32_t __import_lookup_table_0(KERNEL32:RtlUnwind) = 0x6c9c0
1006c178  uint32_t __import_lookup_table_0(KERNEL32:SetConsoleCtrlHandler) = 0x6c9cc
1006c17c  uint32_t __import_lookup_table_0(KERNEL32:SetEndOfFile) = 0x6c9e4
1006c180  uint32_t __import_lookup_table_0(KERNEL32:GetLocaleInfoW) = 0x6c9f4
1006c184  uint32_t __import_lookup_table_0(KERNEL32:CompareStringA) = 0x6ca06
1006c188  uint32_t __import_lookup_table_0(KERNEL32:CompareStringW) = 0x6ca18
1006c18c  uint32_t __import_lookup_table_0(KERNEL32:GetFileAttributesA) = 0x6ca2a
1006c190  uint32_t __import_lookup_table_0(KERNEL32:GetExitCodeProcess) = 0x6ca40
1006c194  uint32_t __import_lookup_table_0(KERNEL32:WaitForSingleObject) = 0x6ca56
1006c198  uint32_t __import_lookup_table_0(KERNEL32:CreateProcessA) = 0x6ca6c
1006c19c  uint32_t data_1006c19c = 0x0

1006c1a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006c1c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006c1e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006c200  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                  ................

1006c210  HANDLE (__stdcall* const KERNEL32:GetCurrentThread)() = GetCurrentThread
1006c214  FARPROC (__stdcall* const KERNEL32:GetProcAddress)(HMODULE hModule, PSTR lpProcName) = GetProcAddress
1006c218  HMODULE (__stdcall* const KERNEL32:LoadLibraryA)(PSTR lpLibFileName) = LoadLibraryA
1006c21c  uint32_t (__stdcall* const KERNEL32:SearchPathA)(PSTR lpPath, PSTR lpFileName, PSTR lpExtension, uint32_t nBufferLength, uint8_t* lpBuffer, PSTR* lpFilePart) = SearchPathA
1006c220  BOOL (__stdcall* const KERNEL32:GlobalUnlock)(HGLOBAL hMem) = GlobalUnlock
1006c224  HGLOBAL (__stdcall* const KERNEL32:GlobalFree)(HGLOBAL hMem) = GlobalFree
1006c228  void* (__stdcall* const KERNEL32:GlobalLock)(HGLOBAL hMem) = GlobalLock
1006c22c  HGLOBAL (__stdcall* const KERNEL32:GlobalAlloc)(enum GLOBAL_ALLOC_FLAGS uFlags, uint32_t dwBytes) = GlobalAlloc
1006c230  uint32_t (__stdcall* const KERNEL32:GetVersion)() = GetVersion
1006c234  PSTR (__stdcall* const KERNEL32:lstrcpyA)(PSTR lpString1, PSTR lpString2) = lstrcpyA
1006c238  int32_t (__stdcall* const KERNEL32:lstrlenA)(PSTR lpString) = lstrlenA
1006c23c  enum WIN32_ERROR (__stdcall* const KERNEL32:GetLastError)() = GetLastError
1006c240  BOOL (__stdcall* const KERNEL32:DeleteFileA)(PSTR lpFileName) = DeleteFileA
1006c244  BOOL (__stdcall* const KERNEL32:SetEnvironmentVariableA)(PSTR lpName, PSTR lpValue) = SetEnvironmentVariableA
1006c248  uint32_t (__stdcall* const KERNEL32:GetCurrentDirectoryA)(uint32_t nBufferLength, uint8_t* lpBuffer) = GetCurrentDirectoryA
1006c24c  BOOL (__stdcall* const KERNEL32:SetCurrentDirectoryA)(PSTR lpPathName) = SetCurrentDirectoryA
1006c250  uint32_t (__stdcall* const KERNEL32:GetFullPathNameA)(PSTR lpFileName, uint32_t nBufferLength, uint8_t* lpBuffer, PSTR* lpFilePart) = GetFullPathNameA
1006c254  uint32_t (__stdcall* const KERNEL32:GetDriveTypeA)(PSTR lpRootPathName) = GetDriveTypeA
1006c258  int32_t (* const KERNEL32:InterlockedDecrement)() = InterlockedDecrement
1006c25c  int32_t (* const KERNEL32:InterlockedIncrement)() = InterlockedIncrement
1006c260  uint32_t (__stdcall* const KERNEL32:GetTimeZoneInformation)(TIME_ZONE_INFORMATION* lpTimeZoneInformation) = GetTimeZoneInformation
1006c264  void (__stdcall* const KERNEL32:GetSystemTime)(SYSTEMTIME* lpSystemTime) = GetSystemTime
1006c268  void (__stdcall* const KERNEL32:GetLocalTime)(SYSTEMTIME* lpSystemTime) = GetLocalTime
1006c26c  void (__stdcall* const KERNEL32:GetSystemTimeAsFileTime)(FILETIME* lpSystemTimeAsFileTime) = GetSystemTimeAsFileTime
1006c270  BOOL (__stdcall* const KERNEL32:HeapFree)(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem) = HeapFree
1006c274  PSTR (__stdcall* const KERNEL32:GetCommandLineA)() = GetCommandLineA
1006c278  HMODULE (__stdcall* const KERNEL32:GetModuleHandleA)(PSTR lpModuleName) = GetModuleHandleA
1006c27c  void (__stdcall* const KERNEL32:RaiseException)(uint32_t dwExceptionCode, uint32_t dwExceptionFlags, uint32_t nNumberOfArguments, uint32_t* lpArguments) __noreturn = RaiseException
1006c280  void (__stdcall* const KERNEL32:EnterCriticalSection)(CRITICAL_SECTION* lpCriticalSection) = EnterCriticalSection
1006c284  void (__stdcall* const KERNEL32:LeaveCriticalSection)(CRITICAL_SECTION* lpCriticalSection) = LeaveCriticalSection
1006c288  BOOL (__stdcall* const KERNEL32:ReadFile)(HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToRead, uint32_t* lpNumberOfBytesRead, OVERLAPPED* lpOverlapped) = ReadFile
1006c28c  uint32_t (__stdcall* const KERNEL32:SetFilePointer)(HANDLE hFile, int32_t lDistanceToMove, int32_t* lpDistanceToMoveHigh, enum SET_FILE_POINTER_MOVE_METHOD dwMoveMethod) = SetFilePointer
1006c290  BOOL (__stdcall* const KERNEL32:CloseHandle)(HANDLE hObject) = CloseHandle
1006c294  void (__stdcall* const KERNEL32:InitializeCriticalSection)(CRITICAL_SECTION* lpCriticalSection) = InitializeCriticalSection
1006c298  BOOL (__stdcall* const KERNEL32:WriteFile)(HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToWrite, uint32_t* lpNumberOfBytesWritten, OVERLAPPED* lpOverlapped) = WriteFile
1006c29c  uint32_t (__stdcall* const KERNEL32:SetHandleCount)(uint32_t uNumber) = SetHandleCount
1006c2a0  HANDLE (__stdcall* const KERNEL32:GetStdHandle)(enum STD_HANDLE nStdHandle) = GetStdHandle
1006c2a4  enum FILE_TYPE (__stdcall* const KERNEL32:GetFileType)(HANDLE hFile) = GetFileType
1006c2a8  void (__stdcall* const KERNEL32:GetStartupInfoA)(STARTUPINFOA* lpStartupInfo) = GetStartupInfoA
1006c2ac  void (__stdcall* const KERNEL32:DeleteCriticalSection)(CRITICAL_SECTION* lpCriticalSection) = DeleteCriticalSection
1006c2b0  uint32_t (__stdcall* const KERNEL32:GetCurrentThreadId)() = GetCurrentThreadId
1006c2b4  BOOL (__stdcall* const KERNEL32:TlsSetValue)(uint32_t dwTlsIndex, void* lpTlsValue) = TlsSetValue
1006c2b8  uint32_t (__stdcall* const KERNEL32:TlsAlloc)() = TlsAlloc
1006c2bc  BOOL (__stdcall* const KERNEL32:TlsFree)(uint32_t dwTlsIndex) = TlsFree
1006c2c0  void (__stdcall* const KERNEL32:SetLastError)(enum WIN32_ERROR dwErrCode) = SetLastError
1006c2c4  void* (__stdcall* const KERNEL32:TlsGetValue)(uint32_t dwTlsIndex) = TlsGetValue
1006c2c8  BOOL (__stdcall* const KERNEL32:FreeLibrary)(HMODULE hLibModule) = FreeLibrary
1006c2cc  void (__stdcall* const KERNEL32:ExitProcess)(uint32_t uExitCode) __noreturn = ExitProcess
1006c2d0  void (__stdcall* const KERNEL32:FatalAppExitA)(uint32_t uAction, PSTR lpMessageText) = FatalAppExitA
1006c2d4  void* (__stdcall* const KERNEL32:HeapAlloc)(HANDLE hHeap, enum HEAP_FLAGS dwFlags, uint32_t dwBytes) = HeapAlloc
1006c2d8  void (__stdcall* const KERNEL32:Sleep)(uint32_t dwMilliseconds) = Sleep
1006c2dc  int32_t (__stdcall* const KERNEL32:WideCharToMultiByte)(uint32_t CodePage, uint32_t dwFlags, wchar16* lpWideCharStr, int32_t cchWideChar, PSTR lpMultiByteStr, int32_t cbMultiByte, PSTR lpDefaultChar, BOOL* lpUsedDefaultChar) = WideCharToMultiByte
1006c2e0  int32_t (__stdcall* const KERNEL32:MultiByteToWideChar)(uint32_t CodePage, enum MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, uint8_t* lpMultiByteStr, int32_t cbMultiByte, wchar16* lpWideCharStr, int32_t cchWideChar) = MultiByteToWideChar
1006c2e4  int32_t (__stdcall* const KERNEL32:LCMapStringA)(uint32_t Locale, uint32_t dwMapFlags, uint8_t* lpSrcStr, int32_t cchSrc, PSTR lpDestStr, int32_t cchDest) = LCMapStringA
1006c2e8  int32_t (__stdcall* const KERNEL32:LCMapStringW)(uint32_t Locale, uint32_t dwMapFlags, wchar16* lpSrcStr, int32_t cchSrc, PWSTR lpDestStr, int32_t cchDest) = LCMapStringW
1006c2ec  BOOL (__stdcall* const KERNEL32:FlushFileBuffers)(HANDLE hFile) = FlushFileBuffers
1006c2f0  BOOL (__stdcall* const KERNEL32:HeapDestroy)(HANDLE hHeap) = HeapDestroy
1006c2f4  HANDLE (__stdcall* const KERNEL32:HeapCreate)(enum HEAP_FLAGS flOptions, uint32_t dwInitialSize, uint32_t dwMaximumSize) = HeapCreate
1006c2f8  BOOL (__stdcall* const KERNEL32:VirtualFree)(void* lpAddress, uint32_t dwSize, enum VIRTUAL_FREE_TYPE dwFreeType) = VirtualFree
1006c2fc  void* (__stdcall* const KERNEL32:VirtualAlloc)(void* lpAddress, uint32_t dwSize, enum VIRTUAL_ALLOCATION_TYPE flAllocationType, enum PAGE_PROTECTION_FLAGS flProtect) = VirtualAlloc
1006c300  void* (__stdcall* const KERNEL32:HeapReAlloc)(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem, uint32_t dwBytes) = HeapReAlloc
1006c304  BOOL (__stdcall* const KERNEL32:IsBadWritePtr)(void* lp, uint32_t ucb) = IsBadWritePtr
1006c308  BOOL (__stdcall* const KERNEL32:TerminateProcess)(HANDLE hProcess, uint32_t uExitCode) = TerminateProcess
1006c30c  HANDLE (__stdcall* const KERNEL32:GetCurrentProcess)() = GetCurrentProcess
1006c310  uint32_t (__stdcall* const KERNEL32:GetModuleFileNameA)(HMODULE hModule, uint8_t* lpFilename, uint32_t nSize) = GetModuleFileNameA
1006c314  BOOL (__stdcall* const KERNEL32:FreeEnvironmentStringsA)(PSTR penv) = FreeEnvironmentStringsA
1006c318  BOOL (__stdcall* const KERNEL32:FreeEnvironmentStringsW)(PWSTR penv) = FreeEnvironmentStringsW
1006c31c  PSTR (__stdcall* const KERNEL32:GetEnvironmentStrings)() = GetEnvironmentStrings
1006c320  PWSTR (__stdcall* const KERNEL32:GetEnvironmentStringsW)() = GetEnvironmentStringsW
1006c324  BOOL (__stdcall* const KERNEL32:GetStringTypeA)(uint32_t Locale, uint32_t dwInfoType, uint8_t* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType) = GetStringTypeA
1006c328  BOOL (__stdcall* const KERNEL32:GetStringTypeW)(uint32_t dwInfoType, wchar16* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType) = GetStringTypeW
1006c32c  BOOL (__stdcall* const KERNEL32:SetStdHandle)(enum STD_HANDLE nStdHandle, HANDLE hHandle) = SetStdHandle
1006c330  HANDLE (__stdcall* const KERNEL32:CreateFileA)(PSTR lpFileName, uint32_t dwDesiredAccess, enum FILE_SHARE_MODE dwShareMode, SECURITY_ATTRIBUTES* lpSecurityAttributes, enum FILE_CREATION_DISPOSITION dwCreationDisposition, enum FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, HANDLE hTemplateFile) = CreateFileA
1006c334  int32_t (__stdcall* const KERNEL32:UnhandledExceptionFilter)(EXCEPTION_POINTERS* ExceptionInfo) = UnhandledExceptionFilter
1006c338  BOOL (__stdcall* const KERNEL32:GetCPInfo)(uint32_t CodePage, CPINFO* lpCPInfo) = GetCPInfo
1006c33c  uint32_t (__stdcall* const KERNEL32:GetACP)() = GetACP
1006c340  uint32_t (__stdcall* const KERNEL32:GetOEMCP)() = GetOEMCP
1006c344  BOOL (__stdcall* const KERNEL32:IsValidLocale)(uint32_t Locale, enum IS_VALID_LOCALE_FLAGS dwFlags) = IsValidLocale
1006c348  BOOL (__stdcall* const KERNEL32:IsValidCodePage)(uint32_t CodePage) = IsValidCodePage
1006c34c  int32_t (__stdcall* const KERNEL32:GetLocaleInfoA)(uint32_t Locale, uint32_t LCType, uint8_t* lpLCData, int32_t cchData) = GetLocaleInfoA
1006c350  BOOL (__stdcall* const KERNEL32:EnumSystemLocalesA)(LOCALE_ENUMPROCA lpLocaleEnumProc, uint32_t dwFlags) = EnumSystemLocalesA
1006c354  uint32_t (__stdcall* const KERNEL32:GetUserDefaultLCID)() = GetUserDefaultLCID
1006c358  BOOL (__stdcall* const KERNEL32:GetVersionExA)(OSVERSIONINFOA* lpVersionInformation) = GetVersionExA
1006c35c  void (__stdcall* const KERNEL32:RtlUnwind)(void* TargetFrame, void* TargetIp, EXCEPTION_RECORD* ExceptionRecord, void* ReturnValue) = RtlUnwind
1006c360  BOOL (__stdcall* const KERNEL32:SetConsoleCtrlHandler)(PHANDLER_ROUTINE HandlerRoutine, BOOL Add) = SetConsoleCtrlHandler
1006c364  BOOL (__stdcall* const KERNEL32:SetEndOfFile)(HANDLE hFile) = SetEndOfFile
1006c368  int32_t (__stdcall* const KERNEL32:GetLocaleInfoW)(uint32_t Locale, uint32_t LCType, wchar16* lpLCData, int32_t cchData) = GetLocaleInfoW
1006c36c  enum COMPARESTRING_RESULT (__stdcall* const KERNEL32:CompareStringA)(uint32_t Locale, uint32_t dwCmpFlags, char* lpString1, int32_t cchCount1, char* lpString2, int32_t cchCount2) = CompareStringA
1006c370  enum COMPARESTRING_RESULT (__stdcall* const KERNEL32:CompareStringW)(uint32_t Locale, uint32_t dwCmpFlags, wchar16* lpString1, int32_t cchCount1, wchar16* lpString2, int32_t cchCount2) = CompareStringW
1006c374  uint32_t (__stdcall* const KERNEL32:GetFileAttributesA)(PSTR lpFileName) = GetFileAttributesA
1006c378  BOOL (__stdcall* const KERNEL32:GetExitCodeProcess)(HANDLE hProcess, uint32_t* lpExitCode) = GetExitCodeProcess
1006c37c  enum WAIT_EVENT (__stdcall* const KERNEL32:WaitForSingleObject)(HANDLE hHandle, uint32_t dwMilliseconds) = WaitForSingleObject
1006c380  BOOL (__stdcall* const KERNEL32:CreateProcessA)(PSTR lpApplicationName, PSTR lpCommandLine, SECURITY_ATTRIBUTES* lpProcessAttributes, SECURITY_ATTRIBUTES* lpThreadAttributes, BOOL bInheritHandles, enum PROCESS_CREATION_FLAGS dwCreationFlags, void* lpEnvironment, PSTR lpCurrentDirectory, STARTUPINFOA* lpStartupInfo, PROCESS_INFORMATION* lpProcessInformation) = CreateProcessA

1006c384              00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ............................
1006c3a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006c3c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006c3e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                          ........................

1006c3f8  uint16_t __export_name_ptr_table_0(KERNEL32:FreeLibrary) = 0xb4
1006c3fa  char __import_name_0(KERNEL32:FreeLibrary)[0xc] = "FreeLibrary", 0
1006c406  uint16_t __export_name_ptr_table_0(KERNEL32:GetProcAddress) = 0x13e
1006c408  char __import_name_0(KERNEL32:GetProcAddress)[0xf] = "GetProcAddress", 0

1006c417                                                                       00                                                 .

1006c418  uint16_t __export_name_ptr_table_0(KERNEL32:LoadLibraryA) = 0x1c2
1006c41a  char __import_name_0(KERNEL32:LoadLibraryA)[0xd] = "LoadLibraryA", 0

1006c427                       00                                                                                 .

1006c428  uint16_t __export_name_ptr_table_0(KERNEL32:SearchPathA) = 0x233
1006c42a  char __import_name_0(KERNEL32:SearchPathA)[0xc] = "SearchPathA", 0
1006c436  uint16_t __export_name_ptr_table_0(KERNEL32:GlobalUnlock) = 0x193
1006c438  char __import_name_0(KERNEL32:GlobalUnlock)[0xd] = "GlobalUnlock", 0

1006c445                 00                                                                                     .

1006c446  uint16_t __export_name_ptr_table_0(KERNEL32:GlobalFree) = 0x188
1006c448  char __import_name_0(KERNEL32:GlobalFree)[0xb] = "GlobalFree", 0

1006c453                                                           00                                                         .

1006c454  uint16_t __export_name_ptr_table_0(KERNEL32:GlobalLock) = 0x18c
1006c456  char __import_name_0(KERNEL32:GlobalLock)[0xb] = "GlobalLock", 0

1006c461     00                                                                                             .

1006c462  uint16_t __export_name_ptr_table_0(KERNEL32:GlobalAlloc) = 0x181
1006c464  char __import_name_0(KERNEL32:GlobalAlloc)[0xc] = "GlobalAlloc", 0
1006c470  uint16_t __export_name_ptr_table_0(KERNEL32:GetVersion) = 0x174
1006c472  char __import_name_0(KERNEL32:GetVersion)[0xb] = "GetVersion", 0

1006c47d                                                                                         00                                     .

1006c47e  uint16_t __export_name_ptr_table_0(KERNEL32:lstrcpyA) = 0x302
1006c480  char __import_name_0(KERNEL32:lstrcpyA)[0x9] = "lstrcpyA", 0

1006c489                             00                                                                             .

1006c48a  uint16_t __export_name_ptr_table_0(KERNEL32:lstrlenA) = 0x308
1006c48c  char __import_name_0(KERNEL32:lstrlenA)[0x9] = "lstrlenA", 0

1006c495                                                                 00                                                     .

1006c496  char __import_dll_name(KERNEL32)[0xd] = "KERNEL32.dll", 0

1006c4a3           00                                                                                         .

1006c4a4  uint16_t __export_name_ptr_table_0(KERNEL32:GetLastError) = 0x11a
1006c4a6  char __import_name_0(KERNEL32:GetLastError)[0xd] = "GetLastError", 0

1006c4b3                                                           00                                                         .

1006c4b4  uint16_t __export_name_ptr_table_0(KERNEL32:DeleteFileA) = 0x57
1006c4b6  char __import_name_0(KERNEL32:DeleteFileA)[0xc] = "DeleteFileA", 0
1006c4c2  uint16_t __export_name_ptr_table_0(KERNEL32:SetEnvironmentVariableA) = 0x262
1006c4c4  char __import_name_0(KERNEL32:SetEnvironmentVariableA)[0x18] = "SetEnvironmentVariableA", 0
1006c4dc  uint16_t __export_name_ptr_table_0(KERNEL32:GetCurrentDirectoryA) = 0xf5
1006c4de  char __import_name_0(KERNEL32:GetCurrentDirectoryA)[0x15] = "GetCurrentDirectoryA", 0

1006c4f3                                                           00                                                         .

1006c4f4  uint16_t __export_name_ptr_table_0(KERNEL32:SetCurrentDirectoryA) = 0x25d
1006c4f6  char __import_name_0(KERNEL32:SetCurrentDirectoryA)[0x15] = "SetCurrentDirectoryA", 0

1006c50b                                   00                                                                         .

1006c50c  uint16_t __export_name_ptr_table_0(KERNEL32:GetFullPathNameA) = 0x116
1006c50e  char __import_name_0(KERNEL32:GetFullPathNameA)[0x11] = "GetFullPathNameA", 0

1006c51f                                                                                               00                                 .

1006c520  uint16_t __export_name_ptr_table_0(KERNEL32:GetDriveTypeA) = 0x104
1006c522  char __import_name_0(KERNEL32:GetDriveTypeA)[0xe] = "GetDriveTypeA", 0
1006c530  uint16_t __export_name_ptr_table_0(KERNEL32:InterlockedDecrement) = 0x1ad
1006c532  char __import_name_0(KERNEL32:InterlockedDecrement)[0x15] = "InterlockedDecrement", 0

1006c547                       00                                                                                 .

1006c548  uint16_t __export_name_ptr_table_0(KERNEL32:InterlockedIncrement) = 0x1b0
1006c54a  char __import_name_0(KERNEL32:InterlockedIncrement)[0x15] = "InterlockedIncrement", 0

1006c55f                                                                                               00                                 .

1006c560  uint16_t __export_name_ptr_table_0(KERNEL32:GetTimeZoneInformation) = 0x170
1006c562  char __import_name_0(KERNEL32:GetTimeZoneInformation)[0x17] = "GetTimeZoneInformation", 0

1006c579                                                                             00                                             .

1006c57a  uint16_t __export_name_ptr_table_0(KERNEL32:GetSystemTime) = 0x15d
1006c57c  char __import_name_0(KERNEL32:GetSystemTime)[0xe] = "GetSystemTime", 0
1006c58a  uint16_t __export_name_ptr_table_0(KERNEL32:GetLocalTime) = 0x11b
1006c58c  char __import_name_0(KERNEL32:GetLocalTime)[0xd] = "GetLocalTime", 0

1006c599                                                                             00                                             .

1006c59a  uint16_t __export_name_ptr_table_0(KERNEL32:GetSystemTimeAsFileTime) = 0x15f
1006c59c  char __import_name_0(KERNEL32:GetSystemTimeAsFileTime)[0x18] = "GetSystemTimeAsFileTime", 0
1006c5b4  uint16_t __export_name_ptr_table_0(KERNEL32:HeapFree) = 0x19f
1006c5b6  char __import_name_0(KERNEL32:HeapFree)[0x9] = "HeapFree", 0

1006c5bf                                                                                               00                                 .

1006c5c0  uint16_t __export_name_ptr_table_0(KERNEL32:GetCommandLineA) = 0xca
1006c5c2  char __import_name_0(KERNEL32:GetCommandLineA)[0x10] = "GetCommandLineA", 0
1006c5d2  uint16_t __export_name_ptr_table_0(KERNEL32:GetModuleHandleA) = 0x126
1006c5d4  char __import_name_0(KERNEL32:GetModuleHandleA)[0x11] = "GetModuleHandleA", 0

1006c5e5                 00                                                                                     .

1006c5e6  uint16_t __export_name_ptr_table_0(KERNEL32:RaiseException) = 0x20b
1006c5e8  char __import_name_0(KERNEL32:RaiseException)[0xf] = "RaiseException", 0

1006c5f7                                                                       00                                                 .

1006c5f8  uint16_t __export_name_ptr_table_0(KERNEL32:EnterCriticalSection) = 0x66
1006c5fa  char __import_name_0(KERNEL32:EnterCriticalSection)[0x15] = "EnterCriticalSection", 0

1006c60f                                               00                                                                 .

1006c610  uint16_t __export_name_ptr_table_0(KERNEL32:LeaveCriticalSection) = 0x1c1
1006c612  char __import_name_0(KERNEL32:LeaveCriticalSection)[0x15] = "LeaveCriticalSection", 0

1006c627                       00                                                                                 .

1006c628  uint16_t __export_name_ptr_table_0(KERNEL32:ReadFile) = 0x218
1006c62a  char __import_name_0(KERNEL32:ReadFile)[0x9] = "ReadFile", 0

1006c633                                                           00                                                         .

1006c634  uint16_t __export_name_ptr_table_0(KERNEL32:SetFilePointer) = 0x26a
1006c636  char __import_name_0(KERNEL32:SetFilePointer)[0xf] = "SetFilePointer", 0

1006c645                 00                                                                                     .

1006c646  uint16_t __export_name_ptr_table_0(KERNEL32:CloseHandle) = 0x1b
1006c648  char __import_name_0(KERNEL32:CloseHandle)[0xc] = "CloseHandle", 0
1006c654  uint16_t __export_name_ptr_table_0(KERNEL32:InitializeCriticalSection) = 0x1aa
1006c656  char __import_name_0(KERNEL32:InitializeCriticalSection)[0x1a] = "InitializeCriticalSection", 0
1006c670  uint16_t __export_name_ptr_table_0(KERNEL32:WriteFile) = 0x2df
1006c672  char __import_name_0(KERNEL32:WriteFile)[0xa] = "WriteFile", 0
1006c67c  uint16_t __export_name_ptr_table_0(KERNEL32:SetHandleCount) = 0x26d
1006c67e  char __import_name_0(KERNEL32:SetHandleCount)[0xf] = "SetHandleCount", 0

1006c68d                                         00                                                                     .

1006c68e  uint16_t __export_name_ptr_table_0(KERNEL32:GetStdHandle) = 0x152
1006c690  char __import_name_0(KERNEL32:GetStdHandle)[0xd] = "GetStdHandle", 0

1006c69d                                                                                         00                                     .

1006c69e  uint16_t __export_name_ptr_table_0(KERNEL32:GetFileType) = 0x115
1006c6a0  char __import_name_0(KERNEL32:GetFileType)[0xc] = "GetFileType", 0
1006c6ac  uint16_t __export_name_ptr_table_0(KERNEL32:GetStartupInfoA) = 0x150
1006c6ae  char __import_name_0(KERNEL32:GetStartupInfoA)[0x10] = "GetStartupInfoA", 0
1006c6be  uint16_t __export_name_ptr_table_0(KERNEL32:DeleteCriticalSection) = 0x55
1006c6c0  char __import_name_0(KERNEL32:DeleteCriticalSection)[0x16] = "DeleteCriticalSection", 0
1006c6d6  uint16_t __export_name_ptr_table_0(KERNEL32:GetCurrentThreadId) = 0xfa
1006c6d8  char __import_name_0(KERNEL32:GetCurrentThreadId)[0x13] = "GetCurrentThreadId", 0

1006c6eb                                   00                                                                         .

1006c6ec  uint16_t __export_name_ptr_table_0(KERNEL32:TlsSetValue) = 0x2a5
1006c6ee  char __import_name_0(KERNEL32:TlsSetValue)[0xc] = "TlsSetValue", 0
1006c6fa  uint16_t __export_name_ptr_table_0(KERNEL32:TlsAlloc) = 0x2a2
1006c6fc  char __import_name_0(KERNEL32:TlsAlloc)[0x9] = "TlsAlloc", 0

1006c705                 00                                                                                     .

1006c706  uint16_t __export_name_ptr_table_0(KERNEL32:TlsFree) = 0x2a3
1006c708  char __import_name_0(KERNEL32:TlsFree)[0x8] = "TlsFree", 0
1006c710  uint16_t __export_name_ptr_table_0(KERNEL32:SetLastError) = 0x271
1006c712  char __import_name_0(KERNEL32:SetLastError)[0xd] = "SetLastError", 0

1006c71f                                                                                               00                                 .

1006c720  uint16_t __export_name_ptr_table_0(KERNEL32:TlsGetValue) = 0x2a4
1006c722  char __import_name_0(KERNEL32:TlsGetValue)[0xc] = "TlsGetValue", 0
1006c72e  uint16_t __export_name_ptr_table_0(KERNEL32:GetCurrentThread) = 0xf9
1006c730  char __import_name_0(KERNEL32:GetCurrentThread)[0x11] = "GetCurrentThread", 0

1006c741     00                                                                                             .

1006c742  uint16_t __export_name_ptr_table_0(KERNEL32:ExitProcess) = 0x7d
1006c744  char __import_name_0(KERNEL32:ExitProcess)[0xc] = "ExitProcess", 0
1006c750  uint16_t __export_name_ptr_table_0(KERNEL32:FatalAppExitA) = 0x85
1006c752  char __import_name_0(KERNEL32:FatalAppExitA)[0xe] = "FatalAppExitA", 0
1006c760  uint16_t __export_name_ptr_table_0(KERNEL32:HeapAlloc) = 0x199
1006c762  char __import_name_0(KERNEL32:HeapAlloc)[0xa] = "HeapAlloc", 0
1006c76c  uint16_t __export_name_ptr_table_0(KERNEL32:Sleep) = 0x296
1006c76e  char __import_name_0(KERNEL32:Sleep)[0x6] = "Sleep", 0
1006c774  uint16_t __export_name_ptr_table_0(KERNEL32:WideCharToMultiByte) = 0x2d2
1006c776  char __import_name_0(KERNEL32:WideCharToMultiByte)[0x14] = "WideCharToMultiByte", 0
1006c78a  uint16_t __export_name_ptr_table_0(KERNEL32:MultiByteToWideChar) = 0x1e4
1006c78c  char __import_name_0(KERNEL32:MultiByteToWideChar)[0x14] = "MultiByteToWideChar", 0
1006c7a0  uint16_t __export_name_ptr_table_0(KERNEL32:LCMapStringA) = 0x1bf
1006c7a2  char __import_name_0(KERNEL32:LCMapStringA)[0xd] = "LCMapStringA", 0

1006c7af                                               00                                                                 .

1006c7b0  uint16_t __export_name_ptr_table_0(KERNEL32:LCMapStringW) = 0x1c0
1006c7b2  char __import_name_0(KERNEL32:LCMapStringW)[0xd] = "LCMapStringW", 0

1006c7bf                                                                                               00                                 .

1006c7c0  uint16_t __export_name_ptr_table_0(KERNEL32:FlushFileBuffers) = 0xaa
1006c7c2  char __import_name_0(KERNEL32:FlushFileBuffers)[0x11] = "FlushFileBuffers", 0

1006c7d3                                                           00                                                         .

1006c7d4  uint16_t __export_name_ptr_table_0(KERNEL32:HeapDestroy) = 0x19d
1006c7d6  char __import_name_0(KERNEL32:HeapDestroy)[0xc] = "HeapDestroy", 0
1006c7e2  uint16_t __export_name_ptr_table_0(KERNEL32:HeapCreate) = 0x19b
1006c7e4  char __import_name_0(KERNEL32:HeapCreate)[0xb] = "HeapCreate", 0

1006c7ef                                               00                                                                 .

1006c7f0  uint16_t __export_name_ptr_table_0(KERNEL32:VirtualFree) = 0x2bf
1006c7f2  char __import_name_0(KERNEL32:VirtualFree)[0xc] = "VirtualFree", 0
1006c7fe  uint16_t __export_name_ptr_table_0(KERNEL32:VirtualAlloc) = 0x2bb
1006c800  char __import_name_0(KERNEL32:VirtualAlloc)[0xd] = "VirtualAlloc", 0

1006c80d                                         00                                                                     .

1006c80e  uint16_t __export_name_ptr_table_0(KERNEL32:HeapReAlloc) = 0x1a2
1006c810  char __import_name_0(KERNEL32:HeapReAlloc)[0xc] = "HeapReAlloc", 0
1006c81c  uint16_t __export_name_ptr_table_0(KERNEL32:IsBadWritePtr) = 0x1b8
1006c81e  char __import_name_0(KERNEL32:IsBadWritePtr)[0xe] = "IsBadWritePtr", 0
1006c82c  uint16_t __export_name_ptr_table_0(KERNEL32:TerminateProcess) = 0x29e
1006c82e  char __import_name_0(KERNEL32:TerminateProcess)[0x11] = "TerminateProcess", 0

1006c83f                                                                                               00                                 .

1006c840  uint16_t __export_name_ptr_table_0(KERNEL32:GetCurrentProcess) = 0xf7
1006c842  char __import_name_0(KERNEL32:GetCurrentProcess)[0x12] = "GetCurrentProcess", 0
1006c854  uint16_t __export_name_ptr_table_0(KERNEL32:GetModuleFileNameA) = 0x124
1006c856  char __import_name_0(KERNEL32:GetModuleFileNameA)[0x13] = "GetModuleFileNameA", 0

1006c869                             00                                                                             .

1006c86a  uint16_t __export_name_ptr_table_0(KERNEL32:FreeEnvironmentStringsA) = 0xb2
1006c86c  char __import_name_0(KERNEL32:FreeEnvironmentStringsA)[0x18] = "FreeEnvironmentStringsA", 0
1006c884  uint16_t __export_name_ptr_table_0(KERNEL32:FreeEnvironmentStringsW) = 0xb3
1006c886  char __import_name_0(KERNEL32:FreeEnvironmentStringsW)[0x18] = "FreeEnvironmentStringsW", 0
1006c89e  uint16_t __export_name_ptr_table_0(KERNEL32:GetEnvironmentStrings) = 0x106
1006c8a0  char __import_name_0(KERNEL32:GetEnvironmentStrings)[0x16] = "GetEnvironmentStrings", 0
1006c8b6  uint16_t __export_name_ptr_table_0(KERNEL32:GetEnvironmentStringsW) = 0x108
1006c8b8  char __import_name_0(KERNEL32:GetEnvironmentStringsW)[0x17] = "GetEnvironmentStringsW", 0

1006c8cf                                               00                                                                 .

1006c8d0  uint16_t __export_name_ptr_table_0(KERNEL32:GetStringTypeA) = 0x153
1006c8d2  char __import_name_0(KERNEL32:GetStringTypeA)[0xf] = "GetStringTypeA", 0

1006c8e1     00                                                                                             .

1006c8e2  uint16_t __export_name_ptr_table_0(KERNEL32:GetStringTypeW) = 0x156
1006c8e4  char __import_name_0(KERNEL32:GetStringTypeW)[0xf] = "GetStringTypeW", 0

1006c8f3                                                           00                                                         .

1006c8f4  uint16_t __export_name_ptr_table_0(KERNEL32:SetStdHandle) = 0x27c
1006c8f6  char __import_name_0(KERNEL32:SetStdHandle)[0xd] = "SetStdHandle", 0

1006c903           00                                                                                         .

1006c904  uint16_t __export_name_ptr_table_0(KERNEL32:CreateFileA) = 0x34
1006c906  char __import_name_0(KERNEL32:CreateFileA)[0xc] = "CreateFileA", 0
1006c912  uint16_t __export_name_ptr_table_0(KERNEL32:UnhandledExceptionFilter) = 0x2ad
1006c914  char __import_name_0(KERNEL32:UnhandledExceptionFilter)[0x19] = "UnhandledExceptionFilter", 0

1006c92d                                         00                                                                     .

1006c92e  uint16_t __export_name_ptr_table_0(KERNEL32:GetCPInfo) = 0xbf
1006c930  char __import_name_0(KERNEL32:GetCPInfo)[0xa] = "GetCPInfo", 0
1006c93a  uint16_t __export_name_ptr_table_0(KERNEL32:GetACP) = 0xb9
1006c93c  char __import_name_0(KERNEL32:GetACP)[0x7] = "GetACP", 0

1006c943           00                                                                                         .

1006c944  uint16_t __export_name_ptr_table_0(KERNEL32:GetOEMCP) = 0x131
1006c946  char __import_name_0(KERNEL32:GetOEMCP)[0x9] = "GetOEMCP", 0

1006c94f                                               00                                                                 .

1006c950  uint16_t __export_name_ptr_table_0(KERNEL32:IsValidLocale) = 0x1be
1006c952  char __import_name_0(KERNEL32:IsValidLocale)[0xe] = "IsValidLocale", 0
1006c960  uint16_t __export_name_ptr_table_0(KERNEL32:IsValidCodePage) = 0x1bd
1006c962  char __import_name_0(KERNEL32:IsValidCodePage)[0x10] = "IsValidCodePage", 0
1006c972  uint16_t __export_name_ptr_table_0(KERNEL32:GetLocaleInfoA) = 0x11c
1006c974  char __import_name_0(KERNEL32:GetLocaleInfoA)[0xf] = "GetLocaleInfoA", 0

1006c983           00                                                                                         .

1006c984  uint16_t __export_name_ptr_table_0(KERNEL32:EnumSystemLocalesA) = 0x77
1006c986  char __import_name_0(KERNEL32:EnumSystemLocalesA)[0x13] = "EnumSystemLocalesA", 0

1006c999                                                                             00                                             .

1006c99a  uint16_t __export_name_ptr_table_0(KERNEL32:GetUserDefaultLCID) = 0x171
1006c99c  char __import_name_0(KERNEL32:GetUserDefaultLCID)[0x13] = "GetUserDefaultLCID", 0

1006c9af                                               00                                                                 .

1006c9b0  uint16_t __export_name_ptr_table_0(KERNEL32:GetVersionExA) = 0x175
1006c9b2  char __import_name_0(KERNEL32:GetVersionExA)[0xe] = "GetVersionExA", 0
1006c9c0  uint16_t __export_name_ptr_table_0(KERNEL32:RtlUnwind) = 0x22f
1006c9c2  char __import_name_0(KERNEL32:RtlUnwind)[0xa] = "RtlUnwind", 0
1006c9cc  uint16_t __export_name_ptr_table_0(KERNEL32:SetConsoleCtrlHandler) = 0x241
1006c9ce  char __import_name_0(KERNEL32:SetConsoleCtrlHandler)[0x16] = "SetConsoleCtrlHandler", 0
1006c9e4  uint16_t __export_name_ptr_table_0(KERNEL32:SetEndOfFile) = 0x261
1006c9e6  char __import_name_0(KERNEL32:SetEndOfFile)[0xd] = "SetEndOfFile", 0

1006c9f3                                                           00                                                         .

1006c9f4  uint16_t __export_name_ptr_table_0(KERNEL32:GetLocaleInfoW) = 0x11d
1006c9f6  char __import_name_0(KERNEL32:GetLocaleInfoW)[0xf] = "GetLocaleInfoW", 0

1006ca05                 00                                                                                     .

1006ca06  uint16_t __export_name_ptr_table_0(KERNEL32:CompareStringA) = 0x21
1006ca08  char __import_name_0(KERNEL32:CompareStringA)[0xf] = "CompareStringA", 0

1006ca17                                                                       00                                                 .

1006ca18  uint16_t __export_name_ptr_table_0(KERNEL32:CompareStringW) = 0x22
1006ca1a  char __import_name_0(KERNEL32:CompareStringW)[0xf] = "CompareStringW", 0

1006ca29                             00                                                                             .

1006ca2a  uint16_t __export_name_ptr_table_0(KERNEL32:GetFileAttributesA) = 0x10d
1006ca2c  char __import_name_0(KERNEL32:GetFileAttributesA)[0x13] = "GetFileAttributesA", 0

1006ca3f                                                                                               00                                 .

1006ca40  uint16_t __export_name_ptr_table_0(KERNEL32:GetExitCodeProcess) = 0x10b
1006ca42  char __import_name_0(KERNEL32:GetExitCodeProcess)[0x13] = "GetExitCodeProcess", 0

1006ca55                                                                 00                                                     .

1006ca56  uint16_t __export_name_ptr_table_0(KERNEL32:WaitForSingleObject) = 0x2ce
1006ca58  char __import_name_0(KERNEL32:WaitForSingleObject)[0x14] = "WaitForSingleObject", 0
1006ca6c  uint16_t __export_name_ptr_table_0(KERNEL32:CreateProcessA) = 0x44
1006ca6e  char __import_name_0(KERNEL32:CreateProcessA)[0xf] = "CreateProcessA", 0

1006ca7d                                                                                         00 00 00                               ...
1006ca80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006caa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cb00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cb20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cb40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cb60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cb80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cbc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cbe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cc00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
1006cc20  00 00 00 00 00                                                                                   .....
.idata section ended  {0x1006c000-0x1006cc25}

.reloc section started  {0x1006d000-0x10070de9}
1006d000  00 30 00 00 98 00 00 00 3a 30 87 30 a1 30 a8 30 b1 30 b6 30 d4 30 e5 30 f1 30 0e 31 1c 31 31 31  .0......:0.0.0.0.0.0.0.0.0.1.111
1006d020  49 31 57 31 5d 31 b1 31 ca 31 d2 31 f1 31 fa 31 02 32 13 32 42 32 58 32 66 32 81 32 8a 32 9c 32  I1W1]1.1.1.1.1.1.2.2B2X2f2.2.2.2
1006d040  b1 32 d1 32 da 32 ec 32 fe 32 03 33 18 33 2e 33 61 33 72 33 8b 33 92 33 c6 33 21 34 48 34 e9 34  .2.2.2.2.2.3.3.3a3r3.3.3.3!4H4.4
1006d060  63 35 9e 35 81 36 c4 37 d8 37 80 38 92 39 e4 39 15 3a f2 3b 04 3c 9b 3c af 3c bf 3c f5 3c 05 3d  c5.5.6.7.7.8.9.9.:.;.<.<.<.<.<.=
1006d080  15 3d 87 3d 95 3d 05 3e 6e 3e 9d 3e ad 3e 0f 3f 7a 3f d0 3f e1 3f f6 3f 00 40 00 00 50 00 00 00  .=.=.=.>n>.>.>.?z?.?.?.?.@..P...
1006d0a0  07 30 1c 30 3d 30 92 30 19 33 44 33 5a 33 37 34 46 34 27 35 c0 35 e8 35 f8 35 08 36 3d 36 78 36  .0.0=0.0.3D3Z374F4'5.5.5.5.6=6x6
1006d0c0  8c 36 a0 36 85 37 f0 37 46 38 95 38 89 39 2d 3a 92 3a 7f 3b 90 3b a6 3b be 3b c2 3d cc 3d d9 3d  .6.6.7.7F8.8.9-:.:.;.;.;.;.=.=.=
1006d0e0  06 3e b3 3e 9a 3f eb 3f 00 50 00 00 7c 00 00 00 af 30 bc 30 19 31 26 31 cb 31 83 32 8b 32 e9 36  .>.>.?.?.P..|....0.0.1&1.1.2.2.6
1006d100  f3 36 14 37 3f 37 a1 37 3d 38 5c 38 77 38 a0 38 66 3a 7c 3a 81 3a 89 3a d5 3a e0 3a f7 3a 31 3b  .6.7?7.7=8\8w8.8f:|:.:.:.:.:.:1;
1006d120  44 3b 5a 3b 69 3b 79 3b 89 3b b0 3b b9 3b c2 3b cc 3b 0f 3c c6 3c f6 3c 05 3d 1c 3d 2e 3d 38 3d  D;Z;i;y;.;.;.;.;.;.<.<.<.=.=.=8=
1006d140  4a 3d 5d 3d 6b 3d 71 3d 89 3d a0 3d b5 3d e1 3d f0 3d f6 3d 61 3e 7a 3e 92 3e a5 3f b2 3f bf 3f  J=]=k=q=.=.=.=.=.=.=a>z>.>.?.?.?
1006d160  d2 3f da 3f 00 60 00 00 48 00 00 00 b1 30 32 31 9f 31 b1 31 11 32 3b 32 9b 32 a9 32 b9 32 cc 32  .?.?.`..H....021.1.1.2;2.2.2.2.2
1006d180  d5 32 0d 34 fb 34 11 38 b8 38 a1 39 a7 39 b6 39 e4 39 4a 3a 62 3b d5 3b e8 3b 2f 3c 2d 3d 42 3d  .2.4.4.8.8.9.9.9.9J:b;.;.;/<-=B=
1006d1a0  a8 3d c6 3d 68 3e 86 3e aa 3e c2 3f 00 70 00 00 20 01 00 00 51 31 5d 31 79 31 ea 31 00 32 12 32  .=.=h>.>.>.?.p.. ...Q1]1y1.1.2.2
1006d1c0  17 32 44 32 75 32 93 32 99 32 9f 32 33 33 4d 33 67 33 8d 33 ac 33 62 34 75 34 c0 34 d4 34 ea 34  .2D2u2.2.2.233M3g3.3.3b4u4.4.4.4
1006d1e0  f4 34 03 35 13 35 1d 35 2d 35 3e 35 4c 35 8b 35 9f 35 b2 35 2c 36 44 36 58 36 f2 36 0a 37 15 37  .4.5.5.5-5>5L5.5.5.5,6D6X6.6.7.7
1006d200  25 37 31 37 3b 37 46 37 56 37 5f 37 70 37 7d 37 87 37 94 37 a3 37 ab 37 bb 37 c4 37 d4 37 e1 37  %717;7F7V7_7p7}7.7.7.7.7.7.7.7.7
1006d220  ed 37 fa 37 5d 38 81 39 8c 39 9c 39 a2 39 aa 39 ba 39 c0 39 c8 39 ce 39 de 39 e4 39 ec 39 fc 39  .7.7]8.9.9.9.9.9.9.9.9.9.9.9.9.9
1006d240  02 3a 0a 3a 1a 3a 20 3a 28 3a 38 3a 3e 3a 46 3a 56 3a 5c 3a 64 3a 74 3a 7a 3a 82 3a 92 3a 98 3a  .:.:.: :(:8:>:F:V:\:d:t:z:.:.:.:
1006d260  a0 3a b0 3a b6 3a be 3a ce 3a d4 3a dc 3a ec 3a f2 3a fa 3a 0a 3b 10 3b 18 3b 28 3b 2e 3b 36 3b  .:.:.:.:.:.:.:.:.:.:.;.;.;(;.;6;
1006d280  46 3b 4c 3b 54 3b 64 3b 6a 3b 72 3b 82 3b 88 3b 90 3b a1 3b a7 3b 58 3c 97 3c d4 3c 47 3d 5c 3d  F;L;T;d;j;r;.;.;.;.;.;X<.<.<G=\=
1006d2a0  90 3d ce 3d 0a 3e 47 3e 84 3e 96 3e b4 3e cf 3e e1 3e 0a 3f 24 3f 36 3f 5f 3f 80 3f 92 3f ab 3f  .=.=.>G>.>.>.>.>.>.?$?6?_?.?.?.?
1006d2c0  b3 3f bd 3f c2 3f cf 3f d5 3f ef 3f 00 80 00 00 ec 00 00 00 01 30 30 30 4a 30 5c 30 8b 30 a5 30  .?.?.?.?.?.?.........000J0\0.0.0
1006d2e0  b7 30 db 30 01 31 13 31 2c 31 34 31 3e 31 4b 31 66 31 78 31 a7 31 c1 31 d3 31 f4 31 0e 32 20 32  .0.0.1.1,141>1K1f1x1.1.1.1.1.2 2
1006d300  41 32 5b 32 6d 32 8f 32 ac 32 be 32 e3 32 00 33 12 33 3e 33 5b 33 6d 33 99 33 b6 33 c8 33 e5 33  A2[2m2.2.2.2.2.3.3>3[3m3.3.3.3.3
1006d320  f1 33 f1 35 f7 35 fe 35 21 36 38 36 43 36 62 36 74 36 91 36 e2 36 ed 36 0f 37 1b 37 31 37 3a 37  .3.5.5.5!686C6b6t6.6.6.6.7.717:7
1006d340  42 37 56 37 61 37 f2 37 fe 37 2a 38 60 38 66 38 79 38 86 38 9d 38 ad 38 02 39 1e 39 39 39 55 39  B7V7a7.7.7*8`8f8y8.8.8.8.9.999U9
1006d360  e1 39 f8 39 29 3a 69 3a 70 3a c2 3a e0 3a eb 3a 49 3b 5b 3b 61 3b 8d 3b 9f 3b ae 3b c2 3b d5 3b  .9.9):i:p:.:.:.:I;[;a;.;.;.;.;.;
1006d380  e3 3b ea 3b f4 3b fa 3b 03 3c 09 3c 23 3c 81 3c 92 3c 9f 3c b4 3c c6 3c cc 3c d6 3c df 3c e5 3c  .;.;.;.;.<.<#<.<.<.<.<.<.<.<.<.<
1006d3a0  f6 3c 57 3d 7e 3d 8c 3d c9 3e cf 3e fc 3e 07 3f 2c 3f 9c 3f f6 3f 00 00 00 90 00 00 d4 00 00 00  .<W=~=.=.>.>.>.?,?.?.?..........
1006d3c0  92 30 f0 30 00 31 52 31 f1 32 0b 33 3e 33 53 33 f6 33 12 34 2e 34 71 35 8e 35 99 35 a1 35 c1 35  .0.0.1R1.2.3>3S3.3.4.4q5.5.5.5.5
1006d3e0  d6 35 eb 35 12 36 21 36 51 36 64 36 82 36 95 36 e1 36 ef 36 fd 36 13 37 3c 37 58 37 5d 37 7c 37  .5.5.6!6Q6d6.6.6.6.6.6.7<7X7]7|7
1006d400  81 37 a3 37 a9 37 af 37 b9 37 d5 37 db 37 e1 37 e8 37 ee 37 f4 37 fb 37 65 38 76 38 7f 38 b6 38  .7.7.7.7.7.7.7.7.7.7.7.7e8v8.8.8
1006d420  c0 38 c7 38 cc 38 d4 38 dd 38 e4 38 07 39 10 39 1a 39 aa 39 bc 39 99 3a af 3a bd 3a cb 3a dd 3a  .8.8.8.8.8.8.9.9.9.9.9.:.:.:.:.:
1006d440  eb 3a fb 3a 07 3b 92 3b 9c 3b a2 3b a9 3b b4 3b b9 3b c1 3b d1 3b f3 3b 09 3c 8e 3d 98 3d 9e 3d  .:.:.;.;.;.;.;.;.;.;.;.;.<.=.=.=
1006d460  a5 3d b0 3d b9 3d c1 3d d1 3d 03 3e 1c 3e 2e 3e d1 3e eb 3e f3 3e fc 3e 18 3f 25 3f 33 3f 3b 3f  .=.=.=.=.=.>.>.>.>.>.>.>.?%?3?;?
1006d480  44 3f 88 3f af 3f bd 3f c3 3f d9 3f 00 a0 00 00 b8 00 00 00 af 30 cf 30 f7 30 02 31 10 31 18 31  D?.?.?.?.?.?.........0.0.0.1.1.1
1006d4a0  20 31 50 31 5d 31 6b 31 73 31 dd 31 e7 31 ee 31 f3 31 fb 31 04 32 0b 32 32 32 7c 32 96 32 9e 32   1P1]1k1s1.1.1.1.1.1.2.222|2.2.2
1006d4c0  ae 32 c0 32 c8 32 8e 34 9b 34 d8 36 27 37 41 37 16 38 22 38 27 38 36 38 4b 38 53 38 5e 38 64 38  .2.2.2.4.4.6'7A7.8"8'868K8S8^8d8
1006d4e0  74 38 7c 38 89 38 99 38 a4 38 aa 38 b5 38 bd 38 c6 38 21 39 2d 39 35 39 47 39 e1 3b ef 3b f7 3b  t8|8.8.8.8.8.8.8.8!9-959G9.;.;.;
1006d500  0d 3c 15 3c 3b 3c 43 3c ba 3c c9 3c dc 3c e9 3c f7 3c ff 3c 4a 3d 52 3d 64 3d 6c 3d 91 3d a3 3d  .<.<;<C<.<.<.<.<.<.<J=R=d=l=.=.=
1006d520  ab 3d bd 3d c5 3d e1 3d f3 3d fb 3d 0e 3e 16 3e 32 3e 3f 3e a1 3e b3 3e bb 3e f6 3e fe 3e 36 3f  .=.=.=.=.=.=.>.>2>?>.>.>.>.>.>6?
1006d540  fa 3f 00 00 00 b0 00 00 f0 00 00 00 91 30 a2 30 ad 30 ba 30 e1 30 ef 30 05 31 0f 31 b6 31 f5 31  .?...........0.0.0.0.0.0.1.1.1.1
1006d560  1b 32 9a 32 9f 32 01 33 14 33 1c 33 b7 33 cd 33 df 33 43 34 69 34 8a 36 97 36 9f 36 ac 36 b2 36  .2.2.2.3.3.3.3.3.3C4i4.6.6.6.6.6
1006d580  c3 36 da 36 5b 37 6d 39 a1 3a be 3a f8 3a 31 3b 47 3b 52 3b a2 3b b7 3b c6 3b ce 3b de 3b f2 3b  .6.6[7m9.:.:.:1;G;R;.;.;.;.;.;.;
1006d5a0  07 3c 19 3c 30 3c 46 3c 57 3c 6a 3c 78 3c 89 3c 93 3c a8 3c b6 3c c8 3c d7 3c e1 3c f1 3c fe 3c  .<.<0<F<W<j<x<.<.<.<.<.<.<.<.<.<
1006d5c0  0a 3d 16 3d 25 3d 2e 3d 3e 3d 4a 3d 54 3d 60 3d 6f 3d 7a 3d 84 3d 96 3d a5 3d ae 3d be 3d c8 3d  .=.=%=.=>=J=T=`=o=z=.=.=.=.=.=.=
1006d5e0  d8 3d e2 3d f2 3d fc 3d 0c 3e 16 3e 26 3e 33 3e 43 3e 4f 3e 5e 3e 69 3e 73 3e 85 3e 94 3e 9d 3e  .=.=.=.=.>.>&>3>C>O>^>i>s>.>.>.>
1006d600  ad 3e b7 3e c7 3e dc 3e ec 3e f6 3e 05 3f 0e 3f 1e 3f 30 3f 41 3f 53 3f 62 3f 6b 3f 7b 3f 85 3f  .>.>.>.>.>.>.?.?.?0?A?S?b?k?{?.?
1006d620  95 3f 9f 3f af 3f b9 3f c9 3f d3 3f e3 3f ed 3f fd 3f 00 00 00 c0 00 00 20 01 00 00 0a 30 1a 30  .?.?.?.?.?.?.?.?.?...... ....0.0
1006d640  2c 30 3b 30 44 30 54 30 5e 30 6e 30 83 30 93 30 9d 30 ac 30 be 30 ce 30 d8 30 e9 30 f7 30 07 31  ,0;0D0T0^0n0.0.0.0.0.0.0.0.0.0.1
1006d660  15 31 24 31 2d 31 3d 31 47 31 57 31 64 31 70 31 82 31 91 31 9a 31 aa 31 b4 31 c4 31 ce 31 de 31  .1$1-1=1G1W1d1p1.1.1.1.1.1.1.1.1
1006d680  e8 31 f8 31 05 32 15 32 21 32 30 32 3b 32 45 32 53 32 62 32 6b 32 7b 32 85 32 95 32 a2 32 91 34  .1.1.2.2!202;2E2S2b2k2{2.2.2.2.4
1006d6a0  9c 34 ac 34 b2 34 ba 34 ca 34 d0 34 d8 34 e8 34 ee 34 f6 34 06 35 0c 35 14 35 24 35 2a 35 32 35  .4.4.4.4.4.4.4.4.4.4.5.5.5$5*525
1006d6c0  42 35 48 35 50 35 60 35 66 35 6e 35 7e 35 84 35 8c 35 9c 35 a2 35 b4 35 ba 35 c2 35 d2 35 d8 35  B5H5P5`5f5n5~5.5.5.5.5.5.5.5.5.5
1006d6e0  e0 35 f1 35 f7 35 fd 35 03 36 09 36 9a 36 d1 36 44 37 59 37 8a 37 c2 37 fb 37 31 38 38 38 65 38  .5.5.5.5.6.6.6.6D7Y7.7.7.71888e8
1006d700  6e 38 8f 38 de 38 e7 38 2e 39 37 39 74 39 7d 39 ba 39 c3 39 0a 3a 13 3a 50 3a 59 3a a0 3a a9 3a  n8.8.8.8.979t9}9.9.9.:.:P:Y:.:.:
1006d720  f6 3a ff 3a 46 3b 4f 3b 96 3b 9f 3b e6 3b ef 3b 2f 3c 38 3c 85 3c 8e 3c ad 3c 8d 3e 95 3e ef 3e  .:.:F;O;.;.;.;.;/<8<.<.<.<.>.>.>
1006d740  f7 3e 23 3f 3c 3f 44 3f 7f 3f 85 3f aa 3f b0 3f d8 3f de 3f 00 d0 00 00 dc 00 00 00 07 30 0c 30  .>#?<?D?.?.?.?.?.?.?.........0.0
1006d760  36 30 3c 30 65 30 6b 30 93 30 99 30 c2 30 c8 30 f0 30 f6 30 24 31 2f 31 54 31 60 31 81 31 8d 31  60<0e0k0.0.0.0.0.0.0$1/1T1`1.1.1
1006d780  af 31 b5 31 de 31 e4 31 43 33 48 33 68 33 70 33 8c 33 98 33 b8 33 c6 33 da 33 ee 33 fc 33 03 34  .1.1.1.1C3H3h3p3.3.3.3.3.3.3.3.4
1006d7a0  51 34 62 34 74 34 7c 34 a2 34 ba 34 c2 34 e2 34 19 35 b1 35 b9 35 c6 35 4a 36 88 36 81 37 06 38  Q4b4t4|4.4.4.4.4.5.5.5.5J6.6.7.8
1006d7c0  31 38 44 38 4c 38 54 38 7e 38 86 38 8e 38 9a 38 a2 38 aa 38 d1 38 e7 38 ef 38 66 39 6d 39 96 39  18D8L8T8~8.8.8.8.8.8.8.8.8f9m9.9
1006d7e0  9d 39 c6 39 cd 39 f6 39 fd 39 26 3a 2d 3a 56 3a 5d 3a 21 3c 33 3c 45 3c 6a 3c 84 3c 91 3c 97 3c  .9.9.9.9.9&:-:V:]:!<3<E<j<.<.<.<
1006d800  c1 3c f1 3c f6 3c 21 3d 26 3d 43 3d 5f 3d 65 3d 49 3e 51 3e e1 3e 01 3f 09 3f 13 3f 31 3f 3e 3f  .<.<.<!=&=C=_=e=I>Q>.>.?.?.?1?>?
1006d820  61 3f 6a 3f 80 3f 9b 3f aa 3f b1 3f ba 3f c2 3f 00 e0 00 00 a8 00 00 00 16 30 36 30 3c 30 4b 30  a?j?.?.?.?.?.?.?.........060<0K0
1006d840  60 30 65 30 72 30 7d 30 91 30 96 30 a3 30 ae 30 c2 30 c7 30 22 31 83 31 96 31 e7 31 50 32 e3 32  `0e0r0}0.0.0.0.0.0.0"1.1.1.1P2.2
1006d860  0e 33 21 33 3f 33 74 33 7c 33 38 34 9e 34 ad 34 7a 35 d3 35 ee 35 f3 35 61 36 90 36 c2 36 5c 37  .3!3?3t3|384.4.4z5.5.5.5a6.6.6\7
1006d880  64 37 76 37 a2 38 d1 38 23 39 9b 39 a3 39 b5 39 bd 39 e4 39 f3 39 48 3a f2 3a fa 3a 09 3b 11 3b  d7v7.8.8#9.9.9.9.9.9.9H:.:.:.;.;
1006d8a0  2e 3b 4c 3b 65 3b 6a 3b 75 3b 8d 3b 95 3b 9d 3b a5 3b c4 3b cc 3b 23 3d 53 3d ca 3d cf 3d d5 3d  .;L;e;j;u;.;.;.;.;.;.;#=S=.=.=.=
1006d8c0  fa 3d 4a 3e 64 3e 69 3e 72 3e 78 3e d9 3e 15 3f 32 3f 55 3f d1 3f 00 00 00 f0 00 00 88 00 00 00  .=J>d>i>r>x>.>.?2?U?.?..........
1006d8e0  4c 30 83 30 41 31 74 31 87 31 ad 31 d8 31 03 32 2e 32 41 32 4f 32 fa 32 19 33 38 33 57 33 76 33  L0.0A1t1.1.1.1.2.2A2O2.2.383W3v3
1006d900  9c 33 b9 33 c8 33 e9 33 ea 34 3c 35 5c 35 72 35 7c 35 2f 36 40 36 8e 36 9b 36 b0 36 cb 37 f5 37  .3.3.3.3.4<5\5r5|5/6@6.6.6.6.7.7
1006d920  04 38 47 38 4d 38 67 38 73 38 87 38 94 38 9e 38 ad 38 b3 38 d0 38 f0 38 07 39 52 39 e1 39 a8 3a  .8G8M8g8s8.8.8.8.8.8.8.8.9R9.9.:
1006d940  ca 3a e9 3a 61 3c 69 3c 93 3c da 3c f8 3d ed 3e 28 3f 35 3f 45 3f 4d 3f 7b 3f 90 3f a9 3f 00 00  .:.:a<i<.<.<.=.>(?5?E?M?{?.?.?..
1006d960  00 00 01 00 84 00 00 00 59 30 72 30 b9 30 c6 30 3a 37 42 37 82 37 88 37 b4 37 c0 37 f7 37 8e 38  ........Y0r0.0.0:7B7.7.7.7.7.7.8
1006d980  f5 38 0f 39 2a 39 10 3a 91 3a 46 3b 90 3b 11 3c 31 3c 4d 3c 69 3c 84 3c a0 3c b4 3c bd 3c d2 3c  .8.9*9.:.:F;.;.<1<M<i<.<.<.<.<.<
1006d9a0  e8 3c 51 3d 6b 3d 70 3d 7a 3d 8e 3d 96 3d 9b 3d b0 3d b6 3d c1 3d d4 3d d9 3d e4 3d f8 3d 00 3e  .<Q=k=p=z=.=.=.=.=.=.=.=.=.=.=.>
1006d9c0  05 3e 1b 3e 24 3e 9f 3e bb 3e c8 3e d3 3e f8 3e fe 3e 17 3f 1f 3f 6e 3f 7d 3f 98 3f 9e 3f d1 3f  .>.>$>.>.>.>.>.>.>.?.?n?}?.?.?.?
1006d9e0  f1 3f 00 00 00 10 01 00 b8 00 00 00 02 30 0c 30 18 30 1e 30 25 30 4a 30 52 30 66 30 95 30 c0 30  .?...........0.0.0.0%0J0R0f0.0.0
1006da00  cf 30 ea 30 f6 30 0d 31 9d 31 2a 32 33 32 55 32 5f 32 68 32 7a 32 a2 32 b1 32 c7 32 0f 33 67 33  .0.0.0.1.1*232U2_2h2z2.2.2.2.3g3
1006da20  6f 33 8d 33 9f 33 f6 33 20 34 28 34 36 34 4e 34 63 34 79 34 8c 34 a2 34 c4 34 21 35 2a 35 3a 35  o3.3.3.3 4(464N4c4y4.4.4.4!5*5:5
1006da40  61 35 76 35 91 35 97 35 a2 35 a8 35 d6 35 16 36 46 36 76 36 a6 36 d1 36 d7 36 e3 36 06 37 9e 37  a5v5.5.5.5.5.5.6F6v6.6.6.6.6.7.7
1006da60  93 38 ac 38 d1 38 e7 38 15 39 6f 39 97 39 e4 39 0c 3a 22 3a 33 3a 3b 3a 42 3a 1b 3b 49 3b 5f 3b  .8.8.8.8.9o9.9.9.:":3:;:B:.;I;_;
1006da80  dc 3b e9 3b 1f 3c 2f 3c 79 3c a1 3c c3 3c 4f 3d 93 3d 09 3e 50 3e 6d 3e ec 3f f9 3f 00 20 01 00  .;.;.</<y<.<.<O=.=.>P>m>.?.?. ..
1006daa0  50 00 00 00 47 30 5a 30 62 30 76 32 b9 32 cf 32 49 33 6c 33 98 33 cc 33 f9 33 2e 34 39 34 1a 35  P...G0Z0b0v2.2.2I3l3.3.3.3.494.5
1006dac0  2a 35 52 35 62 35 6b 35 93 35 d9 35 ea 35 24 36 35 36 84 38 a3 38 ba 38 d9 38 82 39 99 39 b4 3a  *5R5b5k5.5.5.5$656.8.8.8.8.9.9.:
1006dae0  cf 3a f8 3b 11 3c fb 3d e3 3e 00 00 00 30 01 00 6c 00 00 00 2a 30 3b 30 f3 30 00 31 26 31 39 31  .:.;.<.=.>...0..l...*0;0.0.1&191
1006db00  41 31 86 31 aa 31 c6 31 cf 31 88 32 98 32 a0 32 a7 32 de 32 ef 32 1b 33 b5 33 c4 33 cc 33 d3 33  A1.1.1.1.1.2.2.2.2.2.2.3.3.3.3.3
1006db20  eb 33 fc 33 80 34 8f 34 99 34 a2 34 26 35 99 35 b1 35 40 36 4d 36 55 36 5c 36 2c 3c 1d 3d 34 3d  .3.3.4.4.4.4&5.5.5@6M6U6\6,<.=4=
1006db40  e3 3d f1 3d 24 3e 36 3e 76 3e 91 3e b6 3e bf 3e e0 3e 39 3f f4 3f 00 00 00 40 01 00 58 00 00 00  .=.=$>6>v>.>.>.>.>9?.?...@..X...
1006db60  e2 30 9e 31 b6 31 5f 32 77 32 26 33 3e 33 f3 33 0b 34 14 36 97 36 fb 36 64 37 c6 37 dc 37 e9 37  .0.1.1_2w2&3>3.3.4.6.6.6d7.7.7.7
1006db80  01 38 3a 38 9c 38 b0 38 c0 38 d7 38 36 39 67 39 df 39 74 3a 7a 3a 86 3a 95 3a a8 3a b0 3a b6 3a  .8:8.8.8.8.869g9.9t:z:.:.:.:.:.:
1006dba0  9b 3e af 3e 0e 3f 27 3f 51 3f 6a 3f 96 3f 00 00 00 50 01 00 94 00 00 00 d6 30 e9 30 93 31 67 32  .>.>.?'?Q?j?.?...P.......0.0.1g2
1006dbc0  91 32 cf 32 f9 32 6c 33 7b 33 84 33 8b 33 ee 33 fd 33 06 34 0d 34 88 34 ad 34 bc 34 c5 34 cc 34  .2.2.2l3{3.3.3.3.3.4.4.4.4.4.4.4
1006dbe0  28 35 37 35 3f 35 45 35 6f 35 7a 35 87 35 3d 36 73 36 ae 36 e8 36 fb 36 1a 37 26 37 41 37 60 37  (575?5E5o5z5.5=6s6.6.6.6.7&7A7`7
1006dc00  30 38 3e 38 47 38 4e 38 ac 38 c3 38 ce 38 d6 38 de 38 de 3b f4 3b 2f 3c 46 3c 4e 3c 5b 3c 91 3c  08>8G8N8.8.8.8.8.8.;.;/<F<N<[<.<
1006dc20  99 3c aa 3c bc 3c ee 3c 41 3d 49 3d 5b 3d 6e 3d 76 3d 88 3d ac 3d e6 3d ee 3d 72 3f 7e 3f 86 3f  .<.<.<.<A=I=[=n=v=.=.=.=.=r?~?.?
1006dc40  8c 3f 00 00 00 60 01 00 78 00 00 00 2e 31 44 31 7e 31 90 31 98 31 ba 31 c2 31 01 32 2d 32 44 32  .?...`..x....1D1~1.1.1.1.1.2-2D2
1006dc60  54 32 73 32 83 32 19 33 53 33 69 33 7d 33 a2 34 e4 34 2a 35 67 35 87 35 9b 35 79 36 ca 36 fa 36  T2s2.2.3S3i3}3.4.4*5g5.5.5y6.6.6
1006dc80  47 37 58 37 f2 37 11 38 81 38 d3 38 eb 38 f3 38 f9 38 02 3c 79 3c 93 3c 20 3d 2b 3d 4c 3d 52 3d  G7X7.7.8.8.8.8.8.8.<y<.< =+=L=R=
1006dca0  65 3d 75 3d b7 3d d7 3d f1 3d fe 3d 07 3e 52 3e 6a 3e 83 3e b3 3e 1e 3f 24 3f 00 00 00 70 01 00  e=u=.=.=.=.=.>R>j>.>.>.?$?...p..
1006dcc0  74 00 00 00 01 30 7d 30 98 30 62 31 6b 31 79 31 85 31 8d 31 93 31 9f 33 b7 33 ed 33 25 34 5d 34  t....0}0.0b1k1y1.1.1.1.3.3.3%4]4
1006dce0  95 34 cd 34 05 35 3d 35 75 35 ad 35 e5 35 1d 36 55 36 8d 36 c5 36 fd 36 35 37 6d 37 a5 37 dd 37  .4.4.5=5u5.5.5.6U6.6.6.657m7.7.7
1006dd00  15 38 4d 38 85 38 bd 38 f5 38 2d 39 65 39 99 39 cd 39 0a 3a 5a 3a 62 3a 8f 3a ed 3c 08 3d 76 3d  .8M8.8.8.8-9e9.9.9.:Z:b:.:.<.=v=
1006dd20  90 3d 11 3e 23 3e 46 3e a9 3e e8 3e b8 3f 00 00 00 80 01 00 ec 00 00 00 83 30 93 30 9b 30 a1 30  .=.>#>F>.>.>.?...........0.0.0.0
1006dd40  03 32 2f 32 3d 32 6b 32 8d 32 9a 32 de 32 07 33 19 33 48 33 64 33 7d 33 ef 33 f7 33 2f 34 c0 34  .2/2=2k2.2.2.2.3.3H3d3}3.3.3/4.4
1006dd60  60 35 13 36 23 36 2f 36 39 36 e1 37 ff 37 04 38 13 38 25 38 36 38 54 38 ad 38 b8 38 c3 38 21 39  `5.6#6/696.7.7.8.8%868T8.8.8.8!9
1006dd80  2d 39 33 39 40 39 49 39 4e 39 5e 39 67 39 7b 39 8d 39 94 39 9f 39 a4 39 b4 39 bd 39 d6 39 de 39  -939@9I9N9^9g9{9.9.9.9.9.9.9.9.9
1006dda0  f2 39 f7 39 05 3a 60 3a 96 3a a6 3a bb 3a ca 3a cf 3a e7 3a 09 3b 14 3b 1e 3b 32 3b 3a 3b 43 3b  .9.9.:`:.:.:.:.:.:.:.;.;.;2;:;C;
1006ddc0  51 3b 58 3b 65 3b 6d 3b 72 3b 7a 3b 99 3b a1 3b 71 3c 7a 3c 83 3c 99 3c 9e 3c a9 3c ae 3c b9 3c  Q;X;e;m;r;z;.;.;q<z<.<.<.<.<.<.<
1006dde0  ce 3c 02 3d 0c 3d 16 3d 20 3d 2a 3d 34 3d 3e 3d 48 3d 52 3d 5c 3d 66 3d 70 3d 7a 3d 84 3d d0 3d  .<.=.=.= =*=4=>=H=R=\=f=p=z=.=.=
1006de00  f1 3d 06 3e 0c 3e 26 3e 31 3e 49 3e 80 3e 9b 3e aa 3e b6 3e ce 3e d4 3e 9d 3f b6 3f 00 90 01 00  .=.>.>&>1>I>.>.>.>.>.>.>.?.?....
1006de20  e0 00 00 00 1d 30 32 30 43 30 49 30 74 30 7e 30 9d 30 aa 30 b7 30 de 30 03 31 19 31 63 31 9c 31  .....020C0I0t0~0.0.0.0.0.1.1c1.1
1006de40  82 32 8f 32 a4 32 b4 32 d5 32 f1 32 06 33 15 33 53 33 5f 33 7e 33 88 33 97 33 a5 33 b2 33 e1 33  .2.2.2.2.2.2.3.3S3_3~3.3.3.3.3.3
1006de60  ea 33 f7 33 16 34 24 34 2f 34 3e 34 71 34 86 34 a1 34 b3 34 c4 34 c9 34 de 34 f2 34 74 35 8a 35  .3.3.4$4/4>4q4.4.4.4.4.4.4.4t5.5
1006de80  a0 35 bc 35 da 35 04 36 1a 36 37 36 42 36 5b 36 78 36 9f 36 04 37 0b 37 12 37 23 37 2c 37 35 37  .5.5.5.6.676B6[6x6.6.7.7.7#7,757
1006dea0  48 37 66 37 83 37 af 37 10 38 32 38 50 38 5f 38 e1 38 ed 38 0e 39 38 39 4b 39 55 39 92 3a c0 3a  H7f7.7.7.828P8_8.8.8.989K9U9.:.:
1006dec0  e7 3a 18 3b 39 3b 4b 3b 58 3b 82 3b 01 3c 0a 3c 0f 3c 21 3c 3c 3c 62 3c c4 3c fa 3c 03 3d 2d 3d  .:.;9;K;X;.;.<.<.<!<<<b<.<.<.=-=
1006dee0  95 3d e5 3d b1 3e df 3e fd 3e 0d 3f 1a 3f 37 3f 43 3f 52 3f a1 3f d6 3f f4 3f 00 00 00 a0 01 00  .=.=.>.>.>.?.?7?C?R?.?.?.?......
1006df00  10 01 00 00 14 30 1f 30 70 30 92 30 98 30 c4 30 dc 30 28 31 48 31 59 31 7e 31 88 31 b0 31 07 32  .....0.0p0.0.0.0.0(1H1Y1~1.1.1.2
1006df20  0f 32 17 32 e1 32 f8 32 05 33 71 33 83 33 8b 33 af 33 b7 33 d4 33 dc 33 30 34 36 34 42 34 94 34  .2.2.2.2.3q3.3.3.3.3.3.30464B4.4
1006df40  e6 34 00 35 45 35 11 36 17 36 1f 36 25 36 2b 36 33 36 51 36 57 36 67 36 6d 36 74 36 84 36 9b 36  .4.5E5.6.6.6%6+636Q6W6g6m6t6.6.6
1006df60  ad 36 c9 36 73 37 79 37 a5 37 ba 37 16 38 5d 38 64 38 70 38 7b 38 92 38 bc 38 ce 38 d9 38 f1 38  .6.6s7y7.7.7.8]8d8p8{8.8.8.8.8.8
1006df80  f7 38 41 39 51 39 5f 39 75 39 85 39 d5 39 e8 39 f3 39 0d 3a 1a 3a 2a 3a 38 3a 46 3a 6c 3a 7f 3a  .8A9Q9_9u9.9.9.9.9.:.:*:8:F:l:.:
1006dfa0  87 3a 81 3b 93 3b a5 3b aa 3b c0 3b d5 3b 01 3c 08 3c 11 3c 16 3c 34 3c 45 3c 51 3c 6e 3c 7c 3c  .:.;.;.;.;.;.;.<.<.<.<4<E<Q<n<|<
1006dfc0  91 3c a9 3c b7 3c bd 3c 11 3d 27 3d 2d 3d 51 3d 5a 3d 62 3d 73 3d a2 3d b8 3d c6 3d e1 3d ea 3d  .<.<.<.<.='=-=Q=Z=b=s=.=.=.=.=.=
1006dfe0  fc 3d 11 3e 31 3e 44 3e 61 3e 6a 3e 72 3e 83 3e 8a 3e bd 3e 0a 3f 12 3f 25 3f 2d 3f 51 3f 63 3f  .=.>1>D>a>j>r>.>.>.>.?.?%?-?Q?c?
1006e000  6b 3f 7e 3f 86 3f a1 3f c5 3f 00 00 00 b0 01 00 64 00 00 00 20 30 37 30 74 30 8b 30 51 31 78 32  k?~?.?.?.?......d... 070t0.0Q1x2
1006e020  22 33 77 33 81 33 f9 33 0a 34 31 34 42 34 69 34 81 34 89 34 99 34 a8 34 b0 34 bf 34 f7 34 78 36  "3w3.3.3.414B4i4.4.4.4.4.4.4.4x6
1006e040  ae 36 14 38 3e 38 16 3a bf 3a c8 3a 41 3b 4d 3b 8e 3b a8 3b b7 3b bf 3b ce 3b 06 3c 41 3d 7a 3d  .6.8>8.:.:.:A;M;.;.;.;.;.;.<A=z=
1006e060  8c 3d ac 3d 01 3f 20 3f 39 3f 67 3f 6d 3f 7d 3f 00 c0 01 00 d4 00 00 00 b1 30 c9 30 e7 30 f9 30  .=.=.? ?9?g?m?}?.........0.0.0.0
1006e080  0c 31 19 31 c6 31 d8 31 11 32 2b 32 45 32 57 32 71 32 12 33 7f 33 91 33 11 34 61 34 74 34 7c 34  .1.1.1.1.2+2E2W2q2.3.3.3.4a4t4|4
1006e0a0  eb 34 01 35 14 35 22 35 33 35 c1 36 d2 36 f1 36 0a 37 13 37 26 37 6b 37 70 37 90 37 98 37 9d 37  .4.5.5"535.6.6.6.7.7&7k7p7.7.7.7
1006e0c0  a2 37 b4 37 dc 37 22 38 2a 38 64 38 6c 38 89 38 a4 38 e2 38 fb 38 07 39 13 39 1e 39 30 39 36 39  .7.7.7"8*8d8l8.8.8.8.8.9.9.90969
1006e0e0  72 39 7a 39 93 39 b8 39 e1 39 e9 39 b3 3a b8 3a d8 3a e0 3a e5 3a ea 3a fc 3a 1d 3b 29 3b 49 3b  r9z9.9.9.9.9.:.:.:.:.:.:.:.;);I;
1006e100  57 3b 6b 3b 7f 3b 8d 3b 94 3b e1 3b f0 3b 12 3c 2a 3c 32 3c 52 3c 88 3c 97 3c d8 3c ee 3c 12 3d  W;k;.;.;.;.;.;.<*<2<R<.<.<.<.<.=
1006e120  46 3d 55 3d 98 3d ae 3d d3 3d 21 3e 3e 3e 47 3e 4f 3e 5f 3e 78 3e 8d 3e b2 3e ba 3e 2e 3f 36 3f  F=U=.=.=.=!>>>G>O>_>x>.>.>.>.?6?
1006e140  a3 3f d4 3f 00 d0 01 00 90 00 00 00 49 30 76 30 be 30 cb 30 d8 30 41 31 53 31 66 31 6e 31 8d 31  .?.?........I0v0.0.0.0A1S1f1n1.1
1006e160  a2 31 b3 31 cc 31 da 31 e4 31 ef 31 fc 31 0c 32 17 32 66 32 6b 32 b2 32 fd 32 09 33 18 33 5c 33  .1.1.1.1.1.1.1.2.2f2k2.2.2.3.3\3
1006e180  c7 33 cc 33 d8 33 e3 33 ec 33 15 35 a2 35 d9 35 99 37 d7 37 15 38 ad 38 7b 39 b9 39 0b 3a d9 3a  .3.3.3.3.3.5.5.5.7.7.8.8{9.9.:.:
1006e1a0  19 3b 3b 3b 43 3b 61 3b 72 3b 8f 3b c9 3b 29 3c 35 3c 59 3c 5f 3c 9e 3c ff 3c 0b 3d 69 3d 09 3e  .;;;C;a;r;.;.;)<5<Y<_<.<.<.=i=.>
1006e1c0  3f 3e 9a 3e cf 3e 1e 3f 6f 3f a4 3f aa 3f c2 3f eb 3f 00 00 00 e0 01 00 74 00 00 00 29 30 68 30  ?>.>.>.?o?.?.?.?.?......t...)0h0
1006e1e0  bf 30 d9 30 05 31 3d 31 49 31 a0 31 b4 31 f4 31 16 32 1e 32 5a 32 7f 32 cb 32 f2 32 3d 33 86 33  .0.0.1=1I1.1.1.1.2.2Z2.2.2.2=3.3
1006e200  3f 34 9c 34 c1 34 eb 34 f2 34 63 35 6a 35 d2 35 d8 35 f0 35 2c 36 35 36 b3 36 e6 3a eb 3a 23 3b  ?4.4.4.4.4c5j5.5.5.5,656.6.:.:#;
1006e220  8e 3b d6 3b db 3b f4 3b 56 3c 5b 3c 6e 3c d2 3c dd 3c ef 3c 0f 3d 88 3d 8d 3d 07 3e 06 3f 0b 3f  .;.;.;.;V<[<n<.<.<.<.=.=.=.>.?.?
1006e240  1e 3f a9 3f ba 3f 00 00 00 f0 01 00 5c 00 00 00 14 31 33 32 46 32 4d 32 52 32 65 32 fd 32 0e 33  .?.?.?......\....132F2M2R2e2.2.3
1006e260  23 33 2c 33 81 33 8a 33 93 34 9f 34 88 35 03 37 16 37 1d 37 22 37 35 37 0f 38 21 38 3a 38 43 38  #3,3.3.3.4.4.5.7.7.7"757.8!8:8C8
1006e280  76 38 9b 38 c0 38 c6 38 44 39 4d 39 9f 39 fd 39 bb 3a c7 3a 93 3b f6 3c fb 3c 0e 3d cd 3e db 3e  v8.8.8.8D9M9.9.9.:.:.;.<.<.=.>.>
1006e2a0  ec 3e f5 3e 00 00 02 00 48 00 00 00 56 30 5b 30 6f 30 79 30 bb 31 cd 31 e6 31 ef 31 d5 32 0c 33  .>.>....H...V0[0o0y0.1.1.1.1.2.3
1006e2c0  48 34 c6 35 cb 35 de 35 dc 36 ee 36 80 37 89 37 eb 37 30 38 08 39 91 39 d6 3a db 3a ee 3a ec 3b  H4.5.5.5.6.6.7.7.708.9.9.:.:.:.;
1006e2e0  fd 3b 11 3c 1a 3c ad 3c b6 3c 00 00 00 10 02 00 74 00 00 00 55 30 86 30 b4 30 e2 30 a3 31 d0 31  .;.<.<.<.<......t...U0.0.0.0.1.1
1006e300  72 33 28 34 2c 34 30 34 34 34 38 34 3c 34 40 34 44 34 48 34 4c 34 50 34 54 34 13 35 4b 35 70 35  r3(4,4044484<4@4D4H4L4P4T4.5K5p5
1006e320  95 35 fc 35 22 36 51 36 5a 36 27 37 b6 38 e4 38 fc 38 0b 39 0c 3c 4b 3c 8a 3c ae 3c 81 3d 8d 3d  .5.5"6Q6Z6'7.8.8.8.9.<K<.<.<.=.=
1006e340  bb 3d cb 3d ea 3d 2d 3e 91 3e 9d 3e cb 3e db 3e fa 3e 2b 3f 81 3f 8d 3f bb 3f cb 3f ea 3f 00 00  .=.=.=->.>.>.>.>.>+?.?.?.?.?.?..
1006e360  00 20 02 00 a4 00 00 00 1b 30 71 30 7d 30 ab 30 bb 30 da 30 0b 31 61 31 6d 31 9b 31 ab 31 ca 31  . .......0q0}0.0.0.0.1a1m1.1.1.1
1006e380  fd 31 16 32 40 32 63 32 6f 32 e1 32 ed 32 1b 33 2b 33 4a 33 8f 33 a8 33 d2 33 f5 33 01 34 72 34  .1.2@2c2o2.2.2.3+3J3.3.3.3.3.4r4
1006e3a0  7c 34 e0 34 ec 34 ff 34 08 35 27 35 4e 35 54 35 94 35 b8 35 d4 35 89 36 d1 36 7c 37 9b 37 b5 37  |4.4.4.4.5'5N5T5.5.5.5.6.6|7.7.7
1006e3c0  cf 37 ea 37 05 38 20 38 3b 38 43 38 f1 38 3c 39 0c 3a ae 3a b8 3a df 3a e5 3a 0c 3b 16 3b 20 3b  .7.7.8 8;8C8.8<9.:.:.:.:.:.;.; ;
1006e3e0  2e 3b 55 3b 5b 3b 82 3b 8c 3b 96 3b bf 3b d0 3b d6 3b dc 3b 2d 3c 51 3c b5 3c e0 3c 03 3d 0d 3d  .;U;[;.;.;.;.;.;.;.;-<Q<.<.<.=.=
1006e400  3c 3f ac 3f 00 30 02 00 74 00 00 00 69 30 8e 30 ab 30 d0 30 ea 30 3b 31 4c 31 79 31 a9 31 b5 31  <?.?.0..t...i0.0.0.0.0;1L1y1.1.1
1006e420  bf 31 c5 31 d3 31 f4 31 fa 31 02 32 2b 32 31 32 ce 32 d4 32 e5 32 18 33 1e 35 90 35 99 35 ef 35  .1.1.1.1.1.2+212.2.2.2.3.5.5.5.5
1006e440  f8 35 50 36 59 36 9d 36 b5 36 be 36 f1 38 04 39 2e 39 83 3a aa 3a b7 3a c3 3a c9 3a cf 3a 26 3b  .5P6Y6.6.6.6.8.9.9.:.:.:.:.:.:&;
1006e460  57 3b 61 3d 88 3d d8 3d 5f 3e 82 3e 92 3e a7 3e 69 3f 93 3f d4 3f 00 00 00 40 02 00 90 00 00 00  W;a=.=.=_>.>.>.>i?.?.?...@......
1006e480  32 30 41 30 91 30 cb 30 13 31 68 31 91 31 b1 31 b7 31 c3 31 e3 31 e9 31 f5 31 0c 32 1e 32 24 32  20A0.0.0.1h1.1.1.1.1.1.1.1.2.2$2
1006e4a0  30 32 a2 32 a8 32 b4 32 e5 32 eb 32 f9 32 2b 33 31 33 3f 33 7c 33 78 36 fc 37 29 38 46 38 4e 38  02.2.2.2.2.2.2+313?3|3x6.7)8F8N8
1006e4c0  54 38 45 3a 53 3a a2 3a b1 3a bb 3a d4 3a de 3a 12 3b 1d 3b 4b 3b 83 3b 8f 3b ab 3b c5 3b ef 3b  T8E:S:.:.:.:.:.:.;.;K;.;.;.;.;.;
1006e4e0  49 3c 51 3c 6d 3c 87 3c c1 3c fb 3c 35 3d 6f 3d a9 3d e3 3d 31 3e 4a 3e 65 3e 6d 3e 8b 3e 97 3e  I<Q<m<.<.<.<5=o=.=.=1>J>e>m>.>.>
1006e500  d6 3f e9 3f f6 3f ff 3f 00 50 02 00 70 00 00 00 08 30 1b 30 28 30 31 30 7a 30 8b 30 99 30 cf 30  .?.?.?.?.P..p....0.0(010z0.0.0.0
1006e520  23 31 2e 31 ef 31 0a 32 1c 32 8a 32 e3 32 06 33 f7 35 fe 35 0e 36 46 36 7e 36 b6 36 01 37 0c 37  #1.1.1.2.2.2.2.3.5.5.6F6~6.6.7.7
1006e540  d3 37 ee 37 00 38 7a 38 cd 38 26 39 49 39 06 3a 20 3a 34 3a 48 3a 5c 3a 70 3a 81 3a a5 3a d5 3a  .7.7.8z8.8&9I9.: :4:H:\:p:.:.:.:
1006e560  09 3b 43 3b d3 3b f5 3b 16 3d 3e 3d 56 3d 72 3d 3e 3e bb 3e d8 3f f4 3f 00 60 02 00 5c 00 00 00  .;C;.;.;.=>=V=r=>>.>.?.?.`..\...
1006e580  c1 32 cd 32 fd 32 14 33 1a 33 2f 33 7a 33 fe 33 72 34 eb 34 11 35 36 35 40 35 4a 35 50 35 76 35  .2.2.2.3.3/3z3.3r4.4.565@5J5P5v5
1006e5a0  84 35 b1 35 b8 35 cf 35 f8 35 91 36 a3 36 ac 36 b9 36 c2 36 4e 38 73 38 90 38 d1 38 e5 38 fb 38  .5.5.5.5.5.6.6.6.6.6N8s8.8.8.8.8
1006e5c0  14 39 2a 39 90 3a c3 3a 3f 3b 79 3d 94 3d af 3e b7 3e 61 3f 00 70 02 00 70 00 00 00 c1 30 03 32  .9*9.:.:?;y=.=.>.>a?.p..p....0.2
1006e5e0  4f 32 5e 32 af 32 e9 32 09 33 25 33 41 33 d9 33 16 34 4b 34 60 34 e2 34 8c 35 c1 35 d6 35 1a 37  O2^2.2.2.3%3A3.3.4K4`4.4.5.5.5.7
1006e600  73 37 f0 37 25 38 3e 38 5a 38 63 38 74 38 80 38 bb 38 e5 38 01 39 0a 39 1b 39 27 39 62 39 8c 39  s7.7%8>8Z8c8t8.8.8.8.9.9.9'9b9.9
1006e620  10 3a 87 3a a8 3a fa 3a 22 3b 62 3b 5c 3c 7a 3c ab 3c d3 3c 4e 3d 66 3d 6f 3d 7c 3d 8b 3d 8f 3f  .:.:.:.:";b;\<z<.<.<N=f=o=|=.=.?
1006e640  cd 3f 00 00 00 80 02 00 08 01 00 00 33 30 78 30 ad 30 bc 30 cb 30 da 30 07 31 0f 31 28 31 2c 31  .?..........30x0.0.0.0.0.1.1(1,1
1006e660  30 31 34 31 38 31 3c 31 40 31 44 31 48 31 4c 31 50 31 54 31 58 31 5c 31 60 31 64 31 68 31 6c 31  014181<1@1D1H1L1P1T1X1\1`1d1h1l1
1006e680  70 31 74 31 78 31 7c 31 80 31 84 31 88 31 8c 31 90 31 94 31 b6 36 bc 36 db 36 45 37 56 37 9b 37  p1t1x1|1.1.1.1.1.1.1.6.6.6E7V7.7
1006e6a0  a4 37 b9 37 04 38 1c 38 3f 38 4f 38 82 3a 98 3a bf 3a ca 3a cf 3a da 3a fd 3a 3d 3b 31 3c 36 3c  .7.7.8.8?8O8.:.:.:.:.:.:.:=;1<6<
1006e6c0  40 3c 45 3c 4a 3c 54 3c 59 3c 5e 3c 68 3c 6d 3c 72 3c 7c 3c 81 3c 86 3c 90 3c 95 3c 9a 3c a4 3c  @<E<J<T<Y<^<h<m<r<|<.<.<.<.<.<.<
1006e6e0  a9 3c ae 3c b8 3c bd 3c c2 3c cf 3c d4 3c d9 3c e3 3c e8 3c ed 3c f7 3c fc 3c 01 3d 0b 3d 10 3d  .<.<.<.<.<.<.<.<.<.<.<.<.<.=.=.=
1006e700  15 3d 1f 3d 24 3d 30 3d 40 3d 45 3d 58 3d 60 3d 68 3d 6d 3d 80 3d 88 3d 90 3d 9a 3d 9f 3d a9 3d  .=.=$=0=@=E=X=`=h=m=.=.=.=.=.=.=
1006e720  ae 3d b8 3d bd 3d c7 3d cc 3d d6 3d db 3d e8 3d ee 3d a1 3e b1 3e 3a 3f 42 3f 51 3f 59 3f 61 3f  .=.=.=.=.=.=.=.=.=.>.>:?B?Q?Y?a?
1006e740  8a 3f 92 3f a3 3f ab 3f b3 3f d1 3f 00 90 02 00 b0 00 00 00 09 30 16 30 1d 30 2a 30 8c 30 99 30  .?.?.?.?.?.?.........0.0.0*0.0.0
1006e760  a1 30 ae 30 b4 30 62 31 75 31 c4 31 e7 32 fe 32 04 33 2f 33 4a 33 52 33 b3 33 bb 33 cd 33 d5 33  .0.0.0b1u1.1.2.2.3/3J3R3.3.3.3.3
1006e780  e7 33 ef 33 01 34 09 34 1e 34 26 34 38 34 40 34 86 34 a4 34 ac 34 da 34 e2 34 01 36 09 36 96 36  .3.3.4.4.4&484@4.4.4.4.4.4.6.6.6
1006e7a0  b2 36 ba 36 55 37 5e 37 b8 37 d5 37 dd 37 06 38 0e 38 28 38 38 38 86 38 a0 38 a8 38 2e 39 66 39  .6.6U7^7.7.7.7.8.8(888.8.8.8.9f9
1006e7c0  80 39 88 39 d6 39 f0 39 f8 39 11 3c 20 3c 2e 3c 47 3c 5f 3c 06 3d 1f 3d 24 3d 35 3d 3a 3d 3f 3d  .9.9.9.9.9.< <.<G<_<.=.=$=5=:=?=
1006e7e0  51 3d b5 3d c7 3d cd 3d e4 3d 13 3e 40 3e 50 3e 63 3e 7b 3e f5 3e fd 3e 64 3f cf 3f 00 a0 02 00  Q=.=.=.=.=.>@>P>c>{>.>.>d?.?....
1006e800  6c 00 00 00 49 30 f2 31 2e 32 fa 32 02 33 1c 33 24 33 50 33 6d 33 96 33 bb 33 ed 33 f5 33 12 34  l...I0.1.2.2.3.3$3P3m3.3.3.3.3.4
1006e820  1a 34 ca 35 d2 35 e4 35 ec 35 54 36 5c 36 65 36 b9 36 c1 36 c7 36 69 37 71 37 b6 37 be 37 2a 38  .4.5.5.5.5T6\6e6.6.6.6i7q7.7.7*8
1006e840  40 38 48 38 81 38 95 38 9a 38 c0 38 cf 38 f5 38 09 39 35 39 42 39 4f 39 54 39 a1 39 b3 39 e2 39  @8H8.8.8.8.8.8.8.959B9O9T9.9.9.9
1006e860  00 3a 0b 3a bd 3a c5 3a 00 b0 02 00 78 00 00 00 8a 30 ab 30 c0 30 d5 30 35 31 3d 31 0c 32 30 32  .:.:.:.:....x....0.0.0.051=1.202
1006e880  9a 32 1e 33 f7 33 2f 34 67 34 79 34 00 35 08 35 24 35 2c 35 41 35 7c 35 a5 35 c6 35 f3 35 14 36  .2.3.3/4g4y4.5.5$5,5A5|5.5.5.5.6
1006e8a0  37 36 3f 36 c3 37 33 38 6b 38 78 38 1a 39 32 39 47 39 4e 39 b5 39 bd 39 db 3a f1 3a ab 3b bd 3b  76?6.738k8x8.929G9N9.9.9.:.:.;.;
1006e8c0  3d 3c 45 3c 61 3c 69 3c 86 3c c5 3c cd 3c d6 3d 2b 3e c2 3e e8 3e fd 3e 1d 3f 32 3f 4f 3f 00 00  =<E<a<i<.<.<.<.=+>.>.>.>.?2?O?..
1006e8e0  00 c0 02 00 5c 00 00 00 c4 31 0c 32 47 32 74 32 e4 32 35 34 3d 34 76 34 7e 34 d9 34 0c 35 5c 35  ....\....1.2G2t2.254=4v4~4.4.5\5
1006e900  7f 35 be 35 fe 35 17 36 81 36 89 36 d7 36 06 37 0e 37 89 39 6b 3a 78 3a 80 3a 8a 3a 70 3b 78 3b  .5.5.5.6.6.6.6.7.7.9k:x:.:.:p;x;
1006e920  11 3c 63 3e 78 3e 94 3e a6 3e c2 3e 5a 3f 7f 3f 9d 3f a8 3f bc 3f d3 3f ea 3f 00 00 00 d0 02 00  .<c>x>.>.>.>Z?.?.?.?.?.?.?......
1006e940  8c 00 00 00 01 30 18 30 38 30 43 30 58 30 6d 30 89 30 9e 30 b7 30 d0 30 e8 30 fd 30 95 32 9d 32  .....0.080C0X0m0.0.0.0.0.0.0.2.2
1006e960  d4 32 dc 32 0c 33 73 33 9c 33 b4 33 d1 33 ee 33 0b 34 28 34 3e 34 c2 34 cd 34 e3 34 26 35 43 35  .2.2.3s3.3.3.3.3.4(4>4.4.4.4&5C5
1006e980  9a 35 22 36 2a 36 3c 36 7f 36 87 36 9c 36 a4 36 e2 37 fb 37 05 38 13 38 2a 38 3e 38 53 38 cb 38  .5"6*6<6.6.6.6.6.7.7.8.8*8>8S8.8
1006e9a0  d3 38 63 39 ce 39 48 3a 85 3a e3 3a 3f 3b ec 3b 34 3c 70 3c 1b 3d 23 3d 35 3d 3d 3d 70 3d 8d 3d  .8c9.9H:.:.:?;.;4<p<.=#=5===p=.=
1006e9c0  bf 3d c7 3d e4 3d ec 3d 00 e0 02 00 c8 00 00 00 1c 30 24 30 b3 30 bb 30 4c 32 54 32 6f 32 77 32  .=.=.=.=.........0$0.0.0L2T2o2w2
1006e9e0  8f 32 97 32 b2 32 ba 32 ce 32 d6 32 1f 34 66 34 a6 34 d3 35 db 35 f8 35 03 36 0b 36 19 36 21 36  .2.2.2.2.2.2.4f4.4.5.5.5.6.6.6!6
1006ea00  32 36 3a 36 4b 36 53 36 64 36 6c 36 7d 36 85 36 9f 36 aa 36 b2 36 c1 36 c9 36 d8 36 e0 36 f2 36  26:6K6S6d6l6}6.6.6.6.6.6.6.6.6.6
1006ea20  fa 36 09 37 11 37 24 37 2c 37 40 37 48 37 fd 37 32 39 89 39 ac 3a c3 3a 72 3b b1 3b b6 3b c6 3b  .6.7.7$7,7@7H7.729.9.:.:r;.;.;.;
1006ea40  cb 3b d0 3b e0 3b e5 3b ea 3b fa 3b ff 3b 04 3c 0f 3c 1e 3c 23 3c 36 3c 81 3c 96 3c 9c 3c ae 3c  .;.;.;.;.;.;.;.<.<.<#<6<.<.<.<.<
1006ea60  b4 3c c6 3c cc 3c de 3c e4 3c f7 3c 2b 3d 30 3d 4d 3d 55 3d 5a 3d 5f 3d c0 3d c8 3d 02 3e 0a 3e  .<.<.<.<.<.<+=0=M=U=Z=_=.=.=.>.>
1006ea80  5c 3e ff 3e 4e 3f 56 3f 77 3f 7f 3f 95 3f dc 3f 00 f0 02 00 98 00 00 00 0b 30 13 30 4c 31 a1 31  \>.>N?V?w?.?.?.?.........0.0L1.1
1006eaa0  b5 31 ba 31 e2 31 ed 31 01 32 0f 32 16 32 25 32 2b 32 71 32 7a 32 82 32 91 32 b6 32 be 32 e2 32  .1.1.1.1.2.2.2%2+2q2z2.2.2.2.2.2
1006eac0  fa 32 02 33 38 33 74 33 7e 33 84 33 94 33 99 33 e9 33 13 34 2d 34 a7 34 ce 34 db 34 34 35 3c 35  .2.383t3~3.3.3.3.3.4-4.4.4.445<5
1006eae0  90 35 98 35 a9 35 c9 35 cf 35 d7 35 a2 36 ab 36 c3 36 73 37 55 38 91 38 9e 38 b7 38 14 39 32 39  .5.5.5.5.5.5.6.6.6s7U8.8.8.8.929
1006eb00  50 39 6e 39 8c 39 aa 39 2a 3a 38 3a 6b 3a 02 3b 69 3b 22 3c 71 3c 62 3d a1 3d a9 3d 0c 3f 24 3f  P9n9.9.9*:8:k:.;i;"<q<b=.=.=.?$?
1006eb20  58 3f b7 3f f5 3f 00 00 00 00 03 00 54 00 00 00 00 30 0d 30 5e 31 e5 32 fa 32 2f 33 8e 33 dd 33  X?.?.?......T....0.0^1.2.2/3.3.3
1006eb40  ec 33 fd 33 00 35 9f 36 ad 36 bb 36 c7 36 d5 36 14 38 e9 38 f1 38 01 39 d1 39 d6 39 e9 39 f2 39  .3.3.5.6.6.6.6.6.8.8.8.9.9.9.9.9
1006eb60  fa 39 21 3a 34 3a 69 3a 76 3a 7d 3a 8a 3a df 3a aa 3d c3 3d e7 3d 15 3e 6f 3f 77 3f 00 10 03 00  .9!:4:i:v:}:.:.:.=.=.=.>o?w?....
1006eb80  48 00 00 00 09 33 70 34 b6 34 e0 34 f2 34 13 35 49 35 56 35 73 35 7d 35 8e 35 a8 35 67 36 be 36  H....3p4.4.4.4.5I5V5s5}5.5.5g6.6
1006eba0  14 37 e5 37 02 38 c2 39 ff 39 08 3a 21 3a cb 3a 1e 3b 64 3c 40 3d 4c 3d 61 3d a6 3e f5 3e 19 3f  .7.7.8.9.9.:!:.:.;d<@=L=a=.>.>.?
1006ebc0  2b 3f 31 3f 00 20 03 00 70 00 00 00 1e 30 30 30 36 30 44 30 4a 30 e6 31 08 32 21 32 2f 32 35 32  +?1?. ..p....00060D0J0.1.2!2/252
1006ebe0  db 32 2d 33 49 33 57 33 5d 33 21 35 27 35 2f 35 39 35 65 35 4a 36 a4 36 aa 36 b2 36 d2 36 d8 36  .2-3I3W3]3!5'5/595e5J6.6.6.6.6.6
1006ec00  e0 36 05 37 0b 37 13 37 1d 37 61 38 c3 38 d7 38 e8 38 fb 38 01 39 44 3b 79 3b a0 3b ca 3b dd 3b  .6.7.7.7.7a8.8.8.8.8.9D;y;.;.;.;
1006ec20  74 3c 89 3c c3 3c df 3c ed 3c f3 3c 33 3d 52 3d 17 3f 28 3f 00 30 03 00 80 00 00 00 26 30 54 31  t<.<.<.<.<.<3=R=.?(?.0......&0T1
1006ec40  56 32 17 33 2b 33 3a 33 40 33 4e 33 54 33 14 34 24 34 33 34 3c 34 42 34 6f 34 23 35 5d 35 c6 35  V2.3+3:3@3N3T3.4$434<4B4o4#5]5.5
1006ec60  04 36 12 36 18 36 a1 38 b0 38 b5 38 c2 38 cb 38 d7 38 e0 38 ed 38 11 39 1a 39 2d 39 3a 39 43 39  .6.6.6.8.8.8.8.8.8.8.8.9.9-9:9C9
1006ec80  b9 39 aa 3a bb 3a 24 3b 8b 3b 9f 3b af 3b e1 3b 12 3c 26 3c df 3c 04 3d 24 3d 37 3d 5b 3d 6c 3d  .9.:.:$;.;.;.;.;.<&<.<.=$=7=[=l=
1006eca0  72 3d 78 3d fe 3e 67 3f 76 3f 7c 3f 8a 3f 90 3f ca 3f 00 00 00 40 03 00 b0 00 00 00 82 31 9a 31  r=x=.>g?v?|?.?.?.?...@.......1.1
1006ecc0  a2 31 b0 31 b4 31 b8 31 bc 31 c0 31 c4 31 c8 31 cc 31 d0 31 d4 31 d8 31 dc 31 e0 31 72 32 84 32  .1.1.1.1.1.1.1.1.1.1.1.1.1.1r2.2
1006ece0  8a 32 90 32 96 32 a0 32 41 36 62 37 b2 37 a5 38 ad 38 c1 38 fc 38 00 39 04 39 08 39 0c 39 10 39  .2.2.2.2A6b7.7.8.8.8.8.9.9.9.9.9
1006ed00  14 39 18 39 1c 39 20 39 24 39 28 39 2c 39 30 39 34 39 38 39 3c 39 40 39 44 39 48 39 4c 39 50 39  .9.9.9 9$9(9,9094989<9@9D9H9L9P9
1006ed20  54 39 58 39 5c 39 60 39 26 3b 2f 3b 49 3b bb 3b c0 3b e2 3b ea 3b ef 3b f4 3b 07 3c 0c 3c 29 3c  T9X9\9`9&;/;I;.;.;.;.;.;.;.<.<)<
1006ed40  31 3c 36 3c 3b 3c 93 3c 9b 3c db 3c e3 3c 53 3d d2 3d f0 3d 65 3e f4 3e fc 3e 3f 3f 47 3f 75 3f  1<6<;<.<.<.<.<S=.=.=e>.>.>??G?u?
1006ed60  7d 3f 00 00 00 50 03 00 70 00 00 00 35 30 3d 30 64 30 6c 30 87 30 aa 30 cd 30 d5 30 f5 30 fd 30  }?...P..p...50=0d0l0.0.0.0.0.0.0
1006ed80  62 33 6a 33 7b 33 c6 33 36 34 73 34 c0 34 05 35 e9 35 81 36 86 36 99 36 a2 36 aa 36 d1 36 e4 36  b3j3{3.364s4.4.5.5.6.6.6.6.6.6.6
1006eda0  2b 37 67 37 9f 37 28 38 42 38 74 38 9f 38 ca 38 06 39 34 3a 7a 3a 94 3a c0 3a ff 3a bb 3b e9 3b  +7g7.7(8B8t8.8.8.94:z:.:.:.:.;.;
1006edc0  41 3c 92 3c f2 3c 25 3d 76 3d 98 3d e4 3d 48 3e f3 3f fb 3f 00 60 03 00 6c 00 00 00 37 30 3f 30  A<.<.<%=v=.=.=H>.?.?.`..l...70?0
1006ede0  7f 30 5e 31 b8 31 0e 32 85 32 df 32 e7 32 fc 32 d2 33 ec 33 1b 34 23 34 81 35 ac 35 cf 35 f2 35  .0^1.1.2.2.2.2.2.3.3.4#4.5.5.5.5
1006ee00  fd 35 28 36 b7 36 e1 36 17 37 2b 37 4c 37 74 37 bc 37 d4 37 1f 38 b9 38 eb 38 fd 38 45 39 c9 3a  .5(6.6.6.7+7L7t7.7.7.8.8.8.8E9.:
1006ee20  59 3b 92 3b d3 3b 04 3c 08 3d 0e 3d 2d 3d 33 3d 57 3d 5d 3d 6d 3d b6 3e d1 3e cc 3f e6 3f ee 3f  Y;.;.;.<.=.=-=3=W=]=m=.>.>.?.?.?
1006ee40  00 70 03 00 2c 01 00 00 33 30 3b 30 9c 30 a3 30 cc 30 d3 30 fc 30 03 31 2c 31 33 31 5c 31 63 31  .p..,...30;0.0.0.0.0.0.1,131\1c1
1006ee60  8c 31 93 31 c0 31 d9 31 e0 31 36 32 3e 32 80 32 c6 32 f6 32 26 33 56 33 96 33 d6 33 06 34 36 34  .1.1.1.1.162>2.2.2.2&3V3.3.3.464
1006ee80  66 34 96 34 c6 34 f6 34 26 35 33 35 64 35 a6 35 e6 35 04 36 61 36 75 36 91 36 b5 36 20 37 75 37  f4.4.4.4&535d5.5.5.6a6u6.6.6 7u7
1006eea0  7e 37 e5 37 f2 37 83 38 96 38 06 39 20 39 28 39 56 39 70 39 78 39 a1 39 af 39 b7 39 e1 39 01 3a  ~7.7.7.8.8.9 9(9V9p9x9.9.9.9.9.:
1006eec0  06 3a 10 3a 15 3a 1a 3a 24 3a 29 3a 2e 3a 38 3a 3d 3a 42 3a 4c 3a 51 3a 56 3a 60 3a 65 3a 6a 3a  .:.:.:.:$:):.:8:=:B:L:Q:V:`:e:j:
1006eee0  74 3a 79 3a 7e 3a 88 3a 8d 3a 92 3a 9f 3a a4 3a a9 3a b3 3a b8 3a bd 3a c7 3a cc 3a d1 3a db 3a  t:y:~:.:.:.:.:.:.:.:.:.:.:.:.:.:
1006ef00  e0 3a e5 3a ef 3a f4 3a f9 3a 03 3b 08 3b 0d 3b 17 3b 1c 3b 21 3b 2b 3b 30 3b 35 3b 42 3b b1 3b  .:.:.:.:.:.;.;.;.;.;!;+;0;5;B;.;
1006ef20  bb 3b c3 3b d2 3b dc 3b e4 3b e9 3b f1 3b fb 3b 00 3c 06 3c 19 3c 1e 3c 23 3c 32 3c 3c 3c 42 3c  .;.;.;.;.;.;.;.;.<.<.<.<#<2<<<B<
1006ef40  93 3c 9b 3c f1 3c fa 3c 02 3d 31 3d 3d 3d 49 3d 50 3d e4 3d ec 3d 12 3e 5b 3e 63 3e b0 3e b8 3e  .<.<.<.<.=1===I=P=.=.=.>[>c>.>.>
1006ef60  02 3f 19 3f 72 3f 8e 3f e3 3f 00 00 00 80 03 00 14 01 00 00 00 30 1e 30 72 30 8e 30 e2 30 fe 30  .?.?r?.?.?...........0.0r0.0.0.0
1006ef80  51 31 6e 31 92 31 ae 31 02 32 1e 32 72 32 8e 32 f2 32 0e 33 82 33 9e 33 f2 33 0e 34 8c 34 91 34  Q1n1.1.1.2.2r2.2.2.3.3.3.3.4.4.4
1006efa0  9a 34 9e 34 a4 34 a8 34 ae 34 b2 34 b8 34 bc 34 c2 34 c6 34 cc 34 d0 34 d6 34 da 34 e0 34 e4 34  .4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4
1006efc0  ea 34 ee 34 f4 34 f8 34 fe 34 02 35 08 35 0c 35 12 35 16 35 1c 35 20 35 26 35 2a 35 30 35 34 35  .4.4.4.4.4.5.5.5.5.5.5 5&5*50545
1006efe0  3a 35 3e 35 44 35 48 35 4e 35 52 35 58 35 5c 35 f9 35 88 36 19 37 59 37 b8 37 cc 37 61 38 6c 38  :5>5D5H5N5R5X5\5.5.6.7Y7.7.7a8l8
1006f000  d1 38 df 38 e9 38 f6 38 13 39 76 39 a7 39 e2 3b e7 3b f2 3b 21 3c 2a 3c 2f 3c 37 3c 41 3c 4f 3c  .8.8.8.8.9v9.9.;.;.;!<*</<7<A<O<
1006f020  59 3c 61 3c 71 3c 7b 3c 80 3c 88 3c 92 3c 9a 3c f1 3c 07 3d 0c 3d 14 3d 1d 3d 22 3d 2a 3d 34 3d  Y<a<q<{<.<.<.<.<.<.=.=.=.="=*=4=
1006f040  61 3d 81 3d 9a 3d 9f 3d ab 3d d3 3d e1 3d ed 3d f3 3d 04 3e 0d 3e 24 3e 2a 3e 36 3e 3d 3e 4d 3e  a=.=.=.=.=.=.=.=.=.>.>$>*>6>=>M>
1006f060  5e 3e 63 3e 6f 3e 75 3e 7d 3e c1 3e e1 3e 1d 3f 26 3f 32 3f 68 3f 9c 3f bc 3f c1 3f cd 3f d2 3f  ^>c>o>u>}>.>.>.?&?2?h?.?.?.?.?.?
1006f080  00 90 03 00 64 00 00 00 5c 30 64 30 79 30 81 30 b6 30 d3 30 d9 30 e2 30 e8 30 ee 30 25 31 51 31  ....d...\0d0y0.0.0.0.0.0.0.0%1Q1
1006f0a0  5a 31 62 31 68 31 6e 31 76 31 96 31 c1 31 d3 31 e0 31 38 32 40 32 a8 32 b0 32 25 34 1b 35 5e 36  Z1b1h1n1v1.1.1.1.182@2.2.2%4.5^6
1006f0c0  8f 36 c6 36 11 37 9a 37 dc 37 1b 38 ae 38 dc 38 2c 39 51 39 76 39 78 3a 08 3b e7 3e 07 3f 17 3f  .6.6.7.7.7.8.8.8,9Q9v9x:.;.>.?.?
1006f0e0  27 3f 00 00 00 a0 03 00 44 00 00 00 33 30 43 30 e3 30 0f 31 87 31 a3 31 30 32 34 32 38 32 3c 32  '?......D...30C0.0.1.1.1024282<2
1006f100  af 33 36 34 93 34 c5 34 aa 35 60 39 7e 39 28 3a 43 3a 3a 3b 68 3c 9a 3c 36 3d 1e 3e 43 3e 81 3e  .364.4.4.5`9~9(:C::;h<.<6=.>C>.>
1006f120  a1 3e 6f 3f b0 3f 00 00 00 b0 03 00 8c 00 00 00 52 30 88 30 ca 30 d5 30 e0 30 eb 30 f6 30 73 31  .>o?.?..........R0.0.0.0.0.0.0s1
1006f140  a5 31 e9 31 3d 33 61 33 b4 34 bc 34 e6 34 21 35 2f 35 39 35 83 36 e1 36 13 37 12 38 2a 38 a2 38  .1.1=3a3.4.4.4!5/595.6.6.7.8*8.8
1006f160  e0 38 e7 38 38 39 3c 39 40 39 44 39 48 39 4c 39 50 39 54 39 58 39 5c 39 60 39 64 39 68 39 d5 3a  .8.889<9@9D9H9L9P9T9X9\9`9d9h9.:
1006f180  dc 3a 76 3b b4 3b 7b 3c 4e 3d 61 3d 6f 3d 7f 3d 92 3d a1 3d b6 3d cb 3d df 3d eb 3d f3 3d fe 3d  .:v;.;{<N=a=o=.=.=.=.=.=.=.=.=.=
1006f1a0  0e 3e 1e 3e b3 3e ba 3e c7 3e 7a 3f 8c 3f cb 3f dd 3f 00 00 00 c0 03 00 68 00 00 00 93 31 41 32  .>.>.>.>.>z?.?.?.?......h....1A2
1006f1c0  4d 32 59 32 08 33 0c 33 10 33 14 33 40 33 44 33 48 33 4c 33 50 33 54 33 58 33 5c 33 60 33 64 33  M2Y2.3.3.3.3@3D3H3L3P3T3X3\3`3d3
1006f1e0  68 33 6c 33 70 33 74 33 78 33 7c 33 80 33 84 33 88 33 8c 33 90 33 94 33 98 33 97 36 da 36 c9 37  h3l3p3t3x3|3.3.3.3.3.3.3.3.6.6.7
1006f200  e9 37 47 39 74 39 bf 39 d6 3a f6 3a 74 3c 05 3d 37 3d 58 3d 8f 3d 26 3e 03 3f e3 3f 00 d0 03 00  .7G9t9.9.:.:t<.=7=X=.=&>.?.?....
1006f220  6c 00 00 00 26 30 b4 30 e5 30 0a 31 15 31 5b 31 79 31 43 32 53 33 af 33 44 34 75 34 9a 34 a5 34  l...&0.0.0.1.1[1y1C2S3.3D4u4.4.4
1006f240  f6 34 14 35 7a 36 db 36 65 37 98 37 9f 37 a5 37 be 37 c4 37 d9 37 df 37 e5 37 ff 37 04 38 19 38  .4.5z6.6e7.7.7.7.7.7.7.7.7.7.8.8
1006f260  1f 38 24 38 3b 38 7a 38 7f 38 92 38 a0 38 a7 38 ba 38 c1 38 ca 38 df 38 19 39 53 39 8d 39 c1 39  .8$8;8z8.8.8.8.8.8.8.8.8.9S9.9.9
1006f280  f3 39 f8 3a ed 3d 00 00 00 e0 03 00 48 00 00 00 81 32 ff 32 07 33 7f 33 87 33 e6 33 f9 33 4a 35  .9.:.=......H....2.2.3.3.3.3.3J5
1006f2a0  51 35 46 36 9c 36 cc 36 d0 36 d4 36 d8 36 dc 36 e0 36 e4 36 e8 36 ec 36 f0 36 f4 36 f8 36 fc 36  Q5F6.6.6.6.6.6.6.6.6.6.6.6.6.6.6
1006f2c0  00 39 4c 39 66 39 5c 3a 2e 3b 71 3d 0f 3e 81 3e 00 f0 03 00 5c 00 00 00 55 30 9c 30 91 32 36 34  .9L9f9\:.;q=.>.>....\...U0.0.264
1006f2e0  fa 34 5b 35 e7 35 1c 36 23 36 29 36 42 36 48 36 5d 36 63 36 69 36 83 36 88 36 9d 36 a3 36 a8 36  .4[5.5.6#6)6B6H6]6c6i6.6.6.6.6.6
1006f300  bf 36 00 37 05 37 18 37 26 37 2d 37 40 37 47 37 50 37 63 37 9d 37 d7 37 11 38 45 38 70 38 a7 38  .6.7.7.7&7-7@7G7P7c7.7.7.8E8p8.8
1006f320  c8 39 ff 3d 68 3e e5 3e 55 3f 00 00 00 00 04 00 50 00 00 00 b0 31 bc 32 f6 32 fb 32 0d 33 8e 35  .9.=h>.>U?......P....1.2.2.2.3.5
1006f340  a9 35 e8 35 2d 36 5f 36 ca 36 d4 37 93 38 e2 3a 15 3b 7c 3b c3 3b ec 3b 74 3c ae 3c 01 3d 1c 3d  .5.5-6_6.6.7.8.:.;|;.;.;t<.<.=.=
1006f360  3c 3d 68 3d 6c 3d 70 3d 74 3d 78 3d 7c 3d 42 3e 96 3e e4 3e 42 3f 8c 3f b5 3f 00 00 00 10 04 00  <=h=l=p=t=x=|=B>.>.>B?.?.?......
1006f380  e4 00 00 00 01 30 0a 30 26 30 5b 30 ad 30 c5 30 ee 30 30 31 4c 31 50 31 54 31 58 31 5c 31 60 31  .....0.0&0[0.0.0.001L1P1T1X1\1`1
1006f3a0  5d 32 6a 32 76 32 80 32 87 32 8e 32 a8 32 b0 32 b7 32 bd 32 c4 32 db 32 e2 32 e9 32 ef 32 f5 32  ]2j2v2.2.2.2.2.2.2.2.2.2.2.2.2.2
1006f3c0  fe 32 15 33 1a 33 20 33 26 33 2f 33 3a 33 3f 33 50 33 58 33 5e 33 6b 33 71 33 78 33 83 33 8a 33  .2.3.3 3&3/3:3?3P3X3^3k3q3x3.3.3
1006f3e0  8f 33 94 33 a1 33 ae 33 b6 33 bf 33 c8 33 d0 33 d9 33 e7 33 f0 33 f9 33 09 34 1e 34 25 34 50 34  .3.3.3.3.3.3.3.3.3.3.3.3.4.4%4P4
1006f400  57 34 7b 34 af 34 b5 34 c4 34 ce 34 da 34 ed 34 f4 34 01 36 08 36 0f 36 1b 36 23 36 30 36 51 36  W4{4.4.4.4.4.4.4.4.6.6.6.6#606Q6
1006f420  5c 36 6a 36 84 36 8a 36 91 36 9a 36 b6 36 dd 36 69 37 9a 37 a9 37 b6 37 bf 37 cc 37 e6 37 07 38  \6j6.6.6.6.6.6.6i7.7.7.7.7.7.7.8
1006f440  1a 38 27 38 49 38 5e 38 6b 38 7f 39 a8 3b 40 3c 13 3d bd 3d ec 3d 6d 3f 7b 3f 9f 3f ad 3f 00 00  .8'8I8^8k8.9.;@<.=.=.=m?{?.?.?..
1006f460  00 20 04 00 44 01 00 00 17 30 24 30 30 30 3a 30 41 30 48 30 5b 30 61 30 6c 30 72 30 83 30 8b 30  . ..D....0$000:0A0H0[0a0l0r0.0.0
1006f480  91 30 9a 30 a0 30 a7 30 af 30 b4 30 bd 30 c2 30 c8 30 d0 30 d5 30 e2 30 e7 30 f1 30 f9 30 00 31  .0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1
1006f4a0  18 31 24 31 36 31 3c 31 42 31 48 31 4e 31 54 31 5a 31 60 31 66 31 6c 31 72 31 78 31 7e 31 84 31  .1$161<1B1H1N1T1Z1`1f1l1r1x1~1.1
1006f4c0  8a 31 90 31 96 31 9c 31 a2 31 a8 31 ae 31 b4 31 ba 31 c0 31 d5 31 db 31 eb 31 fe 31 0f 32 17 32  .1.1.1.1.1.1.1.1.1.1.1.1.1.1.2.2
1006f4e0  25 32 2f 32 39 32 3f 32 45 32 52 32 5e 32 71 32 79 32 81 32 88 32 8e 32 95 32 a0 32 a7 32 81 33  %2/292?2E2R2^2q2y2.2.2.2.2.2.2.3
1006f500  8c 33 91 33 98 33 34 35 3a 35 4b 35 51 35 62 35 68 35 7b 35 81 35 b9 36 c3 36 cb 36 d3 36 dd 36  .3.3.345:5K5Q5b5h5{5.5.6.6.6.6.6
1006f520  e5 36 ee 36 fe 36 06 37 0e 37 14 37 1c 37 22 37 2b 37 3e 37 44 37 4a 37 50 37 56 37 60 37 66 37  .6.6.6.7.7.7.7"7+7>7D7J7P7V7`7f7
1006f540  6c 37 72 37 78 37 80 37 89 37 8f 37 95 37 a6 37 ac 37 b2 37 b8 37 be 37 c8 37 ce 37 d4 37 da 37  l7r7x7.7.7.7.7.7.7.7.7.7.7.7.7.7
1006f560  e0 37 eb 37 f1 37 85 38 b6 3c bb 3c dc 3c e9 3c f5 3c 02 3d 46 3d 5e 3d b2 3d 1f 3e 31 3e 93 3e  .7.7.7.8.<.<.<.<.<.=F=^=.=.>1>.>
1006f580  9c 3e a6 3e aa 3e b0 3e b4 3e ba 3e be 3e c4 3e c8 3e ce 3e d2 3e d8 3e dc 3e e2 3e e6 3e ec 3e  .>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>
1006f5a0  f0 3e 19 3f 00 30 04 00 84 00 00 00 b6 32 c3 32 26 33 33 33 02 35 5d 36 6d 36 7a 36 80 36 17 38  .>.?.0.......2.2&333.5]6m6z6.6.8
1006f5c0  37 38 57 38 77 38 97 38 b7 38 09 3a 0f 3a 13 3a 19 3a 1d 3a 23 3a 27 3a 2d 3a 31 3a 37 3a 3b 3a  78W8w8.8.8.:.:.:.:.:#:':-:1:7:;:
1006f5e0  41 3a 45 3a 4c 3a 52 3a 56 3a 5c 3a 60 3a 66 3a 6a 3a 70 3a 74 3a 7a 3a 7e 3a 84 3a 88 3a cb 3a  A:E:L:R:V:\:`:f:j:p:t:z:~:.:.:.:
1006f600  d8 3a fb 3a 0a 3b 62 3b 73 3b 8e 3b 96 3b e0 3b f4 3b 26 3d 82 3d 95 3d d1 3d 2c 3e 37 3e 42 3e  .:.:.;b;s;.;.;.;.;&=.=.=.=,>7>B>
1006f620  52 3e b2 3e c6 3f dc 3f 00 40 04 00 80 00 00 00 12 30 2f 30 45 30 57 30 6f 30 85 30 ee 30 29 31  R>.>.?.?.@.......0/0E0W0o0.0.0)1
1006f640  82 31 9a 31 b2 31 46 32 4c 32 52 32 58 32 5e 32 64 32 6a 32 70 32 76 32 7c 32 82 32 91 32 9f 32  .1.1.1F2L2R2X2^2d2j2p2v2|2.2.2.2
1006f660  a5 32 a9 32 ae 32 b4 32 b8 32 be 32 c2 32 c8 32 cc 32 d1 32 db 32 e1 32 7f 33 9a 33 d4 33 ef 33  .2.2.2.2.2.2.2.2.2.2.2.2.3.3.3.3
1006f680  18 34 2c 34 6b 34 86 34 b3 34 c7 34 29 35 88 35 f8 35 57 36 03 3b 70 3b e4 3e ee 3e 22 3f 2f 3f  .4,4k4.4.4.4)5.5.5W6.;p;.>.>"?/?
1006f6a0  54 3f a6 3f bc 3f 00 00 00 50 04 00 18 01 00 00 00 30 0e 30 cd 30 e1 30 64 31 b6 31 d1 31 d9 31  T?.?.?...P.......0.0.0.0d1.1.1.1
1006f6c0  df 31 e5 31 26 32 58 32 6c 32 80 32 c1 32 28 33 40 33 47 33 4f 33 54 33 58 33 5c 33 85 33 ab 33  .1.1&2X2l2.2.2(3@3G3O3T3X3\3.3.3
1006f6e0  c5 33 cc 33 d0 33 d4 33 d8 33 dc 33 e0 33 e4 33 e8 33 32 34 38 34 3c 34 40 34 44 34 aa 34 b5 34  .3.3.3.3.3.3.3.3.32484<4@4D4.4.4
1006f700  d0 34 d7 34 dc 34 e0 34 e4 34 01 35 2b 35 5d 35 64 35 68 35 6c 35 70 35 74 35 78 35 7c 35 80 35  .4.4.4.4.4.5+5]5d5h5l5p5t5x5|5.5
1006f720  ca 35 d0 35 d4 35 d8 35 dc 35 cb 37 d5 37 e0 37 ed 37 fa 37 07 38 14 38 1b 38 2a 38 57 38 61 38  .5.5.5.5.5.7.7.7.7.7.8.8.8*8W8a8
1006f740  e0 38 f4 38 fd 38 23 39 3f 39 45 39 21 3a 28 3a 41 3a 83 3a 95 3a 29 3b 2f 3b 7e 3b 8c 3b 9e 3b  .8.8.8#9?9E9!:(:A:.:.:);/;~;.;.;
1006f760  a9 3b d6 3b e1 3b f3 3b 2e 3c 3c 3c 4e 3c 59 3c 86 3c 91 3c a3 3c be 3c 06 3d 0c 3d 1a 3d 69 3d  .;.;.;.;.<<<N<Y<.<.<.<.<.=.=.=i=
1006f780  8f 3d 96 3d a5 3d ad 3d b8 3d be 3d c4 3d ce 3d e6 3d eb 3d f5 3d 0f 3e 1d 3e 25 3e 2b 3e 6e 3e  .=.=.=.=.=.=.=.=.=.=.=.>.>%>+>n>
1006f7a0  80 3e dc 3e f7 3e 06 3f 22 3f 43 3f 4c 3f 67 3f 7a 3f 80 3f 89 3f 90 3f b9 3f d4 3f e4 3f 00 00  .>.>.>.?"?C?L?g?z?.?.?.?.?.?.?..
1006f7c0  00 60 04 00 50 00 00 00 02 30 52 30 4d 31 59 31 7d 32 f9 33 11 34 96 34 ae 34 79 36 8d 36 be 36  .`..P....0R0M1Y1}2.3.4.4.4y6.6.6
1006f7e0  da 36 e7 36 fb 36 8e 37 a2 37 fa 37 20 38 30 39 3f 3a 5f 3a 2b 3b 42 3b 7a 3b 8e 3b 3f 3c 53 3c  .6.6.6.7.7.7 809?:_:+;B;z;.;?<S<
1006f800  79 3c 90 3c 56 3d ef 3d 0c 3e 8e 3f 9d 3f 00 00 00 70 04 00 a0 00 00 00 29 30 85 30 20 31 c4 31  y<.<V=.=.>.?.?...p......)0.0 1.1
1006f820  2c 34 56 35 5c 35 76 35 81 35 89 35 9e 35 a9 35 b1 35 c6 35 cc 35 0f 36 52 36 92 37 a3 37 af 37  ,4V5\5v5.5.5.5.5.5.5.5.6R6.7.7.7
1006f840  e4 38 17 39 ea 39 fc 39 0e 3a 32 3a 4c 3a 5a 3a 68 3a 73 3a 87 3a 8d 3a 9b 3a a4 3a b5 3a d1 3a  .8.9.9.9.:2:L:Z:h:s:.:.:.:.:.:.:
1006f860  e0 3a f2 3a fb 3a 17 3b 3a 3b 44 3b 4d 3b 69 3b 8c 3b 09 3c 16 3c 74 3c 87 3c ff 3c 06 3d 4e 3d  .:.:.:.;:;D;M;i;.;.<.<t<.<.<.=N=
1006f880  58 3d 1e 3e 28 3e e8 3e 00 3f 07 3f 0f 3f 14 3f 18 3f 1c 3f 45 3f 6b 3f 85 3f 8c 3f 90 3f 94 3f  X=.>(>.>.?.?.?.?.?.?E?k?.?.?.?.?
1006f8a0  98 3f 9c 3f a0 3f a4 3f a8 3f f2 3f f8 3f fc 3f 00 80 04 00 b8 00 00 00 00 30 04 30 6a 30 75 30  .?.?.?.?.?.?.?.?.........0.0j0u0
1006f8c0  90 30 97 30 9c 30 a0 30 a4 30 c1 30 eb 30 1d 31 24 31 28 31 2c 31 30 31 34 31 38 31 3c 31 40 31  .0.0.0.0.0.0.0.1$1(1,1014181<1@1
1006f8e0  8a 31 90 31 94 31 98 31 9c 31 ec 31 ff 31 76 32 83 32 a8 32 c4 32 d7 32 56 33 60 33 7c 33 d1 33  .1.1.1.1.1.1.1v2.2.2.2.2V3`3|3.3
1006f900  1e 35 4a 35 56 35 72 35 8b 35 a5 35 ad 35 be 35 c3 35 d0 35 d5 35 52 36 5a 36 b4 36 c1 36 1f 37  .5J5V5r5.5.5.5.5.5.5.5R6Z6.6.6.7
1006f920  32 37 a6 37 46 38 93 38 ab 38 c0 38 2c 39 32 39 54 39 68 39 9a 39 a1 39 b6 39 e8 39 f2 39 13 3a  27.7F8.8.8.8,929T9h9.9.9.9.9.9.:
1006f940  28 3a 4c 3a 76 3a 84 3a b5 3a bb 3a c8 3a e9 3a 0e 3b 64 3b 73 3b 89 3b b9 3c 73 3d 7d 3e c4 3e  (:L:v:.:.:.:.:.:.;d;s;.;.<s=}>.>
1006f960  e5 3e fc 3e 71 3f 00 00 00 90 04 00 10 01 00 00 39 32 3d 32 41 32 45 32 49 32 4d 32 51 32 55 32  .>.>q?..........92=2A2E2I2M2Q2U2
1006f980  2a 33 32 33 4c 33 52 33 63 33 7c 33 88 33 8e 33 9b 33 ab 33 b1 33 b9 33 d7 33 dd 33 ee 33 05 34  *323L3R3c3|3.3.3.3.3.3.3.3.3.3.4
1006f9a0  0f 34 28 34 8a 34 a2 34 a8 34 b0 34 b6 34 da 34 e8 34 fc 34 1d 35 2a 35 38 35 3e 35 46 35 4e 35  .4(4.4.4.4.4.4.4.4.4.5*585>5F5N5
1006f9c0  56 35 62 35 67 35 73 35 7b 35 83 35 8b 35 a1 35 a9 35 b1 35 b9 35 c1 35 d4 35 dc 35 09 36 24 36  V5b5g5s5{5.5.5.5.5.5.5.5.5.5.6$6
1006f9e0  34 36 3a 36 48 36 53 36 52 37 95 37 cf 37 d5 37 06 38 0d 38 17 38 3d 38 79 38 b1 38 df 38 e7 38  46:6H6S6R7.7.7.7.8.8.8=8y8.8.8.8
1006fa00  41 39 93 39 d2 39 e6 39 f4 39 13 3a 7a 3a 85 3a 97 3a a9 3a c1 3a e5 3a ef 3a f5 3a 05 3b 18 3b  A9.9.9.9.9.:z:.:.:.:.:.:.:.:.;.;
1006fa20  23 3b 34 3b 3e 3b 59 3b 62 3b 67 3b 6e 3b 76 3b 80 3b 8a 3b 90 3b bb 3b c9 3b d8 3b df 3b ea 3b  #;4;>;Y;b;g;n;v;.;.;.;.;.;.;.;.;
1006fa40  f0 3b 47 3c 59 3c 8b 3c a3 3c a8 3c d5 3c ed 3c 80 3d 1e 3e 42 3e 5b 3e 60 3e 7f 3e 8c 3e 99 3e  .;G<Y<.<.<.<.<.<.=.>B>[>`>.>.>.>
1006fa60  a3 3e ad 3e b5 3e c3 3e e1 3e fe 3e 16 3f 36 3f 8e 3f a4 3f d7 3f 00 00 00 a0 04 00 d8 00 00 00  .>.>.>.>.>.>.?6?.?.?.?..........
1006fa80  3f 30 64 30 d1 30 1c 31 3e 31 58 31 7a 31 86 31 91 31 a0 31 aa 31 8f 32 9f 32 d1 32 db 32 2e 33  ?0d0.0.1>1X1z1.1.1.1.1.2.2.2.2.3
1006faa0  35 33 46 33 4c 33 5c 33 63 33 6a 33 72 33 99 33 a5 33 af 33 b7 33 bf 33 c5 33 cd 33 e3 33 f2 33  53F3L3\3c3j3r3.3.3.3.3.3.3.3.3.3
1006fac0  f8 33 ff 33 08 34 0f 34 17 34 1d 34 28 34 30 34 7f 36 8d 36 93 36 ad 36 b2 36 c1 36 c7 36 d7 36  .3.3.4.4.4.4(404.6.6.6.6.6.6.6.6
1006fae0  e2 36 f4 36 07 37 12 37 18 37 1d 37 23 37 30 37 4d 37 53 37 5e 37 64 37 6e 37 74 37 84 37 8a 37  .6.6.7.7.7.7#707M7S7^7d7n7t7.7.7
1006fb00  ce 37 74 38 61 3a 6c 3a 74 3a 87 3a 8d 3a a3 3a aa 3a b0 3a ba 3a c0 3a c5 3a cb 3a db 3a e4 3a  .7t8a:l:t:.:.:.:.:.:.:.:.:.:.:.:
1006fb20  fe 3a 0f 3b 15 3b 28 3b 8a 3b 29 3f 37 3f 4e 3f 54 3f 59 3f 68 3f 6e 3f 7e 3f 89 3f 9b 3f a7 3f  .:.;.;(;.;)?7?N?T?Y?h?n?~?.?.?.?
1006fb40  b5 3f bb 3f c0 3f c6 3f d3 3f ed 3f f3 3f 00 00 00 b0 04 00 b0 00 00 00 03 30 13 30 19 30 2b 30  .?.?.?.?.?.?.?...........0.0.0+0
1006fb60  33 30 52 30 b2 30 da 32 47 33 67 33 71 33 44 34 56 34 74 34 ab 34 b1 34 a9 35 10 36 b8 36 2c 37  30R0.0.2G3g3q3D4V4t4.4.4.5.6.6,7
1006fb80  8b 37 8c 38 9c 38 ad 38 b5 38 c5 38 d6 38 40 39 5b 39 63 39 69 39 6f 39 b0 39 e8 39 fa 39 0d 3a  .7.8.8.8.8.8.8@9[9c9i9o9.9.9.9.:
1006fba0  49 3a 76 3a 81 3a 86 3a 90 3a 95 3a ed 3a f9 3a 00 3b 10 3b 16 3b 1d 3b 27 3b 40 3b 48 3b 4d 3b  I:v:.:.:.:.:.:.:.;.;.;.;';@;H;M;
1006fbc0  59 3b 5e 3b 7b 3b 81 3b b8 3b c7 3b f9 3b 09 3c 4c 3c 58 3c 62 3c 76 3c 84 3c 91 3c 96 3c 9c 3c  Y;^;{;.;.;.;.;.<L<X<b<v<.<.<.<.<
1006fbe0  f7 3c fe 3c 46 3d 8b 3d 6e 3e 87 3e bc 3e c4 3e de 3e ea 3e fa 3e 39 3f 89 3f 9c 3f da 3f f2 3f  .<.<F=.=n>.>.>.>.>.>.>9?.?.?.?.?
1006fc00  00 c0 04 00 90 00 00 00 01 30 13 30 39 30 46 30 54 30 5f 30 72 30 99 30 a8 30 ea 30 fe 30 1c 31  .........0.090F0T0_0r0.0.0.0.0.1
1006fc20  28 31 44 31 59 31 6f 31 76 31 84 31 91 31 9e 31 a6 31 02 37 18 37 27 3a 2f 3a 35 3a 3d 3a a9 3a  (1D1Y1o1v1.1.1.1.1.7.7':/:5:=:.:
1006fc40  c4 3a d3 3a f3 3a f9 3a 00 3b 33 3b 39 3b 49 3b 67 3b 77 3b 92 3b 9f 3b ba 3b c7 3b e2 3b ef 3b  .:.:.:.:.;3;9;I;g;w;.;.;.;.;.;.;
1006fc60  0d 3c 1c 3c 37 3c 44 3c 5f 3c 6c 3c 8a 3c 9a 3c b8 3c c8 3c e6 3c f6 3c 11 3d 33 3d 4d 3d 70 3d  .<.<7<D<_<l<.<.<.<.<.<.<.=3=M=p=
1006fc80  8a 3d cc 3e e3 3e 2e 3f 86 3f a5 3f be 3f ee 3f 00 d0 04 00 d4 00 00 00 16 30 2f 30 74 30 90 30  .=.>.>.?.?.?.?.?.........0/0t0.0
1006fca0  61 31 79 31 ab 31 c3 31 07 33 0b 33 0f 33 13 33 17 33 1b 33 1f 33 23 33 27 33 2b 33 2f 33 33 33  a1y1.1.1.3.3.3.3.3.3.3#3'3+3/333
1006fcc0  79 33 7e 33 9a 33 ad 33 b4 33 c6 33 ce 33 de 33 ef 33 02 34 1a 34 3a 34 90 34 a2 34 e8 34 10 35  y3~3.3.3.3.3.3.3.3.4.4:4.4.4.4.5
1006fce0  16 35 22 35 5d 35 65 35 8e 35 9b 35 a0 35 ad 35 b9 35 cf 35 2d 36 66 36 7b 36 88 36 c5 36 e7 36  .5"5]5e5.5.5.5.5.5.5-6f6{6.6.6.6
1006fd00  ef 36 3b 37 4a 37 63 37 89 37 b7 37 c6 37 e6 37 08 38 35 38 49 38 98 38 a2 38 fe 38 2a 39 31 39  .6;7J7c7.7.7.7.7.858I8.8.8.8*919
1006fd20  57 39 6f 39 89 39 94 39 f1 39 ec 3a 65 3b 71 3b 86 3b 91 3b bf 3b 85 3c 9c 3c ae 3c b6 3c bc 3c  W9o9.9.9.9.:e;q;.;.;.;.<.<.<.<.<
1006fd40  c4 3c 0f 3d 34 3d 46 3d 4c 3d 49 3e 4f 3e 6d 3e 73 3e 1b 3f 29 3f 7a 3f 96 3f a3 3f b0 3f c3 3f  .<.=4=F=L=I>O>m>s>.?)?z?.?.?.?.?
1006fd60  cc 3f d8 3f 00 e0 04 00 2c 01 00 00 0a 30 1c 30 2b 30 4c 30 52 30 73 30 7d 30 88 30 8d 30 95 30  .?.?....,....0.0+0L0R0s0}0.0.0.0
1006fd80  ac 30 c1 30 c7 30 cf 30 d7 30 e2 30 10 31 1c 31 26 31 31 31 3b 31 45 31 4b 31 8e 31 98 31 9d 31  .0.0.0.0.0.0.1.1&111;1E1K1.1.1.1
1006fda0  a2 31 a7 31 c0 31 c6 31 35 32 3b 32 59 32 6a 32 7d 32 92 32 b0 32 be 32 cb 32 db 32 fc 32 08 33  .1.1.1.152;2Y2j2}2.2.2.2.2.2.2.3
1006fdc0  1a 33 28 33 36 33 40 33 47 33 58 33 6f 33 76 33 86 33 8c 33 a8 33 e6 33 ec 33 f7 33 03 34 0c 34  .3(363@3G3X3o3v3.3.3.3.3.3.3.4.4
1006fde0  12 34 16 34 21 34 2c 34 3f 34 46 34 1a 39 23 39 2f 39 40 39 50 39 61 39 76 39 81 39 8c 39 9a 39  .4.4!4,4?4F4.9#9/9@9P9a9v9.9.9.9
1006fe00  a0 39 a6 39 b3 39 ba 39 c7 39 d4 39 e5 39 ea 39 f1 39 f7 39 ff 39 05 3a 0d 3a 17 3a 1c 3a 27 3a  .9.9.9.9.9.9.9.9.9.9.9.:.:.:.:':
1006fe20  32 3a 3d 3a 4a 3a 50 3a 56 3a 61 3a 6b 3a 7a 3a 8d 3a 98 3a b3 3a bb 3a cd 3a d7 3a e0 3a 23 3b  2:=:J:P:V:a:k:z:.:.:.:.:.:.:.:#;
1006fe40  5d 3b 66 3b 71 3b 7d 3b 83 3b 8e 3b 9a 3b a2 3b a8 3b b0 3b b9 3b c1 3b c7 3b cb 3b d6 3b e1 3b  ];f;q;};.;.;.;.;.;.;.;.;.;.;.;.;
1006fe60  f5 3b 52 3d 9e 3d b0 3d bb 3d c0 3d 47 3e 4d 3e 6b 3e f3 3e 35 3f 3d 3f 42 3f 55 3f 5a 3f 6d 3f  .;R=.=.=.=.=G>M>k>.>5?=?B?U?Z?m?
1006fe80  a2 3f a7 3f ac 3f b1 3f bc 3f c8 3f cf 3f 00 00 00 f0 04 00 ac 01 00 00 ef 30 01 31 06 31 0e 31  .?.?.?.?.?.?.?...........0.1.1.1
1006fea0  12 31 24 31 2d 31 34 31 46 31 51 31 58 31 62 31 6b 31 71 31 a9 31 d0 31 e0 31 e6 31 f9 31 03 32  .1$1-141F1Q1X1b1k1q1.1.1.1.1.1.2
1006fec0  21 32 27 32 3c 32 42 32 c1 32 cc 32 d9 32 ec 32 f4 32 fb 32 03 33 0f 33 1a 33 21 33 27 33 2c 33  !2'2<2B2.2.2.2.2.2.2.3.3.3!3'3,3
1006fee0  40 33 61 33 76 33 88 33 ac 33 bc 33 ce 33 e0 33 e8 33 ee 33 f6 33 fe 33 0d 34 1f 34 25 34 2c 34  @3a3v3.3.3.3.3.3.3.3.3.3.4.4%4,4
1006ff00  37 34 42 34 56 34 5d 34 63 34 7d 34 8d 34 97 34 aa 34 bb 34 c4 34 cc 34 d4 34 df 34 ee 34 f5 34  74B4V4]4c4}4.4.4.4.4.4.4.4.4.4.4
1006ff20  04 35 23 35 2a 35 32 35 37 35 4c 35 5f 35 67 35 73 35 7e 35 85 35 8b 35 91 35 9a 35 b9 35 ce 35  .5#5*52575L5_5g5s5~5.5.5.5.5.5.5
1006ff40  d8 35 e7 35 f8 35 04 36 0c 36 1b 36 3a 36 41 36 47 36 4c 36 5f 36 74 36 79 36 7f 36 85 36 8e 36  .5.5.5.6.6.6:6A6G6L6_6t6y6.6.6.6
1006ff60  ad 36 c2 36 cc 36 db 36 f7 36 fe 36 04 37 09 37 1d 37 25 37 2a 37 2f 37 47 37 58 37 7f 37 85 37  .6.6.6.6.6.6.7.7.7%7*7/7G7X7.7.7
1006ff80  9b 37 ac 37 d5 37 f5 37 00 38 37 38 6e 38 94 38 c6 38 d1 38 dc 38 e6 38 f0 38 fa 38 04 39 a0 39  .7.7.7.7.878n8.8.8.8.8.8.8.8.9.9
1006ffa0  e1 39 4a 3a 64 3a 6d 3a 66 3b 76 3b 85 3b c0 3b c7 3b ce 3b d5 3b f2 3b f8 3b 06 3c 0c 3c 16 3c  .9J:d:m:f;v;.;.;.;.;.;.;.;.<.<.<
1006ffc0  1e 3c 24 3c 32 3c 39 3c 40 3c 4c 3c 54 3c 5c 3c 62 3c 6b 3c 7a 3c 81 3c 88 3c 98 3c a3 3c b3 3c  .<$<2<9<@<L<T<\<b<k<z<.<.<.<.<.<
1006ffe0  ba 3c c1 3c d9 3c f0 3c 0b 3d 27 3d 43 3d 4d 3d 7b 3d a2 3d aa 3d ca 3d d2 3d ed 3d f7 3d 02 3e  .<.<.<.<.='=C=M={=.=.=.=.=.=.=.>
10070000  0c 3e 1a 3e 57 3e 70 3e 78 3e 84 3e 91 3e 99 3e a0 3e a8 3e b0 3e ba 3e c3 3e cb 3e d7 3e e0 3e  .>.>W>p>x>.>.>.>.>.>.>.>.>.>.>.>
10070020  f1 3e fb 3e 03 3f 0b 3f 13 3f 1d 3f 26 3f 2e 3f 45 3f 4e 3f 86 3f 8b 3f e4 3f f3 3f 00 00 05 00  .>.>.?.?.?.?&?.?E?N?.?.?.?.?....
10070040  a4 00 00 00 21 30 2c 30 82 30 8a 30 a2 30 ab 30 bd 30 c9 30 dd 30 e8 30 f7 30 08 31 15 31 28 31  ....!0,0.0.0.0.0.0.0.0.0.0.1.1(1
10070060  2e 31 34 31 6d 31 c3 31 d7 31 f7 32 1b 33 24 33 2a 33 36 33 3b 33 45 33 4c 33 54 33 5a 33 61 33  .141m1.1.1.2.3$3*363;3E3L3T3Z3a3
10070080  66 33 77 33 93 33 fc 33 07 34 1e 34 53 34 83 34 8c 34 92 34 9c 34 b3 34 b9 34 c1 34 ea 34 f0 34  f3w3.3.3.4.4S4.4.4.4.4.4.4.4.4.4
100700a0  f8 34 fe 34 06 35 0c 35 37 35 3c 35 46 35 4b 35 bc 35 c1 35 c9 35 ce 35 d6 35 db 35 00 36 05 36  .4.4.5.575<5F5K5.5.5.5.5.5.5.6.6
100700c0  84 36 89 36 a6 36 ac 36 0b 37 a3 39 bd 39 ce 39 eb 39 b0 3d c4 3d 2b 3e 3e 3e 5c 3f 7a 3f ab 3f  .6.6.6.6.7.9.9.9.9.=.=+>>>\?z?.?
100700e0  00 10 05 00 9c 00 00 00 3f 30 d0 30 b4 31 25 33 30 33 3a 33 40 33 46 33 77 33 a9 33 b6 33 53 34  ........?0.0.1%303:3@3F3w3.3.3S4
10070100  5a 34 80 34 85 34 e1 34 e6 34 17 35 1f 35 5b 35 76 35 7b 35 94 35 99 35 d7 35 dc 35 1e 36 26 36  Z4.4.4.4.4.5.5[5v5{5.5.5.5.5.6&6
10070120  40 36 45 36 5b 36 6d 36 f0 36 f8 36 44 37 4e 37 56 37 72 37 7e 37 b6 37 bb 37 2c 38 00 39 61 39  @6E6[6m6.6.6D7N7V7r7~7.7.7,8.9a9
10070140  b3 39 ce 39 e0 39 f6 39 35 3a 8f 3a 0e 3b 53 3b 6e 3b 89 3b e8 3b 79 3c 9a 3c b4 3c d5 3c e3 3c  .9.9.9.95:.:.;S;n;.;.;y<.<.<.<.<
10070160  ee 3c f3 3c 0f 3d 22 3d 29 3d 3b 3d 43 3d 53 3d 6a 3d 82 3d 9d 3d 06 3e 4c 3e 71 3e 00 20 05 00  .<.<.="=)=;=C=S=j=.=.=.>L>q>. ..
10070180  48 01 00 00 69 30 c4 30 ca 30 d8 30 36 31 74 31 7d 31 8a 31 9b 31 f6 31 09 32 60 32 af 32 b4 32  H...i0.0.0.061t1}1.1.1.1.2`2.2.2
100701a0  d0 32 e1 32 f4 32 04 33 1b 33 2f 33 40 33 81 33 a2 33 c2 33 c7 33 e3 33 f4 33 07 34 17 34 2e 34  .2.2.2.3.3/3@3.3.3.3.3.3.3.4.4.4
100701c0  46 34 57 34 9a 34 c0 34 e9 34 fd 34 1f 35 2e 35 8d 35 92 35 b1 35 bc 35 c7 35 d1 35 d9 35 e4 35  F4W4.4.4.4.4.5.5.5.5.5.5.5.5.5.5
100701e0  f2 35 27 36 42 36 59 36 93 36 12 37 6d 37 d2 37 ea 37 59 38 67 38 75 38 84 38 ae 38 b8 38 c9 38  .5'6B6Y6.6.7m7.7.7Y8g8u8.8.8.8.8
10070200  d6 38 5f 39 a4 39 b9 39 f5 39 05 3a cc 3a 26 3b 2c 3b 79 3b 7f 3b 8b 3b b2 3b e3 3b 72 3c 78 3c  .8_9.9.9.9.:.:&;,;y;.;.;.;.;r<x<
10070220  7e 3c 84 3c 8a 3c 90 3c 96 3c 9c 3c a2 3c a8 3c ae 3c b4 3c ba 3c c0 3c c6 3c cc 3c d2 3c d8 3c  ~<.<.<.<.<.<.<.<.<.<.<.<.<.<.<.<
10070240  de 3c e4 3c ea 3c f0 3c f6 3c fc 3c 02 3d 08 3d 0e 3d 14 3d 1a 3d 20 3d 26 3d 2c 3d 32 3d 38 3d  .<.<.<.<.<.<.=.=.=.=.= =&=,=2=8=
10070260  3e 3d 44 3d 4a 3d 50 3d 56 3d 5c 3d 62 3d 68 3d 6e 3d 74 3d 7a 3d 80 3d 86 3d 8c 3d 92 3d 98 3d  >=D=J=P=V=\=b=h=n=t=z=.=.=.=.=.=
10070280  9e 3d a4 3d aa 3d b0 3d b6 3d bc 3d c2 3d c8 3d ce 3d d4 3d da 3d e0 3d e6 3d ec 3d f2 3d f8 3d  .=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=
100702a0  fe 3d 04 3e 0a 3e 10 3e 16 3e 1c 3e 22 3e 28 3e 2e 3e 34 3e 3a 3e 40 3e 62 3e 6d 3e f4 3e 8a 3f  .=.>.>.>.>.>">(>.>4>:>@>b>m>.>.?
100702c0  ad 3f 00 00 00 30 05 00 34 00 00 00 44 30 6f 30 28 31 43 31 8e 31 17 32 1f 32 4f 32 5c 32 69 32  .?...0..4...D0o0(1C1.1.2.2O2\2i2
100702e0  1b 33 2b 33 4f 33 87 33 39 34 85 34 90 34 ca 34 d0 34 d6 34 dc 34 00 00 00 80 05 00 14 00 00 00  .3+3O3.394.4.4.4.4.4.4..........
10070300  04 36 08 36 10 36 14 36 54 39 58 39 00 90 05 00 20 00 00 00 bc 31 c0 31 c8 31 cc 31 d4 31 d8 31  .6.6.6.6T9X9.... ....1.1.1.1.1.1
10070320  e4 31 e8 31 f4 31 f8 31 00 32 04 32 00 a0 05 00 10 00 00 00 0c 33 10 33 14 33 24 36 00 c0 05 00  .1.1.1.1.2.2.........3.3.3$6....
10070340  18 00 00 00 70 30 8c 30 a8 30 c4 30 e0 30 fc 30 3c 31 00 00 00 d0 05 00 64 00 00 00 b0 37 cc 37  ....p0.0.0.0.0.0<1......d....7.7
10070360  e8 37 04 38 20 38 3c 38 58 38 94 38 c8 3b e4 3b 00 3c 1c 3c 38 3c 54 3c 70 3c 8c 3c a8 3c c4 3c  .7.8 8<8X8.8.;.;.<.<8<T<p<.<.<.<
10070380  e0 3c fc 3c 18 3d 34 3d 50 3d 6c 3d 88 3d a4 3d c0 3d dc 3d f8 3d 30 3e 4c 3e 68 3e 84 3e a0 3e  .<.<.=4=P=l=.=.=.=.=.=0>L>h>.>.>
100703a0  bc 3e d8 3e f4 3e 10 3f 2c 3f 48 3f 64 3f 80 3f 9c 3f dc 3f e4 3f 00 00 00 f0 05 00 a0 00 00 00  .>.>.>.?,?H?d?.?.?.?.?..........
100703c0  60 32 64 32 68 32 6c 32 70 32 74 32 78 32 7c 32 80 32 84 32 88 32 8c 32 90 32 94 32 98 32 9c 32  `2d2h2l2p2t2x2|2.2.2.2.2.2.2.2.2
100703e0  a0 32 a4 32 a8 32 ac 32 b0 32 b4 32 b8 32 bc 32 c0 32 c4 32 c8 32 cc 32 00 33 04 33 08 33 0c 33  .2.2.2.2.2.2.2.2.2.2.2.2.3.3.3.3
10070400  00 3e 0c 3e 18 3e 24 3e 30 3e 3c 3e 48 3e 54 3e 60 3e 6c 3e 78 3e 84 3e 90 3e 9c 3e a8 3e b4 3e  .>.>.>$>0><>H>T>`>l>x>.>.>.>.>.>
10070420  c0 3e cc 3e d8 3e e4 3e f0 3e fc 3e 08 3f 14 3f 20 3f 2c 3f 38 3f 44 3f 50 3f 5c 3f 68 3f 74 3f  .>.>.>.>.>.>.?.? ?,?8?D?P?\?h?t?
10070440  80 3f 8c 3f 98 3f a4 3f b0 3f bc 3f c8 3f d4 3f e0 3f ec 3f f8 3f 00 00 00 00 06 00 78 00 00 00  .?.?.?.?.?.?.?.?.?.?.?......x...
10070460  04 30 10 30 1c 30 28 30 34 30 40 30 4c 30 58 30 64 30 c4 37 c8 37 cc 37 70 39 74 39 78 39 7c 39  .0.0.0(040@0L0X0d0.7.7.7p9t9x9|9
10070480  80 39 84 39 88 39 a0 39 a4 39 c4 3b cc 3b d4 3b dc 3b e4 3b ec 3b f4 3b fc 3b 04 3c 0c 3c 14 3c  .9.9.9.9.9.;.;.;.;.;.;.;.;.<.<.<
100704a0  1c 3c 24 3c 2c 3c 34 3c 3c 3c 44 3c 4c 3c 54 3c 5c 3c 64 3c 6c 3c 74 3c 7c 3c 84 3c 8c 3c 94 3c  .<$<,<4<<<D<L<T<\<d<l<t<|<.<.<.<
100704c0  d8 3c e0 3c 84 3f 88 3f 94 3f b4 3f c4 3f d4 3f 00 10 06 00 dc 01 00 00 60 31 68 31 6c 31 70 31  .<.<.?.?.?.?.?.?........`1h1l1p1
100704e0  74 31 78 31 7c 31 80 31 84 31 88 31 8c 31 90 31 94 31 98 31 9c 31 a0 31 a4 31 f4 31 fc 31 04 32  t1x1|1.1.1.1.1.1.1.1.1.1.1.1.1.2
10070500  0c 32 14 32 1c 32 24 32 2c 32 34 32 3c 32 44 32 4c 32 54 32 5c 32 64 32 6c 32 74 32 7c 32 4c 34  .2.2.2$2,242<2D2L2T2\2d2l2t2|2L4
10070520  54 34 78 34 80 34 a4 34 ac 34 d0 34 d8 34 fc 34 04 35 28 35 30 35 54 35 5c 35 80 35 88 35 ac 35  T4x4.4.4.4.4.4.4.5(505T5\5.5.5.5
10070540  b4 35 d8 35 e0 35 04 36 0c 36 30 36 38 36 5c 36 64 36 88 36 90 36 b4 36 bc 36 e0 36 e8 36 0c 37  .5.5.5.6.60686\6d6.6.6.6.6.6.6.7
10070560  14 37 38 37 40 37 64 37 6c 37 90 37 98 37 bc 37 c4 37 e8 37 f0 37 14 38 1c 38 40 38 48 38 6c 38  .787@7d7l7.7.7.7.7.7.7.8.8@8H8l8
10070580  74 38 98 38 a0 38 c4 38 cc 38 f8 38 00 39 08 39 10 39 18 39 20 39 28 39 30 39 38 39 40 39 48 39  t8.8.8.8.8.8.9.9.9.9 9(90989@9H9
100705a0  50 39 58 39 60 39 68 39 70 39 78 39 80 39 88 39 90 39 98 39 a0 39 a8 39 b0 39 b8 39 c0 39 c8 39  P9X9`9h9p9x9.9.9.9.9.9.9.9.9.9.9
100705c0  d0 39 d8 39 e0 39 e8 39 f0 39 f8 39 00 3a 08 3a 10 3a 18 3a 20 3a 28 3a 30 3a 38 3a 40 3a 48 3a  .9.9.9.9.9.9.:.:.:.: :(:0:8:@:H:
100705e0  50 3a 58 3a 60 3a 68 3a 70 3a 78 3a 80 3a 88 3a 90 3a 98 3a a0 3a a8 3a b0 3a b8 3a c0 3a c8 3a  P:X:`:h:p:x:.:.:.:.:.:.:.:.:.:.:
10070600  d0 3a d8 3a e0 3a e8 3a f0 3a f8 3a 00 3b 08 3b 10 3b 18 3b 20 3b 28 3b 30 3b 38 3b 40 3b 48 3b  .:.:.:.:.:.:.;.;.;.; ;(;0;8;@;H;
10070620  50 3b 58 3b 60 3b 68 3b 70 3b 78 3b 80 3b 88 3b 90 3b 98 3b a0 3b a8 3b b0 3b 54 3c 58 3c e4 3c  P;X;`;h;p;x;.;.;.;.;.;.;.;T<X<.<
10070640  e8 3c ec 3c f0 3c f4 3c f8 3c fc 3c 00 3d 04 3d 08 3d 0c 3d 10 3d 14 3d 18 3d 1c 3d 20 3d 24 3d  .<.<.<.<.<.<.=.=.=.=.=.=.=.= =$=
10070660  28 3d 2c 3d 30 3d 34 3d 38 3d 3c 3d 40 3d 44 3d 48 3d 4c 3d 50 3d 54 3d 58 3d 5c 3d 60 3d 64 3d  (=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=
10070680  68 3d 6c 3d 70 3d 74 3d 78 3d 7c 3d 80 3d 84 3d 88 3d 8c 3d 90 3d a0 3d a4 3d a8 3d ac 3d b0 3d  h=l=p=t=x=|=.=.=.=.=.=.=.=.=.=.=
100706a0  b4 3d b8 3d bc 3d c0 3d c4 3d d0 3d 00 20 06 00 10 00 00 00 9c 30 a0 30 a4 30 a8 30 00 00 00 00  .=.=.=.=.=.=. .......0.0.0.0....
100706c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100706e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070700  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070720  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070740  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070780  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100707a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100707c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100707e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070800  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070820  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100708a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100708c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100708e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100709a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100709c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
100709e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070a80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070aa0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070ac0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070ae0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070b00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070b20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070b40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070b60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070b80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070ba0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070bc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070be0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070c00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070c20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070c40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070c60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070d00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070d20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070d40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070d60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070d80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070da0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070dc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
10070de0  00 00 00 00 00 00 00 00 00                                                                       .........
.reloc section ended  {0x1006d000-0x10070de9}

.extern section started  {0x10070df0-0x10070f64}
10070df0  extern BOOL __stdcall CloseHandle(HANDLE hObject)
10070df4  extern enum COMPARESTRING_RESULT __stdcall CompareStringA(uint32_t Locale, uint32_t dwCmpFlags, char* lpString1, int32_t cchCount1, char* lpString2, int32_t cchCount2)
10070df8  extern enum COMPARESTRING_RESULT __stdcall CompareStringW(uint32_t Locale, uint32_t dwCmpFlags, wchar16* lpString1, int32_t cchCount1, wchar16* lpString2, int32_t cchCount2)
10070dfc  extern HANDLE __stdcall CreateFileA(PSTR lpFileName, uint32_t dwDesiredAccess, enum FILE_SHARE_MODE dwShareMode, SECURITY_ATTRIBUTES* lpSecurityAttributes, enum FILE_CREATION_DISPOSITION dwCreationDisposition, enum FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, HANDLE hTemplateFile)
10070e00  extern BOOL __stdcall CreateProcessA(PSTR lpApplicationName, PSTR lpCommandLine, SECURITY_ATTRIBUTES* lpProcessAttributes, SECURITY_ATTRIBUTES* lpThreadAttributes, BOOL bInheritHandles, enum PROCESS_CREATION_FLAGS dwCreationFlags, void* lpEnvironment, PSTR lpCurrentDirectory, STARTUPINFOA* lpStartupInfo, PROCESS_INFORMATION* lpProcessInformation)
10070e04  extern void __stdcall DeleteCriticalSection(CRITICAL_SECTION* lpCriticalSection)
10070e08  extern BOOL __stdcall DeleteFileA(PSTR lpFileName)
10070e0c  extern void __stdcall EnterCriticalSection(CRITICAL_SECTION* lpCriticalSection)
10070e10  extern BOOL __stdcall EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc, uint32_t dwFlags)
10070e14  extern void __stdcall ExitProcess(uint32_t uExitCode) __noreturn
10070e18  extern void __stdcall FatalAppExitA(uint32_t uAction, PSTR lpMessageText)
10070e1c  extern BOOL __stdcall FlushFileBuffers(HANDLE hFile)
10070e20  extern BOOL __stdcall FreeEnvironmentStringsA(PSTR penv)
10070e24  extern BOOL __stdcall FreeEnvironmentStringsW(PWSTR penv)
10070e28  extern BOOL __stdcall FreeLibrary(HMODULE hLibModule)
10070e2c  extern uint32_t __stdcall GetACP()
10070e30  extern BOOL __stdcall GetCPInfo(uint32_t CodePage, CPINFO* lpCPInfo)
10070e34  extern PSTR __stdcall GetCommandLineA()
10070e38  extern uint32_t __stdcall GetCurrentDirectoryA(uint32_t nBufferLength, uint8_t* lpBuffer)
10070e3c  extern HANDLE __stdcall GetCurrentProcess()
10070e40  extern HANDLE __stdcall GetCurrentThread()
10070e44  extern uint32_t __stdcall GetCurrentThreadId()
10070e48  extern uint32_t __stdcall GetDriveTypeA(PSTR lpRootPathName)
10070e4c  extern PSTR __stdcall GetEnvironmentStrings()
10070e50  extern PWSTR __stdcall GetEnvironmentStringsW()
10070e54  extern BOOL __stdcall GetExitCodeProcess(HANDLE hProcess, uint32_t* lpExitCode)
10070e58  extern uint32_t __stdcall GetFileAttributesA(PSTR lpFileName)
10070e5c  extern enum FILE_TYPE __stdcall GetFileType(HANDLE hFile)
10070e60  extern uint32_t __stdcall GetFullPathNameA(PSTR lpFileName, uint32_t nBufferLength, uint8_t* lpBuffer, PSTR* lpFilePart)
10070e64  extern enum WIN32_ERROR __stdcall GetLastError()
10070e68  extern void __stdcall GetLocalTime(SYSTEMTIME* lpSystemTime)
10070e6c  extern int32_t __stdcall GetLocaleInfoA(uint32_t Locale, uint32_t LCType, uint8_t* lpLCData, int32_t cchData)
10070e70  extern int32_t __stdcall GetLocaleInfoW(uint32_t Locale, uint32_t LCType, wchar16* lpLCData, int32_t cchData)
10070e74  extern uint32_t __stdcall GetModuleFileNameA(HMODULE hModule, uint8_t* lpFilename, uint32_t nSize)
10070e78  extern HMODULE __stdcall GetModuleHandleA(PSTR lpModuleName)
10070e7c  extern uint32_t __stdcall GetOEMCP()
10070e80  extern FARPROC __stdcall GetProcAddress(HMODULE hModule, PSTR lpProcName)
10070e84  extern void __stdcall GetStartupInfoA(STARTUPINFOA* lpStartupInfo)
10070e88  extern HANDLE __stdcall GetStdHandle(enum STD_HANDLE nStdHandle)
10070e8c  extern BOOL __stdcall GetStringTypeA(uint32_t Locale, uint32_t dwInfoType, uint8_t* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)
10070e90  extern BOOL __stdcall GetStringTypeW(uint32_t dwInfoType, wchar16* lpSrcStr, int32_t cchSrc, uint16_t* lpCharType)
10070e94  extern void __stdcall GetSystemTime(SYSTEMTIME* lpSystemTime)
10070e98  extern void __stdcall GetSystemTimeAsFileTime(FILETIME* lpSystemTimeAsFileTime)
10070e9c  extern uint32_t __stdcall GetTimeZoneInformation(TIME_ZONE_INFORMATION* lpTimeZoneInformation)
10070ea0  extern uint32_t __stdcall GetUserDefaultLCID()
10070ea4  extern uint32_t __stdcall GetVersion()
10070ea8  extern BOOL __stdcall GetVersionExA(OSVERSIONINFOA* lpVersionInformation)
10070eac  extern HGLOBAL __stdcall GlobalAlloc(enum GLOBAL_ALLOC_FLAGS uFlags, uint32_t dwBytes)
10070eb0  extern HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
10070eb4  extern void* __stdcall GlobalLock(HGLOBAL hMem)
10070eb8  extern BOOL __stdcall GlobalUnlock(HGLOBAL hMem)
10070ebc  extern void* __stdcall HeapAlloc(HANDLE hHeap, enum HEAP_FLAGS dwFlags, uint32_t dwBytes)
10070ec0  extern HANDLE __stdcall HeapCreate(enum HEAP_FLAGS flOptions, uint32_t dwInitialSize, uint32_t dwMaximumSize)
10070ec4  extern BOOL __stdcall HeapDestroy(HANDLE hHeap)
10070ec8  extern BOOL __stdcall HeapFree(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem)
10070ecc  extern void* __stdcall HeapReAlloc(HANDLE hHeap, enum HEAP_FLAGS dwFlags, void* lpMem, uint32_t dwBytes)
10070ed0  extern void __stdcall InitializeCriticalSection(CRITICAL_SECTION* lpCriticalSection)
10070ed4  extern InterlockedDecrement
10070ed8  extern InterlockedIncrement
10070edc  extern BOOL __stdcall IsBadWritePtr(void* lp, uint32_t ucb)
10070ee0  extern BOOL __stdcall IsValidCodePage(uint32_t CodePage)
10070ee4  extern BOOL __stdcall IsValidLocale(uint32_t Locale, enum IS_VALID_LOCALE_FLAGS dwFlags)
10070ee8  extern int32_t __stdcall LCMapStringA(uint32_t Locale, uint32_t dwMapFlags, uint8_t* lpSrcStr, int32_t cchSrc, PSTR lpDestStr, int32_t cchDest)
10070eec  extern int32_t __stdcall LCMapStringW(uint32_t Locale, uint32_t dwMapFlags, wchar16* lpSrcStr, int32_t cchSrc, PWSTR lpDestStr, int32_t cchDest)
10070ef0  extern void __stdcall LeaveCriticalSection(CRITICAL_SECTION* lpCriticalSection)
10070ef4  extern HMODULE __stdcall LoadLibraryA(PSTR lpLibFileName)
10070ef8  extern int32_t __stdcall MultiByteToWideChar(uint32_t CodePage, enum MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, uint8_t* lpMultiByteStr, int32_t cbMultiByte, wchar16* lpWideCharStr, int32_t cchWideChar)
10070efc  extern void __stdcall RaiseException(uint32_t dwExceptionCode, uint32_t dwExceptionFlags, uint32_t nNumberOfArguments, uint32_t* lpArguments) __noreturn
10070f00  extern BOOL __stdcall ReadFile(HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToRead, uint32_t* lpNumberOfBytesRead, OVERLAPPED* lpOverlapped)
10070f04  extern void __stdcall RtlUnwind(void* TargetFrame, void* TargetIp, EXCEPTION_RECORD* ExceptionRecord, void* ReturnValue)
10070f08  extern uint32_t __stdcall SearchPathA(PSTR lpPath, PSTR lpFileName, PSTR lpExtension, uint32_t nBufferLength, uint8_t* lpBuffer, PSTR* lpFilePart)
10070f0c  extern BOOL __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add)
10070f10  extern BOOL __stdcall SetCurrentDirectoryA(PSTR lpPathName)
10070f14  extern BOOL __stdcall SetEndOfFile(HANDLE hFile)
10070f18  extern BOOL __stdcall SetEnvironmentVariableA(PSTR lpName, PSTR lpValue)
10070f1c  extern uint32_t __stdcall SetFilePointer(HANDLE hFile, int32_t lDistanceToMove, int32_t* lpDistanceToMoveHigh, enum SET_FILE_POINTER_MOVE_METHOD dwMoveMethod)
10070f20  extern uint32_t __stdcall SetHandleCount(uint32_t uNumber)
10070f24  extern void __stdcall SetLastError(enum WIN32_ERROR dwErrCode)
10070f28  extern BOOL __stdcall SetStdHandle(enum STD_HANDLE nStdHandle, HANDLE hHandle)
10070f2c  extern void __stdcall Sleep(uint32_t dwMilliseconds)
10070f30  extern BOOL __stdcall TerminateProcess(HANDLE hProcess, uint32_t uExitCode)
10070f34  extern uint32_t __stdcall TlsAlloc()
10070f38  extern BOOL __stdcall TlsFree(uint32_t dwTlsIndex)
10070f3c  extern void* __stdcall TlsGetValue(uint32_t dwTlsIndex)
10070f40  extern BOOL __stdcall TlsSetValue(uint32_t dwTlsIndex, void* lpTlsValue)
10070f44  extern int32_t __stdcall UnhandledExceptionFilter(EXCEPTION_POINTERS* ExceptionInfo)
10070f48  extern void* __stdcall VirtualAlloc(void* lpAddress, uint32_t dwSize, enum VIRTUAL_ALLOCATION_TYPE flAllocationType, enum PAGE_PROTECTION_FLAGS flProtect)
10070f4c  extern BOOL __stdcall VirtualFree(void* lpAddress, uint32_t dwSize, enum VIRTUAL_FREE_TYPE dwFreeType)
10070f50  extern enum WAIT_EVENT __stdcall WaitForSingleObject(HANDLE hHandle, uint32_t dwMilliseconds)
10070f54  extern int32_t __stdcall WideCharToMultiByte(uint32_t CodePage, uint32_t dwFlags, wchar16* lpWideCharStr, int32_t cchWideChar, PSTR lpMultiByteStr, int32_t cbMultiByte, PSTR lpDefaultChar, BOOL* lpUsedDefaultChar)
10070f58  extern BOOL __stdcall WriteFile(HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToWrite, uint32_t* lpNumberOfBytesWritten, OVERLAPPED* lpOverlapped)
10070f5c  extern PSTR __stdcall lstrcpyA(PSTR lpString1, PSTR lpString2)
10070f60  extern int32_t __stdcall lstrlenA(PSTR lpString)
.extern section ended  {0x10070df0-0x10070f64}

.synthetic_builtins section started  {0x10070f70-0x10070f84}
10070f70  extern void* __builtin_memcpy(void* dest, void const* src, uint32_t n)
10070f74  extern void* __builtin_memset(void* s, int32_t c, uint32_t n)
10070f78  extern char* __builtin_strcpy(char* dest, char const* src)
10070f7c  extern char* __builtin_strncpy(char* dest, char const* src, uint32_t n)
10070f80  extern wchar16* __builtin_wcscpy(wchar16* dest, wchar16 const* src)
.synthetic_builtins section ended  {0x10070f70-0x10070f84}

